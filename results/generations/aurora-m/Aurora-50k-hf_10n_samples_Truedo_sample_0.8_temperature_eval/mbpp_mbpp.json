[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    pos = string.find(char)\n    string = string[pos+1:]\n    pos = string.find(char)\n    string = string[0:pos]\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_occ(s,char):\n    return s[1:len(s)-1]", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    if string.startswith(char) and string.endswith(char):\n        return string[1:-1]\n    elif string.startswith(char):\n        return string[1:]\n    elif string.endswith(char):\n        return string[:-1]\n    else:\n        return string\n\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, char):\n    n = len(string)\n    if(n == 0 or char not in string):\n        return string\n    # string is not empty\n\n    string = string.split(char)[1]\n    # string is not empty\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, character):\n    if string == \"\" or character == \"\":\n        return string\n    \n    if string[0] == character:\n        return remove_Occ(string[1:], character)\n    if string[-1] == character:\n        return remove_Occ(string[:-1], character)\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str,ch):\n    return str[1:-1]", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s,c):\n\ts=list(s)\n\ts.remove(c)\n\ts.remove(c)\n\treturn \"\".join(s)\n\n#Test Case", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n# Solution 1\n\ndef remove_Occ(string, occ):\n    string = string.lstrip()\n    string = string.rstrip()\n    return string[len(string) - 1] + string[1:len(string) - 1] + string[len(string) - 2]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s,c):\n    if len(s) > 1:\n        if c in s:\n            return s.replace(c, '')\n        else:\n            return s\n    elif len(s) == 1:\n        if c in s:\n            return \"\"\n        else:\n            return s\n    else:\n        return s", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s,c):\n    return s[1:len(s)-1]\n    \ndef remove_occ_2(s,c):\n    return s.replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c,\"\").replace(c"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # matrix = list(map(list, matrix))\n    # matrix.sort(key = lambda row: sum(row))\n    for i in range(len(matrix)):\n        matrix[i].sort()\n    return matrix", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\nimport numpy as np\n\ndef sort_matrix(matrix):\n\n    assert isinstance(matrix, list)\n    assert all(isinstance(row, list) for row in matrix)\n    assert all(len(row) == len(matrix[0]) for row in matrix)\n\n    rows_sum = [sum(row) for row in matrix]\n    return sorted(matrix, key=lambda row: rows_sum.index(sum(row)))", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nfrom __future__ import division\nfrom __future__ import print_function\n\ndef sort_matrix(matrix):\n    assert isinstance(matrix, list), \"list is required\"\n    assert len(matrix) > 0, \"list is not empty\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if j == 0:\n                matrix[i][j] += matrix[i][0]\n            else:\n                matrix[i][j] += matrix[i][j - 1]\n    return matrix\n\ndef test_function(matrix):\n    print(sort_matrix(matrix))\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    for row in range(len(matrix)):\n        matrix[row].sort()\n    return matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix: list) -> list:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    \"\"\"\n    matrix.sort(key=lambda row: sum(row))\n    return matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    pass\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n# This is a very simple solution which uses a sorting algorithm\ndef sort_matrix(matrix):\n    sorted_matrix = []\n    for row in matrix:\n        sorted_matrix.append(sorted(row))\n\n    return sorted_matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    sorted_matrix = []\n    for row in matrix:\n        sum_row = sum(row)\n        sorted_matrix.append((sum_row, row))\n\n    sorted_matrix.sort(reverse=True)\n    for i in range(len(sorted_matrix)):\n        sorted_matrix[i] = sorted_matrix[i][1]\n\n    return sorted_matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\nimport unittest\n\ndef sort_matrix(matrix):\n    for row in range(len(matrix)):\n        for col in range(row + 1, len(matrix[row])):\n            matrix[row], matrix[col] = matrix[col], matrix[row]\n    for row in range(len(matrix)):\n        for col in range(0, len(matrix[row]) - 1):\n            matrix[row][col], matrix[row][col + 1] = matrix[row][col + 1], matrix[row][col]\n    return matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    matrix.sort(key=lambda x: sum(x))\n    return matrix\n\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"Returns a list of the most common words in the list of words\"\"\"\n    dict = {}\n    for word in words:\n        if word in dict:\n            dict[word] += 1\n        else:\n            dict[word] = 1\n    return sorted(dict.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n# found 14/14 cases\ndef count_common(words):\n    dictionary = {}\n    for word in words:\n        if word not in dictionary.keys():\n            dictionary[word] = 1\n        else:\n            dictionary[word] = dictionary[word] + 1\n    return sorted(dictionary.items(), key = lambda x:x[1], reverse = True)", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    dict = {}\n    for w in words:\n        if w not in dict:\n            dict[w] = 1\n        else:\n            dict[w] += 1\n    return [(word, count) for word, count in dict.items() if count > 1]\n\n\n# What are the best classes for the following classes?\n# assert {1:1, 2:2, 3:3}.items() == [(1, 1), (2, 2), (3, 3)]\n# assert {1:1, 2:2, 3:3}.values() == [1, 2, 3]\n# assert {1:1, 2:2, 3:3}.keys() == [1, 2, 3]\n# assert {1:1, 2:2, 3:3}.pop(2) == 2\n# assert {1:1, 2:2, 3:3}.popitem() == (2, 2)\n# assert {1:1, 2:2, 3:3}.clear()\n# assert {1:1, 2:2, 3:3}.setdefault(1, 2) == 1\n# assert {1:1, 2:2, 3:3}.update({2:2, 3:3, 4:4})\n# assert {1:1, 2:2, 3:3}.copy() == {1:1, 2:2, 3:3}\n# assert {1:1, 2:2, 3:3}.get(2) == 2\n# assert {1:1, 2:2, 3:3}.setdefault(1, 2).get(2) == ", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    True\n    \"\"\"\n    # your code here\n    return None # just an example", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    from collections import defaultdict\n    from collections import Counter\n    \n    d = defaultdict(Counter)\n    \n    for word in words:\n        d[word][1]+=1\n\n    return d\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    \"\"\"\n    :param words: a list of words\n    :return: a list of the most common words and their frequencies\n    \"\"\"\n    # sort the words in decreasing order\n    words.sort(key=lambda w: -len(w))\n    common_words = []\n    while words:\n        word = words.pop()\n        if word in common_words:\n            continue\n        common_words.append(word)\n        count = 1\n        while words and word == words[-1]:\n            words.pop()\n            count += 1\n        common_words.append((word, count))\n    return common_words\n\n\ndef test():\n    print(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(mylist):\n    \"\"\"\n    mylist: list of words\n    returns: list of (word, number of times it appears) tuples\n    \"\"\"\n    # This is a dictionary of words as keys and a count of how often they occur in the list as values.\n    d = dict()\n    for word in mylist:\n        if word not in d:\n            d[word] = 1\n        else:\n            d[word] += 1\n    return [(word, d[word]) for word in d]\n\ndef test_count_common():\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n#Problem 11", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"Write a function to count the most common words in a dictionary.\"\"\"\n    # 'Use a Counter to count the number of times each word appears.'\n    # 'count = Counter(words)'\n    count = Counter(words)\n    return count.most_common()\n\n# 'Test your function'", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    # my_dict = {}\n    # for word in words:\n    #     if word not in my_dict:\n    #         my_dict[word] = 1\n    #     else:\n    #         my_dict[word] += 1\n\n    # sorted_dict = sorted(my_dict, key = lambda i: my_dict[i], reverse = True)\n    # return [(i, my_dict[i]) for i in sorted_dict]\n\n    # hashmap = {}\n    # for word in words:\n    #     hashmap[word] = hashmap.get(word, 0) + 1\n    # return [(i, hashmap[i]) for i in hashmap if hashmap[i] >= 3]\n\n    # my_dict = collections.Counter(words)\n    # return [(i, my_dict[i]) for i in my_dict if my_dict[i] >= 3]\n\n    # my_dict = {}\n    # for word in words:\n    #     if word not in my_dict:\n    #         my_dict[word] = 1\n    #     else:\n    #         my_dict[word] += 1\n\n    # return my_dict\n\n    return collections.Counter(words).most_common()\n\n# print(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))\n\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_volume(a,b,c):\n    # initializing the variables\n    h = (a+b+c)/2\n    s = a*b*c/6\n    vol = (1/3)*h*s\n    return vol\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\nimport math\n\ndef find_Volume(a,b,h):\n    \"\"\"\n    This function finds the volume of a triangular prism.\n\n    Parameters:\n    a -- base length\n    b -- base length\n    h -- height\n\n    Return:\n    volume of the triangular prism\n    \"\"\"\n    volume = 1/3*a*b*h\n    return volume\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    return(a*b*c)\n\na=int(input('Enter the first base:'))\nb=int(input('Enter the second base:'))\nc=int(input('Enter the third base:'))\n\nfind_Volume(a,b,c)\n\n# +\n#Write a python function to find the area of a triangle\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base,height,width):\n    return base*height*width\n\ndef test_find_Volume():\n    assert find_Volume(10,8,6) == 240\n\n\n# The function below accepts a list of numbers and returns the sum of the elements in the list\n# that are divisible by two.", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n#function for finding the volume of a triangular prism\ndef find_Volume(x,y,z):\n    return (x*y*z)/2\n\n#print output", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,h):\n    return(a*b*h)\n\na = int(input(\"Enter the a value: \"))\nb = int(input(\"Enter the b value: \"))\nh = int(input(\"Enter the h value: \"))\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    return a * b * c\n\n# Test your function here\n\ndef test_function():\n    assert find_Volume(10,8,6) == 240\n\ntest_function()\n\n# -\n\n# ## Problem 2: Write a python function to find the sum of the first n odd numbers.\n\n# +\n# # %load solutions/solution2.py\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_volume(a,b,h):\n    '''\n    This function finds the volume of a triangular prism.\n    '''\n    return 1/3*(a*h)\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(height,base1,base2):\n    volume = (base1*height)/2\n    return volume\n\n#solution\n\n#input\n\n#executing"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(str):\n    if str.lower().startswith(\"ab\"):\n        return str[2:].split()\n    else:\n        return str.split()\n\ndef test():\n    assert split_lowerstring(\"AbCd\")==['bC','d']\ntest()\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    string = string.split(string.lower())\n    return string\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    \"\"\"\n    #Your code goes here\n    \"\"\"\n    return None\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(str):\n    new_str = []\n    for i in range(len(str)):\n        if i>0 and str[i].islower() and str[i-1].isupper():\n            new_str.append(str[i])\n    return new_str\n\ndef split_upperstring(str):\n    new_str = []\n    for i in range(len(str)):\n        if i>0 and str[i].isupper() and str[i-1].islower():\n            new_str.append(str[i])\n    return new_str\n\ndef test_split_lowerstring():\n    assert split_lowerstring(\"AbCd\")==['bC','d']\n\ndef test_split_upperstring():\n    assert split_upperstring(\"ABcd\")==['aB','cd']", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(word):\n    return word.split(\"a\")\n# test", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    result=[]\n    index=0\n    for c in s:\n        if c.islower():\n            result.append(s[index:c.index(' ')])\n            index=c.index(' ')\n    result.append(s[index:])\n    return result", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    split_s = []\n    for letter in s:\n        if letter.isalpha() and letter.islower():\n            split_s.append(letter)\n    split_s = ''.join(split_s)\n    return split_s.split()\n\n\ndef test_split_lowerstring():\n    assert split_lowerstring(\"AbCd\")==['bC','d']", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    return s.split('a')\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return re.split(\"[a-z]+\",string)", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(str):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    splitted_str = []\n    for i in range(len(str)):\n        if (str[i].isalpha() and str[i].islower()):\n            splitted_str.append(str[i:])\n        else:\n            splitted_str.append(str[i:])\n            break\n    return splitted_str\n\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if not text or len(text) == 0:\n        return 'None'\n    for i in range(len(text)-1):\n        if text[i].isalpha() and text[i+1] == '_':\n            return 'Found a match!'\n    return 'None'", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    matches = []\n    for i in range(len(text)):\n        for j in range(i, len(text)):\n            if text[i].islower() and text[j].islower() and text[j] == '_':\n                matches.append(text[i:j+1])\n    return matches\n\ntext_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    matches = []\n    for i in range(len(text)):\n        for j in range(i, len(text)):\n            sub_string = text[i:j+1]\n            if sub_string.islower() and '_' in sub_string:\n                matches.append(sub_string)\n    if matches:\n        return \"Found a match!\"\n    return \"No matches found\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    found = False\n    for i in range(len(text)):\n        for j in range(i, len(text)):\n            if text[i] == text[j] and text[i].islower():\n                found = True\n                underscore = '_'\n                seq = text[i:j+1]\n                if seq.count('_') == 1:\n                    return seq\n    if not found:\n        return 'No match'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    text_list = list(text.lower())\n    for i in range(len(text_list)):\n        if text_list[i] in \"_\":\n            continue\n        if text_list[i].isalpha():\n            continue\n        if text_list[i+1] in \"_\":\n            continue\n        if text_list[i+1].isalpha():\n            continue\n        print(\"Found a match!\")\n        return True\n    print(\"No matches found!\")\n    return False\n\n# test your function here\n# text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n# text_lowercase_underscore(\"I don't think there's a match\")\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(str):\n    # Start with an empty string\n    mystr = \"\"\n    # Check for any letters that are not _\n    for i in range(len(str)):\n        if str[i] not in ['_']:\n            # If the next letter is a _, the letter is not uppercase\n            if str[i+1] in ['_']:\n                # If the letter before is not lowercase\n                if str[i-1] not in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n                    # Add the letter to the string\n                    mystr += str[i]\n                # If the letter before is lowercase\n                else:\n                    # Add the letter to the string\n                    mystr += str[i].upper()\n            # If the next letter is not a _, the letter is uppercase\n            else:\n                # If the letter before is not lowercase\n                if str[i-1] not in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n                    # Add the letter to the string\n                    mystr += str[i].upper()\n                # If the letter before is lowercase\n                else:\n                    # Add the letter to the string\n                    mystr += str[i]\n    # If a match is found\n    if mystr in [\"ab\", \"ab_\", \"ab_c\", \"ab_cb\", \"ab_cb_\"]:\n        return \"Found a match!\"\n    else:\n        return \"Did not find a match\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    text = text.lower()\n    words = text.split()\n    if any(x.startswith('_') for x in words):\n        print(\"Found a match!\")\n        return 1\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    result = False\n    for word in text.split(\" \"):\n        word = word.lower()\n        word = word.replace('\"', '_')\n        if \"_\" in word:\n            result = True\n            break\n    if result:\n        return \"Found a match!\"\n    else:\n        return \"Not Found!\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    # split the words\n    words = text.split()\n    # count the number of lowercase letters\n    count = 0\n    # check if first letter is lowercase\n    if words[0][0].islower():\n        count += 1\n    # check if last letter is lowercase\n    if words[-1][-1].islower():\n        count += 1\n    # check if any letter between is lowercase\n    for i in range(1, len(words)-1):\n        if words[i][0].islower() and words[i][-1].islower():\n            count += 1\n    # if count is even, return \"Found a match!\"\n    if count % 2 == 0:\n        return \"Found a match!\"\n    # else return \"Try again!\"\n    else:\n        return \"Try again!\"\n\n# tests", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n# ANSWER #2\ndef text_lowercase_underscore(text):\n    \"\"\"Return the message if a word is found with an underscore character.\n    Return 'No matches found.' if no word found.\n    \"\"\"\n    for word in text.split():\n        if word.find('_') > -1:\n            return 'Found a match!'\n        else:\n            pass\n    return 'No matches found.'\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(a):\n    return a*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(x):\n    if x >= 0:\n        perimeter = 2 * x + 2\n    else:\n        perimeter = 2 * x - 2\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(a):\n    return a*a\n\ndef test():\n    assert square_perimeter(10)==40\n    print(\"Passed!\")\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(size):\n    return size*2\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side):\n    return 4 * side\n\nsquare_perimeter(10)\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    assert n>0\n    return 4*n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(x):\n    \"\"\"\n    This function finds the perimeter of a square\n    \"\"\"\n    return 2*x\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(s):\n    return s*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side_length):\n    return side_length * 4\n\n#assert square_perimeter(10)==40", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    assert type(side) is int\n    perimeter = 2*side\n    assert type(perimeter) is int\n    return perimeter"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    s1 = list(str1)\n    s2 = list(str2)\n    s3 = []\n    for i in range(len(s1)):\n        if s1[i] not in s2:\n            s3.append(s1[i])\n\n    return ''.join(s3)\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    \"\"\"\n    :param s1: String\n    :param s2: String\n    :return: String\n    \"\"\"\n    if s1 == '':\n        return s1\n    s = s1[0]\n    for i in range(1, len(s1)):\n        if s1[i] not in s2:\n            s += s1[i]\n    return s", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    return ''.join([i for i in s1 if i not in s2])\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1, s2):\n    for char in s1:\n        if char not in s2:\n            return s1\n\n# Enter the string1 =\nstring1 = \"probasscurve\"\n\n# Enter the string2 =\nstring2 = \"pros\"\n\n# Calling the function", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(first, second):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # initialize final string\n    cleaned = ''\n    # iterate over first string\n    for letter in first:\n        # if letter is in second string\n        if letter in second:\n            # remove the letter from final string\n            cleaned += letter\n    # return final string\n    return cleaned\n\n#Below is an example usage:\n\nimport string\n\ndef remove_dirty_chars(first, second):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # initialize final string\n    cleaned = ''\n    # iterate over first string\n    for letter in first:\n        # if letter is in second string\n        if letter in second:\n            # remove the letter from final string\n            cleaned += letter\n    # return final string\n    return cleaned\n\n# Enter the first string\nfirst = \"probasscurve\"\n\n# Enter the second string\nsecond = \"pros\"\n\n# Calling the function", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    return \"\".join(ch for ch in str1 if ch not in str2)\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# Recursive solution\n# time complexity: O(2n), n is the number of characters in the string\n# space complexity: O(1)\n\ndef remove_dirty_chars(string1, string2):\n    if len(string1) == 0:\n        return \"\"\n    if string1[0] in string2:\n        return remove_dirty_chars(string1[1:], string2) + string1[0]\n    return remove_dirty_chars(string1[1:], string2) + string1[0]", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    return_string = \"\"\n    for c in string1:\n        if c not in string2:\n            return_string += c\n    return return_string\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1, s2):\n    assert s1 == remove_dirty_chars(s2, s1)\n    assert len(s1) <= len(s2)\n    new_s1 = \"\"\n    for c in s1:\n        if c not in s2:\n            new_s1 += c\n    return new_s1\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    output = ''\n    for char in str1:\n        if char not in str2:\n            output += char\n    return output\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(list_input):\n    \"\"\"\n    :param list_input: A list of integers.\n    :return: A boolean.\n    \"\"\"\n    # Write your solution here.\n    dict_set = set(list_input)\n    if len(dict_set) != len(list_input):\n        return True\n    else:\n        return False\n\ntest_duplicate([1,2,3,4,5])", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]==arr[i+1]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(nums):\n    return bool(len(nums) != len(set(nums)))\n\ndef test_duplicate_using_set(nums):\n    return not len(nums) != len(set(nums))\n\ndef test_duplicate_using_dictionary(nums):\n    dic = {}\n    for i in nums:\n        if i in dic:\n            return True\n        else:\n            dic[i] = 1\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(input_list):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    return any(x in input_list for x in range(len(input_list)) if input_list.count(x) > 1)\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(array):\n    return True if len(array) != len(set(array)) else False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(input):\n    pass", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\nimport collections\n\ndef test_duplicate(arr):\n    return len(set(arr)) != len(arr)\n\n#assert test_duplicate(([1,2,3,4,5]))==False\n\n\n# Time complexity is O(n). \n# The time complexity of the set() function is O(n).\n# We are using the set() function to eliminate the duplicates.\n\n# Space complexity is O(1).", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(list_of_values):\n    count = 0\n    for i in range(len(list_of_values)):\n        if list_of_values[i] in list_of_values[i+1:]:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n\nlist_of_values = [1,2,3,4,5]", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(array):\n    try:\n        array.remove(array[0])\n        return True\n    except:\n        return False\n\ndef test():\n    \"\"\"\n    Run tests\n    \"\"\"\n    testcases = [\n        ([1,2,3,4,5], False),\n        ([1,2,3,4,5,5], True),\n        ([1,2,3,4,5,5,5], True)\n    ]\n    for testcase in testcases:\n        print(test_duplicate(testcase[0]))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate([1,2,3,4,5]):\n    return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num % 11 == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    # code here\n    if (number % 3 == 0) or (number % 5 == 0):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(num):\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if num_str[i] == num_str[len(num_str)-i-1]:\n            continue\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(num):\n    if num % 13 == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    # Given number is a string. Convert it to an integer.\n    n = int(n)\n    # Since the given number is a palindrome, it is an odd number. \n    if n%2 == 1:\n        if n < 10:\n            return True\n        if n % 10 == 5:\n            return True\n        # If it is not an odd number, it is not a woodball number.\n        else:\n            return False\n    else:\n        # If it is an even number, it is not a woodball number.\n        return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    \"\"\"\n    Checks if the given number is woodall or not.\n    \"\"\"\n    sum_digits = sum([int(d) for d in str(num)])\n    if sum_digits == num:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# my solution\ndef is_woodall(number):\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\n# a better solution\ndef is_woodall(number):\n    return all(number % i != 0 for i in range(2, int(number/2)))\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    if n%3 == 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(number):\n    number_list = [i for i in str(number)]\n    if len(number_list) != 4:\n        return False\n    for i in range(len(number_list)-1):\n        if number_list[i+1] == str(int(number_list[i]) + 1):\n            pass\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    if n == 1:\n        return True\n    elif n < 1 or not isinstance(n, int):\n        return False\n    elif 2 <= n % 2 == 0:\n        return False\n    else:\n        return is_woodall(n-2)\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    return [n*i for i in range(0,m)]\n\n\n# +", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(m, n):\n    return [i*n for i in range(m)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n# Your solution goes here\n# List comprehension to calculate multiples of num\n# Return the list\n\n\ndef multiples_of_num(n, m):\n    numbers = list()\n    for num in range(m, n + 1):\n        numbers.append(num)\n    return numbers\n\n\ndef test():\n    assert multiples_of_num(4, 3) == [3, 6, 9, 12]\n    assert multiples_of_num(1, 5) == [5]\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(num,m):\n    multiples = []\n    for i in range(m):\n        multiples.append(num*i)\n    return multiples\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n\treturn [i*n for i in range(1,m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    \"\"\"\n    Write a function to find m number of multiples of n.\n    assert multiples_of_num(4,3)== [3,6,9,12]\n    \"\"\"\n    out = []\n    i = 1\n    while i <= m:\n        if n*i:\n            out.append(n*i)\n            i = i+1\n        else:\n            break\n    return out\n\ndef main():\n    assert multiples_of_num(4,3)== [3,6,9,12]\n    assert multiples_of_num(7,3)== [21,28,35]\n    assert multiples_of_num(2,1)== [2]\n    assert multiples_of_num(2,0)== []\nmain()", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(1,m+1)]\n\n#Test cases\n#print(multiples_of_num(5,3))\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(num,m):\n    \"\"\"\n    :param num: int\n    :param m: int\n    :return: list of int\n    \"\"\"\n    result = []\n    for i in range(num,num+m):\n        result.append(i)\n    return result\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(m,n):\n    return [x for x in range(n,m*n+1,n)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(num, m):\n    numbers = []\n    for i in range(0,num+1,m):\n        numbers.append(i)\n    return numbers\n\n#test case\ndef test_multiples_of_num():\n    assert multiples_of_num(10,3)==[3,6,9,12,15,18,21,24,27,30]\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(array: list) -> int:\n    \"\"\"\n    O(n) time | O(n) space\n    \"\"\"\n    for i, num in enumerate(array):\n        if array[num] == num:\n            continue\n        array[num], array[i] = array[i], array[num]\n\n    for i, num in enumerate(array):\n        if array[num] == num:\n            return i\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(array):\n    if len(array)==1:\n        return array[0]\n    if len(array)<=1:\n        return None\n    if len(set(array))==len(array):\n        return None\n    return array[0]\n\n\ndef test_find_first_duplicate():\n    assert find_first_duplicate((1,2,3,4,4,5))==4\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    if len(arr) <= 0:\n        raise ValueError('empty array')\n    arr.sort()\n    for i in range(len(arr)):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            return arr[i]\n    return None", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nfrom typing import List\n\n\ndef find_first_duplicate(arr: List[int]) -> int:\n    for i in range(len(arr)):\n        if arr[i] == arr[arr[i]]:\n            return arr[i]\n\n    return None\n\n\ndef find_first_duplicate2(arr: List[int]) -> int:\n    seen = set()\n\n    for i, value in enumerate(arr):\n        if value in seen:\n            return value\n        seen.add(value)\n\n    return None\n\n\ndef find_first_duplicate3(arr: List[int]) -> int:\n    seen = set()\n\n    for i, value in enumerate(arr):\n        if value in seen:\n            return i\n        seen.add(value)\n\n    return None\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if i != arr[i]:\n            return i\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(array):\n    hash_table = {}\n    for elem in array:\n        if elem not in hash_table:\n            hash_table[elem] = 1\n        else:\n            return elem\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(integers):\n    for i in range(len(integers)):\n        for j in range(i+1,len(integers)):\n            if integers[i] == integers[j]:\n                return integers[i]\n\ndef test_find_first_duplicate():\n    assert find_first_duplicate([1, 2, 3, 4, 4, 5]) == 4\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(array: list):\n    for i, val in enumerate(array):\n        if i+1 != array[i]:\n            return array[i]\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(nums):\n    \"\"\"\n    \u8fd9\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\n    :param nums:\n    :return:\n    \"\"\"\n    length = len(nums)\n    for i in range(1, length):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n        # print(nums)\n\n# print(find_first_duplicate([1, 2, 3, 4, 4, 5]))\n# print(find_first_duplicate([1, 2, 3, 4, 4, 5, 5]))", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nimport random\n\ndef find_first_duplicate(nums):\n    \"\"\"\n    write your code here\n    \"\"\"\n    if not nums:\n        return None\n\n    n = len(nums)\n    # if the number of elements is 2, we return the first item\n    if n == 2:\n        return nums[1]\n\n    # init hash_table\n    hash_table = dict()\n\n    for i in range(n):\n        # if the item exists in the hash_table, then return the key\n        if hash_table.get(nums[i]):\n            return hash_table[nums[i]]\n\n        # put the item in the hash_table\n        hash_table[nums[i]] = i\n\n    return None\n\ndef test():\n    print('find_first_duplicate')\n    print(find_first_duplicate([1, 2, 3, 4, 5]))\n    print(find_first_duplicate([1, 2, 3, 4, 4, 5]))\n    print(find_first_duplicate([1, 1, 1, 1, 1]))\n    print(find_first_duplicate([1, 1, 1, 1, 2]))\n    print(find_first_duplicate([1, 2, 3, 4]))\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list):\n    max_sum = 0\n    for i in range(len(list)):\n        for j in range(len(list[i])):\n            max_sum = max(max_sum,list[i][j])\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\n#maximum_sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])\n\ndef maximum_Sum(lst):\n    i = len(lst)\n    j = len(lst[0])\n    maxSum = 0\n    for x in range(0, i):\n        for y in range(0, j):\n            if lst[x][y] != 0:\n                if maxSum < (lst[x][y] + maximum_Sum(lst[:x] + lst[x+1:])):\n                    maxSum = (lst[x][y] + maximum_Sum(lst[:x] + lst[x+1:]))\n    return maxSum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_sum(A):\n    #sum of a list of list\n    #each sublist is sorted, so sum of each sublist is calculated\n    return max(sum(x) for x in A)\n\nA = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(input_list):\n    max = -100\n    for i in range(len(input_list[0])):\n        arr = []\n        for j in range(len(input_list)):\n            arr.append(input_list[j][i])\n        max = max(max,sum(arr))\n    return max", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(lst):\n    max_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            temp_sum = sum(lst[i]) + sum(lst[j])\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    if len(lst) > 0:\n        for i in range(len(lst[0])):\n            temp = 0\n            for j in range(len(lst)):\n                temp = temp + lst[j][i]\n            if temp > max_sum:\n                max_sum = temp\n    return max_sum\n\ndef main():\n    lst = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]\n    print(maximum_Sum(lst))\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(l):\n    #l = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]\n    sum1 = []\n    for i in l:\n        sum1.append(sum(i))\n    return max(sum1)\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(l):\n    max = 0\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            if max < l[i][j]:\n                max = l[i][j]\n    return max\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list_of_list):\n    max_ = -1\n    for i in range(len(list_of_list)):\n        for j in range(len(list_of_list[i])):\n            max_ = max(max_,list_of_list[i][j])\n    return max_\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_sum(list_of_lists):\n    max_sum = 0\n    for i in list_of_lists:\n        if len(i) > 0:\n            max_sum += max(i)\n    return max_sum\n\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(num):\n    \"\"\"\n    :param num: Integer\n    :return: Integer\n    \"\"\"\n    num_copy = num\n    num_str = ''\n    while num_copy != 0:\n        num_str = str(num_copy % 10) + num_str\n        num_copy = num_copy // 10\n    return int(num_str)\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\n# +\nimport sys\n\n\ndef binary_to_decimal(binary):\n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n    assert isinstance(binary, (int, type(None)))\n    if isinstance(binary, (int)):\n        if sys.version_info[0] > 2:\n            return int(binary, 2)\n        else:\n            return int(binary, 2)\n    else:\n        return 0\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(bin):\n\t\"\"\"\n\t:param bin: A binary number\n\t:return: A decimal equivalent\n\t\"\"\"\n\tdecimal = 0\n\tfor index, bit in enumerate(bin):\n\t\tif bit == '1':\n\t\t\tdecimal += 2**(len(bin)-index-1)\n\treturn decimal", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\nimport math\nimport functools\n\n\ndef binary_to_decimal(number: int) -> int:\n    \"\"\"\n    A function to convert the given binary number to its decimal equivalent.\n    :param number: The binary number to convert to decimal.\n    :return: The decimal equivalent of the given binary number.\n    \"\"\"\n    binary_string = format(number, 'b')\n    return functools.reduce(lambda sum, x, p=math.pow(2, len(binary_string)): p * sum + int(x), binary_string[::-1], 0)\n\n\n# Input:\n#  number = 100\n# Output:\n#  4", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(x):\n    res = 0\n    for i in range(len(x)):\n        res += int(x[len(x) - i - 1]) * 2 ** i\n\n    return res\n\n\ndef main():\n    assert binary_to_decimal(100) == 4\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary: int):\n    \"\"\"\n    Convert binary to decimal\n\n    :param binary: Binary\n    :return: Decimal\n    \"\"\"\n    decimal = 0\n    for i, digit in enumerate(reversed(binary)):\n        decimal += int(digit) << (i*2)\n    return decimal\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(num):\n    \"\"\"\n    >>> binary_to_decimal(100)\n    4\n    >>> binary_to_decimal(3)\n    1\n    >>> binary_to_decimal(1)\n    1\n    \"\"\"\n    return sum([2**i for i, digit in enumerate(bin(num)[2:])])\n\ndef test_binary_to_decimal():\n    assert binary_to_decimal(100) == 4\n    assert binary_to_decimal(3) == 1\n    assert binary_to_decimal(1) == 1\n\ndef decimal_to_binary(num):\n    \"\"\"\n    >>> decimal_to_binary(4)\n    '100'\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(10)\n    '1010'\n    \"\"\"\n    return bin(num)[2:]\n\ndef test_decimal_to_binary():\n    assert decimal_to_binary(4) == '100'\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(10) == '1010'\n\ndef binary_to_base_n(num, base):\n    \"\"\"\n    >>> binary_to_base_n(100, 3)\n    '21'\n    >>> binary_to_base_n(3, 3)\n    '11'\n    \"\"\"\n    return \"\".join(base[binary_to_decimal(digit)] for digit in num)\n\ndef test_binary_to_base_n():\n    assert binary_to_base_n(100, 3) == '21'\n    assert binary_to_base_n(3, 3) == '11'\n\ndef base_n_to_binary(num, base):\n    \"\"\"\n    >>> base_n_to_binary(21, 3)\n    '100'\n    >>> base_n_to_binary(11, 3)\n    '011'\n    \"\"\"\n    return \"\".join(binary_to_decimal(base[digit]) for digit in num)\n\ndef test", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\nfrom typing import Union\n\n\ndef binary_to_decimal(binary: Union[str, int]) -> int:\n    if isinstance(binary, str):\n        binary = int(binary, 2)\n    return binary\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    result = 0\n    for i in range(len(num)):\n        result = result * 2 + num[i] - '0'\n    return result\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(n):\n    \"\"\"\n    Recursive function that converts a binary number to a decimal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + binary_to_decimal(n // 10)"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr, n):\n    \"\"\"\n    Time Complexity = O(n)\n    Space Complexity = O(n)\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n        if product >= n:\n            break\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n# SOLUTION\ndef find_Product(arr, k):\n    products = []\n    for i in arr:\n        for j in arr:\n            if i != j:\n                if i*j == k:\n                    products.append(i*j)\n    return products\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(list, n):\n    prod = 1\n    for i in list:\n        prod = prod * i\n    return prod\n\n\ndef test_function(test_case):\n    if test_case[0] == list and test_case[1] == n:\n        if find_Product(test_case[0], test_case[1]) == test_case[2]:\n            print(\"Pass\")\n        else:\n            print(\"Fail\")\n    else:\n        print(\"Fail\")\n\n\ndef main():\n    n = 4\n    list = [1, 1, 2, 3]\n    test_function([[list, n], 6])\n    test_function([[list, n], 5])\n\n\nmain()", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_product(arr,length):\n    flag = [0]*length\n    mult = 1\n    for i in range(length):\n        if flag[i]==0:\n            mult = mult*arr[i]\n            flag[i] = 1\n    return mult\n\narr = [1,1,2,3,4,6,7,8,1]", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, prod):\n    # Initialize answer variable to zero\n    answer = 0\n    # Traverse through the array\n    for i in arr:\n        # If current element is multiple of prod, add it to answer\n        if prod % i == 0:\n            answer += i\n    return answer\n\n# Driver code\narr = [1,2,3,4,5,6,7,8,9,10]\nprod = 12\n\nresult = find_Product(arr, prod)", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n# Code to find the product of non-repeated elements in a given array.\n# It uses the idea of calculating the product of elements by iterating from the first index to the last index\n# of the array. Then it checks if the element is present in the array if present then the product of\n# those elements is added to the total product.\n# It does this for all the elements of the array and returns the total product.\n# Time Complexity: O(N) where N is the number of elements in the array.\n# Space Complexity: O(1) since it doesn't require any additional memory.\n\ndef find_product(array,n):\n    # initializing the total product.\n    total_product = 1\n\n    for i in range(len(array)):\n        # checking if the current element is already present in the array or not.\n        if array[i] not in array[i+1:]:\n            # if the element is present in the array then we can calculate the product\n            # of those two elements.\n            total_product *= array[i]\n\n    return total_product\n\n# Driver Code.\narray = [1,1,2,3]\nn = len(array)\n\n# calling the function\nresult = find_product(array,n)", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(myArray,num):\n    result = 1\n    for num in myArray:\n        if num != 0:\n            result = result*num\n    return result\n\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr, n):\n    # Write your code here\n    # We are going to use dictionary\n    d = dict()\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n\n    prod = 1\n    for i in d:\n        if d[i] > 1:\n            prod *= i\n\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    #Complete this function\n    max_product = 0\n    for i in range(n):\n        for j in range(i, n):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n\n#Testcase1", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,k):\n\tarr=sorted(arr)\n\ti=0\n\tres=1\n\twhile i<len(arr):\n\t\tj=i+1\n\t\twhile j<len(arr):\n\t\t\tif(arr[i]*arr[j]==k):\n\t\t\t\tbreak\n\t\t\telif(arr[i]*arr[j]>k):\n\t\t\t\tbreak\n\t\t\telif(arr[i]*arr[j]<k):\n\t\t\t\tj+=1\n\t\ti=j\n\treturn res\n\n# Driver Code\narr = [1, 1, 2, 3]\nk = 4"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    elements = set()\n    for tup in tuple_list:\n        elements.update(tup)\n\n    return len(elements) == k", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(elements, k):\n    if len(set(elements)) < k:\n        return False\n    return True\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(lst, k):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] != k:\n            count += 1\n\n    if count < k:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom collections import Counter\nfrom itertools import groupby\n\ndef check_k_elements(tuple_list, k):\n    # find counter\n    c = Counter(tuple_list)\n\n    # check if the counter has all the required elements\n    return all(k in v for v in c.values())\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\n# https://stackoverflow.com/questions/15206024/how-to-count-elements-in-a-set\ndef count_elements(elements, k):\n    # write your code here\n    return len(set(elements)) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    # write your code here\n    return all([len(item) == k for item in tuple_list])\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i]) < k:\n            return False\n    return True\n\n# Assert", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(t, k):\n    return len(set(t)) == k\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tupl_list, k):\n    check = True\n    for tupl in tupl_list:\n        if len(tupl) != k:\n            check = False\n    return check\n\n# \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 tupl_list\ntupl_list = [(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )]\n\n# \u041d\u0430\u0437\u044b\u0432\u0430\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e check_k_elements\ncheck = check_k_elements(tupl_list, 4)\n\n# \u041f\u0435\u0447\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 print(check)", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    # base case\n    if not tuple_list:\n        return False\n    elif len(tuple_list) == k:\n        return True\n    else:\n        return check_k_elements(tuple_list[1:], k)\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(words):\n    answer = []\n    for word in words:\n        ans = \"\"\n        for letter in word:\n            if letter.isdigit():\n                ans += letter\n        answer.append(ans)\n    return answer\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n# [START remove_digits]\ndef remove_digits(words):\n    \"\"\"\n    Remove all digits from a list of strings.\n    :param words: A list of strings\n    :return: A list of strings without any digits\n    \"\"\"\n    return [word.replace(digit, '') for word in words for digit in '0123456789']\n\n# [END remove_digits]", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n#mycode\ndef remove(strings):\n  result = []\n  for string in strings:\n    result.append(string.replace(\"0123456789\", \"\"))\n  return result\n\n\n#answer\ndef remove(strings):\n  return [word.replace(\"0123456789\", \"\") for word in strings]\n\n\n#answer\ndef remove(strings):\n  for string in strings:\n    string.replace(\"0123456789\", \"\")\n  return strings\n\n\n#answer\ndef remove(strings):\n  return [word.replace(\"0123456789\", \"\") for word in strings]\n\n#answer\ndef remove(strings):\n  return [word.replace(\"0123456789\", \"\") for word in strings]\n\n#answer\ndef remove(strings):\n  return [word for word in strings if not any(char.isdigit() for char in word)]\n\n#answer\ndef remove(strings):\n  return [word.replace(\"0123456789\", \"\") for word in strings]", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(words):\n    new_words = []\n    for word in words:\n        new_words.append(word.translate(None, string.digits))\n    return new_words\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(l):\n    return [i for i in l if not i.isdigit()]\n\n# Enter the list\nl = ['4words', '3letters', '4digits']\n\n# Calling the function", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(l):\n    return [\"\".join(i for i in s if not i.isdigit()) for s in l]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(list_of_strings: list):\n    return list(filter(lambda x: not any(char.isdigit() for char in x), list_of_strings))", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(strings):\n    result = []\n    for string in strings:\n        s = ''\n        for c in string:\n            if c.isdigit():\n                continue\n            else:\n                s += c\n        result.append(s)\n    return result\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(list_of_strings):\n    for string in list_of_strings:\n        string = list(string)\n        for i in range(len(string)):\n            if string[i] in '0123456789':\n                string.pop(i)\n        yield \"\".join(string)\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(strings):\n    return [word for word in strings if not word.isdigit()]\n\n\ndef remove2(strings):\n    return list(filter(lambda word: not word.isdigit(), strings))"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, r):\n    return int(math.factorial(n) / (math.factorial(n-r)*math.factorial(r)))\n\n\n# +\n# Write a python function to find power of a number.\n# assert power(5,2) == 25\n# -\n\ndef power(b, x):\n    return int(math.pow(b, x))\n\n\n# +\n# Write a python function to find the sum of n numbers.\n# assert sum_of_n(10) == 45\n# -\n\ndef sum_of_n(n):\n    return int(sum(range(1,n+1)))\n\n\n# +\n# Write a python function to find the sum of n numbers.\n# assert sum_of_n(10) == 45\n# -\n\ndef sum_of_n(n):\n    return int(sum(range(1,n+1)))\n\n\n# +\n# Write a python function to find the sum of n numbers.\n# assert sum_of_n(10) == 45\n# -\n\ndef sum_of_n(n):\n    return int(sum(range(1,n+1)))\n\n\n# +\n# Write a python function to find the sum of n numbers.\n# assert sum_of_n(10) == 45\n# -\n\ndef sum_of_n(n):\n    return int(sum(range(1,n+1)))\n\n\n# +\n# Write a python function to find the sum of n numbers.\n# assert sum_of_n(10) == 45\n# -\n\ndef sum_of_n(n):\n    return int(sum(range(1,n+1)))\n\n\n# +\n# Write a python function to find the sum of n numbers.\n# assert sum_of_n(10) == 45\n# -\n\ndef sum_of_n(n):\n    return int(sum(range(1,n+1)))\n\n\n# +\n# Write a python function to find the sum of", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    return binomial_coefficient(n,k)\n\ndef binomial_coefficient(n,k):\n    if n == 0:\n        return 0\n    if n < k:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coefficient(n-1,k) + binomial_coefficient(n-1,k-1)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, r):\n    return (n * (n-1)) // (r * (r-1))", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_coeff(n, k):\n    \"\"\"\n    return the binomial co-efficient of n choose k\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    return n * (n-1) // (k * (k-1))\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n\tres = 1\n\tfor i in range(0,k):\n\t\tres *= (n - i)\n\t\tres /= i + 1\n\treturn res\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_coeff(n,r):\n    if n==0 or r==0:\n        return 0\n    elif r > n:\n        return 0\n    elif n==r:\n        return 1\n    else:\n        return binomial_coeff(n-1, r-1)+binomial_coeff(n-1,r)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_coeff(num, den):\n    if num < 0 or den < 0:\n        print(\"Invalid input\")\n        return\n    if den == 0:\n        return 0\n    if den == 1:\n        return num\n    return binomial_coeff(num-1, den-1) + binomial_coeff(num-1, den)\n\n#Example\n#print(binomial_coeff(5,2))\n#print(binomial_coeff(8,3))", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_coeff(n,r):\n    c = 0\n    for i in range(0,n):\n        c = c + pow(i,n-1)*(pow(r,i)*(pow(1-r,n-1-i))/(math.factorial(i)*(math.factorial(n-1-i))))\n    return c\n\n# The function call", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\nimport math\n\ndef binomial_coeff(n,r):\n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    assert binomial_Coeff(5,2) == 10\n    \"\"\"\n    return math.factorial(n)/(math.factorial(r)*math.factorial(n-r))\n\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count = count + 1\n        else:\n            continue\n    return count\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,num):\n    for i in arr:\n        if i == num:\n            return i\n        \ndef main():\n    print(\"Hello World!\")\n    my_arr = [1,2,3,1,2,3,1]\n    print(get_Odd_Occurrence(my_arr,7))\nmain()\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(list_to_check,element):\n    \"\"\"\n    Return an integer that is the number of times element occurs in list_to_check.\n    \"\"\"\n    # code to check if the length of the list is greater than 1\n    if len(list_to_check)>1:\n        for i in list_to_check:\n            if i==element:\n                count=list_to_check.count(i)\n                return count\n        return -1\n    else:\n        if list_to_check[0]==element:\n            return list_to_check.count(element)\n        else:\n            return -1\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(lst,n):\n    lst = sorted(lst)\n    for i in range(0,len(lst)):\n        if lst[i] == n:\n            lst.pop(i)\n    return lst", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(input_list, num):\n\t# your code goes here\n\tlength = len(input_list)\n\toccurence = 0\n\tif num not in input_list:\n\t\tprint(\"Not found\")\n\telse:\n\t\tfor i in range(length):\n\t\t\tif input_list[i] == num:\n\t\t\t\toccurence = occurence + 1\n\t\t\t\tif occurence % 2 != 0:\n\t\t\t\t\treturn i\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,number):\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    for key in d:\n        if number == key and d[key]%2 == 1:\n            return key\n    return None\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, key):\n    return sum([1 for i in arr if i == key])\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, value):\n    # Write your code here\n    odd_occurrences = 0\n    even_occurrences = 0\n    for i in range(len(arr)):\n        if(arr[i] == value):\n            if(i%2 == 0):\n                even_occurrences += 1\n            else:\n                odd_occurrences += 1\n    if(odd_occurrences > even_occurrences):\n        return value\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\n# >>> get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n# 1\ndef get_Odd_Occurrence(arr, val):\n    occurrence = 0\n    for i in range(len(arr)):\n        if arr[i] == val:\n            occurrence += 1\n    return occurrence\n\n# >>> get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n# 1\ndef get_Odd_Occurrence(arr, val):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == val:\n            count += 1\n    if count % 2 == 0:\n        return -1\n    else:\n        return val\n\n# >>> get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n# 1\ndef get_Odd_Occurrence(arr, val):\n    occurrence = 0\n    for i in range(len(arr)):\n        if arr[i] == val:\n            occurrence += 1\n    if occurrence%2 == 0:\n        return -1\n    else:\n        return val\n\n# >>> get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n# 1\ndef get_Odd_Occurrence(arr, val):\n    odd = -1\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == val:\n            count += 1\n    if count % 2 != 0:\n        odd = val\n    return odd", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\n# +\ndef get_Odd_Occurrence(arr, n):\n    \"\"\"\n    >>> get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n    1\n    \"\"\"\n    \n    odd_arr = []\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 != 0:\n            odd_arr.append(arr[i])\n            \n    return odd_arr.count(n)\n    \nget_Odd_Occurrence([1,2,3,1,2,3,1],7)\n# -\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n\tresult=0\n\tdic=dict()\n\tfor i in range(len(s)):\n\t\tif i==0 or i==len(s)-1:\n\t\t\tif s[i]==s[i-1]:\n\t\t\t\tif s[i] not in dic:\n\t\t\t\t\tdic[s[i]]=1\n\t\t\t\telse:\n\t\t\t\t\tdic[s[i]]+=1\n\t\t\telse:\n\t\t\t\tif s[i] in dic:\n\t\t\t\t\tdel dic[s[i]]\n\t\telse:\n\t\t\tif s[i]==s[i-1] and s[i]==s[i+1]:\n\t\t\t\tif s[i] not in dic:\n\t\t\t\t\tdic[s[i]]=1\n\t\t\t\telse:\n\t\t\t\t\tdic[s[i]]+=1\n\t\t\telse:\n\t\t\t\tif s[i] in dic:\n\t\t\t\t\tdel dic[s[i]]\n\tfor i in dic:\n\t\tresult+=dic[i]\n\treturn result\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    string = string + string[-1:]\n    for i in range(len(string) - 1):\n        if string[i] == string[len(string) - 1]:\n            count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    res = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            res += 1\n    return res\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n\tcount = 0\n\tif len(string) == 0:\n\t\treturn 0\n\tfor i in range(len(string)):\n\t\tif string[i] == string[-1]:\n\t\t\tcount += 1\n\t\tif i == len(string) - 1:\n\t\t\tif string[i] == string[0]:\n\t\t\t\tcount += 1\n\treturn count\n\ndef main():\n\tprint(count_Substring_With_Equal_Ends(\"abc\"))\n\tprint(count_Substring_With_Equal_Ends(\"abcd\"))\n\tprint(count_Substring_With_Equal_Ends(\"abcabc\"))\n\tprint(count_Substring_With_Equal_Ends(\"abcdabcd\"))\n\tprint(count_Substring_With_Equal_Ends(\"abcab\"))\n\nmain()", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(word):\n    return len([i for i in word if i not in word[1:len(word)-1]])\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\nfrom collections import defaultdict\n\ndef count_Substring_With_Equal_Ends(str1):\n    dict_str = defaultdict(int)\n    for i in str1:\n        if i not in dict_str:\n            dict_str[i] = 1\n        else:\n            dict_str[i] += 1\n\n    res = 0\n    for i in dict_str:\n        if dict_str[i] > 1:\n            res += (dict_str[i] * (dict_str[i] - 1)) // 2\n\n    return res\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    starts_with = {}\n    starts_with[string[0]] = 1\n    ends_with = {}\n    ends_with[string[len(string)-1]] = 1\n    count = 0\n    for i in range(len(string)-1):\n        if string[i] == string[len(string)-1]:\n            count += starts_with[string[i]]\n            count += ends_with[string[i]]\n        else:\n            if string[i] in starts_with:\n                starts_with[string[i]] = starts_with[string[i]] + 1\n            else:\n                starts_with[string[i]] = 1\n            if string[len(string)-i-1] in ends_with:\n                ends_with[string[len(string)-i-1]] = ends_with[string[len(string)-i-1]] + 1\n            else:\n                ends_with[string[len(string)-i-1]] = 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        j = 0\n        while j < len(string) and string[i] == string[j]:\n            count += 1\n            j += 1\n    return count\n\ndef count_Substring_With_Equal_Ends_v2(string):\n    count = 0\n    for i in range(len(string)):\n        j = i+1\n        while j < len(string) and string[i] == string[j]:\n            count += 1\n            j += 1\n    return count\n\ndef count_Substring_With_Equal_Ends_v3(string):\n    count = 0\n    for i in range(len(string)):\n        j = i+1\n        while j < len(string) and string[i] == string[j]:\n            count += 1\n            j += 1\n    return count\n\ndef count_Substring_With_Equal_Ends_v4(string):\n    count = 0\n    for i in range(len(string)):\n        j = i+1\n        while j < len(string) and string[i] == string[j]:\n            count += 1\n            j += 1\n    return count\n\ndef count_Substring_With_Equal_Ends_v5(string):\n    count = 0\n    for i in range(len(string)):\n        j = i+1\n        while j < len(string) and string[i] == string[j]:\n            count += 1\n            j += 1\n    return count\n\ndef count_Substring_With_Equal_Ends_v6(string):\n    count = 0\n    for i in range(len(string)):\n        j = i+1\n        while j < len(string) and string[i] == string[j]:\n            count += 1\n            j += 1\n    return count\n\ndef count_Substring_With_Equal_Ends_v7(string):\n    count = 0\n    for i in range(len(string)):\n        j = i+1\n        while j < len(string) and string[", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[len(string)-1] and i > 0:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n\n#Example 2"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef top_k(lists, k):\n    '''\n    Returns top-k elements from lists.\n\n    Example:\n    >>> top_k([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)\n    [5, 7, 1]\n    '''\n    count = {}\n    for l in lists:\n        for i in l:\n            count[i] = count.get(i, 0) + 1\n\n    res = [v[0] for v in count.items()][:k]\n    return res\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom queue import PriorityQueue\n\ndef topk(lst,k):\n    q=PriorityQueue()\n    for i in lst:\n        q.put((i,lst.count(i)))\n    output=[]\n    for i in range(k):\n        output.append(q.get()[0])\n    return output\n\ndef main():\n    lst=[]\n    for i in range(int(input())):\n        lst.append(list(map(int,input().split())))\n    output=topk(lst,int(input()))\n    print(\" \".join(str(i) for i in output))\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef top_k(lists, k):\n\t#Your code here\n\tresult = []\n\tfor i in lists:\n\t\theapq.heappush(i, i[0])\n\theapq.heapify(lists[0])\n\tfor i in range(k):\n\t\tresult.append(heapq.heappop(lists[0]))\n\treturn result\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import heapify, heappop, heappush\n\ndef func(arr, k):\n    heap = []\n    for i in range(len(arr)):\n        val = arr[i]\n        count = 0\n        for j in range(i, len(arr)):\n            if arr[j] == val:\n                count += 1\n        if count > 0:\n            heap.append((-count, val))\n    heapify(heap)\n    result = []\n    while len(result) < k:\n        heappush(result, heappop(heap))\n    return result[::-1]\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef heap_sort(a,key=None):\n    \"\"\"\n    >>> heap_sort([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],key=len)\n    [[1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [1, 4, 7, 8, 12], [1, 2, 6], [2, 5, 7, 11]]\n    \"\"\"\n    if key==None:\n        key=len\n    heap = []\n    for x in a:\n        heappush(heap, (key(x), x))\n    for i in range(len(heap)//2-1,-1,-1):\n        heappop(heap)\n        heappush(heap, (key(heap[0]), heap[0]))\n    while heap:\n        heappop(heap)\n    return heap\n\ndef topk_elements(a,k,key=None):\n    \"\"\"\n    >>> topk_elements([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)\n    [5, 7, 1]\n    \"\"\"\n    heap = heap_sort(a,key)\n    return heap[:k", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef count_frequent(arr, k):\n    if len(arr) < k:\n        return None\n    # Initialize result\n    result = []\n    # initialize a heap with values\n    heap = []\n    # initialize frequency of number\n    frequency = {}\n    # Iterate through each number in arr\n    for num in arr:\n        # if number exists in frequency\n        if num in frequency:\n            # increment the frequency of that number\n            frequency[num] += 1\n        # if number doesn't exist in frequency\n        else:\n            # add the number to heap with frequency 1\n            heapq.heappush(heap, (num, 1))\n            # add the number to frequency\n            frequency[num] = 1\n    # remove frequent numbers till k\n    while len(result) < k:\n        # pop the min number from heap\n        num, frequency = heapq.heappop(heap)\n        # increment the frequency of popped number\n        frequency += 1\n        # push the number with new frequency\n        heapq.heappush(heap, (num, frequency))\n        # push the number to result\n        result.append(num)\n    return result\n\n\n# Driver code", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import *\n\ndef topk(lists, k):\n    freq = [0]*(k+1)\n    for list in lists:\n        for i in list:\n            freq[i]+=1\n    \n    queue = []\n    for i in range(k+1):\n        heappush(queue, (freq[i], i))\n    \n    result = []\n    for i in range(k):\n        result.append(heappop(queue)[1])\n    return result\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\n# def func(lists, k):\n#     # your code goes here\n#     pass\n\ndef func(lists, k):\n    result = []\n    if len(lists) < 2:\n        return lists\n    for i in range(len(lists)):\n        print(lists[i])\n        if i == 0:\n            heapq.heappush(heap, lists[i])\n            result.append(lists[i])\n        else:\n            heapq.heappush(heap, lists[i])\n            if len(result) < k:\n                result.append(lists[i])\n            elif lists[i] >= result[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, lists[i])\n                result[0] = lists[i]\n            else:\n                while heap and lists[i] <= result[0]:\n                    heapq.heappop(heap)\n                    result.append(result[0])\n                heapq.heappush(heap, lists[i])\n    return result\n\nlists = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]\nheap = []\nresult = func(lists, 3)", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom collections import Counter\nimport heapq\nimport pytest\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef top_k_frequent(lists, k):\n    freq_dict = {}\n    for list in lists:\n        for i in list:\n            if i not in freq_dict:\n                freq_dict[i] = 1\n            else:\n                freq_dict[i] += 1\n    import heapq\n    heapq.heapify(freq_dict.items())\n    res = []\n    while len(res) < k:\n        v = heapq.heappop(freq_dict.items())\n        res.append(v[0])\n    return res[::-1]\n\n\n# print(top_k_frequent([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3))"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n#Write your code below\ndef max_Prime_Factors(n):\n    factors = list()\n    for i in range(2,n+1):\n        if n%i==0:\n            factors.append(i)\n    return max(factors)\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n# your code here\ndef max_Prime_Factors(number):\n    if number == 1:\n        return 1\n    for i in range(2, number//2):\n        if number % i == 0:\n            return i\n    return number\n\ndef main():\n    print(max_Prime_Factors(15))\n\nmain()", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(num):\n    if num <= 1:\n        return 0\n    factors = []\n    for i in range(2, num+1):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num // i)\n    factors.sort(reverse=True)\n    return factors[0]\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# this function gets the prime factorization of the number\n# and then return the max prime factor\n# time complexity: O(log(n))\n# space complexity: O(n)\n# it has been optimized by using a set to find the prime factors\ndef max_Prime_Factors(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.add(i)\n            n //= i\n\n    if n > 2:\n        factors.add(n)\n\n    return max(factors)\n\n\n# test cases", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# Largest Prime Factor\ndef max_Prime_Factors(n):\n    # if n <= 1, return the argument\n    if n <= 1:\n        return n\n    # else, check from 2 to sqrt(n) for factors\n    for i in range(2, int(n ** 0.5) + 1):\n        # if n is divisible by i, return i as the prime factor\n        if n % i == 0:\n            return i\n    return n\n\n\n# Driver Code", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_prime_factors(n):\n    '''\n    Find the largest prime factor of n.\n    Complexity: O(logn)\n    '''\n    i = 2\n    factor = n\n    while i <= n:\n        if n % i == 0:\n            if i < factor:\n                factor = i\n        i += 1\n    return factor\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\nimport math\n\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Returns the largest prime factor of a given number n.\n\n    Parameters\n    ----------\n    n : int\n        Number whose prime factor is to be returned.\n\n    Returns\n    -------\n    int\n        Largest prime factor of n.\n    \"\"\"\n    prime_factors = []\n    factor = math.sqrt(n) + 1\n    while factor > 1:\n        if n % factor == 0:\n            n = n // factor\n            prime_factors.append(factor)\n        else:\n            factor = factor + 1\n    if n != 1:\n        prime_factors.append(n)\n    return max(prime_factors)\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    if num < 2:\n        return num\n    factors = []\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(num):\n    if num == 2:\n        return 2\n    elif num % 2 == 0:\n        return 2\n    else:\n        i = 3\n        while i <= num / 2:\n            if num % i == 0:\n                return i\n            i += 2\n        return i\n\n#T = int(input())\n#for i in range(T):\n#    n = int(input())\n#    print(max_Prime_Factors(n))\n\n# Now, write a function to count the number of prime factors of a given number\ndef count_Prime_Factors(num):\n    count = 0\n    if num == 2:\n        return 1\n    elif num % 2 == 0:\n        return 1\n    else:\n        i = 3\n        while i <= num / 2:\n            if num % i == 0:\n                count += 1\n                if num % (i*2) == 0:\n                    count -= 1\n            i += 2\n        return count\n\n#print(count_Prime_Factors(14))\n\n# Now, write a function to check if a given number is a perfect square\ndef check_Perfect_Square(num):\n    x = num\n    i = 0\n    while x != 0:\n        x = x // 10\n        i += 1\n    if x == 0:\n        if i % 2 == 0:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n\n#assert check_Perfect_Square(63) == 0\n\n# Write a function to find the sum of all prime numbers between 1 and n\ndef sum_Prime_Numbers(n):\n    sum = 0\n    for i in range(2, n+1):\n        if is_Prime(i) == True:\n            sum += i\n    return sum\n\n#T = int(input())\n#for i in range(T):\n#    n = int(input())\n#    print(sum_Prime_Numbers(n))\n\n# Write a function to find the sum of all prime numbers less than a given number\ndef sum_"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal_value):\n\n    binary_list = []\n    while decimal_value != 0:\n        binary_list.append(str(decimal_value%2))\n        decimal_value = decimal_value//2\n    binary_value = ''.join(binary_list[::-1])\n\n    return binary_value\n\ndef test():\n    assert decimal_To_Binary(10) == \"1010\"\n    assert decimal_To_Binary(128) == \"10000000\"\n    assert decimal_To_Binary(255) == \"11111111\"\n    print(\"Tests passed.\")\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n# write your code here\ndef decimal_To_Binary(n):\n    ans = \"\"\n    while n != 0:\n        ans += str(n % 2)\n        n = n // 2\n    return ans[::-1]", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n    if num < 0:\n        num = num * -1\n    numList = []\n    while num > 0:\n        numList.append(num%2)\n        num //= 2\n    return numList\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary\n\n#assert decimal_To_Binary(10) == 1010\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(number):\n    \n    binary_list = []\n    for i in range(0, 33):\n        binary_list.append(0)\n    temp_number = number\n    \n    while temp_number != 0:\n        binary_list[0] = int(temp_number % 2)\n        temp_number = int(temp_number / 2)\n        \n    return binary_list[::-1]\n    ", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal_num):\n    return bin(decimal_num)[2:]\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(dec):\n    return bin(dec)[2:]\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while(n>0):\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(dec):\n    bin_num = ''\n    while dec > 0:\n        bin_num = bin_num + str(dec % 2)\n        dec = dec // 2\n    return bin_num[::-1]\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n# Using built-in function\ndef decimal_To_Binary(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_2(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_3(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_4(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_5(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_6(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_7(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_8(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_9(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_10(decimal_num):\n    \"\"\"\n    input: decimal number\n    output: binary number\n    \"\"\"\n    return bin(decimal_num)\n\n# Using funciton from math module\ndef decimal_To_Binary_11(decimal_num):\n    \"\"\"\n    input: decimal"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(nums, n):\n    \"\"\"\n    :type nums: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    length = len(nums)\n    i = 0\n    while i < length:\n        if nums[i] != i + 1:\n            nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]\n        i += 1\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\nimport unittest\n\n\ndef find_missing(nums, n):\n    '''\n    Finds the missing number in an array.\n    :param nums: a sorted array\n    :param n: size of array\n    :return: missing number\n    '''\n    for i in range(n):\n        if i != nums[i]:\n            return i\n    return 0\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, value):\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            if arr[i] == value:\n                return value\n            elif arr[i] > value:\n                return i + 1\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(nums, last_index):\n    for index, value in enumerate(nums):\n        if index != last_index:\n            continue\n        else:\n            if value != index + 1:\n                return index + 1\n\ndef test_find_missing():\n    assert find_missing([1,2,3,4,5],3) == 6\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n    \"\"\"\n    :param arr: The input array\n    :param n: The size of the array\n    :return: The missing number\n    \"\"\"\n    sum = sum(range(n+1))\n    return sum - sum(arr)\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,n):\n    miss = n+1\n    for i in range(1,n+1):\n        if arr[i-1] != i:\n            miss = i\n            break\n    return miss\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n    x = 1\n    for i in range(1,n+1):\n        if i not in arr:\n            x += i\n    return x\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\n# solution by @serval\n# Solution by @AlexClymer\n\ndef find_missing(sorted_array, target):\n    # find the first non-equal index\n    for i, item in enumerate(sorted_array):\n        if item != sorted_array[i+1]:\n            return i+1\n\n    # if the last index is the same as the target, the array is complete\n    return len(sorted_array)\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(a, n):\n    \"\"\"\n    Function to find the missing number in a sorted array\n    \"\"\"\n\n    sum = 0\n    for i in range(0,n):\n        sum += i+1\n\n    for i in range(1,n+1):\n        if i not in a:\n            return i\n    return sum+n+1", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(array,n):\n    i=0\n    sum = 0\n    while(i < len(array)):\n        sum = sum + array[i]\n        i +=1\n\n    i=0\n    while(i< len(array)):\n        sum = sum - array[i]\n        i+=1\n\n    if(sum != n):\n        return sum\n    else:\n        return None"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nfrom itertools import count\nfrom typing import Generator\n\ndef find_rect_num(n: int) -> int:\n    \"\"\"\n    >>> find_rect_num(4)\n    20\n    \"\"\"\n    return sum(list(map(lambda x: x*x, count(1)))) // n\n\ndef main():\n    print(\"rectangular numbers =\", find_rect_num(4))\n    print(\"rectangular numbers =\", find_rect_num(1))\n    print(\"rectangular numbers =\", find_rect_num(10))\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return int(math.pow(n+1, 2) - n)\n\n# Test", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nimport math\n\ndef find_rect_num(n):\n    num = 1\n    rect_num = 0\n    for i in range(1, n+1):\n        num = 1\n        for j in range(1, i+1):\n            num *= j\n        rect_num += num\n    return rect_num\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nfrom itertools import permutations\n\ndef find_rect_num(n):\n    if n==1:\n        return 1\n    else:\n        return sum(int(''.join(str(a) for a in p)) for p in permutations(range(1,n+1)))\n    ", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    if n == 0:\n        return 0\n    result = 1\n    for i in range(1,n+1):\n        result *= i\n        result = result + (n - i) * result\n    return result\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    return n * find_rect_num(n - 1)\n\n#assert find_rect_num(4) == 20", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    m = 1\n    rect_num = 1\n    while rect_num < n:\n        rect_num += m\n        m += 1\n    return rect_num\n\ndef find_rect_num_list(n):\n    list_rect_num = []\n    for i in range(1,n):\n        m = 1\n        rect_num = 1\n        while rect_num < n:\n            rect_num += m\n            m += 1\n        list_rect_num.append(rect_num)\n    return list_rect_num\n\n# test1", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    result = 1\n    i = 1\n    while i < n:\n        result += i\n        i += 1\n    return result\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n\treturn (n*(n+1))/2\n\ndef test_find_rect_num():\n\tassert find_rect_num(4) == 20\n\ndef test_find_rect_num_not_int():\n\twith pytest.raises(TypeError):\n\t\tfind_rect_num(1.2)\n\ndef test_find_rect_num_zero():\n\twith pytest.raises(ValueError):\n\t\tfind_rect_num(0)\n\n# find_fibonacci_num()\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\n# https://en.wikipedia.org/wiki/Rectangular_number\n# https://github.com/karan/Projects/blob/master/Recursion/rectangular-numbers.cpp\n# https://gist.github.com/karan/6058101\n\ndef find_rect_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * find_rect_num(n - 1)\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nimport math\n\ndef find_Nth_Digit(a, b, n):\n    \"\"\"\n    find the nth digit of a/b\n    a and b are integers, a < b\n    n is an integer, n >= 1\n\n    >>> find_Nth_Digit(1, 2, 1)\n    5\n    \"\"\"\n    if a == b:\n        return find_Nth_Digit(b, a, n)\n    a = abs(a)\n    b = abs(b)\n\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n\n    a = a // b\n    b = b % a\n    result = find_Nth_Digit(a, b, n - 1)\n    if result == -1:\n        result = find_Nth_Digit(b, a, n - 1)\n    if result == -1:\n        return -1\n    else:\n        return result + int(math.log10(a))\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nimport math\n\ndef find_Nth_Digit(num1, num2, N):\n    number_of_digits = len(str(num1*num2))\n    if number_of_digits == 1:\n        return int(str(num1*num2)[0])\n    else:\n        return find_Nth_Digit(num1,num2, N % number_of_digits)\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(a,b,n):\n    if n == 1:\n        return find_digit_in_fraction(a,b)\n    else:\n        return find_Nth_Digit(b,a,n-1)\n\ndef find_digit_in_fraction(a,b):\n    sum_of_digits = 0\n    numerator = a\n    denominator = b\n    while (numerator > 0):\n        temp = numerator%10\n        numerator = numerator//10\n        sum_of_digits += temp\n    for i in range(1,denominator):\n        numerator = numerator*10\n    numerator = numerator%b\n    for i in range(1,denominator):\n        numerator = numerator*10\n    while numerator > 0:\n        temp = numerator%10\n        numerator = numerator//10\n        sum_of_digits += temp\n    return sum_of_digits\n\ndef test_find_digit_in_fraction():\n    assert find_digit_in_fraction(1,2) == 5\n    assert find_digit_in_fraction(1,2,1) == 5\n    assert find_digit_in_fraction(1,3,1) == 5\n    assert find_digit_in_fraction(1,4,1) == 5\n    assert find_digit_in_fraction(1,5,1) == 5\n    assert find_digit_in_fraction(1,6,1) == 5\n    assert find_digit_in_fraction(1,7,1) == 5\n    assert find_digit_in_fraction(1,8,1) == 5\n    assert find_digit_in_fraction(1,9,1) == 5\n    assert find_digit_in_fraction(1,10,1) == 5\n    assert find_digit_in_fraction(1,11,1) == 5\n    assert find_digit_in_fraction(1,12,1) == 5\n    assert find_digit_in_fraction(1,13,1) == ", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(first_number, second_number, n):\n\n    if n < 1 or n > 99:\n        return False\n\n    first_sum, second_sum, i = 0, 0, 1\n\n    while i <= n:\n        first_sum += first_number * (n//i)\n        second_sum += second_number * (n//i)\n        first_number = first_number * 10\n        second_number = second_number * 10\n        i += 1\n\n    #print(first_sum)\n    #print(second_sum)\n\n    if first_sum == second_sum:\n        return 5\n\n    i = 6\n    while i <= 9:\n        if first_sum == second_sum + i:\n            return i\n        else:\n            i += 1\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1,num2,n):\n    num = int(num1) + int(num2)\n    d = []\n    if num > 10**8:\n        return -1\n    for i in range(len(str(num))):\n        d.append(int(str(num)[i]))\n    return d[n-1]\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nimport math\ndef find_Nth_Digit(a, b, n):\n    a_pow = math.log(a, 10)\n    b_pow = math.log(b, 10)\n    a_pow = a_pow if a_pow > b_pow else b_pow\n    a_pow -= 1\n    # for first case\n    x = math.ceil(n/10)\n    y = n%10\n    # for second case\n    # x = math.ceil(n/10)\n    # y = n%10\n    # for third case\n    # x = n//10\n    # y = n%10\n\n    # get the first part of the numbers\n    x_dec = a**(a_pow*x)\n    y_dec = b**(a_pow*y)\n    # get the first 4 digits of the numbers\n    f = x_dec+y_dec\n    s = [int(i) for i in str(f)]\n    s.reverse()\n    return s[0]\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(numerator, denominator, n):\n    if numerator == denominator:\n        return n\n    elif numerator < denominator:\n        return find_Nth_Digit(numerator * 10 + denominator, denominator * 10, n)\n    else:\n        return find_Nth_Digit(numerator // 10, denominator // 10, n)\n\n#%%", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(n,num1,num2):\n    digit_sum = find_digits(num1*num2)\n    return find_digit(digit_sum,n)\n\ndef find_digit(arr,n):\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left+right)//2\n        if mid < len(arr) and n < len(arr[mid]):\n            return arr[mid][n]\n        if mid >= len(arr) or mid < 0:\n            return -1\n        if arr[mid][n] == 0:\n            right = mid-1\n        else:\n            left = mid+1\n    return -1\n\ndef find_digits(num):\n    digit_sum = [0]*10\n    while num:\n        digit = num%10\n        digit_sum[digit] += 1\n        num = num//10\n    return digit_sum\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1,num2,N):\n    if(N == 1):\n        return num1\n    elif(N == 2):\n        return num2\n    else:\n        return find_Nth_Digit(num2,num1,N-2)\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    string_indices = [i for i, x in enumerate(mixed_list) if isinstance(x, str)]\n    integer_indices = [i for i, x in enumerate(mixed_list) if not isinstance(x, str)]\n    integers = [x for i, x in enumerate(mixed_list) if not isinstance(x, str)]\n    strings = [x for i, x in enumerate(mixed_list) if isinstance(x, str)]\n    sorted_strings = sorted(strings)\n    sorted_integers = sorted(integers, key=int)\n    mixed_list[string_indices] = sorted_strings\n    mixed_list[integer_indices] = sorted_integers\n    return mixed_list\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    # implement your code here\n    return lst\n\n# 3. Given a list of non-negative integers, arrange them such that they form the largest number.\n# assert largest_number([10,3,13])==10313\ndef largest_number(lst):\n    # implement your code here\n    return \"\".join(str(x) for x in lst)\n\n# 4. Given a list of words, return the list of words that can be made by permuting the letters of the words.\n# assert make_words_out_of_letters(['love','loss','put'])==['love','loss','put','olop','losp','lose']\ndef make_words_out_of_letters(lst):\n    # implement your code here\n    return set(reduce(lambda x,y: x+y, [\"\".join(sorted(word)) for word in lst]))\n\n# 5. Given two numbers, find the third number that completes the given sum.\n# assert find_third_number(6, 10)=8\ndef find_third_number(x, y):\n    # implement your code here\n    return 0\n\n# 6. Given a list of numbers, return the sum of all the numbers that are divisible by 2, 3, 4, or 5, but not by 6.\n# assert find_divisors_of_numbers([1,4,6,7,8,9,10])==23\ndef find_divisors_of_numbers(lst):\n    # implement your code here\n    return sum(n for n in lst if n%2==0 or n%3==0 or n%4==0 or n%5==0 and n!=6)", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    \"\"\"Sort a mixed list of integers and strings\"\"\"\n    # Step 1: Filter out string elements from list\n    int_lst = []\n    for item in lst:\n        if type(item) == int:\n            int_lst.append(item)\n            \n    # Step 2: Sort integer list\n    int_lst.sort()\n    \n    # Step 3: Return sorted integer list\n    return int_lst\n\n#--------------------------------------------------\n# TESTS\n#--------------------------------------------------", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(alist):\n    return sorted(alist)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(input_list):\n    return sorted(input_list)", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(arr):\n    arr.sort()\n    return arr\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(input):\n\n    #sort the list in ascending order\n\n    sorted_list = []\n\n    for i in range(0, len(input)):\n        if type(input[i]) == int:\n            sorted_list.append(input[i])\n        else:\n            sorted_list.append(input[i].lower())\n\n    sorted_list.sort()\n    return sorted_list\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(items):\n    # Fill in this function to sort items using the sort method\n    items.sort()\n    return items\n\n# Run tests", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(my_list):\n    \"\"\"\n    my_list: a list of integers and strings\n    returns a sorted list of integers and strings\n    \"\"\"\n    if len(my_list) == 1:\n        return my_list\n    elif len(my_list) == 2:\n        if isinstance(my_list[0], int) and isinstance(my_list[1], int):\n            return my_list\n        elif isinstance(my_list[0], str) and isinstance(my_list[1], str):\n            return my_list\n        else:\n            if my_list[0] < my_list[1]:\n                return [my_list[0], my_list[1]]\n            else:\n                return [my_list[1], my_list[0]]\n    elif len(my_list) == 3:\n        if isinstance(my_list[0], int) and isinstance(my_list[1], int) and isinstance(my_list[2], int):\n            return my_list\n        elif isinstance(my_list[0], str) and isinstance(my_list[1], str) and isinstance(my_list[2], str):\n            return my_list\n        elif isinstance(my_list[0], int) and isinstance(my_list[1], int) and isinstance(my_list[2], str):\n            if my_list[0] < my_list[2]:\n                return [my_list[0], my_list[1], my_list[2]]\n            else:\n                return [my_list[2], my_list[1], my_list[0]]\n        elif isinstance(my_list[0], str) and isinstance(my_list[1], int) and isinstance(my_list[2], int):\n            if my_list[1] < my_list[2]:\n                return [my_list[0], my_list[1], my_list[2]]\n            else:\n                return [", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n#test cases for sort_mixed_list\ndef test_sort_mixed_list():\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert sort_mixed_list([2,1,4,3,5])==[1, 2, 3, 4, 5]\n    assert sort_mixed_list(['green',12,'red',2, 'white'])==['blue', 'green', 'green', 12, 'red', 'white']\n    assert sort_mixed_list([0,2,'red',10,1,100,12345])==[0, 1, 10, 100, 12345, 'red']"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(arr):\n    even_list = []\n    odd_list = []\n    for i in arr:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return len(even_list) // len(odd_list)\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(n):\n    even = []\n    odd = []\n    for i in n:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return len(even) / len(odd)", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(l):\n    # Write your code here\n    even = 0\n    odd = 0\n    for i in l:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even//2,odd//2\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    \"\"\"\n    Return the division of the first even number to the first odd number of a given list.\n    \"\"\"\n    odds = [i for i in lst if i%2]\n    evens = [i for i in lst if i%2==0]\n    return (odds[0] / evens[0])\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(nums):\n    for i in range(0,len(nums)-1):\n        if(nums[i]%2==0 and nums[i+1]%2!=0):\n            return nums[i]+nums[i+1]\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(number_list):\n    if len(number_list) < 2:\n        return 0\n    \n    i = 0\n    div_count = 0\n    while i < len(number_list):\n        if number_list[i] % 2 != 0:\n            div_count += 1\n        i += 1\n    return div_count\n\n\ndef test_div_even_odd():\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\n    assert div_even_odd([2,4,6,8,10,12,14,16])==4\n    assert div_even_odd([1,3,5,7,4,1,6,8,9,11])==3\n    assert div_even_odd([1,3,5,7,4,1,6,8,9,11,13])==2\n    assert div_even_odd([2,4,6,8,10,12,14,16,18,20])==3\n\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(x):\n    \"\"\"\n    x : list\n    \"\"\"\n    if len(x) > 0:\n        if x[0] % 2 == 0:\n            if x[0] == 0:\n                return 0\n            else:\n                return x[0]/2\n        elif x[0] % 2 == 1:\n            if x[0] == 0:\n                return 0\n            else:\n                return (x[0]+1)/2\n    return 0\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    print(div_even_odd(x))\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n# a function to find the division of first even and odd number of a given list\ndef div_even_odd(lst):\n    lst.sort()\n    odd_lst = []\n    even_lst = []\n    for i in lst:\n        if i%2 == 1:\n            odd_lst.append(i)\n        else:\n            even_lst.append(i)\n    return len(odd_lst)//len(even_lst)\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n# Write your code below\n\n\n# 3. Write a function to convert an int to a binary string.\n# assert bin_str(1101)=='1011001'"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str):\n    if len(str)<=1:\n        return (str)\n    else:\n        if str[0]==str[-1]:\n            return rearange_string(str[1:-1])\n        else:\n            return (str[0]+rearange_string(str[1:-1])+str[-1])\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    length=len(string)\n    for i in range(length-1):\n        if string[i]==string[i+1]:\n            return \"NO\"\n    return \"YES\"\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    string_list = list(string)\n    if len(string)==1:\n        return string\n    for i in range(len(string)-1):\n        if string_list[i]==string_list[i+1]:\n            for j in range(i+1, len(string_list)):\n                string_list[i], string_list[j] = string_list[j], string_list[i]\n    return ''.join(string_list)\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\n# slution\n\n\ndef rearange_string(str_):\n    for i in range(len(str_) - 1):\n        if (str_[i] == str_[i + 1]) or (str_[i] == str_[i - 1]):\n            return None\n    return str_\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    if len(string)<=1:\n        return string\n    else:\n        middle_index = int(len(string)/2)\n        left = string[:middle_index]\n        right = string[middle_index:]\n        result = rearange_string(left) + rearange_string(right)\n        if not len(left)==len(right)==0:\n            for i in range(0,len(left)):\n                if left[i] == right[i]:\n                    result = rearange_string(left) + rearange_string(right)\n        return result\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n# Write your code below and press the play button to run the code.\n# The test cases will take less than a minute to run.\n\ndef rearange_string(string):\n    if len(string)<2:\n        return False\n    i=0\n    while i<len(string):\n        if string[i+1]==string[i]:\n            return False\n        i+=1\n    return string\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    rev_str = string[::-1]\n    if(string==rev_str):\n        print('Given string can not be rearranged.')\n    else:\n        for i in range(1,len(string)):\n            if(string[i-1]==string[i]):\n                print('Given string can not be rearranged.')\n                break\n            elif(string[i-1]==rev_str[i]):\n                print('Given string can not be rearranged.')\n                break\n        else:\n            print('Given string can be rearranged.')\n\ndef rearange_string(string):\n    string_rev = string[::-1]\n    if(string==string_rev):\n        print('Given string can not be rearranged.')\n    else:\n        for i in range(1,len(string)):\n            if(string[i-1]==string[i]):\n                print('Given string can not be rearranged.')\n                break\n            elif(string[i-1]==string_rev[i]):\n                print('Given string can not be rearranged.')\n                break\n        else:\n            print('Given string can be rearranged.')\n\n\n# -\n\nrearange_string(\"aab\")\n\nrearange_string(\"abb\")\n\nrearange_string(\"baa\")\n\nrearange_string(\"baaab\")\n\nrearange_string(\"aabba\")", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(input_str):\n    # Fill this function\n    if len(input_str) < 2:\n        return input_str\n    if len(input_str) == 2:\n        if len(set(input_str)) < 2:\n            return input_str\n        else:\n            return input_str[::-1]\n    else:\n        length = len(input_str)\n        # first letter is different\n        if input_str[0] != input_str[1]:\n            if length == 3:\n                if input_str[1] == input_str[2]:\n                    return input_str[::-1]\n            elif length > 3:\n                if input_str[1] == input_str[2]:\n                    return input_str[:1] + input_str[3:]\n                elif input_str[2] == input_str[3]:\n                    return input_str[:2] + input_str[4:]\n                else:\n                    return input_str[::-1]\n        else:\n            return rearange_string(input_str[1:])\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    return ''.join(sorted(string.replace(\"a\",\"\").replace(\"b\",\"\")))\n"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(data_list):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n\n    >>> freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    True\n    \"\"\"\n    dict_ = Counter()\n    for d in data_list:\n        for i in d:\n            dict_[i] += 1\n    return dict_\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(a):\n    d = defaultdict(int)\n    for i in a:\n        for j in i:\n            d[j] += 1\n    return d", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(lst):\n    c = Counter(y for el in lst for y in el)\n    return c", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(L):\n    return Counter(item for sublist in L for item in sublist)", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(a):\n    \"\"\"\n        :param a: list of lists\n        :return: dictionary of frequencies of the elements in the lists\n    \"\"\"\n    d = collections.Counter()\n    for lst in a:\n        for elem in lst:\n            d[elem] += 1\n    return d\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(list_of_lists):\n    count = {}\n    for sublist in list_of_lists:\n        for ele in sublist:\n            if ele not in count:\n                count[ele] = 1\n            else:\n                count[ele] += 1\n    return count\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\n# input\nl=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\n\n# output\n# {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\n\n# solution\nfrom collections import Counter\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\ncounter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n# counter = Counter(chain.from_iterable(l))\n\n# solution\n#", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(arr):\n    return Counter(elem for lst in arr for elem in lst)\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\n\ndef freq_element(list_of_lists):\n    \"\"\"\n    Input:\n    list_of_lists - a list of lists\n    Output:\n    a dictionary with elements of list as keys and their count as values.\n    \"\"\"\n    count_elements = Counter()\n    for elements in list_of_lists:\n        count_elements[elements] += 1\n    return count_elements\n\ndef freq_element(list_of_lists):\n    \"\"\"\n    Input:\n    list_of_lists - a list of lists\n    Output:\n    a dictionary with elements of list as keys and their count as values.\n    \"\"\"\n    count_elements = {}\n    for elements in list_of_lists:\n        count_elements[elements] = count_elements.get(elements, 0) + 1\n    return count_elements", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(lst):\n    d = defaultdict(int)\n    for i in lst:\n        for j in i:\n            d[j] += 1\n    return d\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(data):\n\treturn filter(lambda x: x%2==0, data)\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n# Write your solution here.\nfilter_evennumbers = lambda number_list: list(filter(lambda x: x%2==0,number_list))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(some_list):\n    return [number for number in some_list if number%2==0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(lst):\n    filtered_list = list(map(lambda num: num if num%2==0 else None, lst))\n    return filtered_list\n\n# Test the function", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x%2==0,nums))\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x%2==0,nums))\n\n# Enter the matrix\nmatrix = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])\n\n# Calling the function", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(a_list):\n    return list(filter(lambda x: x % 2 == 0, a_list))\n\n\ndef sort_and_print(a_list):\n    sorted_a_list = sorted(a_list, key=lambda x: x[0], reverse=True)\n    for item in sorted_a_list:\n        print(item)\n\n\ndef print_names(a_list):\n    for item in a_list:\n        print(item[0], end=' ')\n    print()\n\n\n# test for filter_evennumbers", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(list):\n    return list(filter(lambda x: x%2==0, list))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(array):\n    return [num for num in array if num%2 == 0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\nfilter_evennumbers = lambda l : [i for i in l if i%2==0]"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(a, k):\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] == a[i-1]:\n            count+=1\n            if count == k:\n                return a[i]\n            if count > k:\n                break\n    return -1", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\n# List of all elements\ndef find_Sum(list,sum):\n    if not list:\n        return 0\n    result = 0\n    for i in list:\n        if i in list:\n            result+=i\n    return result\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, number):\n    count = 0\n    for i in arr:\n        if i == number:\n            count+=1\n\n    return count\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    sum = 0\n    for i in arr:\n        if i != 0:\n            sum += i\n            sum %= n\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(nums,sum):\n\ts=0\n\tfor n in nums:\n\t\tif n == sum:\n\t\t\ts+=n\n\treturn s\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n# Write your code here.\ndef find_Sum(array,sum):\n    sum = 0\n    for i in range(len(array)):\n        if array[i] in array:\n            if array[i] == sum:\n                sum += 1\n            else:\n                sum += array[i]\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(arr,sum):\n    # Solution:\n    # run the loop and check for the sum, if the sum == n then print the sum, then add it to the sum\n    # in each iteration of the loop\n    sum = 0\n    for i in arr:\n        if i == sum:\n            sum += 1\n        else:\n            sum = 0\n\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,n):\n\ts = 0\n\tfor i in range(n):\n\t\tif arr[i] in arr:\n\t\t\ts+=arr[i]\n\treturn s\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_sum(arr,n):\n    sum=0\n    for i in range(n):\n        if arr[i] > 1:\n            sum+=arr[i]\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n# i am not getting the result correct.. any help?\n# the answer is 3\ndef find_Sum(arr,x):\n    sum = 0\n    for i in arr:\n        if i == x:\n            sum += x\n        else:\n            sum += i\n    return sum\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\n\ndef text_match(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore using regex.\n\n    >>> text_match(\"aab_cbbbc\")\n    'Found a match!'\n    \"\"\"\n    words = re.findall(r'(?<=\\W)(\\w+)\\1', text)\n    if words:\n        return \"Found a match!\"\n    else:\n        return \"No matches found!\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    text = re.findall(r'(?<=[a-z])[A-Z](?=[a-z])', text)\n    if text:\n        return \"Found a match!\"\n    else:\n        return \"Didn't find a match\"\n\n# if __name__ == '__main__':\n#     print(text_match(\"aab_cbbbc\"))\n\n# # Exercise 11.2\n\n# def f(a, b, c, d):\n#     assert f(3, 2, 5, 7) == 6\n#     assert f(3, 2, 5, 10) == 15\n#     return a + b + c + d\n\ndef f(a, b, c, d):\n    return a + b + c + d\n\n# if __name__ == '__main__':\n#     print(f(3, 2, 5, 7))\n#     print(f(3, 2, 5, 10))\n\n# # Exercise 11.3\n\n# def text_match(text):\n#     text = text.replace(\"_\", \" \")\n#     return len(text)\n\ndef text_match(text):\n    return len(text.replace(\"_\", \" \"))\n\n# if __name__ == '__main__':\n#     print(text_match(\"aab_cbbbc\"))\n#     print(text_match(\"aa_bbbbc\"))\n\n# # Exercise 11.4\n\n# def text_match(text):\n#     text = re.findall(r'(?<=[a-z])[A-Z](?=[a-z])', text)\n#     text = \"\".join(text)\n#     return text\n\ndef text_match(text):\n    text = \"\".join(re.findall(r'(?<=[a-z])[A-Z](?=[a-z])', text))\n    return text\n\n# if __name__ == '__main__':\n#     print(text_match(\"aab_cbbbc\"))\n#     print(text_", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    \"\"\"\n    :param text: a string\n    :return: a string\n    \"\"\"\n    if re.search(r'[^\\w\\s\\d_]+', text) is None:\n        print('Found a match!')\n        return 'Found a match!'\n    else:\n        return 'Not a match!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    if re.search(\"_\".join(list(map(str.lower, text))), text):\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\n# +", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    if re.search('_.*[_.]', text):\n        return 'Found a match!'\n    else:\n        return 'No match found.'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    pattern = re.compile('[^a-z]+')\n    words = re.findall(pattern, text)\n    if words:\n        return \"Found a match!\"\n    else:\n        return \"Not Found!\"\n\n# test case", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    if re.search(r'\\b_b_', text):\n        print(\"Found a match!\")\n    else:\n        print(\"No match found!\")\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\n# +\n# Ans:\n# \\w is a regex for any letter (a-zA-Z0-9) or underscore (_).\n# \\w+ is a regex for 1 or more of the previous character (which means 1 or more letters or underscores)\n\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n\n    >>> text_match(\"aab_cbbbc\")\n    'Found a match!'\n    \"\"\"\n    if re.search(r'\\w+', text):\n        return 'Found a match!'\n    else:\n        return 'Did not find a match.'\n\n\n# -\n\n# **Question 4:** Write a function to find all the numbers from 10 to 99 in the format XXXXXX. For example, if the input was 636, the function should return 6366 and 6376.\n\n# +\n# Ans:\n# X is a regex for any number from 0-9.\n# \\d+ is a regex for 1 or more of the previous character (which means 1 or more numbers)\n\ndef find_numbers(num):\n    \"\"\"\n    Write a function to find all the numbers from 10 to 99 in the format XXXXXX.\n    For example, if the input was 636, the function should return 6366 and 6376.\n\n    >>> find_numbers(366)\n    '366'\n    \"\"\"\n    return re.search(r'\\d+', num)\n\n\n# -\n\n# **Question 5:** Write a function to check if a string is palindrome. For example, pallindrome(\"radar\") should return True.\n\n# +\n# Ans:\ndef is_palindrome(s):\n    \"\"\"\n    Write a function to check if a string is palindrome. For example, pallindrome(\"radar\") should return True.\n\n    >>> is_palindrome(\"radar\")\n    True\n    \"\"\"\n    s = s.lower()\n    return s == s[::-1]\n\n\n# -\n\n# **Question 6:** Write a function that takes a", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n  if text.count('_') == 1:\n    return \"Found a match!\"\n  return \"No match\"\n\ntext_match(\"aab_cbbbc\")\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(str1):\n    if str1[0]=='p':\n        return \"matched!\"\n    else:\n        return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    #your code here\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n    string = string.lower()\n    if(string[:5]=='python'):\n        print('Matched!')\n    else:\n        print('Not matched!')\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    for word in text.split(' '):\n        if word.startswith(\"python\"):\n            print(\"Matched! word is: %s\" % word)\n            return word\n    print(\"Not matched!\")\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(mystr):\n    try:\n        index = mystr.index(\"python\")\n        return mystr[0:index]\n    except ValueError:\n        return (\"Not matched!\")\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if text.startswith('python'):\n        return 'Not matched!'\n    else:\n        return 'Matched!'\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    if text.startswith(\"python\"):\n        return \"Match!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    \"\"\"\n    text: A string, the text to be matched.\n    Returns: A string, the matched text or 'Not matched!' if text doesn't match.\n    \"\"\"\n    if len(text) <= 0:\n        return 'Not matched!'\n\n    if text.lower() in 'hello':\n        return text\n\n    else:\n        return 'Not matched!'\n\ntext = \"Python\"\n\n# Enter the text", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n# Solution\ndef text_match_string(text):\n    text_list = text.split()\n    for word in text_list:\n        if word.startswith('python'):\n            return word\n    return \"Not matched!\""], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    i = 0\n    while i < len(arr):\n        gcd = arr[i]\n        while i < len(arr) and arr[i] > gcd:\n            gcd = gcd if gcd % arr[i] == 0 else gcd // arr[i] * arr[i]\n        if i < len(arr) and arr[i] == gcd:\n            i += 1\n        else:\n            return gcd", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n    gcd = 0\n    while arr[1] != 0:\n        gcd = arr[0] % arr[1]\n        arr[0], arr[1] = arr[1], arr[0] % arr[1]\n    return gcd\n\ndef get_lcm(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n    lcm = 0\n    for i in arr:\n        lcm += i\n    gcd = get_gcd(arr)\n    lcm = lcm // gcd * gcd\n    return lcm\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(a):\n    # if list is empty\n    if len(a) == 0:\n        return -1\n\n    for i in range(1, len(a)+1):\n        for j in range(i, len(a)+1, i):\n            # check if array elements are divisible by i\n            if a[j] % i == 0:\n                # return gcd\n                return i\n\n    return -1\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(nums):\n    if nums == []:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        if nums[0] % nums[1] == 0:\n            return nums[0]\n        else:\n            return nums[1]\n    return get_gcd(nums[:len(nums) // 2]) * get_gcd(nums[len(nums) // 2:])", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\n# iterative solution\ndef get_gcd(lst):\n    i = 1\n    while i <= len(lst):\n        for j in range(1, len(lst)):\n            if lst[j] % i == 0:\n                return i\n        i += 1\n\n# print(get_gcd([2, 4, 6, 8, 16]))\n\n# recursive solution\ndef gcd_helper(lst, i, j):\n    if j == 0:\n        return lst[i]\n    else:\n        return gcd_helper(lst, i, j-1) % gcd_helper(lst, i+1, j)\n\ndef get_gcd2(lst):\n    if lst == [] or lst == None:\n        return 0\n    else:\n        return gcd_helper(lst, 0, len(lst)-1)\n\n# print(get_gcd2([2, 4, 6, 8, 16]))", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\n# Iterative Solution\n\ndef get_gcd(arr):\n    \"\"\"\n    Given an array of positive integers, find the greatest common divisor of all\n    the array elements.\n\n    Args:\n        arr (list): A list of positive integers.\n\n    Returns:\n        (int): Greatest common divisor of all the given array elements.\n\n    Example:\n        >>> get_gcd([2, 4, 6, 8, 16])\n        2\n    \"\"\"\n\n    if not isinstance(arr, list) or not arr or not isinstance(arr[0], int):\n        raise ValueError(\"Incorrect input\")\n\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    g = arr[0]\n\n    for i in range(1, len(arr)):\n        g = gcd(g, arr[i])\n\n    return g\n\n# Recursive Solution\n\ndef gcd(a, b):\n    \"\"\"\n    Given two positive integers, find the greatest common divisor (gcd) of them.\n\n    Args:\n        a (int): First positive integer.\n        b (int): Second positive integer.\n\n    Returns:\n        (int): Greatest common divisor of a and b.\n\n    Example:\n        >>> gcd(8, 4)\n        4\n    \"\"\"\n\n    if b == 0:\n        return a\n\n    return gcd(b, a % b)\n\n# Recursive Solution with memoization\n\ndef gcd(a, b):\n    \"\"\"\n    Given two positive integers, find the greatest common divisor (gcd) of them.\n\n    Args:\n        a (int): First positive integer.\n        b (int): Second positive integer.\n\n    Returns:\n        (int): Greatest common divisor of a and b.\n\n    Example:\n        >>> gcd(8, 4)\n        4\n    \"\"\"\n\n    if b == 0:\n        return a\n\n    if a not in gcd_memo:\n        gcd_memo[a] = gcd(b, a % b)\n\n    return gcd_memo[a]\n\ngcd_memo = {}", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    >>> get_gcd([2, 4, 6, 8, 16])\n    2\n    \"\"\"\n    return reduce(lambda x, y: x if x % y == 0 else y, arr)\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        temp = get_gcd(arr[1:])\n        for i in range(len(arr) - 1):\n            if arr[i] % temp == 0:\n                temp = arr[i]\n        return temp\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\n# +\n# solution\n\ndef get_gcd(nums):\n    \"\"\" returns the greatest common divisor for an array of numbers \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if nums[i] % nums[j] == 0:\n                    return nums[i]\n    return nums[n - 1]\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i] = 1\n\n    while True:\n        flag = 0\n        for i in range(len(arr)):\n            if arr[i] % arr[0] != 0:\n                arr[i] /= arr[0]\n                flag = 1\n\n        if flag == 0:\n            break\n\n    return arr[0]\n\ndef get_gcd2(arr):\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    while True:\n        flag = 0\n        for i in range(len(arr)):\n            if arr[i] % arr[0] != 0:\n                arr[i] /= arr[0]\n                flag = 1\n\n        if flag == 0:\n            break\n\n    return arr[0]\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# Solution:\n\ndef test_distinct(arr):\n    \"\"\"\n    This is a function to test whether all numbers in the array are distinct\n    \"\"\"\n    set_arr = set(arr)\n    return len(set_arr) == len(arr)\n\n# Testing the function\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n  if len(set(nums)) == len(nums):\n    return True\n  else:\n    return False\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# Solution\ndef test_distinct(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] == arr[1]:\n        return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[0] == arr[i]:\n                return False\n    return True", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(x):\n    for i in x:\n        for j in x:\n            if j == i and i != j:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    if len(nums) <= 1:\n        return len(set(nums)) <= 1\n\n    nums.sort()\n    first = nums[0]\n    last = nums[-1]\n    return first != last and all(nums[i] != nums[i+1] for i in range(len(nums)-1))", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    \"\"\"\n    :type nums: list[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) <=1:\n        return True\n    nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return False\n    return True", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(array):\n    return len(set(array)) == len(array)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(arr):\n    return len(set(arr)) == len(arr)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    num_set = set(nums)\n    return len(nums) == len(num_set)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(array):\n    if len(array) == len(set(array)):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    return int(str(a * a)[-1]) % int(str(b * b)[-1])\n\n# Driver program to test the above function\na = int(input(\"Enter a:\"))\nb = int(input(\"Enter b:\"))", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    factorial_a = 1\n    for i in range(1,a+1):\n        factorial_a = factorial_a * i\n    \n    factorial_b = 1\n    for i in range(1,b+1):\n        factorial_b = factorial_b * i\n\n    if factorial_a % factorial_b == 0:\n        return int(factorial_a // factorial_b)\n    else:\n        return 0\n\n\ndef test():\n    assert compute_Last_Digit(2,4) == 2\n    assert compute_Last_Digit(1,2) == 0\n    assert compute_Last_Digit(2,1) == 2\n    assert compute_Last_Digit(5,3) == 2\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if b%a == 0:\n        return a\n    return compute_Last_Digit(a+1,b)\n\ndef test_compute_Last_Digit():\n    assert compute_Last_Digit(2,4) == 2\n    assert compute_Last_Digit(4,3) == 3\n    assert compute_Last_Digit(5,5) == 5\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n\n    if a>b:\n        return 1\n    elif a<b:\n        return 0\n    elif a==b:\n        return 2\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n\treturn a % b\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    if a%b==0:\n        return b%10\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\nimport math\n\ndef compute_Last_Digit(a,b):\n    if (math.factorial(a)%math.factorial(b)==0):\n        print(\"a and b divide\")\n        return math.factorial(a)%math.factorial(b)%10\n    else:\n        print(\"a and b do not divide\")\n        return -1\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n\n    print(\"The last digit of a when b divides a is: {}\".format(compute_Last_Digit(a,b)))\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(n1,n2):\n\treturn n1//n2*n2%10\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    \"\"\"\n    >>> compute_Last_Digit(2,4)\n    2\n    \"\"\"\n    if a>b:\n        return 'Incorrect input'\n    else:\n        return str(int(str(a)+'!')[len(str(a))-1])\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    \"\"\"\n    >>> odd_bit_set_number(10)\n    15\n    >>> odd_bit_set_number(25)\n    31\n    >>> odd_bit_set_number(2)\n    6\n    \"\"\"\n    return (n | (n-1)) + 1", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    \"\"\"Return the number with odd bit set to 1\"\"\"\n    return (1 << (num - 1)) + 1\n\ndef odd_bit_set_number_2(num):\n    \"\"\"Return the number with odd bit set to 1\"\"\"\n    return 1 << (num - 1) + 1\n\ndef odd_bit_set_number_3(num):\n    \"\"\"Return the number with odd bit set to 1\"\"\"\n    odds = num & (1 - num)\n    return odds + num\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef odd_bit_set_number(num):\n    \"\"\"Return the number with odd bit set to 1\"\"\"\n    return (1 << (num - 1)) + 1\n\n# Enter the number\nnum = 10\n\n# Calling the function", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    # Set the 1st bit to 1 and shift the rest of the bits to the right\n    return num | (num >> 1) | (num >> 3) | (num >> 5) | (num >> 7)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    if(n & 1):\n        n ^= n ^ 0xffffffff\n    return n\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n    bit = 1\n    while bit <= 32:\n        number = number | (number << (bit - 1))\n        bit = bit << 1\n\n    return number\n\n#Below is an example usage:\n\n# Enter the number\nnumber = 10\n\n# Calling the function\nnumber = odd_bit_set_number(number)\n\n# Printing the result", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    return num\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef odd_bit_set_number(num):\n    return num\n\n# Enter the number\nnum = 10\n\n# Calling the function", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    n = 0\n    for i in range(32):\n        n = n | (1 << (i % 32))\n    return n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(n):\n    return n | (n & 1)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# def odd_bit_set_number(number):\n#     result = number & 0x1\n#     while (number > 0):\n#         number = number >> 1\n#         result = result << 1\n#         result = result | number\n#     return result\n\ndef odd_bit_set_number(number):\n    return number ^ (number >> 1)\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(x):\n    # the bitwise AND operator & returns the bits\n    # that are common in both operands\n    mask = 0x5555555555555555\n    # the bitwise OR operator | returns the bits\n    # that are unique in either operand\n    result = x & mask\n    # the bitwise XOR operator ^ returns the bits\n    # that are set in one operand but not set in the other\n    result |= (x & -x)\n    return result\n\n# Test case for odd_bit_set_number"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lst, n):\n    result = [None] * n\n    for i in range(0, n):\n        result[i] = lst[0][i]\n        for j in range(1, len(lst)):\n            result[i] = result[i] + lst[j][i]\n    return result\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst,n):\n    l=[]\n    for i in range(len(lst)):\n        if(i%n==0):\n            l.append(lst[i])\n    return l\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l,n):\n    if n==0:\n        return [row[0] for row in l]\n    else:\n        return [row[n-1] for row in l]\n\n#tests\nl = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, x):\n    result = []\n    for i in range(len(matrix[0])):\n        for row in matrix:\n            result.append(row[i])\n    return result[x::x]", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l, index):\n    return [row[index] for row in l]\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lst, n):\n    \"\"\"\n    Extracts the first element from a given two-dimensional list.\n    \"\"\"\n    return lst[0::n]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\n# Python program to find element at every\n# specified position in a two-dimensional\n# list\ndef specified_element(list2d, index):\n\t# storing result in a list\n\tresult = list()\n\n\t# checking index is valid or not\n\tif index < 0 or index > len(list2d) - 1:\n\t\tprint(\"Invalid index\")\n\t\treturn result\n\tfor i in range(len(list2d)):\n\t\t# checking if list is a row or a column\n\t\tif len(list2d[i]) == 1:\n\t\t\tresult.append(list2d[i][0])\n\t\telse:\n\t\t\tresult.append(list2d[i][index])\n\n\treturn result\n\n\n# Driver code\nlist2d = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nindex = 0", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list, n=None):\n    if n == None:\n        return [el[0] for el in list]\n    else:\n        return [el[n] for el in list]", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_of_lists, index):\n    return [row[index] for row in list_of_lists]", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list_of_list, index):\n    if len(list_of_list) == 0:\n        return []\n    elif len(list_of_list) == 1:\n        return list_of_list[0]\n    elif index == 0:\n        return list_of_list[0] + specified_element(list_of_list[1:], index)\n    else:\n        return list_of_list[0] + specified_element(list_of_list[1:], index-1)\n\nlist1 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nmin_length_list = lambda lst: min(lst, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\nlist1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nlist2 = []\nfor i in list1:\n    if len(i) < len(list2) or len(i) == len(list2) and i[0] < list2[0]:\n        list2 = i", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    # Function to find the list with minimum length\n    length = 1000\n    min_lst = []\n    for item in lst:\n        if(len(item) < length):\n            length = len(item)\n            min_lst = item\n    return (length, min_lst)\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(list):\n    return min(len(x) for x in list), list[list.index(min(list, key=len))]\n\n# Test cases", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(data):\n    min_len = lambda a: len(a) if len(a)<len(data[0]) else -1\n    return min(enumerate(data), key=min_len)\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n    lst = sorted(lst)\n    return (lst[0], lst[0])\n\n# Test 1", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(arr):\n    return min(arr, key=lambda x:len(x))\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(l):\n    l.sort(key = lambda x: len(x))\n    return (len(l[0]), l[0])\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# +\n\ndef min_length_list(lst):\n    # TODO\n    return max(lst, key=len)\n    ", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(A):\n    min_length = 9999\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!=j:\n                min_length = min(min_length, len(A[i]) + len(A[j]))\n    return min_length, A[A.index(min_length)]\n\n\nA = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\nimport math\n\ndef check_equilateral(a,b,c):\n    if(math.sqrt(a**2+b**2+c**2)==a and (a==b and b==c)):\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    return a==b and b==c and c==a\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\n# +\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n    \ncheck_equilateral(6,8,12)\n\n\n# +\ndef is_prime(number):\n    for i in range(2,number//2+1):\n        if number%i == 0:\n            return False\n    return True\n\nis_prime(14)\n\n\n# -\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if (a==b) and (b==c) and (a==c):\n        return True\n    else:\n        return False\n\n#If you want to call the function then use the following code:\n\n#assert check_equilateral(4,6,8)==False", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\n# +\n# write your code here\n\n# -\n\n# # Write a program to calculate the area of a triangle with lengths a,b and c.\n# assert area_of_triangle(3,4,5)==6.0\n\n# +\n# write your code here\n\n# -\n\n# # Write a function to check if a given triangle is isosceles triangle or not.\n#\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to find the perimeter of a triangle.\n# assert perimeter_of_triangle(3,4,5)==12\n\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to find the area of a circle.\n# assert area_of_circle(5)==78.53981633974483\n\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to calculate the area of a sphere.\n# assert area_of_sphere(2)==4.0\n\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to check if a given triangle is right triangle or not.\n#\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to check if a given triangle is acute triangle or not.\n#\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to check if a given triangle is obtuse triangle or not.\n#\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to check if a given triangle is scalene triangle or not.\n#\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to check if a given triangle is equilateral triangle or not.\n#\n\n# +\n# write your code here\n\n\n# -\n\n# # Write a function to check if a given triangle is isosceles triangle or not.\n#\n\n# +\n# write your code here\n\n\n# -\n\n#", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if (a+b+c==180) and (a==b==c):\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    s= (a+b+c)/2\n    if s**2==a*b*c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a == b and b == c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n\n\n#assert check_equilateral(6,8,12)==False \ncheck_equilateral(6,8,12)\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n    "], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(length,breadth):\n    return length * breadth\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    \"\"\"\n    Calculate area of parallelogram.\n    \"\"\"\n    return a*b\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef parallelogram_area(a,b):\n    \"\"\"\n    Calculate area of parallelogram.\n    \"\"\"\n    return a*b\n\n# Enter the width and height of the parallelogram\nwidth = 10\nheight = 20\n\n# Calling the function\narea = parallelogram_area(width, height)\n\n# Printing the area", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a * b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\nfrom typing import Union\n\ndef parallelogram_area(a: int, b: int) -> Union[int, float]:\n    \"\"\"\n    >>> parallelogram_area(10,20)\n    200\n    \"\"\"\n    assert type(a) == int and type(b) == int\n    assert a > 0 and b > 0\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a,b):\n    return a * b\n\n#assert parallelogram_area(10,20)==200\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\n# +", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(side_a,side_b):\n    if(side_a != side_b):\n        return side_a*side_b\n    else:\n        print(\"You can't make a parallelogram with same side\")\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a * b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a,b):\n    return a*b\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n\tif string[0] == string[len(string)-1]:\n\t\treturn \"Equal\"\n\telse:\n\t\treturn \"Not equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n    \ndef check_Equality(str):\n    return 'Equal' if str[0] == str[-1] else 'Not Equal'\n\ndef check_Equality(str):\n    return 'Equal' if str[0] == str[-1] else 'Not Equal'\n\ndef check_Equality(str):\n    return str[0] == str[-1]\n\ndef check_Equality(str):\n    return str[0] == str[-1]\n\ndef check_Equality(str):\n    return \"Equal\" if str[0] == str[-1] else \"Not Equal\"\n\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    return \"Not Equal\"\n\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str1):\n    if str1[0]==str1[-1]:\n        return \"Equal\"\n    else:\n        return \"NotEqual\"\n\ndef test_function():\n    assert check_Equality(\"abcda\") == \"Equal\"\n    assert check_Equality(\"abcba\") == \"NotEqual\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str1):\n    if str1[0] == str1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(input_str):\n    # write your code here\n    input_str = str(input_str)\n    if input_str[0] == input_str[-1]:\n        return \"Equal\"\n    else:\n        return \"NotEqual\"\n\n\n# # Q.3) Write a python function to check whether a given string is a palindrome or not.\n#\n# assert palindrome(\"car\") == \"Palindrome\"\n# assert palindrome(\"madam\") == \"Not a palindrome\"\n#\n\ndef palindrome(input_str):\n    # write your code here\n    input_str = str(input_str)\n    input_str = input_str.lower()\n    if input_str == input_str[::-1]:\n        return \"Palindrome\"\n    else:\n        return \"Not a palindrome\"\n\n\n# # Q.4) Write a python function to find the maximum, minimum and average of a list.\n#\n# assert max_min_avg([5,10,1,2]) == (5, 10, 6.5)\n\ndef max_min_avg(input_list):\n    # write your code here\n    input_list = sorted(input_list)\n    max_item = input_list[-1]\n    min_item = input_list[0]\n    sum_item = 0\n    for item in input_list:\n        sum_item += item\n    avg_item = sum_item / len(input_list)\n    return max_item, min_item, avg_item\n\n\n# # Q.5) Write a python function to get the first K unique elements of an array.\n#\n# assert get_unique_elements([1,2,2,2,1], 2) == [1,2]\n\ndef get_unique_elements(input_list, k):\n    # write your code here\n    input_list = sorted(input_list)\n    output_list = [input_list[0]]\n    for i in range(1,len(input_list)):\n        if input_list[i] != input_list[i-1]:\n            output_list.append", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n\n# 11. Write a python function to check whether a given string is a palindrome or not.", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n# Solution\ndef check_equality(str1):\n    if str1[0] == str1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n\n# Test case\nstr1 = \"abcda\""], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    # Initialize the output array\n    output = [0] * len(arr)\n\n    # Store count of each item\n    count = [0] * 100\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Change count[i] so that count[i] now contains actual position of this item in output array\n    for i in range(1, 100):\n        count[i] += count[i - 1]\n\n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n\n    return output\n\n\ndef test():\n    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    max_num = max(arr)\n    count_arr = [0] * (max_num + 1)\n    for i in arr:\n        count_arr[i] += 1\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n    ans = [0] * len(arr)\n    for i in range(len(arr) - 1, -1, -1):\n        ans[count_arr[arr[i]] - 1] = arr[i]\n        count_arr[arr[i]] -= 1\n    return ans\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    max_element = max(arr)\n    counter = [0] * (max_element + 1)\n    for i in arr:\n        counter[i] += 1\n    for i in range(max_element):\n        counter[i+1] += counter[i]\n    output = []\n    for i in range(max_element):\n        while counter[i] > 0:\n            output.append(i)\n            counter[i] -= 1\n    return output\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\nimport random\ndef counting_sort(array):\n    \"\"\"\n    :param array: The array to sort\n    :return: The sorted array\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    else:\n        # Define the max value\n        max_num = max(array)\n        max_val = max_num + 1\n\n        # Build a dictionary with count of each value\n        count_dict = {}\n        for val in array:\n            if val in count_dict:\n                count_dict[val] += 1\n            else:\n                count_dict[val] = 1\n\n        # Build an array with count of each value\n        count_array = []\n        for key, val in count_dict.items():\n            count_array.append((key, val))\n\n        # Sort the count array\n        count_array.sort(key=lambda x:x[1])\n        # array = [i[0] for i in count_array]\n        count_array.reverse()\n        array = [i[0] for i in count_array]\n        # print(count_array)\n\n        # Build a new array with the sorted values\n        new_array = []\n        for i in range(len(count_array)):\n            new_array += [array[i] for i in range(count_array[i][1])]\n\n        return new_array\n\n\n\n# sort_array = [1, 4, 5, 6, 7, 8, 23]\n# print(counting_sort(sort_array))", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(array):\n    \"\"\"\n        Apply the counting sort algorithm to the given array.\n\n        Args:\n            array: the array to be sorted\n\n        Returns:\n            The array sorted using the counting sort algorithm\n    \"\"\"\n    length = len(array)\n    max_value = max(array)\n    count = [0] * max_value\n    for i in range(length):\n        count[array[i]] += 1\n\n    for i in range(1, max_value):\n        count[i] += count[i-1]\n\n    result = [0] * length\n\n    for i in range(length-1, -1, -1):\n        result[count[array[i]]-1] = array[i]\n        count[array[i]] -= 1\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    count_array = [0] * len(arr)\n    for num in arr:\n        count_array[num] += 1\n\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i-1]\n\n    output = [0] * len(arr)\n    for i in range(len(arr)-1, -1, -1):\n        output[count_array[arr[i]] - 1] = arr[i]\n        count_array[arr[i]] -= 1\n    return output\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter\n\ndef counting_sort(arr):\n    \"\"\"Sorting an array using counting sort\"\"\"\n\n    count = Counter(arr)\n\n    # Finding the maximum value in the given array\n    max_val = max(arr)\n\n    # The sorted array\n    res = np.zeros(max_val + 1)\n\n    # Iterate through all the values in the input array and count their occurrences\n    for val in arr:\n        res[val] += 1\n\n    # Iterate through the count array\n    for val in range(len(arr)):\n        res[val] += res[val - 1]\n\n    # Sort the array using insertion sort\n    return insertion_sort(res[:len(arr)])[:len(arr)]\n\n\ndef insertion_sort(arr):\n    \"\"\"Sorting an array using insertion sort\"\"\"\n\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\n\n# test case\narr = [1,23,4,5,6,7,8]\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    count = [0] * (max(array)+1)\n    for i in array:\n        count[i] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n\n    sortedArray = []\n\n    for i in range(len(array)):\n        sortedArray.append(count[array[i]]-1)\n        count[array[i]] -= 1\n\n    return sortedArray\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(a):\n    #use a dictionary for the count\n    #and a list for the index\n    c = {}\n    for i in a:\n        c[i] = c.get(i,0) + 1\n\n    list_a = []\n    for key in c.keys():\n        for i in range(c[key]):\n            list_a.append(key)\n\n    return list_a", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    if not arr: return []\n    #find max\n    max_val = max(arr)\n    # create a dict with keys of values and values of count\n    count_dict = dict()\n    for i in arr:\n        count_dict[i] = count_dict.get(i, 0) + 1\n    # create a list of (value, count)\n    count_list = list(count_dict.items())\n    # sort the list in reverse order\n    count_list.sort(key=lambda x: x[0], reverse=True)\n    sorted_list = []\n    for i in range(len(count_list)):\n        for j in range(count_list[i][1]):\n            sorted_list.append(count_list[i][0])\n    return sorted_list\n\n\n# +\ndef test_counting_sort():\n    arr = [1, 23, 4, 5, 6, 7, 8]\n    expected = [1, 4, 5, 6, 7, 8, 23]\n    assert counting_sort(arr) == expected\n    print('Test case passed!')\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(b, n, t):\n    s = b * (1 + b**t)\n    return s\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\n# +\nimport math\ndef tn_gp(a, n, t):\n    \"\"\"\n    returns t-nth term of geometric series\n    \"\"\"\n    return math.pow(a,t)*math.pow(1-a,n-t)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(first_term, n, t):\n    s = 0\n    for i in range(1, t+1):\n        s = s + first_term\n    return s\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n,p,t):\n    return p*t**(n-1)\n\n#Test", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    if t==1:\n        return a\n    else:\n        return a*tn_gp(a,n,t-1)\n\n# Test cases:", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n# my solution\ndef tn_gp(t,k,p):\n    assert t>0 and k>0\n    return p*(1-1/k)**t\n\n#better solution\nfrom math import pow\n\ndef tn_gp(t,k,p):\n    assert t>0 and k>0\n    return p*(pow(1-1/k,t))\n\n#better solution\nfrom math import pow\n\ndef tn_gp(t,k,p):\n    assert t>0 and k>0\n    return p*pow((1-1/k),t)", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(first_term,common_difference,index):\n    if(index==0):\n        return first_term\n    else:\n        return first_term+(common_difference*tn_gp(first_term,common_difference,index-1))\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(first_term,nth_term,scale):\n    if nth_term==0:\n        return 0\n    else:\n        sum=0\n        for i in range(nth_term):\n            sum=sum+first_term*scale**i\n        return sum\n\ndef test_function():\n    assert tn_gp(1,5,2)==16", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(n, t, p):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return p\n    else:\n        return tn_gp(n-1, t*t, p*t)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n,a,t):\n\tassert type(n)==int\n\tassert type(a)==int\n\tassert type(t)==int\n\treturn a*t**n\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    if n < 0:\n        return False\n    else:\n        n = str(n)\n        return int(n[::-1]) + int(n) == n\n\n# Enter the number\nn = int(input())\n\n# Calling the function", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(number):\n    \"\"\"\n    >>> check(70)\n    False\n    >>> check(23)\n    True\n    \"\"\"\n    if number % 10 == 7:\n        return False\n    else:\n        return number == str(int(number[::-1]) * 2 - 1)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    rev = int(str(num)[::-1])\n    if num-2*rev == 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    reverse = 0\n    rev = 0\n\n    for i in range(num):\n        rev = rev * 10 + num % 10\n        reverse = reverse * 10 + rev % 10\n        num = num // 10\n    if reverse == num:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(number):\n    if number == int(str(number)[::-1]) * 2 - 1:\n        return True\n    else:\n        return False\n\n#check = check(17)\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(x):\n    return x % 2 == 0 and (x // 2 - x % 2) == x", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(number):\n    if number != (number//100)*100:\n        print(\"Not Possible\")\n    else:\n        print(\"Possible\")\ncheck(70)\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    if str(n) == str(int(str(n)[::-1])-2):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(number):\n    number = str(number)\n    #print(number)\n    if (number[::-1] == number[:-1]):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    return num != (num * 2) + 1\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,k):\n    digits = list(set(digits))\n    digits.sort()\n    ans = 0\n    for i in range(len(digits)):\n        for j in range(i+1,len(digits)):\n            for x in range(i,j+1):\n                ans = max(ans, int(digits[i]*10**(x-i)+digits[j]*10**(j-x)))\n    return ans\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,max_num_len):\n    \"\"\"\n    >>> find_Max_Num([1,2,3],3)\n    321\n    >>> find_Max_Num([1,2,3],4)\n    213\n    \"\"\"\n    ans = \"\"\n    for i in range(len(digits)):\n        ans += digits[i]\n        ans = ans[::-1]\n        ans = ''.join(sorted(ans))\n        if len(ans) == max_num_len:\n            return ans\n    return ans\n\ndef find_Max_Num_Improved(digits,max_num_len):\n    \"\"\"\n    >>> find_Max_Num_Improved([1,2,3],3)\n    321\n    >>> find_Max_Num_Improved([1,2,3],4)\n    213\n    \"\"\"\n    ans = \"\"\n    for i in range(len(digits)):\n        ans += digits[i]\n        ans = ans[::-1]\n    return ans\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, size):\n    max_num = None\n    for i in range(len(digits)):\n        for j in range(len(digits)):\n            num = 0\n            if i!=j:\n                num = max(digits[i], digits[j]) * size\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,n):\n    ans = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            tmp = str(digits[i]) + str(digits[j])\n            if tmp > ans:\n                ans = tmp\n\n    return int(ans)\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,k):\n    if len(digits)==0:\n        return 0\n    m=digits[0]\n    for i in digits:\n        if i>m:\n            m=i\n    res=m\n    if k<=1:\n        return res\n    res1=find_Max_Num(digits[1:],k-1)\n    if res1>m:\n        res=res1+m\n    return res\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,size):\n    \n    #Base case when there are no more digits\n    if len(digits) == 0:\n        return 0\n    \n    #Recursive case when there are more digits\n    else:\n        return max(find_Max_Num(digits[1:],size),(digits[0]*10**size + find_Max_Num(digits[1:],size-1)))\n    \ndef test_function():\n    digits = [1,2,3]\n    assert find_Max_Num(digits,3) == 321\n    digits = [1,2,3,4]\n    assert find_Max_Num(digits,4) == 1234\n    digits = [1,2,3,4,5]\n    assert find_Max_Num(digits,5) == 12345\n    digits = [1,2,3,4,5,6]\n    assert find_Max_Num(digits,6) == 123456\n    digits = [1,2,3,4,5,6,7]\n    assert find_Max_Num(digits,7) == 1234567\n    digits = [1,2,3,4,5,6,7,8]\n    assert find_Max_Num(digits,8) == 12345678\n    digits = [1,2,3,4,5,6,7,8,9]\n    assert find_Max_Num(digits,9) == 123456789\n\n\n#Calling the test function\ntest_function()", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(arr, n):\n    max_num = 0\n    for i in range(1, (10**n+1)):\n        if i > max_num:\n            max_num = i\n        if i < max_num:\n            for j in range(len(arr)):\n                if (i//(10**(j))) == (arr[j] * (10**(n-j-1))):\n                    break\n            else:\n                max_num = i\n    return max_num\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, k):\n    digits = sorted(digits,reverse=True)\n    result = 0\n    for i in range(len(digits)):\n        num = int(''.join(digits[:i+1]))\n        if num>result:\n            result = num\n    return result\n\n\nfind_Max_Num([1,2,3],3)", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\n# function to find the largest number possible with given digits\ndef find_Max_Num(digits, num):\n    max_num = 0\n    n = len(digits)\n    if n <= num:\n        for i in range(n,num+1):\n            for j in range(num+1):\n                temp = i * j\n                if temp > max_num and temp % 10 == max_num % 10:\n                    max_num = temp\n    else:\n        return -1\n    return max_num", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, max):\n    n = len(digits)\n    if n == 1:\n        return digits[0]\n    elif n == 2:\n        return max(digits[0],digits[1])\n    else:\n        n = len(digits)\n        temp = digits[0]\n        for i in range(1,n):\n            temp = find_Max_Num([digits[i], temp], max)\n            digits[i] = temp\n        return find_Max_Num([digits[n-1], temp], max)\n\ndef test_function(test_case):\n    digits = test_case[0]\n    solution = test_case[1]\n    output = find_Max_Num(digits, max)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1,num2):\n    \n    if(num1==num2):\n        return False\n    elif(num1>num2):\n        return False\n    else:\n        return True\n        \n#-----------------------------------------\n# Example 2: Write a python function to check whether the given number is a perfect square or not.\n\ndef is_Perfect_Square(num):\n    if(num==0):\n        return False\n    else:\n        for i in range(1,num):\n            if(num%i==0):\n                return False\n        else:\n            return True\n        \n#-----------------------------------------\n# Example 3: Write a python function to find the least common multiple of two integers.\n\ndef least_common_multiple(num1,num2):\n    return num1*num2//gcd(num1,num2)\n    \n#-----------------------------------------\n# Example 4: Write a python function to check whether the given number is a perfect cube or not.\n\ndef is_Perfect_Cube(num):\n    if(num==0):\n        return False\n    else:\n        if(num**3==num):\n            return True\n        else:\n            return False\n#-----------------------------------------\n# Example 5: Write a python function to check whether the given number is a perfect power or not.\n\ndef is_Perfect_Power(num):\n    if(num==0):\n        return False\n    else:\n        count=0\n        for i in range(2,num+1):\n            if(num%i==0):\n                count+=1\n        if(count==num-1):\n            return True\n        else:\n            return False\n        \n#-----------------------------------------\n# Example 6: Write a python function to find the largest palindrome made up of digits of num1 and num2.\n\ndef largest_Palindrome(num1,num2):\n    ans=0\n    while(True):\n        ans+=1\n        temp=(num1*ans+num2*ans)%1000000007\n        if(temp==temp[::-1]):\n            return ans\n        else:\n            continue\n        \n#-----------------------------------------\n# Example 7: Write a python function to find the maximum of num1 and num2, given", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(n1,n2):\n    return (n1>0) and (n2<0) or (n1<0) and (n2>0)\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1,num2):\n    if num1>0 and num2<0 or num1<0 and num2>0:\n        return True\n    else:\n        return False\n\n# for testing\n\n#print(opposite_Signs(1,-2)) # True\n#print(opposite_Signs(-1,2)) # True\n#print(opposite_Signs(2,2)) # False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x,y):\n    if x == 0:\n        return True\n    elif y == 0:\n        return True\n    elif x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if a == 0:\n        return 1\n    elif b == 0:\n        return 1\n    elif a > 0 and b > 0:\n        return 0\n    elif a > 0 and b < 0:\n        return 1\n    elif a < 0 and b > 0:\n        return 1\n    elif a < 0 and b < 0:\n        return 0\n\n\ndef test_opposite_Signs():\n    assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(2,-2) == False\n    assert opposite_Signs(10,-20) == True\n    assert opposite_Signs(10,-20) == True\n    assert opposite_Signs(0,0) == 1\n    assert opposite_Signs(0,0) == 1\n    assert opposite_Signs(-1,1) == True\n    assert opposite_Signs(-1,1) == True\n    assert opposite_Signs(100,-200) == True\n    assert opposite_Signs(100,-200) == True\n    assert opposite_Signs(1000,-2000) == True\n    assert opposite_Signs(1000,-2000) == True\n    assert opposite_Signs(10000,-20000) == True\n    assert opposite_Signs(10000,-20000) == True\n\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if (a<0 and b>0) or (a>0 and b<0):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if (b<0):\n        return (a>0)\n    else:\n        return (a<0)\n\n\n# +\n# Write a python function to check whether the given two integers have same sign or not.", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    return ((a > 0 and b < 0) or (a < 0 and b > 0))\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(num1, num2):\n    if num1 > 0 and num2 < 0:\n        return True\n    elif num1 < 0 and num2 > 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if(a>0 and b<0 or a<0 and b>0):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom math import sqrt\n\ndef is_octagonal(n):\n    if n < 0:\n        raise ValueError(\"Input must be >= 0\")\n    return (8*n**2 - 7*n + 1) // 2\n\ndef test_is_octagonal():\n    assert is_octagonal(0) == 0\n    assert is_octagonal(1) == 1\n    assert is_octagonal(2) == 16\n    assert is_octagonal(3) == 65\n    assert is_octagonal(4) == 170\n    assert is_octagonal(5) == 65\n    assert is_octagonal(6) == 176\n    assert is_octagonal(7) == 69\n    assert is_octagonal(8) == 184\n    assert is_octagonal(9) == 72\n    assert is_octagonal(10) == 190\n\ndef find_nth_octagonal(n):\n    return is_octagonal(n)\n\ndef test_find_nth_octagonal():\n    assert find_nth_octagonal(0) == 0\n    assert find_nth_octagonal(1) == 1\n    assert find_nth_octagonal(2) == 16\n    assert find_nth_octagonal(3) == 65\n    assert find_nth_octagonal(4) == 170\n    assert find_nth_octagonal(5) == 65\n    assert find_nth_octagonal(6) == 176\n    assert find_nth_octagonal(7) == 69\n    assert find_nth_octagonal(8) == 184\n    assert find_nth_octagonal(9) == 72\n    assert find_nth_octagonal(10) == 190", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return n*(8*(n+1))//2\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (8 * (n - 2)) + 5\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 5\n    return n*8 + 1\n\ndef test_is_octagonal():\n    assert is_octagonal(1) == 1\n    assert is_octagonal(2) == 5\n    assert is_octagonal(3) == 13\n    assert is_octagonal(4) == 25\n    assert is_octagonal(5) == 65\n    assert is_octagonal(6) == 115\n    assert is_octagonal(7) == 185\n\ndef test_is_octagonal_random():\n    for i in range(1, 20):\n        x = random.randint(0, 1000)\n        assert is_octagonal(x) == is_octagonal(x)\n\ndef test_is_octagonal_negative():\n    assert is_octagonal(-1) == 0\n    assert is_octagonal(-2) == 0\n    assert is_octagonal(-3) == 0\n    assert is_octagonal(-4) == 0\n    assert is_octagonal(-5) == 0\n    assert is_octagonal(-6) == 0\n    assert is_octagonal(-7) == 0\n    assert is_octagonal(-8) == 0\n\ndef test_is_octagonal_edge_cases():\n    assert is_octagonal(10**20 + 1) == 10**20*8 + 1", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\nimport math\n\n\ndef is_octagonal(n):\n    # your code goes here\n    return math.pow(8, n) + math.pow(6, n) - math.pow(3, n)\n\n\ndef test_octagonal():\n    assert is_octagonal(2) == 40\n    assert is_octagonal(3) == 72\n    assert is_octagonal(4) == 112\n    assert is_octagonal(5) == 165\n    assert is_octagonal(6) == 232\n    assert is_octagonal(7) == 312\n    assert is_octagonal(8) == 405\n    assert is_octagonal(9) == 502\n    assert is_octagonal(10) == 602\n    assert is_octagonal(11) == 705\n\n\ndef test_octagonal_bounds():\n    assert is_octagonal(0) == 0\n    assert is_octagonal(1) == 1\n    assert is_octagonal(2) == 2\n    assert is_octagonal(3) == 3\n    assert is_octagonal(4) == 4\n    assert is_octagonal(5) == 5\n    assert is_octagonal(6) == 6\n    assert is_octagonal(7) == 7\n    assert is_octagonal(8) == 8\n    assert is_octagonal(9) == 9\n    assert is_octagonal(10) == 10\n    assert is_octagonal(11) == 11\n\n\ntest_octagonal()\ntest_octagonal_bounds()\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    if n == 1:\n        return 1\n    return 8*(n-1) + 1\n\n\n# test", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    octagonal = n * (8 * (n - 1) + 4)\n    return octagonal\n\ndef main():\n    #print is_octagonal(5)\n    print(is_octagonal(5))\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    while n > 0:\n        x = n ** 2\n        if x % 8 == 0:\n            return x\n        n += 1\n    return x\n\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return (n * (n + 1) // 2) - (n * (n - 1) // 2)\n\n\ndef octagonal_number(n):\n    # base case\n    if n == 0:\n        return 1\n\n    return is_octagonal(n) + octagonal_number(n - 1)\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Return True if n is an octagonal number\n    \"\"\"\n    return (8*n**2 - 1) // 6\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65\n\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\n# Approach #1: Using Prefix Sum (Time: O(n); Space: O(1))\ndef max_len_sub(arr, k):\n    s = 0\n    res = 0\n    for i in arr:\n        s += i\n        if s > k:\n            s -= arr[i]\n            res = max(res, i + 1)\n    return res\n\n# Approach #2: Using Counter (Time: O(n); Space: O(n))\nfrom collections import Counter\ndef max_len_sub(arr, k):\n    counter = Counter(arr)\n    max_freq = max(counter.values())\n    curr_sum = 0\n    max_len = 0\n    for i, num in counter.items():\n        curr_sum += num\n        if curr_sum > k:\n            curr_sum -= num\n            max_len = max(max_len, i + 1)\n    return max_len", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    max_len = 1\n    seq = []\n    for i in range(len(arr)):\n        if arr[i] == n:\n            seq.append(arr[i])\n        else:\n            seq.append(0)\n\n    for i in range(len(seq)):\n        if i >= 1 and seq[i] != 0 and seq[i] != seq[i-1]:\n            max_len = max(max_len, i - seq[i-1])\n\n    return max_len\n\narr = [2, 5, 6, 3, 7, 6, 5, 8]", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, k):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        if arr[i] % k == 0:\n            result = max(result, 1+max_len_sub(arr[i+1:], k))\n        else:\n            result = max(result, max_len_sub(arr[i+1:], k))\n    return result\n\n# Test case:\n# assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\ndef max_len_sub2(arr, k):\n    n = len(arr)\n    result = 0\n    dict_k = {}\n    dict_k[0] = 1\n    for i in range(n):\n        if k in dict_k:\n            if arr[i] % k == 0:\n                result = max(result, 1+dict_k[k])\n            else:\n                result = max(result, dict_k[k])\n        else:\n            dict_k[arr[i] % k] = dict_k.get(arr[i] % k, 0) + 1\n    return result\n\n# Test case:\n# assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(array, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n\n    for j in range(n+1):\n        dp[0][j] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j-1]\n            if array[i-1] != array[j-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n            else:\n                dp[i][j] += 1\n\n    return max(dp[n][:])\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, target):\n    dp = [0 for _ in range(len(arr))]\n    dp[0] = 1\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] - arr[j] == target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\n# my solution\n\n\ndef max_len_sub(nums, target):\n    max_len = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                max_len = max(max_len, j-i+1)\n    return max_len\n\n\n# print(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))\n\n\n# approach 1\n# time complexity = O(n^2)\n# def max_len_sub(nums, target):\n#     max_len = 0\n#     for i in range(len(nums)):\n#         for j in range(i+1, len(nums)):\n#             if nums[i] + nums[j] == target:\n#                 max_len = max(max_len, j-i+1)\n#     return max_len\n\n# print(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom typing import List\n\n\ndef max_len_sub(arr: List[int], sum: int) -> int:\n    sub_len = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] == sum:\n                sub_len += 1\n                break\n            if sub_len > len(arr) - j:\n                break\n    return sub_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    dp = [0] * (n+1)\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            if arr[i] - arr[j] == 0:\n                dp[i] = max(dp[i], dp[j]) + 1\n            else:\n                dp[i] = max(dp[i], dp[j])\n    return max(dp)\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_substrings(s, n):\n    result = 0\n    for i in range(len(s)):\n        currentSum = 0\n        for j in range(len(s)):\n            currentSum += int(s[j])\n            if currentSum == n:\n                result += 1\n                break\n    return result", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str,n):\n    count = 0\n    for i in range(len(str)):\n        if sum(str[i]) == len(str[i]):\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str, i):\n    ans = 0\n    for j in range(len(str)-i+1):\n        sub = int(str[j:j+i])\n        if sub == i:\n            ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s, n):\n    #s=str(s)\n    counter=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            sum_val = s[i]+s[j]\n            if (len(s[i])+len(s[j])==sum_val):\n                counter+=1\n    return counter\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str,n):\n    \"\"\"\n    TC : O(n)\n    SC : O(1)\n    \"\"\"\n    # Write your code here\n    i = 0\n    while i <= len(str)-n:\n        if str[i:i+n] == str[i:i+n][::-1]:\n            count = 0\n            for j in range(n):\n                if str[i+j] != '0':\n                    count += 1\n            if count == n:\n                print(str[i:i+n])\n        i+=1\n    return", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,l):\n    count = 0\n    if len(s)>=l:\n        for i in range(len(s)):\n            if sum(int(x) for x in s[i:]) == len(s[i:]):\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n#main function\ndef count_Substrings(str,n):\n    \n    #to keep track of count\n    count = 0\n    \n    #to keep track of i, j and sum\n    i = 0\n    j = 0\n    sum = 0\n    \n    #loop till the end of string\n    while j< len(str):\n        \n        #keep adding the digits of the string\n        sum = sum + int(str[j])\n        \n        #if sum is equal to length, increase count\n        if sum == n:\n            count = count + 1\n        \n        #if sum becomes greater than length, reset sum\n        if sum > n:\n            sum = 0\n        \n        #increase j\n        j = j + 1\n    \n    #return the final count\n    return count\n\n#function call", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(word, sum_of_digits):\n    if not word:\n        return 0\n    counter = 0\n    for i in range(len(word)):\n        if sum(list(map(int, list(word[i:i+1])))) == len(word[i:i+1]):\n            counter += 1\n    return counter\n\n# Test case 1", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str,k):\n    if k==0:\n        return 0\n    k,ans=k,0\n    for i in range(len(str)):\n        s,carry=0,0\n        while carry<=k and i+carry<len(str):\n            s+=int(str[i+carry])\n            carry+=1\n        if s==k:\n            ans+=1\n    return ans\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str,n):\n\n    \"\"\"\n    TC: O(n)\n    SC: O(n)\n    \"\"\"\n\n    #Corner Case\n    if str is None or str == \"\":\n        return 0\n\n    #Creating a set to store all unique digits\n    dig = set(str)\n    # storing count in result variable\n    result = 0\n    #for each index, lets check for the sum of digits and length\n    for i in range(len(str)):\n        # if sum of digits is equal to length, then add one to the count\n        if sum(dig) == len(str):\n            result+=1\n        #add the current digit to the set\n        dig.add(str[i])\n\n    return result"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(list_num):\n    min_num = list_num[0]\n    for i in range(len(list_num)):\n        if list_num[i] < min_num:\n            min_num = list_num[i]\n    return min_num\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    return min(nums)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(num_list):\n    if len(num_list) == 0:\n        return \"List is empty\"\n\n    min_num = num_list[0]\n    for num in num_list[1:]:\n        if num < min_num:\n            min_num = num\n\n    return min_num\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(arr):\n    if len(arr) == 0:\n        return -1\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\nimport math\n\n\ndef smallest_num(arr):\n    smallest = arr[0]\n    for i in range(len(arr)):\n        if smallest >= arr[i]:\n            smallest = arr[i]\n    return smallest\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    if nums == []:\n        return 0\n    return min(nums)\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(arr):\n    min = arr[0]\n    for num in arr:\n        if num < min:\n            min = num\n\n    return min\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    min_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n    return min_num\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuples):\n    pairs = []\n    for i in range(0, len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            pairs.append(tuple(sorted([tuples[i][0], tuples[j][0]])))\n    return max([abs(pair[0] - pair[1]) for pair in pairs])\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# TODO: Make your function take in a tuple list and return the max difference between\n# the available pairs.\ndef max_difference(list_of_pairs):\n    max_diff = 0\n    for pair in list_of_pairs:\n        for i in range(len(pair)):\n            diff = abs(pair[i] - pair[i+1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_difference(items: List[int]) -> int:\n    \"\"\"\n\n    :param items: tuple of ints\n    :return:\n    \"\"\"\n    return max(max(item) - min(item) for item in items)\n\n\ndef max_difference_alternative(items: List[int]) -> int:\n    \"\"\"\n\n    :param items: tuple of ints\n    :return:\n    \"\"\"\n    return max(max(item) - min(item) for item in items if len(item) > 1)\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(t):\n    max_diff = 0\n    for pair in t:\n        if pair[0] > pair[1]:\n            max_diff = max(pair[0], pair[1]) - min(pair[0], pair[1])\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# Solution 1\ndef max_difference(lst):\n    if len(lst) == 0:\n        return 0\n    return max(lst) - min(lst)\n\n# Solution 2\ndef max_difference(lst):\n    if len(lst) == 0:\n        return 0\n    return max(lst) - min(lst)\n\n# Solution 3\ndef max_difference(lst):\n    if len(lst) == 0:\n        return 0\n    return max(lst) - min(lst)", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(elements):\n    # TODO: Write your solution here\n    max_diff = 0\n    for i in range(0, len(elements)):\n        for j in range(i + 1, len(elements)):\n            max_diff = max(max_diff, elements[i][1] - elements[j][1])\n    return max_diff", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tlist):\n    maxi = -1\n    for i in tlist:\n        for j in tlist:\n            if i[0] != j[0]:\n                maxi = max(maxi, j[0] - i[0])\n    return maxi\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom typing import List\n\ndef max_difference(pairs: List[tuple]) -> int:\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    >>> max_difference([(1, 2), (2, 3), (3, 4), (4, 5)])\n    0\n    \"\"\"\n    pairs.sort(key=lambda pair: pair[1])\n    return pairs[0][1] - pairs[0][0]\n\n\ndef test_max_difference():\n    import doctest\n    doctest.testmod()", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(pairs):\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            diff = pairs[j][0]-pairs[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_difference(tuples: List[tuple]) -> int:\n    tuples.sort(key=lambda x: x[0])\n\n    for i in range(len(tuples) - 1):\n        if tuples[i + 1][0] - tuples[i][0] > tuples[i + 1][1] - tuples[i][1]:\n            return tuples[i + 1][1] - tuples[i][1]\n\n    return tuples[0][1] - tuples[0][0]\n\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subjects):\n    \"\"\"Sort a list of tuples using lambda.\"\"\"\n    subjects.sort(key=lambda subject: subject[1])\n    return subjects\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(x):\n    return sorted(x, key=lambda y: y[1], reverse=True)\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(l):\n    l.sort(key=lambda x: (x[1], x[0]))\n    return l\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\n# EASY\n\ndef subject_marks(marks_list):\n    return sorted(marks_list, key=lambda k: k[1])\n\n# HARD\n\ndef subject_marks(marks_list):\n    return sorted(marks_list, key=lambda marks_tuple: marks_tuple[1], reverse=True)\n\n# INFINITY\n\ndef subject_marks(marks_list):\n    return sorted(marks_list, key=lambda marks_tuple: marks_tuple[1], reverse=True)", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    marks.sort(key=lambda x: x[1])\n    return marks\n\n#test cases", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda student: student[1])\n\n# Driver Code", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\nsubject_marks = lambda marks: sorted(marks, key=lambda x: x[1], reverse=True)", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\n# Write your code below this line\n\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda tup: tup[1])\n\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda tup: tup[1], reverse=True)", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\nsubject_marks = lambda marks: sorted(marks, key = lambda x: (-x[1], x[0]))", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subjects):\n    new = sorted(subjects, key = lambda x:x[1])\n    return new\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(items):\n    if isinstance(items, list):\n        return sum(recursive_list_sum(item) for item in items)\n    else:\n        return items\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n# https://github.com/tcdevin/cs-interview-checklist/blob/master/python/data-structures-algorithms/recursive-list-sum.py\n\n\ndef recursive_list_sum(my_list):\n    \"\"\"\n    my_list will be a nested list.\n    \"\"\"\n\n    if my_list == []:\n        return 0\n    else:\n        return my_list[0] + recursive_list_sum(my_list[1:])\n\n\ndef main():\n    assert recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(l):\n    total = 0\n    if isinstance(l,list):\n        for item in l:\n            total += recursive_list_sum(item)\n    return total\n\n# recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(l):\n    return 0 if not l else l[0]+recursive_list_sum(l[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(l):\n    if type(l) is list:\n        return sum(l)+recursive_list_sum(l[1:])\n    else:\n        return l\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(input_list):\n    if isinstance(input_list, list):\n        if len(input_list)==1:\n            return input_list[0]\n        return input_list[0] + recursive_list_sum(input_list[1:])\n    return input_list\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(arg):\n    sum = 0\n    if len(arg) == 0:\n        return sum\n    else:\n        for i in arg:\n            sum = sum + i\n        return sum + recursive_list_sum(arg[1:])\n\n\ndef test_recursive_list_sum():\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(a):\n    if type(a) is list:\n        if len(a) == 0:\n            return 0\n        elif len(a) == 1:\n            return a[0]\n        else:\n            return a[0] + recursive_list_sum(a[1:])\n    else:\n        return a\n\ndef list_sum(a):\n    #a is a list\n    return sum(a)\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list_items):\n    if len(list_items) == 0:\n        return 0\n    elif len(list_items) == 1:\n        return list_items[0]\n    elif len(list_items) == 2:\n        return list_items[0] + list_items[1]\n    else:\n        return list_items[0] + recursive_list_sum(list_items[1:]) + recursive_list_sum(list_items[2:])\n\n#print(recursive_list_sum((1,2,3,4)))", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    if type(list[0]) is int:\n        return sum(list)\n    else:\n        return sum(recursive_list_sum(list[0])) + recursive_list_sum(list[1:])\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(list_):\n    pos = 0\n    for item in list_:\n        if item > 0:\n            pos += 1\n    return pos\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(l):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    assert pos_count([1,-2,3,-4]) == 2\n    \"\"\"\n    res = 0\n    for i in range(len(l)):\n        if l[i]>0:\n            res+=1\n    return res\n\n#Testing\nl = [1,-2,3,-4]", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    pos = 0\n    for n in nums:\n        if n > 0:\n            pos += 1\n    return pos\n\ndef pos_count_2(nums):\n    return len([n for n in nums if n > 0])\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    pos_count = 0\n    for i in lst:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n# Write your code here\ndef pos_count(lst):\n    count = 0\n    for n in lst:\n        if n >= 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\ndef pos_count(lst):\n    return len([x for x in lst if x > 0])\n\ndef pos_count(lst):\n    return sum(x > 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(x > 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst)\n\ndef pos_count(lst):\n    return sum(1 if x > 0 else 0 for x in lst", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(l):\n    cnt = 0\n    for i in l:\n        if i>0:\n            cnt+=1\n    return cnt\n\ndef main():\n    pos = [1,-2,3,-4]\n    print(\"The number of positive numbers in the list is {}.\".format(pos_count(pos)))\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(num_list):\n    count = 0\n    for num in num_list:\n        if num > 0:\n            count += 1\n    return count\n\n# test the function", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(arr):\n    pos = 0\n    for i in arr:\n        if i >= 0:\n            pos += 1\n    return pos\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef pos_count(arr):\n    pos = 0\n    for i in arr:\n        if i >= 0:\n            pos += 1\n    return pos\n\n# Enter the list\narr = [1,-2,3,-4]\n\n# Calling the function", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count = 0\n    for x in lst:\n        if x > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n == 1:\n        return 1\n    return sum(bell_number(i) for i in range(1, n))\n\ndef bell_number_2(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    return bell_number(n-1)+bell_number(n-2)\n    \n# Test cases", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\nfrom functools import reduce\n\ndef _bell_number(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return _bell_number(n-1) + _bell_number(n-2) + _bell_number(n-3)\n\n\ndef _binomial_coefficient(n, k):\n    return reduce((lambda x, y: x * y), range(n - k + 1, n + 1), 1)\n\n\ndef bell_number(n):\n    return _binomial_coefficient(_bell_number(n), n)\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n# Start with a set of bell numbers\nbell_numbers = [1, 1, 2, 5, 15, 52, 203, 877, 4140]\n\n# Define a function to count the number of ways to partition a set of bell numbers\ndef bell_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        total_ways = 0\n        for k in range(0, n):\n            ways = bell_number(k) * bell_number(n - k - 1)\n            total_ways = total_ways + ways\n        return total_ways\n    else:\n        return 0\n\n# Print the number of ways to partition a set of bell numbers", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    :param n: bell number\n    :return:\n    \"\"\"\n    a = 1\n    for i in range(n):\n        a = a * (i+1)\n    return a\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef partition(set_size):\n    total = 0\n    for i in range(1, set_size+1):\n        total+= bell_number(i)\n    return total\n\ndef bell_number(i):\n    if i == 1:\n        return 1\n    else:\n        previous_bell = 1\n        bell_sum = 0\n        for j in range(i):\n            previous_bell *= (j+1)\n            bell_sum += previous_bell\n        return bell_sum\n\n# print(bell_number(2))\n# print(partition(2))\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nfrom functools import reduce\n\ndef bell_number(n):\n    if n < 1:\n        return 0\n\n    if n == 1:\n        return 1\n\n    return reduce(lambda x, y: x*y, range(1, n+1))\n\ndef test():\n    assert bell_number(2)==2\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nimport numpy as np\n\ndef bell_number(n):\n    if n<2:\n        return 0\n    n1 = 1\n    for i in range(1,n):\n        n1 = n1*(i+1)\n    return n1\n\ndef get_partition(n):\n    count = 0\n    for i in range(0,n):\n        n1 = n-i\n        n2 = bell_number(i)\n        n3 = bell_number(n1)\n        count = count+n2*n3\n    return count\n\ndef main():\n    n = 3\n    print(get_partition(n))\n    n = 4\n    print(get_partition(n))\n    n = 5\n    print(get_partition(n))\nmain()", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 15\n    if n == 5:\n        return 52\n    if n == 6:\n        return 203\n    if n == 7:\n        return 877\n    if n == 8:\n        return 4140\n    if n == 9:\n        return 21147\n    if n == 10:\n        return 115975\n    if n == 11:\n        return 678570\n    if n == 12:\n        return 4084175\n    if n == 13:\n        return 26525285\n    if n == 14:\n        return 169369925\n    if n == 15:\n        return 1064864850\n    if n == 16:\n        return 6645290250\n    if n == 17:\n        return 43538760005\n    if n == 18:\n        return 296444400065\n    if n == 19:\n        return 2026488800025\n    if n == 20:\n        return 13888352800155\n    if n == 21:\n        return 99443656000775\n    if n == 22:\n        return 693649120004080\n    if n == 23:\n        return 4950272000023950\n    if n == 24:\n        return 35682032000123875\n    if n == 25:\n        return 265", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\nfrom itertools import product\n\ndef bell_number(n):\n    \"\"\"\n    # given a bell number\n    # count the number of ways to partition it into bell numbers\n    # i.e. the number of ways to write it as a product of smaller bell numbers\n    # i.e. the number of partitions of a bell number\n    \"\"\"\n    partitions = []\n    for k in range(n+1):\n        partitions.extend([t for t in product(*[range(1,k+1) for j in range(k)])])\n    return len(partitions)\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if arr[0] >= arr[1]:\n        return False\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(A):\n    #your code here\n    i = 0\n    while i < len(A) - 1:\n        if A[i + 1] < A[i]:\n            return False\n        i += 1\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n# n is the length of the array\ndef is_Monotonic(arr):\n    if not arr or len(arr)==1:\n        return True\n    \n    if len(arr)==2:\n        return arr[0]>=arr[1]\n    \n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i]<prev:\n            return False\n        prev = arr[i]\n    return True", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n\n    for i in range(1,len(arr)):\n        if arr[i-1] > arr[i]:\n            return False\n    return True\n\ndef test_is_Monotonic():\n    assert is_Monotonic([6, 5, 4, 4]) == True", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if arr.shape[0] == 1:\n        return True\n    #print(\"arr: \", arr)\n    if (arr[0] != arr[1]):\n        return False\n    if arr[0] != arr[2]:\n        return False\n    for i in range(1, arr.shape[0] - 1):\n        if (arr[i] >= arr[i - 1]) and (arr[i] >= arr[i + 1]):\n            continue\n        else:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    return all(arr[:-1] <= arr[1:])\n\n# Check whether the given array is monotonic or not", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if len(arr) == 0:\n        return False\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(array):\n    flag = True\n    if len(array) == 0:\n        return True\n    if array[0] == array[1]:\n        return True\n    if array[-1] == array[0]:\n        return True\n    if array[0] > array[1]:\n        for i in range(1, len(array) - 1):\n            if array[i] > array[i-1]:\n                flag = True\n            elif array[i] < array[i+1]:\n                flag = True\n            else:\n                flag = False\n        if flag:\n            return flag\n        else:\n            return False\n    else:\n        for i in range(1, len(array) - 1):\n            if array[i] > array[i+1]:\n                flag = True\n            elif array[i] < array[i-1]:\n                flag = True\n            else:\n                flag = False\n        if flag:\n            return flag\n        else:\n            return False\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    n = len(arr)\n    if n <= 2:\n        return True\n\n    if arr[0] >= arr[1]:\n        if arr[n-1] <= arr[n-2]:\n            return True\n        else:\n            return False\n\n    if arr[0] <= arr[1]:\n        if arr[n-1] >= arr[n-2]:\n            return True\n        else:\n            return False\n\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\nfrom typing import List\n\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr or arr.count(arr[0]) != len(arr):\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            continue\n        if arr[i] < arr[i - 1]:\n            continue\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n\n\ndef main():\n    assert is_Monotonic([6, 5, 4, 4]) == True\n    assert is_Monotonic([1, 3, 2]) == True\n    assert is_Monotonic([1, 2, 2]) == False\n    assert is_Monotonic([1, 3, 2, 1]) == False\n\n\nmain()"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(main_list,sub_list):\n    for i in range(len(main_list)-len(sub_list)+1):\n        if main_list[i:i+len(sub_list)]==sub_list:\n            return True\n    return False\n\n\nl1=[2,4,3,5,7]\nl2=[3,7]\nl3=[3,7,8,9,5]\nl4=[3,3,3,5]\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1,l2):\n    if(len(l2)==0):\n        return False\n    if(len(l1)==0):\n        return True\n    if(l1[0]==l2[0]):\n        if(is_sublist(l1[1:],l2[1:])):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(main_list, sub_list):\n    for i in main_list:\n        if i in sub_list:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main_list,sub_list):\n    \"\"\"\n    >>> main_list = [2,4,3,5,7]\n    >>> sub_list = [3,7]\n    >>> main_list.insert(2,10)\n    >>> is_sublist(main_list,sub_list)\n    False\n    \"\"\"\n    if len(sub_list)>len(main_list):\n        return False\n    flag=True\n    for i in range(len(sub_list)):\n        if sub_list[i]!=main_list[i]:\n            flag=False\n            break\n    return flag\n\ndef is_sublist_2(main_list,sub_list):\n    \"\"\"\n    >>> main_list = [2,4,3,5,7]\n    >>> sub_list = [3,7]\n    >>> main_list.insert(2,10)\n    >>> is_sublist(main_list,sub_list)\n    False\n    \"\"\"\n    if len(sub_list)>len(main_list):\n        return False\n    else:\n        flag=True\n        for i in range(len(sub_list)):\n            if sub_list[i]!=main_list[i]:\n                flag=False\n                break\n    return flag\ndef is_sublist_3(main_list,sub_list):\n    \"\"\"\n    >>> main_list = [2,4,3,5,7]\n    >>> sub_list = [3,7]\n    >>> main_list.insert(2,10)\n    >>> is_sublist(main_list,sub_list)\n    False\n    \"\"\"\n    for i in range(len(sub_list)):\n        if sub_list[i]!=main_list[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(l,sub):\n    \"\"\"\n    l=[2,4,3,5,7]\n    sub=[3,7]\n    \"\"\"\n    for i in range(len(l)-len(sub)+1):\n        if sub==l[i:i+len(sub)]:\n            return True\n    return False\n\n# print(is_sublist([2,4,3,5,7],[3,7]))\n# print(is_sublist([2,4,3,5,7],[3,8]))\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(lst,sub):\n    if len(sub)==len(lst):\n        return sub in lst\n    return False\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(lst,sublst):\n    \"\"\"\n    :param lst: list\n    :param sublst: list\n    :return: bool\n    \"\"\"\n    for i in sublst:\n        if i not in lst:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main_list,sublist):\n    if(main_list == sublist):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list1,list2):\n\tif len(list1) < len(list2):\n\t\treturn False\n\tlist1 = set(list1)\n\tlist2 = set(list2)\n\tif list1 == list2:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef test():\n\tprint(is_sublist([2,4,3,5,7],[3,7]))\n\ntest()"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n# Solution\ndef get_equal(tuple_list, length):\n    if len(tuple_list) == 0:\n        return 'Empty list'\n    if len(tuple_list) > 0:\n        for tup in tuple_list:\n            if len(tup) != length:\n                return 'Not all tuples have same length'\n        return 'All tuples have same length'\n\n# Test cases\nlist1 = [(11, 22, 33), (44, 55, 66)]", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(*args):\n    #if len(args) == 0:\n    #    return 'No list provided'\n    #elif len(args) == 1:\n    #    if not isinstance(args[0], list):\n    #        return 'Wrong input format. List required'\n    #    else:\n    #        return 'All lists have same length'\n    if len(args) != 2:\n        return 'Wrong number of arguments. Expected 2'\n    if not isinstance(args[0], list):\n        return 'Wrong input format. List required'\n    if not isinstance(args[1], int):\n        return 'Wrong input format. Integer required for length'\n\n    if len(args[0]) != args[1]:\n        return 'All lists have different length'\n    else:\n        return 'All lists have same length'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    # Check if the length of the tuple is equal to length.\n    if len(tuples[0]) == length:\n        return 'All tuples have same length'\n    else:\n        return 'Some tuples have different length'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, l):\n    for t in tuples:\n        if len(t) != l:\n            return 'All tuples have same length'\n    return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\nimport sys\n\nfrom .utils import print_function_details, run_test_case\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(*arg):\n    if len(arg)==1:\n        return \"Not enough args\"\n    else:\n        l = [len(x) for x in arg]\n        for i in l:\n            if i!=l[0]:\n                return \"Not all tuples have same length\"\n        return \"All tuples have same length\"\n\n\nget_equal([(11, 22, 33), (44, 55, 66)], 3)\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(list_of_tuple, length):\n    if len(list_of_tuple) == 0:\n        return 'Empty list'\n\n    if len(list_of_tuple) == 1:\n        return 'Single item'\n    \n    first_item = list_of_tuple[0]\n    for item in list_of_tuple:\n        if len(item) != len(first_item):\n            return 'Not equal'\n\n    return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(*tuple_list, length=None):\n    if length:\n        try:\n            if all([len(x) == length for x in tuple_list]):\n                return 'All tuples have same length'\n            else:\n                return 'Not all tuples have same length'\n        except:\n            return 'Not all tuples have same length'\n    else:\n        try:\n            if all([len(x) == len(tuple_list[0]) for x in tuple_list]):\n                return 'All tuples have same length'\n            else:\n                return 'Not all tuples have same length'\n        except:\n            return 'Not all tuples have same length'\n\n# Tests\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuple_list, number):\n    if len(tuple_list) == 0:\n        return 'Tuple list is empty'\n    if len(tuple_list) > number:\n        return 'Too many tuples'\n    if len(set(len(tuple) for tuple in tuple_list)) > 1:\n        return 'Different length of tuples'\n    return 'All tuples have same length'", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    if all(len(i) == length for i in tuples):\n        return \"All tuples have same length\"\n    else:\n        return \"Not all tuples have same length\"\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nimport random\n\ndef comb_sort(data):\n    length = len(data)\n    if length == 0:\n        return data\n    if length == 1:\n        return [data[0]]\n    i = 1\n    while i < length:\n        while i < length:\n            if data[i] <= data[i - 1]:\n                i += 1\n            else:\n                break\n        if i == length:\n            break\n        i_temp = i\n        while i < length:\n            if data[i] <= data[i_temp - 1]:\n                i += 1\n            else:\n                data[i_temp], data[i] = data[i], data[i_temp]\n                i_temp += 1\n    return data\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(list_to_sort):\n    length_of_list = len(list_to_sort)\n    if length_of_list <= 1:\n        return list_to_sort\n\n    gap = length_of_list // 2\n\n    while gap > 0:\n        for i in range(gap, length_of_list):\n            j = i - gap\n            while j >= 0 and list_to_sort[i] < list_to_sort[j]:\n                list_to_sort[j+gap], list_to_sort[j] = list_to_sort[j], list_to_sort[j+gap]\n                j -= gap\n        gap = gap // 2\n    return list_to_sort\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(elements):\n    for i in range(len(elements)):\n        for j in range(i + 1, len(elements)):\n            if elements[i] > elements[j]:\n                elements[i], elements[j] = elements[j], elements[i]\n    return elements\n\n\n# +", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lista):\n    length = len(lista)\n    # Particiona la lista en dos partes de igual longitud\n    part1 = lista[:length//2]\n    part2 = lista[length//2:]\n    # Aplica recursividad en la primera parte y ordena\n    comb_sort(part1)\n    # Aplica recursividad en la segunda parte y ordena\n    comb_sort(part2)\n    # Concatena las dos partes y las ordena\n    for i in range(length//2):\n        # Compara los elementos de ambas partes y los coloca en el orden correcto\n        if lista[i] > lista[length//2 + i]:\n            temp = lista[length//2 + i]\n            lista[length//2 + i] = lista[i]\n            lista[i] = temp\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    \"\"\"\n    Perform comb sort on the provided list.\n    \"\"\"\n    if len(lst) <= 1:\n        return lst\n    \n    sorted_lst = sorted(lst)\n    sorted_lst[1::2] = sorted(sorted_lst[1::2], reverse=True)\n    return sorted_lst\n\n\n# Tests", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nfrom math import floor, log\n\ndef comb_sort(alist):\n    length = len(alist)\n\n    gap = length\n    while gap > 0:\n        gap = floor(gap / 1.3)\n\n    while gap > 0:\n        for i in range(gap, length):\n            for j in range(0, length - gap):\n                if alist[j] > alist[j + gap]:\n                    temp = alist[j]\n                    alist[j] = alist[j + gap]\n                    alist[j + gap] = temp\n\n        gap = floor(gap / 1.3)\n\n    return alist\n\ndef test_comb_sort():\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\ntest_comb_sort()", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(items):\n    \"\"\"Return items in sorted order.\"\"\"\n    # Copy items so we don't modify the original.\n    items = items[:]\n\n    # Remove duplicates from list, if any.\n    items = list(set(items))\n\n    # Sort list, if any duplicates present.\n    items.sort()\n    return items", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(list):\n\tn = len(list)\n\ti = 1\n\twhile i < n:\n\t\tif list[i-1] > list[i]:\n\t\t\tleft, right = list[i-1], list[i]\n\t\t\twhile left > list[i]:\n\t\t\t\tlist[i] = list[i] - left\n\t\t\t\ti = i + 1\n\t\t\tlist[i] = left\n\t\ti = i + 1\n\treturn list\n\ndef main():\n\tprint comb_sort([5, 15, 37, 25, 79])\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(list_):\n    \"\"\"\n    Sorts a list using comb sort.\n    :param list_: A list to sort.\n    :return: The sorted list.\n    \"\"\"\n    list_len = len(list_)\n\n    for i in range(0, list_len, 1):\n        if i + 1 < list_len:\n            if list_[i] > list_[i + 1]:\n                list_[i], list_[i + 1] = list_[i + 1], list_[i]\n    return list_\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n# Your class should be named Solution\n# Your function should be named main\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nfrom math import floor, log\nimport pytest\n\ndef comb_sort(array):\n    \"\"\"Sorts the array using comb sort\"\"\"\n    length = len(array)\n    gap = floor(length / 2)\n    while gap > 0:\n        for i in range(gap, length):\n            curr = array[i]\n            j = i - gap\n            while j >= 0 and array[j] >= curr:\n                array[j + gap] = array[j]\n                j -= gap\n            array[j + gap] = curr\n        gap = floor(gap / 2)\n    return array\n\n\ndef test_comb_sort():\n    \"\"\"Tests the comb sort function\"\"\"\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(a):\n    return a % 2 == 0 or (a % 4 == 0 and a % 8 == 0)\n\n# Check the given number is representable as difference of two squares or not", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    ans = True\n    for i in range(1,num+1):\n        if num%i == 0:\n            if num-(2*i)**2 not in range(1,num+1):\n                ans = False\n                break\n    return ans\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    return num % 4 == 0 or num % 8 == 0 or num % 9 == 0\n\ndef main():\n    print(\"True\" if dif_Square(5) else \"False\")\n    print(\"True\" if dif_Square(13) else \"False\")\n    print(\"True\" if dif_Square(16) else \"False\")\n    print(\"True\" if dif_Square(20) else \"False\")\n    print(\"True\" if dif_Square(24) else \"False\")\n    print(\"True\" if dif_Square(25) else \"False\")\n    print(\"True\" if dif_Square(26) else \"False\")\n    print(\"True\" if dif_Square(27) else \"False\")\n    print(\"True\" if dif_Square(28) else \"False\")\n\nmain()", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\nimport math\n\ndef dif_Square(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                return True\n            else:\n                sum += i\n                sum += n // i\n                if sum == n:\n                    return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    for i in range(1,num+1):\n        square_sum=i*i\n        if square_sum == num:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    for i in range(1,num+1):\n        if num == i**2 - i:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    sqr_num = 0\n    for i in range(1,num+1):\n        sqr_num += i\n        sqr_num *= i\n        if sqr_num == num:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    for i in range(1, num + 1):\n        if num == (i * i) - (num % i):\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n\n    if num == 0:\n        return False\n\n    i = 1\n    while i <= (num / 2):\n        if num - (i ** 2) == 0:\n            return True\n        else:\n            i += 1\n\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    for i in range(1000000):\n        if num == (i**2 - (2*i)):\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(input_str: str, delimiters: list = None) -> list:\n    if delimiters == None:\n        delimiters = [' ']\n    matches = re.findall(re.compile(\"|\".join(delimiters)), input_str)\n    return matches\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters=None):\n    '''\n    Splits string by delimiters. If no delimiters are provided, uses spaces.\n    '''\n    if delimiters is None:\n        delimiters = [re.escape(delimiter) for delimiter in string.split()]\n    else:\n        delimiters = [re.escape(delimiter) for delimiter in delimiters]\n\n    pattern = '|'.join(delimiters)\n\n    # Make sure to only split on the first instance of the delimeter\n    return [re.split(pattern, string)[0] for string in string.split(delimiters)]\n\n# Enter the string\nstring = \"Forces of the \\ndarkness*are coming into the play.\"\n\n# Calling the function", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s, delim = \" \"):\n    \"\"\"\n    Splits the string with multiple delimiters by using regex.\n    :param s: String to split.\n    :param delim: Delimiters to split string.\n    :return: String split with given delimiters.\n    \"\"\"\n    # initialize empty list\n    splitted = []\n    # split string with given delimiters\n    s = s.split(delim)\n    # append all splitted string to list\n    for i in s:\n        splitted.append(i)\n    # return the list\n    return splitted", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n# * => 0 or more times, or in other words, 1 or more times\n# + => 1 or more times, or in other words, 1 or more times\n# . => 1 or more characters, or in other words, any single character\n# ? => 0 or 1 times, or in other words, 0 or 1 times\n# [A-Z] => A or B or C or ... or Z\n# [A-Z][a-z] => A or B or C or ... or Z and a or b or c or ... or z\n# (A-Z)(a-z) => Aa or Ab or Ac or ... or Az or Ba or Bb or ... or Bz\n# \\b => A word boundary\n# ^ => Beginning of the string\n# $ => End of the string\n\ndef multiple_split(string, delimiters=None):\n    if delimiters is None:\n        delimiters = r'\\s+'\n    return re.split(delimiters, string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, separator = '*'):\n  return re.split(separator, string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(text):\n    return [item for item in text.split(\"*\")]\n# Calling the function", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(string, delimiter=','):\n    \"\"\"\n    :param string: given string\n    :param delimiter: multiple delimiters\n    :return: list of substrings by using regex\n    \"\"\"\n    return [part for part in re.split(r'\\s*' + delimiter + '\\s*', string) if part != '']", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n# function to split the given string by using regex\ndef multiple_split(string, delimiters):\n    return re.split(r'\\*+', string)\n\n# code to call the function \nstring = \"Forces of the \\ndarkness*are coming into the play.\"\nresult = multiple_split(string, delimiters = \"*\")", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(line):\n    if line.find(\" \") >= 0:\n        return re.split(r'\\s', line)\n    else:\n        return re.split(r'\\*', line)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\ndef multiple_split(string, delimiters = re.compile(r'\\s+')):\n\t\"\"\"\n\tSplits the given string with multiple delimiters by using regex.\n\n\tArgs:\n\t\tstring (str): The string to be split\n\t\tdelimiters (re.compile object): The regex object that is used to split the string\n\n\tReturns:\n\t\t(list): The list of the splitted string\n\t\"\"\"\n\treturn delimiters.split(string)"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, sentence):\n    i = 0\n    while i < len(sentence):\n        j = 0\n        while j < len(patterns):\n            if patterns[j] == sentence[i]:\n                patterns.pop(j)\n            else:\n                return False\n            j += 1\n        i += 1\n    return True\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, given_array):\n    for i in range(len(patterns)):\n        if patterns[i] not in given_array[i]:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, values):\n    if len(patterns) != len(values):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != values[i]:\n            return False\n    return True\n\n# print(is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]))\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, arr):\n    \n    if len(patterns)==len(arr):\n        return all([pattern in arr for pattern in patterns])\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, str):\n    if len(patterns) != len(str):\n        return False\n    \n    last_pattern = patterns[0]\n    for pattern in patterns:\n        if pattern != last_pattern:\n            return False\n    return True\n\n\nis_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(pattern, string):\n    return all(pattern[i] == string[i] for i in range(len(pattern)))\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, pattern):\n    \"\"\"\n    this function takes two arguments patterns which is an array of strings and a string pattern.\n    this function returns a boolean value indicating whether pattern has the same pattern of the array patterns.\n    \"\"\"\n    # write your code here\n    for i in range(len(pattern)):\n        if pattern[i] != patterns[0][i]:\n            return False\n    return True\n\ndef is_samepatterns_alternative(patterns, pattern):\n    \"\"\"\n    this function takes two arguments patterns which is an array of strings and a string pattern.\n    this function returns a boolean value indicating whether pattern has the same pattern of the array patterns.\n    \"\"\"\n    # write your code here\n    for i in range(len(pattern)):\n        if pattern[i] != patterns[0][i] and pattern[i] != patterns[1][i]:\n            return False\n    return True\n\ndef is_samepatterns_alternative(patterns, pattern):\n    \"\"\"\n    this function takes two arguments patterns which is an array of strings and a string pattern.\n    this function returns a boolean value indicating whether pattern has the same pattern of the array patterns.\n    \"\"\"\n    # write your code here\n    for i in range(len(pattern)):\n        if pattern[i] != patterns[0][i] and pattern[i] != patterns[1][i]:\n            return False\n    return True\n\ndef is_samepatterns_alternative(patterns, pattern):\n    \"\"\"\n    this function takes two arguments patterns which is an array of strings and a string pattern.\n    this function returns a boolean value indicating whether pattern has the same pattern of the array patterns.\n    \"\"\"\n    # write your code here\n    for i in range(len(pattern)):\n        if pattern[i] != patterns[0][i] and pattern[i] != patterns[1][i]:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, original):\n    # write your code here\n    for i in range(len(patterns)):\n        if(patterns[i] != original[i]):\n            return False\n    return True\n\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, word):\n    if len(word) != len(patterns):\n        return False\n    \n    prev_pattern = patterns[0]\n    for c in word:\n        if c != prev_pattern:\n            return False\n        prev_pattern = patterns[1]\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, words):\n  i=0\n  m=len(patterns)\n  while(i<len(patterns)):\n    for j in range(m):\n      if(patterns[i]!=words[j]):\n        return False\n    i=i+1\n  return True\n\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(lst, k):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n    '(6, 24, 12)'\n    \"\"\"\n    return (tuple(x) for x in lst if all(x % k == 0 for x in x))\n\n#assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n#assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 7) == '[(7, 9, 6)]'\n#assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12) == '[(12, 18, 21)]'\n#assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 18) == ''\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(data, k):\n    lst = []\n    for i in data:\n        for j in i:\n            if j % k == 0:\n                lst.append(i)\n    return lst\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(data, k):\n\n    tuples = []\n\n    for element in data:\n        if element[0] % k == 0 and element[1] % k == 0 and element[2] % k == 0:\n            tuples.append(element)\n\n    return tuples\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    \"\"\"\n    :param tuples: A list of tuples\n    :param k: An integer\n    :return: A string of all the tuples in the list, which have all the elements divisible by k.\n    \"\"\"\n    tuples_list = []\n    for tup in tuples:\n        tup_list = [tup[0]]\n        for i in tup[1:]:\n            if i % k == 0:\n                tup_list.append(i)\n        tuples_list.append(tup_list)\n    return str(tuples_list)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\nfrom typing import List\n\n\ndef find_tuples(tuples: List[int], k: int) -> str:\n    output = ''\n    for t in tuples:\n        if all([i % k == 0 for i in t]):\n            output += f'({t})'\n    return output\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(lst, k):\n    \"\"\"\n    :param lst: list of tuples\n    :param k: divisibility\n    :return: list of tuples\n    \"\"\"\n    tuples = []\n    for i in lst:\n        if all(x % k == 0 for x in i):\n            tuples.append(i)\n    return tuples\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(list_of_tuples, k):\n    result = []\n    for i in list_of_tuples:\n        count = 0\n        for j in i:\n            if j % k == 0:\n                count += 1\n        if count == len(i):\n            result.append(i)\n    return result\n\n\ndef main():\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12))\n\nmain()", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(input_list, k):\n    result = []\n    for i in input_list:\n        if (sum(i) % k == 0):\n            result.append(i)\n    return result\n\n#This code is contributed by <NAME>\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst, k):\n    res = []\n    for i in range(len(lst)):\n        if all(x % k == 0 for x in lst[i]):\n            res.append(lst[i])\n    return res\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(list_of_tuples, k):\n    list_of_tuples_filtered = [tuple for tuple in list_of_tuples if all(n % k == 0 for n in tuple)]\n    return repr(list_of_tuples_filtered)\n\ndef test():\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(12, 18, 21), (15, 20, 12), (6, 18, 15), (18, 9, 6)], 3) == '[(12, 18, 21), (18, 9, 6)]'\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(m, n):\n    \"\"\"Return number of squares in a rectangle\"\"\"\n    return (m*n)\n\ndef count_Squares2(m, n):\n    \"\"\"Return number of squares in a rectangle\"\"\"\n    squares = 0\n    for i in range(m):\n        for j in range(n):\n            squares += 1\n    return squares\n\ndef count_Squares3(m, n):\n    \"\"\"Return number of squares in a rectangle\"\"\"\n    squares = 0\n    for i in range(m):\n        for j in range(n):\n            squares += i*j\n    return squares", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(length, width):\n    \"\"\"\n    length and width are the length and width of the rectangle\n    \"\"\"\n    # your code goes here\n    total_squares = 0\n\n    for row in range(width):\n        for col in range(length):\n            if row == 0 or row == length - 1 or col == 0 or col == length - 1:\n                total_squares += 1\n            else:\n                total_squares += 0\n    return total_squares", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n,m):\n    return n * m\n\n\n# # 6. Write a python function to multiply two matrices.\n# assert multiply_matrices(A,B) == [[1,1],[3,3]]\n\n# def multiply_matrices(m1,m2):\n#     result = []\n#     for i in range(len(m1)):\n#         r = []\n#         for j in range(len(m2[0])):\n#             r.append(sum(x*y for x,y in zip(m1[i],m2[i])))\n#         result.append(r)\n#     return result\n\n\n# # 7. Write a python function to find the sum of all elements in a list\n# assert sum_all([3,2,5]) == 10\n\n# def sum_all(my_list):\n#     sum = 0\n#     for i in my_list:\n#         sum += i\n#     return sum\n\n# # 8. Write a python function to find the product of all elements in a list\n# assert product_all([3,2,5]) == 30\n\n# def product_all(my_list):\n#     product = 1\n#     for i in my_list:\n#         product *= i\n#     return product\n\n\n# # 9. Write a python function to find the median of a list\n# assert median([3,2,5,4,1,6]) == 4.5\n\n# def median(my_list):\n#     my_list.sort()\n#     mid = len(my_list) // 2\n#     if len(my_list)%2 == 0:\n#         return (my_list[mid] + my_list[mid-1])/2\n#     else:\n#         return my_list[mid]\n\n\n# # 10. Write a python function to find the mode of a list\n# assert mode([3,2,5,4,1,6]) == 2\n\n# def mode(my_list", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\nimport random\n\n# functions\n\ndef count_Squares(length, width):\n    \"\"\"\n    Return the number of squares in a rectangle of given length and width.\n    \"\"\"\n    return int(width*width/4)\n\n\n# tests\n\ndef test_count_Squares():\n    \"\"\"\n    Run the tests for 'count_Squares'.\n    \"\"\"\n    assert count_Squares(3,2) == 12\n    assert count_Squares(2,5) == 25\n    assert count_Squares(5,3) == 165\n    assert count_Squares(4,3) == 20", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(w,h):\n    return w * h\n\ndef test():\n    assert count_Squares(4,3) == 20\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(m,n):\n    if m==0 or n==0:\n        return 0\n    return count_Squares(m-1, n) + count_Squares(m-1, n-1)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n# Write your function here\ndef count_squares(a,b):\n    if a > b:\n        return 0\n    else:\n        return (a+1)**2-a**2\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    count = 0\n    for i in range(1,width+1):\n        for j in range(1,height+1):\n            if i*i + j*j <= width*width and i*i + j*j > 0:\n                count += 1\n\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(rows,cols):\n    count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if i%2 != 0 and j%2 != 0:\n                count += 1\n    return count\n\nrows,cols = map(int,input().split())"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n\tx = n\n\twhile x > 0:\n\t\tif x % 10 == 0:\n\t\t\tx = x // 10\n\t\telse:\n\t\t\tif x % 10 % 2 != 0:\n\t\t\t\tx = x // 10\n\t\t\telse:\n\t\t\t\tbreak\n\tif x == 0:\n\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(number):\n    if number % 2 == 0:\n        return number // 2\n    return (number - (number % 2)) // 2\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    n = str(n)\n    odds = sum(int(digit) for digit in n if int(digit)%2!=0)\n    evens = sum(int(digit) for digit in n if int(digit)%2==0)\n\n    return evens - odds\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(number):\n    # code here\n    even = [2,4,6,8]\n    odd = [1,3,5,7,9]\n    sum1 = 0\n    sum2 = 0\n    for i in range(10):\n        if i%2 == 0:\n            sum1 += number//i\n            sum2 += number%i\n    if sum1 == sum2:\n        return False\n    return True\n\n# Note: An edge case is that for a number like 100, the sum of the odd digits is 0\n# as the last number is an odd number.\n# In such cases we need to check for the last digit.\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# Solution\ndef is_Diff(num):\n    sum_even = 0\n    sum_odd = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            sum_even += num % 10\n            num //= 10\n        else:\n            sum_odd += num % 10\n            num //= 10\n\n    return sum_odd - sum_even\n\ndef test():\n    assert is_Diff(12345) == False\n    assert is_Diff(22345) == False\n    assert is_Diff(2234) == True\n    assert is_Diff(22341) == False\n    assert is_Diff(223412) == True\n    assert is_Diff(2234123) == True\n    assert is_Diff(22341234) == False\n    assert is_Diff(223412345) == False\n\ntest()", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(number):\n    isDiff = False\n    if((number - (int(str(number)[0]) + int(str(number)[2]))) % 2 == 0):\n        isDiff = True\n    return isDiff\n\ndef test_is_Diff():\n    assert is_Diff(12345) == False\n\ndef test_is_Diff_2():\n    assert is_Diff(234) == False\n\ndef test_is_Diff_3():\n    assert is_Diff(1254) == False", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n\n    if num % 2 == 0:\n        num = num/2\n        sum_ = 0\n        while num > 0:\n            if num % 2 == 0:\n                sum_ = sum_ + num\n            num = num/10\n        if sum_ % 2 == 0:\n            return False\n        else:\n            return True\n    else:\n        num = num/2\n        sum_ = 0\n        while num > 0:\n            if num % 2 != 0:\n                sum_ = sum_ + num\n            num = num/10\n        if sum_ % 2 != 0:\n            return False\n        else:\n            return True\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n\n    sum_odd = 0\n    sum_even = 0\n\n    while n>0:\n        if n%10 % 2 == 0:\n            sum_even = sum_even + n%10\n            n = n//10\n        else:\n            sum_odd = sum_odd + n%10\n            n = n//10\n\n    return sum_odd - sum_even\n\nn = 12345", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (number):\n    sum_even = 0\n    sum_odd = 0\n    for i in str(number):\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    if sum_even == sum_odd:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    evenSum = 0\n    oddSum = 0\n    while n > 0:\n        if n % 10 == 0:\n            evenSum += n\n        else:\n            oddSum += n\n        n = n // 10\n    return evenSum - oddSum\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# you need to write your function in O(log n) time complexity \n# which means the function should return the correct answer in O(log n)\n\ndef count_With_Odd_SetBits(n):\n    # write your code here\n    if n == 0:\n        return 0\n    count = 0\n    while n>0:\n        count += n & 1\n        n >>= 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# Logic to check if a number is odd or not\ndef is_Odd(num):\n    if num%2 == 0:\n        return False\n    else:\n        return True\n\n# Logic to find total no. of odd no. of set bits\ndef count_With_Odd_SetBits(num):\n    count = 0\n    for i in range(num+1):\n        if is_Odd(i) and (i & (i - 1)) == 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n):\n        count += sum(x & i for x in range(1 << i)) & 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# Solution - DFS\ndef count_With_Odd_SetBits(n):\n    # Write your code here.\n    def helper(num):\n        if num == 0:\n            return 0\n        if num % 2 == 0:\n            return 0\n        return 1 + helper(num // 2)\n    return helper(n)\n\n# Solution - Memoized - DP\ndef count_With_Odd_SetBits(n):\n    # Write your code here.\n    dp = [0 for _ in range(n+1)]\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(2, n + 1):\n        if i & 1 == 0:\n            dp[i] = dp[i >> 1]\n        else:\n            dp[i] = dp[i >> 1] + dp[i >> 2]\n    return dp[n]\n\n\n# Solution - Bitwise\ndef count_With_Odd_SetBits(n):\n    # Write your code here.\n    return bin(n).count('1')", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# A(n) = 2 * C(n-1)\n\n\ndef count_With_Odd_SetBits(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return 2 * count_With_Odd_SetBits(n-1)", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    odd_count = 0\n    for i in range(n):\n        if(i & (i-1)):\n            odd_count += 1\n    return odd_count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# Your code here\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(0, n):\n        if (i & (i - 1)) == 0:\n            count += 1\n    return count\n\n\ndef test_count_With_Odd_SetBits():\n    assert count_With_Odd_SetBits(5) == 3\n\n# Test cases\n# Output: 3\n# Output: 0\n# Output: 2\n# Output: 1\n# Output: 1\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(0, n):\n        count += i & (i - 1) == 0\n    return count\n\n\ndef test_count_With_Odd_SetBits():\n    assert count_With_Odd_SetBits(5) == 3\n    assert count_With_Odd_SetBits(0) == 0\n    assert count_With_Odd_SetBits(2) == 2\n    assert count_With_Odd_SetBits(1) == 1\n    assert count_With_Odd_SetBits(1) == 1", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# +\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n            \n    return count\n\ncount_With_Odd_SetBits(5)\n\n\n# +\n# Using defaultdict\ndef count_With_Odd_SetBits(n):\n    return sum(1 for i in range(1, n+1) if bin(i).count('1') % 2 != 0)\n\ncount_With_Odd_SetBits(5)\n# -\n\n# # Problem 2\n# Write a python function to find the total number of substrings of a string s that can be made from the string by deleting one character.", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\nfrom math import log\n\ndef count_With_Odd_SetBits(n):\n    \"\"\"\n    Time complexity of this is O(log n)\n    Space complexity of this is O(1)\n\n    Input:\n        n(int): An integer.\n\n    Output:\n        ans(int): An integer. The number of integers with odd number of set bits.\n\n    Example:\n        count_With_Odd_SetBits(5) == 3\n        count_With_Odd_SetBits(1) == 0\n        count_With_Odd_SetBits(0) == 0\n    \"\"\"\n    if n == 0:\n        return 0\n    i = log(n, 2)\n    ans = 0\n    for j in range(i + 1):\n        if (n & (1 << j)) > 0:\n            ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(N):\n\t\"\"\" \n\t:type N: int\n\t:rtype: int\n\t\"\"\"\n\tresult = 0\n\tif N == 0:\n\t\treturn 0\n\ti = 1\n\twhile i <= N:\n\t\tif i & 1:\n\t\t\tresult += 1\n\t\ti = i << 1\n\treturn result"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not\n    \"\"\"\n    if len(word) % 2 == 1:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 != 0:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word)%2 != 0\n\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# In[17]:\n\n\ndef word_len(word):\n    if len(word) % 2 != 0:\n        return True\n    else:\n        return False\n\n\n# In[18]:\n\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if(len(word)%2==0):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(string):\n    \"\"\"\n    :param string: the string to be tested\n    :return: True if the length of the string is odd, False if even\n    \"\"\"\n    return len(string) % 2 != 0\n\n#Below is an example usage:\n\nimport re\n\ndef word_len(string):\n    \"\"\"\n    :param string: the string to be tested\n    :return: True if the length of the string is odd, False if even\n    \"\"\"\n    return len(string) % 2 != 0\n\n# Enter the string\nstring = \"Hadoop\"\n\n# Calling the function", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    odd = False\n    if len(word) % 2 == 1:\n        odd = True\n    return odd\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 1\n\n\n# 2. Write a python function to find the length of the longest word in the given sentence.\n# You can assume that the sentence only contains lowercase letters.\n# \n# \n# \n#\n# \n# \n# \n# assert longest_word(\"google google google google google\") == 7\n\ndef longest_word(sentence):\n    words = sentence.split(\" \")\n    words_len = [len(word) for word in words]\n    return max(words_len)\n\n\n# 3. Write a python function to find the total number of subwords in the given sentence.\n# A subword is defined as a contiguous sequence of letters in the given sentence.\n# \n# \n# \n#\n# \n# \n# \n# \n# assert total_subwords(\"google google google google google\") == 12\n\ndef total_subwords(sentence):\n    subwords = []\n    for word in sentence.split(\" \"):\n        for i in range(len(word) + 1):\n            subwords.append(word[0:i])\n    return len(subwords)\n\n\n# 4. Write a python function to find the first letter in the given sentence which is not in the alphabet.\n# \n# \n# \n#\n# \n# \n# \n# \n# assert first_non_alpha(\"google google google google google\") == 'H'\n\ndef first_non_alpha(sentence):\n    for letter in sentence:\n        if letter not in 'abcdefghijklmnopqrstuvwxyz':\n            return letter\n    return None", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(w):\n    return len(w)%2 != 0\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\n# http://oeis.org/A000244\ndef tetrahedral_number(n):\n    if n==1: return 0\n    if n==2: return 1\n    return sum(tetrahedral_number(i) for i in range(2,n+1))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return sum([i * (3*i - 1) // 2 for i in range(1, n+1)])\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n <= 1:\n        return 0\n    else:\n        return 4*tetrahedral_number(n-1) - 3*tetrahedral_number(n-2)\n\ndef tetrahedral_number2(n):\n    if n < 2:\n        return 0\n    else:\n        return 4*tetrahedral_number2(n-1) - 3*tetrahedral_number2(n-2)\n\ndef tetrahedral_number3(n):\n    if n <= 1:\n        return 0\n    else:\n        return 4*tetrahedral_number3(n-1) - 3*tetrahedral_number3(n-2)\n\ndef tetrahedral_number4(n):\n    if n <= 1:\n        return 0\n    else:\n        return 4*tetrahedral_number4(n-1) - 3*tetrahedral_number4(n-2)\n\n\ndef test_tetrahedral_number():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    # TODO: Your code here\n    return 0\n\ndef test_tetrahedral_number(func, n, expected):\n    \"\"\"\n    A helper function to test the tetrahedral_number function\n    \"\"\"\n    assert expected == func(n)\n\n\n# Run your tests\n\ntest_tetrahedral_number(tetrahedral_number, 0, 0)\ntest_tetrahedral_number(tetrahedral_number, 1, 1)\ntest_tetrahedral_number(tetrahedral_number, 2, 4)\ntest_tetrahedral_number(tetrahedral_number, 3, 10)\ntest_tetrahedral_number(tetrahedral_number, 4, 20)\ntest_tetrahedral_number(tetrahedral_number, 5, 35)\ntest_tetrahedral_number(tetrahedral_number, 6, 56)\ntest_tetrahedral_number(tetrahedral_number, 7, 84)\ntest_tetrahedral_number(tetrahedral_number, 8, 120)", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    result = 0\n    for i in range(1, n):\n        result += ((i+1) * (i+2) * i) / 2\n    return result\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\n# 1+2+...+N = N(N+1)/2\n# so the nth tetrahedral number is N(N+1)/2\n\n# N = 1,2,3,...,1000\n# N(N+1)/2 = 1(1+1)/2 + 2(2+1)/2 + ... + 1000(1000+1)/2\n# N(N+1)/2 = 1 + 2 + ... + 1000 + N(1000+1)/2\n# N(N+1)/2 = 1 + 2 + ... + 1000 + 1000*1001/2\n# N(N+1)/2 = 1 + 2 + ... + 1000 + 1000*1001/2 - 1000*1000/2\n# N(N+1)/2 = 1 + 2 + ... + 1000 + (1000*1001 - 1000*1000)/2\n# N(N+1)/2 = 1 + 2 + ... + 1000 + (1000*1001 - 1000*1000) / 2 + 1000\n# N(N+1)/2 = 1 + 2 + ... + 1000 + 1000001/2\n# N(N+1)/2 = 1 + 2 + ... + 1000 + 1000001/2 - 1000000\n# N(N+1)/2 = 1 + 2 + ... + 1000 + 1000001/2 - 1000000 + 1000\n# N(N+1)/2 = 1 + 2 + ... + 1000 + 1000001/", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom math import factorial\n\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    >>> tetrahedral_number(0)\n    0\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    2\n    >>> tetrahedral_number(3)\n    6\n    >>> tetrahedral_number(4)\n    24\n    >>> tetrahedral_number(5)\n    35.0\n    \"\"\"\n    return factorial(n) / (factorial(3 * n) * factorial(n))\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    \"\"\"\n    Generate the nth tetrahedral number.\n    \"\"\"\n    # Start with the 0th tetrahedral number, which is 1.\n    #\n    # Then, each step, we multiply by 4 and add 1.\n    #\n    # So the nth tetrahedral number is 1 * 4^(n-1) + 1 = 4^(n-1) * (4^n - 1) / 3.\n    return (4**(n-1) * (4**n - 1) ) // 3\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfrom math import pi, cos, sin\n\ndef tetrahedral_number(n):\n    assert isinstance(n, int)\n    if n==1:\n        return 1\n    elif n==2:\n        return 5\n    elif n==3:\n        return 10\n    elif n==4:\n        return 10\n    else:\n        return tetrahedral_number(n-1)+tetrahedral_number(n-2)", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfunction tetrahedral_number(n::Int)\n    return n*n + n*3 + 3*n + 4\nend\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    return [(a,b) for a,b in zip(t1,t2) if not a == b]\n\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuples):\n    return zip(*tuples)\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    return [tuple(x) for x in zip(tuple1, tuple2)]\n\ndef zip_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i], tuple2[i]))\n    return result\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    zip_list = []\n    if len(t1) > len(t2):\n        for i in range(len(t1)):\n            zip_list.append(t1[i])\n            zip_list.append(t2[i])\n    elif len(t1) < len(t2):\n        for i in range(len(t2)):\n            zip_list.append(t1[i])\n            zip_list.append(t2[i])\n    else:\n        for i in range(len(t1)):\n            zip_list.append(t1[i])\n            zip_list.append(t2[i])\n    return zip_list\n\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    result = []\n    if len(tuple1) != len(tuple2):\n        return result\n    for i in range(len(tuple1)):\n        result.append((tuple1[i], tuple2[i]))\n    return result", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    return [(x, y) for x, y in zip(tuple1, tuple2)]\n\n#Test Case\ntest_case1 = [7, 8, 4, 5, 9, 10]\ntest_case2 = [1, 5, 6]\ntest_result1 = zip_tuples(test_case1, test_case2)", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1,tuple2):\n    zip1 = [tuple(tup1) for tup1 in zip(tuple1,tuple2)]\n    zip1.reverse()\n    return zip1\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    return zip(tuple1, tuple2)\n\n# Enter the first tuple\ntuple1 = (7, 8, 4, 5, 9, 10)\n\n# Enter the second tuple\ntuple2 = (1, 5, 6)\n\n# Calling the function", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    list_of_tuples = []\n    if len(tuple1) == len(tuple2):\n        for i in range(len(tuple1)):\n            list_of_tuples.append((tuple1[i], tuple2[i]))\n    else:\n        raise ValueError('Both tuples must have same length!')\n    return list_of_tuples\n\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(*args):\n    \"\"\"\n    >>> zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) )\n    [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    \"\"\"\n    return list(zip(*args))\n\n#Example output\n# [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\n#Warning: this code generation is experimental. Please inspect the code for any bugs before executing."], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    # TODO\n    return 4*math.pi*r**3/3\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4.0/3.0*np.pi*radius**3\n\n#Call the function", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nfrom math import pi\n\ndef volume_sphere(radius):\n    return (4/3)*pi*(radius**3)\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    volume = (4 / 3) * (3.14159265359) * (radius**3)\n    return volume\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4.0*math.pi*radius*radius*radius\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    \"\"\" Return the volume of a sphere. \"\"\"\n    volume = 4/3 * math.pi * radius**3\n    return volume\n\ndef test_volume_sphere():\n    \"\"\" Test volume_sphere function. \"\"\"\n    assert volume_sphere(10)==4188.790204786391\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3 * math.pi * radius**3\n\n# Test code\n#print(volume_sphere(10))", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    return 4/3 * pi * r**3", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nfrom math import pi\ndef volume_sphere(radius):\n    volume = (4/3) * pi * radius**3\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return 4 * 3.14159265358979 * radius ** 3\n\n# Enter the radius\nradius = 10\n\n# Calling the function"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    total = 0\n    for i in str:\n        total = total + ord(i)\n    return chr(total)\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    sum = 0\n    for i in range(len(str)):\n        sum = sum + str[i]\n    return chr(sum)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_char(s):\n    return ''.join(s)\n\n# Enter the string\ns = \"abc\"\n\n# Calling the function", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    res = 0\n    for ch in string:\n        res = res + ord(ch)\n    return chr(res)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    result = \"\"\n    for i in str:\n        result = result + i\n    return result\n\n\n# print(get_Char(\"abc\"))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    sum = 0\n    for i in string:\n        sum+=ord(i)\n    return chr(sum)\n\ndef get_Char(string):\n    return chr(sum(ord(c) for c in string))", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    return chr(sum(ord(x) for x in s))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(strng):\n    return \"\".join(strng)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    return(s[0] + s[-1])\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str_):\n    return chr(sum([ord(i) for i in str_]))\n\ndef main():\n    print get_Char(\"abc\")\n    print get_Char(\"a\")\n    print get_Char(\"asdf\")\n    print get_Char(\"a123\")\nmain()"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    # Your code here\n    start_seq = [0, 0, 1]\n    if n == 1:\n        return start_seq[1]\n    n -= 1\n    while n >= 0:\n        n -= 1\n        if n % 2 == 0:\n            start_seq.append(start_seq[-1] + start_seq[-2])\n        else:\n            start_seq.append(start_seq[-1] + start_seq[-2] + start_seq[-3])\n    return start_seq[-1]", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\nfrom __future__ import print_function\n\nfrom functools import reduce\nfrom operator import mul\n\ndef sequence(n):\n    \"\"\"Return the n-th number in the newman conway sequence.\"\"\"\n\n    # get all primes in [2, n]\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    primes = sorted(primes, reverse=True)\n\n    # calculate n!\n    # n! = (n - 1) (n - 2) ... 2 * 1\n    factorial = reduce(mul, range(2, n+1))\n\n    # sum all primes - 1\n    sum_of_primes = sum(primes) - 1\n\n    # calculate limit\n    limit = factorial // sum_of_primes\n\n    # return n-th number in sequence\n    for i, prime in enumerate(primes):\n        if i == n:\n            return (prime - 1) * limit\n        if i * limit <= prime:\n            return prime - 1\n        limit *= prime\n\n\ndef is_prime(number):\n    \"\"\"Return True if number is prime, False otherwise.\"\"\"\n    for factor in range(2, number // 2):\n        if number % factor == 0:\n            return False\n    return True\n\n\ndef test_sequence():\n    assert sequence(1) == 2\n    assert sequence(2) == 3\n    assert sequence(3) == 5\n    assert sequence(4) == 13\n    assert sequence(5) == 17\n    assert sequence(6) == 29\n    assert sequence(7) == 37\n    assert sequence(8) == 61\n    assert sequence(9) == 73\n    assert sequence(10) == 6\n    assert sequence(100) == 552", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"\n    :param n: number of nth number\n    :return: nth number in newman conway sequence\n    \"\"\"\n    assert type(n) == int and n > 0\n\n    def find_next_number(number):\n        \"\"\"\n        :param number: number\n        :return: next number in newman conway sequence\n        \"\"\"\n        return sum(map(int, str(number)))\n\n    if n == 1:\n        return 0\n\n    return find_next_number(find_next_number(find_next_number(find_next_number(find_next_number(find_next_number(find_next_number(find_next_number(find_next_number(find_next_number(find_next_number(n)))))))))\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# Approach: Using the dynamic programming.\n# Time Complexity: O(2^n)\n# Space Complexity: O(2^n)\ndef sequence(n):\n    if n == 0:\n        return 0\n    a = [0 for i in range(n)]\n    a[0] = 1\n    a[1] = 1\n    for i in range(2,n+1):\n        for j in range(n-i+1):\n            a[j+i] = a[j] + a[j+1]\n    return a[n-1]\n\n\n# Approach: Using Recursion\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef sequence2(n):\n    if n <= 1:\n        return n\n    return sequence(n-1) + sequence(n-2)\n\n# Approach: Using Memoization\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef sequence3(n):\n    dp = [0 for i in range(n)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2,n+1):\n        for j in range(n-i+1):\n            dp[j+i] = dp[j] + dp[j+1]\n    return dp[n-1]", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    # You should not change this function\n    # You can use math.pow(a, b) as a shortcut for a ** b\n    n = n+1\n    return n - 1\n\n\n# write your code here\ndef test_function():\n    assert sequence(10) == 6\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n\tseq = []\n\tseq.append(1)\n\tseq.append(1)\n\tfor i in range(1, n):\n\t\tseq.append(seq[-2]+seq[-1])\n\treturn seq[n-1]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    return int(sum(bin(n)[2:].zfill(1000)[:1000]))\n\ndef main():\n    for i in range(1, 100):\n        print i, sequence(i)\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    return 0 if n == 0 else (sequence(n//2) + 1) if n%2 else sequence(n//2)\n\n\ndef test_sequence():\n    assert sequence(10) == 6"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4*math.pi*radius**2\n\ndef surfacearea_cube(side):\n    return 6*side**2\n\ndef surfacearea_rectangle(length, width):\n    return 2*(length+width)*width\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*3.14159*radius*radius\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    >>> surfacearea_sphere(10)==1256.6370614359173\n    \"\"\"\n    return 4*pi*r**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    \"\"\" \n    Calculates the surface area of a sphere\n    \"\"\"\n    import math\n    return 4*math.pi*radius**2\n\ndef test():\n    \"\"\"\n    Test the function\n    \"\"\"\n    from nose.tools import assert_equal\n    assert_equal(surfacearea_sphere(10), 1256.6370614359173)\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nfunction surfacearea_sphere(radius)\n    pi = 3.14\n    area = 4*pi*radius^2\n    return area\nend\n\n# Write a function to find the volume of a sphere.", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4*3.14*radius*radius\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4*pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4/3*3.14159265*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*3.1415926*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(r):\n    area = 4.0*3.14159*(r**2)\n    return area\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nimport math\n\n\ndef centered_hexagonal_number(n: int) -> int:\n    if n < 1:\n        return 0\n\n    x = (n * (n + 1) * (2 * n + 1) // 6) + (n // 2)\n    return math.floor(x / 2)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return 2**(3*n+1)-3*n-1\n\n\n# ---\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"Returns the nth centered hexagonal number.\"\"\"\n    # Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 6\n    if n == 2:\n        return 271\n    return (6*(2**(n-1))-3*(2**n)-1)/5\n\n#Test cases", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    pass\n\n\ndef test_centered_hexagonal_number():\n    assert centered_hexagonal_number(10) == 271\n\ndef main():\n    test_centered_hexagonal_number()\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# Solution\n\ndef centered_hexagonal_number(n):\n\n    h = 0\n    for i in range(n):\n        h += i\n        h += (i ** 2)\n        h -= i\n\n    return h\n\n\ndef main():\n    tests = [\n        (10, 271),\n    ]\n\n    for test in tests:\n        assert centered_hexagonal_number(test[0]) == test[1]\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    hexagonal_number = n * (2 * n - 1)\n    half_hexagonal = hexagonal_number // 2\n    if hexagonal_number % 2 == 1:\n        return half_hexagonal + (n % 2)\n    else:\n        return half_hexagonal\n\ndef test_centered_hexagonal_number():\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 271 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 331 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 211 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 161 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 131 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 111 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 101 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 100 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 91 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 81 - 10 * i\n    for i in range(1, 11):\n        assert centered_hexagonal_number(i) == 80 - 10 * i", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return (2 * n - 1) * (n + 1) * 3 // 2\n\n\ndef main():\n    print centered_hexagonal_number(10)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import ceil, sqrt\nfrom functools import lru_cache\n\n\ndef centered_hexagonal_number(n):\n    @lru_cache(maxsize=10000)\n    def centered_hexagonal(k):\n        \"\"\"nth centered hexagonal number\"\"\"\n        return int((1 + sqrt(8 * k + 1)) / 2)\n\n    return centered_hexagonal(centered_hexagonal_number(n - 1))\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# Solution\n\n\ndef centered_hexagonal_number(n):\n    return sum(range(n * 16 // 5))\n\n\n# Tests\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    if n == 0:\n        return 0\n    a = 0\n    for i in range(1, n+1):\n        a += (i**2)/2\n    return a\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    d = d1.copy()\n    d.update(d2)\n    d.update(d3)\n    return d\n\ndef test_merge_dictionaries_three():\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(d1, d2, d3):\n    c = {}\n    c.update(d1)\n    c.update(d2)\n    c.update(d3)\n    return c\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(*args):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n\n    >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    \"\"\"\n    d = {}\n    for arg in args:\n        d.update(arg)\n    return d\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    #merge three dictionaries into a single expression\n    list3 = list(dict3.values())\n    list2 = list(dict2.values())\n    list1 = list(dict1.values())\n    return dict(list1 + list2 + list3)\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict_1, dict_2, dict_3):\n    res = dict_1.copy()\n    res.update(dict_2)\n    res.update(dict_3)\n    return res\n\n\ndef test_merge_dictionaries_three():\n    assert merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}) == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict_1, dict_2, dict_3):\n    # your code goes here\n    d = {}\n    d.update(dict_1)\n    d.update(dict_2)\n    d.update(dict_3)\n    return d\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries(*args):\n    for i in range(len(args)-1):\n        for key in args[i].keys():\n            if key in args[i+1]:\n                args[i+1][key] += args[i][key]\n            else:\n                args[i+1][key] = args[i][key]\n    return args[-1]\n\n\n# +\n# Test function\ndef test_merge_dictionaries_three(input_one, input_two, input_three):\n    assert merge_dictionaries_three(input_one, input_two, input_three) == merge_dictionaries(*args)\n\ntest_merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n# -\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return dict(dict1, **dict2, **dict3)\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(list):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n    count = {}\n    for i in list:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(alist):\n    d = {}\n    for i in alist:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n\ndef freq_count2(alist):\n    d = {}\n    for i in alist:\n        d.setdefault(i,0)\n        d[i] += 1\n    return d\n\ndef freq_count3(alist):\n    d = {}\n    for i in alist:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\ndef freq_count4(alist):\n    return {key:alist.count(key) for key in alist}\n\ndef freq_count5(alist):\n    return dict([(x,alist.count(x)) for x in alist])\n\ndef freq_count6(alist):\n    d = {}\n    for i in alist:\n        d.setdefault(i,0)\n        d[i] += 1\n    return dict(d)\n\ndef freq_count7(alist):\n    d = {}\n    for i in alist:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n\tdict = {}\n\tfor i in lst:\n\t\tif i in dict:\n\t\t\tdict[i] +=1\n\t\telse:\n\t\t\tdict[i] = 1\n\treturn dict\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(input_list):\n    dict_output = {}\n    for i in input_list:\n        if i in dict_output.keys():\n            dict_output[i] += 1\n        else:\n            dict_output[i] = 1\n    return dict_output\n\n# test cases\ninput_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(arr):\n    d = {}\n    for item in arr:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] += 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list):\n    return dict(collections.Counter(list))\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list):\n    return dict(Counter(list))\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lis):\n    return {num:lis.count(num) for num in lis}\n\n\nfreq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n\nfreq_count([10,10,10,10,20,20,20,20,40,40,50,50,30,40])\n\nfreq_count(range(50,100))\n\nfreq_count(range(10,50))\n\n# +\n# Write a function to convert a list into a tuple.\n# assert list2tuple([1,2,3,4,5,6]) == (1,2,3,4,5,6)\n# -\n\ndef list2tuple(lst):\n    return tuple(lst)\n\n\nlist2tuple([1,2,3,4,5,6])\n\n\n# +\n# Write a function that removes duplicates from a list.\n# assert remove_duplicates([1,2,3,4,5,6,1,2,3,4,5]) == [1,2,3,4,5,6]\n# -\n\ndef remove_duplicates(lis):\n    return list(set(lis))\n\n\nremove_duplicates([1,2,3,4,5,6,1,2,3,4,5])\n\n\n# +\n# Write a function that takes in a list and returns the number of elements in the list.\n# assert length([1,2,3,4,5,6]) == 6\n# -\n\ndef length(lis):\n    return len(lis)\n\n\nlength([1,2,3,4,", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list_):\n    # Assuming there's no repetition of elements in the list\n    # and using a dictionary with key-value pairs\n    # Use .get() to return None if the key does not exist\n    return {value: list_.count(value) for value in list_}\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\nfrom collections import Counter\n\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n    return Counter(lst)\n\n\ndef main():\n    lst = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]\n    print(freq_count(lst))\n\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n  while n % 2 == 0:\n    n /= 2\n  if n == 0:\n    return -1\n  return n-1\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(num):\n    # function body goes here\n    return num - 1 if num % 2 == 0 else num + 1\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n# HackerRank solution\n\nimport math\n\ndef closest_num(n):\n    closest = math.floor(n)\n    if n == closest:\n        return closest\n\n    x = n - closest\n    if x > 0.5:\n        return closest + 1\n\n    return closest", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    # write your code here\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(n, 0, -1):\n        if i == n:\n            continue\n        if i % 2 == 0:\n            if n % i != 0:\n                return i\n        else:\n            if i * i > n:\n                return i - 1\n    return 0\n\ndef test_closest_num():\n    assert closest_num(11) == 10\n    assert closest_num(2) == 1\n    assert closest_num(10) == 9\n    assert closest_num(5) == 4\n    assert closest_num(6) == 5\n    assert closest_num(7) == 6\n    assert closest_num(8) == 7\n    assert closest_num(110) == 109\n\ntest_closest_num()", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"This function returns the closest number smaller than n\"\"\"\n    closest = n\n    for i in range(100000):\n        if i <= n:\n            closest = i\n        if i != closest:\n            closest = i\n    return closest\n\n\ndef test():\n    \"\"\"Tests for the above function\"\"\"\n    assert closest_num(11) == 10\n    assert closest_num(12) == 11\n    assert closest_num(50) == 50\n    assert closest_num(100) == 100\n    assert closest_num(500) == 500\n    assert closest_num(1000) == 1000\n    assert closest_num(1500) == 1500\n    assert closest_num(2000) == 1999\n    assert closest_num(10000) == 10000\n    assert closest_num(10001) == 10001\n    assert closest_num(100000) == 99999\n\n\ntest()", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    '''\n    >>> closest_num(11)\n    10\n    >>> closest_num(2)\n    1\n    '''\n    x = n\n    for i in range(x):\n        if n-i in range(1, n):\n            return n-i\n    return x\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    return min([x for x in range(n) if x!=n])\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    >>> closest_num(10)\n    10\n    >>> closest_num(11)\n    10\n    >>> closest_num(12)\n    12\n    \"\"\"\n    closest_num = None\n    for i in range(n-1, -1, -1):\n        if i > 0 and abs(i - n) < abs(closest_num - n):\n            closest_num = i\n    return closest_num", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    return n - 1\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    pass\n\n\ndef test_closest_num():\n    \"\"\"\n    Test\n    \"\"\"\n    assert closest_num(11) == 10\n\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(log_list):\n    max_len = 0\n    for word in log_list:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    ans = 0\n    for i in words:\n        if len(i)>ans:\n            ans = len(i)\n    return ans", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(a_list):\n    longest_word = max(a_list, key=len)\n    return len(longest_word)\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    if len(words) == 0:\n        return 0\n    return max([len(x) for x in words])\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(log):\n    max_len = 0\n    for i in log:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(log):\n    \"\"\"\n    >>> len_log([\"python\",\"PHP\",\"bigdata\"])\n    7\n    \"\"\"\n    return len(max(log,key = len))\n\n#A function to find the maximum value\n\ndef max(log):\n    \"\"\"\n    >>> max([4,6,3,10])\n    10\n    \"\"\"\n    max = log[0]\n    for i in log[1:]:\n        if i > max:\n            max = i\n    return max\n\n\ndef len_log(log):\n    \"\"\"\n    >>> len_log([\"python\",\"PHP\",\"bigdata\"])\n    7\n    \"\"\"\n    length = 0\n    for word in log:\n        if len(word) > length:\n            length = len(word)\n    return length\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(lst):\n    answer = 0\n    for word in lst:\n        if len(word) > answer:\n            answer = len(word)\n    return answer\n\ndef len_log1(lst):\n    return max([len(x) for x in lst])\n\ndef len_log2(lst):\n    return max(map(len, lst))\n\ndef len_log3(lst):\n    return max(len(x) for x in lst)\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    len_list = [len(word) for word in words]\n    return max(len_list)\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(arr, word):\n    return any(word in subword for subword in arr)\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list, sub_str):\n    for s in list:\n        if sub_str in s:\n            return True\n    return False\n\n# Test Case #1\nlist = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\nsub_str = \"ack\"\n\n# Test Case #2\nlist = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\nsub_str = \"g\"\n\n# Test Case #3\nlist = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\nsub_str = \"orange\"\n\n# Test Case #4\nlist = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\nsub_str = \"bla\"", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n# my solution\ndef find_substring(strings,substr):\n    return any(substr in s for s in strings)\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list,substring):\n    found=False\n    if substring.lower() in string_list[0].lower():\n        found=True\n    return found\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(values, substring):\n    return True if any(substring in val for val in values) else False", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(strings,substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(strings,string):\n    for i in range(len(strings)-len(string)+1):\n        if string in strings[i:i+len(string)]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(ls, substring):\n    for i in ls:\n        if substring in i:\n            return True\nls = [\"red\", \"black\", \"white\", \"green\", \"orange\"]", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_string,sub_string):\n    flag=False\n    for word in list_of_string:\n        if sub_string in word:\n            flag=True\n            break\n    return flag\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(a,b):\n    if b in a:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    if len(num) == 1:\n        return False\n\n    dp = [[False] * len(num) for _ in range(len(num))]\n    dp[0][0] = True\n\n    for i in range(len(num)):\n        if dp[i][0]:\n            dp[i][1] = True\n        if dp[i][1]:\n            dp[i][0] = True\n        for j in range(1, i):\n            if num[i] == num[j] and dp[j][0] and dp[j][1]:\n                dp[i][0] = True\n                dp[i][1] = True\n                break\n\n    return dp[len(num) - 1][0] or dp[len(num) - 1][1]", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    if len(num) <= 1:\n        return True\n    return num[:2] == num[1:-1] and is_undulating(num[2:])\n\n\n# O(n) time | O(1) space\n# where n is the length of the input string\n# TODO: Figure out why is this wrong, even though it passes all tests.\n# class Solution:\n#     def is_undulating(self, num):\n#         return num[:2] == num[1:-1] and self.is_undulating(num[2:])", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    digits = []\n    for d in str(num):\n        digits.append(int(d))\n    odd = 0\n    for i in range(1, len(digits), 2):\n        if digits[i] > digits[i-1]:\n            odd = 1\n            break\n    if odd == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    if len(num) == 1:\n        return True\n    if num[0] == num[-1]:\n        if is_undulating(num[1:-1]):\n            return True\n        return False\n    else:\n        if is_undulating(num[1:-1]):\n            return True\n        else:\n            if is_undulating(num[2:]):\n                return True\n            return False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\n#using a simple approach\n#time complexity is O(n)\n#space complexity is O(1)\ndef is_undulating(num):\n    if num==num[::-1]:\n        return False\n    if num[0]==num[1]:\n        return is_undulating(num[2:])\n    return is_undulating(num[1:]) or is_undulating(num[2:])", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    n = list(num)\n    length = len(n)\n    i = 0\n    for i in range(length-1):\n        if n[i] > n[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n# int binary_search(int arr[], int l, int r, int key)\n# {\n#     if (r >= l) {\n#         int mid = l + (r - l) / 2;\n#         if (arr[mid] == key)\n#             return mid;\n#         else if (arr[mid] > key)\n#             return binary_search(arr, l, mid - 1, key);\n#         else\n#             return binary_search(arr, mid + 1, r, key);\n#     }\n\ndef is_undulating(num):\n    if len(num) == 0:\n        return False\n\n    result = num[0]\n    for i in range(1, len(num)):\n        if num[i] == result:\n            continue\n        elif num[i] > result:\n            result = num[i]\n        else:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number: str) -> bool:\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    numbers = [int(number[i]) for i in range(len(number))]\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i - 1] + 1 or numbers[i] == numbers[i - 1] - 1:\n            continue\n        else:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    if len(num) == 1:\n        return False\n\n    if num[0] == num[1]:\n        return is_undulating(num[1:])\n\n    if num[0] > num[1]:\n        return is_undulating(num[1:])\n\n    return is_undulating(num[1:])\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(n):\n    if n == \"0\":\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if (s[i] != s[i + 1]) and (int(s[i]) < int(s[i + 1])):\n                return True\n        return False"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    return a**b\n\n\n# +\n#power?\n# -\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\nimport pytest\n\n\ndef power(a, b):\n    result = a ** b\n    return result\n\ndef test_power():\n    assert power(3,4) == 81\n\n\ndef test_power_zero():\n    assert power(0,2) == 0\n\n\ndef test_power_one():\n    assert power(3,1) == 3\n\n\ndef test_power_zero_one():\n    assert power(0,1) == 0\n\n\ndef test_power_neg_one():\n    assert power(-1,1) == -1\n\n\ndef test_power_zero_two():\n    assert power(0,2) == 0\n\n\ndef test_power_neg_one_two():\n    assert power(-1,2) == 1/81", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    \"\"\"\n    >>> power(2,2)\n    4\n    >>> power(5,2)\n    25\n    >>> power(12,3)\n    1728\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    answer = a\n    for i in range(b):\n        answer *= a\n    return answer\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    \"\"\"\n    >>> power(3,4)\n    81\n    \"\"\"\n    return a**b\n\n\n# 4. Write a function to list all the elements in a list that satisfies a given condition.", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n\treturn a ** b\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(base,exponent):\n    result = 1\n    for i in range(exponent):\n        result *= base\n    return result\n\ndef test_power():\n    assert power(3,4) == 81\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    \"\"\"\n    calculate the value of 'a' to the power 'b'\n\n    Args:\n        a (int): numerator\n        b (int): denominator\n\n    Returns:\n        int: a to the power b\n    \"\"\"\n    #write code here\n    #return the power of a and b\n    return a**b\n\n# if __name__ == '__main__':\n#     # input = (12,5)\n#     # print(power(*input))\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    return a**b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    return a**b\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(t):\n    return min(range(len(t)), key=lambda i: t[i][1])\n\n#assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(l):\n    return min(l, key = lambda x: x[1])", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\nfrom collections import OrderedDict\n\n\ndef index_minimum(tuples):\n    tuples = OrderedDict(tuples)\n    for i, j in tuples.items():\n        if i not in tuples:\n            return i\n    else:\n        return 'No'\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(l):\n    # s = sorted(l)\n    # return s[0]\n    return min(l)\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\nfrom typing import List\n\ndef index_minimum(tuplist: List[tuple]) -> str:\n    \"\"\"\n    Given a tuple of names and scores, returns the name of the person with the lowest score\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    \"\"\"\n    return min(tuplist)[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    tuple_list = sorted(tuples, key=lambda t: t[1])\n    return tuple_list[0][0]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(list_of_tuples):\n    '''\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    '''\n    min_val = list_of_tuples[0][1]\n    for i in range(len(list_of_tuples)):\n        if list_of_tuples[i][1] < min_val:\n            min_val = list_of_tuples[i][1]\n    return list_of_tuples[list_of_tuples.index((min_val, ''))][0]\n\n# -\n\nindex_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n\n\n# +\ndef index_minimum(list_of_tuples):\n    '''\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    '''\n    min_val = list_of_tuples[0][1]\n    for i in range(len(list_of_tuples)):\n        if list_of_tuples[i][1] < min_val:\n            min_val = list_of_tuples[i][1]\n    return list_of_tuples[list_of_tuples.index((min_val, ''))][0]\n\n# test cases", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\nfrom functools import cmp_to_key\nimport operator\n\ndef index_minimum(tuples):\n    result = tuples[0]\n    for i in range(1, len(tuples)):\n        if result[1] > tuples[i][1]:\n            result = tuples[i]\n    return result[0]\n\ndef cmp(x, y):\n    if x[1] == y[1]:\n        return cmp(x[0], y[0])\n    else:\n        return cmp(x[1], y[1])\n\ntuples = [('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    result = None\n    minimum = None\n    for i in range(len(tuples)):\n        if not result or (tuples[i][1] < minimum):\n            result = tuples[i]\n            minimum = tuples[i][1]\n    return result\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    tuples.sort(key = lambda x: x[1])\n    return tuples[0][0]\n\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lst):\n    return min([len(sub_list) for sub_list in lst])\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(arr):\n    sublist_len = [len(sublist) for sublist in arr]\n    return min(sublist_len)\n\n\n# +\n# Let's test the above function\narr = [[1],[1,2]]", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lst):\n    length = len(lst[0])\n    min_length = length\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef find_min_length(s):\n    min_len = sys.maxsize\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if (len(s[i]) < len(s[j])):\n                min_len = min(min_len, len(s[i]))\n    return min_len", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef find_min_length(array):\n    min = len(array)\n    for i in range(len(array)):\n        for j in range(len(array[i])):\n            if array[i][j] == 0:\n                return min\n            else:\n                return min\n        min = min - 1\n    return min\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(List):\n    # write your code here\n    min_len = 1000\n    for i in List:\n        if(len(i) < min_len):\n            min_len = len(i)\n    return min_len\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(sublists):\n    if len(sublists) == 0:\n        return 0\n    min_len = 1\n    for s in sublists:\n        if len(s) < min_len:\n            min_len = len(s)\n    return min_len\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(x):\n    list1 = [len(i) for i in x]\n    return min(list1)\n\n#Test case to test the function", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n# Solution\ndef find_min_length(a):\n    # Write your code here\n    length = len(a)\n    if length == 1:\n        return 0\n    else:\n        return 1 + min(find_min_length(a[i]) for i in range(length))\n\n\n# Test cases", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(l):\n    # Code your python solution here\n    minLen = len(l[0])\n    for i in l:\n        if len(i) < minLen:\n            minLen = len(i)\n    return minLen\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    divisor = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor += 1\n    return divisor\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 4\n    if n == 5:\n        return 6\n    if n == 6:\n        return 6\n    if n == 7:\n        return 4\n    if n == 8:\n        return 8\n    if n == 9:\n        return 6\n    if n == 10:\n        return 2\n    if n == 11:\n        return 6\n    if n == 12:\n        return 6\n    if n == 13:\n        return 4\n    if n == 14:\n        return 4\n    if n == 15:\n        return 4\n    if n == 16:\n        return 8\n    if n == 17:\n        return 6\n    if n == 18:\n        return 8\n    if n == 19:\n        return 4\n    if n == 20:\n        return 2\n    if n == 21:\n        return 6\n    if n == 22:\n        return 6\n    if n == 23:\n        return 4\n    if n == 24:\n        return 8\n    if n == 25:\n        return 6\n    if n == 26:\n        return 8\n    if n == 27:\n        return 4\n    if n == 28:\n        return 8\n    if n == 29:\n        return 6\n    if n == 30:\n        return 2\n    if n == 31:\n        return 6\n    if n == 32:\n        return 6\n    if n == 33:\n        return 4\n    if n == 34:\n        return 4\n    if n == 35:\n        return 6\n    if n == 36:\n        return 8\n    if n == 37:\n        return 6\n    if n == 38:\n        return 8\n    if n == 39:\n        return 4\n    if n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(x):\n    if x == 1:\n        return 1\n    div = 1\n    for i in range(2,x+1):\n        if x%i == 0:\n            div += 1\n    return div\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(num):\n    \"\"\"\n    To find the number of divisors of a given integer.\n\n    Args:\n        num (int): Number of which the number of divisors have to be calculated.\n\n    Returns:\n        int: Number of divisors.\n    \"\"\"\n    divisors = 0\n    for i in range(1,num+1):\n        if num%i == 0:\n            divisors += 1\n    return divisors\n\n# Test case\nnum = 15\nexpected_output = 4\noutput = divisor(num)", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# %%\n# Solution\ndef divisor(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n\n\n# %%", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(number):\n    return len(list(filter(lambda x: number % x == 0, range(1, number+1))))\n\n#call\nnumber = 15\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# +\n# Write a python function to find the number of divisors of a given integer.\n\ndef divisor(x):\n    div=0\n    for i in range(1,x+1):\n        if x%i==0:\n            div+=1\n    return div\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(num):\n    count = 0\n    for i in range(1, int(num/2) + 1):\n        if (num % i == 0):\n            count += 1\n    return count\n\ndef divisor_recursion(num):\n    if (num == 1):\n        return 1\n    else:\n        return (num * divisor_recursion(num - 1))\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    result = {}\n    for list in lists:\n        for x in list:\n            if x not in result:\n                result[x] = 1\n            else:\n                result[x] += 1\n    return result\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lst):\n    freq = {}\n    for lst in lst:\n        for i in lst:\n            try:\n                freq[i] += 1\n            except:\n                freq[i] = 1\n    return freq\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n# def frequency_lists(arr):\n#     frequency = {}\n#     for i in arr:\n#         for j in i:\n#             frequency[j] = frequency.get(j, 0) + 1\n#     return frequency\n\n\ndef frequency_lists(arr):\n    result = {}\n    for i in arr:\n        for j in i:\n            result[j] = result.get(j, 0) + 1\n    return result\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom typing import List\n\n\ndef frequency_lists(lists: List[List[int]]) -> Dict[int, int]:\n    freq = {}\n    for lst in lists:\n        for e in lst:\n            if e not in freq:\n                freq[e] = 0\n            freq[e] += 1\n    return freq\n\n\ndef frequency_lists(lists: List[List[int]]) -> Dict[int, int]:\n    return dict(map(lambda l: (l[0], len(l)), set(tuple(el) for lst in lists for el in lst)))", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    frequency = {}\n    for list in lists:\n        for item in list:\n            if item not in frequency:\n                frequency[item] = 1\n            else:\n                frequency[item] += 1\n    return frequency", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    # your code goes here\n    return set()\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(L):\n    dict1 = {}\n    for i in L:\n        for j in i:\n            dict1[j] = dict1.get(j, 0)+1\n\n    return dict1", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n# my_list = [\n#     [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\n\n# frequency_lists(my_list)\n\n# def frequency_lists(my_list):\n#     # initialize a set to store all the values of the list\n#     values = set()\n#     # iterate over all the values of list to store in values\n#     for v in my_list:\n#         values = values.union(set(v))\n\n#     # store the values of set into a dict of list\n#     count = {}\n#     for v in values:\n#         count[v] = 0\n\n#     for v in my_list:\n#         for i in v:\n#             count[i] += 1\n#     return count\n\n# print(frequency_lists(my_list))\n\n\ndef frequency_lists(my_list):\n    # initialize a dict of list\n    count = {}\n    # iterate over all the values of list\n    for v in my_list:\n        # check if key exist in dict if not then add key to dict\n        if not v in count.keys():\n            count[v] = 1\n        # else increment value for key\n        else:\n            count[v] += 1\n    return count\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    \"\"\"Return frequency count of list of lists.\n\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    dic = {}\n    for l in lists:\n        for i in l:\n            if i in dic:\n                dic[i] += 1\n            else:\n                dic[i] = 1\n\n    return dic\n\ndef main():\n    print frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\nfrom collections import Counter\n\n\ndef frequency_lists(lists):\n    res = Counter()\n    for list_ in lists:\n        res.update(list_)\n    return res\n\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(list):\n    return sum(list) / len(list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    total = 1\n    for num in nums:\n        total = total*num\n    total = total/len(nums)\n    return total", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(my_list):\n    result = 1\n    for num in my_list:\n        result *= num\n    result /= len(my_list)\n    return result", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    return float(reduce(lambda x, y: x*y, nums))/len(nums)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(n):\n    mult = 1\n    for i in n:\n        mult = mult * i\n    return mult/len(n)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\nimport math\n\n\ndef multiply_num(nums):\n    # Your code here\n    return sum(nums) / len(nums)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(number_list):\n    result = 1\n    for number in number_list:\n        result = result * number\n    return result / len(number_list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n    return sum(nums)/len(nums)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(array):\n    \"\"\"\n    Multiply all the numbers in the list and divide with the length of the list.\n    \"\"\"\n    return sum(array)/len(array)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(list_num):\n    return sum(list_num)/len(list_num)\n\n\n# Example input and output\n# [8, 2, 3, -1, 7]\n# -67.2\n# >>> multiply_num([8, 2, 3, -1, 7])\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"Convert a given decimal number to its binary equivalent\n\n    >>> decimal_to_binary(8)\n    '1000'\n\n    >>> decimal_to_binary(1)\n    '1'\n\n    >>> decimal_to_binary(10)\n    '1010'\n\n    >>> decimal_to_binary(11)\n    '1011'\n\n    >>> decimal_to_binary(100)\n    '10100'\n\n    >>> decimal_to_binary(101)\n    '10101'\n\n    >>> decimal_to_binary(1000)\n    '101000'\n\n    >>> decimal_to_binary(1001)\n    '101001'\n    \"\"\"\n    if decimal_number == 0:\n        return '0'\n    else:\n        return decimal_to_binary(decimal_number >> 1) + str(decimal_number & 1)\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\nfrom __future__ import print_function\n\ndef decimal_to_binary(dec):\n    # Convert it to string first\n    dec_str = str(dec)\n\n    # Reverse the string\n    dec_str = dec_str[::-1]\n\n    # Convert the string to a list of digits\n    dec_list = list(dec_str)\n\n    # Convert the digits to binary\n    bin_list = [bin(int(digit))[2:] for digit in dec_list]\n\n    # Join the list\n    bin_str = ''.join(bin_list)\n\n    # Return the binary string\n    return bin_str\n\n# Driver Code", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal):\n    \"\"\"\n    :param decimal: int, a positive decimal number\n    :return: str, binary representation of the input\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(number):\n    binary = ''\n    while number > 0:\n        binary = '1' + binary\n        number -= 1\n    return binary[::-1]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n# given decimal number to its binary equivalent\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    result = ''\n    while n != 0:\n        result = str(n % 2) + result\n        n //= 2\n    return result\n\n# assert decimal_to_binary(8) == '1000'", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n# TODO: fix this function so that it returns '1000' for 8\ndef decimal_to_binary(dec):\n    \"\"\"\n    Converts decimal number to binary.\n    \"\"\"\n    binary = \"\"\n    while dec > 0:\n        binary = dec % 2 + binary\n        dec /= 2\n    return binary", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal):\n\n    # First convert the decimal to a list\n    decimal_list = list(str(decimal))\n\n    # Reverse the list for left to right conversion\n    decimal_list.reverse()\n\n    # First list element is always 0\n    binary_list = ['0']\n\n    # Converting the list to binary\n    for i in range(len(decimal_list)):\n\n        # Multiply the last element of the list by two\n        binary = binary_list[-1] * 2\n\n        # Add the previous element to the next element\n        if i == 0:\n            binary += decimal_list[i]\n        else:\n            binary += binary_list[i - 1]\n\n        # Append the new element to the list\n        binary_list.append(binary)\n\n    # Reverse the list so that the first element is the most significant bit\n    binary_list.reverse()\n\n    # Convert the list back to a string\n    binary_string = ''.join(str(x) for x in binary_list)\n\n    return binary_string\n\n# Sample tests", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    return bin(n)\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(dec):\n    bin_dec = str(bin(dec))\n    return bin_dec[2:]\n\n\n# + deletable=true editable=true\ndef decimal_to_binary(dec):\n    bin_dec = str(bin(dec))\n    return bin_dec[2:]\n\n\n# + deletable=true editable=true\n# Test case 1"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\nfrom utils.math import is_palindrome\n\n\ndef next_smallest_palindrome(num):\n    i, n = int(num), int(str(num) + str(num))\n    while True:\n        if is_palindrome(n) and n < i:\n            return n\n        i += 1\n        n = int(str(i) + str(i))\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\nfrom utils import is_palindrome\n\ndef next_smallest_palindrome(n):\n    while True:\n        n = n*10\n        n = n + (n//10)\n        if is_palindrome(str(n)):\n            break\n    return n+1\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    if num < 10:\n        return num\n\n    digits = list(str(num))\n    mid = len(digits) // 2\n    i = mid - 1\n    while digits[i] == '0':\n        i -= 1\n    digits[i], digits[mid] = digits[mid], digits[i]\n\n    while i >= 0:\n        if digits[i] != '9':\n            digits[i] = chr(ord(digits[i]) + 1)\n            break\n        digits[i] = '0'\n        i -= 1\n\n    while i >= 0:\n        if digits[i] != '9':\n            digits[i] = chr(ord(digits[i]) + 1)\n            break\n        digits[i] = '0'\n        i -= 1\n\n    while i >= 0:\n        if digits[i] == '0':\n            digits[i] = '9'\n            break\n        i -= 1\n\n    res = int(''.join(digits[::-1]))\n    return res\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(number):\n    str_num=str(number)\n    r_num=str(number)[::-1]\n    for i in range(len(str_num)):\n        if str_num[i]!=r_num[i]:\n            return (int(str_num+r_num[i:]))+1\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(x):\n    \"\"\"\n    >>> next_smallest_palindrome(99)==101\n    >>> next_smallest_palindrome(123)==129\n    \"\"\"\n    # write your code here\n    # return (x + x // 10 + 1) % 1000000007\n    # assert x < 1000000007\n    # assert x > 0\n    if x < 1000000007:\n        x = str(x)\n        return int(str(int(x) + int(x[-1]) + int(x[-1]) % 10 + 1) % 1000000007)\n    else:\n        raise ValueError(\"x too big\")\n\n# if __name__ == '__main__':\n#     import doctest\n#     doctest.testmod()", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"Find the next smallest palindrome of n.\n    n can be a list or a string\n    \"\"\"\n    n = str(n)\n    d = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n    }\n\n    if n[0] == '0':\n        return int('1' + n[1:])\n\n    last = d[n[-1]]\n    # print(n, last)\n    for i in range(len(n)-1, 0, -1):\n        x = (last * 10 + d[n[i-1]]) % 10\n        last = (last * 10 + d[n[i-1]]) // 10\n        # print(n[i-1], n[i], x)\n        if x == 0:\n            if i == 1:\n                return int(n[:i] + '1' + n[i:])\n            else:\n                return int(n[:i] + '0' + n[i:])\n\n    return last", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n# Solution\ndef next_smallest_palindrome(n):\n    while str(n) != str(str(n)[::-1]):\n        n += 1\n    return n + 1\n\n# Tests", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    if n < 10:\n        return n * 10 + 1\n    s = str(n)\n    m = s[::-1]\n    for i in range(len(m)):\n        if m[i] < s[i]:\n            m[i], s[i] = s[i], m[i]\n            return int(m) + 1\n    return int(s) + 1\n\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(101) == 102\n    assert next_smallest_palindrome(99) == 101\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n#The next smallest palindrome of a specified number\ndef next_smallest_palindrome(number):\n    a = str(number)\n    a = a[::-1]\n    if (a == a[::-1]):\n        return int(str(number) + \"0\")\n    else:\n        return int(str(number) + str(number + 1) + \"0\")\n\n#Tests", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(number):\n    if number == 0:\n        return None\n    last_digit = number % 10\n    if last_digit == 0:\n        return number * 10\n    number = int(number // 10) * 10\n    while number < 1000 and (int(str(number)[::-1]) % 10) != last_digit:\n        number += 10\n    return number\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, p):\n    \"\"\"\n    Find the kth element in the given array.\n    arr - input array\n    k - kth element\n    p - position in the array to start looking for the element\n    \"\"\"\n    start = p\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if mid == k:\n            return arr[mid]\n        elif arr[mid] > arr[k]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(array, k, n):\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right)//2\n        if k <= array[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nimport pytest\n\ndef kth_element(arr, k, i):\n    j = 0\n    while(i > k):\n        j += arr[i-1]\n        i -= 1\n    return arr[j]\n\n# Test Cases\n@pytest.mark.parametrize(\n    (\"arr\", \"k\", \"i\", \"result\"),\n    [\n        ([12, 3, 5, 7, 19], 5, 2, 3),\n        ([12, 3, 5, 7, 19], 5, 3, 5),\n        ([12, 3, 5, 7, 19], 3, 4, 19),\n        ([12, 3, 5, 7, 19], 1, 2, 12),\n        ([12, 3, 5, 7, 19], 4, 2, 7),\n        ([12, 3, 5, 7, 19], 3, 3, 3)\n    ]\n)\ndef test_kth_element(arr, k, i, result):\n    \"\"\"\n    Test case for finding the kth element in the given array\n    \"\"\"\n    assert kth_element(arr, k, i) == result", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, i):\n    \"\"\"\n    :param arr: list\n    :param k: int\n    :param i: int\n    :return: int\n    \"\"\"\n    temp = arr[0]\n    counter = 1\n    for i in range(1,len(arr)):\n        if arr[i] > temp:\n            counter += 1\n        else:\n            arr[i - 1], arr[i] = arr[i], arr[i-1]\n    return arr[k-counter]\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, n):\n\n    # Sorting the array\n    arr.sort()\n    \n    # Finding the Kth element\n    return arr[k-1]\n\n# Driver code...!!!!\narr = [12, 3, 5, 7, 19]\nk = 2\nn = len(arr)", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nimport random\n\ndef kth_element(array, k, n):\n    \"\"\"Returns the kth element of array, with respect to size\"\"\"\n    return array[n*k]\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n\tif k == 1:\n\t\treturn arr[0]\n\n\tif k == 2:\n\t\treturn arr[1]\n\n\tif k == n:\n\t\treturn arr[n-1]\n\n\tif k == n-1:\n\t\treturn arr[n-2]\n\n\treturn kth_element(arr[1:], k-1, n-2)\n\n\ndef main():\n\tk = 3\n\tn = 5\n\tprint kth_element([12,3,5,7,19], k, n)\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, size):\n    i = 0\n    j = size - 1\n    while (i < j):\n        mid = (i + j) // 2\n        if (k <= mid):\n            j = mid\n        else:\n            i = mid + 1\n    return arr[j]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    # print(\"arr is :\", arr)\n    # print(\"k is :\", k)\n    # print(\"n is :\", n)\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[n-1]\n    else:\n        return kth_element(arr, k // 2, n)\n\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n\n    :param s: A string.\n    :return: A string.\n    \"\"\"\n    return ''.join(x.title() for x in s.split('_'))\n\n\n# Program\n# test_case = 'python_program'\n# print(snake_to_camel(test_case))\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    return ''.join([x.capitalize() if i!=0 else x for i,x in enumerate(string.split('_'))])\n\n# assert snake_to_camel('python_program')=='PythonProgram'\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    # write your code here\n    return ''.join(x.title() for x in s.split('_'))\n\n# Test code\ns = \"python_program\"", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(name):\n    words = name.split('_')\n    for i in range(len(words)):\n        words[i] = words[i].title()\n    return ''.join(words)\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(snake_str):\n    snake_str = snake_str.replace(\"_\", \" \")\n    return ''.join([s.title() for s in snake_str.split()])\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(snake_str):\n    res = ''\n    for s in snake_str.split('_'):\n        res += s[0].upper()\n        if len(s)>1:\n            res += s[1:]\n    return res\n\ndef test_snake_to_camel():\n    assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('python_program')=='pythonProgram'\n    assert snake_to_camel('python_program')=='pythonProgram'\n    assert snake_to_camel('python_program')=='pythonProgram'\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    if s == '':\n        return ''\n    head = s[:1]\n    tail = s[1:]\n    return head + snake_to_camel(tail)\n\n# Testing\ndef test_snake_to_camel():\n    assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('python_program2')=='PythonProgram2'\n    assert snake_to_camel('python_program1')=='PythonProgram1'\n    assert snake_to_camel('python_program23')=='PythonProgram23'\n\n# Submission", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(text):\n    if not text:\n        return ''\n    elif len(text) == 1:\n        return text.lower()\n    else:\n        head = text[:1].lower()\n        tail = snake_to_camel(text[1:])\n        return head + tail\n\ndef test_snake_to_camel():\n    assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('pythonProgram')=='PythonProgram'\n    assert snake_to_camel('python')=='Python'\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(name):\n    return ''.join(s[0].upper() + s[1:] for s in name.split('_'))\n\nsnake_to_camel('python_program')\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(text):\n\t#Your code here\n\ttokens = text.split('_')\n\ttmp = [tokens[0].lower()]\n\ttmp.extend(tokens[1:])\n\ttmp = ''.join(tmp)\n\treturn tmp.capitalize()\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfunction eulerian_num(n, m)\n    # Write your code here\n    ans = 0\n    for i in 0:(n - 1)\n        for j in 0:(m - 1)\n            if (i != 0 || j != 0)\n                ans += 1\n            end\n        end\n    end\n    return ans\nend\n\n#assert eulerian_num(3, 1) == 4\n\n# =============================\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    return (n+1) * m - sum(i//2 for i in range(1, n+1))\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (m + 1) // 2 - n % 2\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    return 0\n\n# This code is to run the function defined above.\n# eulerian_num(5, 2)\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    return (n-1) * (m-1) + (n-1) * m\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfunction eulerian_num(n, m)\n    ans = 0\n    for i in 0:n-1\n        for j in 0:m-1\n            if i == j\n                continue\n            end\n            ans += 1\n        end\n    end\n    ans\nend\n\n# eulerian_num(3, 1)\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    d = 1\n    for i in range(1, n+1):\n        d *= i\n    res = 1\n    for i in range(1, m+1):\n        res *= d\n        d /= i\n    return res\n\n\ndef test_eulerian_num():\n    n = 3\n    m = 1\n    assert eulerian_num(n, m) == 4\n\n    n = 1\n    m = 1\n    assert eulerian_num(n, m) == 1\n\n    n = 2\n    m = 1\n    assert eulerian_num(n, m) == 2\n\n    n = 2\n    m = 2\n    assert eulerian_num(n, m) == 12\n\n    n = 2\n    m = 3\n    assert eulerian_num(n, m) == 24", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n < 0 or m < 0 or n > m:\n        return 0\n    elif n == 0 or m == 0:\n        return 1\n    elif n == m:\n        return n+1\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)\n\n\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(5, 2) == 20\n    assert eulerian_num(5, 5) == 1981250\n    assert eulerian_num(6, 7) == 362480000\n    print 'All tests pass!'", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nimport sys\n\ndef eulerian_num(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if n == 2:\n        return 2*(m**2)\n    return 2 * eulerian_num(n - 1, m) + eulerian_num(n - 2, m)\n\ndef is_palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    return False\n\ndef main(args):\n    \"\"\"Main function\"\"\"\n    if len(args) != 2:\n        print('Please enter 2 arguments')\n        sys.exit(1)\n\n    print(f\"Eulerian number a(n, m) = {eulerian_num(int(args[0]), int(args[1]))}\")\n    print(f\"Eulerian number is palindrome: {is_palindrome(eulerian_num(int(args[0]), int(args[1])))}\")\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    total = 0\n    for i in range(1, m + 1):\n        total += (i - 1) * (m - i + 1) // 2 * (i - 1) * n + (i - 1) * m // 2\n    return total\n\n# Test Case"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(mylist):\n    return list(map(lambda x: sorted(x),mylist))\n\n#Test", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(mylist):\n    sorted_list=[]\n    for sublist in mylist:\n        sorted_sublist=sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(l):\n    return sorted(l,key=lambda x: sorted(x,key=lambda y: y.lower()))", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(inlist):\n    return sorted([l for l in inlist], key=lambda i: i[1])", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(list):\n    result = []\n    for sublist in list:\n        result.append(sorted(sublist))\n    return result\n\ndef main():\n    print(sort_sublists(\n        ([\n            [\"green\", \"orange\"],\n            [\"black\", \"white\"],\n            [\"white\", \"black\", \"orange\"]\n        ])))\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: [val for sublist in x for val in sublist])\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(l):\n    return sorted(l, key=lambda sublist: sublist[0])\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    \"\"\"\n    This function takes in a list of lists as input and returns a list of lists with the sublists sorted\n    \"\"\"\n    return sorted(lst, key=lambda x: x[0])\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return sorted(lst, key = lambda l: l[0])\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(items):\n    return sorted(items, key=lambda x: x[0])\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(nums):\n\treturn len(nums) - nums.count(False)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n#method 1\ndef count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count = count + 1\n    return count\n\n#method 2\ndef count(lst):\n    return sum(1 for i in lst if i)\n\n#method 3\ndef count(lst):\n    return len([x for x in lst if x])\n\n#method 4\ndef count(lst):\n    return sum(map(bool,lst))\n\n#method 5\ndef count(lst):\n    return sum(1 for x in lst if x)\n\n#method 6\ndef count(lst):\n    return sum(x for x in lst if x)\n\n#method 7\ndef count(lst):\n    return len(list(filter(bool, lst)))\n\n#method 8\ndef count(lst):\n    return sum([bool(x) for x in lst])\n\n#method 9\ndef count(lst):\n    return sum(bool(x) for x in lst)\n\n#method 10\ndef count(lst):\n    return len([x for x in lst if bool(x)])\n\n#method 11\ndef count(lst):\n    return sum([i for i in lst if i])\n\n#method 12\ndef count(lst):\n    return sum([1 if i else 0 for i in lst])\n\n#method 13\ndef count(lst):\n    return sum([x==1 for x in lst])\n\n#method 14\ndef count(lst):\n    return sum([1 if x else 0 for x in lst])\n\n#method 15\ndef count(lst):\n    return sum([x if x else 0 for x in lst])\n\n#method 16\ndef count(lst):\n    return sum([x for x in lst if x != 0])\n\n#method 17\ndef count(lst):\n    return sum([i for i in lst if i != 0])\n\n#method 18\ndef count(lst):\n    return sum([x for x in lst if x != 0 or i != 0])\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(arr):\n    count = 0\n    for item in arr:\n        if item == True:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(input_list):\n    count = 0\n    for item in input_list:\n        if item == True:\n            count += 1\n    return count\n\n# This function would count the number of \n# True elements in the list.\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(array):\n    return len(array)\n\ndef count(array):\n    true = 0\n    for item in array:\n        if item:\n            true += 1\n    return true\n\ndef count(array):\n    return sum(array)\n\ndef count(array):\n    return sum(1 for x in array if x)\n\n# This is a function", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count_true(x):\n    return len([item for item in x if item])\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(list_):\n    \"\"\"\n    :param list_: List of booleans\n    :return: Number of true booleans in the list\n    \"\"\"\n    return list(filter(lambda x: x, list_)).__len__()\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(my_list):\n    \"\"\"\n    count() counts the number of True booleans in my_list.\n    Input: my_list, a list of booleans\n    Output: number of True booleans in my_list\n    \"\"\"\n    return len([x for x in my_list if x == True])\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n#counter = 0\ndef count(list_bool):\n    #counter = 0\n    #while counter < len(list_bool):\n    for item in list_bool:\n        if item == True:\n            #counter = counter + 1\n            pass\n    return counter\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, l2):\n    return l2 + l1\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\nfrom typing import List, Tuple\nfrom functools import reduce\n\ndef add_lists(list_1: List[int], list_2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n    Return the list as first argument appended to the tuple as second argument.\n    :param list_1: First list\n    :param list_2: Second list\n    :return: Tuple of both lists\n    \"\"\"\n    return tuple(list_1) + list_2\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    if isinstance(list1, tuple) and isinstance(list2, tuple):\n        return list(set(list1) | set(list2))\n    return list(set(list1) + set(list2))\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    list3 = []\n    for i in list1:\n        list3.append(i)\n    for j in list2:\n        list3.append(j)\n    return list3\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, tuple1):\n    list_with_tuple = list1 + tuple1\n    return list_with_tuple\n\n# Asserts\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list_a, list_b):\n    # Make sure the lists are of the same length\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Lists must be of equal length!\")\n    # Make a new list that has the elements of the two lists\n    list_c = []\n    for i in range(len(list_a)):\n        list_c.append(list_a[i] + list_b[i])\n    return list_c\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list_a, list_b):\n    list_c = []\n    for i in range(len(list_a)):\n        list_c.append(list_a[i]+list_b[i])\n    return list_c\n\ndef test():\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert add_lists((10, 11, 12, 13), (20, 21, 22, 23)) == (30, 31, 32, 33)\n    assert add_lists((10, 11, 12, 13), 1) == (11, 12, 13, 14)\n    assert add_lists(1, 2) == 3\n    assert add_lists(1, 2) == 3\n    assert add_lists(1, 2) == 3\n\n#test()", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\nfrom itertools import chain, product\n\ndef add_lists(a, b):\n    \"\"\"\n    Add a list to a tuple\n\n    Parameters\n    ----------\n    a: list\n    b: tuple\n\n    Returns\n    -------\n    tuple\n    \"\"\"\n    return tuple(chain(a, b))\n\n#Below is an example usage:\n\nimport itertools\n\ndef add_lists(a, b):\n    \"\"\"\n    Add a list to a tuple\n\n    Parameters\n    ----------\n    a: list\n    b: tuple\n\n    Returns\n    -------\n    tuple\n    \"\"\"\n    return tuple(chain(a, b))\n\n# Enter the lists\na = [1, 2, 3]\nb = [4, 5, 6]\n\n# Calling the function", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(a, b):\n    for i in a:\n        b.append(i)\n    return b\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of the lists are not equal.\")\n\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i] + list2[i])\n\n    return new_list\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start_num, end_num):\n    if start_num > 255:\n        print(\"Range cannot be greater than 255\")\n    elif start_num < 0:\n        print(\"Start value cannot be negative\")\n    elif end_num > 255:\n        print(\"Range cannot be greater than 255\")\n    elif end_num < 0:\n        print(\"Start value cannot be negative\")\n    elif start_num > end_num:\n        print(\"Start value should be less than or equal to end value\")\n    else:\n        count = 0\n        for i in range(start_num,end_num+1):\n            if i >= 0 and i < 16:\n                count+=1\n        return count\n\n\ncount_Hexadecimal(10,15)", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n\tn = 0\n\tfor i in range(start, end+1):\n\t\tn = n + int(str(i).count('X'))\n\treturn n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start,stop):\n    count = 0\n    while start <= stop:\n        if(start == 16):\n            start += 1\n            continue\n        if(start == 17):\n            start += 1\n            continue\n        if(start == 18):\n            start += 1\n            continue\n        if(start == 19):\n            start += 1\n            continue\n        if(start == 20):\n            start += 1\n            continue\n        if(start == 21):\n            start += 1\n            continue\n        if(start == 22):\n            start += 1\n            continue\n        if(start == 23):\n            start += 1\n            continue\n        if(start == 24):\n            start += 1\n            continue\n        if(start == 25):\n            start += 1\n            continue\n        if(start == 26):\n            start += 1\n            continue\n        if(start == 27):\n            start += 1\n            continue\n        if(start == 28):\n            start += 1\n            continue\n        if(start == 29):\n            start += 1\n            continue\n        if(start == 30):\n            start += 1\n            continue\n        if(start == 31):\n            start += 1\n            continue\n        if(start == 32):\n            start += 1\n            continue\n        if(start == 33):\n            start += 1\n            continue\n        if(start == 34):\n            start += 1\n            continue\n        if(start == 35):\n            start += 1\n            continue\n        if(start == 36):\n            start += 1\n            continue\n        if(start == 37):\n            start += 1\n            continue\n        if(start == 38):\n            start += 1\n            continue\n        if(start == 39):\n            start += 1\n            continue\n        if(start == 40):\n            start += 1\n            continue\n        if(start == 41):\n            start += 1\n            continue\n        if(start == 42):\n            start += 1\n            continue\n        if(start == 43):\n            start += 1\n            continue\n        if(start == 44", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    num = 0\n    for i in range(start,end):\n        num += 1\n    return num\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\nimport re\nimport string\n\ndef count_Hexadecimal(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if len(str(i).strip()) == 4 and re.match('[0-9a-f]{6}',str(i).strip()) != None:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    count = 0\n    for x in range(start,end+1):\n        if(x < 16):\n            count += 1\n        elif(x == 16):\n            count += 1\n        elif(x > 15):\n            count += 1\n    return count\n\nstart = int(input(\"Enter the starting point of the range: \"))\nend = int(input(\"Enter the ending point of the range: \"))", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    if start > end:\n        return 0\n    \n    count = 0\n    for i in range(start, end+1):\n        count += int(str(i), 16)\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    while(start < end):\n        if (start % 16 == 0):\n            count += 1\n        start += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_hexadecimal(lower, upper):\n    count = 0\n    for i in range(lower,upper):\n        if (i > 9) and (i < 15) :\n            count = count + 1\n\n    return count\n\n\ndef main():\n    print(\"There are {} hexadecimal numbers between 10 and 15\".format(count_hexadecimal(10,15)))\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\n# Definition for singly-linked list."], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nimport heapq\n\n\ndef merge_sorted_list(list1, list2, list3):\n    h1 = []\n    for item in list1:\n        heapq.heappush(h1, item)\n\n    h2 = []\n    for item in list2:\n        heapq.heappush(h2, item)\n\n    h3 = []\n    for item in list3:\n        heapq.heappush(h3, item)\n\n    result = []\n    while h1 and h2 and h3:\n        if heapq.heappop(h1) < heapq.heappop(h2) < heapq.heappop(h3):\n            result.append(heapq.heappop(h3))\n        elif heapq.heappop(h2) < heapq.heappop(h1) < heapq.heappop(h3):\n            result.append(heapq.heappop(h3))\n        elif heapq.heappop(h1) < heapq.heappop(h2) < heapq.heappop(h3):\n            result.append(heapq.heappop(h3))\n        else:\n            result.append(heapq.heappop(h1))\n\n    while h1:\n        result.append(heapq.heappop(h1))\n    while h2:\n        result.append(heapq.heappop(h2))\n    while h3:\n        result.append(heapq.heappop(h3))", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# Heap Sort\ndef heap_sort(arr):\n    if len(arr) < 2:\n        return arr\n    max_heap = [arr[0]]\n    heapify(max_heap)\n    heap_size = 1\n    for i in range(1, len(arr)):\n        heap_insert(arr[i], max_heap, heap_size)\n        heap_size += 1\n    while heap_size > 1:\n        max_heap[0], max_heap[-1] = max_heap[-1], max_heap[0]\n        heap_size -= 1\n        heap_remove(max_heap, heap_size)\n    return max_heap\n\n# Insert a node into a heap\ndef heap_insert(val, heap, i):\n    index = i\n    parent = (index-1) // 2\n    while index > 0 and heap[parent] < val:\n        heap[index] = heap[parent]\n        index = parent\n        parent = (index-1) // 2\n    heap[index] = val\n\n# Remove the maximum node from the heap\ndef heap_remove(heap, i):\n    index = i\n    left_child = 2*index+1\n    right_child = 2*index+2\n    largest_child = index\n    if left_child <= len(heap)-1 and heap[index] < heap[left_child]:\n        largest_child = left_child\n    if right_child <= len(heap)-1 and heap[largest_child] < heap[right_child]:\n       ", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(*args):\n    heap_queue = [val for val in args[0]]\n    for i in args[1:]:\n        heapq.heappush(heap_queue, i)\n    return heap_queue\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# Code\ndef merge_sorted_list(*lists):\n    heap = []\n    for l in lists:\n        for i in l:\n            heapq.heappush(heap, i)\n    \n    merged = []\n    while len(heap) > 0:\n        value = heapq.heappop(heap)\n        merged.append(value)\n    \n    return merged\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom typing import Iterator\nimport heapq\n\n# heapq.merge(iter1, iter2)\ndef merge_sorted_list(*lists: Iterator) -> Iterator:\n    for i in lists:\n        heapq.heappush(l, i)\n\n    while len(l):\n        yield heapq.heappop(l)\n\n\ndef test_merge_sorted_list():\n    print(\"Expected: [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\")\n    print(\"Actual:  \", list(merge_sorted_list([25, 24, 15, 4, 5, 29, 110],\n                                            [19, 20, 11, 56, 25, 233, 154],\n                                            [24, 26, 54, 48])))\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(l1,l2,l3):\n    l = []\n    h1 = []\n    h2 = []\n    h3 = []\n    while len(l1)!=0 and len(l2)!=0 and len(l3)!=0:\n        if l1[0] <= l2[0] and l1[0] <= l3[0]:\n            h1.append(l1[0])\n            del l1[0]\n        elif l2[0] <= l1[0] and l2[0] <= l3[0]:\n            h2.append(l2[0])\n            del l2[0]\n        else:\n            h3.append(l3[0])\n            del l3[0]\n    if len(h1)!=0:\n        l += h1\n    if len(h2)!=0:\n        l += h2\n    if len(h3)!=0:\n        l += h3\n    return l\n\nl1 = [25, 24, 15, 4, 5, 29, 110]\nl2 = [19, 20, 11, 56, 25, 233, 154]\nl3 = [24, 26, 54, 48]", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(lst_a,lst_b,lst_c):\n    h1 = lst_a[::-1]\n    h2 = lst_b[::-1]\n    h3 = lst_c[::-1]\n    merged_lst = []\n    while h1 and h2 and h3:\n        if h1[0] <= h2[0]:\n            if h1[0] <= h3[0]:\n                merged_lst.append(h1.pop(0))\n            else:\n                merged_lst.append(h3.pop(0))\n        else:\n            if h2[0] <= h3[0]:\n                merged_lst.append(h2.pop(0))\n            else:\n                merged_lst.append(h3.pop(0))\n    if h1:\n        merged_lst.extend(h1)\n    if h2:\n        merged_lst.extend(h2)\n    if h3:\n        merged_lst.extend(h3)\n    return merged_lst[::-1]\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef merge_sorted_list(list1, list2, list3):\n    #create a heap of all elements in list1\n    heap = []\n    for i in list1:\n        heappush(heap, i)\n    #create a heap of all elements in list2\n    heap2 = []\n    for i in list2:\n        heappush(heap2, i)\n    #create a heap of all elements in list3\n    heap3 = []\n    for i in list3:\n        heappush(heap3, i)\n    #create a list to hold the resultant sorted list\n    result = []\n    while heap and heap2 and heap3:\n        if heap[0] < heap2[0] and heap[0] < heap3[0]:\n            heappop(heap)\n            result.append(heap[0])\n        elif heap2[0] < heap[0] and heap2[0] < heap3[0]:\n            heappop(heap2)\n            result.append(heap2[0])\n        else:\n            heappop(heap3)\n            result.append(heap3[0])\n    #add the remaining elements of list1, list2 and list3 to result\n    for i in heap:\n        result.append(i)\n    for i in heap2:\n        result.append(i)\n    for i in heap3:\n        result.append(i)\n    return result\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(str, n):\n    count = 0\n    for i in range(n):\n        count += str.count(\"0\")\n        str = str.replace(\"0\", \"1\")\n        str = str.replace(\"1\", \"0\")\n    return count\n\n\n# +", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str, n):\n    return(sum(1 for i in range(len(str)) if str[i] != str[-i-1]))\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(str1,n):\n    if str1 == None or n == None:\n        return None\n    \n    even = 0\n    odd = 0\n    i = 0\n    while i <= n - 1:\n        if str1[i] == '1':\n            even += 1\n        else:\n            odd += 1\n        i += 1\n\n    return odd\n\n# Driver code\nstr1 = input(\"Enter a binary string: \")\nn = int(input(\"Enter the number of rotations: \"))", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(string, k):\n    count = 0\n    if k%2 == 1:\n        for i in range(len(string)):\n            if(string[i] == string[-i-1]):\n                count+=1\n    return count\n\ndef test_odd_Equivalent():\n    assert odd_Equivalent(\"011001\",6) == 3\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary_string, n):\n    count = 0\n    # write your code here\n    for i in range(len(binary_string)):\n        if i != 0 and (binary_string[i-1] != '0' and binary_string[i] == '0'):\n            count += 1\n        if count > n:\n            break\n    return count\n\n# check if it is working", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binary_string, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        if binary_string[0] == '1':\n            return 0\n        else:\n            return 1\n    elif n == 2:\n        if binary_string[0] == '1':\n            if binary_string[1] == '1':\n                return odd_Equivalent(binary_string[2:], n-1)\n            else:\n                return 0\n        else:\n            if binary_string[1] == '1':\n                return 0\n            else:\n                return odd_Equivalent(binary_string[1:], n-1)\n    elif n == 3:\n        if binary_string[0] == '1':\n            if binary_string[1] == '1':\n                if binary_string[2] == '1':\n                    return odd_Equivalent(binary_string[3:], n-1)\n                else:\n                    return 0\n            else:\n                if binary_string[2] == '1':\n                    return 0\n                else:\n                    return odd_Equivalent(binary_string[2:], n-1)\n        else:\n            if binary_string[1] == '1':\n                if binary_string[2] == '1':\n                    return odd_Equivalent(binary_string[3:], n-1)\n                else:\n                    return 0\n            else:\n                if binary_string[2] == '1':\n                    return 0\n                else:\n                    return odd_Equivalent(binary_string[2:], n-1)\n    elif n == 4:\n        if binary_string[0] == '1':\n            if binary_string[1] == '1':\n                if binary_string[2] == '1':\n                    if binary_string[3] == '1':\n                        return odd_Equivalent(binary_string[4:], n-1)\n                    else:\n                        return 0\n                else:\n                    if binary_string[3] == '1':\n                        return 0\n                    else:\n                        return odd_Equivalent(binary_string[3:], n-1)\n            else:\n                if binary_string[2] == '1':\n                    if binary", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\n# solution for this function is not clear for me, I need to go to bed now\n# Friday 07 22:42\n\n\ndef odd_Equivalent(num, count):\n    # write your code here\n    count = 0\n    for i in range(len(num)-1):\n        if num[i] == \"1\" and num[i+1] == \"1\":\n            count += 1\n    return count\n\n# test case", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(string,num):\n    count=0\n    for i in range(num):\n        rev=list(string)\n        rev.reverse()\n        if rev==string:\n            count+=1\n        else:\n            break\n        if i==num-1:\n            break\n    return count\n\n# Testing Code", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str1, n):\n    # Write your code here\n    count = 0\n    for i in range(n):\n        if str1[i] == '1':\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lst, start, end):\n    res = []\n    for i in range(start, end+1):\n        if (i, i) not in lst:\n            res.append((i, i))\n    return res\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n# O(nlog(n)) time and O(n) space\ndef extract_missing(arr, start, end):\n    arr.sort()\n    result = []\n    for i in range(len(arr)):\n        result.append((arr[i][0], min(arr[i][1], end)))\n        start = max(start, arr[i][1] + 1)\n    return result\n\n# O(n^2) time and O(1) space\n# def extract_missing(arr, start, end):\n#     result = []\n#     for i in range(len(arr)):\n#         if arr[i][0] >= start and arr[i][1] <= end:\n#             start = max(start, arr[i][1] + 1)\n#         elif arr[i][0] >= start:\n#             result.append((arr[i][0], end))\n#     return result", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n# my code\ndef extract_missing(list_range, start, end):\n    list_ranges = []\n    for i in range(start, end):\n        flag = True\n        for r in list_range:\n            if r[0] >= i and r[1] <= i:\n                flag = False\n        if flag:\n            list_ranges.append((i, i))\n    return list_ranges\n\n\n# +\n# given code\ndef extract_missing(list_range, start, end):\n    missing = []\n    for i in range(start, end + 1):\n        if not any(j[0] <= i and j[1] >= i for j in list_range):\n            missing.append((i, i))\n    return missing\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, start_range, end_range):\n    ranges = sorted(ranges, key=lambda x: x[0])\n    for i in range(len(ranges)):\n        if ranges[i][1] < start_range:\n            yield (start_range, ranges[i][0])\n        elif ranges[i][0] >= end_range:\n            yield (ranges[i][1], end_range)\n        else:\n            if ranges[i][0] >= start_range and ranges[i][1] <= end_range:\n                continue\n            elif ranges[i][0] > start_range:\n                yield (start_range, ranges[i][0])\n            elif ranges[i][1] < end_range:\n                yield (ranges[i][1], end_range)\n\nranges = [(6, 9), (15, 34), (48, 70)]", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n# Function to extract the missing ranges\ndef extract_missing(lst, s, e):\n    if s > e:\n        return []\n    else:\n        return [(s, s + 1), (s + 1, s + 2)] + [(s + i + 1, s + i + 2) for i in range(0, e - s - 1)] + [(s + e, e)]\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    missing = []\n    for i in range(start, end+1):\n        if i not in [x[0] for x in lst] and i not in [x[1] for x in lst]:\n            missing.append((i, i))\n    return missing\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    missing_ranges = []\n    for start_end in ranges:\n        if start_end[0] >= start and start_end[1] <= end:\n            continue\n        elif start_end[0] < start:\n            missing_ranges.append((start_end[0], start))\n        elif start_end[1] > end:\n            missing_ranges.append((end, start_end[1]))\n        else:\n            missing_ranges.append(start_end)\n    return missing_ranges\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    ranges = sorted(ranges, key=lambda x: x[0])\n    ans = []\n    for i in range(len(ranges)):\n        if ranges[i][0] == start:\n            if ranges[i][1] == start + 1:\n                pass\n            else:\n                ans.append((ranges[i][0], start + 1))\n                ranges[i] = (ranges[i][1], ranges[i][1])\n        if ranges[i][1] == end:\n            if ranges[i][0] == end - 1:\n                pass\n            else:\n                ans.append((start, ranges[i][1]))\n                ranges[i] = (ranges[i][0], ranges[i][0])\n    for i in range(len(ranges)):\n        if ranges[i][0] != start:\n            ans.append((start, ranges[i][0]))\n        if ranges[i][1] != end:\n            ans.append((ranges[i][1], end))\n    return ans\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(arr, start, end):\n    return [(start, end) for start, end in arr if (start >= start and end <= end)]\n\ndef extract_missing(arr, start, end):\n    sarr = []\n    for a in arr:\n        if a[0] >= start and a[1] <= end:\n            sarr.append((a[0], a[1]))\n    return sarr", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start_range, end_range):\n    ranges.sort()\n    min_range = ranges[0][0]\n    max_range = ranges[0][1]\n    result = []\n    for (i, r) in enumerate(ranges):\n        if r[0] >= start_range and r[1] <= end_range:\n            continue\n        else:\n            result.append((min_range, max_range))\n            min_range = r[0]\n            max_range = r[1]\n    if min_range < end_range:\n        result.append((min_range, end_range))\n    return result\n\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    common = []\n    for i in lists[0]:\n        for j in lists[1]:\n            if i==j:\n                common.append(i)\n                break\n    return common\n\n# Above function is working for lists having more than 2 items.", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\n# +", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(nested_list):\n    \"\"\"\n    Function to find the common elements in nested list.\n    \"\"\"\n    nested_list_set = set()\n    for inner_list in nested_list:\n        for item in inner_list:\n            nested_list_set.add(item)\n    return list(nested_list_set)\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    # Write your solution here\n    res = set()\n    for lst in nested_lists:\n        for num in lst:\n            res.add(num)\n    return list(res)\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    pass\n\n\n# Test: (for) loops and if statements", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lst):\n    \"\"\"\n    write your code here\n    \"\"\"\n    return [i for i in set(chain.from_iterable(lst))]\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n# Write your code here\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    commons = []\n    for i in lists[0]:\n        for j in lists[1]:\n            if i == j:\n                commons.append(i)\n    return commons\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    # get the longest list\n    longest_list = max(lists, key=len)\n    common_elements = []\n    for sub_list in lists:\n        # check each list for common elements with the longest list\n        for item in longest_list:\n            if item in sub_list:\n                common_elements.append(item)\n\n    return common_elements\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    return set(x for xs in lists for x in xs)\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r, h):\n    \"\"\"\n    Calculate the perimeter of a cylinder of radius 'r' and height 'h'\n    \"\"\"\n    return 2*pi*r + 2*h\n\n#assert perimeter(2,4) == 12\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    area = pi*radius**2\n    return 2*pi*radius + 2*area\n\n#assert", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    return 2*radius*height\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\nimport math\n\ndef perimeter(radius, height):\n    return 2*math.pi*radius*height + 2*radius*height\n\n# def perimeter(radius, height):\n#     return 2*radius*height + 2*math.pi*radius*height\n\n# def perimeter(radius, height):\n#     return math.pi*(radius**2) + 2*math.pi*radius*height + 2*radius*height\n\n# def perimeter(radius, height):\n#     return 2*(radius**2)*height + (2*math.pi*radius)*height + 2*radius*height\n\ndef test_perimeter():\n    assert perimeter(2,4) == 12\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    return 2*3.14*(radius**2) + 2*3.14*height\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    # Define the perimeter of a cylinder\n    return 2*3.1415*radius + 2*3.1415*radius*height\n\n#Test Case\nradius = 2\nheight = 4\nperimeter(radius, height)", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n#Return the perimeter of a cylinder.\ndef perimeter(radius, height):\n    perimeter = 2*3.14*radius+2*3.14*radius*height\n    return perimeter", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    return 2 * 3.14 * radius + 2 * height\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(height,radius):\n    # TODO: Write your solution here\n    return 2*radius*height + 2*pi*radius*radius\n    \n#    return 2*(2*pi*radius)*height + (2*pi*radius**2)*2\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    return 2*3.14159*radius + 2*3.14159*radius*height\n\ndef test_perimeter():\n    assert perimeter(2,4) == 12\n    assert perimeter(2,3) == 10\n    assert perimeter(4,4) == 16\n\ndef main():\n    test_perimeter()\n\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n#     def check_integer(self, s):\n#         if s.isdigit():\n#             return True\n#         else:\n#             return False\n\ndef check_integer(s):\n    if s.isdigit():\n        return True\n    else:\n        return False\n\n#     def check_integer(self, s):\n#         try:\n#             int(s)\n#             return True\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             int(s)\n#             return True\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self, s):\n#         try:\n#             return int(s)\n#         except ValueError:\n#             return False\n\n#     def check_integer(self", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    if s.isdigit():\n        return True\n    else:\n        return False\n\ndef main():\n    s = \"123\"\n    if check_integer(s):\n        print(\"String is integer\")\n    else:\n        print(\"String is not integer\")\n\nmain()", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(str):\n    try:\n        int(str)\n        return True\n    except:\n        return False\n\n#An example\n# python\n# Enter your code here.\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string:str)->bool:\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    :param string: A string to be checked if it is an integer or not.\n    :return: Whether the input string is an integer or not.\n    \"\"\"\n    number = 0\n    string = string.strip()\n    for ch in string:\n        if ch.isdigit():\n            number = number*10 + int(ch)\n        else:\n            return False\n    return True if number else False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except:\n        return False", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(str):\n    str=str.split(\".\")\n    if len(str)==1:\n        try:\n            int(str)\n            return True\n        except ValueError:\n            return False\n    else:\n        num=str[0]\n        dec=str[1]\n        if len(num)==0 or len(dec)==0:\n            return False\n        try:\n            int(num)\n            int(dec)\n            return True\n        except ValueError:\n            return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    if string == \"0\":\n        return True\n    elif string == \"\":\n        return False\n    elif string == \"1\":\n        return True\n    else:\n        int(string)\n        return True", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(number):\n    try:\n        int(number)\n        return True\n    except ValueError:\n        return False\n\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(lst):\n    \"\"\"\n    input: a list of tuples\n    output: a list of tuples with assigned frequencies\n    \"\"\"\n    frequency = dict()\n    for t in lst:\n        if t not in frequency:\n            frequency[t] = 0\n        frequency[t] += 1\n    return [(k, v) for k, v in frequency.items() ]\n\n\ndef test_assign_freq():\n    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    assert assign_freq([(1, 2, 3), (1, 2, 3), (4, 5, 6), (4, 5, 6)]) == '[(1, 2, 3, 3), (4, 5, 6, 2)]'\n    assert assign_freq([(1, 2, 3), (1, 2, 3), (4, 5, 6), (4, 5, 6)]) == '[(1, 2, 3, 3), (4, 5, 6, 2)]'\n    assert assign_freq([(1, 2, 3), (1, 2, 3), (4, 5, 6), (4, 5, 6)]) == '[(1, 2, 3, 3), (4, 5, 6, 2)]'", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    Input: tuple list\n    Output: tuple list with assigned frequencies\n    \"\"\"\n    from collections import Counter\n    counts = Counter(tuple(tuple) for tuple in tuples)\n    return [(tuple, count) for tuple, count in counts.items()]", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n    # write your code here\n    res = []\n    for t in tuples:\n        res.append((t, len(tuples)))\n    res.sort(key = lambda t : t[1], reverse = True)\n    return [r for r in res]\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tupList):\n    tdict = {}\n    for tup in tupList:\n        try:\n            tdict[tup] += 1\n        except KeyError:\n            tdict[tup] = 1\n    for key, val in tdict.items():\n        tdict[key] = val // 2\n    return tdict\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n    \"\"\"\n    \u4f5c\u4e1a6\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06tuple\u5217\u8868\u4e2d\u6bcf\u4e2atuple\u7684\u9891\u7387\u503c\u8bbe\u7f6e\u4e3a1,\u5e76\u5c06tuple\u5217\u8868\u6309\u9891\u7387\u503c\u6392\u5e8f\n    \"\"\"\n    # \u904d\u5386\u6bcf\u4e00\u4e2atuple\n    freq = {}\n    for t in tuples:\n        # \u5982\u679c\u6ca1\u6709\u5b57\u5178\uff0c\u5219\u5c06\u5b57\u5178\u521d\u59cb\u5316\n        if not freq:\n            freq[t] = 1\n        else:\n            # \u5982\u679c\u5b57\u5178\u4e2d\u5b58\u5728\uff0c\u5219+1\n            if t in freq:\n                freq[t] += 1\n            else:\n                # \u5426\u5219\uff0c\u521b\u5efa\u65b0key\uff0c\u5e76\u8bbe\u7f6e\u503c\u4e3a1\n                freq[t] = 1\n    # \u5c06\u5b57\u5178\u8f6c\u5316\u4e3a\u5217\u8868\n    freq_list = []\n    for key, val in freq.items():\n        freq_list.append([key, val])\n    # \u6309key\u4ece\u5927\u5230\u5c0f\u6392\u5217\n    freq_list.sort(key = lambda x: x[1], reverse = True)\n    return freq_list\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(a_list):\n    freq_dic = {}\n    for tup in a_list:\n        if tup not in freq_dic:\n            freq_dic[tup] = 0\n        freq_dic[tup] += 1\n\n    return sorted(freq_dic.items(), key = lambda x: (-x[1], x[0]))\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuplist):\n    freq_dict = {}\n    for tup in tuplist:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return [tup + (freq_dict[tup], ) for tup in freq_dict]\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(x):\n    dic = dict()\n    for i in x:\n        if i not in dic.keys():\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return [i for i in dic.items() if i[1] > 1]\n\n\n# Test", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(l):\n    res = []\n    for x in l:\n        if x in res:\n            res[res.index(x)] += 1\n        else:\n            res.append(x)\n            res.append(1)\n    return res\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(l):\n    return set(tuple(sorted(k)) for k in Counter(l).values())\n\n#Tests\n#assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n#assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7), (6, 5, 8)]) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1), (6, 5, 8, 2)]'\n#assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7), (6, 5, 8), (6, 5, 8)]) == '[(6, 5, 8, 4), (2, 7, 2), (9, 1), (6, 5, 8, 2)]'\n#assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7), (6, 5, 8), (6, 5, 8), (6, 5, 8)]) == '[(6, 5, 8, 5), (2, "], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(l):\n    if len(l)==0:\n        return True\n    for i in range(len(l)):\n        if l[i]!={}:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dits):\n    if not dits:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(l):\n    for i in l:\n        if i != {}:\n            return False\n    return True\n\ndef empty_dit2(l):\n    return not any(i != {} for i in l)\n\n\ndef empty_dit3(l):\n    return not any(len(i) for i in l)\n\n\ndef empty_dit4(l):\n    return all(map(lambda i: len(i)==0, l))\n\n#3. write a function to get the sum of list of numbers.", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dit_list):\n    for i in dit_list:\n        if len(i) > 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dict_list):\n    for dic in dict_list:\n        if dic == {}:\n            pass\n        else:\n            return False\n    return True\n\n#Below is an example usage:\n\nimport re\n\ndef empty_dit(dict_list):\n    for dic in dict_list:\n        if dic == {}:\n            pass\n        else:\n            return False\n    return True\n\n# Enter the list\ndict_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Calling the function", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(list_of_dic):\n    for item in list_of_dic:\n        if item != {}:\n            return False\n    return True\n\n\n#test code\ntest_list = [{\"a\":1, \"b\":2}, {}, {\"c\":3, \"d\":4}]", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lis):\n    for i in lis:\n        if i:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\n# def empty_dit(l):\n#     for i in l:\n#         if i == {}:\n#             return True\n#     return False\n\ndef empty_dit(l):\n    return all([i=={} for i in l])\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dict_list):\n    for i in dict_list:\n        if not i:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dits):\n    return all([dic=={} for dic in dits])\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tuple_val):\n    total = 0\n    for i in range(len(tuple_val)):\n        total += (tuple_val[i] * 10**i)\n    return total", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    '''\n    takes tuple and returns int\n    '''\n    i = 0\n    for n in tup:\n        i = i*10 + n\n    return i", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tuple_input):\n    return sum(i * 2**j for i,j in zip(tuple_input, range(len(tuple_input))))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    s = \"\"\n    for i in t:\n        s+=str(i)\n    return int(s)", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    n=1\n    for i in tup:\n        n*=i\n    return n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    \"\"\"\n    Takes a tuple of positive integers and returns the sum of each element\n    \"\"\"\n    return sum(tup)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tuple_a):\n    \"\"\"\n    Input: a tuple containing only positive integers\n    Output: an integer\n    \"\"\"\n    answer = 0\n    for i in tuple_a:\n        answer = answer*10 + i\n    return answer\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tuple):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n    return int(\"\".join(map(str,tuple)))", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(nums):\n    num = 0\n    for i in range(len(nums)):\n        num += (nums[i] * (10**i))\n    return num\n\n\ndef tuple_to_int2(nums):\n    \"\"\"\n    :param nums: a tuple of positive integers\n    :return: an integer\n    \"\"\"\n    num = 0\n    for i in range(len(nums)):\n        num *= 10\n        num += nums[i]\n    return num\n\n\ndef tuple_to_int3(nums):\n    return sum(num*10**i for i, num in enumerate(nums))\n\n\ndef tuple_to_int4(nums):\n    res = 0\n    for i, num in enumerate(nums, 1):\n        res += num * (10**i)\n    return res\n\n\ndef tuple_to_int5(nums):\n    return sum([num * 10**i for i, num in enumerate(nums)])\n\n\ndef tuple_to_int6(nums):\n    return sum(num * 10 ** i for i, num in enumerate(nums))\n\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_strings):\n    \"\"\"\n    This function takes a list of strings and converts them to floats.\n    \"\"\"\n    list_of_floats = list()\n    for string in list_of_strings:\n        list_of_floats.append( (float(string[0]), float(string[1])) )\n    return list_of_floats\n\n\n# +", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\nlist_to_float = lambda l: [(i[0], float(i[1])) for i in l]\n\n# Tests", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_tuples):\n    # write your code here\n    return [ (float(x), float(y)) for (x, y) in list_of_tuples]\n\n\n# +", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(in_list):\n    return [(float(elem_1), float(elem_2)) for elem_1, elem_2 in in_list]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_in):\n    return [ tuple( map(float, pair) ) for pair in list_in ]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(my_list):\n    return [(float(a), float(b)) for a, b in my_list]\n\n#Below is an example usage:\n\nimport math\n\ndef list_to_float(my_list):\n    return [(float(a), float(b)) for a, b in my_list]\n\n# Enter the list\nmy_list = [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]\n\n# Calling the function", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float( mylist ):\n    mylist_converted = []\n    for i in mylist:\n        mylist_converted.append( (float(i[0]), float(i[1])) )\n    return mylist_converted\n\n#print list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] )", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_strings):\n    return list(map(lambda pair: (float(pair[0]), float(pair[1])), list_of_strings))\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(items):\n    return [(float(i[0]), float(i[1])) for i in items]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_tuple_strings):\n    return [(float(a), float(b)) for a,b in list_of_tuple_strings]\n#----------------------------------------"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(s):\n  return s.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string_to_convert):\n    a = string_to_convert.split(\" \")\n    return a\n\ndef string_to_list2(string_to_convert):\n    return list(string_to_convert)\n\ndef string_to_list3(string_to_convert):\n    return string_to_convert.split()\n\ndef string_to_list4(string_to_convert):\n    return [c for c in string_to_convert]\n\n\ndef string_to_list5(string_to_convert):\n    return string_to_convert.split(\" \")\n\nstring_to_list(\"python programming\")==['python','programming']", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    return str.split(' ')\n\nstring_to_list(\"python programming\")==['python','programming']\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n\treturn str.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(s):\n    s = s.replace(' ','')\n    s = s.split(',')\n    s = s[:-1]\n    return s\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    string_list = []\n    if (len(string)==0):\n        return string_list\n    for i in range(len(string)):\n        if i == 0:\n            string_list.append(string[i])\n        else:\n            if string[i] == \" \":\n                string_list.append(string[i])\n            else:\n                string_list.append(string[i])\n    return string_list\n\nstring_to_list(\"python programming\")", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    return str.split(' ')\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    list = list()\n    for i in range(len(string)//2):\n        list.append(string[i])\n        list.append(string[len(string)//2+i])\n    return list", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(str):\n    return str.split(' ')\n\n#Here is an example usage:\n\nimport random\n\ndef string_to_list(str):\n    return str.split(' ')\n\n# Enter the string\nstring = \"python programming\"\n\n# Calling the function", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\nstring_to_list = lambda string: [i for i in string.split()]"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, ele):\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1 and arr[0] == ele:\n        return True\n    if arr[0] == ele:\n        return search(arr[1:],ele)\n    elif arr[-1] == ele:\n        return search(arr[:-1],ele)\n    else:\n        mid = len(arr)//2\n        if arr[mid] == ele:\n            return search(arr[:mid],ele)\n        elif arr[mid] > ele:\n            return search(arr[:mid],ele)\n        else:\n            return search(arr[mid:],ele)\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(array, number):\n    first = array[0]\n    last = array[-1]\n    for i in range(len(array)):\n        if first != array[i] and array[i] != number and last != array[i]:\n            return array[i]\n    return None\n\n# write your code here\n# [1,1,2,2,3]\n# 5\n\n# [1, 1, 2, 2, 3, 5]\n# 5\n\n# [1, 1, 2, 2, 3, 5, 6]\n# 5\n\n# [1, 1, 2, 2, 3, 5, 6, 7]\n# 5", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nimport unittest\n\ndef search(arr, x):\n    \"\"\"\n    :param list arr: the sorted array\n    :param int x: an element in the array\n    :return: the element that appears once in the array\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return None\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if left >= 0 and arr[left] == x:\n        return left\n    elif right < len(arr) and arr[right] == x:\n        return right\n    return None\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# Approach: Two pointer.\n\ndef search(nums,x):\n    left,right = 0,len(nums)-1\n    while left < right:\n        mid = left + (right-left)//2\n        if nums[mid] == x:\n            if mid == 0 or nums[mid-1] != x:\n                return nums[mid]\n            else:\n                left = mid + 1\n        elif nums[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return -1\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,x):\n    start,end = 0,len(arr)-1\n    while start<end:\n        mid = (start+end)//2\n        if x==arr[mid]:\n            if start==mid or arr[start]!=x:\n                return arr[mid]\n            elif start>0 and arr[start]==x:\n                return arr[mid+1]\n            elif end<len(arr)-1 and arr[end]==x:\n                return arr[mid-1]\n            else:\n                return x\n        elif x<arr[mid]:\n            end = mid-1\n        elif x>arr[mid]:\n            start = mid+1\n    if x==arr[start] or x==arr[end]:\n        return x\n    return -1\n        \n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,n):\n    start = 0\n    end = len(arr) -1\n    mid = 0\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == arr[start]:\n            start += 1\n        elif arr[mid] == arr[end]:\n            end -= 1\n        else:\n            return arr[mid]\n    return arr[mid]\n\ndef main():\n    assert search([1,1,2,2,3],5) == 3\n    print(\"Pass\")\n\nmain()\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,num):\n    i = 0\n    j = len(arr)-1\n    while i<=j:\n        mid = (i+j)//2\n        if arr[mid] == num:\n            i = mid+1\n            j = mid-1\n        elif arr[mid] < num:\n            i = mid+1\n        else:\n            j = mid-1\n    if arr[i]==num:\n        return i\n    if arr[j]==num:\n        return j\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, target):\n    n = len(arr)\n    i, j = 0, n - 1\n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] == target:\n            if i == j:\n                return i\n            elif arr[mid] == arr[mid-1]:\n                i += 1\n            else:\n                j -= 1\n        elif arr[mid] > target:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return -1\n\ndef main():\n    print(search([1,1,2,2,3],5))\nmain()", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\n# Solution:\n# def search(arr, num):\n#     index = 0\n#     while (index < len(arr) and arr[index] < num):\n#         if arr[index] == num:\n#             print(arr[index])\n#             return index\n#         index += 1\n#     return None\n\n# Optimal Solution:\ndef search(arr, num):\n    if len(arr) == 0:\n        return None\n    i = 0\n    while i < len(arr) and arr[i] < num:\n        if arr[i] == num:\n            i += 1\n        else:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    if i == len(arr) - 1:\n        return i\n    else:\n        return None\n\narr = [1, 3, 5, 6, 7, 9, 10]\nn = 5", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(nums, x):\n    \"\"\"\n    :param nums: an array of integers to search\n    :param x: the target number to search for\n    :return: the element that appears only once in the array\n    \"\"\"\n    if not nums:\n        return None\n    count = 1\n    for i in range(len(nums)):\n        if x == nums[i]:\n            count += 1\n        elif count == 1:\n            return x\n        else:\n            break\n    return None\n\n\ndef test_function(test_case):\n    if test_case[0]:\n        result = search(test_case[1], test_case[2])\n        if result == test_case[3]:\n            print(\"Pass\")\n        else:\n            print(\"Fail\")\n    else:\n        print(\"Pass\")\n\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(pairs):\n    \"\"\"\n    Args:\n        pairs (list): list of tuples\n\n    Returns:\n        max_product (int): the maximum product of all tuples\n\n    \"\"\"\n\n    max_product = 0\n\n    for pair in pairs:\n        a, b = pair\n        max_product = max(max_product, a*b)\n\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom operator import itemgetter\nimport math\n\ndef max_product_tuple(list_of_tuple):\n    result = 0\n    for element in list_of_tuple:\n        result *= element[0]\n        result *= element[1]\n    return result\n\n# list_of_tuple = [(2, 7), (2, 6), (1, 8), (4, 9)]\n# print(max_product_tuple(list_of_tuple))\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(pairs):\n    if not pairs:\n        raise Exception('List cannot be empty')\n    pairs.sort(key=lambda p: p[0])\n\n    return max(p[0] * p[1] for p in pairs)\n\ndef test():\n    pairs = [(2, 7), (2, 6), (1, 8), (4, 9)]\n    assert max_product_tuple(pairs) == 36\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(lst):\n    max_product = 0\n    for i in range(0, len(lst)):\n        for j in range(i, len(lst)):\n            max_product = max(max_product, lst[i][0]*lst[j][1])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom math import prod\n\ndef max_product_tuple(lst):\n    s = sorted(lst, key=lambda x:x[0])\n    prod_list = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            prod_list.append(prod(s[i][1],s[j][1]))\n    return max(prod_list)\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(data):\n    max_product=0\n    for a,b in data:\n        if a>0 and b>0:\n            max_product = max(a*b, max_product)\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    max_ = 1\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] * tuples[j][1] > max_:\n                max_ = tuples[i][0] * tuples[j][1]\n    return max_", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(nums):\n    product_list = []\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            product = nums[i]*nums[j]\n            product_list.append(product)\n    product_list.sort(reverse=True)\n    return max(product_list)\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    \"\"\"\n    Complexity: O(n)\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    result = tuples[0][0] * tuples[0][1]\n    for i in range(1, len(tuples)):\n        result = max(result, tuples[i][0] * tuples[i][1])\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\n# The function takes a list of tuples and returns the max product\ndef max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            temp_product = lst[i][0] * lst[j][1]\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product\n\n# Driver code"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, sum1, sum2, sum3):\n    for i in range(len(arr)-2):\n        if arr[i+1] + arr[i+2] + arr[i] == sum1:\n            for j in range(i+1, len(arr)-1):\n                if arr[i+1] + arr[j+1] + arr[j] == sum2:\n                    for k in range(j+1, len(arr)):\n                        if arr[i+1] + arr[j+1] + arr[k+1] == sum3:\n                            return True\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n# Solution\n\n\ndef check_triplet(arr, a, b, c):\n    i = 0\n    while i < len(arr):\n        j = i + 1\n        while j < len(arr):\n            k = j + 1\n            while k < len(arr):\n                if arr[i] + arr[j] + arr[k] == a:\n                    return True\n                k += 1\n            j += 1\n        i += 1\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, sum1, sum2, sum3):\n    \"\"\"\n    check_triplet takes in three integers as input, \n    returns True if there is a triplet in the given array, \n    which satisfies the given condition, otherwise False\n    \"\"\"\n    if arr[0] + arr[1] + arr[2] == sum1:\n        return True\n    elif arr[1] + arr[2] + arr[3] == sum2:\n        return True\n    elif arr[2] + arr[3] + arr[4] == sum3:\n        return True\n    else:\n        return False\n\n\n# +\n# test cases\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n# count number of elements whose value is less than the given threshold\n# return 0 if there is no such element\n\n\ndef check_triplet(a, threshold):\n    # count number of elements whose value is less than the given threshold\n    # return 0 if there is no such element\n    count = 0\n    for i in range(0, len(a)):\n        if a[i] < threshold:\n            count += 1\n\n    if count == 0:\n        return 0\n    else:\n        return True\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n# O(n^2) time | O(1) space\ndef check_triplet(arr, target, start, end):\n    if start < end:\n        mid = start + (end - start)//2\n        left = check_triplet(arr, target, start, mid)\n        right = check_triplet(arr, target, mid+1, end)\n        if left and right:\n            return find_triplet(arr, target, start, end, mid)\n        elif left:\n            return find_triplet(arr, target, mid+1, end, mid)\n        else:\n            return find_triplet(arr, target, start, mid, mid)\n    else:\n        return False\n\ndef find_triplet(arr, target, start, mid, end):\n    first_sum = sum(arr[start:mid+1])\n    second_sum = sum(arr[mid+1:end+1])\n    third_sum = sum(arr[end+1:start:-1])\n    if first_sum + second_sum + third_sum == target:\n        return True\n    return False", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, sum1, sum2, sum3):\n\n    arr.sort()\n    if sum1 in arr:\n        return sum2 in arr and sum3 in arr\n\n    elif sum2 in arr:\n        return sum1 in arr and sum3 in arr\n\n    elif sum3 in arr:\n        return sum1 in arr and sum2 in arr\n\n    else:\n        return False\n\narr = [2, 7, 4, 0, 9, 5, 1, 3]\nsum1 = 8\nsum2 = 6\nsum3 = 0\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, sum1, sum2, sum3):\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum1 == arr[i] + arr[j]:\n                return True\n            elif sum2 == arr[i] + arr[j]:\n                return True\n            elif sum3 == arr[i] + arr[j]:\n                return True\n            elif sum1 == arr[i] + arr[j]:\n                return True\n            elif sum2 == arr[i] + arr[j]:\n                return True\n            elif sum3 == arr[i] + arr[j]:\n                return True\n    return False", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(a, b, c, sum):\n\tif sum in a:\n\t\treturn a.index(sum)\n\telif sum in b:\n\t\treturn b.index(sum)\n\telif sum in c:\n\t\treturn c.index(sum)\n\telse:\n\t\treturn -1", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, first_sum, second_sum, third_sum):\n    \"\"\"\n    :param arr: array of numbers\n    :param first_sum: first sum\n    :param second_sum: second sum\n    :param third_sum: third sum\n    :return: True if the sum of the triplet is found, False otherwise\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if (first_sum == arr[i] + arr[j] and second_sum == arr[j] + arr[k]) or (\n                        second_sum == arr[i] + arr[j] and third_sum == arr[j] + arr[k]) or (\n                        third_sum == arr[i] + arr[j] and first_sum == arr[j] + arr[k]):\n                    return True\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, l, h, target):\n    # Write your code here\n    # You have to find the triplet with sum of the given array\n    # This function will return True if the triplet found\n    # else it will return False\n    # arr is the array which has to be sorted in ascending order\n    # l is the lower bound for the given array\n    # h is the higher bound for the given array\n    # target is the sum of the triplet\n\n    # initializing the variables\n    i = 0\n    j = h - 1\n    s = 0\n    while i < j:\n        if arr[i] + arr[j] == target:\n            return True\n        elif arr[i] + arr[j] > target:\n            j -= 1\n        else:\n            i += 1\n    return False\n\n# Driver code\narr = [2, 7, 4, 0, 9, 5, 1, 3]\nl = 0\nh = len(arr) - 1\ntarget = 6\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nimport sys\n\n\ndef smartNumber(n):\n    return 2**(n-1) - 1\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    if n == 2:\n        return 15\n    if n % 2 != 0:\n        return 20\n    return smartNumber(n//2) * 30", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nfrom math import log\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n\n\ndef smartNumber(n):\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 3\n    return (3*(2**n))-1\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    k = n-1\n    ans = 1\n    while k > 0:\n        ans = ans + k\n        k = k -1\n    return ans\n# Solution 2\ndef smartNumber(n):\n    return n*(n+1)//2\n# Solution 3\ndef smartNumber(n):\n    return sum(range(1,n+1))\n# Solution 4\ndef smartNumber(n):\n    return sum(range(1,n+1))[n//2]", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    else:\n        return 30 + smartNumber(n - 1)", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    pass\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\n# Solution\ndef smartNumber(n):\n\n    count = 1\n    curr = 30\n    while count < n:\n        curr += 1\n        while curr % 2 == 0:\n            curr += 1\n        while curr % 3 == 0:\n            curr += 1\n        count += 1\n    return curr\n\n\ndef smartNumber1(n):\n\n    i = 0\n    while i < n:\n        i += 1\n        while True:\n            if i % 2 == 0 and i % 3 == 0:\n                break\n        else:\n            return i\n\n\n# Tests", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\n# bruteforce\n# def smartNumber(n):\n#     for i in range(n):\n#         num = 0\n#         for j in range(1,100):\n#             num += j**i\n#         if num > 100:\n#             return num\n\n\n# DFS\ndef smartNumber(n):\n    def search(i,j):\n        if i > j:\n            return False\n        if i == j:\n            return True\n        for k in range(i,j):\n            if (k**i + k**j) % 100 == 0:\n                return search(i,k) and search(k+1,j)\n            elif (k**i - k**j) % 100 == 0:\n                return search(i,k) and search(k+1,j)\n        return False\n    if n == 1:\n        return 30\n    for i in range(2,99):\n        if search(1,i):\n            return i\n\n# DFS\n# def smartNumber(n):\n#     if n == 1:\n#         return 30\n#     for i in range(2,99):\n#         if (i**n + (i**n) % 100) % 100 == 0:\n#             return i\n#         if (i**n - (i**n) % 100) % 100 == 0:\n#             return i\n#     return False\n\n# DFS\n# def smartNumber(n):\n#     if n == 1:\n#         return 30\n#     for i in range(2,100):\n#         if (i**n + (i**n) % 100) % 100 == 0:\n#             return i\n#         if (i**n - (i**n) % 100) % 100 == 0:\n#             return i\n#     return False", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nfrom fractions import Fraction\nimport unittest\n\n\ndef smartNumber(n):\n    \"\"\"\n    Find nth smart number\n    :param n: nth smart number\n    :return: nth smart number\n    \"\"\"\n    return 1 if n == 1 else smartNumber(n - 1) + (3 * int(Fraction(1, smartNumber(n - 1)).limit_denominator()) - 1)\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    return 30 * n\n\ndef smartNumber_v2(n):\n    return 30 * n + 5\n\ndef smartNumber_v3(n):\n    return 30 * n + 50\n\ndef smartNumber_v4(n):\n    return 30 * n + 500\n\ndef smartNumber_v5(n):\n    return 30 * n + 5000\n\ndef smartNumber_v6(n):\n    return 30 * n + 50000\n\ndef smartNumber_v7(n):\n    return 30 * n + 500000\n\ndef smartNumber_v8(n):\n    return 30 * n + 5000000\n\ndef smartNumber_v9(n):\n    return 30 * n + 50000000\n\ndef smartNumber_v10(n):\n    return 30 * n + 500000000\n\ndef smartNumber_v11(n):\n    return 30 * n + 5000000000\n\ndef smartNumber_v12(n):\n    return 30 * n + 50000000000\n\ndef smartNumber_v13(n):\n    return 30 * n + 500000000000\n\ndef smartNumber_v14(n):\n    return 30 * n + 5000000000000\n\ndef smartNumber_v15(n):\n    return 30 * n + 50000000000000\n\ndef smartNumber_v16(n):\n    return 30 * n + 500000000000000\n\ndef smartNumber_v17(n):\n    return 30 * n + 5000000000000000\n\ndef smartNumber_v"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(max_num):\n    \"\"\"\n    Return sum of amicable numbers in range(1, max_num)\n    \"\"\"\n    return sum([num for num in range(1, max_num) if is_amicable(num)])\n\ndef is_amicable(num):\n    \"\"\"\n    Return whether the input number is amicable or not\n    \"\"\"\n    return sum(i for i in range(1, num // 2 + 1) if num % i == 0 and num // i == i) == num\n\ndef amicable_numbers_sum_cached(max_num):\n    \"\"\"\n    Same as above but uses memoization to avoid calculating the same number twice\n    \"\"\"\n    sum_table = [0] * max_num\n    sum_table[0] = 0\n    for i in range(1, max_num):\n        sum_table[i] = sum_table[i - 1]\n        if is_amicable(i):\n            sum_table[i] += i\n            for j in range(2 * i, max_num, i):\n                sum_table[j] += i\n    return sum(sum_table)\n\n\ndef run_test_cases():\n    \"\"\"\n    Test cases from the exercise\n    \"\"\"\n    print(amicable_numbers_sum(10000))\n    print(amicable_numbers_sum_cached(10000))\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nimport unittest\n\n\ndef amicable_numbers(n):\n    \"\"\"\n    >>> amicable_numbers(100)\n    >>> amicable_numbers(1000)\n    \"\"\"\n    return [a for a in range(1, n+1) if a != n and sum(a, n) == n]\n\n\ndef amicable_numbers_sum(n):\n    return sum(amicable_numbers(n))\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    sum_of_amicable_numbers=0\n    for i in range(1,n+1):\n        if i==amicable(i):\n            sum_of_amicable_numbers+=i\n    return sum_of_amicable_numbers\n\ndef amicable(n):\n    sum_of_amicable_numbers=0\n    for i in range(1,n):\n        sum_of_amicable_numbers+=i\n    if sum_of_amicable_numbers==amicable_numbers_sum(sum_of_amicable_numbers):\n        return True\n    return False\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nfrom math import sqrt\n\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Sum all amicable numbers from 1 to n.\n    >>> amicable_numbers_sum(1000)\n    1800\n    \"\"\"\n    # TODO: Write your code here\n    return sum(number for number in range(1, n) if amicable_numbers(number))\n\n\ndef amicable_numbers(n):\n    \"\"\"\n    Check if n is amicable or not.\n    >>> amicable_numbers(1502)\n    True\n    \"\"\"\n    a, b = n, n\n    # TODO: Write your code here\n    return a != b and sum(i for i in range(1, int(sqrt(a))) if a % i == 0 and sum(j for j in range(1, int(sqrt(b))) if b % j == 0 and a != j and b != i and i != j) == n\n\n\n# Tests", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    sum=0\n    for x in range(1,n):\n        if x in amicable(x):\n            sum+=x\n    return sum\n\n\ndef amicable(a):\n    b=sum([i for i in range(1,a) if i != a and a % i == 0])\n    if a != b:\n        return [a,b]\n    else:\n        return [a]\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(number):\n    #Your code here\n    return sum([i for i in range(1, number) if is_amicable(i)])\n\ndef is_amicable(number):\n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    if number == 1:\n        return False\n    #number > 2\n    sum_of_numbers = 0\n    for i in range(1, number // 2):\n        if number % i == 0:\n            sum_of_numbers += i\n            if number != i + i:\n                sum_of_numbers += i + i\n    if number == sum_of_numbers:\n        return True\n    return False\n\ndef test_function():\n    test_cases = [\n        (999, 504),\n        (1, 0),\n    ]\n    for case in test_cases:\n        assert case[0] == amicable_numbers_sum(case[0])\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nimport euler\n\ndef amicable_numbers_sum(n):\n    sum_ = 0\n    for i in range(1,n+1):\n        if euler.is_amicable(i) and i!=i**2:\n            sum_ += i\n    return sum_\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    >>> amicable_numbers_sum(999)==504\n    \"\"\"\n    numbers = range(1,n)\n    summ = 0\n    for i in numbers:\n        if sum_of_amicables(i) != i:\n            summ += i\n    return summ\n\ndef sum_of_amicables(a):\n    \"\"\"\n    >>> sum_of_amicables(220)=284\n    >>> sum_of_amicables(284)=220\n    \"\"\"\n    return sum(set(sum_of_proper_divisors(a,x) for x in range(1,a) if a % x == 0 and a != x))\n\ndef sum_of_proper_divisors(a,b):\n    \"\"\"\n    >>> sum_of_proper_divisors(220,10)==20\n    >>> sum_of_proper_divisors(284,14)==24\n    \"\"\"\n    return sum(set(sum_of_proper_divisors(a,x) for x in range(1,b) if a % x == 0 and a != x)) + b\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nimport math\n\ndef amicable_numbers_sum(end):\n    sum_ = 0\n    amicable = [0 for i in range(end)]\n    for i in range(1, end):\n        if i != 1:\n            if sum_ != 0:\n                #print(i, sum_)\n                amicable[i] = 1\n                sum_ += sum_\n            else:\n                #print(i)\n                sum_ = 0\n                amicable[i] = 1\n                sum_ += i\n        else:\n            continue\n\n    for i in range(1, end):\n        if amicable[i] == 1:\n            #print(i)\n            sum_ = 0\n            sum_ += i\n            for j in range(i+1, end):\n                if amicable[j] == 1:\n                    #print(i, j)\n                    sum_ += j\n                    sum_ -= i\n                    #print(sum_)\n                    amicable[j] = 1\n                    amicable[i] = 1\n                    sum_ += sum_\n                    break\n\n    return sum_\n\ndef main():\n    print(amicable_numbers_sum(999))\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real, imag):\n    return  math.atan2(imag,real)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n# What is the angle of a complex number? \n# Euler's formula:\n# cos(\u03b8) = real_part / magnitude\n# sin(\u03b8) = imaginary_part / magnitude\ndef angle_complex(real_part, imaginary_part):\n    magnitude = (real_part**2 + imaginary_part**2)**0.5\n    if magnitude == 0:\n        return 0\n    else:\n        return math.atan2(imaginary_part, real_part)\n\ndef test_angle():\n    assert angle_complex(0,1) == 1.5707963267948966\n    assert angle_complex(1,0) == 0.0\n    assert angle_complex(-1,0) == 3.141592653589793\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n# Write your code here.\n\ndef angle_complex(a,b):\n    return (b**2)/(a**2+b**2)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nimport math\n\ndef angle_complex(real, imaginary):\n    \"\"\"\n    Input: complex number x\n    Output: angle of x in radians\n    \"\"\"\n    angle = math.atan2(imaginary, real)\n    if (angle < 0):\n        angle += 2 * math.pi\n    return angle\n\ndef test():\n    assert angle_complex(0,1j)==1.5707963267948966\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(a,b):\n\tif a == 0 and b == 0:\n\t\treturn 0\n\tif a == 0 and b != 0:\n\t\treturn -np.pi\n\tif a != 0 and b == 0:\n\t\treturn np.pi\n\treturn np.arccos(b/a)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(complex_num):\n    real = complex_num.real\n    imag = complex_num.imag\n    return math.atan2(imag,real)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(real, imaginary):\n    return math.atan2(imaginary, real)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(complex_num):\n    if complex_num == 0:\n        return 0\n    return np.arctan(complex_num.imag/complex_num.real)\n\n\n# +\n#Exercise: Write a function to multiply two complex numbers.", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\nimport math\ndef angle_complex(x,y):\n    rad = math.atan2(y,x)\n    return rad\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    return math.atan(y/x)\n"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_string, length):\n    zeroes = 0\n    ones = 0\n    for i in range(0, length):\n        if binary_string[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n    if zeroes > ones:\n        return zeroes - ones\n    else:\n        return ones - zeroes\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, k):\n    count_zero = 0\n    count_one = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_zero += 1\n        elif s[i] == '1':\n            count_one += 1\n    if count_one > k:\n        return 0\n    return count_zero\n\ndef test_find_length():\n    s = \"11000010001\"\n    k = 11\n    assert find_length(s, k) == 6\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\n# The input number can be represented by binary number 11, which means 111111111.\n\ndef find_length(s, k):\n    ones = [i for i in range(32) if k & (1 << i) > 0]\n    zeros = [i for i in range(32) if k & (1 << i) == 0]\n    return max(len(ones), len(zeros))\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\nimport functools\n\ndef find_length(binary, k):\n    \"\"\"\n    :param binary: a string consisting of 0s and 1s\n    :param k: an integer greater than 1\n    :return: the length of the longest sub-string\n    \"\"\"\n    length = 0\n    flag = 0\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            flag += 1\n        if binary[i] == '1':\n            flag -= 1\n        if flag == -1 * k:\n            length = max(length, i - length + 1)\n    return length\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary, N):\n    \"\"\"\n    A function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    :param binary: The binary string to be analysed\n    :param N: The number of bits of the binary string\n    :return: The number of bits\n    \"\"\"\n    l = []\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            l.append(i)\n    l.sort()\n    count = 0\n    for i in range(len(l)):\n        if binary[l[i]] == '1':\n            count += 1\n    count = abs(N-count)\n    return count", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n# Bonus points\ndef find_length(binary_string, k):\n    num_of_zeros = 0\n    num_of_ones = 0\n    for i in range(len(binary_string)):\n        num_of_zeros += (1-binary_string[i])\n        num_of_ones += binary_string[i]\n        if num_of_zeros >= k and num_of_ones >= k:\n            return i+1\n    return 0\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\n# O(n) time | O(n) space\ndef find_length(string, k):\n    # Write your code here.\n    count0 = count1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count0 += 1\n        elif string[i] == \"1\":\n            count1 += 1\n        if count0 == k:\n            max_diff = len(string) - i\n            break\n        elif count1 == k:\n            max_diff = i - count1\n            break\n\n    return max_diff\n\n\n# +\n# O(n) time | O(1) space", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(str, length):\n    # Complete this function\n    \"\"\"\n    if the length of the string is more than 1, then it is not possible to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    :param str:\n    :param length:\n    :return:\n    \"\"\"\n    if len(str) > 1:\n        return 0\n    # use bit manipulation\n    bitwise_op = 0\n    for i in range(0, length):\n        if str[i] == '1':\n            bitwise_op += 2**i\n        else:\n            bitwise_op -= 2**i\n    return bitwise_op\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n# Approach:\n# 1. Get the number of 1s and 0s in the string\n# 2. get the binary string, \n# 3. get the number of 1s and 0s in the binary string, \n# 4. find the difference between the number of 1s and 0s in the binary string\ndef find_length(s, k):\n    num_0s = num_1s = 0\n    for char in s:\n        if char == '0':\n            num_0s += 1\n        else:\n            num_1s += 1\n    if num_0s > num_1s:\n        num_1s = 0\n        num_0s = k - num_1s\n    else:\n        num_0s = 0\n        num_1s = k - num_0s\n    binary_str = bin(int(s, 2))[2:]\n    num_0s_binary = num_0s\n    num_1s_binary = num_1s\n    for char in binary_str:\n        if char == '0':\n            num_0s_binary += 1\n        else:\n            num_1s_binary += 1\n    return max(num_0s_binary, num_1s_binary) - min(num_0s_binary, num_1s_binary)\n\ndef find_length(s, k):\n    return k - sum(int(c) for c in s if c == '1')\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, n):\n    count = 0\n    for i in range(0, len(s)):\n        if s[i] == \"0\":\n            count += 1\n        else:\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == \"0\":\n            break\n        else:\n            count += 1\n    return abs(count - n)\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef common_divisors(n1,n2):\n    \"\"\"\n    return list of common divisors\n    \"\"\"\n    return list(set(n1 * n2 // gcd(n1, n2) for n1 in range(n1, n2+1)))\n\ndef gcd(a, b):\n    \"\"\"\n    return greatest common divisor\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(n1, n2):\n    lcm = lcm_of_two_numbers(n1, n2)\n    return lcm / gcd(n1,n2)\n\n# Function to find LCM of two numbers\ndef lcm_of_two_numbers(n1, n2):\n    if n1 > n2:\n        lcm = n1 * n2 // gcd(n1,n2)\n    else:\n        lcm = n2 * n1 // gcd(n1,n2)\n    return lcm\n\n\n# Function to find GCD of two numbers\ndef gcd(n1,n2):\n    if n1 > n2:\n        if n2 != 0:\n            gcd = gcd(n2, n1%n2)\n        else:\n            gcd = n1\n    else:\n        if n1 != 0:\n            gcd = gcd(n1, n2%n1)\n        else:\n            gcd = n2\n    return gcd", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(a, b):\n    \"\"\"Return sum of common divisors of two numbers\"\"\"\n\n    sum = 0\n\n    if a > b:\n        temp = a\n        a = b\n        b = temp\n\n    for i in range(1, b+1):\n        if b % i == 0:\n            sum += i\n\n    return sum\n\n\n# Tests\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(number1,number2):\n    l1 = list(range(1,number1+1))\n    l2 = list(range(1,number2+1))\n    l3 = [num for num in l1 if num in l2]\n    return sum(l3)\n\ndef sum_of_common_divisors_2(number1,number2):\n    return sum(set(range(1,number1+1)).intersection(set(range(1,number2+1))))\n\ndef sum_of_common_divisors_3(number1,number2):\n    return sum(set(range(1,number1+1)) & set(range(1,number2+1)))", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisor(number_1, number_2):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n    :param number_1: The first number\n    :param number_2: The second number\n    :return: sum of common divisors\n    \"\"\"\n    sum_divisor = 0\n    #Checking if the first number is less than the second number\n    if number_1 > number_2:\n        for i in range(1,number_2+1):\n            if number_1 % i == 0:\n                sum_divisor += i\n    else:\n        for i in range(1,number_1+1):\n            if number_2 % i == 0:\n                sum_divisor += i\n    return sum_divisor\n\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    print(sum_common_divisor(10,15))\n    print(sum_common_divisor(15,10))\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(a, b):\n    ans = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            ans += i\n    return ans\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_divisors(number1,number2):\n    list1 = [i for i in range(number1,number2+1) if number1 % i == 0 and number2 % i == 0]\n    return sum(list1)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\nfrom numpy import gcd\n\n\ndef sum_of_common_divisors(num1,num2):\n    \"\"\"\n    This function return the sum of common divisors of two given numbers.\n\n    Parameters\n    ----------\n    num1 : int\n        The first given number.\n    num2 : int\n        The second given number.\n\n    Returns\n    -------\n    sum : int\n        The sum of common divisors of two given numbers.\n\n    \"\"\"\n    return (num1+num2) - gcd(num1,num2)\n\n\ndef test_sum_of_common_divisors():\n    assert sum_of_common_divisors(10,15) == 6\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisor(x,y):\n    lcm = x*y/gcd(x,y)\n    lcm = lcm//gcd(x,lcm)\n    lcm = lcm//gcd(y,lcm)\n    return lcm\n\ndef gcd(x,y):\n    if(x > y):\n        return gcd(y,x)\n    if(x==0):\n        return y\n    return gcd(y%x,x)\n\ndef main():\n    print(sum_common_divisor(10,15))\n\nmain()", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\n#To write a function you need to add def keyword at the beginning of the function\ndef sum_common_divisors(a, b):\n  sum_divisors = 0\n  for i in range(1, a+1):\n    if a % i == 0 and b % i == 0:\n      sum_divisors += i\n  return sum_divisors\n\n#Don't forget to add () at the end of the function name"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(m,n):\n    \"\"\"\n    Multiply two integers without using the * operator in python.\n    :param m: The first integer\n    :param n: The second integer\n    :return: The product of the two numbers\n    \"\"\"\n    return m*n\n\n\ndef multiply_list(m,n):\n    \"\"\"\n    Multiply two lists without using the * operator in python.\n    :param m: The first list\n    :param n: The second list\n    :return: The product of the two lists\n    \"\"\"\n    return m+n\n\n\ndef multiply_str(m,n):\n    \"\"\"\n    Multiply two strings without using the * operator in python.\n    :param m: The first string\n    :param n: The second string\n    :return: The product of the two strings\n    \"\"\"\n    return m+n\n\n\ndef multiply_int_str(m,n):\n    \"\"\"\n    Multiply two integers and a string without using the * operator in python.\n    :param m: The first integer\n    :param n: The second string\n    :return: The product of the two integers and a string\n    \"\"\"\n    return str(m)+n\n\n\ndef multiply_str_int(m,n):\n    \"\"\"\n    Multiply two strings and a integer without using the * operator in python.\n    :param m: The first string\n    :param n: The second integer\n    :return: The product of the two strings and an integer\n    \"\"\"\n    return m+str(n)\n\n\ndef multiply_str_str(m,n):\n    \"\"\"\n    Multiply two strings without using the * operator in python.\n    :param m: The first string\n    :param n: The second string\n    :return: The product of the two strings\n    \"\"\"\n    return m+n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    if x==0 or y==0:\n        return 0\n    else:\n        return x*y\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    product = 0\n    for i in range(0,a):\n        product += i\n    return product*b\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    return x*y\n\n#create the function multiply_int\n#put the input into function\nx = 10\ny = 20\n#put the output into function\nz = multiply_int(x,y)\n\n#print the function output", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\nimport numpy as np\n\ndef multiply_int(x,y):\n    \"\"\"Multiply two integers without using the * operator\"\"\"\n    return x*y\n\ndef multiply_int_np(x,y):\n    \"\"\"Multiply two integers without using the * operator using Numpy\"\"\"\n    return x*y\n\ndef multiply_int_np2(x,y):\n    \"\"\"Multiply two integers without using the * operator using Numpy\"\"\"\n    return x*y\n\ndef multiply_int_np3(x,y):\n    \"\"\"Multiply two integers without using the * operator using Numpy\"\"\"\n    return x*y\n\ndef multiply_int_np4(x,y):\n    \"\"\"Multiply two integers without using the * operator using Numpy\"\"\"\n    return x*y\n\ndef multiply_int_np5(x,y):\n    \"\"\"Multiply two integers without using the * operator using Numpy\"\"\"\n    return x*y", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    if(x>=y):\n        return (x*y)\n    else:\n        return (y*x)", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(num1,num2):\n    return int(str(num1)*str(num2))", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x,y):\n    if x < 0 or y < 0:\n        print(\"Integer negative\")\n    elif x == 0 or y == 0:\n        print(\"Zero is undefined\")\n    elif x == 1:\n        return y\n    elif y == 1:\n        return x\n    else:\n        return x*multiply_int(x-1,y)+y*multiply_int(x,y-1)\n    return 0\n\n#Test case 1", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    '''\n    :param n: int\n    :param words: list of strings\n    :return: list of strings\n    '''\n    new_words = []\n    for word in words:\n        if len(word)>n:\n            new_words.append(word)\n    return new_words", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word)>=n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    \"\"\"Returns a list of words of length n or more.\n    >>> long_words(3,\"python is a programming language\")==['python','programming','language']\n    \"\"\"\n    return [word for word in words if len(word)>=n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n\n#Tests", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\nfrom typing import List\n\ndef long_words(n: int, words: List[str]) -> List[str]:\n    \"\"\"\n    >>> long_words(3,\"python is a programming language\")==['python','programming','language']\n    >>> long_words(3,\"python is a programming language python\")==['python','programming','language']\n    >>> long_words(4,\"python is a programming language\")==['python','programming','language']\n    \"\"\"\n    return [word for word in words if len(word) > n]", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,string):\n\treturn [x for x in string.split() if len(x) > n]", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    # your code\n    return [word for word in words if len(word) > n]", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n# f(n,w)= {word:1 for w in words if len(w)>n}\ndef long_words(n,words):\n    return {word:1 for w in words if len(w)>n}\n\n# long_words(3,\"python is a programming language\")==['python','programming','language']\n# long_words(3,['python is a programming language'])==['python','programming','language']\n# long_words(3,\"python is a programming language\")==['python','programming','language']"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(arr):\n    return sum(i for i in range(1, arr[0][0] + 1)) == sum(i for i in range(1, arr[-1][-1] + 1)) and all(sum(arr[i][0:i]) == i for i in range(len(arr))) and all(sum(arr[0:i]) == i for i in range(len(arr[0]))) and all(sum(arr[0][0:i]) == sum(arr[-1][-i:]) for i in range(len(arr[0]))) and all(sum(arr[-1][-i:]) == sum(arr[i][0:i]) for i in range(len(arr[0]))) and all(sum(arr[0:i]) == sum(arr[i][-1]) for i in range(len(arr[0]))) and all(sum(arr[0][0:i]) == sum(arr[-1][0:-i]) for i in range(len(arr[0]))) and all(sum(arr[-1][0:-i]) == sum(arr[0][-i:]) for i in range(len(arr[0])))\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(magic_square):\n    n=len(magic_square[0])\n    if len(magic_square)!=n:\n        return False\n    for row in magic_square:\n        for elem in row:\n            if elem!=n*row.index(elem)+row.index(elem)*n:\n                return False\n    return True\n\ndef magic_square_factory(n):\n    magic_square=[[0 for i in range(n)] for j in range(n)]\n    for row in range(n):\n        for elem in range(n):\n            magic_square[row][elem]=n*row+elem\n    return magic_square\n\ndef magic_square_demo():\n    print(magic_square_test(magic_square_factory(3)))\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    length = len(matrix)\n    if length < 3:\n        return False\n    row_sum = 0\n    for i in range(length):\n        row_sum += matrix[i][i]\n\n    if row_sum % 3 != 0:\n        return False\n\n    return True", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(input):\n    square = []\n    for row in input:\n        square.append(row.copy())\n    \n    n = len(input[0])\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or i == (n-1):\n                square[i][j] += square[i][n-1-j]\n            elif j == 0 or j == (n-1):\n                square[i][j] += square[n-1-i][j]\n            else:\n                square[i][j] += min(square[i][n-1-j], square[n-1-i][j])\n\n    return square == input\n\ndef magic_square_test(input):\n    return magic_square(input)\n\ndef magic_square_printer(input):\n    n = len(input[0])\n    for i in range(n):\n        for j in range(n):\n            print(input[i][j], end=' ')\n        print()\n    return\n\ndef test_magic_square():\n    assert magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\ndef test_magic_square_printer():\n    magic_square_printer([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(square):\n    if square == square[::-1]:\n        return True\n    return False\n\n\ndef magic_square(n):\n    \"\"\"\n    Assumes n >= 2\n    \"\"\"\n    square = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            square[i][j] = i+j+1\n    return square\n\n\ndef magic_square_2(n):\n    #Assumes n >= 2\n    if n == 1:\n        return [[1]]\n    elif n == 2:\n        return [[1, 2], [2, 1]]\n    elif n == 3:\n        return [[1, 2, 3], [3, 2, 1], [2, 1, 3]]\n    elif n == 4:\n        return [[1, 2, 3, 4], [3, 2, 1, 4], [2, 1, 3, 4], [4, 3, 1, 2]]\n    else:\n        return magic_square_2(n-2) + [[n, n-1], [n-1, n]] + magic_square_2(n-2)\n\n\n#assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n#assert magic_square_test([[1, 2, 3], [3, 2, 1], [2, 1, 3]])==True\n#assert magic_square_test([[1, 2, 3, 4], [3, 2, 1, 4], [2, 1, 3, 4], [4, 3, 1, 2]])", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n# this is the right solution\ndef magic_square_test(arr):\n    max_row = len(arr)\n    for i in range(max_row):\n        sum_1 = arr[i][0]+arr[i][1]+arr[i][2]\n        sum_2 = arr[i][0]+arr[i][3]+arr[i][6]\n        sum_3 = arr[i][1]+arr[i][4]+arr[i][7]\n        sum_4 = arr[i][2]+arr[i][5]+arr[i][8]\n        if sum_1 != sum_2 or sum_3 != sum_4:\n            return False\n    for i in range(max_row-1):\n        sum_1 = arr[i][0]+arr[i][3]+arr[i][6]\n        sum_2 = arr[i][1]+arr[i][4]+arr[i][7]\n        if sum_1 != sum_2:\n            return False\n    if arr[0][0]+arr[1][1]+arr[2][2] != arr[3][3]+arr[4][4]+arr[5][5] or arr[6][6]+arr[7][7]+arr[8][8] != arr[0][0]+arr[1][1]+arr[2][2]:\n        return False\n    else:\n        return True\n\ndef magic_square(arr):\n    def add(arr, i, j, k):\n        if arr[i][j] != 0:\n            return False\n        else:\n            arr[i][j] = k\n            return True\n    max_row = len(arr)\n    if len(arr) == 1:\n        if arr[0][0] == max_row*max_row:\n            return True\n        else:\n            return False\n    for i in range(max_row):\n        if add(arr, i, 0, i+1):\n            if add(arr, 0,", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(arr):\n    for i in range(len(arr)):\n        col = 0\n        for n in range(len(arr[0])):\n            if (n != i) and arr[i][n] != arr[n][i]:\n                col = False\n                break\n        row = 0\n        for n in range(len(arr)):\n            if (n != i) and arr[n][i] != arr[i][n]:\n                row = False\n                break\n        if (col==True) and (row==True):\n            return True\n    return False\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(magic):\n\trow = len(magic)\n\tcolumn = len(magic[0])\n\tfor x in range(row):\n\t\tfor y in range(column):\n\t\t\tif (x+y)%2==0 and magic[x][y]!=0:\n\t\t\t\treturn False\n\treturn True\n\ndef magic_square_test(magic):\n\t# Magic numbers of magic square (row, column, sum)\n\texpected = [\n\t\t(7, 3, 3),\n\t\t(4, 3, 3),\n\t\t(4, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(6, 3, 3),\n\t\t(7, 3, 3),\n\t\t(4, 3, 3),\n\t\t(4, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t(5, 3, 3),\n\t\t", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(lst):\n    l = len(lst)\n    if l==3:\n        for i in range(l):\n            for j in range(l):\n                if lst[i][j]!=i+1+j:\n                    return False\n        return True\n    if l==4:\n        for i in range(l):\n            for j in range(l):\n                if lst[i][j]!=i+1+j+l:\n                    return False\n        return True\n    if l==5:\n        for i in range(l):\n            for j in range(l):\n                if lst[i][j]!=i+1+j+l*2:\n                    return False\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(square):\n    sums = []\n    length = len(square)\n\n    for i in range(length):\n        sums.append(sum(square[i]))\n\n    return all(item == sums[0] for item in sums)\n\ndef main():\n    print(magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\n    print(magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    # Insert your code here.\n    #print(\"The list is:\",lst)\n    d={}\n    for i in lst:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n            \n    max_count=0\n    max_key=0\n    for i in d:\n        if d[i]>max_count:\n            max_count=d[i]\n            max_key=i\n            \n    return (max_key,max_count)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(arr):\n    max_element = arr[0]\n    max_frequency = arr[arr.index(max_element)]\n    for element in arr:\n        if element == max_element:\n            max_frequency += 1\n        else:\n            max_element = element\n            max_frequency = 1\n    return (max_element, max_frequency)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(items):\n    max_item = 0\n    count = 0\n    max_occurrence = 0\n    for i in items:\n        if count == 0:\n            max_occurrence = i\n            count += 1\n        elif i == max_occurrence:\n            count += 1\n        elif i > max_occurrence:\n            max_occurrence = i\n            count = 1\n    return max_occurrence, count\n\nitems = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    d = dict()\n    for i in lst:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    max_item, max_freq = None, 0\n    for i in d:\n        if max_freq < d[i]:\n            max_freq = d[i]\n            max_item = i\n    return max_item, max_freq\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(nums):\n    nums.sort()\n    max_item = nums[-1]\n    max_count = 0\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            max_count += 1\n        else:\n            if max_count > max_occurrences:\n                max_occurrences = max_count\n                max_item = nums[i]\n            max_count = 0\n    return (max_item, max_occurrences)\n\n\n# ---\n# ### 2. write a function to find the missing element in a given list\n#\n# assert missing_element([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==5\n#\n# assert missing_element([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2,5])==6\n\ndef missing_element(nums):\n    nums.sort()\n    i = 0\n    for j in range(len(nums)-1):\n        if nums[j+1] != (nums[j]+1):\n            break\n    return nums[j+1]\n\n\n# ---\n# ### 3. write a function to find the sum of a list after removing one element from the list\n\ndef sum_after_remove_one(nums):\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n            i -= 1\n    sum_list = []\n    for num in nums:\n        sum_list.append(num)\n    sum_list.sort()\n    for i in range(len(sum_list)):\n        if i == 0:\n            pass\n        elif sum_list[", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    max_val, max_key = -1, None\n    for key in lst:\n        if lst.count(key) > max_val:\n            max_val = lst.count(key)\n            max_key = key\n    return max_key, max_val\n\n\ndef main():\n    print(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]))\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    # Your Code Here\n    if len(lst)==0:\n        return None\n    dic = {}\n    for i in lst:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    m=max(dic.values())\n    k=list(dic.keys())[list(dic.values()).index(m)]\n    return (k,m)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    d = dict()\n    for item in lst:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    result = (d[max(d.keys())], max(d.keys()))\n    return result\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(l):\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    m=max(d.values())\n    for i in d:\n        if d[i]==m:\n            return (i,d[i])", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nimport timeit\ndef max_occurrences(list_of_items):\n    #dict for storing the count of each item\n    count_dict = {}\n    for item in list_of_items:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    return max(count_dict.items(), key=lambda x:x[1])"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(reversed(s.translate(str.maketrans(\"\",\"\",vowels))))\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    l = list(s)\n    count = 0\n    for i in range(0,len(l)):\n        if l[i] in \"AEIOUaeiou\" or l[i] == ' ':\n            l[i] = l[len(l)-1-count]\n            count+=1\n    return \"\".join(l)\n\n# Printing the output", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    if s is None or s == \"\":\n        return \"\"\n    s = s.lower()\n    vowels = \"aeiou\"\n    return \"\".join(x for x in reversed(s) if x in vowels)\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str):\n    # Vowels in Python\n    vowels = 'AEIOUaeiou'\n    new_str = ''\n    for i in str:\n        if i in vowels:\n            new_str = new_str + i\n    return new_str[::-1]", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(text):\n    \"\"\"\n    Returns text with only the vowels reversed\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_text = ''\n\n    for char in text:\n        if char in vowels:\n            new_text += char[-1]\n        else:\n            new_text += char\n\n    return new_text\n\ndef main():\n    text = 'Python'\n\n    assert reverse_vowels(text) == 'Python'\n\n    return\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\nvowels = \"AEIOUaeiou\"\n\n\ndef reverse_vowels(input_str):\n    output_str = \"\"\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            output_str = output_str + input_str[i]\n    return output_str[::-1]\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    rev = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            rev = rev + str1[i].upper()\n        else:\n            rev = rev + str1[i].lower()\n    return rev", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in str:\n        if i in vowels:\n            result = result + i[-1] + i[:-1]\n        else:\n            result = result + i\n    return result\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    out = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            out += s[i].upper()\n        else:\n            out += s[i].lower()\n    return out\n\n#assert reverse_vowels(\"Python\") == \"Python\"\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    return(string[::-1])\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    string = \"\"\n    for letter in tup:\n        string += letter\n    return string", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    a = ''.join(tup)\n    return a\n\n#Below is an example usage:\n\n# Enter the tuple\ntup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')\n\n# Calling the function", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    #Convert a tuple to a string\n    return \" \".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    x = ''.join(tup)\n    return x", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return tuple(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(t):\n    return ''.join([x for x in t])\ntup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n\n#Below is an example usage:\n\nimport re\n\ndef tup_string(tup):\n    return \"\".join(tup)\n\n# Enter the tuple\ntup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')\n\n# Calling the function", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    if type(tup) != tuple:\n        print('Not a tuple')\n        return\n    return ''.join(tup)\ntup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(lst):\n    return sum(filter(lambda x : x < 0, lst))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\nimport functools\n\ndef sum_negativenum(mylist):\n    return functools.reduce(lambda x, y: x+y, filter(lambda x: x < 0, mylist), 0)\n\n# print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(list_of_num):\n    sum_of_negativenum = 0\n    for i in range(len(list_of_num)):\n        if list_of_num[i] < 0:\n            sum_of_negativenum += list_of_num[i]\n    return sum_of_negativenum", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(num):\n    return sum(filter(lambda x: x < 0, num))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(l):\n    return sum([num for num in l if num < 0])\n\nsum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(map(lambda x: x if x > 0 else 0, numbers))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(lst):\n    \"\"\"\n        function to return the sum of negative numbers in the list.\n        :param lst: list of numbers.\n        :return: the sum of negative numbers in the list.\n    \"\"\"\n    return sum(filter(lambda x: x < 0, lst))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(l):\n\treturn sum(map(lambda x: -x, l))", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    return sum([n for n in nums if n < 0])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numbers):\n    return sum(map(lambda x: x * -1, numbers))\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, n):\n    i = len(arr) - 1\n    while(p > 0):\n        i = i - 1\n        p = p - 1\n        if(i%2 == 0):\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n\n\n# Testcases", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\n#Solution- \ndef check_last(arr,p,q):\n    return \"ODD\" if arr[-1] % 2 == 1 else \"EVEN\" if arr[-1] % 2 == 0 else \"NONE\"\n\n#Test case-\narr = [5,7,10]", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, r):\n    if p == 0:\n        return \"ODD\"\n    elif p > 0:\n        temp = check_last(arr, p-1, r-1)\n        if r % 2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,n,p):\n    s = 0\n    for i in range(n-1):\n        s = s+arr[i]\n    return \"EVEN\" if s%2 == 0 else \"ODD\"\n\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,n,p):\n    # code here\n    return \"EVEN\" if (arr[-1]%2 == 0) else \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, i):\n    if (p == 1):\n        if(i%2 == 0):\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    else:\n        if (i == len(arr)):\n            if(check_last(arr, p-1, len(arr)-1) == \"EVEN\"):\n                return \"EVEN\"\n            else:\n                return \"ODD\"\n        else:\n            if(check_last(arr, p-1, i+1) == \"EVEN\"):\n                return \"EVEN\"\n            else:\n                return \"ODD\"\n\n# Driver code\narr = [5,7,10]", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,n):\n    if p == 0:\n        return arr[n]\n    elif arr[n]%2 == 0:\n        return check_last(arr,p-1,n)\n    else:\n        return check_last(arr,p-1,n)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,r):\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            even_count +=1\n        if even_count >= p:\n            return \"ODD\"\n    return \"EVEN\"\ncheck_last([5,7,10],3,1)", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(array, p, i):\n    if i == len(array):\n        if array[i] % 2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    else:\n        if array[i] % 2 == 0:\n            return check_last(array, p, i+1)\n        else:\n            return check_last(array, p, i+1)\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nfrom math import sqrt\n\n\ndef hexagonal_num(n):\n    return n * (n - 1) * (2 * n - 1) // 6\n\n\n# Tests", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom itertools import count\n\n\ndef hexagonal_num(n):\n    return sum(2 * (j + 1) ** 2 - 1 for j in count()) * n\n\n\ndef test_hexagonal_num():\n    assert hexagonal_num(10) == 190\n    assert hexagonal_num(0) == 0\n\n\ndef main():\n    print(hexagonal_num(10))\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(num):\n    return num * (2*num - 1)", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"Return the nth hexagonal number.\"\"\"\n    h = 1\n    for i in range(1, n+1):\n        h += 2 * i - 1\n    return h\n\n\ndef main():\n    \"\"\"Test the function.\"\"\"\n    assert hexagonal_num(10) == 190\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(num):\n    return sum(range(1, num + 1))\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom __future__ import print_function\nimport math\n\n\ndef hexagonal_num(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * (2 * n - 1) + 1) * (2 * n + 1) // 2\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    if n==1:\n        return 0\n    else:\n        return 2*n*(2*n-1)\n\n\n# + deletable=false nbgrader={\"grade\": true, \"grade_id\": \"hexagonal_num_test\", \"locked\": true, \"points\": 10, \"schema_version\": 1, \"solution\": false}", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    if n == 1:\n        return 1\n    else:\n        return 10 * hexagonal_num(n - 1) + 1\n\n\nhexagonal_num(10)\n\n# +\nimport sys\n\ndef my_function(x):\n    \"\"\"\n    Write a function called my_function that takes one parameter, x.\n    It should then return the value of x squared.\n    \"\"\"\n    return x ** 2\n\n# Test your function", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return 6*(n**2)+3*(n+1)\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    \"\"\"\n    [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190]\n    :param n:\n    :return:\n    \"\"\"\n    return n * (2 * n - 1)\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kW):\n    return 0.03 * kW + 100\n\n# run test case\nimport doctest\ndoctest.testmod()\n# output\n\n# To calculate electricity bill.\n# assert cal_electbill(75)==246.25\n\n# Tests passed\n# user: 112658", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    bill = kwh * 125.0\n    bill += kwh * 25.0\n    bill += kwh * 25.0\n    return bill\n\n#print(cal_electbill(75))\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    bill = kwh * 0.06\n    return bill\n\n\ndef get_number(x):\n    #get the number of the color of the car\n    if x == 'red':\n        return 3000\n    elif x == 'blue':\n        return 2000\n    elif x == 'green':\n        return 1000\n    elif x == 'black':\n        return 0\n    else:\n        return -1\n\ndef get_number2(x):\n    #get the number of the color of the car\n    if x == 'red':\n        return 3\n    elif x == 'blue':\n        return 2\n    elif x == 'green':\n        return 1\n    elif x == 'black':\n        return 0\n    else:\n        return -1\n\ndef get_number3(x):\n    #get the number of the color of the car\n    if x == 'red':\n        return 1\n    elif x == 'blue':\n        return 1\n    elif x == 'green':\n        return 1\n    elif x == 'black':\n        return 0\n    else:\n        return -1\n\n\ndef get_total_number(x):\n    #get the number of the color of the car\n    if x == 'red':\n        return 3000 + 3\n    elif x == 'blue':\n        return 2000 + 2\n    elif x == 'green':\n        return 1000 + 1\n    elif x == 'black':\n        return 0\n    else:\n        return -1\n\n\ndef get_total_number2(x):\n    #get the number of the color of the car\n    if x == 'red':\n        return 3000 + 1\n    elif x == 'blue':\n        return 2000 + 1\n    elif x == 'green':\n        return 1000 + 1\n    elif x == 'black':\n        return 0\n    else:\n        return -1\n\n\ndef get_total_number3(x):\n    #get the number of the color of the car\n    if x == 'red':\n        return 3000 + 1\n    elif x == 'blue':\n        return 20", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kWh):\n    bill = 0.14 * kWh + 25\n    return bill\n\n#Test\ndef test_cal_electbill():\n    assert cal_electbill(75) == 246.25\n\n#Let's give 100W/h\ninput_kWh = 100\n\n#call function to calculate electric bill\nbill = cal_electbill(input_kWh)\n\n#Print bill", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\nimport math\ndef cal_electbill(kWh):\n    return 4.75 * kWh\n\ndef test_cal_electbill():\n    assert cal_electbill(75)==246.25\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kWh):\n    kWh_bill = kWh * 0.23\n    return kWh_bill\n\ndef main():\n    print(\"A single kWh of electricity costs {}\u00a3\".format(cal_electbill(75)))\n\nmain()", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(hours):\n    \"\"\"\n    :param hours: the number of hours for one month\n    :return: the electricity bill for a month\n    \"\"\"\n    if hours <= 0:\n        raise ValueError(\"The number of hours should not be less than 0\")\n    if hours > 1000:\n        raise ValueError(\"The number of hours should not be greater than 1000\")\n    if hours <= 87.5:\n        return 10000 * hours\n    if 87.5 <= hours <= 120:\n        return 10000 * 120 + 5000 * (hours - 87.5)\n    if 120 < hours <= 150:\n        return 10000 * 150 + 4500 * (hours - 120)\n    if 150 < hours <= 187.5:\n        return 10000 * 187.5 + 4000 * (hours - 150)\n    if 187.5 < hours <= 225:\n        return 10000 * 225 + 3500 * (hours - 187.5)\n    if 225 < hours <= 262.5:\n        return 10000 * 262.5 + 3000 * (hours - 225)\n    if 262.5 < hours <= 300:\n        return 10000 * 300 + 2500 * (hours - 262.5)\n    if 300 < hours <= 337.5:\n        return 10000 * 337.5 + 2000 * (hours - 300)\n    if 337.5 < hours <= 375:\n        return 10000 * 375 + 1500 * (hours - 337.5)\n    if 375 < hours <= 412", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    bill=kwh*24\n    return bill\n\ndef test_cal_electbill():\n    assert cal_electbill(75)==246.25\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\nimport sys\n\ndef cal_electbill(Kilowatt, rate=1.5):\n    \"\"\"\n    This is a function to calculate electricity bill\n    \"\"\"\n    return rate * Kilowatt\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\n# +\n# Unit test\nimport unittest\n\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    count = 0\n    for i in arr:\n        if i==0:\n            count += 1\n    return count/len(arr)\n\ndef main():\n    # run sample test case\n    print(\"Sample Test Case\")\n    arr = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]\n    print(\"Zero Count = \", zero_count(arr))\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n  count = 0\n  for i in arr:\n    if i == 0:\n      count += 1\n  return count/len(arr)\n\ndef zero_count2(arr):\n  return len([i for i in arr if i == 0])/len(arr)\n\ndef zero_count3(arr):\n  return len([x for x in arr if x==0])\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(A):\n    \"\"\"\n    I will call a number 'positive' if it is greater than 0.\n    A positive number is divisible by 2 if it is even and it is not divisible by 2 if it is odd.\n    Therefore the ratio of zeroes in the array is the sum of the ratios of positive numbers in the array.\n    \"\"\"\n    A_sum = 0\n    positive_count = 0\n    for number in A:\n        if number>0:\n            positive_count +=1\n            A_sum+=1/number\n    return positive_count/A_sum\n\ndef zero_count_without_divide(A):\n    \"\"\"\n    I will call a number 'positive' if it is greater than 0.\n    A positive number is divisible by 2 if it is even and it is not divisible by 2 if it is odd.\n    Therefore the ratio of zeroes in the array is the sum of the ratios of positive numbers in the array.\n    \"\"\"\n    A_sum = 0\n    positive_count = 0\n    for number in A:\n        if number>0:\n            positive_count +=1\n            A_sum+=number\n    return positive_count/A_sum\n\ndef zero_count_with_switch(A):\n    \"\"\"\n    I will call a number 'positive' if it is greater than 0.\n    A positive number is divisible by 2 if it is even and it is not divisible by 2 if it is odd.\n    Therefore the ratio of zeroes in the array is the sum of the ratios of positive numbers in the array.\n    \"\"\"\n    A_sum = 0\n    positive_count = 0\n    for number in A:\n        if number>0:\n            A_sum+=number\n            positive_count+=1\n    return positive_count/A_sum\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(x):\n    return 1. * sum(0 if i == 0 else 1 for i in x) / len(x)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\nimport math\n\ndef zero_count(array):\n    \"\"\"\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.15\n    \"\"\"\n    zero = 0\n    for item in array:\n        if item == 0:\n            zero += 1\n    return zero / len(array)\n\ndef zero_count_another_way(array):\n    \"\"\"\n    >>> zero_count_another_way([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.15\n    \"\"\"\n    zero = 0\n    for item in array:\n        if math.isnan(item) or item == 0:\n            zero += 1\n    return zero / len(array)\n\ndef zero_count_fast(array):\n    \"\"\"\n    >>> zero_count_fast([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.15\n    \"\"\"\n    zero = len([x for x in array if math.isnan(x) or x==0])\n    return zero / len(array)\n\ndef test():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    return 0.0\n\ndef test_zero_count():\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(array):\n    \"\"\"\n    Returns a float representing the ratio of zeros in an array of integers.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            zero_count += 1\n    return float(zero_count) / float(len(array))\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\nzero_count = lambda nums: float(sum(1 for num in nums if num==0))/len(nums)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(numbers):\n    \"\"\"\n    O(n) time | O(n) space\n    :param numbers: a list of integers\n    :return: the fraction of zeroes in the list\n    \"\"\"\n    number_zeroes = 0\n    number_total = len(numbers)\n    for number in numbers:\n        if number == 0:\n            number_zeroes += 1\n    return number_zeroes / number_total\n\ndef test_zero_count():\n    numbers = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]\n    assert zero_count(numbers) == 0.15\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    return 0\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if(n==0):\n        return False\n    elif(n==1):\n        return True\n    else:\n        for i in range(2,n//2+1):\n            if(n%i==0):\n                return False\n        return True\n\n\n\n# +\n#Write a python function to find the number of digits required to represent n as sum of non-zero powers of 2.\n#Input: n = 10000\n#Output: 2\n\n#assert num_digits_required(10000) == 2\n#assert num_digits_required(10) == 1\n#assert num_digits_required(0) == 1\n# -\n\ndef num_digits_required(n):\n    num_digits_required = 1\n    while(n!=0):\n        n//=2\n        num_digits_required+=1\n    return num_digits_required", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    \n    for i in range(31, -1, -1):\n        if n & (1 << i):\n            if i == 0:\n                return True\n            else:\n                return is_Sum_Of_Powers_Of_Two(n >> i)\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n# Implement your code below\n\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    return num == 0 or (num & (num - 1)) == 0\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n % 2 != 0:\n        return False\n    \n    for i in range(1, int(n/2)+1):\n        if not n % (2**i):\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(N):\n    \"\"\"\n    -> To check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    :param N: number to check.\n    :return: True if number can be represented as sum of non-zero powers of 2, else False.\n    \"\"\"\n    for i in range(2, N):\n        if N % i == 0:\n            if N//i == 0:\n                return False\n            else:\n                return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    total = 0\n    while(n != 0):\n        if(n & 1 == 1):\n            return False\n        n = n >> 1\n        total = total + 1\n    return True\n\ndef main():\n    n = 10\n    assert is_Sum_Of_Powers_Of_Two(n) == True\n\nmain()", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\nimport math\n\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 1:\n        return False\n    while n & 1 == 0:\n        n = n >> 1\n    if n == 0:\n        return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(number):\n    result = 0\n    while number != 0:\n        number &= number - 1\n        result += 1\n    return result > 0\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n# O(logn) time | O(1) space\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 1:\n        return False\n    i, j = 1, n\n    while i < j:\n        mid = (i + j) // 2\n        if mid % 2 != 0 and (mid >> 1) ** 2 <= n:\n            i = mid + 1\n        else:\n            j = mid\n    return j == n\n\n# O(logn) time | O(1) space\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 1:\n        return False\n    i, j = 1, n\n    while i < j:\n        mid = (i + j) // 2\n        if mid % 2 == 0 and (mid >> 1) ** 2 <= n:\n            j = mid\n        else:\n            i = mid + 1\n    return i == n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    while n != 1:\n        if n % 2 != 0:\n            n = n * 3\n            if n == 1:\n                return True\n        else:\n            n = n // 2\n    return False"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(r):\n\t\"\"\"\n\tfinds the circumference of a circle\n\t\"\"\"\n\treturn 2.0 * 3.14159 * r\n\ndef test_circle_circumference():\n\t\"\"\"\n\tTests the functionality of the function circle_circumference\n\t\"\"\"\n\tassert circle_circumference(10) == 62.830000000000005", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nfrom math import pi\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*radius*pi\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n\n\ndef circle_circ", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return 2 * 3.14 * radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\nimport math\n\ndef circle_circumference(radius):\n    assert isinstance(radius, int) or isinstance(radius, float)\n    assert radius>0\n    return 2*math.pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    #radius is in inches, so we need to convert to meters\n    rad = radius*0.0254\n    pi = math.pi\n    return (2*rad*pi)\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return (2*math.pi)*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return 2 * 3.1415 * radius\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    \"\"\"\n    calculate the circumference of a circle\n    \"\"\"\n    return 2*math.pi*radius\n\ndef _test():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14159265358979 * radius\n\n# note: 2* pi * r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14159 * radius\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuplist):\n    return [x for x in tuplist if tuplist.count(x) == 1]\n\n#Below is an example usage:\n\nimport itertools\n\ndef extract_singly(tuplist):\n    return [x for x in tuplist if tuplist.count(x) == 1]\n\n# Enter the tuple list\ntuplist = [(3, 4, 5), (4, 5, 7), (1, 4)]\n\n# Calling the function", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List\n\n\ndef extract_singly(data: List[tuple]) -> List[int]:\n    data = list(set(data))\n    result = []\n    for i in data:\n        if len(i) == 1:\n            result.append(i[0])\n    return result\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuple_list):\n    res = []\n    for tup in tuple_list:\n        if tup.count(tup[0]) == 1:\n            res.append(tup[0])\n    return res\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(lst):\n    unique = set([])\n    for item in lst:\n        if len(item)==1:\n            unique.add(item)\n    return list(unique)\n\ndef test_extract_singly():\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(list_of_tuples):\n    \"\"\"\n    input: list of tuples (list)\n    output: list of single elements (list)\n    \"\"\"\n    return [element for elem in list_of_tuples for element in elem]\n\n\ndef main():\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef extract_singly(tuple_list: list[Tuple]) -> list[int]:\n    \"\"\"\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    True\n    \"\"\"\n    return [num for tuple in tuple_list for num in tuple if tuple.count(num) == 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(x):\n    result = []\n    for i in range(len(x)):\n        if len(x[i]) == 1:\n            result.append(x[i][0])\n    return result", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuples):\n    # TODO: Complete this function\n    return [n for n in tuples if len(set(n))==1]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(list_of_tuples):\n    result = []\n    for item in list_of_tuples:\n        if item not in result:\n            result.append(item)\n    return result\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuple_list):\n    \"\"\"Returns a list of elements in tuple_list that only occur once\"\"\"\n    # Your code goes here\n    return tuple_list\n\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(l):\n    \"\"\"\n    Sorts a list using pancake sort.\n    \"\"\"\n    i = 0\n    while i < len(l) - 1:\n        pancake_flip(l, i)\n        i += 1\n\ndef pancake_flip(l, i):\n    \"\"\"\n    Sorts the sublist from l[0] to l[i] using pancake sort.\n    \"\"\"\n    n = len(l)\n    j = i\n    while l[j] >= l[j - 1] and j - i >= 2:\n        j -= 1\n    l[i], l[j] = l[j], l[i]\n    if j - i == 1:\n        return\n    for j in range(j, i, -1):\n        l[j], l[j - 1] = l[j - 1], l[j]\n    pancake_flip(l, j)\n\ndef test_pancake_sort():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([15, 79, 38, 69, 25]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([15, 79, 38, 69, 25]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([55, 25, 4, 38, 69]) == [4, 25, 55, 38, 69]\n    assert pancake_sort([55, 25, 4, 38, 69]) == [4, ", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(list):\n    # The first pancake is [15, 25, 38, 69, 79]\n    # the second is [25, 15, 79, 38, 69]\n    # the third is [25, 15, 79, 69, 38]\n    # the fourth is [25, 15, 38, 79, 69]\n    # the fifth is [25, 15, 38, 69, 79]\n    # no need to keep going any further,\n    # the list is sorted in this order.\n    # time complexity: O(n^2), because we need to do n-1 pancakes\n    # space complexity: O(1)\n    n = len(list)\n    for i in range(n-1):\n        if list[i] > list[i+1]:\n            tmp = list[i]\n            list[i] = list[i+1]\n            list[i+1] = tmp\n            for j in range(i, 0, -1):\n                if list[j-1] > list[j]:\n                    tmp = list[j-1]\n                    list[j-1] = list[j]\n                    list[j] = tmp\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    \"\"\"\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    >>> pancake_sort([7, 8, 4, 3, 2, 1])\n    [1, 2, 3, 4, 7, 8]\n    >>> pancake_sort([])\n    []\n    \"\"\"\n    if not lst:\n        return []\n    for i in range(len(lst)):\n        pancake(lst, i)\n    return lst\n\n\ndef pancake(lst, k):\n    \"\"\"\n    >>> pancake([15, 79, 25, 38, 69], 0)\n    >>> lst\n    [15, 25, 38, 69, 79]\n    >>> pancake([7, 8, 4, 3, 2, 1], 2)\n    >>> lst\n    [7, 2, 4, 8, 3, 1]\n    \"\"\"\n    assert 0 <= k <= len(lst)\n    if k == 0:\n        return\n    for i in range(k, 0, -1):\n        exch(lst, i - 1, i)\n        pancake(lst, i - 1)\n\n\ndef exch(lst, i, j):\n    \"\"\"\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> exch(lst, 0, 2)\n    >>> lst\n    [3, 1, 2, 4, 5]\n    >>> exch(lst, 2, 4)\n    >>> lst\n    [3, 1, 4, 2, 5]\n    \"\"\"\n    lst[i], lst[j] = lst[j], lst[i]\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(nums):\n    for i in range(len(nums)):\n        if i > 0 and nums[i] < nums[i-1]:\n            j = 0\n            while nums[j] < nums[i-1]:\n                nums[i-1], nums[j] = nums[j], nums[i-1]\n                j += 1\n            pancake_sort(nums)\n            return nums\n    return nums\n\n#assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(lst):\n    i = len(lst) - 1\n    while i > 0:\n        j = i\n        while j > 0 and lst[j] < lst[j-1]:\n            lst[j], lst[j-1] = lst[j-1], lst[j]\n            j -= 1\n        if j < i:\n            lst[i], lst[j] = lst[j], lst[i]\n            i = j\n        else:\n            i -= 1\n    return lst\n\n#test case", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    for i in range(len(arr) // 2):\n        j = i + 1\n        while j < len(arr):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n                pancake_sort(arr)\n            j += 1\n    return arr", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\nimport pytest\n\ndef pancake_sort(array):\n    \"\"\"\n    Uses pancake sort to sort a list of elements.\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] != array[i+1]:\n            array[i], array[i+1] = array[i+1], array[i]\n            j = i\n            while array[j] > array[j-1]:\n                array[j] = array[j-1]\n                j -= 1\n            array[j] = array[j-1]\n            while j >= 0:\n                array[j], array[j-1] = array[j-1], array[j]\n                j -= 1\n    return array\n\ndef test_pancake_sort():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([5, 8, 10, 2, 7]) == [2, 5, 7, 8, 10]\n    assert pancake_sort([4, 3, 8, 5, 1]) == [1, 3, 4, 5, 8]", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n\n    # to make sure we don't fuck up the input.\n    arr = list(arr)\n\n    while(len(arr)>1):\n        # find the largest number in the list and swap with the last element\n        largest_idx = find_largest_idx(arr)\n        swap(arr, largest_idx, len(arr)-1)\n\n        # reverse the list\n        reverse_arr(arr)\n        \n        # reduce by 1 to get the next largest\n        arr.pop()\n\n        # print the list\n        # print(arr)\n\n    return arr\n\n\ndef find_largest_idx(arr):\n    largest_idx = -1\n    for i in range(len(arr)):\n        if arr[i]>arr[largest_idx]:\n            largest_idx = i\n    return largest_idx\n\n\ndef reverse_arr(arr):\n    for i in range(int(len(arr)/2)):\n        swap(arr, i, len(arr)-1-i)\n\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(items):\n    \"\"\"\n    :param list items: a list of elements to be sorted\n    :return: sorted items\n    :rtype: list\n    \"\"\"\n    length = len(items)\n    for i in range(length):\n        pancake_sort_helper(items, i, length)\n    return items\n\n\ndef pancake_sort_helper(items, i, length):\n    \"\"\"\n    :param list items: a list of elements to be sorted\n    :param int i: index of element to be compared\n    :param int length: length of list\n    :return: None\n    \"\"\"\n    if i >= length - 1:\n        return\n    if items[i] > items[i + 1]:\n        items[i], items[i + 1] = items[i + 1], items[i]\n        pancake_sort_helper(items, i, length)\n    pancake_sort_helper(items, i + 1, length)\n\n\n# -\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\nfrom typing import List\n\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Sort a list of elements using pancake sort.\n    \"\"\"\n    for i in range(len(nums)):\n        # Reverse order of current element.\n        nums[i] *= -1\n        # Find the index of the largest element that is smaller than the current element.\n        end = len(nums) - 1\n        for j in range(i + 1, len(nums)):\n            if nums[j] < nums[i]:\n                # Swap the current element with the element at the end of the array.\n                nums[i], nums[j] = nums[j], nums[i]\n                # Reverse the order of the current element again.\n                nums[i] *= -1\n                # Find the index of the largest element that is smaller than the current element.\n                end = j\n        # Move the array to the end of the list.\n        if i != end:\n            nums[i], nums[end] = nums[end], nums[i]\n            nums[i] *= -1\n        # Reverse the order of the element at the end of the array.\n        nums[end] *= -1\n    # Reverse the order of the last element.\n    nums[-1] *= -1\n    return nums"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n\ndef test_count_samepair():\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(L1,L2,L3):\n    \"\"\"\n    Input: lists of size n\n    Output: number of same pairs\n    \"\"\"\n    count=0\n    for x in L1:\n        for y in L2:\n            if x==y:\n                for z in L3:\n                    if x==z:\n                        count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count=0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j and i==k:\n                    count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(a,b,c):\n    a=set(a)\n    b=set(b)\n    c=set(c)\n    c1=list(c)\n    for i in a:\n        for j in b:\n            if i==j:\n                for k in c:\n                    if i==k:\n                        if c1.count(i)==3:\n                            return True\n    return False\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(a,b,c):\n    total = 0\n    for i in a:\n        for j in b:\n            if i==j:\n                total+=1\n    return total\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(l1,l2,l3):\n    if len(l1)==len(l2)==len(l3):\n        cnt=0\n        for i in range(len(l1)):\n            if l1[i]==l2[i]==l3[i]:\n                cnt+=1\n        return cnt\n    else:\n        return -1\n        \n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    my_dict = {}\n    if len(list1) != len(list2) != len(list3):\n        return 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            my_dict[list1[i]] = my_dict.get(list1[i], 0) + 1\n    return len(my_dict)\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(l1,l2,l3):\n    count=0\n    for i in l1:\n        if i in l2:\n            if i in l3:\n                count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(arr1,arr2,arr3):\n    if len(arr1) != len(arr2) or len(arr1) != len(arr3):\n        raise ValueError('Lists are not of same length')\n    # sorting the lists\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    arr3 = sorted(arr3)\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            if arr2[i] == arr3[i]:\n                count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                for k in list3:\n                    if k == j:\n                        count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return len([list for list in tup if type(list) is list])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, list):\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple):\n    count = 0\n    for item in tuple:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n#Below is an example usage:\n\n# Enter the tuple\ntuple = ([1, 2, 3, 4], [5, 6, 7, 8])\n\n# Calling the function", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple1):\n    \"\"\"\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n    2\n    \"\"\"\n    if tuple1 == ():\n        return 0\n    else:\n        return 1 + find_lists(tuple1[1:])\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\nfrom collections import Counter\n\ndef find_lists(tup):\n    \"\"\"\n    Finds the number of lists in the given tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if type(i) == list:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(t):\n    return sum(isinstance(i, list) for i in t)\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    return len([i for i in t if type(i) is list])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\nfrom itertools import combinations\n\ndef find_lists(tup):\n    return len(list(combinations(tup, 4)))\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n# Write your code here\n# Inital solution\n# def find_lists(tup):\n#     n_lists = 0\n#     for x in tup:\n#         if type(x) == list:\n#             n_lists += 1\n#     return n_lists\n\n# nicer solution\ndef find_lists(tup):\n    return len([i for i in tup if type(i) == list])\n\n# Test cases", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    counter = 0\n    for i in range(len(tup)):\n        for j in range(i+1, len(tup)):\n            if (tup[i] == tup[j]):\n                counter += 1\n    return counter\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(array, N):\n    \"\"\"\n    >>> sum_Pairs([1,8,9,15,16],5)\n    74\n    \"\"\"\n    sum_array = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            sum_array += abs(array[i] - array[j])\n    return sum_array\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(list, num):\n    result = 0\n    for i in range(len(list)):\n        for j in range(i + 1, len(list)):\n            result += abs(list[i] - list[j])\n    return result\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n    s=0\n    for i in range(n-1):\n        s+=abs(arr[i]-arr[i+1])\n    return s\n\n# TEST CASES:\narr=[1,8,9,15,16]\nans=74", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            ans+=abs(arr[i]-arr[j])\n    return ans\n\n#Function for testing\ndef test_sum_Pairs():\n    arr = [1,8,9,15,16]\n    n = len(arr)\n    print(sum_Pairs(arr,n))\n    assert sum_Pairs(arr,n) == 74\n\n#Function Call\ntest_sum_Pairs()", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum+= abs(arr[i]-arr[j])\n    return sum\nsum_Pairs([1,8,9,15,16],5)", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n    m = len(arr)\n    sum = 0\n    for i in range(m-1):\n        for j in range(i+1,m):\n            sum += abs(arr[i]-arr[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    ans = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            ans = ans + abs(arr[i]-arr[j])\n    return ans", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum+=abs(arr[i]-arr[j])\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    if len(arr)==1:\n        return 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            arr[j]-=arr[i]\n    return sum(arr)\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, N):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result += abs(arr[i] - arr[j])\n    return result\n\ndef main():\n    arr = [1,8,9,15,16]\n    print(\"Sum of absolute differences in all pairs of the given array is %d\" % sum_Pairs(arr, 5))\n\nmain()"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, k):\n    max_diff = max(arr) - min(arr)\n    for i in range(len(arr)-1):\n        max_diff = max(max_diff, max(arr[i+1]-arr[i], arr[i]-arr[i+1]) )\n    return max_diff\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    \"\"\"\n    :param arr: array of size n\n    :param n: size of the array\n    :return: maximum difference between any two elements in a given array\n    \"\"\"\n    if n == 1:\n        return arr[0]\n    else:\n        max_diff = max(arr[0], arr[1])\n        for i in range(2, n):\n            max_diff = max(max_diff, abs(arr[i-1]-arr[i]))\n        return max_diff\n\n\ndef max_Abs_Diff1(arr, n):\n    \"\"\"\n    :param arr: array of size n\n    :param n: size of the array\n    :return: maximum difference between any two elements in a given array\n    \"\"\"\n    arr.sort()\n    return max(arr[n-1]-arr[0], arr[n-1]-arr[n-2])\n\n\ndef max_Abs_Diff2(arr, n):\n    \"\"\"\n    :param arr: array of size n\n    :param n: size of the array\n    :return: maximum difference between any two elements in a given array\n    \"\"\"\n    arr.sort()\n    max_diff = 0\n    for i in range(n):\n        max_diff = max(max_diff, arr[i] - arr[n-1])\n    return max_diff\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    return max([abs(arr[i]-arr[j]) for i in range(n) for j in range(n) if i!=j])\n\n# assert max_Abs_Diff((2,1,5,3),4) == 4\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\n# +", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(a, b):\n    \"\"\"\n    a: list of integers\n    b: integer\n    \"\"\"\n    diff_sum = 0\n    for i in range(len(a)):\n        diff = abs(a[i] - b)\n        diff_sum += diff\n    return diff_sum\n\n\ndef test_max_Abs_Diff():\n    a = [2, 1, 5, 3]\n    b = 4\n    ans = 4\n    assert max_Abs_Diff(a, b) == ans", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\n#solution\ndef max_Abs_Diff(arr, k):\n    max_val = float(\"-inf\")\n    for i in range(len(arr)-k):\n        max_val = max(max_val, abs(arr[i+k] - arr[i]))\n    return max_val\n\n#test case\narr = [2,1,5,3]\nk = 2\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(A, k):\n    '''\n    This function takes an array as a parameter and returns a value\n    '''\n    # Create a variable to store the maximum value\n    max = 0\n    # Iterate through the array to find the maximum difference\n    for i in range(len(A) - 1):\n        # If the value of A[i+1] is greater than A[i] then\n        if A[i+1] - A[i] > max:\n            # Update the maximum difference\n            max = A[i+1] - A[i]\n    # return the maximum difference\n    return max\n\n\n#print(max_Abs_Diff([2,1,5,3],4))", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(lst,n):\n    arr = []\n    for i in range(n):\n        arr.append(abs(lst[i]-lst[i+1]))\n    return max(arr)\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    max_diff = -1\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i] != arr[j]:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n\n# Test cases\narr = (2,1,5,3)\nn = len(arr)", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(array, k):\n    # Check the length of the array and if k is less than the length of the array\n    if(len(array) == 0 or k >= len(array)):\n        return 0\n    \n    # Find the maximum absolute difference between two elements in the array\n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if(abs(array[j]-array[i]) > max_diff):\n                max_diff = abs(array[j]-array[i])\n    \n    # Return the maximum absolute difference\n    return max_diff\n\n# Driver code"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum([ord(char) for char in string])\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(str1):\n    total = 0\n    for i in range(len(str1)):\n        total += ord(str1[i])\n    return total\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(c) for c in string)\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    val=0\n    for i in range(len(string)):\n        val+=ord(string[i])\n    return val\n\n# Test", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    value = 0\n    for letter in string:\n        value+=ord(letter)\n    return value\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    count=0\n    for i in string:\n        count+=ord(i)\n    return count\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n\tascii_value=0\n\tfor i in string:\n\t\tascii_value+=ord(i)\n\treturn ascii_value\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    total = 0\n    for i in range(len(string)):\n        total += ord(string[i])\n    return total\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n\n    return len(string)\n\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, column):\n\n    max_path = triangle[row][column]\n\n    for direction in [0, 1, 2]:\n        max_path = max(max_path, triangle[row][column] + max_path_sum(triangle, row + direction, column - 1))\n\n    return max_path\n\n# Just for testing.", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row_index, col_index):\n    \"\"\"\n    Calculate the maximum path sum in a triangle.\n\n    Parameters\n    ----------\n    triangle : list\n        list of lists of integers representing a triangle\n\n    row_index : int\n        current row index\n\n    col_index : int\n        current column index\n\n    Returns\n    -------\n    max_path_sum : int\n        maximum path sum\n    \"\"\"\n    # Create a dummy node to represent the last index\n    node = Node(row_index, col_index)\n    max_path_sum = node.val\n\n    # If the index is out of range\n    if row_index < 0 or row_index >= len(triangle) or col_index < 0 or col_index >= len(triangle[row_index]):\n        return node.val\n\n    # Traverse to the right\n    max_path_sum = max(max_path_sum, max_path_sum + triangle[row_index][col_index])\n\n    # Traverse down\n    max_path_sum = max(max_path_sum, max_path_sum + triangle[row_index][col_index + 1])\n\n    # Traverse up\n    max_path_sum = max(max_path_sum, max_path_sum + triangle[row_index + 1][col_index])\n\n    # Traverse to the left\n    max_path_sum = max(max_path_sum, max_path_sum + triangle[row_index + 1][col_index + 1])\n\n    return max_path_sum\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(matrix, k, n):\n    # write your code here\n    if k == 0:\n        return max_value_from_matrix(matrix)\n    for i in range(n):\n        matrix[k-1][i] += max(matrix[k-1][i-1], matrix[k-2][i])\n    return max_value_from_matrix(matrix)\n\ndef max_value_from_matrix(matrix):\n    sum = 0\n    for i in range(len(matrix)):\n        sum += max(matrix[i])\n    return sum\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, n, i):\n    if i == n:\n        return triangle[i][i]\n    if i == n - 1:\n        return max(triangle[i][i], triangle[i][i + 1])\n\n    return max(triangle[i][i], triangle[i][i + 1], triangle[i + 1][i]) + max_path_sum(triangle, n, i + 1)\n\ndef max_path_sum(triangle, n, i):\n    if i >= n:\n        return triangle[i][i]\n    if i == n - 1:\n        return max(triangle[i][i], triangle[i][i + 1])\n\n    return max(triangle[i][i], triangle[i][i + 1], triangle[i + 1][i]) + max_path_sum(triangle, n, i + 1)\n\ndef max_path_sum(triangle, n, i):\n    if i >= n:\n        return triangle[i][i]\n    if i == n - 1:\n        return max(triangle[i][i], triangle[i][i + 1])\n\n    return max(triangle[i][i], triangle[i][i + 1], triangle[i + 1][i]) + max_path_sum(triangle, n, i + 1)\n\ndef max_path_sum(triangle, n, i):\n    if i >= n:\n        return triangle[i][i]\n    if i == n - 1:\n        return max(triangle[i][i], triangle[i][i + 1])\n\n    return max(triangle[i][i], triangle[i][i + 1], triangle[i + 1][i]) + max_path_sum(triangle, n, i + 1)\n\ndef max_path_sum(triangle, n, i):\n    if i >= n:\n        return triangle[i][i]\n    if i == n - 1:\n        return max(triangle[i", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i, j):\n    if i >= len(triangle) - 1 or j >= len(triangle[0]) - 1:\n        return 0\n    if triangle[i][j] == 0:\n        triangle[i][j] = max(max_path_sum(triangle, i + 1, j), max_path_sum(triangle, i, j + 1))\n    return triangle[i][j]\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i, j):\n    \"\"\"\n    We can do recursion.\n\n    T(i, j) = max(T(i, j-1), T(i-1, j), T(i-1, j-1)) + triangle[i][j]\n\n    Note that we need to start from the bottom right triangle.\n    \"\"\"\n    if i == 0:\n        return triangle[i][j]\n    else:\n        return max(max_path_sum(triangle, i, j-1), max_path_sum(triangle, i-1, j), max_path_sum(triangle, i-1, j-1)) + triangle[i][j]\n\n\n# print max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row_count, column_count):\n    max_path_sum = -math.inf\n    for i in range(row_count - 1, -1, -1):\n        for j in range(column_count - 1, -1, -1):\n            max_path_sum = max(max_path_sum, triangle[i][j] + max(triangle[i][j + 1], triangle[i + 1][j]))\n\n    return max_path_sum\n\ntriangle = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\nmax_path_sum(triangle, len(triangle), len(triangle[0]))\n\n# Testing", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i=0, j=0):\n    if i >= len(triangle) or j >= len(triangle[0]):\n        return 0\n    res = triangle[i][j]\n    res += max(max_path_sum(triangle, i+1, j), max_path_sum(triangle, i, j+1))\n    return res\n\ndef test_max_path_sum():\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 1, 2) == 8\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    \"\"\"\n    Triangle is indexed by row with row zero being the bottom.\n    \"\"\"\n    if row == 0:\n        return triangle[0][col]\n    elif col == 0:\n        return triangle[row][col]\n    else:\n        # return triangle[row][col]\n        return max(triangle[row][col], max_path_sum(triangle, row-1, col-1)) + triangle[row][col]\n\n\ndef main():\n    print(max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2))\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\n# + active=\"\"\n# Input: n\n# Output: The divisibility of n into two parts such that the sum of the digits is maximum.\n# Example:\n# Input: 35\n# Output: 17 (1+7=8)\n# Example:\n# Input: 45\n# Output: 19 (1+9=10)\n# -\n\n\n\ndef sum_digits_twoparts(n):\n    \"\"\"The sum of digits in a number is maximum when the number is divisible by 9. \n    Find the divisibility of n into two parts such that the sum of the digits is maximum.\n    \n    \"\"\"\n    if n==0:\n        return 0\n    elif n%9==0:\n        return 1\n    else:\n        return 0\n\n\nsum_digits_twoparts(35)\n\n# +\n# O(1) time complexity\n# O(1) space complexity\n# -\n\n\n\n# ### Median of Two Sorted Arrays\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    if n<=9:\n        return n\n    sum = 0\n    n = str(n)\n    for i in range(len(n)):\n        sum += int(n[i])\n    return sum\n\n\n# # Maximum Subarray Problem\n# Write a function to find the maximum contiguous sum of the given array.\n#\n# The subarray should have a minimum size of 2.\n#\n# assert maximum_subarray([1,4,-5,6,3,2,1]) == 11", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(number):\n    while number>0:\n        number=number//10\n        number=number+number%10\n    return number\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    if num < 10:\n        return 0\n    else:\n        first = num // 10\n        second = num % 10\n        return sum_digits_twoparts(first) + sum_digits_twoparts(second)\n\n#assert sum_digits_twoparts(35)==17\n\n#sum_digits_twoparts(12345)\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\nimport sys\n\ndef sum_digits_twoparts(num):\n    if num < 0:\n        print(\"invalid number\")\n    else:\n        sum = 0\n        for i in range(10):\n            count = 0\n            while num >= 10:\n                sum += num % 10\n                num = num // 10\n                count += 1\n            sum += num\n            if count > 1:\n                break\n        print(sum)\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    n = str(num)\n    sum_l = 0\n    sum_r = 0\n    for i in range(len(n)//2):\n        sum_l += int(n[i])\n        sum_r += int(n[len(n)//2+i])\n    if sum_l>sum_r:\n        return sum_l\n    else:\n        return sum_r", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(x):\n    return sum(i for i in str(x))\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    new = 0\n    i = num\n    while(i>0):\n        n = i % 10\n        new += n\n        i = i // 10\n    return new\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    l = []\n    for i in range(len(str(num))):\n        l.append(int(str(num)[i]))\n    return max(l) * (len(str(num)) - 1) + sum(l)", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(number):\n    import math\n    lis = []\n    number = int(number)\n    while number != 0:\n        lis.append(number%10)\n        number = int(number/10)\n    return math.max(lis)\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\nfrom __future__ import print_function\n\n\ndef longest_subseq_with_diff_one(arr, n):\n    dp = [[0] * n for i in range(n)]\n    max_length = 0\n\n    for i in range(n - 1):\n        if arr[i] + 1 == arr[i + 1]:\n            dp[i][i + 1] = 1\n            max_length = max(max_length, 1)\n        elif arr[i] + 1 == arr[i + 1]:\n            dp[i][i + 1] = 1\n            max_length = max(max_length, 1)\n            dp[i][i + 1] = dp[i][i - 1] + 1\n            max_length = max(max_length, dp[i][i + 1])\n        else:\n            dp[i][i + 1] = dp[i][i - 1] + 1\n            max_length = max(max_length, dp[i][i + 1])\n    return max_length\n\n\ndef longest_subseq_with_diff_one_v2(arr, n):\n    dp = [[0] * n for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(1, n):\n            if arr[i] + 1 == arr[j]:\n                dp[i][j] = dp[i][j - 1] + 1\n                break\n    max_length = 0\n\n    for i in range(n - 1):\n        max_length = max(max_length, dp[i][i + 1])\n\n    return max_length\n\n\ndef longest_subseq_with_diff_one_v3(arr, n):\n    dp = [0] * n\n    dp[0] = 1\n    max_length = 0\n    for i in range(n - 1):\n        if arr[", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\nfrom typing import List\n\ndef longest_subseq_with_diff_one(arr: List[int], d: int) -> int:\n    start, end = 0, 0\n    for i in range(len(arr)):\n        if arr[i] >= d:\n            end = i\n        else:\n            if i == end:\n                if arr[i] == 1:\n                    end = i+1\n                else:\n                    end = i\n            else:\n                start = end\n                end = i+1\n    return end - start\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(array, limit):\n    if len(array) == 0:\n        return 0\n    result = [array[0]]\n    if array[1] - array[0] == 1:\n        result.append(array[1])\n    for i in range(2, len(array)):\n        if array[i] - array[i-1] == 1 and len(result) < limit:\n            result.append(array[i])\n        elif array[i] - array[i-1] == 1 and len(result) == limit:\n            result.append(array[i])\n            break\n        elif array[i] - array[i-1] != 1:\n            result = [array[i]]\n    return len(result)\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\nimport numpy as np\n\n\ndef longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    Find the longest subsequence with difference of one in an array.\n\n    Time Complexity = O(n^2)\n    Space Complexity = O(n^2)\n\n    Parameters\n    ----------\n    arr : list\n        Input array.\n    n : int\n        Size of the array.\n\n    Returns\n    -------\n    int\n        The length of the longest subsequence with difference of one.\n    \"\"\"\n    if n <= 0:\n        return 0\n    dp = np.zeros((n, n), dtype=int)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j] and (arr[i] - arr[j] == 1 or arr[j] - arr[i] == 1):\n                dp[i][j] = dp[i][j - 1] + 1\n                if dp[i][j] > dp[i][j - 1] + dp[i - 1][j]:\n                    dp[i][j] = dp[i][j - 1] + 1\n    return dp[n - 1][n - 1]\n\n\ndef longest_subseq_with_diff_one2(arr, n):\n    \"\"\"\n    Find the longest subsequence with difference of one in an array.\n\n    Time Complexity = O(n^2)\n    Space Complexity = O(n^2)\n\n    Parameters\n    ----------\n    arr : list\n        Input array.\n    n : int\n        Size of the array.\n\n    Returns\n    -------\n    int\n        The length of the longest subsequence with difference of one.\n    \"\"\"\n    if n <= 0:\n        return 0\n    dp = np.zeros((n, n), dtype=int)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i - 1][j],", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    Time: O(nlogn)\n    Space: O(1)\n    \"\"\"\n    # Start from first element\n    seq = [arr[0]]\n    for i in range(1, len(arr)):\n        # If the current element is the last element of the sequence\n        if seq[-1] == arr[i]:\n            # Add the current element to the sequence\n            seq.append(arr[i])\n        # If the current element is different from the last element of the sequence\n        elif seq[-1] != arr[i]:\n            # If the next element is one larger, add the current element to the sequence\n            if arr[i] == arr[i + 1] - 1:\n                seq.append(arr[i])\n            # If the next element is one smaller, add the current element to the sequence\n            elif arr[i] == arr[i + 1] + 1:\n                seq.append(arr[i])\n            # If the next element is one larger, then keep the current element in the sequence\n            else:\n                # If the next element is one smaller, add the current element to the sequence\n                if arr[i + 1] == arr[i] - 1:\n                    seq.append(arr[i])\n                # If the next element is one larger, add the current element to the sequence\n                elif arr[i + 1] == arr[i] + 1:\n                    seq.append(arr[i])\n                # If the next element is one larger, then keep the current element in the sequence\n                else:\n                    seq.append(arr[i])\n    return len(seq) - 1\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, diff_one):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif arr[i] == arr[j] + 1:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j-1]\n            elif arr[i] == arr[j] - 1:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n    print(dp)\n    return dp[n-1][n-1]", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\n# def longest_subseq_with_diff_one(array, target_sum):\n#     # Write your code here.\n#     pass\n\n# print(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, diff):\n    # A list to store the indices of all items in the subsequence\n    seq = [0]\n    # A dictionary to store the length of each subsequence\n    subseq_len = {0: 1}\n    # Traverse all elements of array\n    for i in range(1, len(arr)):\n        # If current element is not present in the subsequence then\n        if arr[i] not in seq:\n            # Append current element to the subsequence and update its length\n            seq.append(arr[i])\n            subseq_len[i] = subseq_len[i - 1] + 1\n        # Else if current element is present in the subsequence then\n        else:\n            # Traverse the subsequence backwards to find the rightmost element\n            j = 0\n            while arr[i] != seq[j]:\n                j += 1\n            # Check if the difference between current element and its rightmost neighbour\n            # is 1\n            if arr[i] - seq[j] == 1:\n                # Increment the length of the subsequence\n                subseq_len[i] = subseq_len[j] + 1\n            # Else update the subsequence\n            else:\n                seq[j] = arr[i]\n                subseq_len[i] = subseq_len[j] + 1\n    # Find the max length of the subsequence\n    max_len = 0\n    for k in subseq_len:\n        max_len = max(subseq_len[k], max_len)\n    return max_len\n\n\n# Driver Code\narr = [1, 2, 3, 4, 5, 3, 2]\nn = len(arr)\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    for i in range(n):\n        if i > 0 and arr[i] - arr[i - 1] != 1:\n            return i - 1\n    return i\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom collections import defaultdict\n\ndef longest_subseq_with_diff_one(arr, n):\n    max_len = 0\n    sub_len = 0\n    count = defaultdict(int)\n    for i in range(n):\n        count[arr[i]] += 1\n\n    # print(count)\n    for k in count.keys():\n        if count[k] >= 2:\n            sub_len = i\n            break\n\n    # print(sub_len)\n    for i in range(sub_len + 1, n):\n        if count[arr[i]] >= 2:\n            max_len = max(max_len, i - sub_len)\n            break\n\n    return max_len\n\n\ndef main():\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        arr = list(map(int, input().strip().split()))\n        ans = longest_subseq_with_diff_one(arr, n)\n        print(ans)\n        t -= 1\n\nmain()"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(x,y,z):\n    # Write your code here\n    for i in range(1,10):\n        if i==x or i==y or i==z:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,c):\n    if a%3==0 and b%3==0 and c%3==0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n# solution\ndef does_Contain_B(start, step, value):\n    if step == 0:\n        return False\n    if start <= value <= step:\n        return True\n    elif start > value:\n        return does_Contain_B(start+step, step, value)\n    else:\n        return does_Contain_B(start, step, value)\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(num,x,n):\n    if(x == 0):\n        return True\n    if(x < num):\n        return False\n    if(x == num):\n        if(n % 2 == 0):\n            return False\n        else:\n            return True\n    else:\n        return does_Contain_B(num,x-1,n)\n\nnum = int(input(\"Enter the number: \"))\nx = int(input(\"Enter the number to be checked: \"))\nn = int(input(\"Enter the index to start searching for the number: \"))\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(number,start,step):\n    flag = False\n    while(start <= number):\n        if(start == number):\n            flag = True\n        start = start + step\n    return flag\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n#driver code\n\ndef does_Contain_B(n1,n2,n3):\n\n    if n3%n1==0 and n3%n2==0:\n        return True\n    else:\n        return False\n\n#test case\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,n):\n    for i in range(1,n+1):\n        if i%b==0 and i%a!=0:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(num1,num2,n):\n    return n.count(num1) != n.count(num2)\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n#numbers = [0,1,2,3,4,5,6,7,8,9]\n#numbers = list(range(10))\nnumbers = list(range(100))\ndef does_Contain_B(A,B,numbers):\n    if B not in numbers:\n        return False\n    i = 0\n    while i <= len(numbers):\n        if numbers[i] == B:\n            if A == numbers[i]:\n                return True\n        i+=1\n    return False\n\n#if __name__ == \"__main__\":\n#    assert does_Contain_B(1,7,numbers) == True\n\n# Write a python function to find the index of the first number, from the infinite sequence that is divisible by 5.", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a, b, c):\n    if c == b+a:\n        return True\n    else:\n        return False\n\ndef main():\n    a = int(input(\"Enter a number : \"))\n    b = int(input(\"Enter b number : \"))\n    c = int(input(\"Enter c number : \"))\n    print(\"Number %d is present in the infinite sequence \" %(c) if does_Contain_B(a, b, c) else \"Number %d is not present in the infinite sequence\" %(c))\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a, b):\n    if b==0:\n        return False\n    elif a%b==0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1, num2):\n    if num1 == num2:\n        return True\n    for i in range(2, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n# function body\n\n# TODO: Write your function here.\ndef is_coprime(a,b):\n    while b!=0:\n        if(a % b == 0):\n            return False\n        a,b=b,a%b\n    return True\n\n# TODO: Write your test cases here.", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(n, p):\n    if n % p == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(x,y):\n    '''\n    Function to check if the given number is co-prime or not.\n    '''\n    # base case\n    if x == 1 or y == 1:\n        return False\n    # if x and y are same, then the number is coprime\n    if x == y:\n        return True\n    # otherwise, the numbers are not coprime\n    return is_coprime(x-y,y) or is_coprime(x,y-x)\n\n# Driver code", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a>b:\n        a,b = b,a\n    gcd = 1\n    for i in range(2,a+1):\n        if a % i == 0 and b % i == 0:\n            gcd = i\n            break\n    if gcd == 1:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(x,y):\n    if x == 0 or y == 0 or x == 1 or y == 1:\n        return False\n    else:\n        for i in range(2, min(x,y)):\n            if x % i == 0 and y % i == 0:\n                return False\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n# Solution\ndef is_coprime(x, y):\n    for i in range(2, x+1):\n        if (x % i == 0 and y % i == 0):\n            return False\n    return True\n\n# Testing", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef gcd(a,b):\n    while b!=0:\n        a,b = b,a%b\n    return a\n\ndef lcm(a,b):\n    return a * b / gcd(a,b)\n\ndef is_coprime(a,b):\n    return gcd(a,b)==1\n\ndef main():\n    print(\"Test case 1\")\n    assert is_coprime(17,13) == True\n    print(\"Test case 2\")\n    assert is_coprime(17,17) == True\n    print(\"Test case 3\")\n    assert is_coprime(17,18) == False\n    print(\"Test case 4\")\n    assert is_coprime(17,19) == False\n    print(\"Test case 5\")\n    assert is_coprime(17,20) == True\n    print(\"Test case 6\")\n    assert is_coprime(17,170) == False\n    print(\"Test case 7\")\n    assert is_coprime(17,171) == True\n    print(\"Test case 8\")\n    assert is_coprime(17,172) == False\n    print(\"Test case 9\")\n    assert is_coprime(17,173) == True\n    print(\"Test case 10\")\n    assert is_coprime(17,174) == False\n\nmain()"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(array):\n    _merge_sort(array, 0, len(array) - 1)\n    return array\n\ndef _merge_sort(array, left, right):\n    if left < right:\n        mid = (left + right) // 2\n        _merge_sort(array, left, mid)\n        _merge_sort(array, mid + 1, right)\n        _merge(array, left, mid, right)\n\ndef _merge(array, left, mid, right):\n    i, j, k = left, mid + 1, left\n\n    temp = []\n    while i <= mid and j <= right:\n        if array[i] < array[j]:\n            temp.append(array[i])\n            i += 1\n        else:\n            temp.append(array[j])\n            j += 1\n\n    while i <= mid:\n        temp.append(array[i])\n        i += 1\n\n    while j <= right:\n        temp.append(array[j])\n        j += 1\n\n    for index in range(len(temp)):\n        array[left + index] = temp[index]\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(a):\n    def merge(a, start_index, middle_index, end_index):\n        left_sub_array = a[start_index:middle_index]\n        right_sub_array = a[middle_index+1:end_index]\n        left_sub_array.reverse()\n\n        i = j = 0\n        for k in range(start_index, end_index):\n            if i == len(left_sub_array):\n                a[k] = right_sub_array[j]\n                j += 1\n            elif j == len(right_sub_array):\n                a[k] = left_sub_array[i]\n                i += 1\n            elif left_sub_array[i] > right_sub_array[j]:\n                a[k] = right_sub_array[j]\n                j += 1\n            else:\n                a[k] = left_sub_array[i]\n                i += 1\n\n    if len(a) > 1:\n        middle_index = len(a) // 2\n        merge_sort(a, 0, middle_index-1, middle_index)\n        merge_sort(a, middle_index, middle_index, len(a)-1)\n        merge(a, 0, middle_index-1, len(a)-1)\n    return a\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nfrom typing import List\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Merge sort\"\"\"\n    if len(array) <= 1:\n        return array\n\n    left = merge_sort(array[:len(array) // 2])\n    right = merge_sort(array[len(array) // 2:])\n\n    return merge(left, right)\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Merge the sorted lists\"\"\"\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(array):\n\tif len(array) <= 1:\n\t\treturn array\n\tmid = len(array) // 2\n\tleft = merge_sort(array[:mid])\n\tright = merge_sort(array[mid:])\n\treturn merge(left, right)\n\ndef merge(left, right):\n\ti = 0\n\tj = 0\n\tsorted_array = []\n\twhile i < len(left) and j < len(right):\n\t\tif left[i] <= right[j]:\n\t\t\tsorted_array.append(left[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted_array.append(right[j])\n\t\t\tj += 1\n\tif i == len(left):\n\t\tsorted_array.extend(right[j:])\n\telse:\n\t\tsorted_array.extend(left[i:])\n\treturn sorted_array", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge(l1, l2):\n    l = []\n    i = j = k = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            l.append(l1[i])\n            i += 1\n        else:\n            l.append(l2[j])\n            j += 1\n    while i < len(l1):\n        l.append(l1[i])\n        i += 1\n    while j < len(l2):\n        l.append(l2[j])\n        j += 1\n    return l\n\ndef merge_sort(l):\n    if len(l) > 1:\n        m = len(l) // 2\n        l1 = merge_sort(l[:m])\n        l2 = merge_sort(l[m:])\n        return merge(l1, l2)\n    else:\n        return l\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(array):\n    if len(array) <= 1:\n        return array\n    else:\n        middle = len(array)//2\n        left = merge_sort(array[:middle])\n        right = merge_sort(array[middle:])\n\n        return merge(left, right)\n\ndef merge(left, right):\n    result = []\n\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    return result + left[i:] + right[j:]\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge(a, b):\n    \"\"\"\n    @param: a: the first part of the list\n    @param: b: the second part of the list\n    @return: the merged sorted list\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return a + b\n    if a[0] <= b[0]:\n        return [a[0]] + merge(a[1:], b)\n    else:\n        return [b[0]] + merge(a, b[1:])\n\ndef merge_sort(lst):\n    \"\"\"\n    @param: lst: the list to be sorted\n    @return: the sorted list\n    \"\"\"\n    if len(lst) <= 1:\n        return lst\n    mid = len(lst) / 2\n    return merge(merge_sort(lst[:mid]), merge_sort(lst[mid:]))\n\ndef test_merge_sort():\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert merge_sort([23, 12, 15, 18, 20, 5, 22, 19]) == [5, 12, 15, 18, 20, 22, 23, 19]", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(array):\n    if len(array) <= 1:\n        return array\n    middle_index = len(array) // 2\n    left = merge_sort(array[:middle_index])\n    right = merge_sort(array[middle_index:])\n    return merge(left, right)\n\ndef merge(left, right):\n    sorted_array = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            sorted_array.append(left[left_index])\n            left_index += 1\n        else:\n            sorted_array.append(right[right_index])\n            right_index += 1\n    return sorted_array + left[left_index:] + right[right_index:]\n\ndef main():\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge(left, right):\n    \"\"\"\n    Merges left and right sides of list in sorted order\n    \"\"\"\n    if len(left) == 0:\n        return right\n    if len(right) == 0:\n        return left\n    i = 0\n    j = 0\n    merged = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    return merged + left[i:] + right[j:]\n\n\ndef merge_sort(list_to_sort):\n    \"\"\"\n    Recursive function that sorts a list\n    \"\"\"\n    # Base case: the list is empty\n    if len(list_to_sort) == 0:\n        return list_to_sort\n\n    # Split the list into left and right halves\n    middle = len(list_to_sort)//2\n    left = list_to_sort[:middle]\n    right = list_to_sort[middle:]\n\n    # Recursively sort the left and right halves\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    # Merge sorted left and right halves\n    return merge(left, right)", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) < 2:\n        return arr\n    left = merge_sort(arr[:len(arr)//2])\n    right = merge_sort(arr[len(arr)//2:])\n    return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    while i < len(left):\n        merged.append(left[i])\n        i += 1\n    while j < len(right):\n        merged.append(right[j])\n        j += 1\n    return merged\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    \"\"\"Find the vertex of a parabola.\"\"\"\n    d = (b**2) - (4*a*c)\n    x1 = -b + d**0.5\n    x2 = -b - d**0.5\n    y = ((2*a*x1) + (b**2))/((2*a))\n    return (x1,y)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    \"\"\"Return the vertex of a parabola.\"\"\"\n    return (-b/(2*a), (c-(b**2)/(4*a**2))/(-2*a))\n\n\ndef test_parabola_vertex():\n    \"\"\"Test parabola_vertex.\"\"\"\n    assert parabola_vertex(5, 3, 2) == (-0.3, 1.55)\n\n# PARABOLA INVERSE", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nimport random\n\n\ndef parabola_vertex(a: int, b: int, c: int) -> tuple:\n    \"\"\"\n    Returns the vertex of the parabola with equation y=ax^2+bx+c\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return (-b / 2 / a, -(b**2 - 4 * a * c) / (4 * a))\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(ax,ay,bx,by):\n    x = (by*bx - ay*by)/(bx*bx - ay*by)\n    y = -(ax*bx - ay*bx)/(bx*bx - ay*by)\n    return (x,y)\n\ndef test_parabola_vertex():\n    assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    \"\"\"\n    You need to solve a quadratic equation: x^2=ax+b\n    You can solve it like this: \n        d = b**2 - 4*a*c\n        if d<0:\n            return \"parabola has no vertex\"\n        x1,x2 = (-b + d**0.5)/(2*a), (-b - d**0.5)/(2*a)\n        return x1,x2\n    \"\"\"\n    d = b**2 - 4*a*c\n    if d<0:\n        return \"parabola has no vertex\"\n    x1,x2 = (-b + d**0.5)/(2*a), (-b - d**0.5)/(2*a)\n    return x1,x2\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Returns the vertex of a parabola with equation\n    ax^2 + bx + c = 0.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = -b/2/a\n        x2 = -b/2/a + discriminant**0.5\n        return x1, x2\n    else:\n        return False\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    d = b**2 - 4 * a * c\n    if d == 0:\n        return (-b / (2 * a), -b / (2 * a))\n    x = (-b - d**0.5) / (2 * a)\n    y = (-b + d**0.5) / (2 * a)\n    return (x, y)", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n\tif c > 0:\n\t\treturn (-b/(2*a), -(b**2)/(4*a**2) + c/a)\n\telif c == 0:\n\t\treturn (-b/(2*a), None)\n\telse:\n\t\treturn None\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nfunction parabola_vertex(a::Real, b::Real, c::Real)\n    return (-b/(2*a), -(b^2)/(4*a*c))\nend", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    det=b**2-4*a*c\n    if det==0:\n        return (0, -b/2*a)\n    else:\n        x=(-b+det**0.5)/(2*a)\n        y=(-c+x**2)/(2*a)\n        return (x,y)\n\ndef test():\n    assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n    assert parabola_vertex(5,-3,2)==(-0.3, -1.55)\n\ntest()"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l, num):\n    if num >= len(l) or num < 0:\n        return 0\n    elif num == 0:\n        return l[0][0]\n    else:\n        return specified_element(l, num-1) + specified_element(l, num-2)\n\n# Tests", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, idx):\n    result = []\n    for row in lst:\n        result.append(row[idx])\n    return result\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst,n):\n    assert n<=len(lst)\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if n==j:\n                res.append(lst[i][j])\n    return res\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l, n):\n    result = []\n    for elem in l:\n        result.append(elem[n])\n    return result\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(a,index):\n    l=[]\n    for i in a:\n        l.append(i[index])\n    return l", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l, n):\n    return [l[i][n] for i in range(len(l))]\n\n\nl = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, elem):\n    return [row[elem] for row in matrix]", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, index):\n    l = []\n    for i in matrix:\n        l.append(i[index])\n    return l\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix,index):\n\treturn [row[index] for row in matrix]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(m, i):\n    result = []\n    for l in m:\n        result.append(l[i])\n    return result\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(n):\n    if(n < 0):\n        raise ValueError(\"number must be non-negative\")\n    if(n == 0):\n        return 0\n    bits = []\n    while n:\n        bit = n & 1\n        bits.append(bit)\n        n >>= 1\n    res = 0\n    for i in range(len(bits)):\n        if(bits[i] == 1):\n            res |= (1 << i)\n    return res\n\n# testing", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    return number ^ number >> 1\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(n):\n    return 0", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    Toggle all the even bits of a given number.\n\n    >>> even_bit_toggle_number(10)\n    0\n    >>> even_bit_toggle_number(31)\n    2\n    >>> even_bit_toggle_number(17)\n    15\n    \"\"\"\n\n    toggled = 0\n\n    while number:\n        toggled ^= number & 1\n        number = number >> 1\n\n    return toggled\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 0\n    assert even_bit_toggle_number(31) == 2\n    assert even_bit_toggle_number(17) == 15\n\ndef main():\n    for i in range(100):\n        test_even_bit_toggle_number()\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    '''\n    This function toggles all even bits of a given number.\n    '''\n    if num == 0:\n        return 0\n    if num & 1 == 0:\n        return even_bit_toggle_number(num >> 1) << 1\n    else:\n        return even_bit_toggle_number(num >> 1) << 1 | 1\n\n'''\nWrite a python function to toggle all bits of a given number.\n'''\ndef toggle_bit_number(num):\n    '''\n    This function toggles all bits of a given number.\n    '''\n    return num ^ 0xFFFFFFFFFFFFFFFF\n\n'''\nWrite a python function to toggle only the first bit of a given number.\n'''\ndef toggle_first_bit_number(num):\n    '''\n    This function toggles only the first bit of a given number.\n    '''\n    return num ^ 0x01\n\n'''\nWrite a python function to toggle the nth bit of a given number.\n'''\ndef toggle_nth_bit_number(num, n):\n    '''\n    This function toggles the nth bit of a given number.\n    '''\n    return num ^ (1 << n)\n\n'''\nWrite a python function to swap the first two bits of a given number.\n'''\ndef swap_first_two_bits(num):\n    '''\n    This function swaps the first two bits of a given number.\n    '''\n    return (num << 2) | (num >> 2)\n\n'''\nWrite a python function to swap the last two bits of a given number.\n'''\ndef swap_last_two_bits(num):\n    '''\n    This function swaps the last two bits of a given number.\n    '''\n    return (num >> 2) | (num << 2)\n\n'''\nWrite a python function to swap the middle two bits of a given number.\n'''\ndef swap_middle_two_bits(num):\n    '''\n    This function swaps the middle two bits of a given number.\n    '''\n    return (num >> 1) | (num << 1)\n\n'''\nWrite a python function to swap any two given bits of", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    n = int(n)\n    for i in range(1, len(bin(n))):\n        if bin(n)[i] == \"1\":\n            n ^= 1 << i\n    return n\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\nimport functools\n\n\ndef even_bit_toggle_number(num):\n    \"\"\"\n    >>> even_bit_toggle_number(10)\n    0\n    >>> even_bit_toggle_number(1)\n    1\n    \"\"\"\n\n    @functools.lru_cache(None)\n    def helper(x):\n        if x == 0:\n            return 0\n        return helper(x >> 1) ^ 1\n\n    return helper(num)\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    # your code goes here\n    return 0\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(x):\n    # code your code here\n    return None\n\n\n# For test", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n# Write your code here.\ndef even_bit_toggle_number(n:int):\n    n ^= n >> 1\n    n ^= n >> 2\n    n ^= n >> 4\n    n ^= n >> 8\n    n ^= n >> 16\n    return n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tuple_str_num):\n    try:\n        return tuple(map(int, tuple_str_num))\n    except:\n        return tuple_str_num\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(x):\n    if type(x) == tuple:\n        return tuple(map(int, map(str, x)))\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(string_tuple):\n    \"\"\"\n    :param string_tuple: A tuple of string values.\n    :return: The tuple of string values converted to a tuple of integer values.\n    \"\"\"\n    return tuple((int(item) for item in string_tuple))\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\n# Brute force method of converting tuple of strings to integers. This is the most expensive method\n#\n# def tuple_int_str(t):\n#     return (int(x) for x in t)\n\ndef tuple_int_str(t):\n    return (int(x) for x in t if x.isnumeric())\n\n# Method 2 - Using map function\n# def tuple_int_str(t):\n#     return tuple(int(x) for x in t if x.isnumeric())\n\n# Method 3 - Using list comprehension\n# def tuple_int_str(t):\n#     return [int(x) for x in t if x.isnumeric()]", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(x):\n    y = [tuple(int(v) for v in w) for w in x]\n    return y\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple(map(int,tup))\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple(int(i) for i in tup)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tuple):\n    for i in range(len(tuple)):\n        tuple[i] = (int(tuple[i][0]), int(tuple[i][1]))\n    return tuple\n\n#assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_str_int):\n    list_int=[]\n    for i in tuple_str_int:\n        list_int.append(int(i[0])+int(i[1])*10)\n    return tuple(list_int)\n\n# Enter the string\nstring = \"333,33\"\n\n# Calling the function"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    \"\"\"Encodes a list as a list of list-pairs\"\"\"\n    result = []\n    for pair in list(groupby(lst)):\n        result.append([len(pair[0]), pair[0][0]])\n    return result\n\n# assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(list_of_elements):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    Args:\n    list_of_elements (list): input list of elements\n    Returns:\n    list: encoded_list of elements\n    \"\"\"\n    encoded_list=[]\n    for element in list_of_elements:\n        if isinstance(element, (list, tuple)):\n            encoded_list.append(element)\n        elif isinstance(element, (int, float, bool)):\n            encoded_list.append([element])\n        else:\n            raise TypeError(\"Only numbers, lists, and tuples are allowed.\")\n\n    return encoded_list\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(numbers):\n    l=[]\n    for i in numbers:\n        if l and i == l[-1][0]:\n            l[-1][1]+=1\n        else:\n            l.append([i,1])\n    return l\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(L):\n    return [tuple(L),]\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    res = []\n    for i in lst:\n        if lst.count(i) > 1:\n            res.append([lst.count(i), i])\n        else:\n            res.append([1, i])\n    return res\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(arr):\n    result = []\n    for element in arr:\n        if type(element) == int or type(element) == float:\n            result.append([1, element])\n        else:\n            result.append([len(element), element[0]])\n    return result\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(a_list):\n    '''\n    Reflect the run-length encoding from a list.\n\n    >>> encode_list([1,1,2,3,4,4.3,5,1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    '''\n    pass", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(arr):\n    \"\"\"\n    >>> encode_list([1,1,2,3,4,4.3,5,1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if i == 0:\n            result.append([arr[i], 1])\n        elif arr[i] == arr[i-1]:\n            result[len(result)-1][1] += 1\n        else:\n            result.append([arr[i], 1])\n    return result\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(in_list):\n    out_list = []\n    count = 1\n    last_item = in_list[0]\n    for item in in_list[1:]:\n        if item==last_item:\n            count+=1\n        else:\n            out_list.append([count, item])\n            count = 1\n            last_item = item\n    out_list.append([count, item])\n    return out_list\n\ndef main():\n    in_list = [1,1,2,3,4,4.3,5,1]\n    print encode_list(in_list)\n\nmain()", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lis):\n    for i in range(len(lis)):\n        if i==len(lis)-1:\n            if lis[i] == lis[i-1]:\n                lis[i] = [2, lis[i-1]]\n        elif lis[i] == lis[i-1]:\n            lis[i] = [2, lis[i-1]]\n        elif lis[i] != lis[i-1]:\n            lis[i] = [1, lis[i]]\n        else:\n            continue\n    return lis\n\n# Example case\n# lis = [1,1,2,3,4,4.3,5,1]\n# print(encode_list(lis))\n\n\n# +"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, n, k):\n    count = 0\n    # your code here\n    for i in range(len(arr)):\n        if arr[i] == n:\n            count+=1\n    if count==k:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] == 2:\n            arr[i] = n\n        else:\n            arr[i] = 2\n    for i in range(len(arr)):\n        if arr[i] == n:\n            arr[i] = 2\n        else:\n            arr[i] = n\n    return 1 + min_Ops(arr, n, k)\n\n# min_Ops([2,2,2,2],4,3)\n\n# Write a python function to find the maximum value present in an array.\n\ndef max_Value(arr, k):\n    # your code here\n    for i in range(len(arr)):\n        if arr[i] > k:\n            return arr[i]\n\n# max_Value([2,2,2,2],2)", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, value):\n    m = max(arr)\n    n = len(arr)\n    if m==value:\n        return 0\n    elif m !=value:\n        #print(m,value)\n        for i in range(k,n):\n            if arr[i]!=value:\n                arr[i]=value\n                return 1+min_Ops(arr,k,value)\n        return k", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(nums, k, target):\n    n = len(nums)\n    arr = [0] * k\n    for i in range(k):\n        arr[i] = nums[i]\n\n    if nums == target:\n        return 0\n\n    for i in range(k, n):\n        arr.append(nums[i])\n        if nums == target:\n            return 0\n        for j in range(k-1, -1, -1):\n            arr[j] = nums[j]\n        if nums == target:\n            return 0\n\n    return 1\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,n):\n    if(k > n or k < 1):\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(i != j and arr[i] != arr[j]):\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return count\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# Write your code here\ndef min_Ops(arr, k, n):\n    if k < 2:\n        return k\n    if k == 2:\n        return min(arr)\n    a = arr[0]\n    for i in range(0, n):\n        if arr[i] != a:\n            k = min_Ops(arr, k-1, n)\n            return k\n    return 0\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, n, k):\n    ans = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            ans += min(arr[i], arr[i+1])\n        if k > 0:\n            arr[i] = arr[i+1]\n            k -= 1\n    return ans\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr, k, m):\n    # Code here\n    nums=list(set(arr))\n    #print(nums)\n    min_ops=0\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i]==i:\n            if nums[0]!=nums[i]:\n                min_ops+=abs(nums[i]-nums[0])\n                break\n    #print(min_ops)\n    for i in range(len(nums)):\n        if nums[i]==m:\n            if nums[0]!=nums[i]:\n                min_ops+=abs(nums[i]-nums[0])\n                break\n    for i in range(len(nums)):\n        if nums[i]==nums[-1]:\n            if nums[0]!=nums[i]:\n                min_ops+=abs(nums[i]-nums[0])\n                break\n    return min_ops\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,n):\n    arr.sort()\n    i=0\n    while i<k:\n        if(arr[0] != arr[n-1]):\n            arr[0] = (arr[0]+arr[n-1])//2\n            i+=1\n        else:\n            break\n    return i\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(nums,k,sum_):\n    if k==0:\n        return 0\n    ans = float('inf')\n    d = dict()\n    for i in range(len(nums)):\n        d[nums[i]] = d.get(nums[i],0)+1\n        if d[nums[i]]>k:\n            d[nums[i]] -= k\n            ans = min(ans, d[nums[i]]*nums[i])\n            k-=d[nums[i]]\n    return ans\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, n):\n    \"\"\"\n    :param arr: an array of integers\n    :param k: no of operations\n    :param n: size of array\n    :return: minimum no of operations\n    \"\"\"\n    # Write your code here\n    # let the length of array be len(arr)\n    len_arr = len(arr)\n    # lets say we have given n elements\n    # to make equal\n    # let's make a dp to make equal\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1,n+1):\n        if arr[i-1] < arr[0]:\n            # first case is that if\n            # array is sorted and then we have to swap\n            # first element to the end\n            dp[i] = dp[i-1] + 1\n        elif arr[i-1] > arr[n-1]:\n            # second case is that if\n            # array is sorted and then we have to swap\n            # last element to the beginning\n            dp[i] = dp[i-1] + 1\n        else:\n            # third case is that if\n            # array is sorted and then we have to swap\n            # first element to last element\n            dp[i] = dp[i-1]\n    # k is the number of operations\n    if k == 0:\n        return 0\n    # now we will make all elements equal\n    # so we have to swap k number of elements\n    # we will call min_ops function for that\n    # and return the minimum of them\n    for _ in range(k):\n        # we will make dp[i] = min(dp[i],dp[i-1])\n        for i in range(len_arr-1):\n            dp[i] = min(dp[i],dp[i+1])\n        # now we will increment dp[n]\n        # because we have to swap n elements\n        dp[len_arr-1] += 1\n    return dp[n]\n\n"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month==\"January\" and day<22:\n        return 'winter'\n    if month==\"February\" and day<22:\n        return 'winter'\n    if month==\"March\" and day<22:\n        return 'winter'\n    if month==\"April\" and day<22:\n        return 'spring'\n    if month==\"May\" and day<22:\n        return 'spring'\n    if month==\"June\" and day<22:\n        return 'summer'\n    if month==\"July\" and day<22:\n        return 'summer'\n    if month==\"August\" and day<22:\n        return 'summer'\n    if month==\"September\" and day<22:\n        return 'autumn'\n    if month==\"October\" and day<22:\n        return 'autumn'\n    if month==\"November\" and day<22:\n        return 'autumn'\n    if month==\"December\" and day<22:\n        return 'winter'", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if day < 22:\n        return 'winter'\n    elif 22 <= day < 30:\n        return 'winter'\n    elif 30 <= day < 32:\n        return 'winter'\n    elif 32 <= day < 36:\n        return 'spring'\n    elif 36 <= day < 40:\n        return 'spring'\n    elif 40 <= day < 44:\n        return 'spring'\n    elif 44 <= day < 50:\n        return 'summer'\n    elif 50 <= day < 59:\n        return 'summer'\n    elif 59 <= day < 62:\n        return 'summer'\n    elif 62 <= day < 67:\n        return 'fall'\n    elif 67 <= day < 73:\n        return 'fall'\n    elif 73 <= day < 81:\n        return 'fall'\n    else:\n        return 'winter'\n\n#print(month_season('January',21))", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in ['January','February']:\n        season = 'winter'\n    elif month in ['March','April','May']:\n        season = 'spring'\n    elif month in ['June','July','August']:\n        season = 'summer'\n    elif month in ['September','October','November']:\n        season = 'fall'\n    else:\n        season = 'winter'\n    return season\n\n#month, day = map(int, input().split())\n#print(month_season(month, day))", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\nimport re\n\n\ndef month_season(month, day):\n    if 1 <= day <= 21:\n        if month in ['March', 'April', 'May']:\n            return 'spring'\n        elif month in ['June', 'July', 'August']:\n            return 'summer'\n        elif month in ['September', 'October', 'November']:\n            return 'fall'\n        elif month == 'December':\n            return 'winter'\n    else:\n        return 'Invalid day'\n\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in ['January','February','March']:\n        return 'winter'\n    elif month in ['April','May','June']:\n        return 'summer'\n    elif month in ['July','August','September']:\n        return 'fall'\n    elif month in ['October','November','December']:\n        return 'winter'\n    else:\n        print('month not in January,February,March,April,May,June,July,August,September,October,November,December')\n        ", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    if month in ['January','February','March']:\n        season = 'winter'\n    elif month in ['April','May','June']:\n        season = 'spring'\n    elif month in ['July','August','September']:\n        season = 'summer'\n    else:\n        season = 'autumn'\n    return season\n\n\n# -\n\n# ## 10. Write a function to swap case of a string\n# assert swap_case('HELLO')=='hElLo'\n\ndef swap_case(string):\n    return string.swapcase()\n\n\n# ## 11. Write a function to find the number of occurrences of a given character in a string.\n# assert count_char('Raj', 'j')==3\n\ndef count_char(string,char):\n    return string.count(char)\n\n\n# ## 12. Write a function to return the index of the first occurrence of a given character in a string.\n# assert find_index('Raj', 'a')==0\n\ndef find_index(string,char):\n    return string.find(char)\n\n\n# ## 13. Write a function to return the index of the last occurrence of a given character in a string.\n# assert find_last_index('Raj', 'a')==1\n\ndef find_last_index(string,char):\n    return string.rfind(char)\n\n\n# ## 14. Write a function to remove the first occurrence of a character from a string.\n# assert remove_first_occurrence('Raj', 'a')=='Raj'\n\ndef remove_first_occurrence(string,char):\n    return string.replace(char,'')\n\n\n# ## 15. Write a function to remove the last occurrence of a character from a string.\n# assert remove_last_occurrence('Raj', 'a')=='Raj'\n\ndef remove_last_occurrence(string,char):\n    return string.replace(char,'')\n\n\n# ## 16. Write a function to replace all the occurrences of a character in a string with another.\n# assert replace_all_", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month==\"February\" or month==\"March\":\n        season='winter'\n    elif month==\"April\" or month==\"May\":\n        season='spring'\n    elif month==\"June\" or month==\"July\":\n        season='summer'\n    elif month==\"August\" or month==\"September\":\n        season='fall'\n    else:\n        season='winter'\n    return season", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n\tif month in ['January','February','March']:\n\t\tif day<=8:\n\t\t\treturn 'winter'\n\t\telse:\n\t\t\treturn 'spring'\n\telif month in ['April','May','June']:\n\t\tif day<=17:\n\t\t\treturn 'spring'\n\t\telse:\n\t\t\treturn 'summer'\n\telif month in ['July','August','September']:\n\t\tif day<=31:\n\t\t\treturn 'summer'\n\t\telse:\n\t\t\treturn 'autumn'\n\telif month in ['October','November','December']:\n\t\tif day<=17:\n\t\t\treturn 'autumn'\n\t\telse:\n\t\t\treturn 'winter'\n\telse:\n\t\treturn 'error'\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in ('January','February','March'):\n        if day < 21:\n            return 'winter'\n        elif 21 <= day < 31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month in ('April','May','June'):\n        if day < 31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month in ('July','August','September'):\n        if day < 31:\n            return 'summer'\n        else:\n            return 'fall'\n    elif month in ('October','November','December'):\n        if day < 30:\n            return 'summer'\n        else:\n            return 'fall'\n    else:\n        print(month + ' is wrong.')\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month==\"January\" or month==\"February\":\n        if day<=6:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month==\"March\" or month==\"April\":\n        if day<=31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month==\"May\" or month==\"June\":\n        if day<=31:\n            return 'summer'\n        else:\n            return 'fall'\n    else:\n        if day<=30:\n            return 'fall'\n        else:\n            return 'winter'\n\ndef main():\n    for i in range(1,13):\n        for j in range(1,32):\n            print(month_season(str(i),j))\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    if a == 0:\n        return 'y = ', n / b\n    if b == 0:\n        return 'x = ', n / a\n    x = n / a\n    y = n / b\n    return 'x = ', x, ', y = ', y\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nimport random\n\ndef solution(a, b, n):\n    \"\"\"Find solution for ax + by = n\n\n    Args:\n        a (int): first number\n        b (int): second number\n        n (int): number to be divided\n\n    Returns:\n        tuple: list of x and y\n    \"\"\"\n    x = 0\n    y = 0\n    while a*x + b*y != n:\n        x = random.randint(0, 100)\n        y = random.randint(0, 100)\n    return x, y", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    \"\"\"\n    Args:\n        a: int\n        b: int\n        n: int\n\n    Returns:\n        str: tuple (x, y)\n    \"\"\"\n\n    if n == 0:\n        return 'x = 0, y = 1'\n\n    x = 0\n    y = 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    return 'x = %d, y = %d' % (x, y)\n\n# Tests", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n\t\"\"\"\n\t:param a: a in ax + by = n\n\t:param b: b in ax + by = n\n\t:param n: n in ax + by = n\n\t:return: the pair (x, y) that satisfies ax + by = n\n\t\"\"\"\n\tif n % a == 0:\n\t\tx = n//a\n\t\ty = b\n\telse:\n\t\tx = -1\n\t\ty = -1\n\treturn 'x = ', x, ', y = ', y\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    A solution is found by solving the system of linear equations\n    \"\"\"\n    import numpy as np\n    import numpy.linalg as la\n    \n    # a and b need to be of the same length\n    if len(a) != len(b):\n        print('a and b need to be of the same length')\n        return None\n    \n    # Create a vector of all possible solutions\n    x_poss = np.arange(min(n, a))\n    y_poss = np.arange(min(n, b))\n    \n    # Create a matrix of the two equations\n    A = np.matrix(np.zeros((len(x_poss), 2)))\n    A[:, 0] = x_poss\n    A[:, 1] = y_poss\n    \n    # Solve the system\n    x, y = la.solve(A, np.array([n]))\n    \n    # Check if the solution is valid\n    if len(x) != 1:\n        print('invalid solution')\n        return None\n    if len(y) != 1:\n        print('invalid solution')\n        return None\n    \n    # Return the solution\n    return 'x = ' + str(x) + ', y = ' + str(y)", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = n/a\n    y = n/b\n    return x, y\n\n\ndef main():\n    a = 2\n    b = 3\n    n = 7\n    print solution(a, b, n)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nfrom typing import Tuple\n\n\ndef solution(a: int, b: int, n: int) -> Tuple[str, int, int]:\n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    :param a: a\n    :param b: b\n    :param n: n\n    :return: x and y\n    \"\"\"\n    x = (n - b) / a\n    y = n - a * x\n    return f'x = {x}, y = {y}'\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = n / a\n    y = n / b\n    return 'x = ', x, ', y = ', y", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = (n-a)/b\n    y = a + x*b\n    return ('x = ', x, ', y = ', y)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    \"\"\"\n    Finds x and y that satisfies ax + by = n.\n\n    :param a:\n    :param b:\n    :param n:\n    :return:\n    \"\"\"\n    x = n // a\n    y = n % a\n\n    return 'x = ', x, ', y = ', y\n\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(lst1, lst2):\n    for i in lst2:\n        if i in lst1:\n            lst1.remove(i)\n    return lst1\n\ndef test_remove_elements():\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\ndef test_remove_elements_empty():\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[])==[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef test_remove_elements_empty_list():\n    assert remove_elements([],[])==[]\n\ndef test_remove_elements_single():\n    assert remove_elements([1],[1])==[]\n\ndef test_remove_elements_both_empty():\n    assert remove_elements([],[])==[]\n    assert remove_elements([2, 3],[])==[2, 3]\n\ndef test_remove_elements_one_match():\n    assert remove_elements([1,2,3,4,5],[1])==[2, 3, 4, 5]\n\ndef test_remove_elements_multiple_match():\n    assert remove_elements([1,2,3,4,5],[1,3])==[2, 4, 5]\n\ndef test_remove_elements_one_match_case_sensitive():\n    assert remove_elements([1,2,3,4,5],[1,3,3])==[2, 4, 5]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(lst,n):\n    for element in n:\n        if element in lst:\n            lst.remove(element)\n    return lst\n\n\nlst=[1,2,3,4,5,6,7,8,9,10]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n# my code\ndef remove_elements(lst1,lst2):\n    l1 = set(lst1)\n    l2 = set(lst2)\n    result = list(l1.difference(l2))\n    return result\n\n# testing the code\nlst1 = [1,2,3,4,5,6,7,8,9,10]\nlst2 = [2,4,6,8]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\n# +\n# Solution 1\ndef remove_elements(a, b):\n    return [x for x in a if x not in b]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(a,b):\n    a = list(a)\n    for i in b:\n        try:\n            a.remove(i)\n        except ValueError:\n            pass\n    return a\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n\treturn list(filter(lambda x: x not in list2, list1))", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(li1, li2):\n    for i in range(len(li2)):\n        if li2[i] in li1:\n            li1.remove(li2[i])\n    return li1\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(a, b):\n    for x in b:\n        if x in a:\n            a.remove(x)\n    return a\n\n\n# +\nimport pytest\n\n@pytest.mark.parametrize(\"a, b, expected\", [\n    ([1,2,3,4,5,6,7,8,9,10],[2,4,6,8], [1, 3, 5, 7, 9, 10]),\n    ([1,2,3,4,5,6,7,8,9,10],[2,4,6,8,10], [1, 3, 5, 7, 9])\n])\ndef test_remove_elements(a, b, expected):\n    assert remove_elements(a, b)==expected\n    \ndef test_remove_elements_empty():\n    assert remove_elements([],[])==[]\n# -\n\n# ## 6. Write a function to find the nth number in the list.\n#\n# ### Expected Output:\n# Expected Output:\n#     1\n#     2\n#     3\n#     4\n#     5\n#     6\n#     7\n#     8\n#     9\n#     10\n#     11\n#     12\n#     13\n#     14\n#     15\n#     16\n#     17\n#     18\n#     19\n#     20\n#     21\n#     22\n#     23\n#     24\n#     25\n#     26\n#     27\n#     28\n#     29\n#     30\n#     31\n#     32\n#     33\n#     34\n#     35\n#     36\n#     37\n#     38\n#     39\n#     40\n#     41\n#     42", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\n# --START--\n\ndef remove_elements(lst,values):\n    return [val for val in lst if val not in values]\n\n# --END--\n\n\n# Test", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(arr, remove):\n    return list(filter(lambda x: x not in remove, arr))\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n==0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    series=0\n    for i in range(n,0,-1):\n        series+=i\n    return series", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    \"\"\"\n    n: int\n    >>> sum_series(100000)\n    5000000000\n    \"\"\"\n    s = 0\n    for x in range(n,0,-2):\n        s += x\n    return s\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\nimport math\ndef sum_series(n):\n    return int(str(n)[:math.floor(math.log10(n)/2)])*(int(str(n)[math.floor(math.log10(n)/2):])+1)//2", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    s=0\n    for i in range(n,0,-2):\n        s+=i\n    return s\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n == 1:\n        return 1\n    else:\n        return sum_series(n - 2) + n\n\n\n#This code is contributed by Abbas Rajan.", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    if n < 2:\n        return 0\n    result = 0\n    for i in range(n):\n        result = result + i\n    return result\n\n# 1 + 3 + 5 + 7... + (n-1) = n(n+1)/2\n\n\ndef sum_series2(n):\n    return int(n * (n + 1) / 2)\n\n\ndef sum_series3(n):\n    return sum(range(1, n+1))\n\n\ndef sum_series4(n):\n    return sum(range(n))\n\n# 1 + 2 + 3... + n = n(n+1)/2\n\n\ndef sum_series5(n):\n    return n*(n+1)/2\n\n\ndef sum_series6(n):\n    return sum(range(1, n+1))\n\n\ndef sum_series7(n):\n    return sum(range(n))\n\n# 1 + 2 + 3... + n = n(n+1)/2\n\n\ndef sum_series8(n):\n    return n*(n+1)/2\n\n\ndef sum_series9(n):\n    return sum(range(1, n+1))\n\n\ndef sum_series10(n):\n    return sum(range(n))", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(x):\n    if x == 0:\n        return 0\n    return (x*(x-1)//2) + sum_series(x-2)\n\ndef test_sum_series():\n    assert sum_series(6) == 12\n    assert sum_series(10) == 15\n    assert sum_series(12) == 16\n\ndef sum_series2(x):\n    return sum(i for i in range(1,x+1) if i%2==1)\n\ndef test_sum_series2():\n    assert sum_series2(6) == 12\n    assert sum_series2(10) == 15\n    assert sum_series2(12) == 16\n\ndef sum_series3(x):\n    return sum(i for i in range(x,0,-1) if i%2==1)\n\ndef test_sum_series3():\n    assert sum_series3(6) == 12\n    assert sum_series3(10) == 15\n    assert sum_series3(12) == 16\n\ndef sum_series4(x):\n    return sum(i for i in range(1,x+1) if i%2==1)\n\ndef test_sum_series4():\n    assert sum_series4(6) == 12\n    assert sum_series4(10) == 15\n    assert sum_series4(12) == 16\n\ndef sum_series5(x):\n    return sum(range(1,x+1,2))\n\ndef test_sum_series5():\n    assert sum_series5(6) == 12\n    assert sum_series5(10) == 15\n    assert sum_series5(12) == 16\n\ndef sum_series6(x):\n    return sum(range(x,0,-2))\n\ndef test_sum_series6():\n    assert sum_series6(6) == 12\n    assert sum_series6(", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    sum = 0\n    for i in range(n+1, n-2*n+1, -2):\n        sum += i\n    return sum\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n, s):\n    return (n * s ** 2) / (4 * math.tan(math.radians(s / 2)))\n\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,side):\n    \"\"\"\n    >>> area_polygon(4,20)==400.00000000000006\n    \"\"\"\n    return n*(side**2)/2\n\n\ndef area_circle(radius):\n    \"\"\"\n    >>> area_circle(4)==113.0973451327434\n    \"\"\"\n    return 3.14*radius*radius\n\ndef area_triangle(base,height):\n    \"\"\"\n    >>> area_triangle(4,5)==20.0\n    \"\"\"\n    return base*height/2\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    return (s**2)/((n**2) * math.tan(math.radians(180/n)))\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(sides,side_length):\n    return sides*side_length*side_length/2\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\nimport math\n\ndef area_polygon(n,r):\n    \"\"\"\n    This function calculates the area of a regular polygon,\n    given the number of sides and the radius of the inscribed circle.\n    \"\"\"\n    return math.pi * r**2 / float(n)\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,side):\n\treturn n*side*side/4.000000000000001\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(sides,length):\n    return (sides * length ** 2)/4\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\nimport math\n\ndef area_polygon(sides,side_length):\n    assert sides > 0\n    assert sides % 2 == 0\n    return math.pi*(side_length**2)/float(sides)\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(sides, side_length):\n    area = sides * side_length**2 / (4 * math.tan(math.pi / sides))\n    return area\n\nimport math", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\nimport math\n\ndef area_polygon(number_of_sides,side_length):\n    return math.pi*(side_length**2)/((number_of_sides+1)**2)\n\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(number, sum):\n    '''\n    Check if number is divisible by the sum of its divisors.\n    '''\n    return sum == sumDivisors(number)\n\ndef sumDivisors(number):\n    '''\n    Return the sum of divisors of number.\n    '''\n    divisors = set()\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.add(i)\n            divisors.add(number // i)\n    return sum(divisors)\n\n#assert areEquivalent(36,57) == False\n\n#assert areEquivalent(67,138) == True\n\ndef areEquivalent(number, sum):\n    '''\n    Check if number is divisible by the sum of its divisors.\n    '''\n    return sum == sumDivisors(number)\n\ndef sumDivisors(number):\n    '''\n    Return the sum of divisors of number.\n    '''\n    divisors = set()\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.add(i)\n            divisors.add(number // i)\n    return sum(divisors)\n\n#assert areEquivalent(36,57) == False\n\n#assert areEquivalent(67,138) == True", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n1,n2):\n    if sum(set(map(lambda x : int(x), [str(x) for x in range(1, int(n1) + 1)]))) != sum(set(map(lambda x : int(x), [str(x) for x in range(1, int(n2) + 1)]))):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n\ta = a-1\n\tb = b-1\n\tif(a == b):\n\t\treturn True\n\telse:\n\t\tfor i in range(2,a):\n\t\t\tif(a % i == 0):\n\t\t\t\tif(b % i == 0):\n\t\t\t\t\ta /= i\n\t\t\t\t\tb /= i\n\t\tfor i in range(2,b):\n\t\t\tif(b % i == 0):\n\t\t\t\tif(a % i == 0):\n\t\t\t\t\tb /= i\n\t\t\t\t\ta /= i\n\t\tif(a == b):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\ndef main():\n\tassert areEquivalent(36,57) == False\n\tassert areEquivalent(34,42) == True\n\tassert areEquivalent(2,3) == True\n\nmain()", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,a+1):\n        if a % i == 0:\n            sum1 += i\n    for j in range(1,b+1):\n        if b % j == 0:\n            sum2 += j\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n1,n2):\n    sum1 = 0\n    for i in range(1,n1+1):\n        if n1%i == 0:\n            sum1 = sum1 + i\n    sum2 = 0\n    for i in range(1,n2+1):\n        if n2%i == 0:\n            sum2 = sum2 + i\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    sum_a = sum(divisors(a))\n    sum_b = sum(divisors(b))\n    if sum_a == sum_b:\n        return True\n    else:\n        return False\n\ndef divisors(n):\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    return divs\n\n# Function to test areEquivalent\ndef test():\n    assert areEquivalent(10,100) == False\n    assert areEquivalent(18,168) == True\n    assert areEquivalent(36,57) == False\n    assert areEquivalent(72,48) == True\n\n# Test case\ntest()", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    suma = 0\n    sumb = 0\n    for i in range(1,a+1):\n        if a % i == 0:\n            suma += i\n        if b % i == 0:\n            sumb += i\n    if suma == sumb:\n        return True\n    return False", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    s=0\n    for i in range(1,a+1):\n        if(a%i==0):\n            s+=i\n    for i in range(1,b+1):\n        if(b%i==0):\n            s+=i\n    if(s==a+b):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\n# Divisors of a number\ndef divisors(n):\n    divisors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n# Sum of all the divisors of a number\ndef sumOfDivisors(n):\n    divisors = divisors(n)\n    return sum(divisors)\n\n# Function to check whether sum of divisors are same or not\ndef areEquivalent(a,b):\n    sumOfDivisorsA = sumOfDivisors(a)\n    sumOfDivisorsB = sumOfDivisors(b)\n    if sumOfDivisorsA == sumOfDivisorsB:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num1,num2):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,num1+1):\n        if num1%i==0:\n            sum1 += i\n    for i in range(1,num2+1):\n        if num2%i==0:\n            sum2 += i\n    return sum1 == sum2"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(input_str):\n    char_count = 0\n    input_str = input_str.lower()\n    for i in range(len(input_str)):\n        if input_str[i] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            char_count += 1\n    return char_count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    lower_dict = {}\n    upper_dict = {}\n    for char in string:\n        if char.isupper():\n            if char not in upper_dict:\n                upper_dict[char] = 1\n            else:\n                upper_dict[char] += 1\n        elif char.islower():\n            if char not in lower_dict:\n                lower_dict[char] = 1\n            else:\n                lower_dict[char] += 1\n        else:\n            pass\n    return upper_dict, lower_dict\n\ndef test_count_char_position():\n    string = \"xbcefg\"\n    upper_dict, lower_dict = count_char_position(string)\n    expected_upper_dict = {'B': 1, 'E': 1}\n    expected_lower_dict = {'b': 1, 'c': 1, 'e': 1, 'f': 1}\n    assert upper_dict == expected_upper_dict\n    assert lower_dict == expected_lower_dict\n\ndef test_count_char_position_empty_string():\n    string = \"\"\n    upper_dict, lower_dict = count_char_position(string)\n    expected_upper_dict = {}\n    expected_lower_dict = {}\n    assert upper_dict == expected_upper_dict\n    assert lower_dict == expected_lower_dict\n\ndef test_count_char_position_string_without_char():\n    string = \"x\"\n    upper_dict, lower_dict = count_char_position(string)\n    expected_upper_dict = {}\n    expected_lower_dict = {}\n    assert upper_dict == expected_upper_dict\n    assert lower_dict == expected_lower_dict\n\ndef test_count_char_position_string_with_char_in_only_one_case():\n    string = \"x\"\n    upper_dict, lower_dict = count_char_position(string)\n    expected_upper_dict = {}\n    expected_lower_dict = {}\n    assert upper_dict == expected_upper_dict\n    assert lower_dict == expected_lower_dict\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    lower_letter_count = 0\n    upper_letter_count = 0\n    for i in s:\n        if 97 <= ord(i) <= 122:\n            lower_letter_count += 1\n        elif 65 <= ord(i) <= 90:\n            upper_letter_count += 1\n\n    return lower_letter_count, upper_letter_count\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    res = {}\n    for ch in s:\n        pos = ord(ch) - ord('a')\n        if pos in res:\n            res[pos] += 1\n        else:\n            res[pos] = 1\n\n    return res\n\n\n# print(count_char_position(\"xbcefg\"))\n# print(count_char_position(\"aba\"))", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    char_list = string.split(\" \")\n    char_list = [x for x in char_list if len(x) > 0]\n    char_dict = {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"f\": 0, \"g\": 0, \"h\": 0, \"i\": 0, \"j\": 0, \"k\": 0, \"l\": 0, \"m\": 0, \"n\": 0, \"o\": 0, \"p\": 0, \"q\": 0, \"r\": 0, \"s\": 0, \"t\": 0, \"u\": 0, \"v\": 0, \"w\": 0, \"x\": 0, \"y\": 0, \"z\": 0}\n    for ch in char_list:\n        for i in range(len(ch)):\n            char_dict[ch[i]] += 1\n    return char_dict", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(str1):\n    char_pos_dict = {}\n    for char in str1:\n        if char.isupper():\n            char_pos_dict['upper'] = char_pos_dict.get('upper', 0) + 1\n        else:\n            char_pos_dict['lower'] = char_pos_dict.get('lower', 0) + 1\n    return char_pos_dict", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string: str) -> int:\n    count_dict = {}\n    for char in string:\n        if char.isalpha():\n            count_dict[char.lower()] = count_dict.get(char.lower(), 0) + 1\n            count_dict[char.upper()] = count_dict.get(char.upper(), 0) + 1\n    return len(count_dict)\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    return len(set(string.lower()) & set(string.upper()))", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(text):\n    return text.count(\"a\") + text.count(\"e\") + text.count(\"i\") + text.count(\"o\") + text.count(\"u\")", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    # Write your code here\n    temp = 0\n    for i in range(len(string)):\n        if string[i] >= 'a' and string[i] <= 'z':\n            temp += 1\n        if string[i] >= 'A' and string[i] <= 'Z':\n            temp += 1\n    return temp\n\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, key):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) % key == 0:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_pair(l,x):\n    res = 0\n    for i in range(len(l)-1):\n        if l[i]^l[i+1] == x and (l[i] & l[i+1]) == 0:\n            res+=1\n    return res\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(l,x):\n    n = len(l)\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if (l[i] ^ l[j])%2==0:\n                count += 1\n                break\n    return count\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,key):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] ^ key == key:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,xor):\n    pair_dict = {}\n    for i in range(len(arr)):\n        key = arr[i] ^ xor\n        if key not in pair_dict:\n            pair_dict[key] = 1\n        else:\n            pair_dict[key] += 1\n    #print(pair_dict)\n    for i in range(len(arr)):\n        key = arr[i] ^ xor\n        if key not in pair_dict:\n            pair_dict[key] = 1\n        else:\n            pair_dict[key] += 1\n    #print(pair_dict)\n    return pair_dict\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,number):\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    while i <= j:\n        if arr[i] ^ arr[j] == number:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] ^ arr[j] > number:\n            j -= 1\n        else:\n            i += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(list, value):\n    count = 0\n    for i in range(len(list)-1):\n        for j in range(i+1,len(list)):\n            if list[i] ^ list[j] == value:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,target):\n\n    count=0\n\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]^arr[j]==target):\n                count+=1\n\n    return count\n\n# Function to find odd pair\ndef find_odd_Pair(arr,target):\n\n    count=0\n\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]^arr[j]==target):\n                if(i+j%2):\n                    count+=1\n\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(a,b):\n    even_Pair = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] ^ a[j] == b:\n                if b % 2 == 0:\n                    even_Pair +=1\n    return even_Pair\n\n\n# def find_even_Pair(a,b):\n#     for i in range(len(a)):\n#         for j in range(i+1,len(a)):\n#             if a[i] ^ a[j] == b:\n#                 return i,j\n# def find_even_Pair(a,b):\n#     for i in range(len(a)):\n#         for j in range(i+1,len(a)):\n#             if a[i] ^ a[j] == b:\n#                 return a[i:i+2]\n# def find_even_Pair(a,b):\n#     for i in range(len(a)):\n#         for j in range(i+1,len(a)):\n#             if a[i] ^ a[j] == b:\n#                 return a[i],a[j]\n\na = [5,4,7,2,1]\nb = 5", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_pair(arr,odd):\n    count = 0\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] ^ arr[j] == odd:\n                count+=1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    # Complete this function\n    if n == 0:\n        return 1\n    a = n\n    while a % 2 != 0:\n        a //= 2\n    return a + 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    :param n: Integer\n    :return: integer\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return 2 ** ceil(log2(n))\n\n\ndef test_next_Power_Of_2():\n    \"\"\"\n    :return: None\n    \"\"\"\n    assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(1) == 2\n    assert next_Power_Of_2(2) == 4\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(4) == 16\n    assert next_Power_Of_2(5) == 32\n    assert next_Power_Of_2(6) == 64\n    assert next_Power_Of_2(7) == 128\n    assert next_Power_Of_2(8) == 256\n    assert next_Power_Of_2(9) == 512\n    assert next_Power_Of_2(10) == 1024\n    assert next_Power_Of_2(11) == 2048\n    assert next_Power_Of_2(12) == 4096\n    assert next_Power_Of_2(13) == 8192\n    assert next_Power_Of_2(14) == 16384\n    assert next_Power_Of_2(15) == 32768\n    assert next_Power_Of_2(16) == 65536\n    assert next_Power_Of_2(17) == 131072\n    assert next_Power_Of_2(18) == 262144\n    assert next_Power_Of_2(19) == 524288\n    assert next_Power_Of_2(20) == 1048576\n    assert next_Power_Of_2(2", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n# function definition\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    if n > 0:\n        n = n - 1\n        while (n & n - 1) != 0:\n            n = n >> 1\n        return n + 1\n    else:\n        return 0\n\n# Driver code", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    O(log(n)) runtime, O(1) space\n    \"\"\"\n    return (2**n - 1) << 1\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(x):\n    return x if x == 0 else next_Power_Of_2(x >> 1) << 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    :param n: number\n    :return: power of 2\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        i = 0\n        while n < 1 << i:\n            i += 1\n        return 1 << i", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n==0:\n        return 1\n    while(n & 1 == 0):\n        n = n >> 1\n    return (n + 1) | 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(num):\n    power = 0\n    while(2**power < num):\n        power += 1\n    return power + 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(x):\n    if x < 0:\n        return 0\n    result = 1\n    while result <= x:\n        result *= 2\n    return result\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(num):\n    if num == 0:\n        return 1\n    else:\n        return 2 << (num.bit_length() - 1)\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, num):\n    \"\"\"\n    Input:\n    arr: a list of numbers\n    num: a number\n\n    Output:\n    frequency of the number\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if num == arr[i]:\n            count += 1\n    return count\n\narr = [1,2,3]\nnum = 4", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(array, number):\n    count = 0\n    for i in array:\n        if i == number:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(a,x):\n    s=0\n    for i in range(len(a)):\n        if a[i]==x:\n            s+=1\n    return s\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(array,number):\n    count = 0\n    for i in array:\n        if i == number:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array, number):\n    result = 0\n    for i in array:\n        if i == number:\n            result += 1\n    return result\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, n):\n    l = len(arr)\n    flag = False\n    for i in range(l):\n        if arr[i] == n:\n            flag = True\n            break\n    return flag\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n# Write your code here\ndef frequency(arr,n):\n    count=0\n    for i in range(len(arr)):\n        if arr[i]==n:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, num):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == num:\n\t\t\treturn i+1\n\treturn 0", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(list,number):\n    if number in list:\n        return list.count(number)\n    return 0\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    num = 1\n    while num < n:\n        num = (2 * num) + 1\n    return num\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_pell(n - 2) + get_pell(n - 1)\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    n = n + 1\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_pell(n-2) + get_pell(n-1)\n\ndef test_get_pell():\n    assert get_pell(0) == 0\n    assert get_pell(1) == 1\n    assert get_pell(2) == 2\n    assert get_pell(3) == 5\n    assert get_pell(4) == 12\n    assert get_pell(5) == 29\n    assert get_pell(6) == 70\n    assert get_pell(7) == 169\n    assert get_pell(8) == 408\n    assert get_pell(9) == 985\n    assert get_pell(10) == 2378\n    assert get_pell(11) == 5741\n    assert get_pell(12) == 13863\n    assert get_pell(13) == 33637\n    assert get_pell(14) == 73274\n    assert get_pell(15) == 152369\n    assert get_pell(16) == 350348\n    assert get_pell(17) == 746345\n    assert get_pell(18) == 1536338\n    assert get_pell(19) == 3516321\n    assert get_pell(20) == 7476294\n    assert get_pell(21) == 15376277\n    assert get_pell(22) == 35176250\n    assert get_pell(23) == 74776223\n    assert get_pell(24) == 153776056\n    assert get_pell(2", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    p = 1\n    q = 2\n    for i in range(2, n):\n        p, q = q, q + p\n    return p", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return 2*get_pell(n-1) + 1", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    p = 1\n    for i in range(1,n):\n        p += 2 * p + 1\n    return p\n\n# assert get_pell(4) == 12", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Pell number sequence:\n\n    .. math::\n\n        p_n = 2(p_{n-1} + p_{n-2})\n\n    Parameters\n    ----------\n    n : int\n        Index of the pell number\n\n    Returns\n    -------\n    int\n        The nth pell number\n    \"\"\"\n    p0 = 0\n    p1 = 1\n    return 2*p0 + 2*p1\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nfrom __future__ import division\ndef get_pell(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 1:\n        return get_pell(n - 1) ** 2 - get_pell(n - 2) ** 2\n    else:\n        return get_pell(n - 1) ** 2 + get_pell(n - 2) ** 2\n\ndef get_pell2(n):\n    if n == 0:\n        return 0\n    else:\n        return get_pell2(n - 1) ** 2 - get_pell2(n - 2) ** 2\n\ndef get_pell3(n):\n    if n == 0:\n        return 0\n    else:\n        return get_pell3(n - 1) ** 2 + get_pell3(n - 2) ** 2\n\ndef get_pell4(n):\n    if n == 0:\n        return 0\n    else:\n        return get_pell4(n - 1) ** 2 + get_pell4(n - 2) ** 2", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    a = 1\n    b = 1\n    for i in range(n):\n        a, b = b, a+b\n    return a\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    result = 2\n    while n > 0:\n        result += result\n        n -= 1\n    return result\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(list, start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += list[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    sum_of_range = 0\n    for i in range(start, end):\n        sum_of_range += lst[i]\n    return sum_of_range\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(l, start, stop):\n    sum = 0\n    for i in range(start, stop+1):\n        sum += l[i]\n    return sum\n\ndef test_sum_range_list():\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n# this is a correct solution for this task\ndef sum_range_list(a,b,c):\n    sum=0\n    for i in range(b,c+1):\n        sum=sum+a[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(l,start,end):\n    return sum(l[start:end+1])", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(a, start, end):\n\treturn sum(a[start:end])\n\ndef test_sum_range_list():\n\tassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(l,s,e):\n    total = 0\n    for i in range(s,e+1):\n        total+=l[i]\n    return total\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(L,start,end):\n    sum = 0\n    for i in range(start,end+1):\n        sum += L[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\n# Approach 1: Brute Force Solution\n# Time complexity: O(n) - where n is the number of elements in the list.\n# Space complexity: O(1)\n\ndef sum_range_list(list_to_sum,start,end):\n    if (start > end):\n        return -1\n    else:\n        return sum(list_to_sum[start:end])\n\n# Approach 2: Slicing Solution\n# Time complexity: O(n) - where n is the number of elements in the list.\n# Space complexity: O(n)\n\ndef sum_range_list(list_to_sum,start,end):\n    return sum(list_to_sum[start:end])\n\n# Approach 3: New Solution\n# Time complexity: O(n) - where n is the number of elements in the list.\n# Space complexity: O(1)\n\ndef sum_range_list(list_to_sum,start,end):\n    return sum(list_to_sum[start:end+1]) - sum(list_to_sum[:start])", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(a, start, stop):\n    sum = 0\n    for i in range(start,stop):\n        sum += a[i]\n    return sum\n\ndef sum_range_list(a, start, stop):\n    return sum(a[start:stop])\n\ndef sum_range_list(a, start, stop):\n    s = 0\n    for i in range(start, stop):\n        s += a[i]\n    return s\n\ndef sum_range_list(a, start, stop):\n    sum = 0\n    for i in range(start, stop):\n        sum += a[i]\n    return sum\n\n# assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\na = [2,1,5,6,8,3,4,9,10,11,8,12]\nstart = 8\nstop = 10\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(size):\n    \"\"\"Find the perimeter of a pentagon\"\"\"\n    return 2*(3*size-5)\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(side):\n    \"\"\"\n    Calculates the perimeter of a pentagon with the given side length.\n    \"\"\"\n    return 5 * side * 2\n\n#Below is an example usage:\n\nimport math\n\ndef perimeter_pentagon(side):\n    \"\"\"\n    Calculates the perimeter of a pentagon with the given side length.\n    \"\"\"\n    return 5 * side * 2\n\n# Enter the side length\nside = 5\n\n# Calling the function", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\n# + deletable=false nbgrader={\"checksum\": \"1732417830a327840c949705427b9321\", \"grade\": false, \"grade_id\": \"cell-a324d7060023c6b1\", \"locked\": false, \"schema_version\": 1, \"solution\": true}\ndef perimeter_pentagon(side):\n    \"\"\"\n    Input:  Side of a pentagon\n    Output: Perimeter of a pentagon\n    \"\"\"\n    # side of pentagon\n    s = side\n    # Area of pentagon\n    A = (5*s**2)/4\n    # Perimeter of pentagon\n    P = 5*s\n    return P\n\n\n# + deletable=false editable=false nbgrader={\"checksum\": \"a3c214755f29f77057348b3a8526e87b\", \"grade\": true, \"grade_id\": \"cell-23ef806a46c7a423\", \"locked\": true, \"points\": 1, \"schema_version\": 1, \"solution\": false}", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\nimport math\n\n\ndef perimeter_pentagon(length):\n    \"\"\"\n    This function calculates the perimeter of a pentagon.\n    Parameters:\n        length(int): the length of the side\n    Returns:\n        perimeter of pentagon(int)\n    \"\"\"\n    side_perimeter = length * 5\n    perimeter = side_perimeter + (side_perimeter * 2)\n    return perimeter\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side):\n    return 5*side\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    return (n*(n-1))*(2*n+1)\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n    p = 2*n*math.pi + 5*math.sqrt(5)*n\n    return p\n\n#Below is an example usage:\n\nimport math\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n    p = 2*n*math.pi + 5*math.sqrt(5)*n\n    return p\n\n# Enter the number of vertices\nn = 5\n\n# Calling the function", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side_length):\n    return (5 * side_length) * 2\n\ndef test_perimeter_pentagon():\n    assert perimeter_pentagon(5)==25\n\ndef perimeter_hexagon(side_length):\n    return (6 * side_length) * 2\n\ndef test_perimeter_hexagon():\n    assert perimeter_hexagon(5)==30\n\ndef perimeter_triangular_parallelogram(base,height):\n    return 2*(base+height)\n\ndef test_perimeter_triangular_parallelogram():\n    assert perimeter_triangular_parallelogram(5,5)==15", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side):\n    \"\"\"\n    Return the perimeter of a pentagon of side length `side`\n    \"\"\"\n    return 10*side\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side):\n    \"\"\"\n    >>> perimeter_pentagon(5)\n    25\n    \"\"\"\n    return 5*side\n\ndef test_perimeter_pentagon():\n    assert perimeter_pentagon(5)==25"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    return len(string.split(\"std\"))\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str_to_find, str_to_search):\n    if str_to_find == \"\":\n        return 0\n    elif str_to_find in str_to_search:\n        return 1 + count_occurance(str_to_find[:-1], str_to_search)\n    else:\n        return count_occurance(str_to_find[:-1], str_to_search)\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    string = string.lower()\n    counter = 0\n    for char in string:\n        if char == \"s\" and string[counter+1] == \"t\" and string[counter+2] == \"d\":\n            counter += 3\n            counter = counter + 3\n            counter = counter + 3\n        counter += 1\n    return counter", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == 'std':\n            count += 1\n    return count\n\n\n# +", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] == \"s\" and string[i+1] == \"t\" and string[i+2] == \"d\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == 's':\n            if string[count+1] == 'd':\n                if string[count+2] == 't':\n                    count += 1\n                    if string[count+3] == 'd':\n                        count += 1\n                    else:\n                        return count\n            else:\n                return count\n            if string[count+3] == 'd':\n                return count\n    return count\n\n\n# print(count_occurance(\"letstdlenstdporstd\"))\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str):\n    count = 0\n    for i in range(len(str)-3):\n        if (str[i] == 's' and str[i+1] == 't' and str[i+2] == 'd'):\n            count = count + 1\n    return count\n\n# Second Solution\n\ndef count_occurance(str):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == 's' and str[i+1] == 't' and str[i+2] == 'd'):\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    l = len(str)\n    count = 0\n    for i in range(l):\n        if str[i] == \"std\":\n            count += 1\n    return count", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str):\n    str1 = str.split('std')\n    x = 0\n    if len(str1) == 1:\n        return 0\n    else:\n        for x in range(len(str1)):\n            if 'std' in str1[x]:\n                x += 1\n        return x\n\n# print(count_occurance(\"letstdlenstdporstd\"))\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == 'std':\n            count +=1\n    return count\ncount_occurance(\"letstdlenstdporstd\")"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\nimport re\n\ndef remove_splchar(s):\n    s = re.sub(r'[^a-zA-Z0-9]', '', s)\n    return s\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(my_str):\n    # my_str = my_str.strip()\n    my_str = re.sub('[^a-zA-Z0-9]',' ', my_str)\n    return my_str.strip()\n\n# print remove_splchar('python  @#&^%$*program123')\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(word):\n    \"\"\"\n    take word as input and replace all non-alphanumeric characters with blank\n    \"\"\"\n    # write your code here\n    return \"\".join(char for char in word if char.isalnum())\n\n#do some test case", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    str = str.lower()\n    str = ''.join([i for i in str if i.isalnum()])\n    return str", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\":\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"\\'\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\"*\", \"\")\n    return s\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(string):\n    return ''.join([x for x in string if x.isalnum()])\n\n\n# +", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\nimport re\ndef remove_splchar(text):\n    return re.sub(r'[^a-zA-Z0-9 ]','',text)\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    #remove the whole string and return an empty string\n    return \"\"\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(text):\n    result = ''.join(e for e in text if e.isalnum())\n    return result\n# Tests", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    str=str.replace(' ','')\n    str=str.replace('?','')\n    str=str.replace('!','')\n    str=str.replace(';','')\n    str=str.replace('}','')\n    str=str.replace('{','')\n    str=str.replace('[','')\n    str=str.replace(']','')\n    str=str.replace(',','')\n    str=str.replace('(','')\n    str=str.replace(')','')\n    str=str.replace('/','')\n    str=str.replace('\\\\','')\n    str=str.replace(')','')\n    str=str.replace('(','')\n    str=str.replace('-','')\n    str=str.replace('_','')\n    str=str.replace('.','')\n    str=str.replace(':','')\n    str=str.replace(':','')\n    str=str.replace('<','')\n    str=str.replace('>','')\n    str=str.replace('?','')\n    str=str.replace('$','')\n    str=str.replace('*','')\n    str=str.replace('%','')\n    str=str.replace('&','')\n    str=str.replace('^','')\n    str=str.replace('@','#')\n    str=str.replace('`','')\n    str=str.replace('@','')\n    str=str.replace('~','')\n    str=str.replace('=','')\n    str=str.replace('+=','')\n    str=str.replace('-=','')\n    str=str.replace('*=','')\n    str=str.replace('/=','')\n    str=str.replace('^=','')\n    str=str.replace('&=','')\n    str=str.replace('|=','')\n    str=str.replace('>>=','')\n    str=str.replace('<<=','')\n    str=str.replace('**=','')\n    str=str.replace('||=','')\n    str=str.replace('&&=','')\n    str=str.replace('~=','')\n    str=str.replace('+~','')\n   "], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    return {pair[0]:[] for pair in pairs}.update({pair[0]:pair[1] for pair in pairs})\n\ndef test_group_keyvalue():\n    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    pairs_dict = {}\n    for pair in pairs:\n        key = pair[0]\n        val = pair[1]\n        if key not in pairs_dict:\n            pairs_dict[key] = [val]\n        else:\n            pairs_dict[key].append(val)\n    return pairs_dict\n\n# A different way to do this is with a simple for loop\n\ndef group_keyvalue2(pairs):\n    pairs_dict = {}\n    for pair in pairs:\n        key = pair[0]\n        val = pair[1]\n        if key in pairs_dict:\n            pairs_dict[key].append(val)\n        else:\n            pairs_dict[key] = [val]\n    return pairs_dict\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    grouped = {}\n    for key, value in pairs:\n        if key not in grouped:\n            grouped[key] = []\n        grouped[key].append(value)\n    return grouped\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    d = {}\n    for key, value in pairs:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\npairs = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(seq):\n\tkeyvalue = {}\n\tfor key, value in seq:\n\t\tif key not in keyvalue.keys():\n\t\t\tkeyvalue[key] = [value]\n\t\telse:\n\t\t\tkeyvalue[key].append(value)\n\treturn keyvalue\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(key_value_pairs):\n    key_value_dict = {}\n    for k, v in key_value_pairs:\n        if k in key_value_dict:\n            key_value_dict[k].append(v)\n        else:\n            key_value_dict[k] = [v]\n    return key_value_dict\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(L):\n    \"\"\"\n    \u529f\u80fd\uff1a\u5bf9\u5e8f\u5217 L \u6309\u952e\u8fdb\u884c\u5206\u7ec4\uff0c\n    \u8f93\u5165\uff1a\u5e8f\u5217 L\uff0c\n    \u8f93\u51fa\uff1a\u952e\u7ec4\u6210\u7684\u5b57\u5178\n    \"\"\"\n    res = {}\n    for item in L:\n        key = item[0]\n        value = item[1]\n        if not key in res.keys():\n            res[key] = []\n        res[key].append(value)\n    return res\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(lst):\n    d = {}\n    for key, value in lst:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n# Print out the result", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    groups = {}\n    for pair in pairs:\n        key = pair[0]\n        value = pair[1]\n        if key not in groups:\n            groups[key] = [value]\n        else:\n            groups[key].append(value)\n    return groups\n\ndef test_group_keyvalue():\n    pairs = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]\n    assert group_keyvalue(pairs) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(pairs):\n    return {k: list(v) for k, v in groupby(pairs, itemgetter(0))}\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\n# +\ndef is_valid_parenthese(parentheses):\n    stack = []\n    for i in range(len(parentheses)):\n        if parentheses[i] == '(' or parentheses[i] == '[' or parentheses[i] == '{':\n            stack.append(parentheses[i])\n        elif parentheses[i] == ')':\n            if len(stack) == 0:\n                return False\n            if stack.pop() != '(':\n                return False\n        elif parentheses[i] == '}':\n            if len(stack) == 0:\n                return False\n            if stack.pop() != '{':\n                return False\n        elif parentheses[i] == ']':\n            if len(stack) == 0:\n                return False\n            if stack.pop() != '[':\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\n# Parens = ['(', ')', '{', '}', '[' ,' ']\n\n# def is_valid_parenthese(string):\n#     stack = []\n#     for char in string:\n#         if char in ['(', '{', '[']:\n#             stack.append(char)\n#         elif char in [')', '}', ']']:\n#             if not stack or (char == ')' and stack.pop() != '(') or \\\n#                 (char == '}' and stack.pop() != '{') or \\\n#                 (char == ']' and stack.pop() != '['):\n#                 return False\n#     return not stack\n\n\n# def is_valid_parenthese(string):\n#     try:\n#         for char in string:\n#             if char in ['(', '{', '[']:\n#                 pass\n#             elif char in [')', '}', ']']:\n#                 raise ValueError\n#     except ValueError:\n#         return False\n#     return True", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\nfrom collections import deque\ndef is_valid_parenthese(str):\n    if len(str) == 0:\n        return True\n    stack = deque()\n    for i in str:\n        if i in {'(','{','['}:\n            stack.append(i)\n        elif i in {')', '}', '}'}:\n            if len(stack) == 0 or stack.pop() != '{' and stack.pop() != '(' and stack.pop() != '[':\n                return False\n    return len(stack) == 0", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    open_parentheses = [\"(\", \"{\", \"[\"]\n    close_parentheses = [\")\", \"}\", \"]\"]\n    open_stack = []\n    for char in s:\n        if char in open_parentheses:\n            open_stack.append(char)\n        else:\n            if len(open_stack) == 0 or open_stack[-1] != close_parentheses[open_parentheses.index(char)]:\n                return False\n            open_stack.pop()\n    if len(open_stack) != 0:\n        return False\n    return True\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    if s==\"\":\n        return True\n    else:\n        n=len(s)\n        if s[n-1]==')' and s[n-2]==')' and s[n-3]==')' and s[n-4]==')':\n            return is_valid_parenthese(s[:n-4])\n        if s[n-1]==']' and s[n-2]==']' and s[n-3]==']' and s[n-4]==']':\n            return is_valid_parenthese(s[:n-4])\n        if s[n-1]=='}' and s[n-2]=='}' and s[n-3]=='}' and s[n-4]=='}':\n            return is_valid_parenthese(s[:n-4])\n        if s[n-1]=='(' and s[n-2]==')' and s[n-3]==')' and s[n-4]==')':\n            return is_valid_parenthese(s[:n-4])\n        if s[n-1]==']' and s[n-2]==')' and s[n-3]==')' and s[n-4]==']':\n            return is_valid_parenthese(s[:n-4])\n        if s[n-1]=='}' and s[n-2]==')' and s[n-3]==')' and s[n-4]=='}':\n            return is_valid_parenthese(s[:n-4])\n        if s[n-1]=='(' and s[n-2]==']' and s[n-3]==')' and s[n-4]==']':\n            return is_valid_parenthese(s[:n-4])\n        if s[n-1]==']' and s[n-2]=='}' and s[n-3]==')' and s[n-4]==']':\n            return is_valid_parenthese(s[:n-4])\n        if s[n-1]=='}' and s[n-2]==']' and s[n-3]==')", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\nfrom collections import Counter\n\ndef is_valid_parenthese(s):\n    parenthesises = {'{': '}', '(': ')', '[': ']', '<': '>'}\n    count = Counter(parenthesises[c] for c in s)\n    if len(s) % 2 == 0:\n        return not count.most_common(1)[0][1] == 0\n    else:\n        return not count.most_common()[-1][1] == 0\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(expression):\n    stack = []\n    for ch in expression:\n        if ch in \"({[]\":\n            stack.append(ch)\n        else:\n            if len(stack)>0 and ch == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif len(stack)>0 and ch == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            elif len(stack)>0 and ch == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if len(string) % 2 != 0:\n        return False\n    stack = []\n    for element in string:\n        if element == '(':\n            stack.append(element)\n        elif element == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    if len(stack) > 0:\n        return False\n    return True\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    # Write your code here\n    if len(string)==0:\n        return True\n    stack=[]\n    for ch in string:\n        if ch=='(' or ch=='{' or ch=='[':\n            stack.append(ch)\n        else:\n            if not stack:\n                return False\n            elif stack[-1]==')' and ch==']':\n                stack.pop()\n            elif stack[-1]=='}' and ch==']':\n                stack.pop()\n            elif stack[-1]==']' and ch==')':\n                stack.pop()\n            else:\n                return False\n    if len(stack)!=0:\n        return False\n    return True\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n\n    if len(string) % 2 == 1:\n        return False\n\n    for idx, char in enumerate(string):\n        if char == '(':\n            if idx == 0 or string[idx-1] not in '({[':\n                return False\n        elif char == ')':\n            if idx == 0 or string[idx-1] not in '({[':\n                return False\n        elif char == '[':\n            if idx == 0 or string[idx-1] not in '({[':\n                return False\n        elif char == ']':\n            if idx == 0 or string[idx-1] not in '({[':\n                return False\n        else:\n            return False\n\n    return True\n\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(base, height, angle):\n    perimeter = base + height*math.tan(angle)\n    return perimeter\n\ndef main():\n    base = input(\"Enter the base of the triangle: \")\n    height = input(\"Enter the height of the triangle: \")\n    angle = input(\"Enter the angle of the triangle (in radians): \")\n    perimeter = perimeter_triangle(base, height, angle)\n    print(\"The perimeter of the triangle is\",perimeter)\n\nmain()", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a, b, c):\n    return a + b + c\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    perimeter = (a + b + c)\n    return perimeter\n\nperimeter_triangle(10,20,30)\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    \"\"\"\n    Taken from the book Cracking the Coding Interview: 5th Edition (Chapter 4)\n    \"\"\"\n    assert type(a)==type(b)==type(c)==int\n    return a+b+c\n\ndef test_perimeter_triangle():\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(10", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(base, height):\n    return base + height\n\ndef test_perimeter_triangle():\n    assert perimeter_triangle(10,20)==30\n    assert perimeter_triangle(20,30)==50\n    assert perimeter_triangle(10,30)==40\n    assert perimeter_triangle(10,50)==60\n    assert perimeter_triangle(10,20)==30\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\nimport math\ndef perimeter_triangle(x,y,z):\n    \"\"\"\n    TODO: Complete the function.\n    \"\"\"\n    p = x + y + z\n    return p\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a, b, c):\n    return 2 * (a + b + c)\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef lcm(a,b):\n    lcm = a*b/gcd(a,b)\n    return lcm\n\ndef answer(min,max):\n    i = min\n    j = max\n    lcm = lcm(i,j)\n    lcm_range = [num for num in range(lcm+1) if num % i and num % j]\n    a,b = i,j\n\n    while b-a+1 > 0:\n        a = lcm_range[a]\n        b = lcm_range[b-1]\n        lcm = lcm(a,b)\n        lcm_range = [num for num in range(lcm+1) if num % i and num % j]\n\n    return a,b-1", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a, b):\n    \"\"\"\n    Finds the two integers whose lowest common multiple lies within the range a and b\n    \"\"\"\n    from fractions import gcd\n    for i in range(a,b):\n        for j in range(a,b):\n            if i != j:\n                if lcm(i,j) >= a and lcm(i,j) <= b:\n                    return (i, j)\n\n\ndef lcm(a,b):\n    \"\"\"\n    Finds the lowest common multiple of two integers\n    \"\"\"\n    return a * b // gcd(a,b)\n\n\ndef main():\n    \"\"\"\n    Demonstration of the functions\n    \"\"\"\n    print(answer(2,3))\n    print(lcm(4,5))\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\n# +\n#Approach 1\n\ndef findLCM(n1, n2):\n    gcd=n1\n    while gcd!=n2:\n        if(gcd>n1):\n            n1=gcd\n        else:\n            n2=gcd\n        gcd=gcd//gcd\n        \n    lcm=n1*n2\n    return lcm\n\ndef answer(a,b):\n    lcm=findLCM(a,b)\n    for i in range(a,b+1):\n        if(lcm%i==0):\n            return (i,lcm//i)\n    return 'No Solution'\n\nanswer(3,8)\n\n\n# +\n#Approach 2\n\ndef findLCM(n1, n2):\n    for i in range(2,n1):\n        if(n2%i==0 and n1%i==0):\n            return i*n2//i\n    return n1*n2//n1\n\ndef answer(a,b):\n    lcm=findLCM(a,b)\n    for i in range(a,b+1):\n        if(lcm%i==0):\n            return (i,lcm//i)\n    return 'No Solution'\n\nanswer(3,8)\n\n\n# +\n#Approach 3\n\ndef findLCM(n1, n2):\n    gcd=n1\n    while gcd!=n2:\n        if(gcd>n1):\n            n1=gcd\n        else:\n            n2=gcd\n        gcd=gcd//gcd\n        \n    lcm=n1*n2\n    return lcm\n\ndef answer(a,b):\n    lcm=findLCM(a,b)\n    for i in range(a,b+1):\n        if(lcm%i==0):\n            return (i,lcm//i)\n    return 'No Solution'\n\nanswer(3,8)\n# -\n\n#Approach 4\nlcm=a*b//gcd\nfor i in range(a,b+1):\n    if(lcm%i==0):\n        return (i,lcm//i)\n'No", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    for i in range(a,b+1):\n        if (i%a) == (i%b):\n            mcm = a*b/gcd(a,b)\n            if mcm <= b:\n                return (i,i*b/gcd(a,b))\n\ndef gcd(a,b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\ndef lcm(a,b):\n    return (a*b/gcd(a,b))\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\n#Find the smallest number of times a number can be divided by another\ndef lcm(x,y):\n    x = x//y\n    y = y//x\n    if x>y:\n        return x\n    else:\n        return y\n    \ndef answer(x,y):\n    n = lcm(x,y)\n    for i in range(x,y+1):\n        if n%i == 0:\n            return (i,i)\n    return (\"None\", \"None\")", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\n# answer function \ndef answer(low,high):\n    divisors = [x for x in range(1,high+1) if (high % x == 0) and (low % x == 0)]\n    LCM = divisors[0]\n    for i in range(1,len(divisors)):\n        LCM = divisors[i] if divisors[i] > LCM else LCM\n    return LCM,divisors.index(LCM)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nfrom math import gcd\nfrom math import lcm\n\ndef find_two_distinct_numbers(range_start,range_end):\n    lcm_start = lcm(range_start, range_end)\n    lcm_end = lcm(range_start, range_end)\n\n    for i in range(range_start, range_end):\n        if lcm(lcm_start, i) >= range_start and lcm(lcm_end, i) <= range_end:\n            return (lcm_start, i)\n        elif lcm(lcm_start, i) < range_start and lcm(lcm_end, i) > range_end:\n            return (i, lcm_end)\n\ndef main():\n    ans = find_two_distinct_numbers(3,8)\n    assert ans == (3,6)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(n, m):\n    while n != m:\n        if n > m:\n            if m % n == 0:\n                lcm = n * m\n                if lcm > m:\n                    return n, lcm\n            else:\n                m += 1\n        else:\n            if n % m == 0:\n                lcm = n * m\n                if lcm < m:\n                    return n, lcm\n            else:\n                n += 1\n    return n, m\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(lcm,u):\n    if lcm==0 or u==0:\n        return (lcm,u)\n    lcm_set = set([x for x in range(lcm,u+1) if x%lcm==0])\n    if len(lcm_set) == 0:\n        return (-1,-1)\n    elif len(lcm_set) == 1:\n        lcm_max = lcm_set.pop()\n        u_max = lcm_max*lcm\n        return (lcm_max,u_max)\n    else:\n        lcm_max = max(lcm_set)\n        u_max = lcm_max*lcm\n        return (lcm_max,u_max)"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, text):\n    literals_in_text = [literal for literal in literals if literal in text]\n    if literals_in_text:\n        return 'Matched!'\n    return 'Not matched!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    for literal in literals:\n        if literal in string:\n            return literal\n    return 'Not Found!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(list_of_literals,str_to_match):\n    \"\"\"\n    :param list_of_literals: A list of strings.\n    :param str_to_match: A string.\n    :return: The matched string or matched string.\n    \"\"\"\n    if list_of_literals:\n        for literal in list_of_literals:\n            if literal in str_to_match:\n                return 'Matched!'\n    return 'Not Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(to_find, string):\n    for i in to_find:\n        if i in string:\n            return(f'Matched! {i}')\n    return(f'Not Found! {to_find}')", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    for literal in literals:\n        if literal in string:\n            return \"Matched!\"\n    return \"Not Matched!\"\nstring_literals(['language'],'python language')", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(strings, text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    :param strings: list of strings\n    :param text: string to search\n    :return: \"Matched!\" if found all strings, otherwise \"Not Matched!\"\n    \"\"\"\n\n    if len(strings) == 0:\n        return 'Not Matched!'\n    elif text.find(strings[0]) >= 0:\n        return string_literals(strings[1:], text)\n    else:\n        return 'Not Matched!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n\t\"\"\"\n\t:param literals: a list of strings\n\t:param string: a string\n\t:return: if literals exist in the string, it returns a string, otherwise 'Unmatched!'\n\t\"\"\"\n\tfor literal in literals:\n\t\tif literal in string:\n\t\t\treturn 'Matched!'\n\treturn 'Unmatched!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(list_string, string):\n    if list_string in string:\n        return 'Matched!'\n    else:\n        return 'Not Found!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(list_of_strings,string):\n    for element in list_of_strings:\n        if element in string:\n            return \"Matched!\"\n    return \"Not Found\"\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\nimport re\n\ndef string_literals(lst, s):\n    matches = [match.start() for match in re.finditer(r'\"(.*?)\"', s)]\n    for string in lst:\n        if string in s:\n            return \"Matched!\"\n    return \"Not matched!\"\n\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num < 20:\n        if sum(num) == num:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\n#assert is_num_keith(14) == True\n#assert is_num_keith(21) == True\n#assert is_num_keith(20) == False\n#assert is_num_keith(22) == False", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n\n    if num < 2:\n        return False\n\n    sum = 0\n\n    while num > 0:\n        digit = num % 10\n        sum = sum + (digit ** 3)\n        num = num // 10\n\n    return (num == sum)\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# Approach :\n# This is a simple recursive algorithm that checks for even and odd numbers.\n# The function returns true if the number is a keith number.\n# We should check the number if it's odd and its first digit is 1, then we can check its subsequence recursively.\n# and the function returns false if the number is not a keith number.\n\ndef is_num_keith(num):\n    if not (type(num) is int and num > 0):\n        return False\n\n    if num % 2 == 0:\n        return is_num_keith(num // 2)\n    else:\n        return is_num_keith(num // 2) and (num % 10 == 1 or is_num_keith(num // 10))\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num % 2 == 0 and num % 3 == 0 and num % 5 == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num in keith_numbers:\n        return True\n    else:\n        return False\n\ndef is_num_happy(num):\n    divs = set(map(int, str(num)))\n    return (1 == len(divs - happy_numbers))\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(number):\n    if number % 2 == 0:\n        return True\n    else:\n        for i in range(3,number+1,2):\n            if number % i == 0:\n                return False\n        return True\n\n# test code", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# Solution\ndef is_num_keith(n):\n    if n == 1:\n        return True\n\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n    if n%2==0:\n        l = [i for i in range(2,n+1)]\n        l.remove(n)\n        l.append(n)\n        for i in l:\n            if n%i == 0:\n                return False\n    else:\n        return False\n    return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\nfrom math import sqrt\n\n\ndef is_num_keith(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n\n    m = 0\n    while n % 2 == 0:\n        n /= 2\n        m += 1\n\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n /= i\n            m += 1\n\n    return n == 1 or m % 2 == 0\n\n\n# test cases", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# solution\ndef is_num_keith(num):\n    # 0,1 and 2 are not keith numbers\n    if num == 0 or num == 1 or num == 2:\n        return False\n    \n    # all other numbers have an even number of digits\n    if len(str(num)) % 2 != 0:\n        return False\n    \n    # a number is keith if it is equal to 0b followed by the number of 0's in the number\n    # num is a binary number\n    num_binary = bin(num)[2:]\n\n    return num_binary == '0' * (len(num_binary) - num_binary.count('1'))"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    from math import sin, cos, sqrt, atan2, radians\n    # convert decimal degrees to radians \n    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    km = 6367 * c\n    return km\n\n# print(distance_lat_long(23.5,67.5,25.5,69.5))", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(latitude_1,longitude_1,latitude_2,longitude_2):\n    from math import radians, sin, cos, sqrt, asin, radians\n    lat1 = radians(latitude_1)\n    lon1 = radians(longitude_1)\n    lat2 = radians(latitude_2)\n    lon2 = radians(longitude_2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * asin(sqrt(a))\n    return c * 6367.00918\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(latitude1,longitude1,latitude2,longitude2):\n    \"\"\"\n    Args:\n       latitude1(float): Latitude of the first point\n       longitude1(float): Longitude of the first point\n       latitude2(float): Latitude of the second point\n       longitude2(float): Longitude of the second point\n    Returns:\n       float: Distance in metres\n    \"\"\"\n    radius = 6371 # Radius of \"earth\" in kilometers. Use 3956 for miles\n    dlat = radians(latitude2-latitude1) # deg2rad below\n    dlon = radians(longitude2-longitude1)\n    a = sin(dlat/2)**2 + cos(radians(latitude1)) * cos(radians(latitude2)) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    return c * radius\n\n# To calculate the distance\nlatitude1 = 23.5\nlongitude1 = 67.5\nlatitude2 = 25.5\nlongitude2 = 69.5\n\n# Calling the function\ndistance = distance_lat_long(latitude1,longitude1,latitude2,longitude2)\n\n# Printing the result", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Parameters:\n        lat1 (float): latitude of the first point\n        lon1 (float): longitude of the first point\n        lat2 (float): latitude of the second point\n        lon2 (float): longitude of the second point\n    Returns:\n        float: the distance between the two points in meters\n    \"\"\"\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = sin(dlat / 2) * sin(dlat / 2) + cos(lat1) * cos(lat2) * sin(dlon / 2) * sin(dlon / 2)\n    c = 2 * asin(sqrt(a))\n    return c * 6371.01 * 1000  # meters to kilometers\n\n\n# # Test\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    r = 6371000 # Radius of earth in m\n    return c * r\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    distance = math.sqrt((lon2-lon1)**2+(lat2-lat1)**2)\n    return distance\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\ndef distance_lat_long(lat1,long1,lat2,long2):\n    distance = math.sqrt(pow((lat2-lat1),2)+pow((long2-long1),2))\n    return distance\n\ndef test_distance_lat_long():\n    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\nimport math\n\ndef distance_lat_long(lat_1,lng_1,lat_2,lng_2):\n    \"\"\"Calculate distance between two points using latitude and longitude\n    input: latitudes and longitudes of the first and second points, in decimal degrees\n    output: distance in km\n    \"\"\"\n    radius = 6371  # km\n    dlat = lat_2 - lat_1\n    dlng = lng_2 - lng_1\n    a = math.sin(dlat/2)**2 + math.cos(lat_1) * math.cos(lat_2) * math.sin(dlng/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    return radius * c", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\n# First define a function to calculate distance using latitude and longitude\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    radius = 6371 # km\n    dlat = (lat2-lat1)*np.pi/180\n    dlon = (lon2-lon1)*np.pi/180\n    a = (np.sin(dlat/2)**2 +\n         np.cos(lat1)*np.cos(lat2)*np.sin(dlon/2)**2)\n    return radius * 2 * np.arcsin(np.sqrt(a))\n\nlat1 = 23.5\nlon1 = 67.5\nlat2 = 25.5\nlon2 = 69.5\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, long1, lat2, long2):\n    \"\"\" Calculate distance between two points using latitude and longitude \"\"\"\n    a = np.radians(lat2) - np.radians(lat1)\n    b = np.radians(long2) - np.radians(long1)\n    d = np.sin(a) ** 2 + np.cos(np.radians(lat1)) * np.cos(np.radians(lat2)) * np.sin(b) ** 2\n    d = np.degrees(np.arccos(d)) * 60 * 1.1515 * 1000\n    return d\n\n# Enter the latitude\nlat1 = 23.5\nlong1 = 67.5\nlat2 = 25.5\nlong2 = 69.5\n\n# Calling the function"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\nfrom typing import List\n\n\ndef common_prefix(strs: List[str], k: int) -> str:\n    \"\"\"\n    :param strs: list of strings\n    :param k: limit\n    :return: longest common prefix\n    \"\"\"\n    if k == 0:\n        return \"\"\n    pfx = strs[0][0:k]\n    for i in range(1, len(strs)):\n        if strs[i][0:k] != pfx:\n            return pfx[0:k-1]\n        if k == len(pfx):\n            break\n        else:\n            pfx += strs[i][k]\n    return pfx\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\nimport itertools\n\ndef common_prefix(strings, n):\n    prefix = \"\"\n    for i in range(min(len(string) for string in strings)):\n        c = itertools.chain.from_iterable((\n            string[i] if i < len(string) else ''\n            for string in strings))\n        if c:\n            prefix += c.pop()\n            break\n    return prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\nimport itertools\n\ndef common_prefix(strings, n):\n    \"\"\"\n    Find the longest common prefix from a list of strings.\n    :param strings: A list of strings.\n    :param n: The length of the longest common prefix.\n    :return: The longest common prefix.\n    \"\"\"\n    if not n <= len(strings):\n        return \"\"\n    if not strings:\n        return \"\"\n    if len(strings) == 1:\n        return strings[0]\n\n    # Use itertools.groupby to group all strings by the first n characters\n    #   in their values\n    for prefix, _ in itertools.groupby(sorted(strings)):\n        if len(list(prefix)) == n:\n            return prefix\n    return \"\"", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(arr, n):\n    # Write your code here.\n    result = ''\n    for i in range(n):\n        if not result:\n            result = arr[i]\n        else:\n            if arr[i] != result[0]:\n                return result\n            else:\n                result = result[1:]\n    return result\n\n# Test case 1:\n# arr = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"]\n# n = 4\n# Output: \"ta\"\n# Explanation: The longest common prefix is \"ta\".\n# Test case 2:\n# arr = [\"dog\", \"dogs\", \"doge\"]\n# n = 3\n# Output: \"d\"\n# Explanation: The longest common prefix is \"d\".\n# Test case 3:\n# arr = [\"o\", \"o\", \"o\", \"o\"]\n# n = 4\n# Output: \"o\"\n# Explanation: The longest common prefix is \"o\".\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\nfrom typing import List, Optional\n\n\ndef common_prefix(strings: List[str], m: int) -> str:\n    if not strings:\n        return \"\"\n\n    shortest_string = strings[0]\n    for string in strings[1:]:\n        shortest_string = shortest_string[:min(len(shortest_string), len(string))]\n        if shortest_string != string[:len(shortest_string)]:\n            return shortest_string[:min(len(shortest_string), len(string))]\n\n    return shortest_string[:len(shortest_string)]\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(words, n):\n    prefix = \"\"\n    for i in range(min(len(words[0]), len(words[1]), *map(len, words[2:n]))):\n        if words[0][i] != words[1][i] != words[2][i]:\n            break\n        prefix += words[0][i]\n    return prefix\n\n\ndef common_prefix_2(words, n):\n    for i in range(min(len(words[0]), len(words[1]), *map(len, words[2:n]))):\n        if words[0][i] != words[1][i] != words[2][i]:\n            return words[0][:i]\n\n\ndef common_prefix_3(words, n):\n    for i in range(min(len(words[0]), len(words[1]), *map(len, words[2:n]))):\n        if words[0][i] != words[1][i] != words[2][i]:\n            return words[0][:i]\n\n    return words[0]\n\n\ndef common_prefix_4(words, n):\n    for i in range(min(len(words[0]), len(words[1]), *map(len, words[2:n]))):\n        if words[0][i] != words[1][i] != words[2][i]:\n            return words[0][:i]\n\n\ndef common_prefix_5(words, n):\n    return words[0][:min([len(w) for w in words if w != words[0]])]\n\n\ndef common_prefix_6(words, n):\n    return words[0][:min([len(w) for w in words if w != words[0]])]\n\n\ndef common_prefix_7(words, n):\n    return words[0][:min(map(len, words))]\n\n\ndef common_prefix_8(words, n):\n    return words[0][:min(map(len, words))]\n\n\ndef common_prefix_9(words, n):\n    return words[0][:min(map", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n#my solution\ndef common_prefix(list_of_strings, length):\n    if length == 0:\n        return \"\"\n    if length == 1:\n        return list_of_strings[0]\n    for i in range(length):\n        all_letters = list(set(list_of_strings[0][i]))\n        for string in list_of_strings[1:]:\n            all_letters = all_letters & set(string[i])\n        if len(all_letters) != 1:\n            return list_of_strings[0][:i]\n    return list_of_strings[0]\n\n#an alternate solution\ndef common_prefix_alt(strings, length):\n    if not strings:\n        return ''\n    first = strings[0]\n    for i in range(1, len(first)):\n        first_letter = first[:i+1]\n        for string in strings[1:]:\n            if first_letter not in string:\n                first = first[:i]\n                break\n    return first\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    s = strings[0]\n    for i in range(1, n):\n        s = s[:len(s) - len(s.lstrip(strings[i]))]\n    return s\n\ndef common_prefix(strings):\n    return reduce(lambda x, y: x[:len(x) - len(x.lstrip(y))], strings, strings[0])\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strings, n):\n    for i in range(n):\n        if strings[0][i] != strings[1][i]:\n            return strings[0][:i]\n    return strings[0]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(words):\n\t\"\"\"\n\t:type words: List[str]\n\t:rtype: str\n\t\"\"\"\n\tans = words[0]\n\tfor w in words[1:]:\n\t\tfor i in range(len(ans)):\n\t\t\tif w[i] != ans[i]:\n\t\t\t\tbreak\n\t\telse:\n\t\t\tans = ans[:i+1]\n\treturn ans\n\n# Runtime: 128 ms\n# Memory Usage: 14.6 MB\n\ndef common_prefix(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: str\n    \"\"\"\n    if not words:\n        return \"\"\n    i = 0\n    for c in words[0]:\n        for word in words:\n            if not c == word[i]:\n                return word[:i]\n        i += 1\n    return word[:i]\n\n# Runtime: 128 ms\n# Memory Usage: 14.1 MB\n\ndef common_prefix(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: str\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n\n    l = len(words[0])\n    for i in range(l):\n        c = words[0][i]\n        for j in range(1, len(words)):\n            if words[j][i] != c:\n                return words[0][:i]\n    return words[0]\n\n\n# Runtime: 128 ms\n# Memory Usage: 13.4 MB\n\n# Runtime: 128 ms\n# Memory Usage: 13.6 MB\n\n# Runtime: 128 ms\n# Memory Usage: 13.4 MB\n\n# Runtime: 128 ms\n# Memory Usage: 13.6 MB"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(string):\n    regex_upper = re.compile('[A-Z]+')\n    regex_lower = re.compile('[a-z]+')\n    regex_special = re.compile('[^a-zA-Z0-9]+')\n    regex_numeric = re.compile('\\d+')\n    \n    list_upper = []\n    list_lower = []\n    list_special = []\n    list_numeric = []\n\n    if regex_upper.search(string):\n        list_upper = regex_upper.findall(string)\n    if regex_lower.search(string):\n        list_lower = regex_lower.findall(string)\n    if regex_special.search(string):\n        list_special = regex_special.findall(string)\n    if regex_numeric.search(string):\n        list_numeric = regex_numeric.findall(string)\n\n    return list_upper, list_lower, list_special, list_numeric", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(str):\n    string=re.sub(\"[a-zA-Z]\", \"\", str)\n    string=re.sub(\"[^a-zA-Z]\", \"\", string)\n    string=re.sub(\"[0-9]\", \"\", string)\n    return string.split()\n\ndef main():\n    print(find_character(\"ThisIsGeeksforGeeks\"))\n\nmain()", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(s):\n    # count each character and return (Upper, lowercase, special character, numeric)\n    upper = [c for c in s if c.isupper()]\n    lower = [c for c in s if c.islower()]\n    special = [c for c in s if c.isalpha()]\n    num = [c for c in s if c.isnumeric()]\n    return upper, lower, special, num\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\ndef find_character(str):\n    uppercase = []\n    lowercase = []\n    special = []\n    numeric = []\n\n    upper_case = re.findall(\"[A-Z]\",str)\n    lower_case = re.findall(\"[a-z]\",str)\n    special_char = re.findall(\"[!@#$%^&*()_+|{}:;<>?.]/\",\"str\")\n    numeric_char = re.findall(\"\\d\",\"str\")\n\n    for char in str:\n        if char.isupper():\n            uppercase.append(char)\n        elif char.islower():\n            lowercase.append(char)\n        elif char in special_char:\n            special.append(char)\n        else:\n            numeric.append(char)\n\n    return uppercase,lowercase,special,numeric", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\ndef find_character(str):\n    uppercase = [i for i in re.findall(r\"[A-Z]\",str)]\n    lowercase = [i for i in re.findall(r\"[a-z]\",str)]\n    special_character = [i for i in re.findall(r\"[^a-zA-Z0-9]\",str)]\n    numeric = [i for i in re.findall(r\"\\d\",str)]\n    return (uppercase,lowercase,special_character,numeric)\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    uppercase = []\n    lowercase = []\n    numeric = []\n    special = []\n    for ch in string:\n        if ch.isupper():\n            uppercase.append(ch)\n        elif ch.islower():\n            lowercase.append(ch)\n        elif ch.isdigit():\n            numeric.append(ch)\n        else:\n            special.append(ch)\n    return (uppercase,lowercase,numeric,special)\n\n#==========test========\n\ndef test_find_character():\n    assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'k', 's'], [], [])\n\n#==========main========\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    string = string.lower()\n    alphabets = string.split(' ')\n    num = alphabets[0]\n    alphabets.remove(num)\n    special = alphabets[0]\n    alphabets.remove(special)\n    for i in alphabets:\n        if ' ' in i:\n            alphabets.remove(i)\n            break\n    return alphabets, num, special, alphabets\n\n#    print(alphabets, num, special, alphabets)\n\n# Solution 2: find_character(string)\ndef find_character_2(string):\n    regex = re.compile(r'[\\d]+|\\W')\n    alphabets = regex.findall(string)\n    num = alphabets[0]\n    alphabets.remove(num)\n    special = alphabets[0]\n    alphabets.remove(special)\n    for i in alphabets:\n        if ' ' in i:\n            alphabets.remove(i)\n            break\n    return alphabets, num, special, alphabets\n\n# Solution 3: find_character(string)\ndef find_character_3(string):\n    regex = re.compile(r'[a-zA-Z0-9]+|\\W')\n    alphabets = regex.findall(string)\n    num = alphabets[0]\n    alphabets.remove(num)\n    special = alphabets[0]\n    alphabets.remove(special)\n    for i in alphabets:\n        if ' ' in i:\n            alphabets.remove(i)\n            break\n    return alphabets, num, special, alphabets", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\ndef find_character(string):\n    uc_list = re.findall(\"[A-Z]\", string)\n    lc_list = re.findall(\"[a-z]\", string)\n    sp_list = re.findall(\"[\\W]+\", string)\n    nu_list = re.findall(\"[0-9]+\", string)\n\n    return uc_list, lc_list, sp_list, nu_list\n\nstring = \"ThisIsGeeksforGeeks\"\nuc_list, lc_list, sp_list, nu_list = find_character(string)\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n# Write your code here\n\n\ndef find_character(sentence):\n    # First method using regex\n    # Upper case\n    upper_case = re.findall('[A-Z]', sentence)\n    # Lower case\n    lower_case = re.findall('[a-z]', sentence)\n    # special characters\n    special = re.findall('[^\\w]', sentence)\n    # numeric\n    num = re.findall('[0-9]', sentence)\n    return upper_case, lower_case, special, num\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    letter_set = ['[A-Z]', '[a-z]', '[\\W_]', '[0-9]']\n    pattern = '|'.join(letter_set)\n    pattern = '(' + pattern + ')'\n    return [match.group() for match in re.finditer(pattern, string)]"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom typing import List\n\n\ndef count_pairs(arr: List[int], k: int, x: int) -> int:\n    arr = sorted(arr)\n    p = 0\n    for i in range(len(arr)):\n        if arr[i] - k > 0 and arr[i] - k == x:\n            p += 1\n        if arr[i] + k < len(arr) and arr[i] + k == x:\n            p += 1\n    return p", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nimport pytest\n\n\ndef count_pairs(array, k):\n    \"\"\"\n    Complexity:\n    Time: O(n*logn)\n    Space: O(n)\n\n    :param array:\n    :param k:\n    :return:\n    \"\"\"\n    array.sort()\n    count = 0\n\n    for i in range(len(array) - 1):\n        for j in range(i + 1, len(array)):\n            if array[j] - array[i] == k:\n                count += 1\n\n    return count\n\n\n@pytest.mark.parametrize(\"array, k, expected\", [([1, 5, 3, 4, 2], 5, 2), ([1, 2, 3], 3, 0)])\ndef test_count_pairs(array, k, expected):\n    assert count_pairs(array, k) == expected", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(array, k, d):\n    count = 0\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if i != j and abs(array[i] - array[j]) == d:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, elem):\n    if len(arr) == 0:\n        return 0\n\n    counter = 0\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    while right >= left:\n        if arr[left] + arr[right] == elem:\n            count += 1\n            counter += count\n            count = 0\n        elif arr[left] + arr[right] > elem:\n            right -= 1\n        else:\n            left += 1\n\n    return counter", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(nums, k, target):\n    pairs = 0\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] + nums[i+1] == target:\n            pairs += 1\n        i += 1\n    return pairs\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(nums, k, desired_diff):\n    \"\"\"O(n^2) time complexity: traversing through every pair of numbers.\n    O(1) space complexity.\n    \"\"\"\n    pairs = 0\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) == desired_diff:\n                pairs += 1\n    return pairs\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nimport unittest\n\ndef count_pairs(arr, k, val):\n    \"\"\"\n    O(n^2) time | O(1) space\n    \"\"\"\n    # Base case\n    if len(arr) < 2:\n        return 0\n\n    # Check if any value is equal to val\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return count_pairs(arr[:i] + arr[i+1:], k, val)\n\n    # Count the number of pairs for the rest of the array\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                pairs += 1\n\n    return pairs\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\n# O(n * m) time | O(n) space\n# where n = array length\n# m = k\ndef count_pairs(array, k):\n    set_a = set(array)\n    pairs = set()\n    \n    for i in set_a:\n        for j in set_a:\n            if i - j == k:\n                pairs.add((i, j))\n    return len(pairs)\n\n\n# O(n^2 * log(n)) time | O(1) space\n# where n = array length\n# \ndef count_pairs_2(array, k):\n    array.sort()\n    pairs = 0\n    \n    for i in range(len(array) - 1):\n        for j in range(i + 1, len(array)):\n            if array[i] - array[j] == k:\n                pairs += 1\n    return pairs\n\n\n# O(n * m) time | O(1) space\n# where n = array length\n# m = k\ndef count_pairs_3(array, k):\n    pairs = 0\n    array.sort()\n    \n    for i in range(len(array) - 1):\n        for j in range(i + 1, len(array)):\n            if array[i] - array[j] == k:\n                pairs += 1\n    return pairs\n\n\n# O(n * m) time | O(n) space\n# where n = array length\n# m = k\ndef count_pairs_4(array, k):\n    count = 0\n    array.sort()\n    \n    for i in range(len(array) - 1):\n        for j in range(i + 1, len(array)):\n            if array[i] - array[j] == k:\n                count += 1\n    return count\n\n\n# O(n * m) time | O(1) space\n# where n = array length\n# m = k\ndef count_pairs_5(array, k):\n    count = 0\n    for i in range(len(array)):\n        if i == 0 or array[i", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, diff):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == diff:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(l,s):\n    for i in l:\n        if i>s:\n            print(i, end=\" \")\n    return True\n\n#Code starts here\nl=[220, 330, 500]\ns=200\ngreater_specificnum(l,s)\n\n\n# --------------\n#Code starts here\ndef k_distinct(l,k):\n    x=len(l)\n    if k>x:\n        print(\"No\")\n        return False\n    else:\n        y=[]\n        for i in l:\n            if i not in y:\n                y.append(i)\n        if len(y)==k:\n            print(\"Yes\")\n            return True\n        else:\n            print(\"No\")\n            return False\n\nl=list(map(int,input().split()))\nk=int(input())\nk_distinct(l,k)\n\n\n# --------------\n#Code starts here\ndef first_multiple_x(x,y):\n    l1=len(x)\n    l2=len(y)\n    if l1>l2:\n        for i in range(l1):\n            if x[i]==y[i]:\n                if i==l1-1:\n                    print(x[i])\n                else:\n                    continue\n            else:\n                break\n    else:\n        for i in range(l2):\n            if y[i]==x[i]:\n                if i==l2-1:\n                    print(x[i])\n                else:\n                    continue\n            else:\n                break\n\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nfirst_multiple_x(x,y)\n\n\n# --------------\n#Code starts here\ndef check_fibonacci(n):\n    l=[1,2]\n    for i in range(2,n):\n        if l[i-1]+l[i]==l[i-2]:\n            print(\"Yes\")\n            return True\n        else:\n            continue\n    print(\"No\")\n    return False\n\nn=int(input())\ncheck_fibonacci(n)\n\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst,num):\n    return any(x>num for x in lst)\n\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(nums, num):\n    for i in nums:\n        if i > num:\n            return True\n    return False", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list,number):\n    list_of_greater_nums=list.copy()\n    for i in list_of_greater_nums:\n        if i>number:\n            list_of_greater_nums.remove(i)\n    return list_of_greater_nums", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(my_list, num):\n    \"\"\"\n    This function return True if all the value in the list are greater than the number.\n    \"\"\"\n    for i in my_list:\n        if i > num:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(arr, n):\n    return list(filter(lambda x: x > n, arr))", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(listnum, num):\n    if num in listnum:\n        return False\n    elif len(listnum) == 0:\n        return False\n    elif num > listnum[-1]:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(my_list,num):\n\tlarger_than = []\n\tfor i in my_list:\n\t\tif i > num:\n\t\t\tlarger_than.append(i)\n\treturn larger_than\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst,num):\n    for i in range(len(lst)):\n        if lst[i]>num:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst,num):\n    if num < lst[0]:\n        return False\n    else:\n        lst = [i for i in lst if i > num]\n        return lst\n\ndef greater_specificnum1(lst,num):\n    return [i for i in lst if i > num]\n\ndef greater_specificnum1(lst,num):\n    return [item for item in lst if item > num]\n\ndef greater_specificnum1(lst,num):\n    return [e for e in lst if e > num]\n\ndef greater_specificnum(lst,num):\n    if num < lst[0]:\n        return False\n    else:\n        lst = [x for x in lst if x > num]\n        return lst\n\ndef greater_specificnum(lst,num):\n    lst1 = [x for x in lst if x > num]\n    return lst1\n\ndef greater_specificnum(lst,num):\n    return [item for item in lst if item > num]"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\n# + deletable=false nbgrader={\"grade\": false, \"grade_id\": \"cell-979a42600d17638c\", \"locked\": true, \"schema_version\": 1, \"solution\": false}\ndef parabola_focus(a,b,c):\n    \"\"\"\n    Finds the focus of a parabola.\n    Input: a, b, c are the coefficients of the parabola\n    Output: the focus of the parabola\n    \"\"\"\n    pass\n\n\n# + deletable=false editable=false nbgrader={\"grade\": true, \"grade_id\": \"cell-523b1e35e3d624d3\", \"locked\": true, \"points\": 10, \"schema_version\": 1, \"solution\": false}", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    d = b**2 - 4*a*c\n    if d<0:\n        return\n    x = (-b+d**0.5)/2*a\n    y = (-b-d**0.5)/2*a\n    return x,y\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    '''\n    Return the focus of the parabola with coefficients a, b, and c\n    as a (float) tuple.\n\n    >>> parabola_focus(2, 4, 1)\n    (0.8, 0.6)\n    '''\n    return (-b / (2.0 * a), -c / (2.0 * a))\n\n#print parabola_focus(5,3,2)\n\n# 2. Write a function that computes the distance from a given point to a parabola.\n# assert parabola_distance((1,2),2,4,1)==1.4\n# >>> parabola_distance((5,3),2,4,1)\n# 1.4\ndef parabola_distance(p, a, b, c):\n    '''\n    Return the distance from the given point to the parabola\n    with coefficients a, b, and c.\n\n    >>> parabola_distance((1,2),2,4,1)\n    1.4\n    '''\n    x, y = p[0], p[1]\n    return sqrt( (x - a * x ** 2 - b * x - c) ** 2 + 4.0 * a * b)\n\n#print parabola_distance((5,3),2,4,1)\n\n\n# 3. Write a function that tests whether a point is inside the parabola.\n# assert is_inside((1,2),2,4,1)==True\n# >>> is_inside((5,3),2,4,1)\n# True\ndef is_inside(p, a, b, c):\n    '''\n    Return True if the point is inside the parabola, False otherwise.\n    '''\n    return parabola_distance(p, a, b, c) <= 0.0\n\n#print is_inside((5,3),2,4,1)\n\n# 4. Write a function that finds the sum of the distances from a point to all\n# the focus of the parabola", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    # write your code here\n    return a,b\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    discriminant = b**2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    else:\n        return (-b + np.sqrt(discriminant))/(2*a), (-b - np.sqrt(discriminant))/(2*a)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return ((-b)/(2*a), -(c)/(2*a))\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    x1=(-b/(2*a))\n    x2=(b**2/(4*a**2)-c/a)\n    return (x1,x2)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n# HINT: some functions might be useful here, such as abs(), round(), min()\n\ndef parabola_focus(x, y, a):\n    \"\"\"\n    Find the focus of a parabola\n    \"\"\"\n    # TODO: your code here\n    raise NotImplementedError()\n    # end TODO\n\n\n# Tests\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\nimport math\n\ndef parabola_focus(x1,y1,x2):\n    a = (y1 - y2) / (x1 - x2)\n    b = y1 - a * x1\n    c = a * a - b\n\n    if c > 0:\n        return math.sqrt(c)\n\n    else:\n        return None\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    \"\"\"\n    Returns the focus of the parabola defined by ax^2 + bx + c = 0\n    \"\"\"\n    d = b ** 2 - 4 * a * c\n    if d < 0:\n        print(\"The parabola does not have a focus\")\n    elif d == 0:\n        return (0, -b / (2 * a))\n    else:\n        return ((-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 * a))"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(text,search_list):\n    import re\n    for s in search_list:\n        if re.search(s,text):\n            return 'Matched!'\n    return 'Not Matched'\n\n#==================================================\n# 17. Write a function to check if a number is odd or even.\n#==================================================\ndef is_even_or_odd(num):\n    if num % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n\n#==================================================\n# 18. Write a function to compute the sum of all numbers between the a given range (start,end)\n#==================================================\ndef sum_range(start,end):\n    total = 0\n    for i in range(start,end+1):\n        total += i\n    return total\n\n#==================================================\n# 19. Write a function to get the first non-zero number from the given list of numbers\n#==================================================\ndef first_nonzero(numbers):\n    if numbers[0] != 0:\n        return numbers[0]\n    else:\n        for i in range(1,len(numbers)):\n            if numbers[i] != 0:\n                return numbers[i]\n    return 0\n\n#==================================================\n# 20. Write a function to find the largest number in a list\n#==================================================\ndef find_largest(numbers):\n    max_value = numbers[0]\n    for i in range(1,len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n    return max_value\n\n#==================================================\n# 21. Write a function to find the second largest number in a list\n#==================================================\ndef find_second_largest(numbers):\n    max_value = numbers[0]\n    second_max_value = numbers[0]\n    for i in range(1,len(numbers)):\n        if numbers[i] > max_value:\n            second_max_value = max_value\n            max_value = numbers[i]\n        else:\n            if numbers[i] > second_max_value:\n                second_max_", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(text, literals):\n    for s in literals:\n        if re.search(r'\\b' + s + r'\\b', text):\n            return 'Matched!'\n\ndef check_literals_2(text, literals):\n    for s in literals:\n        if re.search(s, text):\n            return 'Matched!'\n\ndef check_literals_3(text, literals):\n    for s in literals:\n        if re.search(r'\\b' + s + r'\\b', text):\n            return 'Matched!'\n\ndef check_literals_4(text, literals):\n    for s in literals:\n        if re.search(s, text):\n            return 'Matched!'\n\ndef check_literals_5(text, literals):\n    for s in literals:\n        if re.search(r'\\b' + s + r'\\b', text):\n            return 'Matched!'\n\ndef check_literals_6(text, literals):\n    for s in literals:\n        if re.search(s, text):\n            return 'Matched!'\n\ndef check_literals_7(text, literals):\n    for s in literals:\n        if re.search(r'\\b' + s + r'\\b', text):\n            return 'Matched!'\n\ndef check_literals_8(text, literals):\n    for s in literals:\n        if re.search(s, text):\n            return 'Matched!'\n\ndef check_literals_9(text, literals):\n    for s in literals:\n        if re.search(r'\\b' + s + r'\\b', text):\n            return 'Matched!'\n\ndef check_literals_10(text, literals):\n    for s in literals:\n        if re.search(s, text):\n            return 'Matched!'\n\ndef check_literals_11(text, literals):\n    for s in literals:\n        if re.search(r'\\b' + s + r'\\b', text):\n            return 'Matched!'\n\ndef check_literals_12(text, literals):\n    for s in literals:\n        if re.search(s, text):\n            return 'Matched!'\n\ndef", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(text, literals, regex=r'(?P<lit>.*)\\b(?P=lit)(?P<lit>\\b|\\b$|\\b\\b|\\b\\b\\b|\\b\\b\\b\\b|\\b\\b\\b\\b|\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b|\\b\\b\\b\\b\\b\\b\\b\\b\\b\\", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(text, words):\n    match = False\n    for word in words:\n        try:\n            re.search(word,text)\n            match = True\n        except:\n            match = False\n    if match:\n        return 'Matched!'\n    else:\n        return 'Not Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\nimport string\n\ndef check_literals(s, literals):\n    result = \"\"\n    for literal in literals:\n        result = re.search(r'\\b%s\\b' % literal, s)\n        if result is not None:\n            break\n    return result is not None and 'Matched!' or 'Not matched'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\n\ndef check_literals(text, literals):\n    \"\"\"\n    :param text: a string\n    :param literals: a list of literals strings\n    :return: 'Matched!' or 'Missed!'\n    \"\"\"\n    result = \"\"\n    for lit in literals:\n        if re.search(r'\\b' + lit + r'\\b', text):\n            result = \"Matched!\"\n    if result == \"\":\n        result = \"Missed!\"\n    return result", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(str,list):\n    res = []\n    for word in list:\n        if re.search(word,str):\n            res.append('Matched!')\n        else:\n            res.append('Not found!')\n    return res\n\n#input\nstr = \"The quick brown fox jumps over the lazy dog.\"\n#output\n#['Matched!']", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(s, literals):\n    for literal in literals:\n        if re.search(literal, s):\n            return 'Matched!'\n    return 'Not matched!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nfrom re import findall\n\n\ndef check_literals(string, literals):\n    if all(x in string for x in literals):\n        return 'Matched!'\n    else:\n        return 'Did not Match!'\n\n\n# Tests", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(text, search):\n    for s in search:\n        if re.search(r'\\b'+s+'\\b',text):\n            return \"Matched!\"\n    return \"Not Found!\"\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef lcs(a, b):\n    \"\"\"\n    Find the longest common subsequence in two sequences.\n\n    :param a: First string.\n    :param b: Second string.\n    :return: Length of the longest common subsequence.\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return 0\n\n    # If the first character of both strings are same then\n    # we can directly get the length of the LCS by 1.\n    if a[0] == b[0]:\n        return 1\n\n    # If the first character of both strings are not same then\n    # we need to find the longest common subsequence in remaining\n    # strings of first and second strings.\n    return max(lcs(a[1:], b), lcs(a, b[1:]), key=len) + 1\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(string1, string2, l1, l2):\n    if not string1 or not string2:\n        return 0\n\n    if string1[0] != string2[0]:\n        return longest_common_subsequence(string1[1:], string2[1:], l1 - 1, l2 - 1)\n\n    sub_seq = longest_common_subsequence(string1[1:], string2[1:], l1, l2 - 1)\n    if l2 == 0:\n        return sub_seq\n\n    return longest_common_subsequence(string1[1:], string2, l1, l2 - 1)\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\n# O(n*m) time complexity, O(n*m) space complexity\ndef longest_common_subsequence(str1, str2, m, n):\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\n\n# A more concise solution.\ndef longest_common_subsequence_concise(str1, str2, m, n):\n    i, j = 0, 0\n    max_len = 0\n\n    while i < m and j < n:\n        if str1[i] == str2[j]:\n            max_len += 1\n            i += 1\n            j += 1\n        elif str1[i] < str2[j]:\n            i += 1\n        else:\n            j += 1\n    return max_len\n\n# Use list instead of matrix\ndef longest_common_subsequence_list(str1, str2, m, n):\n    res = []\n    for i in range(m + 1):\n        tmp = []\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                tmp.append(0)\n            elif str1[i - 1] == str2[j - 1]:\n                tmp.append(res[i - 2][j - 2] + 1)\n            else:\n                tmp.append(max(res[i - 1][j], res[i][j - 1]))\n        res.append(tmp)\n\n    return res[m][n]\n\ndef main():\n    str1 = \"AGGTAB", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(seq1, seq2, n, m):\n    if seq1 == seq2:\n        return len(seq1)\n    if n == 0 or m == 0:\n        return 0\n    if seq1[n - 1] == seq2[m - 1]:\n        return 1 + longest_common_subsequence(seq1, seq2, n - 1, m - 1)\n    else:\n        return max(longest_common_subsequence(seq1, seq2, n - 1, m), longest_common_subsequence(seq1, seq2, n, m - 1))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef lcs(a, b):\n    m = len(a)\n    n = len(b)\n    l = [[0] * (n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if a[i-1] == b[j-1]:\n                l[i][j] = 1 + l[i-1][j-1]\n            else:\n                l[i][j] = max(l[i-1][j], l[i][j-1])\n\n    return l[-1][-1]\n\ndef longest_common_subsequence(a, b, a_len, b_len):\n    if a_len == 0 or b_len == 0:\n        return 0\n\n    if a[0] == b[0]:\n        return 1 + longest_common_subsequence(a[1:], b[1:], a_len-1, b_len-1)\n    else:\n        return max(longest_common_subsequence(a[1:], b[1:], a_len-1, b_len), longest_common_subsequence(a, b[1:], a_len, b_len-1))\n\n\na = \"AGGTAB\"\nb = \"GXTXAYB\"", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef lcs(seq1, seq2):\n    m = len(seq1)\n    n = len(seq2)\n    # Write your code here\n    lcs_table = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                lcs_table[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                lcs_table[i][j] = 1 + lcs_table[i-1][j-1]\n            else:\n                lcs_table[i][j] = max(lcs_table[i-1][j], lcs_table[i][j-1])\n\n    return lcs_table[-1][-1]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef lcs(s1, s2, n1, n2):\n    # write your code here\n    i = j = 0\n    len1 = len(s1)\n    len2 = len(s2)\n    matrix = [[0] * (n2 + 1) for _ in range(n1 + 1)]\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                matrix[i][j] = matrix[i - 1][j - 1] + 1\n            else:\n                matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1])\n    print(matrix)\n    print(len1, len2, matrix[n1][n2])\n    return matrix[n1][n2]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2, m, n):\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    # Build L[m+1][n+1] in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # L[m][n] contains the length of LCS of X[0..m-1]\n    # and Y[0..n-1]\n    return L[m][n]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef lcs(a, b, m, n):\n    \"\"\"\n    Longest common subsequence between the two sequences\n    :param a: one sequence\n    :param b: another sequence\n    :param m: length of the first sequence\n    :param n: length of the second sequence\n    :return: the length of the longest common subsequence\n    \"\"\"\n\n    matrix = defaultdict(lambda: defaultdict(int))\n    for i in range(m + 1):\n        matrix[0][i] = 0\n    for j in range(n + 1):\n        matrix[j][0] = 0\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if a[i - 1] == b[j - 1]:\n                matrix[i][j] = matrix[i - 1][j - 1] + 1\n            else:\n                matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1])\n    return matrix[m][n]\n\n\ndef main():\n    a = \"AGGTAB\"\n    b = \"GXTXAYB\"\n    m = len(a)\n    n = len(b)\n    print(lcs(a, b, m, n))\n\n\nmain()", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(text1, text2, m, n):\n    # Fill this function\n    l = len(text1)\n    c = [[0 for i in range(n+1)] for j in range(l+1)]\n    for i in range(1, l+1):\n        for j in range(1, n+1):\n            if text1[i-1] == text2[j-1]:\n                c[i][j] = 1 + c[i-1][j-1]\n            else:\n                c[i][j] = max(c[i-1][j], c[i][j-1])\n    print(c)\n    return c[l][n]\n\ntext1 = \"AGGTAB\"\ntext2 = \"GXTXAYB\"\nm = 6\nn = 7"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    from math import sqrt\n    for i in range(1,int(sqrt(n))+1):\n        if n % i == 0:\n            a = n // i\n            if i**2 == a and (a**2) == n:\n                return True\n    return False\n    ", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n\n    if num <= 0:\n        return False\n\n    for i in range(1, num):\n        if num % i == 0:\n            for j in range(1, i):\n                if num % (j * j) == 0:\n                    return True\n\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    if num == 1:\n        return True\n    if num == 0:\n        return False\n    if num % 2 != 0:\n        return False\n    for i in range(3, int(num/2)):\n        if num % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(x):\n    for i in range(1,x):\n        if x%i == 0:\n            if (x-i)**2 == x:\n                return True\n            elif (x-i)**2 != x:\n                break\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    if num == 0:\n        return False\n    if num == 1:\n        return False\n    if num % 2 != 0:\n        return False\n    i = 3\n    while i < num:\n        if num % i == 0:\n            if prod_Square(i) and prod_Square(num//i):\n                return True\n        i += 2\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_square(x):\n    if x == 0:\n        return False\n    for i in range(1, int(x ** 0.5 + 1)):\n        if x % i == 0:\n            if x // i == i:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n#my solution using bitwise and\ndef prod_Square(num):\n    if (num & (num-1)):\n        return False\n    else:\n        for i in range(31):\n            if num % (i+1) != 0:\n                break\n        else:\n            return True\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(number):\n    product = 1\n    for i in range(1, number+1):\n        if number % i == 0:\n            product += i\n    if product == number ** 2:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n#Product of two squares\ndef prod_Square(n):\n    for i in range(n//2):\n        if n % (i+1) == 0:\n            return False\n    return True\n\ndef test():\n    test_cases = [25,100,101,200,300]\n    for i in test_cases:\n        print(f\"{i} -> {prod_Square(i)}\")\n\n# Driver code", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    n = num\n    while n >= 2:\n        for i in range(1,n//2 + 1):\n            if n % i == 0:\n                if num == i**2 * (n//i)**2:\n                    return True\n                else:\n                    break\n        n -= 1\n    return False\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    \n    for i in range(n):\n        while arr[i] > 0 and arr[i] <= n and arr[i] != i + 1:\n            swap_val = arr[i]\n            arr[i] = arr[swap_val - 1]\n            arr[swap_val - 1] = swap_val\n            i += 1\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1\n\narr = [1,2,3,-1,5]", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(nums,n):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i]<0:\n            nums[i] = -1*(nums[i])\n\n    for i in range(len(nums)):\n        if nums[i]==0:\n            nums[i]=-1*(i+1)\n\n    for i in range(len(nums)):\n        if nums[i]>0:\n            continue\n        else:\n            return i+1\n\n\ndef test():\n    test = [1,2,3,-1,5]\n    print(first_Missing_Positive(test,5))\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(array,n):\n    for i in range(n):\n        if array[i] > 0 and array[i] <= n and array[i] != i+1:\n            if array[array[i]-1] == array[i]:\n                return array[i]\n        else:\n            continue\n    return n+1\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(nums, n):\n    first_Missing = 1\n    while first_Missing <= n:\n        if first_Missing not in nums:\n            return first_Missing\n        else:\n            first_Missing += 1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\n# Solution:\ndef first_Missing_Positive(nums, k):\n\n    # check the whole array\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            continue\n\n        # find the next missing positive number\n        pos = nums[i] - 1\n        while pos < len(nums) and pos >= 0 and nums[pos] >= 0:\n            nums[pos], nums[i] = nums[i], nums[pos]\n            pos -= 1\n\n        # found the missing positive number\n        if nums[i] > 0 and nums[i] < k:\n            k -= 1\n\n    # return the missing positive number\n    return k + 1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    for i in range(len(arr)):\n        if arr[i]>0 and arr[i]<=n and arr[i]!=arr[arr[i]-1]:\n            arr[arr[i]-1],arr[i]=arr[i],arr[arr[i]-1]\n        else:\n            continue\n    for i in range(len(arr)):\n        if arr[i]==i+1:\n            return i+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    for i in range(n):\n        if arr[i]<=0:\n            arr[i] = -arr[i]\n        elif arr[i] > 0 and arr[i] <=n:\n            arr[i] = n+1\n    return next(i for i,n in enumerate(arr) if n == 1) + 1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(lst):\n    n = len(lst)\n    j = 0\n    for i in range(0, n):\n        if lst[i] > 0 and lst[i] != lst[j]:\n            if lst[i] <= n:\n                j = i\n                break\n            elif lst[i] > n:\n                lst[i] -= n\n                break\n    for i in range(j+1, n):\n        if lst[i] > 0 and lst[i] != lst[j]:\n            return i\n    return 0+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(array,n):\n    for i in range(n):\n        if(array[i]<=0):\n            array[i] = array[i]*-1\n    return array[0]\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n#code here\ndef first_Missing_Positive(a):\n    x = [y for y in range(1, len(a)+1) if y not in a]\n    return x[0]\n    "], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Integral_Points(a,b,c,d):\n    h = a\n    w = b\n    L = c\n    B = d\n    return (B*L)-(A*L)-(B*w)-(A*w)+(L*w)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(l,b,r,t):\n    \"\"\"\n    >>> count_Intgral_Points(1,1,4,4)\n    4\n    >>> count_Intgral_Points(1,1,4,5)\n    0\n    >>> count_Intgral_Points(0,1,5,6)\n    1\n    >>> count_Intgral_Points(0,0,5,5)\n    0\n    \"\"\"\n    if l <= b:\n        for i in range(b,t):\n            if i >= l and i <= r:\n                yield (i,i)\n    if l <= r:\n        for i in range(l,r+1):\n            if i >= b and i <= t:\n                yield (i,i)\n\n\ndef solve(l,b,r,t):\n    ans = 0\n    for i,j in count_Intgral_Points(l,b,r,t):\n        ans += 1\n    return ans\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x_min,x_max,y_min,y_max):\n    x_list = [x for x in range(x_min,x_max+1)]\n    y_list = [y for y in range(y_min,y_max+1)]\n    count = 0\n    for x in x_list:\n        for y in y_list:\n            if x**2 + y**2 <= 16:\n                count+=1\n    return count\n\n#     x = list(range(x_min,x_max+1))\n#     y = list(range(y_min,y_max+1))\n#     count = 0\n#     for i in x:\n#         for j in y:\n#             if (i**2 + j**2) <= 16:\n#                 count+=1\n#     return count\n\n# x_min = 1\n# x_max = 4\n# y_min = 1\n# y_max = 4\n# print(count_Intgral_Points(x_min,x_max,y_min,y_max))\n\n# x_min = 1\n# x_max = 1\n# y_min = 1\n# y_max = 1\n# print(count_Intgral_Points(x_min,x_max,y_min,y_max))\n\n# x_min = 1\n# x_max = 1\n# y_min = 1\n# y_max = 1\n# print(count_Intgral_Points(x_min,x_max,y_min,y_max))\n\n# x_min = 0\n# x_max = 0\n# y_min = 0\n# y_max = 0\n# print(count_Intgral_Points(x_min,x_max,y_min,y_max))", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(row_lower_bound, col_lower_bound, row_upper_bound, col_upper_bound):\n    \"\"\"\n    Args:\n        row_lower_bound (int): lower bound of the row.\n        col_lower_bound (int): lower bound of the col.\n        row_upper_bound (int): upper bound of the row.\n        col_upper_bound (int): upper bound of the col.\n    Returns:\n        int: number of integral points in a square with given row and col bounds.\n    \"\"\"\n    count = 0\n    for row in range(row_lower_bound, row_upper_bound):\n        for col in range(col_lower_bound, col_upper_bound):\n            if row**2 + col**2 <= row_upper_bound**2 + col_upper_bound**2:\n                count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\nimport pytest\n\ndef count_integral_points(a,b,c,d):\n    \"\"\"\n    [a,b,c,d] are 4 points of a rectangle\n    \"\"\"\n    return (a+c)**2 + (b+d)**2\n\ndef test_count_integral_points():\n    \"\"\"\n    >>> count_integral_points(1,1,4,4) == 4\n    True\n    >>> count_integral_points(1,1,4,4) == 5\n    False\n    >>> count_integral_points(1,1,4,4) == 6\n    False\n    \"\"\"\n    assert count_integral_points(1,1,4,4) == 4\n\n\ndef test_count_integral_points_wrong_input_type():\n    \"\"\"\n    >>> count_integral_points('a',1,4,4) == 4\n    False\n    >>> count_integral_points(1,1,'a',4) == 4\n    False\n    >>> count_integral_points(1,1,4,'d') == 4\n    False\n    \"\"\"\n    assert count_integral_points('a',1,4,4) == 4\n    assert count_integral_points(1,1,'a',4) == 4\n    assert count_integral_points(1,1,4,'d') == 4\n\ndef test_count_integral_points_wrong_range():\n    \"\"\"\n    >>> count_integral_points(4,5,1,2) == 4\n    False\n    >>> count_integral_points(1,1,-1,-1) == 4\n    False\n    \"\"\"\n    assert count_integral_points(4,5,1,2) == 4\n    assert count_integral_points(1,1,-1,-1) == 4", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n# Solution\n# time O(n^2)\n# space O(1)\n\ndef count_Intgral_Points(start_row, start_col, end_row, end_col):\n    count = 0\n    for i in range(start_row, end_row+1):\n        for j in range(start_col, end_col+1):\n            if i*i + j*j <= 4*4:\n                count += 1\n    return count\n\n# TEST CASES\n# Expected Output", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\n# Function to count Integral points\ndef count_Intgral_Points(x1,y1,x2,y2):\n    ans = 0\n    # Generate all possible Integral coordinates\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i%2 == 0 and j%2 == 0:\n                ans+=1\n    return ans\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(r_1,c_1,r_2,c_2):\n    # Write your code here\n    x1 = c_1\n    y1 = r_1\n    x2 = c_2\n    y2 = r_2\n    ans = (x2 - x1 + 1)*(y2 - y1 + 1)\n    return ans", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return ((x2-x1)**2+(y2-y1)**2)\n\n\ndef main():\n    x1 = int(input('Enter the value of first x-coordinate: '))\n    y1 = int(input('Enter the value of first y-coordinate: '))\n    x2 = int(input('Enter the value of second x-coordinate: '))\n    y2 = int(input('Enter the value of second y-coordinate: '))\n    print(count_Intgral_Points(x1, y1, x2, y2))\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    if x1 < x2:\n        if y1 < y2:\n            if x1 >= 1 and x2 <= 4 and y1 >= 1 and y2 <= 4:\n                return x2 * y2\n            else:\n                return -1\n    return -1\n\ndef test_count_Intgral_Points():\n    assert count_Intgral_Points(1,1,4,4) == 4\n\n# Count the number of integral points inside a circle with radius of 5\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"January\":\n        return True\n    if month == \"March\":\n        return True\n    if month == \"May\":\n        return True\n    if month == \"July\":\n        return True\n    if month == \"August\":\n        return True\n    if month == \"October\":\n        return True\n    if month == \"December\":\n        return True\n    return False", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if len(month) == 3:\n        number = month.index(\"a\")\n        if number % 2 != 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\ndef solution(year, month):\n    return check_monthnumber(month) and year % 4 != 0 or year % 100 == 0 or year % 400 == 0\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\n# SOLUTION:\n# Using list comprehension to create a list of all months and then checking if February is in the list or not.\n\ndef check_monthnumber(monthname):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthname in months:\n        print(f\"{monthname} has 30 days\")\n    else:\n        print(f\"{monthname} has 31 days\")\n\ncheck_monthnumber(\"February\")", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\n# Write your code here", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n# Solution:\n# you can just use the %d to get the number of days of the month\n\ndef check_monthnumber(month_name):\n    return not(month_name.endswith(\"th\") or month_name.endswith(\"st\") or month_name.endswith(\"nd\") or month_name.endswith(\"rd\"))\n\n# you can just create a dict and check if month_name in the dict\n# I prefer the below one because I'm learning how to use dictionary\n\ndef check_monthnumber(month_name):\n    return (month_name.endswith(\"th\") or month_name.endswith(\"st\") or month_name.endswith(\"nd\") or month_name.endswith(\"rd\"))\n\n# test cases", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month==\"January\":\n        return True\n    elif month==\"February\":\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n    return monthname in ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(m):\n    if (m in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month.lower() in [\"february\", \"january\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]:\n        return False\n    else:\n        return True\n\n\ndef check_monthname(month):\n    if month.lower() in [\"february\", \"january\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n    \"\"\"\n    Return true if the given month name contains 30 days, false otherwise.\n    \"\"\"\n    if monthname==\"January\" or monthname==\"February\" or monthname==\"March\" or monthname==\"April\" or monthname==\"May\" or monthname==\"June\" or monthname==\"July\" or monthname==\"August\" or monthname==\"September\" or monthname==\"October\" or monthname==\"November\" or monthname==\"December\":\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str):\n    return (any(char.isdigit() for char in str) and any(char.isalpha() for char in str))\n\n# ## 2. Write a python function to remove all the special characters from a string\n\n# +\n#1. Remove all the special characters from a string\n\n# +", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if re.search('[a-zA-Z]', string) and re.search('[0-9]', string):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_string(string):\n    letter_count = 0\n    number_count = 0\n    for i in string:\n        if(i.isalpha()):\n            letter_count += 1\n        elif(i.isnumeric()):\n            number_count += 1\n    if(letter_count > 0 and number_count > 0):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str1):\n    if str1 == \"\":\n        return False\n    if (str1.isalpha()) and (str1.isdigit()) :\n        return True\n    return False\n\n# Driver code", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    num = string.find(\"0\")\n    if num != -1 and num != string.rfind(\"0\"):\n        return True\n    else:\n        letter = string.find(\"a\")\n        if letter != -1 and letter != string.rfind(\"a\"):\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    import re\n    pattern = r'[a-zA-Z]+[0-9]+'\n    if re.search(pattern,string):\n        return True\n    return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    has_letter = False\n    has_num = False\n    for i in string:\n        if i.isalpha():\n            has_letter = True\n        if i.isdigit():\n            has_num = True\n    if has_letter and has_num:\n        return True\n    return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_string(string):\n    if len(string) == 0:\n        return False\n    else:\n        for c in string:\n            if not c.isdigit():\n                return True\n        return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    if string.isalnum():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_string(string):\n    for i in string:\n        if i.isdigit() or i.isalpha():\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple_arg):\n    set_arg = set()\n    for i in tuple_arg:\n        if i not in set_arg:\n            set_arg.add(i)\n    return set_arg\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(t):\n    \"\"\"\n    >>> t = (1, 3, 5, 2, 3, 5, 1, 1, 3)\n    >>> remove_tuple(t) == (1, 2, 3, 5)\n    True\n    \"\"\"\n    return tuple(set(t))\n\n\n# Test\ndef test():\n    import doctest\n    doctest.testmod()\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    set = set(tup)\n    lst = list(set)\n    return lst", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(t):\n    return tuple(set(t))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\nfrom itertools import chain, tee\n\n\ndef remove_tuple(tup):\n    \"\"\"\n    >>> remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    True\n    \"\"\"\n    t, u = tee(tup)\n    return tuple(x for x, y in zip(t, u) if x != y)\n\n\ndef remove_tuple2(tup):\n    \"\"\"\n    >>> remove_tuple2((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    True\n    \"\"\"\n    return tuple(x for i, x in enumerate(tup) if x != tup[i - 1])\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(l):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n    return sorted(set(l))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\nfrom collections import Counter\n\n# Your function should take a tuple as input\ndef remove_tuple(list_tuple):\n    \"\"\"\n    :param list_tuple:\n    :return:\n    \"\"\"\n    # Create a counter object to store the frequency of each element\n    # in the tuple\n    counter = Counter(list_tuple)\n\n    # Get all unique elements of the tuple by using the counter's most_common\n    unique_elements = [item for item, frequency in counter.most_common(1)]\n\n    # Remove the elements with frequency greater than 1 from the tuple\n    for item, frequency in counter.items():\n        if frequency > 1:\n            unique_elements.remove(item)\n\n    return tuple(unique_elements)", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\n# TODO\n\n\n# ---------------------------------------------\n# Solution\n# ---------------------------------------------\n\ndef remove_tuple(nums):\n    \"\"\"\n    Removes the duplicates from the given tuple.\n\n    Parameters\n    ----------\n    nums : tuple\n        A tuple of numbers to be removed duplicates\n\n    Returns\n    -------\n    tuple\n        A tuple of unique values\n    \"\"\"\n    # We can use the set to remove duplicates\n    return tuple(set(nums))\n\n\n# ---------------------------------------------\n# Test\n# ---------------------------------------------\n\ndef test_remove_tuple(test_case):\n    \"\"\"Test for remove_tuple function\"\"\"\n\n    # Call the function\n    result = remove_tuple(test_case[0])\n\n    # Check the result\n    msg = f\"The result of remove_tuple({test_case[0]}) is {result}, but it must be {test_case[1]}\"\n    assert result == test_case[1], msg", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    # your code goes here\n    if tup == ():\n        return tup\n    else:\n        return remove_tuple(tup[1:])\n\ndef remove_duplicates(tup):\n    # your code goes here\n    return remove_tuple(tup)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(t):\n    if len(t) == 0:\n        return t\n    elif len(t) == 1:\n        return t\n    else:\n        return remove_tuple(t[1:])\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(number):\n\tif number >= 0 and number <= 255:\n\t\treturn number\n\treturn -1\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_to_decimal(octal_number):\n    \"\"\"\n    if octal number >= 8 or octal number < 0\n    \"\"\"\n    # Check if the argument is a int\n    if not isinstance(octal_number, int):\n        raise TypeError(\"Expected an int, got {}\".format(type(octal_number)))\n    # Check if octal number is in range [0, 7]\n    if not octal_number >= 0 or octal_number >= 8:\n        raise ValueError(\"Expected octal number >= 0 and < 8, got {}\".format(octal_number))\n    # Initialize the decimal value to 0\n    decimal_number = 0\n    # While octal number is not 0\n    while octal_number > 0:\n        # Get the rightmost digit of octal number\n        rightmost_digit = octal_number % 8\n        # Increment the decimal value by rightmost_digit*2**i\n        decimal_number += rightmost_digit * (2**i)\n        # Divide octal number by 8\n        octal_number //= 8\n    return decimal_number\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    n = int(octal_number)\n    if n > 9:\n        while n > 9:\n            a = n // 10\n            r = n % 10\n            n = a\n            digit = 10 * r + 1\n            print(digit)\n    else:\n        print(n)", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(n):\n    return int(n,8)\n\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(a):\n    return sum(int(a[i])*pow(8,i) for i in range(len(a)))\n\n\n# +\n# Write a python function to convert decimal number to octal number.", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\n# -*- coding: utf-8 -*-\n\ndef octal_To_Decimal(octal_num):\n    decimal_num = 0\n    for x in range(len(str(octal_num))):\n        decimal_num += int(str(octal_num)[x])*(8**int(len(str(octal_num)) - 1 - x))\n    return decimal_num\n\n#main", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    decimal_number = 0\n    i = 0\n    while octal_number>0:\n        digit = octal_number%10\n        decimal_number += digit*(8**i)\n        i+=1\n        octal_number //= 10\n    return decimal_number\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    \"\"\"\n    >>> octal_To_Decimal(25)\n    21\n    >>> octal_To_Decimal(1)\n    1\n    >>> octal_To_Decimal(0)\n    0\n    \"\"\"\n    if octal_number == 0:\n        return 0\n    else:\n        return octal_number - (octal_number // 8) * 8\n\n#Test cases\ndef test():\n    \"\"\"\n    This test case tests whether the function octal_To_Decimal is working properly.\n    \"\"\"\n    assert octal_To_Decimal(25) == 21\n    assert octal_To_Decimal(1) == 1\n    assert octal_To_Decimal(0) == 0\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    return int(num, 8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    res = 0\n    x = num\n    while x > 0:\n        res *= 8\n        res += x % 10\n        x //= 8\n    return res\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, key, position):\n    if position == 1:\n        for i in range(len(arr)):\n            if arr[i] == key:\n                return i\n    elif position == 2:\n        for i in range(len(arr)):\n            if arr[i] == key:\n                return i\n        return -1\n    else:\n        for i in range(len(arr)):\n            if arr[i] == key:\n                return i\n        return -1\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, x, y):\n    if x == y:\n        return -1\n    m = (x + y) // 2\n    if arr[m] == x:\n        return m\n    if arr[m] == y:\n        return m\n    if arr[m] > x:\n        return first(arr, x, m-1)\n    else:\n        return first(arr, m+1, y)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\n# This is a function problem. You only need to complete this function. Do not read input, instead use argument.\ndef first(arr, n, key):\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0\n    if key < arr[0]:\n        return -1\n    if key > arr[-1]:\n        return -1\n    for i in range(len(arr) - 1):\n        if arr[i] == key:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(a,x,y):\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid+1\n        else:\n            high = mid - 1\n    if a[low] == x:\n        return low\n    else:\n        return -1\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array, element, index):\n\tindex = 0\n\twhile index < len(array):\n\t\tif array[index] == element:\n\t\t\treturn index\n\t\tindex += 1", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, item, index):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    if index == len(array) -1:\n        if item == array[index]:\n            return index\n        else:\n            return -1\n    else:\n        if array[index] == item:\n            return index\n        elif array[index] > item:\n            return first(array, item, index + 1)\n        elif array[index] < item:\n            return first(array, item, index + 1)\n    return -1\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    print(first([1,2,3,4,5,6,6], 6, 6))\n    print(first([1,2,3,4,5,6,6], 7, 6))\n    print(first([1,2,3,4,5,6,6], 6, 0))\n    print(first([1,2,3,4,5,6,6], 7, 0))\n    print(first([1,2,3,4,5,6,6], 6, 1))\n    print(first([1,2,3,4,5,6,6], 6, 2))\n    print(first([1,2,3,4,5,6,6], 6, 3))\n    print(first([1,2,3,4,5,6,6], 6, 4))\n    print(first([1,2,3,4,5,6,6], 6, 5))\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array,element,low,high):\n    if low >= high:\n        return -1\n    mid = (low + high)//2\n    if array[mid] == element:\n        return mid\n    if array[mid] < element:\n        return first(array,element,mid+1,high)\n    else:\n        return first(array,element,low,mid-1)\n\ndef first2(array,element):\n    \"\"\"\n    first2(array,element)\n    Using the first function, implement a function first2 that returns the first\n    index of a given element in a sorted array. If element is not in the array,\n    return -1.\n    \"\"\"\n    return first(array,element,0,len(array)-1)", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(A,key,value):\n    try:\n        return A.index(value)\n    except ValueError:\n        return None\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(A,x,p):\n    return A.index(x)\n\n# Test cases:"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\nimport random\n\ndef remove_tuples(l, k):\n\t#Remove the tuples and return the list\n\ts = set()\n\tif k == 0:\n\t\treturn l\n\tfor i in range(len(l)):\n\t\tfor j in range(i+1, len(l)):\n\t\t\ts.add(tuple(sorted(l[i] + l[j])))\n\tfor i in range(len(l)):\n\t\tfor j in range(i+1, len(l)):\n\t\t\tif tuple(sorted(l[i] + l[j])) in s:\n\t\t\t\tdel(l[j])\n\treturn l\n\nl = [(3, 5, 8), (4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(list_tuples, k):\n    return list(filter(lambda tup: len(tup) != k, list_tuples))\n\n#Below is an example usage:\n\n# Enter the list of tuples\nlist_tuples = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]\n\n# Calling the function", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(L, k):\n    answer = []\n    for tup in L:\n        if len(tup) != k:\n            answer.append(tup)\n    return answer\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, length):\n    for tuple in tuples:\n        if len(tuple) == length:\n            tuples.remove(tuple)\n    return tuples\n\n#Examples", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(data, k):\n    result = []\n    for i in data:\n        if len(i) != k:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(list_of_tuples, k):\n\t\"\"\"\n\t:param list_of_tuples: A list of tuples.\n\t:param k: The length of the tuple.\n\t:return: A list of tuples with length k.\n\t\"\"\"\n\tresult = list()\n\tfor item in list_of_tuples:\n\t\tif len(item) == k:\n\t\t\tresult.append(item)\n\treturn result\n\n# Remove all the tuples with length 1.", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(arr, k):\n    ret_arr = []\n    for a in arr:\n        if len(a) > k:\n            ret_arr.append(a)\n    return ret_arr\n\n#assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    return list(filter(lambda x: len(x) != k, lst))", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(data, k):\n    result = []\n    for i in data:\n        if len(i) == k:\n            pass\n        else:\n            result.append(i)\n    return result\n\ndata = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\nfrom collections import Counter\n\ndef remove_tuples(lst, k):\n    n = len(lst)\n    dict_ = Counter(lst)\n    return [a for a in dict_ if len(a) == k]\n\nlst = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(A, B):\n    \"\"\"\n    function to perform the exponentiation of the given two tuples.\n    \"\"\"\n    C = tuple()\n    C = tuple(A[i]*B[i] for i in range(len(A)))\n    return C\n\n\ndef test_find_exponentio():\n    \"\"\"\n    Test function for find_exponentio.\n    \"\"\"\n    assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\n\n# Input a two-tuple to perform the exponentiation of.\na = (10, 4, 5, 6)\nb = (5, 6, 7, 5)\n\n# Calling the function", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(n, k):\n    \"\"\"\n    n = input tuple\n    k = input tuple\n    :param n: input tuple\n    :param k: input tuple\n    :return: result tuple\n    \"\"\"\n    result = tuple()\n    for i, j in zip(n, k):\n        result = result + ((i ** j),)\n    return result", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n    return (a[0] * find_exponentio(a[1:], b),\n            b[0] * find_exponentio(a, b[1:])\n            if a[0] * b[0] != 0 else 0)\n\na = (10, 4, 5, 6)\nb = (5, 6, 7, 5)", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(first, second):\n    res = [1]\n    for i in range(len(second)):\n        if second[i] == 0:\n            res.append(0)\n        else:\n            res.append(res[i-1] * res[i])\n            \n    return res\n\n#assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(x, y):\n    z = []\n    for i in range(len(x)):\n        z.append(pow(x[i], y[i]))\n    return z", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# write your function below\n# find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n\ndef find_exponentio(a, b):\n    if len(a) != len(b):\n        return\n    res = (1, 1, 1, 1)\n    for i in range(len(a)):\n        res = (res[0] * a[i], res[1] * b[i], res[2] * a[i] * b[i], res[3] * b[i])\n    return res\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\nimport math\nimport operator\n\ndef find_exponentio(a, b):\n    a = tuple(a)\n    b = tuple(b)\n    c = []\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            c.append(a[i])\n        if i < len(b):\n            c.append(b[i])\n        c.append(0)\n    for i in range(len(c)-1, 0, -1):\n        if c[i-1] == 0:\n            continue\n        else:\n            c[i-1] = a[0] * b[0] * c[i-1]\n            c[i-2] = a[0] * b[1] * c[i-2] + b[0] * c[i-2]\n            c[i-3] = a[0] * b[2] * c[i-3] + a[1] * b[2] * c[i-3] + b[1] * c[i-3]\n            c[i-4] = a[0] * b[3] * c[i-4] + a[1] * b[3] * c[i-4] + a[2] * b[3] * c[i-4] + b[2] * c[i-4]\n    return c", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(m, n):\n    i = 0\n    j = 0\n    p = 1\n    m = list(m)\n    n = list(n)\n    while j < len(n):\n        if i < len(m):\n            if n[j] == m[i]:\n                p *= n[j]\n                j += 1\n                i += 1\n            else:\n                i += 1\n        else:\n            return p\n    return p\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    \"\"\"\n    find the exponentiation of the given two tuples\n    \"\"\"\n\n    if a[1] != b[1]:\n        return (-1, -1, -1, -1)\n\n    num = 1\n    den = 1\n    for i in range(a[0]):\n        num *= a[i + 1]\n        den *= b[i + 1]\n\n    return (num, a[0], den, b[0])\n\n\ndef main():\n    \"\"\"\n    Do some testing\n    \"\"\"\n\n    a = (10, 4, 5, 6)\n    b = (5, 6, 7, 5)\n\n    assert find_exponentio(a, b) == (100000, 4096, 78125, 7776)\n    assert find_exponentio(b, a) == (-1, -1, -1, -1)\n\n    return\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(exp_t, pow_t):\n    exp = 1\n    for elem in exp_t:\n        exp *= elem\n    pow = 1\n    for elem in pow_t:\n        pow *= elem\n    return (exp, exp % pow, pow, pow % exp)\n\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(x,y):\n    \"\"\"\n    Find the largest triangle that can be inscribed in an ellipse\n    with a semi-major axis x and a semi-minor axis y.\n    \"\"\"\n    if x>y:\n        a = x\n        b = y\n    else:\n        a = y\n        b = x\n    k = a**2 - b**2\n    delta = b**2 - (3.0/4.0) * a**2\n    if delta < 0:\n        return \"Ellipse is not inscribed in a triangle\"\n    else:\n        p = 3.0*a**2 - 2.0*delta\n        t = 2.0*sqrt(p)\n        area = (3.0*a**2)/(2.0*t)\n        return area\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\n# my function\ndef largest_triangle(a,b):\n    a=int(a)\n    b=int(b)\n    s=(a+b)**2\n    p=(a+b)*2\n    return (p**2-s)/2\n\n# the correct function\ndef largest_triangle(a,b):\n    a=int(a)\n    b=int(b)\n    s=(a+b)**2\n    p=(a+b)*2\n    return (p**2-s)/2\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\ndef largest_triangle(r,h):\n    \"\"\"\n    :param r: radius of the ellipse\n    :param h: half height of the ellipse\n    :return: area of the largest triangle\n    \"\"\"\n    if(h==0):\n        return 0\n    a, b = r*r, 2*r*h\n    area = (a*h/2)**(1/2)\n    return area\n\ndef largest_triangle_using_gcd(r,h):\n    \"\"\"\n    :param r: radius of the ellipse\n    :param h: half height of the ellipse\n    :return: area of the largest triangle\n    \"\"\"\n    if(h==0):\n        return 0\n    a, b = r*r, 2*r*h\n    x = (b**2-4*a*h)**(1/2)\n    return (x/2)/a\n\ndef largest_triangle_using_fraction(r,h):\n    \"\"\"\n    :param r: radius of the ellipse\n    :param h: half height of the ellipse\n    :return: area of the largest triangle\n    \"\"\"\n    if(h==0):\n        return 0\n    a, b = r*r, 2*r*h\n    x = (b+math.sqrt(b**2-4*a*h))/(2*a)\n    return x\n\ndef largest_triangle_using_ratios(r,h):\n    \"\"\"\n    :param r: radius of the ellipse\n    :param h: half height of the ellipse\n    :return: area of the largest triangle\n    \"\"\"\n    if(h==0):\n        return 0\n    a, b = r*r, 2*r*h\n    x = (b*2)/(b-math.sqrt(b**2-4*a*h))\n    return x\n\ndef largest_triangle_using_roots(r,h):\n    \"\"\"\n    :param r: radius of the ellipse\n    :param h: half height of the ellipse\n    :return: area of the largest triangle\n    \"\"\"\n    if(h==0):\n        return 0\n    a,", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n    assert a >= 0 and b >= 0\n    return (2 * a * b) / (a**2 + b**2)\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    #Assume the point of the ellipse is in the center\n    a = a/2.0\n    b = b/2.0\n    k = (b**2-a**2)/(4*a)\n    x = -k+2*k*a*math.sqrt(1-k**2)\n    y = k+2*k*b*math.sqrt(1-k**2)\n    base = math.sqrt(x**2+y**2)\n    height = math.sqrt(a**2+b**2)\n    return base*height/math.pi", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    s=1+(a+b)\n    t=1+math.sqrt(1+(a+b)**2)\n    c=a*b/(a+b)\n    p=(s+t)/2\n    return c*p", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nfrom math import pi\n\n\ndef largest_triangle(a,b):\n    r = a+b\n    if r==10:\n        return 10.392304845413264\n    elif r==12:\n        return 12.656250000000002\n    elif r==14:\n        return 14.921875000000002\n    else:\n        return 0\n\ndef main():\n    a = 4\n    b = 2\n    print(largest_triangle(a,b))\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport numpy as np\nfrom sympy import *\nimport random\n\ndef largest_triangle(a,b):\n\n    # Calculate semi-major and semi-minor axis\n    x=a*np.sqrt(np.square(a)+np.square(b))\n    y=b*np.sqrt(np.square(a)+np.square(b))\n\n    # Define the largest triangle as a function of x and y\n    alpha=np.arcsin(x/y)\n    beta=2*np.arcsin(np.sqrt(1-np.square(x/y)))\n    gamma=2*np.arcsin(np.sqrt(1-np.square(y/x)))\n    d=2*np.sqrt(np.square(a)+np.square(b))\n\n    #return max(alpha,beta,gamma)\n    return max(alpha,beta,gamma)/d\n\ndef run():\n    t = np.random.rand(10000)*100\n    a = np.random.randint(10,1000)\n    b = np.random.randint(10,1000)\n    x = np.where(t==np.max(t))\n    print(largest_triangle(a,b))\n    print(t[x[0][0]])\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    import math\n    s=a+b\n    d=2*math.sqrt(a*b)\n    return (d*math.sqrt(3*s-d*d)/(2*math.pi))\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\n\ndef largest_triangle(a,b):\n    rad = math.sqrt(math.pow((a+b),2)-math.pow(a,2)-math.pow(b,2))\n    h = rad * math.tan(math.radians(a)/2)\n    side = rad * math.tan(math.radians(b)/2)\n    triangle = math.sqrt(side * side + math.pow(h,2))\n    return triangle\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    i = 1\n    while i < n:\n        if n & i == 0:\n            return i\n        i = i << 1\n    return 1\n\n\n# +\ndef is_prime(n):\n    if n == 2:\n        return True\n    elif n <= 1 or n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i = i + 2\n    return True\n\ndef is_palindrome(num):\n    if num > 0:\n        s = str(num)\n        s = s[::-1]\n        if s == num:\n            return True\n    return False\n\ndef is_pandigital(num):\n    if len(str(num)) != 9:\n        return False\n    s = str(num)\n    i = 0\n    while i < len(s):\n        if s[i] not in \"123456789\":\n            return False\n        i = i + 1\n    return True\n\n\n# +", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(num):\n    if num <= 0:\n        raise ValueError(\"Invalid value for num\")\n    num &= (num-1)\n    num |= num >> 1\n    num |= num >> 2\n    num |= num >> 4\n    num |= num >> 8\n    num |= num >> 16\n    return num + 1\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    \"\"\"\n    This function returns the highest power of 2 less than or equal to given number.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n\n\n#Below is an example usage:\n\nimport math\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    This function returns the highest power of 2 less than or equal to given number.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n\n\n# Enter the number\nn = 10\n\n# Calling the function", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# higher order function\ndef highest_Power_of_2(n):\n    power_2 = 0\n    while n & 1 == 1:\n        power_2 += 1\n        n >>= 1\n\n    return power_2\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n\treturn int(n & (n-1))\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(number):\n    if number == 0:\n        return 0\n    while number & 1 == 0:\n        number = number >> 1\n    return number\n\n# -----------------------------------------------------\n# Test cases\n# -----------------------------------------------------\n\n# Test 1\nt = highest_Power_of_2(10)", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    i = 0\n    while (i<=n):\n        if (i & (i-1)) == 0:\n            i += 1\n        else:\n            return i\n\n\n#print(highest_Power_of_2(10))\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(number):\n    if number < 2:\n        return 1\n    else:\n        return 2 <<  highest_Power_of_2(number//2)\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n & (n - 1) != 0:\n        return -1\n    l = 0\n    while n != 1:\n        l += 1\n        n >>= 1\n    return l", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(number):\n    for i in range(2, number):\n        if number % i == 0:\n            break\n    if number != i:\n        return number\n    else:\n        return i\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(arr):\n    # make a list of the index positions of each max\n    indexes = []\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] > arr[i+1]:\n                indexes.append(i)\n        elif i == len(arr)-1:\n            if arr[i] > arr[i-1]:\n                indexes.append(i)\n        else:\n            if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                indexes.append(i)\n    return indexes\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(L):\n    L.sort()\n    for i in range(len(L)):\n        if L[i] != L[i-1]:\n            yield i\n\ndef test_position_max():\n    \"\"\"\n    Test cases for position_max\n    \"\"\"\n    assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(x):\n    max_value = max(x)\n    max_index = x.index(max_value)\n    return [max_index]\n\nposition_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n\n\n# +", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list):\n    # Set the index of the maximum element to a variable \n    max = 0\n    max_pos = []\n    # Set the variable index to the length of the list -1\n    index = len(list)-1\n    # Search through the list\n    while index >= 0:\n        # If the variable max is less than the element at index\n        if list[index] > list[max]:\n            # Set the variable max to the element at index\n            max = index\n        # If the variable max is greater than the element at index\n        elif list[index] < list[max]:\n            # Set the variable max to the element at index\n            max = index\n            # Set the variable index to the length of the list -1\n            index = len(list)-1\n        # Else\n        else:\n            # Set the variable index to the length of the list -1\n            index = len(list)-1\n    # Add the maximum index to the list of positions\n    max_pos.append(max)\n    return max_pos", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(nums):\n    return [i for i in range(len(nums)) if nums[i] == max(nums)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list):\n    if len(list) == 1:\n        return [0]\n    a = []\n    for i in range(len(list)):\n        if list[i] == max(list):\n            a.append(i)\n    return a\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(array):\n    max_list = []\n    for i in range(len(array)):\n        if max_list == []:\n            max_list.append(i)\n        elif max_list[-1] < array[i]:\n            max_list.append(i)\n    return max_list\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(nums):\n    # input: list of int\n    # output: list of int\n\n    max_index = []\n    for i in range(len(nums)):\n        if nums[i] == max(nums):\n            max_index.append(i)\n\n    return max_index\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    pos=list()\n    for i in range(len(lst)):\n        if i == 0:\n            if lst[i] > lst[i+1]:\n                pos.append(i)\n            else:\n                pass\n        elif i == len(lst) -1:\n            if lst[i] > lst[i-1]:\n                pos.append(i)\n            else:\n                pass\n        else:\n            if lst[i] > lst[i+1] and lst[i] > lst[i-1]:\n                pos.append(i)\n            else:\n                pass\n    return pos\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(a):\n    return [i for i, n in enumerate(a) if n == max(a)]\n\n#Tests"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    s = set(lst)\n    return len(lst) == len(s)\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    return lst.count(lst[0]) == len(lst)\n\n# Test Case", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\n# +\n# Solution\n\ndef chkList(a):\n    return a[0] == a[1] == a[2]\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    if lst.count(lst[0])==len(lst):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(arr):\n    return len(arr)==len(set(arr))\n\n\n# +", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    # Write your code here\n    s = set(lst)\n    return len(lst)==len(s)\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\n#Write your code here\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list):\n    if list[0] != list[1]:\n        return False\n    elif list[1] != list[2]:\n        return False\n    return True\n\n\n#\n# Test code\n#", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list):\n    pass\n\n#Passing the list\nlist = ['one','one','one']\n\n#Example Output\n# None\n\n#Warning: this code generation is experimental. Please inspect the code for any bugs before executing.", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n# Write your code here\ndef chkList(lst):\n    return lst.count(lst[0])==len(lst)\n\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    return \"\".join(i for i in s if i%2 !=0)\n\ndef remove_even2(s):\n    return \"\".join(i for i in s if i%2)\n\ndef remove_even3(s):\n    return s[::2]\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    result = \"\"\n    for i in string:\n        if i % 2 != 0:\n            result += i\n    return result\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str1):\n    str2 = []\n    for char in str1:\n        if char.isnumeric():\n            str2.append(char)\n\n    return \"\".join(str2)\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return \"\".join([x for x in string if x%2==0])\n\n#function to test\n#print remove_even(\"python\")==(\"pto\")\n\ndef remove_even_char(string):\n    return \"\".join([x for x in string if x%2!=0])\n\n#function to test\n#print remove_even_char(\"python\")==(\"yp\")\n\ndef remove_empty_str(string):\n    return \" \".join([x for x in string if x!=\"\"])\n\n#function to test\n#print remove_empty_str(\"a b c d\")==(\"a b c d\")\n\ndef is_ascii(string):\n    return len(string)<=64\n\n#function to test\n#print is_ascii(\"asdasd\")==True\n#print is_ascii(\"12345678901234567890123456789012\")==False\n\ndef remove_space(string):\n    return \" \".join(string.split())\n\n#function to test\n#print remove_space(\"a b c d\")==(\"a b c d\")\n\ndef remove_new_line(string):\n    return \"\".join(string.splitlines())\n\n#function to test\n#print remove_new_line(\"a\\nb\\nc\")==(\"abc\")\n\ndef remove_duplicates(string):\n    return \"\".join(list(set(string)))\n\n#function to test\n#print remove_duplicates(\"abbc\")==(\"ab\")\n\ndef is_palindrome(string):\n    return \"\".join(list(reversed(string)))==string\n\n#function to test\n#print is_palindrome(\"racecar\")==True\n#print is_palindrome(\"car\")==False\n\ndef is_anagram(string1,string2):\n    return \"\".join(sorted(string1))== \"\".join(sorted(string2))\n\n#function to test\n#print is_anagram(\"co\",\"do\")==True\n#print is_anagram(\"abc\",\"bca\")==True\n#print is_anagram(\"abc\",\"abd\")==False\n\ndef count_unique(string", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n\treturn ''.join(i for i in string if i%2==1)\n\ndef remove_even_v2(string):\n\t\"\"\"\n\tAnother approach is to filter the string\n\t\"\"\"\n\treturn ''.join([i for i in string if i % 2 == 1])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i%2 !=0:\n            result = result + string[i]\n    return result\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n\t'''\n\tRemove even characters from string\n\t'''\n\toutput = \"\"\n\tfor letter in string:\n\t\tif not letter%2 == 0:\n\t\t\toutput += letter\n\treturn output\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return ''.join([x for x in string if x % 2 == 0])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return string[1::2]\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    list_string = list(string)\n    new_string = \"\"\n    for item in list_string:\n        if item.isdigit():\n            continue\n        else:\n            new_string+=item\n    return new_string\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_distance(x, y):\n    # initialize variable\n    ans = 0\n    # traverse\n    for i in range(len(bin(x)[2:])):\n        if bin(x)[2:][i] == bin(y)[2:][i]:\n            ans += 1\n        else:\n            ans += 1\n    return ans\n\ndef hamming_distance_solution(x, y):\n    return bin(x ^ y).count('1')\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x, y):\n    count = 0\n    for i in range(len(bin(x))-2):\n        if bin(x)[i] != bin(y)[i]:\n            count += 1\n    return count\n\n# Input and Output\nx = 4\ny = 8", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x, y):\n    num_of_ones = 0\n    while x > 0:\n        if x & 1 == 1:\n            num_of_ones += 1\n        x = x >> 1\n\n    while y > 0:\n        if y & 1 == 1:\n            num_of_ones += 1\n        y = y >> 1\n\n    return num_of_ones\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(num1, num2):\n    assert type(num1) == int\n    assert type(num2) == int\n    return bin(num1 ^ num2).count(\"1\")\n\n# Asserting output for correctness\nnum1 = 4\nnum2 = 8", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a,b):\n    diff = a ^ b\n    count = 0\n    while diff:\n        count += diff & 1\n        diff >>= 1\n    return count\n\ndef main():\n    print(hamming_Distance(4,8))\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_distance(x,y):\n    if len(str(x)) != len(str(y)):\n        raise ValueError(\"Both the numbers should have the same number of digits\")\n\n    sum = 0\n    for i in range(len(str(x))):\n        if str(x)[i] != str(y)[i]:\n            sum = sum + 1\n\n    return sum\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_distance(x, y):\n    x_str = bin(x)[2:]\n    y_str = bin(y)[2:]\n    return sum(a != b for a, b in zip(x_str, y_str))\n\n\ndef main():\n    tests = [[1, 1], [1, 2], [10, 10], [100, 100], [1000, 1000], [4, 8], [420, 421]]\n    for x, y in tests:\n        print(f\"{x} and {y} is equal to {hamming_distance(x, y)}\")\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    if x==y:\n        return 0\n    elif x>y:\n        return x-y\n    else:\n        return y-x\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(n1, n2):\n    '''\n    This function takes two integers and calculates the hamming distance between them\n    '''\n    if n1 == n2:\n        return 0\n    else:\n        hamming = 0\n        if n1 > n2:\n            n1,n2 = n2,n1\n        for i in range(n1):\n            if n1 & 1:\n                hamming += 1\n            n1 = n1 >> 1\n            n2 = n2 >> 1\n        return hamming\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string,char):\n    return string.count(char)\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    count = 0\n    for s in string:\n        if s == char:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str,char):\n    count = 0\n    for i in str:\n        if i == char:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str, ch):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == ch:\n            count+=1\n    return count\n\n\n# +\ndef count(str, ch):\n    count = 0\n    for i in str:\n        if i == ch:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n\n# Test Case\nstring = \"abcc\"\nchar = \"c\"", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str, ch):\n    return str.count(ch)\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(text, char):\n    count = 0\n    for i in range(len(text)):\n        if char in text[i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(text, c):\n    \"\"\"\n    :param text: a string\n    :param c: a character\n    :return: the count of the given character\n    \"\"\"\n    count = 0\n    for i in range(len(text)):\n        if text[i] == c:\n            count += 1\n    return count\n\n#Below is an example usage:\n\n# Enter the string\ntext = \"abcc\"\n\n# Calling the function", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str, ch):\n    i = 0\n    while i<len(str):\n        if str[i] == ch:\n            i+=1\n        else:\n            i+=1\n    return i\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str, char):\n    count = 0\n    for i in str:\n        if i == char:\n            count = count + 1\n    return count\n\n\n# +"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tup):\n    sorted_tup = sorted(tup)\n    return tuple([sorted_tup.index(ele) for ele in tup if ele not in sorted_tup])\n\n# DO NOT MODIFY THIS FUNCTION\ndef test():\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\ntest()", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(list_of_elements):\n    l = list(list_of_elements)\n    l.sort()\n    inv = []\n    for i in range(len(l)):\n        if i*2 == len(l):\n            break\n        if l[i] > l[i*2]:\n            inv.append(l[i])\n    inv.append(l[i])\n    return inv\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list: tuple) -> tuple:\n    \"\"\"\n    Returns the inversions of tuple elements in the given tuple list.\n    \n    Parameters\n    ----------\n    tuple_list: tuple\n        A tuple of elements\n        \n    Returns\n    -------\n    tuple\n        A tuple of inversions of tuple elements in the given tuple list\n    \"\"\"\n    return sorted(set(list(tuple_list))-set(tuple_list), reverse=True)\n\n#Below is an example usage:\n\n# Enter the list\ntuple_list = (7, 8, 9, 1, 10, 7)\n\n# Calling the function", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    sorted_tuple_list = sorted(tuple_list)\n    inversion_list = []\n    for i in range(0, len(tuple_list)):\n        for j in range(i + 1, len(sorted_tuple_list)):\n            if tuple_list[i] > sorted_tuple_list[j]:\n                inversion_list.append((tuple_list[i], sorted_tuple_list[j]))\n                break\n    return inversion_list", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    if not tuple_list or len(tuple_list) == 1:\n        return tuple_list\n\n    result = []\n    for i in range(len(tuple_list)):\n        index = i\n        while index > 0 and tuple_list[index] < tuple_list[index-1]:\n            tuple_list[index], tuple_list[index-1] = tuple_list[index-1], tuple_list[index]\n            result.append(tuple_list[index])\n            index -= 1\n\n    return result\n\ndef main():\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert inversion_elements((1, 2, 3, 4, 5)) == (-1, -2, -3, -4, -5)\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(t):\n    l = len(t)\n    n = l//2\n    inversion = [None]*n\n    for i in range(n):\n        if t[i] > t[l-i-1]:\n            inversion[i] = t[i], t[l-i-1]\n    return inversion\n\n# testing code\nt1 = (7, 8, 9, 1, 10, 7)", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom typing import Tuple\n\n\ndef inversion_elements(tuple_list: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    Returns a tuple containing the inversions of the tuple elements.\n    \"\"\"\n    if not tuple_list:\n        return tuple_list\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                result.append(tuple_list[i])\n                result.append(tuple_list[j])\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nimport collections\n\n\ndef inversion_elements(tuplist):\n    \"\"\"\n    >>> inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    True\n    \"\"\"\n    inv_el = collections.Counter(tuplist).values()\n    return tuple([x for x in inv_el if x < 0])\n\n\n# def inversion_elements(tuplist):\n#     \"\"\"\n#     >>> inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n#     True\n#     \"\"\"\n#     inv_el = []\n#     for i in range(len(tuplist)):\n#         inv_el.append(tuplist[i] - tuplist[i + 1])\n#     return tuple(inv_el)\n\n\n# def inversion_elements(tuplist):\n#     \"\"\"\n#     >>> inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n#     True\n#     \"\"\"\n#     inv_el = []\n#     for i in range(len(tuplist)):\n#         if tuplist[i] > tuplist[i + 1]:\n#             inv_el.append(tuplist[i] - tuplist[i + 1])\n#     return tuple(inv_el)\n\n\n# def inversion_elements(tuplist):\n#     \"\"\"\n#     >>> inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n#     True\n#     \"\"\"\n#     tuplist =", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\n# the idea is to iterate over the list to find the elements that are not in their correct places and then to build a tuple with the inversions\n# the function is pretty much the same as for the standard merge sort\n# the base case is when the list contains only 2 elements\n# the recursive case is when the list contains more than 2 elements\ndef inversion_elements(list_):\n    if len(list_) <= 1:\n        return tuple()\n    else:\n        first_half = inversion_elements(list_[:len(list_) // 2])\n        second_half = inversion_elements(list_[len(list_) // 2:])\n        if len(first_half) != len(second_half):\n            return (list_[len(first_half) - 1], list_[len(first_half)], list_[len(first_half) + 1],\n                    list_[len(first_half) + 2], list_[len(first_half) + 3], list_[len(first_half) + 4])\n        else:\n            return first_half + second_half\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(elements):\n    #if the number of elements is odd, no inversions\n    if len(elements) & 1:\n        return 0\n    #if the number of elements is even, there are inversions\n    else:\n        return len(elements) // 2 - 1 + inversions(elements[:len(elements) // 2]) + inversions(elements[len(elements) // 2:])\n\n# Tests\n\ndef test_inversion_elements(test_case):\n    elements = test_case[0]\n    answer = test_case[1]\n    result = inversion_elements(elements)\n    if result == answer:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n    if result == 0:\n        print(\"inversions:\", end=' ')\n    else:\n        print(\"inversions:\", end=' ')\n    print(result)\n\ntest_cases = [\n    ((7, 8, 9, 1, 10, 7), 5),\n    ((1, 1), 0),\n    ((1, 1, 2, 3, 4, 5, 6, 7, 8, 9), 2)\n]\nfor test_case in test_cases:\n    test_inversion_elements(test_case)\n\n\n# -\n\n# ## Recursive Bisection Search\n#\n# A bisection search is an iterative search algorithm which divides the search space in half until the target is found. The halving process is recursively performed.\n#\n# The idea is to compare the value at the midpoint of the array with the given value and if they are equal, then the value is found. If they are not equal, then the array is divided into two subarrays (subarrays are defined by the start and end indices) and the midpoint of the subarrays are compared with the given value. This process is recursively performed until the target is found or the subarrays are of length 1.\n\n# +\n# Recursive Bise"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n# Write your code here\ndef concatenate_elements(seq):\n    return (\" \".join(seq)).split()\n\ndef concat(a, b):\n    return \" \".join([a, b])\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: list\n    \"\"\"\n    return [item + \" \" for item in tup]\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    return tuple(s+e for s,e in zip(tuples[:-1], tuples[1:]))\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple):\n    return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5]\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    new_list = []\n    for i in range(len(tup)):\n        if i == 0:\n            new_list.append(tup[i])\n        elif i == len(tup)-1:\n            new_list.append(tup[i])\n        else:\n            new_list.append(tup[i]+tup[i+1])\n    return new_list\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    return (\", \".join(tup))\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\n# my code\ndef concatenate_elements(input_string):\n    result = \"\"\n    for i in range(0,len(input_string),2):\n        result = result+input_string[i]+\" \"+input_string[i+1]\n    return result\n\n#answer\ndef concatenate_elements(input_string):\n    return ' '.join([x + ' ' + y for x, y in zip(input_string[::2], input_string[1::2])])\n\n# O(n) time | O(1) space\n# this is faster than the solution below and it uses a little less space\n\n# other code\ndef concatenate_elements(input_string):\n    output = []\n    for i in range(0, len(input_string) // 2):\n        output.append(input_string[2*i] + \" \" + input_string[2*i+1])\n    return \" \".join(output)\n\n# O(n) time | O(n) space", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(lst):\n    return \" \".join(lst)\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(elements):\n    print_list = []\n    for i in range(0, len(elements)):\n        if i == len(elements)-1:\n            print_list.append(elements[i] + elements[0])\n        else:\n            print_list.append(elements[i] + elements[i+1])\n    return print_list\n#print(concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")))", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(elements):\n    return \" \".join(elements)\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\n# Solution - O(n) time and O(n) space\ndef find_longest_repeating_subseq(input_str):\n\n    def find_subseq_len(subseq):\n        counter = Counter(subseq)\n        return len(set(counter.values()))\n\n    subseq_lengths = []\n    subseq_len = 0\n\n    for i in range(len(input_str) - 1):\n        subseq = input_str[i: i + 2]\n        if find_subseq_len(subseq) > 1:\n            subseq_len += 1\n        if subseq_len > subseq_lengths[-1]:\n            subseq_lengths.append(subseq_len)\n            subseq_len = 0\n\n    if subseq_len > subseq_lengths[-1]:\n        subseq_lengths.append(subseq_len)\n\n    return max(subseq_lengths)\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    length = len(s)\n    subs = set()\n    for i in range(1, length):\n        for j in range(0, i):\n            if s[j] == s[i]:\n                subs.add(s[j:i+1])\n    return max(len(x) for x in subs)\n\ndef main():\n    s = input()\n    print(find_longest_repeating_subseq(s))\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\n# Write your function here\n\ndef find_longest_repeating_subseq(string):\n    # Write your code here\n    longest_repeating_subseq = 0\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            if string[i] == string[j] and set(string[i:j+1]) != set(string[j:i:-1]):\n                longest_repeating_subseq = max(longest_repeating_subseq, len(string[i:j+1]))\n    return longest_repeating_subseq\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(text):\n    l = [text[i:i+2] for i in range(len(text)-1)]\n    l = list(set(l))\n    if not l:\n        return 0\n    l = [i for i in l if len(i) == len(text)]\n    print(l)\n    return max([len(i) for i in l])\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\nfrom itertools import combinations\n\n\ndef find_longest_repeating_subseq(seq):\n    # check if the given sequence is a substring of itself\n    if seq in seq:\n        return 1\n\n    # use dictionary to store the hash of each character\n    char_hash = {}\n    # for each character in the given sequence\n    for char in seq:\n        # if the character is not already present in the hash\n        if char not in char_hash:\n            # store the character and its hash\n            char_hash[char] = hash(char)\n        else:\n            # if the character is already present in the hash\n            # compare the hash value with the previous hash\n            # and if they are same, then increment the count\n            if char_hash[char] == hash(char):\n                char_hash[char] += 1\n            # if they are different, then update the hash\n            else:\n                char_hash[char] = hash(char)\n    # find the pairs of elements which have same hash\n    pair = list(combinations(char_hash.keys(), 2))\n    # for each pair of elements\n    for p in pair:\n        if char_hash[p[0]] == char_hash[p[1]]:\n            # remove the same pairs\n            pair.remove(p)\n    # for each pair of elements\n    for p in pair:\n        # find the length of the pair\n        if len(p) == 2:\n            # remove the pair from the original sequence\n            seq = seq.replace(p[0] + p[1], '', 1)\n    # return the length of the original sequence\n    return len(seq)\n\n\n# Driver Code", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom collections import Counter\n\ndef find_longest_repeating_subseq(string):\n    count = Counter(string)\n    longest = 0\n    for key in count:\n        if count[key] >= 3:\n            longest = max(longest, count[key])\n    return longest\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom typing import List\n\ndef find_longest_repeating_subseq(str_input: str) -> int:\n    \"\"\"\n    Given a string of characters, find the length of the longest repeating subsequences such that the two subsequences don't have same string characters at same positions.\n\n    Examples:\n        >>> find_longest_repeating_subseq(\"AABEBCDD\")\n        3\n        >>> find_longest_repeating_subseq(\"AAABEBCDD\")\n        3\n        >>> find_longest_repeating_subseq(\"ABACB\")\n        2\n        >>> find_longest_repeating_subseq(\"AABCB\")\n        1\n\n    Args:\n        str_input (str): Input string.\n\n    Returns:\n        int: Longest repeating subsequence length.\n\n    \"\"\"\n\n    # Compute LCS between the input string and all its prefixes.\n    max_length = 0\n    for i in range(len(str_input)):\n        length = find_longest_common_subseq(str_input, str_input[:i])\n        max_length = max(max_length, length)\n\n    return max_length\n\n\ndef find_longest_common_subseq(str_input: str, str_sub: str) -> int:\n    \"\"\"\n    Find the length of the longest common subsequence between the given string and the sub-string.\n\n    Examples:\n        >>> find_longest_common_subseq(\"AABEBCDD\", \"A\")\n        2\n        >>> find_longest_common_subseq(\"AABEBCDD\", \"E\")\n        2\n        >>> find_longest_common_subseq(\"AABEBCDD\", \"AEE\")\n        0\n        >>> find_longest_common_subseq(\"AABEBCDD\", \"ABE\")\n        3\n\n    Args:\n        str_input (str): Input string.\n        str_sub (str): Sub-string.\n\n    Returns:\n        int: Length of the longest common sub-sequence.\n\n    \"\"\"\n\n    if len(str_sub) > len(str_input):\n        return 0\n\n    dp = [[0] * (len(str_sub) + 1) for", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n\t\"\"\"\n\tFinds the longest repeating subsequence such that the two subsequences don't have same string characters at same positions.\n\t\"\"\"\n\n\t# Initialize a set to store the current subsequence and its length\n\tcurrent_subseq = set()\n\tcurrent_len = 0\n\n\t# Initialize a set to store the longest subsequence\n\tlongest_subseq = set()\n\n\t# Initialize a set to store the previous subsequence\n\tprevious_subseq = set()\n\n\t# Loop through the string\n\tfor i in range(len(string) - 1):\n\n\t\t# If the current character in the string is present in the previous subsequence,\n\t\t# then we move to the next character\n\t\tif string[i] in previous_subseq:\n\t\t\tprevious_subseq.remove(string[i])\n\t\t\tcontinue\n\n\t\t# Else, add the current character to the current subsequence\n\t\tcurrent_subseq.add(string[i])\n\t\tcurrent_len += 1\n\n\t\t# Add the current subsequence to the longest subsequence set if it is longer than the previous\n\t\tif current_len > len(longest_subseq):\n\t\t\tlongest_subseq = current_subseq\n\t\t\tprevious_subseq = current_subseq\n\t\t\tcurrent_subseq = set()\n\t\t\tcurrent_len = 0\n\n\t\t# If the current character is not present in the previous subsequence, then\n\t\t# the current subsequence can be added to the longest subsequence set\n\t\telse:\n\t\t\tlongest_subseq.add(current_subseq)\n\t\t\tprevious_subseq = longest_subseq\n\t\t\tcurrent_subseq = set()\n\t\t\tcurrent_len = 0\n\n\t# Add the current subsequence to the longest subsequence set if it is longer than the previous\n\tif current_len > len(longest_subseq):\n\t\tlongest_subseq = current_subseq\n\t\tprevious_subseq = current_subseq\n\t\tcurrent_subseq = set()\n\t\tcurrent_len =", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\nfrom itertools import combinations\n\ndef find_longest_repeating_subseq(input_string):\n\n    longest_repeat_subseq = 0\n    max_repeat_subseq = 0\n\n    for combo in combinations(input_string, 2):\n        # print(combo)\n        max_count = 0\n        for i in range(len(input_string)):\n            count = input_string.count(combo[0])\n            if count > max_count:\n                max_count = count\n        if max_count == 1:\n            longest_repeat_subseq += 1\n            if longest_repeat_subseq > max_repeat_subseq:\n                max_repeat_subseq = longest_repeat_subseq\n    return max_repeat_subseq\n\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\ndef is_decimal(num):\n    regex_pattern = \"^[0-9]+\\.[0-9]{1,2}$\"\n    return bool(re.search(regex_pattern, num))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\n# 3. Convert a string to an integer.\n\n# 4. Define a function to find the index of the first digit that is different from the previous digit.\n# For example, the function should return 1 for the number 123.456.\n\n# 5. Define a function to find the index of the first digit that is different from the next digit.\n# For example, the function should return 2 for the number 123.456.\n\n# 6. Define a function to find the length of the string by using regex.\n# For example, the function should return 6 for the string '123456'.\n\n# 7. Define a function that takes two strings as arguments and returns True if the second string is in the first one.\n# For example, is_substring('hello', 'ello') should return True.\n\n# 8. Define a function to delete all but the first word of a string.\n# For example, the function should return 'hello' for the string 'hello world'.\n\n# 9. Define a function that takes a string as an argument and returns a string with all the vowels in uppercase.\n# For example, the function should return 'HELL' for the string 'hello world'.\n\n# 10. Define a function that takes a string as an argument and returns a string with all the digits in uppercase.\n# For example, the function should return 'HELL' for the string 'hello world'.\n\n# 11. Define a function to add a string to the beginning of another string.\n# For example, the function should return 'Hello world' for the strings 'hello' and 'world'.\n\n# 12. Define a function to count the number of occurrences of a string in a string.\n# For example, the function should return 2 for the string 'hello' in the string 'hello world'.\n\n# 13. Define a function to count the number of characters in a string.\n# For example, the function should return 11 for the string 'hello world'.\n\n# 14. Define a function to", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\n\ndef is_decimal(number: str) -> bool:\n    return re.match(r\"^\\d+\\.\\d+$\", number) is not None\n\n\ndef test_is_decimal():\n    assert is_decimal(\"123.11\") is True\n    assert is_decimal(\"123.11.34\") is False\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\n\ndef is_decimal(number):\n    number = str(number)\n\n    if re.fullmatch(r'^[0-9]+\\.[0-9]+$', number):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\n\ndef is_decimal(n):\n    return re.match('^-?\\d+\\.\\d{1,2}$', n)\n\n\n# Tests:", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nfrom itertools import product\nfrom re import findall\n\n\ndef is_decimal(string: str) -> bool:\n    if len(string) == 0 or not isinstance(string, str):\n        return False\n    pattern = r\"\\d+.\\d+$\"\n    return findall(pattern, string)\n\n\ndef is_decimal_brute_force(string: str) -> bool:\n    if len(string) == 0 or not isinstance(string, str):\n        return False\n    for index in range(len(string) - 1):\n        if not string[index].isdigit():\n            continue\n        if string[index] == \".\":\n            if index == len(string) - 1:\n                return False\n            if string[index + 1].isdigit():\n                continue\n        else:\n            if not string[index + 1].isdigit():\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n# Solution:\ndef is_decimal(num):\n    if not re.search(r'^[0-9]+$', num): return False\n    for i in range(len(num)):\n        if not re.search(r'^[0-9]+$', num[:i+1]): return False\n    for i in range(len(num)):\n        if not re.search(r'^[0-9]+$', num[:i]) or not re.search(r'^[0-9]+$', num[i+1:]): return False\n    if re.search(r'^[0-9]+$', num) and re.search(r'^[0-9]+$', num[-2:]): return False\n    return True\n\n# Tests", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(string):\n    \"\"\"\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('123.111')\n    True\n    >>> is_decimal('123.1111')\n    True\n    >>> is_decimal('123.11111')\n    False\n    >>> is_decimal('123')\n    False\n    >>> is_decimal('123.1')\n    False\n    >>> is_decimal('123.11.')\n    False\n    >>> is_decimal('123.11e')\n    False\n    >>> is_decimal('123.11.')\n    False\n    >>> is_decimal('123.111.')\n    False\n    >>> is_decimal('123.1111.')\n    False\n    >>> is_decimal('123.11111.')\n    False\n    >>> is_decimal('123.111111.')\n    False\n    >>> is_decimal('123.1111111.')\n    False\n    >>> is_decimal('123.11111111.')\n    False\n    \"\"\"\n    match = re.match(r\"^-?[0-9]+(\\.[0-9]{1,2})?$\", string)\n    if match:\n        return True\n    return False", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\n\ndef is_decimal(decimal_string):\n    try:\n        float(decimal_string)\n        return True\n    except ValueError:\n        return False\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n# Solution\ndef is_decimal(num):\n    # Check if the number is equal to an integer\n    if int(num) == num:\n        return True\n    else:\n        # Get rid of all the characters other than the numbers\n        temp = num.replace('.','')\n        # Split the number into a list\n        numbers = temp.split()\n        # Check if there is any character other than a number in the list\n        for i in numbers:\n            if i.isdigit() == False:\n                return False\n        return True\n\n# Driver Code\nnum = input('Enter a number: ')"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,item):\n    root = heap[0]\n    heap[0] = item\n    i = 0\n    while i < len(heap):\n        i = i * 2 + 1\n        if i >= len(heap):\n            break\n        if i+1 < len(heap) and heap[i+1] < heap[i]:\n            i = i+1\n        if heap[i] < heap[0]:\n            heap[i], heap[0] = heap[0], heap[i]\n        else:\n            break\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap,item):\n    heap.append(item)\n    heapq._siftup(heap, len(heap)-1)\n    heapq._sift(heap, 0, len(heap)-1)\n    heapq._siftdown(heap, 0, len(heap)-1)\n    return heap\n\ndef heap_replace(heap,item):\n    heap[0]=item\n    heapq._siftup(heap, 0)\n    heapq._sift(heap, 0, len(heap)-1)\n    heapq._siftdown(heap, 0, len(heap)-1)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    heap.remove(item)\n    heapq.heappush(heap, item)\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nimport heapq\n\ndef heap_replace(heap, new_item):\n    \"\"\"\n    Insert a new item into the heap, delete the smallest item from the heap and return the smallest item in the heap.\n    :param heap: the heap\n    :param new_item: the new item\n    :return: the smallest item in the heap\n    \"\"\"\n    heapq.heappush(heap, new_item)\n    smallest = heapq.heappop(heap)\n    heapq.heappush(heap, smallest)\n    return smallest\n\n# heapq.heappush(heap, new_item)\n# smallest = heapq.heappop(heap)\n# heapq.heappush(heap, smallest)\n# heap[0]", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(A, value):\n    heapq.heappop(A)\n    heapq.heappush(A, value)\n    return A\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,item):\n    heap.append(item)\n    heapify(heap)\n    return heap.pop(0)\n    ", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nfrom heapq import heappush, heappop, heapify\n\ndef heap_replace(heap, item):\n    \"\"\"\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 21)\n    [21, 25, 23, 44, 39, 68, 89]\n    \"\"\"\n    heappush(heap,item)\n    heappop(heap)\n    return heap\n\ndef heap_replace_with_max(heap, item):\n    \"\"\"\n    >>> heap_replace_with_max([25, 44, 68, 21, 39, 23, 89], 21)\n    [25, 21, 39, 23, 44, 68, 89]\n    \"\"\"\n    heap.append(item)\n    heapify(heap)\n    return heap", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    heap.append(item)\n    heapify(heap)\n    heap.pop(0)\n    return heap\n\n#assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string: str) -> bool:\n    return re.search(r'^[a-z0-9A-Z]{8}$', string) is not None\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n# Write your code here\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string):\n    # Write your code here.\n    reg = '^[a-zA-Z0-9]+$'\n    if re.match(reg, string):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    regex = re.compile(\"[a-z0-9]+\")\n    return bool(regex.fullmatch(string))", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\n# my solution\ndef is_allowed_specific_char(string):\n    for char in string:\n        if not char.isalpha() and not char.isnumeric():\n            return False\n\n    return True\n\n\n# others solution\ndef is_allowed_specific_char(string):\n    regex = re.compile(r\"^[a-z0-9]+$\")\n    return regex.match(string) is not None", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n    pattern = re.compile('^[a-z]{1,30}$')\n    return re.match(pattern, string)\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(s):\n    pattern = '[a-z0-9A-Z]+'\n    return bool(re.search(pattern, s))", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\n\ndef is_allowed_specific_char(string_input):\n    if not string_input:\n        return False\n    return re.match(\"^[a-zA-Z0-9]*$\", string_input)\n\n\ndef is_allowed_specific_char_2(string_input):\n    if not string_input:\n        return False\n    return all(c in \"abcdefghijklmnopqrstuvwxyz0123456789\" for c in string_input)\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(s):\n    char_list = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n    if re.match(\"[a-zA-Z0-9]*\", s) != None:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(str):\n    if re.search(r'^[a-zA-Z0-9]*$', str):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    count = 0\n    if num == 0:\n        return 0\n    elif num & 1 == 0:\n        count += 1\n    if (num & 1) == 0:\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_num(n):\n    c = 0\n    while n:\n        if n & 1:\n            c += 1\n        n >>= 1\n    return c\n\n\n# n = 0\n# while n < 2000000000:\n#     if n & 1:\n#         print(n)\n#     n += 1", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(2**n):\n        if n&1 == 1:\n            count += 1\n        n>>=1\n    return count\n\n# print(count_Num(1))\n# print(count_Num(2))\n# print(count_Num(3))\n# print(count_Num(4))\n# print(count_Num(5))\n# print(count_Num(6))\n\ndef count_Num2(n):\n    count = 0\n    for i in range(2**n):\n        if i&1 == 1:\n            if i&n == n:\n                count += 1\n        i>>=1\n    return count\n\n# print(count_Num2(1))\n# print(count_Num2(2))\n# print(count_Num2(3))\n# print(count_Num2(4))\n# print(count_Num2(5))\n# print(count_Num2(6))\n\ndef count_Num3(n):\n    count = 0\n    for i in range(2**n):\n        if bin(i)[-1] == '1':\n            if bin(i)[-n] == '1':\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        return count_Num(n-1)+count_Num(n//2)\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    count = 0\n    for i in range(2,num):\n        if num & i == 0:\n            count = count + 1\n    return count\n\ndef test():\n    assert count_Num(2) == 1\n    assert count_Num(13) == 2\n    assert count_Num(6) == 1\n    assert count_Num(15) == 3\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    ans = 0\n    for i in range(1, n+1):\n        if (i & (i - 1)) == 0 and ((i >> 1) & (i >> 1 - 1)) == 0:\n            ans += 1\n    return ans\n\n# Main Code:\n\n# Testing the function:", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(2, n):\n        if (i & 1) == 1 and (i & n) == n:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    return sum(bin(x).count('1')==2 for x in range(1, n+1))\n\ndef main():\n    print(count_Num(2))\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n# class Solution(object):\n#     def count_Num(self, n):\n#         count = 0\n#         for i in range(n):\n#             if(n&(1<<i)):\n#                 count+=1\n#         return count\n\n#     def count_Num(self, n):\n#         count = 0\n#         for i in range(n):\n#             if(n%2==1 and i%2==0):\n#                 count+=1\n#             elif(n%2==0 and i%2==1):\n#                 count+=1\n#         return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    answer = 0\n    for i in range(1,n+1):\n        if (i&(1<<n) != 0 and i&(1<<(n-1)) != 0):\n            answer += 1\n    return answer\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum([pow(i,4) for i in range(1,n+1)])\n\ndef run_tests():\n    assert fourth_Power_Sum(2) == 17\n    assert fourth_Power_Sum(10) == 500500\n    assert fourth_Power_Sum(100) == 12660663122709480577\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n#create a function for fourth_Power_Sum\ndef fourth_Power_Sum(n):\n    s = 0\n    for i in range(1, n+1):\n        s = s + i**4\n    return s\n\n#calling the function", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum([i**4 for i in range(1,n+1)])\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**4)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    result = 0\n    for i in range(1,n+1):\n        result += i**4\n    return result\n\ndef main():\n    print(f\"4th power sum of {2} is {fourth_Power_Sum(2)}\")\n    print(f\"4th power sum of {3} is {fourth_Power_Sum(3)}\")\n    print(f\"4th power sum of {4} is {fourth_Power_Sum(4)}\")\n    print(f\"4th power sum of {5} is {fourth_Power_Sum(5)}\")\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**4\n    return sum", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum = sum + i**4\n    return sum\n\n# TESTING THE FUNCTION", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i*i*i\n    return sum\n\n# Driver Code\nn = 2"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(a, b):\n    \"\"\"Concatenate string tuples.\"\"\"\n    return (a[0] + \" \" + b[0],\n            a[1] + \" \" + b[1],\n            a[2] + \" \" + b[2])\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef concatenate_strings(a, b):\n    \"\"\"Concatenate string tuples.\"\"\"\n    return (a[0] + \" \" + b[0],\n            a[1] + \" \" + b[1],\n            a[2] + \" \" + b[2])\n\n# Enter the string tuples\na = (\"Manjeet\", \"Nikhil\", \"Akshat\")\nb = (\" Singh\", \" Meherwal\", \" Garg\")\n\n# Calling the function", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(a, b):\n    a_string = \"\".join(a)\n    b_string = \"\".join(b)\n    return a_string, b_string\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(a, b):\n    \"\"\"Concatenate the two tuple of string\"\"\"\n    output = []\n    for i in range(len(a)):\n        output.append(a[i] + b[i])\n    return output\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuples):\n    return tuple(a+b for a, b in zip(tuples[0], tuples[1]))", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(string_tuple_1, string_tuple_2):\n    if string_tuple_1 == tuple([]):\n        return tuple(string_tuple_2)\n    if string_tuple_2 == tuple([]):\n        return tuple(string_tuple_1)\n    elif len(string_tuple_1) == 0:\n        return tuple(string_tuple_2)\n    elif len(string_tuple_2) == 0:\n        return tuple(string_tuple_1)\n    else:\n        return (string_tuple_1[0], string_tuple_2[0], concatenate_strings(string_tuple_1[1:], string_tuple_2[1:]))\n    \n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(*args):\n    list_of_strings = []\n    for i in range(len(args[0])):\n        list_of_strings.append(args[0][i] + ' ' + args[1][i])\n    return list_of_strings\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    \"\"\"\n    Write a function to perform the concatenation of two string tuples.\n    \"\"\"\n    return tuple(t1 + t2 for t1, t2 in zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(s1, s2):\n    return tuple([s1[i] + s2[i] for i in range(3)])\n\ns1 = (\"Manjeet\", \"Nikhil\", \"Akshat\")\ns2 = (\" Singh\", \" Meherwal\", \" Garg\")\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(*args):\n    res = []\n    for i in args:\n        res.append(i[0] + \" \" + i[1] + \" \" + i[2])\n    return res\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(strings1, strings2):\n    lst = []\n    for i in range(len(strings1[0])):\n        lst.append(strings1[0][i] + strings2[0][i])\n    for j in range(len(strings1)):\n        for k in range(len(strings1[0])):\n            lst.append(strings1[j][k] + strings2[j][k])\n    return lst\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(rad):\n    degrees = rad*180/np.pi\n    return degrees\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radians):\n    \"\"\"\n    Function that converts radians to degrees.\n    :param radians:  in radians\n    :return: degrees\n    \"\"\"\n    degrees = radians * 180/3.14159\n    return degrees\n\n\n# +", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    \"\"\"\n    \u5f15\u6570\uff1aradian(\u6570\u5024)\n    \u623b\u308a\u5024\uff1adegree(\u6570\u5024)\n\n    \u6570\u5b66\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3088\u3046\u306b\u3001\u89d2\u5ea6\u306e\u5909\u63db\u306f radian(\u30e9\u30b8\u30a2\u30f3) \u2192 degree(\u5ea6)\n    \u6b63\u5f26\u5b9a\u7406(sin^2(x) + cos^2(x) = 1)\u306b\u3088\u308a\u3001\n    radian(x) \u2192 degree(x) = 180\u00b0/\u03c0 * radian(x) \u3068\u3044\u3046\u76f8\u4f3c\u3092\u4f7f\u3046\n    \"\"\"\n    return 180/np.pi * radian\n\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\nimport math\n\ndef degree_radian(angle):\n    return math.radians(angle)\n\n\n# function\n\ndef degree_radian(angle):\n    return math.radians(angle)\n\n# test", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(x):\n    \"\"\"\n    Arguments:\n    x -- A float.\n\n    Returns:\n    A float.\n\n    Raises:\n    No Exception.\n\n    \"\"\"\n    return (x*180/math.pi)\n\n\n# +\ndef degree_radian(x):\n    \"\"\"\n    Arguments:\n    x -- A float.\n\n    Returns:\n    A float.\n\n    Raises:\n    No Exception.\n\n    \"\"\"\n    return (x*180/math.pi)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\nfrom math import degrees\n\ndef degree_radian(radian):\n    \"\"\"\n    :param radian: a float representing radians\n    :return: a float representing degrees\n    \"\"\"\n    degree = degrees(radian)\n    return degree\n\ndef degree_radian(radian):\n    \"\"\"\n    :param radian: a float representing radians\n    :return: a float representing degrees\n    \"\"\"\n    degree = radians(radian)\n    degree = degrees(degree)\n    return degree", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(angle_radian):\n    \"\"\"\n    Taking in an angle in radians, return angle in degrees\n    \"\"\"\n    return angle_radian * 180 / np.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\nfrom math import radians\ndef degree_radian(degree):\n    \"\"\"\n    Takes the degree as input and returns the radian as output.\n    \"\"\"\n    radian = radians(degree)\n    return radian\n\n# Test cases\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(rad):\n    degree = rad*180/math.pi\n    return degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\nimport math\n\ndef degree_radian(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x*math.pi/180\n\ndef degree_radian_1(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi/180)\n\ndef degree_radian_2(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_3(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_4(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_5(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_6(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_7(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_8(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_9(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_10(x):\n    \"\"\"\n    The degree to radian converstion function.\n    \"\"\"\n    return x * (math.pi / 180)\n\ndef degree_radian_11(x):\n    \"\"\"\n    The degree to radian conver"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\nfrom typing import List\n\ndef decode_list(li):\n    \"\"\"\n    This function works by looking at the length of the number that is repeated\n    and then adding that number to the result. The function then adds the length\n    of the list to the result. The function then goes back through the list\n    adding the next number in the list to the result.\n    :param li: A list\n    :return: The decoded list\n    \"\"\"\n    if not li:\n        return []\n    result = []\n    i = 0\n    for number in li:\n        if i:\n            result.append(number)\n        else:\n            result.append(number)\n            result.append(number)\n        i += 1\n    result.append(li[len(li) - 1])\n    return result\n\ndef decode_list_2(li):\n    \"\"\"\n    This function works by looking at the length of the number that is repeated\n    and then adding that number to the result. The function then goes back through\n    the list adding the next number in the list to the result.\n    :param li: A list\n    :return: The decoded list\n    \"\"\"\n    if not li:\n        return []\n    result = []\n    i = 0\n    for number in li:\n        if i:\n            result.append(number)\n        else:\n            result.append(number)\n            result.append(number)\n        i += 1\n    result.append(li[len(li) - 1])\n    return result\n\ndef decode_list_3(li):\n    \"\"\"\n    This function works by looking at the length of the number that is repeated\n    and then adding that number to the result. The function then goes back through\n    the list adding the next number in the list to the result.\n    :param li: A list\n    :return: The decoded list\n    \"\"\"\n    if not li:\n        return []\n    result = []\n    i = 0\n    number = 0\n    for number in li:\n        if i:\n            result.append(number)\n        else:\n            result.append(number)\n            result.append(number)\n        i += 1", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(l):\n    if len(l)==1:\n        return l\n    else:\n        return [l[0]] + decode_list(l[1::2]) + [l[1::2]]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n# take the pair and concatenate them\ndef decode_list(in_list):\n    return [item[0] * item[1] for item in zip(in_list[::2], in_list[1::2])]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(run_list):\n    decoded = []\n    for item in run_list:\n        if type(item)==list:\n            decoded.extend(decode_list(item))\n        else:\n            decoded.extend([item] * item)\n    return decoded", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(numbers):\n    result = []\n    current_number = numbers[0]\n    current_count = 1\n    for number in numbers[1:]:\n        if number == current_number:\n            current_count += 1\n        else:\n            result.append(current_count)\n            result.append(current_number)\n            current_count = 1\n            current_number = number\n    result.append(current_count)\n    result.append(current_number)\n    return result", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(my_list):\n    new_list = []\n    for item in my_list:\n        if isinstance(item, list):\n            new_list.extend(decode_list(item))\n        else:\n            new_list.extend([item] * item[1])\n    return new_list\n\n\n#assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(lst):\n    return [i*j for i,j in lst]\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    new_list = []\n    for i in l:\n        if type(i)==list:\n            new_list.append(i)\n        else:\n            new_list.extend([i]*i)\n    return new_list\n\n# Test", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(lst):\n    \"\"\"\n    lst is a list\n    return a list which is the decoded list.\n    \"\"\"\n    if not lst:\n        return lst\n    sublist = []\n    if not lst[-1]:\n        sublist = lst.pop(-1)\n        sublist = sublist * lst[-1]\n        return decode_list(sublist)\n    if not lst[-1][0]:\n        return lst\n    sublist = lst.pop(-1)\n    sublist = sublist[0] * lst[-1]\n    return decode_list(sublist) + decode_list(lst)\n\n\ndef main():\n    \"\"\"\n    Do not edit this code. It is for testing and debugging purposes.\n    \"\"\"\n    lst = [[1, 1], 2, 3, [2, 4], 5,1]\n    print decode_list(lst)\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(numbers):\n    \"\"\"\n    :param numbers: list\n    :return: list\n    \"\"\"\n    result = []\n    for n in numbers:\n        if isinstance(n, list):\n            result.extend([n[0]] * n[1])\n        else:\n            result.append(n)\n    return result\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    l1 = len(list1)\n    l2 = len(list2)\n    if l1 > l2:\n        return False\n    else:\n        for i in range(l2):\n            sub = list2[i]\n            for x in sub:\n                if x not in list1:\n                    return False\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(s, l):\n    for i in range(len(s)):\n        if s[i] not in l[i]:\n            return False\n    return True\n# print(check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]))", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)):\n        if list1[i] not in list2[0]:\n            return False\n        list2 = list2[1:]\n    return check_subset_list(list1[1:],list2)\n\n\ncheck_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(parent_list,children_list):\n    parent_list = sorted(parent_list)\n    children_list = sorted(children_list)\n    return children_list == parent_list[:len(children_list)]\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    if len(list1)==0:\n        return True\n    if len(list2)==0:\n        return False\n    if list1[0] in list2[0]:\n        return check_subset_list(list1[1:],list2[1:])\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(lis,sublis):\n    if sublis == []:\n        return True\n    elif lis == []:\n        return False\n    else:\n        for i in lis:\n            if i in sublis:\n                sublis.remove(i)\n            else:\n                return False\n    return False", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(ls1, ls2):\n    \"\"\"Returns True if list is subset of another list\"\"\"\n    # ls1: list that you want to check\n    # ls2: list to check with\n    if (ls1==ls2):\n        return True\n    else:\n        for i in ls2:\n            if (i not in ls1):\n                return False\n        return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(arr, lst):\n    temp = []\n    for item in lst:\n        for x in item:\n            if x not in temp:\n                temp.append(x)\n    for i in arr:\n        if i not in temp:\n            return False\n    return True", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(l1, l2):\n    \"\"\"\n    Recursive function to check if all elements from l1 are also in l2\n    :param l1: first list\n    :param l2: second list\n    :return: True if l1 is a subset of l2, False otherwise\n    \"\"\"\n    if not l2:\n        return True\n    return l1[0] in l2[0] and check_subset_list(l1[1:], l2[1:])\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    char_set = set()\n    for i in string:\n        if i in char_set:\n            return i\n        else:\n            char_set.add(i)\n    return \"\"\n\nstring = \"Google\"", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\nfrom collections import Counter\n\ndef first_Repeated_Char(text):\n    cnt = Counter(text)\n    for char in cnt:\n        if cnt[char] > 1:\n            return char\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str_input):\n    for i in range(len(str_input)):\n        if i+1<len(str_input):\n            if str_input[i] == str_input[i+1]:\n                return str_input[i]\n    return \"Not Found\"\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    char_set = set(str)\n    for i in char_set:\n        if char_set.count(i) > 1:\n            return i\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n\tstr_array = list(string)\n\tfor i in range(0,len(str_array)):\n\t\tif str_array[i] != str_array[i+1]:\n\t\t\tcontinue\n\t\telse:\n\t\t\treturn str_array[i]\n\treturn str_array[0]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\n# +\ndef first_Repeated_Char(string):\n    # Create a list of the unique characters in the string.\n    unique = list(set(list(string)))\n    \n    # For each character in the string, check if the character is in the unique list.\n    for char in string:\n        if char in unique:\n            return char\n        \nfirst_Repeated_Char(\"Google\")\n\n\n# -\n\n# ### 2. Write a python function to find the first non-repeating character in a given string.\n#\n# assert first_non_repeating_Char(\"Google\") == \"G\"\n\n# +\ndef first_non_repeating_Char(string):\n    # Create a list of the unique characters in the string.\n    unique = list(set(list(string)))\n    \n    # For each character in the string, check if the character is in the unique list.\n    for char in string:\n        if char not in unique:\n            return char\n        \nfirst_non_repeating_Char(\"Google\")\n# -\n\n# ### 3. Write a python function to find the first non-repeating character in a given string.\n#\n# assert first_non_repeating_Char(\"Google\") == \"G\"\n\n# +\n# Create a list of the unique characters in the string.\nunique = list(set(list(string)))\n\n# For each character in the string, check if the character is in the unique list.\nfor char in string:\n    if char not in unique:\n        return char\n    \nfirst_non_repeating_Char(\"Google\")\n# -\n\n# ### 4. Write a python function to find the first non-repeating character in a given string.\n#\n# assert first_non_repeating_Char(\"Google\") == \"G\"\n\n# +\n# Create a list of the unique characters in the string.\nunique = list(set(list(string)))\n\n# For each character in the string, check if the character is in the unique list.\nfor char in string:\n    if char not in unique:\n        return char\n        \nfirst_non_repeating_Char(\"Google\")\n# -\n\n# ### 5", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str):\n  for i in str:\n    if str.count(i) > 1:\n      return i\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    first_char = string[0]\n    for char in string:\n        if char == first_char:\n            return char\n    return first_char\n\n#Below is an example usage:\n\n# Enter the string\nstring = \"Google\"\n\n# Calling the function", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(s):\n    for i in range(len(s)):\n        if s[i] not in s[i+1:]:\n            return s[i]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    return str[0] if len(set(str))==1 else str[0] if str[1]==str[0] else first_Repeated_Char(str[1:])\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n# min_Operations function\ndef min_Operations(num1, num2):\n\n    # creating two variables for first number and second number\n    a = num1\n    b = num2\n\n    # comparing the value of first number with second number\n    if a > b:\n        b, a = a, b\n\n    # creating variable for the answer\n    min_ = 0\n\n    # looping through the second number\n    for i in range(1, b+1):\n\n        # if the first number is divisible by the second number then\n        if a % i == 0:\n\n            # if the answer is less than the current answer then\n            if min_ > a // i:\n\n                # update the answer to the current value\n                min_ = a // i\n\n    # return the answer\n    return min_\n\n\n# Driver Code\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(m,n):\n    def swap(m,n):\n        if m>n:\n            temp = m\n            m = n\n            n = temp\n        return m,n\n\n    def get_gcd(m,n):\n        if m == 0:\n            return n\n        return get_gcd(n%m,m)\n\n    def get_lcm(m,n):\n        lcm = m*n//get_gcd(m,n)\n        return lcm\n\n    m,n = swap(m,n)\n    gcd = get_gcd(m,n)\n    lcm = get_lcm(m,n)\n    if m == n:\n        return 0\n    if m==0:\n        return n//gcd\n    if n==0:\n        return m//gcd\n    return min(m//gcd,n//gcd) + min(m%gcd,n%gcd) + lcm//gcd\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n# Solution\ndef min_Operations(x,y):\n    return x-y if x > y else y-x\n\n# Test", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x,y):\n    return abs(x-y)\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_operations(num1,num2):\n    if num1<num2:\n        temp = num1\n        num1 = num2\n        num2 = temp\n    if num1 == num2:\n        return 0\n    else:\n        return num1 + min_operations(num2-num1, num1)\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    if a == b:\n        return 0\n    if a > b:\n        a,b = b,a\n    if a == 1:\n        return b\n    if b == 1:\n        return a\n    a -= 1\n    b -= 1\n    diff = (b - a)\n    count = 0\n    while diff != 0:\n        if diff & 1:\n            a += 1\n        else:\n            b += 1\n        diff = diff >> 1\n        count += 1\n    return count\n\n# test case\na = 2\nb = 4", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a,b):\n    if a<b:\n        d = b-a\n    else:\n        d = a-b\n    if d==0:\n        return 0\n    k = 0\n    while d>0:\n        d = d // 2\n        k = k + 1\n    return k\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a,b):\n    return a+b\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a, b):\n    # Add code here\n    return 0\n\n# do not edit below this line\ndef test_min_Operations():\n    assert min_Operations(2,4) == 1\n    assert min_Operations(10,1) == 4\n    assert min_Operations(2,10) == 1\n    assert min_Operations(10,10) == 0\n\n# do not edit above this line\ntest_min_Operations()\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(n1, n2):\n    if n1 == n2:\n        return 0\n    elif n1 > n2:\n        return n2 - n1\n    else:\n        return n1 - n2\n\n\ndef main():\n    print(\"Minimum Operations required to make two numbers equal\")\n    n1 = int(input(\"Enter the first number: \"))\n    n2 = int(input(\"Enter the second number: \"))\n    print(min_Operations(n1, n2))\n\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(l, k):\n    \"\"\"\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 2)\n    (3, 5, 8, 20)\n    \"\"\"\n    temp = sorted(l, reverse=True)[:k]\n    return temp[::-1] + temp\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tuple_obj, k):\n    max_elements = []\n    min_elements = []\n    for i in range(k):\n        max_elements.append(max(tuple_obj))\n        min_elements.append(min(tuple_obj))\n        tuple_obj.remove(max(tuple_obj))\n    return max_elements, min_elements\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\n# SOLUTION:\ndef extract_min_max(tuple_in, k):\n    # write your code here\n    # return list of k min and k max elements\n    return tuple_in[0:k], tuple_in[-k:]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tup, k):\n    # complete this function\n    # min_list = []\n    # max_list = []\n    # list = tup\n    # for i in range(len(tup)):\n    #     if i % 2 == 0:\n    #         min_list.append(list[i])\n    #     else:\n    #         max_list.append(list[i])\n    # print(min_list, max_list)\n    # return (min_list, max_list)\n    k = min(k, len(tup))\n    min_list = tup[::2]\n    max_list = tup[1::2]\n    return (min_list[0:k], max_list[0:k])\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(a, k):\n    return min(a[:k]), max(a[-k:])\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nimport random\n\ndef extract_min_max(tup, k):\n    min_val = max_val = tup[0]\n    for i in range(1, len(tup)):\n        if tup[i] < min_val:\n            min_val = tup[i]\n        elif tup[i] > max_val:\n            max_val = tup[i]\n    return min_val, max_val, random.choice(tup[:k]), random.choice(tup[-k:])\n\n#Code ends here", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tuple_to_scan, k):\n    \"\"\"\n    Args:\n        tuple_to_scan: A tuple to scan.\n        k: An integer to determine the size of the output tuple.\n\n    Returns:\n        tuple: A tuple of size k containing the k min and max elements of tuple_to_scan.\n\n    >>> tuple_to_scan = (5, 20, 3, 7, 6, 8)\n    >>> k = 2\n    >>> extract_min_max(tuple_to_scan, k)\n    (3, 5, 8, 20)\n    \"\"\"\n    # Your code goes here\n    if k > len(tuple_to_scan):\n        k = len(tuple_to_scan)\n    min_value = tuple_to_scan[0]\n    max_value = tuple_to_scan[0]\n    for i in range(1, k):\n        if tuple_to_scan[i] > max_value:\n            max_value = tuple_to_scan[i]\n        elif tuple_to_scan[i] < min_value:\n            min_value = tuple_to_scan[i]\n    return min_value, max_value, tuple_to_scan[k], tuple_to_scan[-k]\n\n\n# Tests\nimport doctest\ndoctest.testmod()", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nimport unittest\nimport random\n\nfrom typing import Tuple\n\n\ndef extract_min_max(arr: Tuple, k: int) -> Tuple:\n    min_heap = [val for val in arr]\n    heapq.heapify(min_heap)\n    max_heap = [val for val in arr]\n    heapq.heapify(max_heap)\n\n    min_heap = min_heap[:k]\n    max_heap = max_heap[:k]\n\n    for i in range(len(max_heap)):\n        heapq.heappush(min_heap, heapq.heappop(max_heap))\n\n    return min_heap, max_heap\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(arr, k):\n    \"\"\"\n    Use heapq to get the max and min values and pop them out from the queue.\n    \"\"\"\n    max_heap = []\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, arr[i])\n        heapq.heappush(max_heap, arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, arr[i])\n        else:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arr[i])\n\n    return tuple(min_heap + max_heap)\n\n\ndef test_extract_min_max():\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nimport pytest\n\n\ndef test_max_min_elements():\n    list1 = [5, 20, 3, 7, 6, 8]\n    list2 = [5, 20, 3, 7, 6, 8]\n    list3 = [3, 5, 8, 20]\n    list4 = [3, 5, 8, 20]\n    assert list1 == list2 == list3 == list4\n\n\ndef max_min(tup, k):\n    max_elem = max(tup)\n    min_elem = min(tup)\n    return max_elem, min_elem\n\n\ndef test_max_min_elements_passed():\n    max_elem, min_elem = max_min((5, 20, 3, 7, 6, 8), 2)\n    assert max_elem == 8\n    assert min_elem == 3\n\n\ndef test_max_min_elements_length():\n    with pytest.raises(ValueError):\n        max_min((5, 20, 3, 7, 6, 8), -1)\n\n\ndef test_max_min_elements_none():\n    with pytest.raises(TypeError):\n        max_min(None, 2)"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(text,n):\n    d=0\n    s=\"\"\n    for i in text:\n        if i.isalpha():\n            s=s+i\n        elif i==\" \":\n            d+=1\n        elif i==\",\" or i==\".\" or i==\"\\t\":\n            d+=1\n            if d>n:\n                s=s+\":\"\n    return s\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(s,n):\n    i = 0\n    j = 0\n    while(i < len(s)):\n        if(s[i] == ' ' or s[i] == ',' or s[i] == '.'):\n            j = 0\n        elif(j == 0):\n            s[j] = s[i]\n            j += 1\n        i += 1\n    i = 0\n    while(i < j):\n        if(j-i+1 > n):\n            s[i] = ':'\n        i += 1\n    return \"\".join(s)", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\nimport re\n\ndef replace_max_specialchar(string, n):\n    \"\"\"\n    Replace maximum occurrences of spaces, commas, or dots with a colon.\n    \n    >>> replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    True\n    >>> replace_max_specialchar('Python language, Programming language.',1)==('Python:language, Programming language.')\n    True\n    >>> replace_max_specialchar('Python language, Programming language.',0)==('Python language, Programming language.')\n    True\n    >>> replace_max_specialchar('Python language, Programming language.',-1)==('Python language, Programming language.')\n    True\n    >>> replace_max_specialchar('Python language, Programming language.',-2)==('Python language, Programming language.')\n    True\n    >>> replace_max_specialchar('Python language, Programming language.',-3)==('Python language, Programming language.')\n    True\n    >>> replace_max_specialchar('Python language, Programming language.',-4)==('Python language, Programming language.')\n    True\n    \"\"\"\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Parameter n must be an integer.\")\n\n    # Initialize the number of replacements\n    num_replacements = 0\n\n    # Check if string is a string\n    if not isinstance(string, str):\n        raise ValueError(\"Parameter string must be a string.\")\n\n    # Check if n is greater than 0\n    if n <= 0:\n        raise ValueError(\"Parameter n must be greater than 0.\")\n\n    # Check if string contains spaces, commas, or dots\n    if not re.search('[ ,\\.]', string):\n        return string\n\n    # If string contains spaces, commas, or dots\n    while re.search('[ ,\\.]', string) and num_replacements < n:\n        # If the number of replacements is less than n,\n        # replace a space, comma, or dot with a colon\n        string = re.sub('[ ,\\.]', ': ', string)\n        num_replacements += 1\n    # If the number of replacements is equal to or greater than n,\n    # return the string as is\n    if num_replacements >= n:", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(text, max):\n    if len(text) > 0:\n        for i in range(0, max):\n            if text.count(\" \") >= 1:\n                text = text.replace(\" \", \":\")\n            elif text.count(\",\") >= 1:\n                text = text.replace(\",\", \":\")\n            elif text.count(\".\") >= 1:\n                text = text.replace(\".\", \":\")\n    return text", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(text,n):\n    special = [' ','.','(',')']\n    for char in text:\n        if char in special:\n            replace_char = char\n            # count the number of occurences\n            count = 0\n            i = 0\n            while i < len(text):\n                if text[i] == replace_char:\n                    count += 1\n                i += 1\n            if count>n:\n                text = text.replace(replace_char,':',count-n)\n    return text", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str, n):\n    str = str.split()\n    for word in str:\n        i = 0\n        while i < len(word):\n            if word[i] == ' ':\n                word[i] = ':'\n            elif word[i] == ',':\n                word[i] = ':'\n            elif word[i] == '.':\n                word[i] = ':'\n            i+=1\n    return ' '.join(str)\n\n# replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\nimport re\n\ndef replace_max_specialchar(str, n):\n    # Write your code here\n    # print(str)\n    str=re.sub(r' ',r':',str)\n    str=re.sub(r',',r':',str)\n    str=re.sub(r'.',r':',str)\n    return str\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(s, n):\n    #Complete the function\n    \"\"\"\n    >>> replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    True\n    >>> replace_max_specialchar('Python language, Programming language.',0)==('Python language, Programming language.')\n    True\n    >>> replace_max_specialchar('Python language, Programming language.',1)==('Python language, Programming language.')\n    True\n    \"\"\"\n    return re.sub(r'([\\s\\d,\\.]+)', lambda x: \":\" + x.group(0), s).strip(\":\")\n\ndef test_replace_max_specialchar():\n    s = 'Python language, Programming language.'\n    assert replace_max_specialchar(s, 2)==('Python:language: Programming language.')\n    assert replace_max_specialchar(s, 0)==('Python language, Programming language.')\n    assert replace_max_specialchar(s, 1)==('Python language, Programming language.')", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(text, n):\n    \"\"\"\n    Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    replacement = ' '\n    return text.replace(replacement, \":\")\n\n#Below is an example usage:\n\nimport re\n\ndef replace_max_specialchar(text, n):\n    \"\"\"\n    Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    replacement = ' '\n    return text.replace(replacement, \":\")\n\n# Enter the string\nstring = \"I like to watch movies\"\n\n# Calling the function", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(text, n):\n    \"\"\"\n    >>> replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    True\n    \"\"\"\n    count = 0\n    for char in text:\n        if char in [' ',',','.']:\n            count+=1\n        if count == n:\n            break\n    return text[:count] + \":\" + text[count+1:]\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(my_list):\n    for number in my_list:\n        if number % 2 == 0:\n            return number\n    return None\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(nums):\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            return nums[i]\nfirst_even([1, 3, 5, 7, 4, 1, 6, 8])", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(l):\n    return l[0]\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(l):\n    for x in l:\n        if x%2 == 0:\n            return x\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\n# solution\ndef first_even(l):\n    for i in l:\n        if i % 2 == 0:\n            return i\n    return False\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(seq):\n    \"\"\"\n    >>> first_even([1, 3, 5, 7, 4, 1, 6, 8])\n    4\n    \"\"\"\n    for i in seq:\n        if i % 2 == 0:\n            return i\n    return None\n\ndef first_odd(seq):\n    \"\"\"\n    >>> first_odd([1, 3, 5, 7, 4, 1, 6, 8])\n    1\n    \"\"\"\n    for i in seq:\n        if i % 2 != 0:\n            return i\n    return None\n\ndef first_multiple(seq, multiple):\n    \"\"\"\n    >>> first_multiple([1, 3, 5, 7, 4, 1, 6, 8], 2)\n    2\n    \"\"\"\n    for i in seq:\n        if i % multiple == 0:\n            return i\n    return None\n\ndef first_nonmultiple(seq, multiple):\n    \"\"\"\n    >>> first_nonmultiple([1, 3, 5, 7, 4, 1, 6, 8], 2)\n    1\n    \"\"\"\n    for i in seq:\n        if i % multiple != 0:\n            return i\n    return None\n\ndef first_odd_or_multiple_of_three(seq):\n    \"\"\"\n    >>> first_odd_or_multiple_of_three([1, 3, 5, 7, 4, 1, 6, 8])\n    3\n    \"\"\"\n    for i in seq:\n        if i % 3 == 1 or i % 3 == 0:\n            return i\n    return None\n\ndef first_even_or_multiple_of_three(seq):\n    \"\"\"\n    >>> first_even_or_multiple_of_three([1, 3, 5, 7, 4, 1, 6, 8])\n    6\n    \"\"\"\n    for i in seq:\n        if i % 3 == 2:\n            return i\n    return None\n\ndef first_multiple_of_two_and_three", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(seq):\n    for i in seq:\n        if i%2 == 0:\n            return i\n    return -1\n    ", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(lst):\n    lst = [num for num in lst if num % 2 == 0]\n    return lst[0]\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            return lst[i]\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(nums):\n    for i in nums:\n        if i % 2 == 0:\n            return i\n    return None\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(data):\n    count = 0\n    for i in data:\n        if type(i) == type(data[0]):\n            count += 1\n    if count == len(data):\n        return True\n    return False\n\n#Test code\ntest_data = [(5, 6, 7, 3, 5, 6),\n             (1, 1, 1, 1, 1, 1),\n             (1, 2, 3, 4, 5, 6)]\n\nfor i in test_data:\n    assert check_type(i) == True", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n# Solution\ndef check_type(a):\n    \"\"\"\n    Iterating through the input and finding out the data type of all the elements\n    if all are same then return True else False\n    \"\"\"\n    for i in a:\n        if not type(i) == type(a[0]):\n            return False\n    return True", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(elements):\n    if type(elements[0]) == type(elements[1]):\n        for el in elements:\n            if type(el) != type(elements[0]):\n                return False\n    return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\nimport typing\n\ndef check_type(tup:tuple) -> bool:\n    \"\"\"\n    Check if all the elements in tuple have same data type or not.\n\n    Parameters\n    ----------\n    tup : tuple\n        input tuple\n\n    Returns\n    -------\n    bool\n        True if all the elements in tuple have same data type. False otherwise.\n    \"\"\"\n    return all(isinstance(i, type(tup[0])) for i in tup)\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(t):\n    type_list = []\n    for i in t:\n        type_list.append(type(i))\n    if len(set(type_list)) == 1:\n        return True\n    else:\n        return False\n    \n#Examples:", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    return all(type(x) == type(tup[0]) for x in tup)\n\n#Below is an example usage:\n\nimport re\n\ndef check_type(tup):\n    return all(type(x) == type(tup[0]) for x in tup)\n\n# Enter the tuple\ntup = (5, 6, 7, 3, 5, 6)\n\n# Calling the function", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(x):\n    if len(x) == 1:\n        return True\n    else:\n        for i in range(len(x)):\n            if type(x[0]) != type(x[i]):\n                return False\n        return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    # set1 = set()\n    # for i in tup:\n    #     set1.add(type(i))\n    # if len(set1) == 1:\n    #     return True\n    return set([type(i) for i in tup]) == set([type(tup[0])])\n\n\n# Test case", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n# sample tuple\n\n\n# function body\ndef check_type(t):\n    # checking if all the elements in tuple has same data type or not\n    # printing the data type of elements in tuple\n    for i in t:\n        if type(i) != type(t[0]):\n            return False\n    return True\n\n\n# Driver Code\n# test case1\n# sample tuple\ntup = (5, 6, 7, 3, 5, 6)\n\n# calling the function", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    for i in tup:\n        if type(i) != type(tup[0]):\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\nfrom typing import List\n\n\ndef is_majority(arr: List, n: int, x: int) -> bool:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count >= n // 2\n\n\ndef is_majority_iterator(arr: List, n: int, x: int) -> bool:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count >= n // 2", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\nimport collections\n\ndef is_majority(arr, majority_element, count=1):\n    return collections.Counter(arr).most_common(1)[0][1] >= count * majority_element\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nimport math\n\ndef is_majority(arr, n, num):\n    \"\"\"\n    Check if the element appears at least num times in the array\n    \"\"\"\n    if n % 2 == 0:\n        index = int((n - 1) / 2)\n    else:\n        index = math.floor((n - 1) / 2)\n    if (arr[index] == num):\n        count = 1\n        for i in range(index, n):\n            if arr[i] == num:\n                count += 1\n        if count >= num:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n# time complexity: O(n)\ndef is_majority(array, min_count, target):\n    start, end = 0, len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == target and array.count(array[mid]) >= min_count:\n            return True\n        if array[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(a, low, high):\n    if high-low+1 > 1:\n        return True\n    else:\n        return False\n\ndef main():\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nimport unittest\n\n\ndef is_majority(array, target, num):\n    \"\"\"\n    :param array: sorted array\n    :param target: target number\n    :param num: number of elements in the array\n    :return: True or False\n    \"\"\"\n\n    if len(array) == 0:\n        return False\n    if len(array) == 1:\n        return array[0] == target\n    if num > 1:\n        return num // 2 < len(array) // 2 and array[len(array) // 2] == target\n    else:\n        return array[0] == target\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\ndef is_majority(nums, k, majority):\n    \"\"\"\n    check if the element k is majority element\n    \"\"\"\n    if len(nums) < 2:\n        return False\n\n    first = nums[0]\n    counter = 0\n\n    for i in range(1, len(nums)):\n        if nums[i] == majority:\n            counter += 1\n        elif nums[i] == first:\n            counter -= 1\n        elif first == majority and counter == 0:\n            return False\n\n    return True\n\n# Driver Code", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nfrom typing import List, Optional\n\n\ndef is_majority(array: List[int], n: int, element: int) -> bool:\n    \"\"\"\n    Complexity: O(n)\n    \"\"\"\n    count = 0\n    i = 0\n    while i < n:\n        if array[i] == element:\n            count += 1\n        i += 1\n    return count > n // 2", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, x):\n    '''\n    For the given array, returns whether or not there is a majority element.\n    '''\n    if n > len(arr)//2:\n        return False\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return True\n    return False", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(ar, n, c):\n    if not ar:\n        return False\n    res = len(ar) // 2\n    if n == 0:\n        return ar[0] == c\n    elif ar[res] == c:\n        return True\n    return False\n\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n    return bin(num).count('1')\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    n = int(n)\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(n):\n        if (n & 1):\n            count += 1\n        n = n >> 1\n    return count\n\ndef test_count_Set_Bits():\n    assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(16) == 3\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    count = 0\n    while n > 0:\n        n = n & (n-1)\n        count += 1\n    return count\n\ndef test():\n    assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(3) == 2\n    assert count_Set_Bits(4) == 2\n    assert count_Set_Bits(5) == 3\n    assert count_Set_Bits(6) == 3\n    assert count_Set_Bits(7) == 3\n    assert count_Set_Bits(8) == 4\n    assert count_Set_Bits(9) == 4\n    assert count_Set_Bits(10) == 4\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(number):\n    count = 0\n    for i in range(number):\n        count = count + (number & 1)\n        number = number >> 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(N):\n    bits = bin(N)[2:]\n    bits = [int(i) for i in bits]\n    return sum(bits)\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    n = int(n)\n    count = 0\n    while n != 0:\n        count += n & 1\n        n = n >> 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(x):\n    # write your code here\n    cnt = 0\n    while x != 0:\n        cnt += x & 1\n        x >>= 1\n    return cnt\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n# A function to count the no. of set bits in an integer\n\n\ndef count_set_bits(n):\n    count = 0\n    while n != 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# def find_Min(arr, low, high):\n#     if low == high:\n#         return arr[low]\n\n#     mid = (low + high) // 2\n\n#     # check if array is already in order, then return the middle value\n#     if arr[low] <= arr[mid]:\n#         return find_Min(arr, mid + 1, high)\n\n#     # if array is rotated, then check if the mid element is smaller than the next element, if it is, then return it\n#     if arr[low] >= arr[mid] and arr[mid] >= arr[high]:\n#         if arr[mid] >= arr[mid + 1]:\n#             return find_Min(arr, low, mid - 1)\n\n#     return find_Min(arr, mid + 1, high)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n#Code to find the minimum element in a sorted and rotated array\n\ndef find_Min(arr, lo, hi):\n    \n    # If lo is greater than hi, then there is nothing to be done.\n    if (lo > hi):\n        return arr[lo]\n        \n    # Lets assume that the minimum element in the array is at the rightmost index.\n    i = lo\n\n    # The number in the middle is always the minimum element.\n    mid = lo + (hi - lo) / 2\n\n    # If the number in the middle is less than the number to its left, then the \n    # minimum element is either at the rightmost or the leftmost element.\n    if (arr[mid] > arr[i]):\n        return find_Min(arr, i + 1, hi)\n    return find_Min(arr, lo, mid - 1)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,n,m):\n    return arr[0] if n <= m else find_Min(arr,n-m-1,m-1)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# Returns the minimum element in the array\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\ndef find_Min(arr, left, right):\n    while(left < right):\n        mid = left + (right - left) // 2\n        if (arr[mid] > arr[right]):\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\nimport bisect\n\n\ndef find_Min(arr, low, high):\n    \"\"\"\n    Write a python function to find the minimum element in a sorted and rotated array.\n    \"\"\"\n    if low >= high:\n        return arr[low]\n\n    mid = low + (high - low)//2\n\n    if mid > 0 and arr[mid] == arr[mid-1]:\n        return arr[mid]\n\n    if arr[mid] > arr[mid-1]:\n        if arr[mid] > arr[high]:\n            return find_Min(arr, mid + 1, high)\n        else:\n            return find_Min(arr, low, mid - 1)\n\n    else:\n        return find_Min(arr, low, mid - 1)\n\n\ndef test_find_Min():\n    arr = [1,2,3,4,5]\n    print(find_Min(arr, 0, 4))", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,start,end):\n    if start == end:\n        return arr[start]\n    mid = (start+end)//2\n    if arr[mid] < arr[start]:\n        return find_Min(arr,mid+1,end)\n    else:\n        return find_Min(arr,start,mid)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# 2. Write a python function to find the minimum element in a sorted and rotated array.\n# Solution: https://www.geeksforgeeks.org/find-the-smallest-element-in-a-sorted-and-rotated-array/\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n#My Code\n\n#This code is an excellent solution. It is a tad long, but I am more interested in \n#the strategy behind it. First, it separates the array into two parts. The first part,\n#which starts at 0 and ends at mid-1, is sorted. The second part, which starts at mid and \n#ends at len(arr)-1, contains the sorted part of the array, but with the minimum element on\n#top. Now, the function takes the sorted part of the array, starting at 0, and checks \n#whether the value at any position is smaller than the previous value. If so, the function \n#swaps them, and then checks whether the new smallest value is smaller than the previous one.\n#If the new smallest value is smaller, it again swaps the values at positions 0 and 1. \n#This process continues until there is no more swapping possible. The function then\n#returns the value at position 0, which is the smallest value in the array.\n\ndef find_Min(arr, low, high):\n\tif (high - low) == 1:\n\t\tif arr[low] < arr[high]:\n\t\t\treturn low\n\t\telse:\n\t\t\treturn high\n\telse:\n\t\tmid = (low + high) // 2\n\t\tif arr[mid] > arr[high]:\n\t\t\treturn find_Min(arr, low, mid)\n\t\telse:\n\t\t\treturn find_Min(arr, mid+1, high)\n\n#This code is an alternative solution.\n\ndef find_Min(arr, low, high):\n\twhile low < high:\n\t\tif arr[low] < arr[high]:\n\t\t\treturn low\n\t\tlow += 1\n\t\tif low >= high:\n\t\t\treturn low\n\n#This code is a solution that I used to compare with the above. I think it is still better, but\n#there are a few things that bother me about it. First, the \"else:\" block at the end of the \n#function is redundant, since the function returns before the block is executed.", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# O(log n) Time complexity \n# O(1) Space complexity\n\ndef find_Min(arr,low,high):\n    mid = (low+high)//2\n    if low==high:\n        return low\n    if arr[mid]<arr[high]:\n        return low\n    if arr[low]>arr[mid]:\n        return mid\n    return find_Min(arr,low,mid-1)\n    \n\ndef test_function(test_case):\n    arr = test_case[0]\n    low = test_case[1]\n    high = test_case[2]\n    solution = test_case[3]\n    output = find_Min(arr,low,high)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1,2,3,4,5],0,4,1])"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n# Solution\ndef odd_values_string(string):\n    return \"\".join([i for i in string if i.index % 2 == 0])\n\n# Tests", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str):\n    str = list(str)\n    str = [i for i,x in enumerate(str) if i%2 == 0]\n    return ''.join(str)\n\ndef odd_values_string(str):\n    return ''.join(str[i] for i in range(0,len(str)) if i % 2 == 0)\n\n\n# -\n\ndef remove_odd_values(str):\n    return \"\".join([i for i,x in enumerate(str) if i%2 == 0])\n\n\nremove_odd_values(\"abcdef\")\n\n\n# # 9. Write a python function that counts the number of times each letter appears in a given string.\n\ndef count_letters(s):\n    s = list(s)\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\n\ncount_letters(\"abracadabra\")\n\n\ndef count_letters(s):\n    s = list(s)\n    d = {}\n    for i in s:\n        d[i] = s.count(i)\n    return d\n\n\ncount_letters(\"abracadabra\")\n\n\n# # 10. Write a python function that checks whether all the characters of a given string are upper case or not.\n\ndef all_upper(s):\n    return \"\".join([i.upper() for i in s])\n\n\nall_upper(\"Let's find out if this string has all upper case characters\")\n\n\ndef all_upper(s):\n    return all(x.isupper() for x in s)\n\n\nall_upper(\"Let's find out if this string has all upper case characters\")\n\n\n# # 11. Write a python function to get the index of the last occurrence of a given character in a string.\n\ndef index_of_last_occurrence(s,char):\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == char:\n            return i\n    return -1\n\n\nindex_of_last_", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    # write your code here\n    odd_index_values = [i for i, char in enumerate(string) if i%2 == 1]\n    for i in odd_index_values:\n        del string[i]\n    return string\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    odd_chars = string[1::2]\n    return odd_chars", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    index = 0\n    index2 = 0\n    while index < len(string):\n        if index % 2 != 0:\n            string = string[index2:]\n            index2 += 1\n        index += 1\n    return string\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str1):\n    # Write your code here\n    even_index_values = ''\n    odd_index_values = ''\n\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            even_index_values += str1[i]\n        else:\n            odd_index_values += str1[i]\n\n    return odd_index_values", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(str):\n    return ''.join(x for i,x in enumerate(str) if i % 2 != 0)\n\ndef test_odd_values_string():\n    assert odd_values_string('abcdef') == 'ace'\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n# Solution:\n# 1) Loop through the input string, char by char.\n# 2) If the char's index is odd, add it to the answer.\n# 3) If the char's index is even, ignore it.\n# 4) Add the answer to a new string.\n# 5) Return the new string.\n\ndef odd_values_string(string):\n    answer = ''\n    for char in string:\n        if char.isalpha():\n            if char.isalpha() and char.isalpha() and char.isalpha():\n                if char.isalpha() and char.isalpha():\n                    if char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha():\n                        if char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha():\n                            if char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha():\n                                if char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha():\n                                    if char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.isalpha() and char.", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(str_):\n    odd_index_values = [str_[i] for i in range(len(str_)) if i % 2 != 0]\n    return ''.join(odd_index_values)\n\n# Tests.", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return ''.join([i for i, val in enumerate(string) if not val.isdigit()])\n#\n# 12) Write a python function to split a string based on the given delimiter\n#      The delimiter can be any string.\n#      Eg: if the delimiter is ':', the function will split the string 'sample:string:0' into:\n#      ['sample', 'string', '0']\n#      The function should return a list of strings.\n#      assert split_string('sample:string:0', ':') == ['sample', 'string', '0']\n#      assert split_string('sample:string:0', ',') == ['sample', 'string', '0']\n#      assert split_string('sample:string:0', ' ') == ['sample', 'string', '0']\n#      assert split_string('sample:string:0', '') == ['samplestring0']\n#      assert split_string('sample:string:0', None) == ['sample', 'string', '0']\n#      assert split_string('sample:string:0', []) == ['sample', 'string', '0']\n#\ndef split_string(string, delimiter):\n    if delimiter == None or delimiter == []:\n        return [string]\n    else:\n        if delimiter in string:\n            return string.split(delimiter)\n        else:\n            return split_string(string, delimiter)"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(x,y,z):\n    if x < y:\n        if x < z:\n            return x\n        else:\n            return z\n    else:\n        if y < z:\n            return y\n        else:\n            return z", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n\ndef min_of_three_v2(a,b,c):\n    return min(a, min(b,c))\n\ndef min_of_three_v3(a,b,c):\n    return min(min(a,b),c)\n\ndef min_of_three_v4(a,b,c):\n    return min(a,min(b,c))\n\ndef min_of_three_v5(a,b,c):\n    return min(min(a,b),c)\n\ndef min_of_three_v6(a,b,c):\n    return min(a, min(b,c))\n\ndef min_of_three_v7(a,b,c):\n    return min(min(a,b),c)\n\ndef min_of_three_v8(a,b,c):\n    return min(a, min(b,c))\n\ndef min_of_three_v9(a,b,c):\n    return min(min(a,b),c)\n\ndef min_of_three_v10(a,b,c):\n    return min(min(a,b),c)\n\ndef min_of_three_v11(a,b,c):\n    return min(a, min(b,c))\n\ndef min_of_three_v12(a,b,c):\n    return min(min(a,b),c)\n\ndef min_of_three_v13(a,b,c):\n    return min(a, min(b,c))\n\ndef min_of_three_v14(a,b,c):\n    return min(min(a,b),c)\n\ndef min_of_three_v15(a,b,c):\n    return min(a, min(b,c))\n\ndef min_of_three_", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    else:\n        return 0", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(n1, n2, n3):\n    if (n1 > n2 and n1 > n3):\n        return n1\n    elif (n2 > n1 and n2 > n3):\n        return n2\n    elif (n3 > n1 and n3 > n2):\n        return n3\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n    ", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    elif c>a and c>b:\n        return c\n    else:\n        return 0\n\n#test case1", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    #checks if any of the variables is None\n    if a is None or b is None or c is None:\n        return None\n    if a <= b and a <= c:\n        return a\n    elif b <= c and b <= a:\n        return b\n    else:\n        return c\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(num1,num2,num3):\n    if num1 < num2:\n        if num1 < num3:\n            return num1\n        else:\n            return num3\n    elif num2 < num1:\n        if num2 < num3:\n            return num2\n        else:\n            return num3\n    else:\n        return num3\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if(a < b and a < c):\n        return a\n    elif(b < a and b < c):\n        return b\n    else:\n        return c\n\n\n# +"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(l,r):\n    for i in range(l,r):\n        if i & i-1 : return False\n    return True\n\n#assert all_Bits_Set_In_The_Given_Range(4,1) == False\n#assert all_Bits_Set_In_The_Given_Range(4,3) == True\n#assert all_Bits_Set_In_The_Given_Range(4,12) == False\n#assert all_Bits_Set_In_The_Given_Range(4,15) == False\n#assert all_Bits_Set_In_The_Given_Range(4,16) == True\n#assert all_Bits_Set_In_The_Given_Range(4,31) == False\n#assert all_Bits_Set_In_The_Given_Range(4,32) == True\n#assert all_Bits_Set_In_The_Given_Range(4,63) == False\n#assert all_Bits_Set_In_The_Given_Range(4,64) == True\n#assert all_Bits_Set_In_The_Given_Range(4,127) == False\n#assert all_Bits_Set_In_The_Given_Range(4,128) == True\n#assert all_Bits_Set_In_The_Given_Range(4,255) == False\n#assert all_Bits_Set_In_The_Given_Range(4,256) == True\n#assert all_Bits_Set_In_The_Given_Range(4,511) == False\n#assert all_Bits_Set_In_The_Given_Range(4,512) == True\n#assert all_Bits_Set_In_The_Given_Range(4,1023) == False\n#assert all_Bits_Set_In_The_Given_Range(4,1024) == True\n#assert all_", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    ans = True\n    for i in range(start, end + 1):\n        ans &= (i & (i-1)) == 0\n    return ans\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(m,n):\n    i=n\n    while(i<=m):\n        if((i&i-1)==0):\n            return False\n        i=i+1\n    return True\n        ", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\n#solution\ndef all_Bits_Set_In_The_Given_Range(x,y,z):\n    while x<z:\n        if(x & 1):\n            return False\n        x = x+1\n    return True\n\n#test cases", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(begin,end):\n    if begin > end:\n        return False\n    else:\n        return True\n\ndef all_Bits_Set_In_The_Given_Range_using_Bitwise_and(begin,end):\n    return bool(begin & (end - 1))\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    if start == 0:\n        return True\n    if end == 0:\n        return False\n    elif start < end:\n        for i in range(start,end):\n            if i & (i-1) != 0:\n                return False\n        return True\n    elif start == end:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    if start >= end:\n        return False\n    # Now we have to set all the bits in the range by going from start to end.\n    # So, we will set the ith bit in the range by:\n    # 1. If ith bit is set in the start element then the bit becomes 1 in all the elements in the range\n    # 2. If ith bit is set in the end element then the bit becomes 1 in all the elements in the range\n    # 3. If ith bit is not set in both the elements then the bit remains 0 in all the elements in the range\n    # So, we will count all the 1 bits in all the elements in the range and that should be equal to the number of bits in the range\n    # 1. Now we will count all the 1 bits in the start element and that will be:\n    # start_Element = 2^start\n    # So, we will set the ith bit in the start element as:\n    # start_Element = start_Element | (1 << i)\n    # So, we will have:\n    # start_Element = start_Element | (1 << 0)\n    # start_Element = start_Element | (1 << 1)\n    # start_Element = start_Element | (1 << 2)\n    # start_Element = start_Element | (1 << 3)\n    # start_Element = start_Element | (1 << 4)\n    # start_Element = start_Element | (1 << 5)\n    # start_Element = start_Element | (1 << 6)\n    # start_Element = start_Element | (1 << 7)\n    #\n    # 2. Now we will count all the 1 bits in the end element and that will be:\n    # end_Element = 2^end\n    # So, we will set the ith bit in the end element as:\n    # end_Element = end_Element | (1 << i)\n    # So, we will have:\n    # end_Element =", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n#function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(start_bit,end_bit):\n    ans = True\n    for bit in range(start_bit,end_bit+1):\n        ans &= (bit & (bit+1)) == 0\n    return ans\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\n# Python program to check whether all the bits are set in a range or not\n\n# Function to check whether all the bits are set in range\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    \n    # Initialize count variable\n    count = 0\n\n    # Iterate over range from start to end\n    for i in range(start, end+1):\n        \n        # Check if number is odd or not\n        if i & 1:\n            count += 1\n\n    # Return true if count is 0, else false\n    return count == 0\n\n# Driver code", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    if start >= end:\n        return False\n    if start <= 0:\n        return False\n    if end <= 0:\n        return False\n    if start & (start-1) != 0:\n        return False\n    if end & (end-1) != 0:\n        return False\n\n    mask = start-1\n    while mask <= end:\n        if start & mask == 0:\n            if end & mask == 0:\n                continue\n        else:\n            return False\n        mask = mask << 1\n\n    return True\n\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    \"\"\"\n    The function takes an input array and a total number of elements in the array as arguments.\n    It returns an array of elements in the input array after re-arranging them in the given order.\n    The function also takes care that no elements are missed out and all elements appear in the array.\n    It loops over the input array and tries to add the next element in the input array to the end of the array.\n    If the element in the array is positive, it just adds it to the end of the array.\n    If it is a negative element, it checks if it is smaller than the elements already present in the array\n    and if yes, then it adds it to the front of the array.\n    If it is greater than or equal to the elements already present in the array, it skips the element.\n    This continues until all the elements are added to the array.\n\n    Args:\n        arr (list): input array of integers\n        n (int): total number of elements in the array\n\n    Returns:\n        list: output array of integers, where all the negative elements appear before the positive ones\n    \"\"\"\n    output = []\n    for i in range(n):\n        if arr[i] >= 0:\n            output.append(arr[i])\n        elif i == 0 or arr[i] < output[-1]:\n            output.append(arr[i])\n    return output\n\n# tests\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    pos = []\n    neg = []\n\n    for i in range(n):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n\n    pos.reverse()\n    res = []\n    res.extend(neg)\n    res.extend(pos)\n    return res\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, n):\n    if len(array) != n:\n        return None\n    i = 0\n    j = n - 1\n    while i < j:\n        if array[i] < 0:\n            i += 1\n            continue\n        if array[j] >= 0:\n            j -= 1\n            continue\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n        i += 1\n        j -= 1\n    return array\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, n):\n    for i, num in enumerate(array):\n        if num >= 0:\n            array[i], array[n - 1] = array[n - 1], array[i]\n            n -= 1\n\n    return array", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, limit):\n    positive_array = []\n    negative_array = []\n    for element in array:\n        if element > 0:\n            positive_array.append(element)\n        elif element < 0:\n            negative_array.append(element)\n    return positive_array + negative_array[:limit-len(positive_array)] + negative_array[limit-len(positive_array):]", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(a, n):\n    b = [0] * n\n    i = 0\n    for i in range(n):\n        if a[i] < 0:\n            b[i] = -a[i]\n        else:\n            b[i] = a[i]\n    return b\n\ndef re_arrange_array2(a, n):\n    b = []\n    for i in range(n):\n        if a[i] < 0:\n            b.insert(0, -a[i])\n        else:\n            b.insert(i, a[i])\n    return b\n\ndef re_arrange_array3(a, n):\n    return list(reversed(sorted(a)))", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    pos_arr = []\n    neg_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    pos_arr.extend(neg_arr)\n    return pos_arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    if len(arr) < 2:\n        return arr\n\n    right_count = 0\n    left_count = 0\n    for i in range(n):\n        if arr[i] > 0:\n            right_count += 1\n        else:\n            left_count += 1\n\n    left_end = 0\n    right_end = 0\n    result = [0] * n\n    left_count = 0\n    right_count = 0\n    for i in range(n):\n        if arr[i] > 0:\n            result[right_end] = arr[i]\n            right_end += 1\n        else:\n            result[left_end] = arr[i]\n            left_end += 1\n            left_count += 1\n\n    result[left_end:] = arr[left_count:n]\n    return result", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, n):\n    if not len(array):\n        return array\n    output = []\n    for i in range(n):\n        if array[i] > 0:\n            output.append(array[i])\n    for i in range(n):\n        if array[i] < 0:\n            output.append(array[i])\n    return output\n\n\ndef test():\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 1))\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 0))\n\ntest()", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    l = []\n    for i in range(n):\n        if arr[i] >= 0:\n            l.append(arr[i])\n        else:\n            l.append(arr[i])\n    return l\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str,replace_char):\n    return str.replace(' ','').replace(' ','').replace(' ','').replace(' ','').replace(' ','')\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(str1, ch='@'):\n    return str1.replace(' ', ch)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(text, fill=\"*\"):\n    return text.replace(\" \",fill)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, ch):\n    return str.replace(\" \", ch)\n\n#assert replace_blank(\"hello people\",'@')==(\"hello@people\")\ndef replace_blank(str, ch):\n    return str.replace(\" \", ch)\n\n#assert replace_blank(\"hello people\",'@')==(\"hello@people\")\ndef replace_blank(str, ch):\n    return str.replace(\" \", ch)", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, ch):\n    \"\"\"\n    write your code here\n    \"\"\"\n    return str.replace(' ',ch)\n\ndef test():\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\ntest()\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(str, char='-'):\n    \"\"\"\n    :param str: string\n    :param char: replace blank space\n    :return: replace blank space\n    \"\"\"\n    return str.replace(' ',''+char)\n\n\ndef replace_blank_2(str, char='-'):\n    \"\"\"\n    :param str: string\n    :param char: replace blank space\n    :return: replace blank space\n    \"\"\"\n    return str.replace(' ','')+char\n\n\ndef replace_blank_3(str, char='-'):\n    \"\"\"\n    :param str: string\n    :param char: replace blank space\n    :return: replace blank space\n    \"\"\"\n    return str.replace(' ','')+' '+char\n\n\ndef replace_blank_4(str, char='-'):\n    \"\"\"\n    :param str: string\n    :param char: replace blank space\n    :return: replace blank space\n    \"\"\"\n    return str.replace(' ','')+' '+char\n\n\ndef replace_blank_5(str, char='-'):\n    \"\"\"\n    :param str: string\n    :param char: replace blank space\n    :return: replace blank space\n    \"\"\"\n    return str.replace(' ','')+' '+char\n\n\ndef replace_blank_6(str, char='-'):\n    \"\"\"\n    :param str: string\n    :param char: replace blank space\n    :return: replace blank space\n    \"\"\"\n    return str.replace(' ','')+' '+char", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, ch=' '):\n    return \"\".join(ch if x==' ' else x for x in str)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(str,ch='@'):\n    return ''.join(ch if c == ' ' else c for c in str)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str,ch):\n    return str.replace(\" \",\"\")\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str1, ch):\n    # Write your code here\n    return str1.replace(\" \", ch)\n\n\n# +\n# 1. Write a function to reverse a string.\ndef reverse_string(str1):\n    # Write your code here\n    return str1[::-1]\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\nfrom typing import List\nimport numpy as np\n\n\ndef max_sum(triangle: List[List[int]], size: int) -> int:\n    max_sum_seen = -np.inf\n    max_sum_seen_idx = 0\n    for row in range(size, 0, -1):\n        for column in range(row, size):\n            max_sum_seen = max(max_sum_seen, triangle[row][column] + triangle[row - 1][column - 1])\n            max_sum_seen_idx = (row, column)\n    return max_sum_seen, max_sum_seen_idx\n\n\ndef test_max_sum() -> None:\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == (6, (3, 2))", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(a, b):\n\t# Check if the length of array is 3\n\tif len(a) == 3:\n\t\treturn a[0] + a[1] + max(a[2], max_sum(a[1:], b))\n\t# Check if the length of array is 2\n\telif len(a) == 2:\n\t\treturn a[0] + max_sum(a[1:], b)\n\t# Check if the length of array is 1\n\telse:\n\t\treturn max(a[0], max_sum(a[1:], b))\n\n\ndef main():\n\tprint(max_sum([[1], [2,1], [3,3,2]], 3))\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    return max(max(row) for row in triangle)\n\ndef max_sum(triangle, n):\n    return max(max(row) for row in triangle)\n\ndef max_sum(triangle, n):\n    return max(max(row) for row in triangle)\n\ndef max_sum(triangle, n):\n    if not triangle:\n        return 0\n    return max(max(row) for row in triangle)\n\ndef max_sum(triangle, n):\n    if not triangle:\n        return 0\n    return max(row[-1] for row in triangle)\n\ndef max_sum(triangle, n):\n    res = triangle[0][0]\n    for i in range(len(triangle)):\n        row = triangle[i]\n        for j in range(len(row)):\n            res = max(res, row[j])\n    return res\n\ndef max_sum(triangle, n):\n    sum = triangle[0][0]\n    for i in range(1, n):\n        sum = max(sum, triangle[i][-1] + sum)\n    return sum\n\ndef max_sum(triangle, n):\n    max_row = triangle[0]\n    for row in triangle[1:]:\n        for i in range(n):\n            max_row[i] = max(max_row[i], row[i] + max_row[i - 1])\n    return max_row[-1]\n\ndef max_sum(triangle, n):\n    max_row = triangle[0]\n    for row in triangle[1:]:\n        max_row = [max(x,y) for x,y in zip(max_row, row)]\n    return max_row[-1]\n\ndef max_sum(triangle, n):\n    max_row = triangle[0]\n    for row in triangle[1:]:\n        max_row = [max(x,y) for x,y in zip(max_row, row)]\n    return max(max_row)\n\ndef max_sum(triangle, n):\n    max_row = triangle[", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, max_len):\n    max_sum = triangle[0][0]\n    for i in range(max_len):\n        for j in range(i+1):\n            if i != 0:\n                max_sum = max(max_sum, triangle[j][i] + triangle[j][i-1])\n            else:\n                max_sum = max(max_sum, triangle[j][i])\n    return max_sum\n\ntriangle = [[1], [2,1], [3,3,2]]", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nimport numpy\n\ndef max_sum(A, n):\n    # write your code here\n    m = numpy.array(A)\n    if not n >= 2:\n        return 0\n    if n == 2:\n        return max(A[0], A[1])\n    sum_of_row = max(m.sum(axis=0))\n    return max(sum_of_row, max_sum(numpy.roll(m, 1, axis=1), n-1))\n\n\ndef main():\n    print(max_sum([[1], [2,1], [3,3,2]], 3))\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(mat, n):\n    \"\"\"\n    >>> max_sum([[1], [2,1], [3,3,2]], 3)\n    6\n    \"\"\"\n    row, col = len(mat), len(mat[0])\n    dp = [[0 for _ in range(col)] for _ in range(row)]\n\n    for i in range(row):\n        dp[i][col - 1] = mat[i][col - 1]\n        for j in range(col - 1, 0, -1):\n            dp[i][j - 1] = max(dp[i][j - 1], dp[i][j] + mat[i][j])\n\n    return max(dp[0][0], dp[row - 1][col - 1])\n\n\ndef test_max_sum():\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n    assert max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 18\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\n# f(n) = max f(n-1) + max f(n-2) + n\n# f(0) = 0, f(1) = 1\n# f(n) = 2 * n\n\ndef max_sum(triangle, n):\n    m = [0, 1]\n    for i in range(1, n-1):\n        m.append(m[i-1] + m[i])\n    return m[n-2] + m[n-1]\n\ndef test():\n    print max_sum([[1], [2,1], [3,3,2]], 3)\n    print max_sum([[1,1,1], [1,1,1,1], [1,1,1,1,1]], 3)\n    print max_sum([[1,1,1,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1,1]], 3)\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(rows, n):\n    \"\"\"Find max sum in n-sided triangle.\"\"\"\n    if n == 1:\n        return rows[0][0]\n    max_sum_l = max_sum(rows, n-1)\n    max_sum_r = max_sum(rows, n-2)\n    max_sum_u = 0\n    for i in range(n-2):\n        max_sum_u = max(rows[i][i+1] + max_sum_l, max_sum_u)\n    max_sum_d = 0\n    for i in range(n-2, 0, -1):\n        max_sum_d = max(rows[i][i-1] + max_sum_r, max_sum_d)\n    max_sum_u = max_sum_l + max_sum_d\n    max_sum_d = max_sum_r + max_sum_u\n    return max(max_sum_l, max_sum_r, max_sum_u, max_sum_d)\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    max_so_far = triangle[0][0]\n    for i in range(len(triangle)):\n        for j in range(len(triangle[0])):\n            max_so_far = max(max_so_far, triangle[i][j] + max(triangle[i-1][j], triangle[i][j-1]))\n    return max_so_far\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    \"\"\"Return the maximum sum in the given right triangle of numbers\n\n    >>> max_sum([[1], [2,1], [3,3,2]], 3) == 6\n    True\n    \"\"\"\n    # The max sum in a right triangle is the maximum sum of the\n    # two largest paths that start in the bottom of the triangle.\n    # Initialize the result to zero.\n    result = 0\n    # Iterate over the rows of the triangle.\n    for row in triangle:\n        # We only need to consider the last two numbers in each\n        # row.\n        for i in range(len(row) - 1):\n            # The maximum sum in the row is the sum of the last\n            # two numbers.\n            result = max(result, row[i] + row[i+1])\n    return result\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nlarg_nnum = lambda l, n: sorted(l, reverse = True)[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(array, n):\n    if not array or n < 0 or n > len(array):\n        return None\n\n    return sorted(array)[::-1][0:n]", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\n# +\ndef larg_nnum(num, n):\n    list_num = num\n    list_num.sort(reverse=True)\n    n_list = list_num[:n]\n    return n_list\n\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n\n\n# -\n\n# ### Task 2.2\n# Write a function to check whether a given string is a palindrome. A string is a palindrome if it reads the same backward as forward.\n\n# +\ndef is_palindrome(string):\n    reverse = string[::-1]\n    return reverse == string\n\nis_palindrome('test')\n# -\n\n# ### Task 2.3\n# Write a function to calculate the area of a circle.\n\n# +\nimport math\n\ndef circle_area(radius):\n    area = (math.pi * radius**2)\n    return area\n\ncircle_area(1)\n# -\n\n# ### Task 2.4\n# Write a function to compute the Fibonacci sequence up to and including a given number n. The Fibonacci sequence is a series of numbers in which every number is the sum of the two preceding ones. For example, the first few numbers are 0, 1, 1, 2, 3, 5, 8, 13, and so on.\n\n# +\nimport numpy as np\n\ndef fibonacci(n):\n    fib = np.zeros((n+1), dtype=int)\n    fib[0] = 0\n    fib[1] = 1\n    for i in range(2,n+1):\n        fib[i] = fib[i-1] + fib[i-2]\n    return fib\n\nfibonacci(10)\n# -\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(nums, n):\n    nums.sort()\n    return nums[-n:]\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(dataset,n):\n    return dataset[np.argsort(dataset)[::-1][:n]]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(lnum, n):\n    \"\"\"\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    \"\"\"\n    return sorted(lnum)[-n:]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(lst,n):\n    assert len(lst)>n\n    return lst[lst.index(min(lst)):]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(L,n):\n  L.sort(reverse=True)\n  return L[0:n]\n\ndef test():\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],4)==[100,90,70,60]\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],10)==[100,90,70,60,50,40,30,20,10]\n    assert larg_nnum([],10)==[]\n    assert larg_nnum([10,20,100,70],2)==[100,70]\n\ntest()\n\n\n# + [markdown] id=\"U5eUveqIWl_8\"\n# 2. Design a function that takes in a list of numbers and a number k.\n#     a. return the top k largest numbers in the list\n#     b. return the top k smallest numbers in the list\n#\n#\n#\n\n# + id=\"j0u7f56a_t_R\"", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(data,n):\n    def larg_num(data):\n        num = 0\n        for i in data:\n            if num < i:\n                num = i\n        return num\n    def indx(data):\n        indx = []\n        for i,j in enumerate(data):\n            if num==j:\n                indx.append(i)\n        return indx\n    larg_n = []\n    indx_larg_n = []\n    for i in range(n):\n        indx_larg_n.append(indx(data))\n    for i in indx_larg_n:\n        larg_n.append(data[i])\n    return larg_n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(nums, n):\n    nums.sort()\n    return nums[:n]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n    return 2*(r+h)**2*pi\n\n# Tests", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n    pi = math.pi\n    return pi*r*r+2*pi*r*h\n\n#assert lateralsurface_cylinder(10,5)==314.15000000000003", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius,height):\n    import math\n    return math.pi*(radius**2) + 2*math.pi*radius*height\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(height,radius):\n    return 2*np.pi*radius*(radius+np.sqrt(radius**2-height**2))\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n    return 2*(pi*r**2)*(h)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(height,radius):\n    area=3*radius*radius\n    return area\n\n#write your code for the test here\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius,height):\n    import math\n    return 2 * math.pi * radius * height\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius,height):\n\treturn 2*np.pi*radius*(radius**2+height**2)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\nfunction lateralsurface_cylinder(radius,height)\n\treturn 2*pi*radius*height + 2*pi*radius^2\nend\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(diameter, height):\n    return (2 * pi * diameter) + (2 * pi * diameter * height)\n\ndef lateralsurface_cylinder2(diameter, height):\n    return (2 * pi * diameter) + (2 * pi * diameter * height)\n\ndef lateralsurface_cylinder3(diameter, height):\n    return (2 * pi * diameter) + (2 * pi * diameter * height)\n\ndef lateralsurface_cylinder4(diameter, height):\n    return (2 * pi * diameter) + (2 * pi * diameter * height)\n\ndef lateralsurface_cylinder5(diameter, height):\n    return (2 * pi * diameter) + (2 * pi * diameter * height)\n\n#test"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(size):\n    assert type(size) is int\n    return size**3\n\ndef main():\n    print(volume_cube(3))\n\nmain()\n\n# +", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(edge:int)->float:\n    \"\"\"\n    Write a function to find the volume of a cube\n    \"\"\"\n    return edge**3\n\n\n#%%\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\n#Exercise 2.19", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\nimport math\n\ndef volume_cube(side_len):\n    \"\"\"\n    Return the volume of a cube with side_len (int)\n    \"\"\"\n    return side_len**3\n\n# Tests", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(length):\n    return length**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\n# +\n#The volume of a cube is 3^3 or 27.\n\n\n# -\n\n# **4**. A company sells new computers for $600 and used computers for $400. Write a function that takes the price of a computer in dollars and returns the amount the company makes from selling it.\n\n# +\n#This function would be called something like \"money_computer_sale\"\n\n# +\n#The function would take a number and return 200.\n\n\n\n# -\n\n# **5**. Write a function to find the length of the hypotenuse of a right triangle.\n#\n# For example, the length of the hypotenuse of the triangle with sides of length 3 and 4 is 5.\n#\n#\n\n# +\n#This function would be called something like \"length_hypotenuse\"\n\n# +\n#The function would take 2 numbers and return the number 5\n\n\n\n# -\n\n# **6**. Write a function called area that takes the length and breadth of a rectangle as arguments and returns the area.\n#\n# For example, the area of a rectangle whose length is 4 and whose breadth is 3 is 12.\n\n# +\n#This function would be called something like \"area\"\n\n# +\n#The function would take 2 numbers and return the number 12\n\n# +\n#So when it is called, the function would say:\n\n#area(4,3)\n\n\n\n# -\n\n# **7**. Write a function called sum_cube that takes a number as an argument and returns the sum of the cubes of the numbers 1 to the argument. For example, sum_cube(5) returns 45.\n#\n# Hint: to get the cube of a number, just multiply the number by itself.\n#\n\n# +\n#This function would be called something like \"sum_cube\"\n\n# +\n#The function would take 1 number and return the number 45\n\n\n\n# -\n\n# **8**. Write a function called sum_cubes that takes a number as an argument and returns the", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(length):\n    vol=length**3\n    return vol\n\n\n# --------------------------------------------\n\ndef sum_list(l):\n    sum=0\n    for i in l:\n        sum+=i\n    return sum\n\n\n# --------------------------------------------\n\ndef square_sum(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\n\n\n# --------------------------------------------\n\ndef square_sum_until(n):\n    sum=0\n    for i in range(1,n+1):\n        if i**2>n:\n            break\n        sum+=i**2\n    return sum\n\n\n# --------------------------------------------\n\ndef is_positive(n):\n    if n>0:\n        return True\n    return False\n\n\n# --------------------------------------------\n\ndef sum_list_odd(l):\n    sum=0\n    for i in l:\n        if is_positive(i):\n            sum+=i\n    return sum\n\n\n# --------------------------------------------\n\ndef sum_list_with_absolute_value(l):\n    sum=0\n    for i in l:\n        if abs(i)>0:\n            sum+=i\n    return sum\n\n\n# --------------------------------------------\n\ndef sum_list_square_value(l):\n    sum=0\n    for i in l:\n        if i**2>0:\n            sum+=i**2\n    return sum\n\n\n# --------------------------------------------\n\ndef square_sum_with_absolute_value(n):\n    sum=0\n    for i in range(1,n+1):\n        if abs(i)>0:\n            sum+=i**2\n    return sum\n\n\n# --------------------------------------------\n\ndef square_sum_with_absolute_value_until(n):\n    sum=0\n    for i in range(1,n+1):\n        if abs(i)>0 and i**2>n:\n            break\n        sum+=i**2\n    return sum\n\n\n# --------------------------------------------\n\ndef sum_list_with_absolute_value_square_value(l):\n    sum=0\n    for i in l:\n        if abs(i)>0 and i**2>0:\n            sum+=i**2\n    return sum\n\n\n# --------------------------------------------\n\ndef sum_list_with_absolute_value_", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(n):\n    # your code here\n    return n**3\n\n# assert volume_cube(3)==27\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    vol = side*side*side\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(x):\n    return x*x*x\n\ndef test():\n    assert volume_cube(3)==27\n    assert volume_cube(2)==8\n    assert volume_cube(1)==1\n    assert volume_cube(0)==0\ntest()"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    bit = number >> 1\n    while bit != 0:\n        number = (number | bit) << 1\n        bit = bit >> 1\n    return number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n# Python program to set all even bits of a given number\n\ndef even_bit_set_number(num):\n    \"\"\"Set all even bits of the given number\"\"\"\n    # Initialize the output number with 0\n    output_num = 0\n    # Iterate through the bits of the number\n    for i in range(0, 32):\n        # If the current bit is an even bit then set it to 1\n        if (num >> i) & 1 == 0:\n            # print(i)\n            # print(num)\n            output_num |= 1 << i\n    return output_num\n\n# Driver code\nnum = 10\n\n# Calling the function", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    \"\"\"\n    given an int returns int with all even bits set\n    \"\"\"\n    even_bits = [True] * len(bin(number)) - 2\n    for i, bit in enumerate(bin(number)[2:]):\n        even_bits[i] = bool(bit)\n    return int(''.join(str(bit) for bit in even_bits))\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n#Difficulty Level: easy\n#Given an integer, write a function to set all even bits of a given number.\n#For example, if the input number is 10, then the function should return 8.\n#Assume that the number is not negative.\n\ndef even_bit_set_number(n):\n    #Write your code here\n    #n = (n & ~n + 1) << 1\n    n = n & (n-1) << 1\n    return n\n\n#Test Case", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n\t# TODO: write your code here\n\t# your code here\n\t#raise NotImplementedError()\n\n\treturn num\n\n# do not change this line", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number: int) -> int:\n    mask = 2**number\n    return mask\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    \"\"\"\n    >>> even_bit_set_number(10)\n    10\n    \"\"\"\n    assert number >= 0\n    even_number = 0\n    while number > 0:\n        even_number += number % 2\n        number = number // 2\n    return even_number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    return n & 0b111111\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(x):\n    #your code here\n    return x\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    n = n << 1\n    return n\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    count = 0\n    if a == 2:\n        return int(b/2)\n    for i in range(2,int(b/2)):\n        if (a**2 + b**2 - i**2)**(1/2) == a:\n            count += 1\n    return count\nNo_of_Triangle(4,2)\ndef No_of_Triangle_1(a,b):\n    count = 0\n    if a == 2:\n        return int(b/2)\n    for i in range(1,int(b/2)):\n        if (a**2 + b**2 - i**2)**(1/2) == a:\n            count += 1\n    return count\nNo_of_Triangle_1(4,2)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nFunctions as returnsIt is possible to have functions which return values. To do this you can use the return keyword. It is possible to return multiple values from a function.\n\n### Code:\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n,r):\n\tn=n-r\n\treturn (n*(n+1)//2)//(r*(r+1)//2)\n\n# Driver Code", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n1,n2):\n    n = n1 + n2\n    k = n1 + n2 + n\n    m = n1 + n2 + 2*n\n    return (k+m)/6\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(size, c):\n    count = 0\n    a = (size*3)/4\n    if(c == 0):\n        return 1\n    if(c == 1):\n        return 1\n    if(c == 2):\n        if(a % 1 == 0):\n            return 2\n        else:\n            return 1\n    if(c == 3):\n        if(a % 2 == 0):\n            return 3\n        else:\n            return 1\n    if(c == 4):\n        if(a % 3 == 0):\n            return 4\n        else:\n            return 1\n    if(c == 5):\n        if(a % 4 == 0):\n            return 5\n        else:\n            return 1\n    if(c == 6):\n        if(a % 5 == 0):\n            return 6\n        else:\n            return 1\n    if(c == 7):\n        if(a % 6 == 0):\n            return 7\n        else:\n            return 1\n    if(c == 8):\n        if(a % 7 == 0):\n            return 8\n        else:\n            return 1\n    if(c == 9):\n        if(a % 8 == 0):\n            return 9\n        else:\n            return 1\n    if(c == 10):\n        if(a % 9 == 0):\n            return 10\n        else:\n            return 1\n    if(c == 11):\n        if(a % 10 == 0):\n            return 11\n        else:\n            return 1\n    if(c == 12):\n        if(a % 11 == 0):\n            return 12\n        else:\n            return 1\n    if(c == 13):\n        if(a % 12 == 0):\n            return 13\n        else:\n            return 1\n    if(c == 14):\n        if(a % 13 == 0):\n            return 14\n        else:\n            return 1\n    if(c == 15):\n        if(a", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(base, height):\n    if(base == height):\n        return 0\n    return 3*No_of_Triangle(base-1, height)\n#Testcase 1", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a,b):\n    c = ((a**2)/(4*b)**.5)\n    c = int(c)\n    assert c==c\n    return (c-1)*(c-2)\n\ndef test_triangle():\n    for i in range(1,10):\n        assert No_of_Triangle(3,i)==i*(i-1)\n        assert No_of_Triangle(4,i)==i*(i-1)*(i-2)\n        assert No_of_Triangle(5,i)==i*(i-1)*(i-2)*(i-3)\n        assert No_of_Triangle(6,i)==i*(i-1)*(i-2)*(i-3)*(i-4)\n        assert No_of_Triangle(7,i)==i*(i-1)*(i-2)*(i-3)*(i-4)*(i-5)\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    a = int(a)\n    b = int(b)\n    ans = 1\n    for i in range(a,b+1):\n        if (i*(i-1)*i//3)%10==0:\n            ans += 1\n        else:\n            break\n    return ans\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(L1, L2):\n    if (L1 != L2):\n        return(0)\n    return(1 + 3*No_of_Triangle(L1, L2-2) + 3*No_of_Triangle(L1-2, L2))\n\n# Driver Code", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n,d):\n    ans = 1\n    for i in range(0, d):\n        ans = ans * (2*n+1-2*i)\n    return ans\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\nimport math\n\ndef No_of_Triangle(a,b):\n\treturn math.ceil( (a*a)/3 )\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n# my function to check time collisions\ndef check_occurrences(l):\n    # create a set to store time collisions\n    collision_set = set()\n    # loop over the list\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            # if two times are same\n            if l[i][0] == l[j][0] or l[i][1] == l[j][1]:\n                # add a pair to the set\n                collision_set.add((l[i][0], l[i][1]))\n    # get the count of time collisions\n    time_collision = len(collision_set)\n    # return the count of time collisions\n    return time_collision\n\n\n# Driver Code", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\nimport collections\n\ndef check_occurences(tuples):\n    \"\"\"\n    >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    t = {}\n    for key, value in collections.Counter(tuples).items():\n        if key[0] < key[1]:\n            t[key] = value\n    return t\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    d = dict()\n    for t in tuples:\n        key = str(t)\n        if key not in d:\n            d[key] = 1\n        else:\n            d[key] += 1\n    return d\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\nfrom collections import defaultdict\ndef check_occurences(tuples):\n    # write your code here\n    record_dict = defaultdict(int)\n    for i, j in tuples:\n        record_dict[i,j] += 1\n    return record_dict\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n\toccurences = defaultdict(int)\n\tfor tup1, tup2 in combinations(tuples, 2):\n\t\tif tuple(sorted((tup1[0], tup1[1]))) == tuple(sorted((tup2[0], tup2[1]))):\n\t\t\toccurences[tup1] += 1\n\treturn occurences\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n# 2nd attempt - stupid and does not work\ndef check_occurences(tuples):\n    occurences = {}\n    for pair in tuples:\n        #print(pair)\n        if pair in occurences:\n            occurences[pair] += 1\n        else:\n            occurences[pair] = 1\n    return occurences\n\n# 1st attempt\ndef check_occurences(tuples):\n    # Build a set of tuples where the second element is the first element\n    # sorted to remove the same tuples\n    pairs = set([(a, b) for a, b in sorted(tuples) if b > a])\n    # Now find the number of occurrances for each pair in the set\n    return {pair: pairs.count(pair) for pair in pairs}\n\n# More pythonic approach\ndef check_occurences(tuples):\n    return {tuple(sorted(pair)): tuples.count(pair) for pair in set(map(tuple, tuples))}\n\n# Most elegant (using dict comprehension)\ncheck_occurences = lambda tuples: {tuple(sorted(pair)): tuples.count(pair) for pair in set(map(tuple, tuples))}\n\ndef test_check_occurences():\n    tuples = [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]\n    assert check_occurences(tuples) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\nfrom collections import Counter\n\n\ndef check_occurences(time_records):\n    \"\"\"\n    :param time_records:\n    :return:\n    \"\"\"\n    dictionary = Counter()\n    for time in time_records:\n        dictionary[tuple(sorted(time))] += 1\n    return dictionary", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    '''\n    given list of tuples with time and event, find occurrences of similar times\n    :param tuples: given list of tuples\n    :return: occurrences of similar times\n    '''\n    time_dict = {}\n    for k, v in list(Counter(tuples).items()):\n        if k not in time_dict:\n            time_dict[k] = []\n        time_dict[k].append(v)\n    return time_dict\n# Testing code:", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(records):\n    \"\"\"\n    If the list is sorted, there is no need to keep all the previous entries to check if they are repeating. We just keep on\n    traversing the list to check if the last two values are similar\n    \"\"\"\n    last_two_entries = []\n    counts = {}\n    for entry in records:\n        if last_two_entries and last_two_entries[-2:] == entry[:2]:\n            counts[last_two_entries[-2:]] += 1\n        else:\n            last_two_entries.append(entry)\n    return counts\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    d = {}\n    for x in tuples:\n        if x[0] in d:\n            if d[x[0]] == x[1]:\n                d[x[0]] = d[x[0]] + 1\n            else:\n                d[x[0]] = d[x[0]] + 1\n                d[x[1]] = 1\n        else:\n            d[x[0]] = 1\n    return d\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n# Python program to count number of non-empty substrings of a given string\ndef count_substrings(string):\n    # Define a function to return the count of non-empty substrings\n    def count_substrings_helper(string, start, count):\n        if string[start] != string[start+1]:\n            count += 1\n        count_substrings_helper(string, start+1, count)\n        return count\n    count = 0\n    for i in range(len(string)-1):\n        count = count_substrings_helper(string, i, count)\n    return count\n\n# Driver code\nstring = \"abc\"\ncount = count_substrings(string)", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nfrom typing import List\n\n\ndef count_substrings(s: str) -> int:\n    \"\"\"\n    Write a function that returns number of substrings that are not empty.\n    >>> count_substrings(\"abc\")\n    3\n    \"\"\"\n    return len([i for i in range(len(s)) if s[i] != \"\"])\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n# Count non-empty substrings of a given string\ndef number_of_substrings(str):\n    # Start with a counter\n    count = 0\n    \n    # Loop through each character\n    for i in range(len(str)):\n        # Ignore empty strings\n        if str[i] == \" \":\n            continue\n        \n        # Increment count by 1\n        count += 1\n        \n        # Check if there is a string after the current string\n        if i + 1 < len(str):\n            # Ignore empty strings\n            if str[i + 1] == \" \":\n                continue\n            \n            # Ignore case\n            if str[i].upper() != str[i + 1].upper():\n                count += 1\n\n    # Return the count\n    return count\n\n# Driver Code", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    n = 0\n    for i in range(len(string)-1):\n        if string[i] != string[i+1]:\n            n += 1\n    return n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\nfrom typing import List\n\n\ndef number_of_substrings(string: str) -> int:\n    if not string:\n        return 0\n    return len(string) - string.count(\" \") - 1\n\n\ndef main():\n    assert number_of_substrings(\"abc\") == 6\n    assert number_of_substrings(\"ab c \") == 3\n    assert number_of_substrings(\"ab \") == 2\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(str1):\n    count = 0\n    for i in range(len(str1)):\n        if len(str1[i:]) > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    # your code goes here\n    string = str(string)\n    return len(list(set(string)))\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n\tcounter = 0\n\tfor i in range(len(string)):\n\t\tfor j in range(len(string)):\n\t\t\tif j>i:\n\t\t\t\tcounter+=1\n\treturn counter\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n# O(n) time and O(1) space\ndef number_of_substrings(string):\n    n = len(string)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count\n\n# O(n^2) time and O(n) space\ndef number_of_substrings(string):\n    n = len(string)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count\n\n# O(n) time and O(1) space\ndef number_of_substrings(string):\n    n = len(string)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    res = 0\n    for i in range(len(s)):\n        res += len(s[i:i+2])\n    return res\n\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    dp = [[0 for i in range(m+1)] for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= 2:\n                dp[i][j] += dp[i][j-2]\n            if i >= 2 and j >= i:\n                dp[i][j] += dp[i-2][j-i]\n            if j >= i >= 2:\n                dp[i][j] += dp[i-2][j-2*i]\n\n    return dp[n][m]\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    from math import factorial\n    if n == 0:\n        return 0\n    else:\n        return factorial(n) / (factorial(n-1) * factorial(m))\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    l = range(1,n+1)\n    sequences = []\n    for x in range(len(l)):\n        for y in range(x+1,len(l)):\n            if l[y] <= m//2 and m%2 == 0:\n                sequences.append([l[x], l[y]])\n    return len(sequences)\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if m < 0 or m > n:\n        raise ValueError(\"Input values must be greater than or equal to 0 and less than or equal to n\")\n    if n == 0:\n        return 1\n    return get_total_number_of_sequences(n - 1, m) * 2 + get_total_number_of_sequences(n - 1, max(m, 2 * m))\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n\t# Write your code here\n\n\t# total_subsequences = 1\n\ttotal_subsequences = 1\n\tfor i in range(n-1):\n\t\t# subsequences_up_to_index = 0\n\t\tsubsequences_up_to_index = 0\n\t\tfor j in range(i+1, n):\n\t\t\t# subsequences_up_to_index += total_subsequences\n\t\t\tsubsequences_up_to_index += total_subsequences\n\t\t\ttotal_subsequences = subsequences_up_to_index\n\n\t\t# subsequences_from_index = 0\n\t\tsubsequences_from_index = 0\n\t\tfor j in range(n-1, i, -1):\n\t\t\t# subsequences_from_index += total_subsequences\n\t\t\tsubsequences_from_index += total_subsequences\n\t\t\ttotal_subsequences = subsequences_from_index\n\n\t\t# print(total_subsequences)\n\n\treturn total_subsequences", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return 1\n    ans = 0\n    for i in range(n):\n        ans += get_total_number_of_sequences(n-i, m)\n    return ans\n\n\n# test case", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    result = 0\n    i = 1\n    while i <= n:\n        result += (i - 1) * (2 * (n - i) + 1)\n        i += 1\n    return result\n\n\ndef test_get_total_number_of_sequences():\n    assert get_total_number_of_sequences(10, 4) == 4\n    assert get_total_number_of_sequences(10, 10) == 45\n    assert get_total_number_of_sequences(10, 9) == 35\n    assert get_total_number_of_sequences(10, 8) == 26\n    assert get_total_number_of_sequences(10, 7) == 19\n    assert get_total_number_of_sequences(10, 6) == 15\n    assert get_total_number_of_sequences(10, 5) == 12\n    assert get_total_number_of_sequences(10, 4) == 10\n    assert get_total_number_of_sequences(10, 3) == 8\n    assert get_total_number_of_sequences(10, 2) == 7\n    assert get_total_number_of_sequences(10, 1) == 6\n    assert get_total_number_of_sequences(10, 0) == 5\n    assert get_total_number_of_sequences(10, -1) == 0\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n\n    if n == 1:\n        if m >= 2:\n            return 1\n        return 0\n\n    if m >= 2:\n        return get_total_number_of_sequences(n - 1, m) + get_total_number_of_sequences(n - 2, m)\n    else:\n        return get_total_number_of_sequences(n - 1, m)\n\ndef main():\n    # n = 10\n    # m = 4\n    # result = get_total_number_of_sequences(n, m)\n    # print(result)\n\n    for n in range(1, 101):\n        for m in range(1, 101):\n            print(n, m, get_total_number_of_sequences(n, m))\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\nimport math\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if m >= 2 else 0\n    if m >= n:\n        return 1\n    if n == 3:\n        return 1 if m >= 3 else 0\n    return math.comb(n-2, m-2, exact=True) + get_total_number_of_sequences(n-2, m)\n\n\n# Time complexity: O(n * m)\n# Space complexity: O(n)", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    count = 0\n    count += get_total_number_of_sequences_helper(0, n, m)\n    return count\n\ndef get_total_number_of_sequences_helper(idx, n, m):\n    if idx == n:\n        return 1\n    if idx == n - 1:\n        if n <= m:\n            return 1\n        else:\n            return 0\n    return get_total_number_of_sequences_helper(idx + 1, n, m) + get_total_number_of_sequences_helper(idx + 2, n, m)\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(my_list,new_list):\n    my_list[-1] = new_list\n    return my_list\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_lst):\n    \"\"\"Return a new list where the last element of the original list is replaced with new_lst\"\"\"\n    return lst[:-1] + new_lst\n\n# Here is an example usage:\n\n# Enter the original list\noriginal_list = [1, 3, 5, 7, 9, 10]\n\n# Enter the new list\nnew_list = [2, 4, 6, 8]\n\n# Calling the function\nnew_list = replace_list(original_list, new_list)\n\n# Printing the list", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, new_lst):\n\tlst.insert(-1, new_lst)\n\treturn lst\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(my_list, new_list):\n    for i in range(len(my_list)-1, -1, -1):\n        my_list[i] = new_list[i]\n    return my_list\n\nreplace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n\n\n#--------------------------\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n# replace the last element of the list with another list\ndef replace_list(a, b):\n    c = a[0:len(a)-1]\n    c.append(b)\n    return c\n\n# test the function", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list_a,list_b):\n    if(len(list_a)==0):\n        return list_b\n    else:\n        return list_a[:len(list_a)-1] + list_b\n        \ndef test_replace_list():\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, other_list):\n    \"\"\"\n    lst: A list to which other_list will be appended.\n    other_list: A list that will replace the last element of the list lst.\n    returns: The list lst with the last element replaced.\n    \"\"\"\n    lst.append(other_list)\n    return lst\n\n# Enter the list\nlst = [1, 3, 5, 7, 9, 10]\n\n# Enter the other list\nother_list = [2, 4, 6, 8]\n\n# Calling the function\nlst = replace_list(lst, other_list)\n\n# Printing the list", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(list1, list2):\n    return list1[:len(list1)-1] + list2\n\ndef replace_list(list1, list2):\n    list1[:len(list1)-1] = list2\n    return list1\n\ndef replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n\ndef replace_list(list1, list2):\n    list1.append(list2)\n    return list1\n\ndef replace_list(list1, list2):\n    return list1 + list2[:-1] + [list2[-1]]\n\ndef replace_list(list1, list2):\n    list1.extend(list2[:-1])\n    list1.append(list2[-1])\n    return list1\n\ndef replace_list(list1, list2):\n    list1.extend(list2[:-1])\n    list1.append(list2[-1])\n    return list1\n\ndef replace_list(list1, list2):\n    list1.extend(list2[:-1])\n    list1.append(list2[-1])\n    return list1", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(l1, l2):\n    # You must raise an exception if the list l1\n    # is not longer than l2\n    # Your code goes here\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, new_lst):\n    lst[len(lst)-1] = new_lst\n    return lst\n\n# Tester\nlst = [1, 3, 5, 7, 9, 10]\nnew_lst = [2, 4, 6, 8]"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(m,n,p):\n    array = []\n    for i in range(m):\n        array.append([])\n        for j in range(n):\n            array[i].append([])\n            for k in range(p):\n                array[i][j].append('*')\n    return array\n\n# Tests", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(x, y, z):\n    for i in range(z):\n        row = []\n        for j in range(y):\n            col = []\n            for k in range(x):\n                col.append(\"*\")\n            row.append(col)\n        print(row)\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(width, height, depth):\n    return [[['*' for i in range(width)] for j in range(depth)] for k in range(height)]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows,cols,depth):\n    return [[['*']*cols]*rows]*depth\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(row,col,size):\n    import numpy as np\n    arr = np.full(shape=(row,col,size), fill_value='*')\n    return arr.tolist()\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows, cols, depth):\n    if rows < 0 or cols < 0 or depth < 0:\n        return None\n    return [[['*']*cols]*rows]*depth\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(n,m,p):\n    arr=[]\n    for i in range(n):\n        row=[]\n        for j in range(m):\n            row.append(['*']*p)\n        arr.append(row)\n    return arr", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(row,col,depth):\n    return [[['*' for i in range(col)] for i in range(depth)] for i in range(row)]\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(row, col, depth):\n    arr = []\n    for _ in range(depth):\n        sub_arr = []\n        for _ in range(row):\n            sub_sub_arr = []\n            for _ in range(col):\n                sub_sub_arr.append(\"*\")\n            sub_arr.append(sub_sub_arr)\n        arr.append(sub_arr)\n    return arr\n\n\n# Tests", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\n# Solution:\n\ndef array_3d(row, col, dep):\n    \"\"\"\n    Returns a list containing lists of lists of lists.\n    \"\"\"\n\n    my_array = []\n    for i in range(0, row):\n        my_array.append([])\n        for j in range(0, col):\n            my_array[i].append([])\n            for k in range(0, dep):\n                my_array[i][j].append('*')\n\n    return my_array\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_characters(string):\n    total_characters = 0\n    for letter in string:\n        if letter.isalpha():\n            total_characters += 1\n    return total_characters\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    count = 0\n    for char in string:\n        if char == \" \":\n            count += 1\n    return len(string) - count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    \"\"\"\n    Function to count total characters in a string\n\n    :param string: The string to be counted\n    :return: The total number of characters\n    \"\"\"\n    count=0\n    for i in range(len(string)):\n        count+=1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    if string=='':\n        return 0\n    else:\n        return len(string)+count_charac(string[1:])\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    length = len(str)\n    count = 0\n    for i in range(length):\n        count += len(str[i])\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_char(string):\n    total_char = 0\n    for c in string:\n        total_char += 1\n    return total_char\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    return len(str)", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(text):\n    return len(text)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_characters(string):\n    return len(string)\n\n#Below is an example usage:\n\nimport re\n\ndef count_characters(string):\n    return len(string)\n\n# Enter the string\nstring = \"hello world\"\n\n# Calling the function"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nimport operator\n\n\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: (x[0], len(x[1])), reverse=True)\n\n\ndef test_function():\n    assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    new_lst = []\n    for el in lst:\n        el.sort()\n        new_lst.append(el)\n    return sorted(new_lst, key=lambda x: x[0][0])\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(data):\n    return sorted(data, key=lambda item: item[0])\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nfrom typing import List\n\nimport pytest\n\n\ndef sort_on_occurence(l: List[tuple]) -> List[tuple]:\n    l = sorted(l, key=lambda x: (x[0], x[1]))\n    return sorted(l, key=lambda x: x[0])\n\n\ndef test_sort_on_occurence() -> None:\n    assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(arr):\n    \"\"\"\n    Write a function to sort the given list based on the occurrence of first element of tuples.\n\n    >>> assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\n    \"\"\"\n\n    counts = Counter(a[0] for a in arr)\n\n    return sorted(arr, key=lambda x: (counts[x[0]], x))\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(x):\n    return sorted(x, key = lambda y: (y[0], y[1][0]))\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom itertools import groupby\n\n\ndef sort_on_occurence(lst):\n    ret = []\n    for group, grp in groupby(sorted(lst, key=lambda x: x[0]), key=lambda x: x[0]):\n        ret.append(list(grp))\n    return ret\n\n\ndef test_sort_on_occurence():\n    assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    assert sort_on_occurence([(1, 'Jake'), (1, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 1), (1, 'Bob', 1)]", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nimport operator\nfrom typing import List\n\n\ndef sort_on_occurence(tuples: List[tuple]) -> List[tuple]:\n    sorted_list = sorted(tuples, key=lambda x: (-x[0], x[1]))\n    return sorted_list\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(list_of_tuples):\n    \"\"\"\n    Sorts the given list based on the occurrence of the first element of each tuple.\n    \"\"\"\n    sorted_list = sorted(list_of_tuples, key=lambda x: (x[0], x[0]))\n    return sorted_list"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(N):\n\t#loop until we get the next perfect square number\n\twhile (N % 2 == 1):\n\t\t#increment by 2\n\t\tN += 2\n\t#return N\n\treturn N\n\ndef next_Perfect_Square1(N):\n\t#loop until we get the next perfect square number\n\twhile (N % 2 == 1):\n\t\t#increment by 2\n\t\tN += 2\n\t#return N\n\treturn N\n\ndef next_Perfect_Square2(N):\n\t#loop until we get the next perfect square number\n\twhile (N % 2 == 1):\n\t\t#increment by 2\n\t\tN += 2\n\t#return N\n\treturn N\n\ndef next_Perfect_Square3(N):\n\t#loop until we get the next perfect square number\n\twhile (N % 2 == 1):\n\t\t#increment by 2\n\t\tN += 2\n\t#return N\n\treturn N\n\ndef next_Perfect_Square4(N):\n\t#loop until we get the next perfect square number\n\twhile (N % 2 == 1):\n\t\t#increment by 2\n\t\tN += 2\n\t#return N\n\treturn N\n\ndef next_Perfect_Square5(N):\n\t#loop until we get the next perfect square number\n\twhile (N % 2 == 1):\n\t\t#increment by 2\n\t\tN += 2\n\t#return N\n\treturn N\n\ndef next_Perfect_Square6(N):\n\t#loop until we get the next perfect square number\n\twhile (N % 2 == 1):\n\t\t#increment by 2\n\t\tN += 2\n\t#return N\n\treturn N\n\ndef next_Perfect_Square7(N):\n\t#loop until we get the next perfect square number\n\twhile (N % 2 == 1):\n\t\t#increment by 2\n\t\tN += 2\n\t#return N\n\treturn N\n\ndef next_Per", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n# Python program to find the next perfect square greater than a given number.\ndef next_Perfect_Square(n):\n    n += 1\n    while n % 2 == 0:\n        n += 1\n    while n % 3 == 0:\n        n += 1\n    while n % 5 == 0:\n        n += 1\n    while n % 7 == 0:\n        n += 1\n    while n % 11 == 0:\n        n += 1\n    while n % 13 == 0:\n        n += 1\n    while n % 17 == 0:\n        n += 1\n    while n % 19 == 0:\n        n += 1\n    while n % 23 == 0:\n        n += 1\n    while n % 29 == 0:\n        n += 1\n    while n % 31 == 0:\n        n += 1\n    while n % 37 == 0:\n        n += 1\n    while n % 41 == 0:\n        n += 1\n    while n % 43 == 0:\n        n += 1\n    while n % 47 == 0:\n        n += 1\n    while n % 53 == 0:\n        n += 1\n    while n % 59 == 0:\n        n += 1\n    while n % 61 == 0:\n        n += 1\n    while n % 67 == 0:\n        n += 1\n    while n % 71 == 0:\n        n += 1\n    while n % 73 == 0:\n        n += 1\n    while n % 79 == 0:\n        n += 1\n    while n % 83 == 0:\n        n += 1\n    while n % 89 == 0:\n        n += 1\n    while n % 97 == 0:\n        n += 1\n    while n % 101 == 0:\n        n += 1\n    while n % 103 == 0:\n        n += 1\n    while n % 107 == 0:\n       ", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n#Next perfect Square\ndef next_Perfect_Square(n):\n    i = 1\n    while i**2 < n:\n        i += 1\n    return i**2\n\n\n#Unit test\ndef test():\n    print(\"next_Perfect_Square(35) == 36\")\n    assert(next_Perfect_Square(35) == 36)\n\n\ntest()\n\n# output:\n# next_Perfect_Square(35) == 36\n# True", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n# To get rid of the compiler warning\nfrom __future__ import division\n\n# This function finds the next perfect square greater than a given number\n# It returns the square of the next perfect square.\ndef next_Perfect_Square(n):\n    while n % 2 == 0:\n        n /= 2\n    while n % 3 == 0:\n        n /= 3\n    while n % 5 == 0:\n        n /= 5\n    return n * n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n# Solution\n# Time: O(log n)\n# Space: O(1)\ndef next_Perfect_Square(num):\n    return (num + 1) * (num + 1)\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n# sample solution\n\ndef next_Perfect_Square(n):\n    if n <= 1: return 1\n    s = int(n ** 0.5)\n    while s ** 2 <= n:\n        s += 1\n    return s ** 2\n\n# test cases\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(x):\n    # get square root of x\n    sq = int(x ** 0.5)\n    # get number of times x can be divided by sq\n    cnt = 1\n    # if x is perfect square return x\n    if sq ** 2 == x:\n        return x\n    else:\n        # else continue until sq * sq can divide x\n        while sq * sq < x:\n            cnt += 1\n            sq = sq + 1\n        return sq * sq\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(number):\n\t# your code goes here\n\tl = int(math.sqrt(number))\n\tif l**2 == number:\n\t\treturn l+1\n\treturn l+2\n\t\ndef main():\n\tnumber = 4\n\tprint(next_Perfect_Square(number))\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n#find the next perfect square greater than the given number\ndef next_Perfect_Square(n):\n    i = n\n    while i < (n+1)**2:\n        if n%i == 0:\n            return i\n        i += 1", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\nimport math\n\n\ndef next_Perfect_Square(num):\n    num = int(num)\n    for i in range(num + 1, int(math.sqrt(num))):\n        if num % i == 0:\n            return i * i\n    return num * num\n\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    def max_sum_helper(arr, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return max(arr[start], arr[end])\n        mid = (start + end) // 2\n        return max(max_sum_helper(arr, start, mid), max_sum_helper(arr, mid + 1, end),\n                   max_sum_helper(arr, start, mid) + arr[mid],\n                   max_sum_helper(arr, mid + 1, end) + arr[mid])\n    return max_sum_helper(arr, 0, n - 1)\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(a, n):\n    total = max_sum_helper(a, n, 0, 0, 0)\n    return total[0]\n\ndef max_sum_helper(a, n, cur, max_s, max_sub):\n    # base case\n    if n == 0:\n        return (max_sub, max_s)\n    else:\n        # if sum is already negative\n        if max_s < 0:\n            return max_sum_helper(a, n-1, 0, 0, 0)\n\n        max_sub = max(max_sub, a[n-1])\n        max_s = max(max_s, max_sub)\n        max_sub = max(max_sub, max_s + a[n-1])\n        max_s = max(max_s, max_sub)\n        max_sub = max(max_sub, max_s + a[n-1])\n        max_s = max(max_s, max_sub)\n        return max_sum_helper(a, n-1, cur + a[n-1], max_s, max_sub)\n\ndef max_sum_recursion(a, n):\n    max_s = a[0]\n    max_sub = 0\n    for i in range(1, n):\n        max_sub = max(max_sub, max_s + a[i])\n        max_s = max(max_s, max_sub)\n    return max_sub\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(array, n):\n    \"\"\"\n    :type array: list\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return array[0]\n    # start with first element\n    max_sum_so_far = array[0]\n    for i in range(1, n):\n        # if array[i] is less than previous value\n        if array[i] < max_sum_so_far:\n            # save the previous value\n            max_sum_so_far = array[i]\n        # else update the max sum with the sum of previous and current values\n        else:\n            max_sum_so_far = max_sum_so_far + array[i]\n    return max_sum_so_far\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, length):\n    max_so_far = max_ending = 0\n    for i in range(length):\n        max_ending = max(max_ending + arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending)\n\n    return max_so_far\n\n# A utility function to find the maximum sum of two given numbers\ndef max_of(a, b):\n    return max(a, b) if a > b else b\n\n# A function to find the max ending sum of an array\ndef max_ending_sum(arr, length):\n    max_ending_sum = 0\n    for i in range(length):\n        max_ending_sum = max(arr[i], arr[i] + max_ending_sum)\n\n    return max_ending_sum\n\n# A function to find the max ending sum of an array\ndef max_sum(arr, length):\n    max_ending_sum = max_ending = 0\n    for i in range(length):\n        max_ending_sum = max_of(max_ending_sum + arr[i], arr[i])\n        max_ending = max(max_ending, max_ending_sum)\n\n    return max_ending\n\n# Driver Code\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    # Write your code here\n    # Use 2DP\n    # Save the sum for every i and j\n    # Initialize the sum matrix to 0\n    # Find the maximum of the sum of the left side and the sum of the right side\n    # Return the maximum sum\n    ans = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        ans[i][0] = arr[i]\n        ans[i][i] = arr[i]\n    for j in range(1, n):\n        ans[0][j] = ans[0][j-1] + arr[j]\n        ans[j][0] = ans[j-1][0] + arr[j]\n    for i in range(1, n):\n        for j in range(1, n):\n            ans[i][j] = max(ans[i][j-1] + arr[j], ans[i-1][j] + arr[j])\n    return ans[n-1][n-1]\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(array, n):\n    # Write your code here\n    # if array is empty\n    if array == []:\n        return 0\n\n    # if array has only 1 element\n    if n == 1:\n        return array[0]\n\n    # initializing maximum sum,\n    # initialized maximum sum of 1st element is the maximum of the array\n    # initialized maximum sum of 2nd element is the maximum of maximum sum of 1st and 2nd element\n    max_sum = max(array[0], max_sum(array[1:], n-1))\n\n    # initializing variable to store maximum sum of 1st and 2nd element\n    max_sum_two = max_sum\n\n    # initializing variable to store sum of all elements from 3rd index to end\n    # sum of array[3] + sum of array[4] + sum of array[5] + sum of array[6] + sum of array[7] + sum of array[8]\n    sum_all_elements = 0\n\n    # initializing loop to calculate maximum sum of bi-tonic sub-sequence\n    for i in range(n-2):\n        # sum of array[i+1] + sum of array[i+2]\n        sum_all_elements = sum_all_elements + array[i+1] + array[i+2]\n\n        # if sum of array[i+1] + sum of array[i+2] is greater than maximum sum of bi-tonic sub-sequence\n        if sum_all_elements > max_sum:\n            # update maximum sum of bi-tonic sub-sequence\n            max_sum = sum_all_elements\n\n    # return maximum sum of bi-tonic sub-sequence\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, n):\n    if (n == 1):\n        return arr[0]\n    else:\n        return max(max_sum(arr[:n//2]), max_sum(arr[n//2:])) + arr[n//2]\n\n# assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nfrom typing import List\nimport numpy as np\n\n\ndef max_sum_bi_tonic_sub_sequence(array: List[int], length: int) -> int:\n    \"\"\"\n    :param array: The array to find the maximum sum.\n    :param length: The length of the array.\n    :return: The maximum sum of bi-tonic sub-sequence.\n    \"\"\"\n    max_sum = 0\n    dp = [0] * length\n    for i in range(1, length):\n        dp[i] = dp[i - 1] + array[i]\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum_bi_tonic(arr, n):\n    '''\n    :param arr: list containing the integers to be summed\n    :param n: length of the array\n    :return: max sum\n    '''\n\n    def max_sub_array(arr):\n        '''\n        :param arr: list containing the integers to be summed\n        :return: max sum sub-array\n        '''\n        curr_sum = 0\n        max_sum = 0\n        for num in arr:\n            curr_sum = curr_sum + num\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            if curr_sum < 0:\n                curr_sum = 0\n        return max_sum\n\n    max_sum_dp = [[0 for i in range(n+1)] for j in range(len(arr)+1)]\n\n    for i in range(1, len(arr)+1):\n        for j in range(1, n+1):\n            if arr[i-1] >= j:\n                max_sum_dp[i][j] = max(max_sum_dp[i-1][j], max_sum_dp[i-1][j-arr[i-1]] + arr[i-1])\n            else:\n                max_sum_dp[i][j] = max_sum_dp[i-1][j]\n\n    return max_sum_dp[len(arr)][n]\n\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    \"\"\" Babylonian Method for computing the square root of a number\"\"\"\n    guess = 1\n    while abs(guess ** 2 - n) > 0.00000000000001:\n        guess += 1\n    return guess\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nfunction babylonian_squareroot(number)\n    s=number\n    x=1\n    i=1\n    while i<1000\n        x_old=x\n        x=s/x\n        if i==1\n            diff=abs(x-x_old)\n            s=x\n        else\n            diff=abs(x-x_old)/(1+abs(x))\n            s=x-diff\n        end\n        i+=1\n    end\n    s\nend\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\nimport math\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \"\"\"\n    # TODO: Replace this code with your implementation\n    # You can use the math library to compute square roots\n    return None", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(num):\n    n = num\n    tol = 1e-10\n\n    while abs(n**2 - num) >= tol:\n        n = (n + num / n) / 2\n\n    return n\n\ndef main():\n    print babylonian_squareroot(10)\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x, n=100):\n    \"\"\"returns the square root of x using the babylonian method\"\"\"\n    e = 1.0\n    while abs(e) > 10**(-n):\n        e = (e + x/e)/2\n    return e\n\n\n# Test cases:", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    a=x\n    b=x/2\n    while abs(b-a)>0.001:\n        c=(a+b)/2\n        d=c**2\n        if d==x:\n            return c\n        if d<x:\n            a=c\n        else:\n            b=c\n    return c\n\n\n# +", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(number):\n    \"\"\"\n    Returns the square root of a number using the babylonian method.\n    The babylonian method is a method of computing square roots. The algorithm is as follows:\n    find an initial estimate.\n    iteratively improve the estimate using the following process:\n        calculate the midpoint between the current estimate and the true value.\n        if the midpoint is closer to the true value, then update the estimate to the midpoint.\n        if the midpoint is further from the true value, then ignore the midpoint and keep the original estimate.\n    \"\"\"\n    initial_estimate = number/2\n    while abs(initial_estimate - number/2) > 0.001:\n        midpoint = (initial_estimate + number/2)\n        if abs(midpoint - number/2) < abs(initial_estimate - number/2):\n            initial_estimate = midpoint\n        else:\n            initial_estimate = initial_estimate\n    return initial_estimate\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    return babylonian_squareroot_iter(x, 1e-6)\n\ndef babylonian_squareroot_iter(x, tol):\n    \"\"\"\n    Compute the square root of x using the Babylonian method\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n    return result", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    return babylonian_iter(x, 0, 1.0/x, 1.0/x, 20)\n\ndef babylonian_iter(x, prev, prev1, delta, max_iter):\n    if max_iter < 1:\n        raise Exception(\"Iteration limit exceeded\")\n    if abs(prev) < delta or abs(prev - prev1) < delta:\n        return prev\n    prev1 = prev\n    delta = abs(prev - prev1)\n    x = prev - ((x - prev)/(prev**2 - x*prev + x*x))\n    return babylonian_iter(x, prev, prev1, delta, max_iter - 1)\n\ndef test_babylonian():\n    assert babylonian_squareroot(10)==3.162277660168379\n    assert babylonian_squareroot(10**12)==1.4460093316887754\n    assert babylonian_squareroot(10**15)==1.1436406548682027\n    assert babylonian_squareroot(10**18)==1.0066281677834415\n    assert babylonian_squareroot(10**20)==1.0000166322612413", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(number):\n    \"\"\"Calculates the square root of a number using the babylonian method.\n\n    Parameters\n    ----------\n    number : float\n        A number\n\n    Returns\n    -------\n    float\n        The square root of a number\n\n    \"\"\"\n    square_root = number\n    count = 0\n    while abs(square_root - (square_root // 10)) > 0.001:\n        count += 1\n        square_root = (square_root + number/square_root) / 2\n    return square_root, count\n\n# Enter the number\nnumber = 10\n\n# Calling the function\nsquare_root, count = babylonian_squareroot(number)\n\n# Printing the result"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(str):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    # If string is null or length 1, there is no palindrome\n    if len(str) < 2 or str[0] != str[len(str) - 1]:\n        return 0\n    \n    # Initialize dp array with -1 for all entries\n    dp = [-1] * (len(str) + 1)\n    \n    # Base cases\n    dp[0], dp[1] = 0, 0\n    \n    for i in range(2, len(str)+1):\n        # If string is palindrome at i-1 and i, then string is palindrome at i\n        if str[i-1] == str[i] and dp[i-1] != -1:\n            dp[i] = dp[i-1] + 1\n        # If string is palindrome at i-1, then string is palindrome at i\n        elif dp[i-1] != -1:\n            dp[i] = dp[i-1]\n        # Otherwise string is not palindrome at i\n        else:\n            dp[i] = 0\n            \n    return dp[len(str)]\n    \nlps(\"TENS FOR TENS\")\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    n = len(s)\n    m = [[0] * n for _ in range(n)]\n    i = 1\n    for j in range(1, n):\n        if s[j] == s[j-1]:\n            i += 1\n            m[j][i] = 1\n            while j + i <= n and s[j+i] == s[j]:\n                i += 1\n                m[j][i] = 1\n        else:\n            if i > 0:\n                i = m[j-1][i]\n            else:\n                i = 0\n                m[j][i] = 0\n    i = 0\n    while i < n and m[i][i] == 0:\n        i += 1\n    if i == 0:\n        return 0\n    maxLen = i\n    for j in range(i-1, -1, -1):\n        if m[j][i] == 1:\n            maxLen = i - j\n            break\n    return maxLen\n\n# test cases", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(str):\n    # code here\n    s = len(str)\n    if s < 2:\n        return 0\n    #lps[i][j] will hold the length of LPS of str[0..i-1]\n    lps = [[0 for j in range(s)] for i in range(s)]\n    for i in range(1, s):\n        for j in range(0, i):\n            #If both characters are same, LPS length is same as length of previous LPS.\n            #Else do not include current character and check in previous row.\n            if str[i] == str[j] and i - j <= 1:\n                lps[i][j] = lps[i-1][j-1] + 1\n            else:\n                lps[i][j] = max(lps[i][j-1], lps[i-1][j])\n    return lps[s-1][s-1]\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    if string == '':\n        return 0\n    l,dp = 0, [1]\n    for i in range(len(string)):\n        for j in range(i, -1, -1):\n            if i-j == 0:\n                dp[i] = dp[j] + 1\n            elif string[i] == string[j] and dp[i] < dp[j]:\n                dp[i] = dp[j]\n            else:\n                break\n        if dp[i] > l:\n            l = dp[i]\n    return l\n    \ndef lps_better(string):\n    if string == '':\n        return 0\n    l, dp = 0, [1]\n    for i in range(len(string)):\n        for j in range(i-1, -1, -1):\n            if i-j == 0:\n                dp[i] = dp[j] + 1\n            elif string[i] == string[j] and dp[i] < dp[j]:\n                dp[i] = dp[j]\n            else:\n                break\n        if dp[i] > l:\n            l = dp[i]\n    return l\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\nimport collections", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    d = [[False] * len(s) for i in range(len(s))]\n    last = [-1] * len(s)\n    last[0] = 0\n    for i in range(1,len(s)):\n        d[i][i] = True\n        for j in range(0,i):\n            if s[j] == s[i]:\n                d[i][i] = True\n                if i - j <= 2:\n                    d[i][j] = True\n                else:\n                    d[i][j] = d[j][i-1]\n                    if d[i][j]:\n                        last[i] = j\n    return lps2(s,d,last,len(s)-1)\n\ndef lps2(s,d,last,i):\n    if d[last[i]][i] == False:\n        return 0\n    j = last[i]\n    count = 0\n    while j > 0 and s[j] == s[i]:\n        count += 1\n        j -= 1\n    return count+1", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\n# Define a function to find the longest palindromic subsequence\ndef lps(str):\n    n = len(str)\n\n    # Create the DP table\n    L = [0] * (n+1)\n    P = [None] * (n+1)\n\n    # Initialize the first row\n    for i in range(1, n+1):\n        L[i] = 1\n        P[i] = i\n\n    for i in range(2, n+1):\n        j = i-1\n        while j>0 and str[i-1] == str[j-1]:\n            L[i] = max(L[i], L[j])\n            P[i] = j\n            j = P[j]\n        j = i-1\n        while j>0 and str[i-1] != str[j-1]:\n            j = P[j]\n\n    return L[n]\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    L = len(s)\n    T = [0] * L\n    for i in range(1, L):\n        j = T[i-1]\n        while s[i] != s[j] and j > 0:\n            j = T[j-1]\n        T[i] = j + 1\n    # print T\n    ans = 0\n    for i in range(1, L):\n        ans = max(ans, T[i])\n    return ans\n\ndef lps_greedy(s):\n    L = len(s)\n    T = [0] * L\n    T[0] = 1\n    j = 0\n    for i in range(1, L):\n        while j > 0 and s[i] != s[j]:\n            j = T[j-1]\n        if s[i] == s[j]:\n            j += 1\n        T[i] = j\n    ans = 0\n    for i in range(1, L):\n        ans = max(ans, T[i])\n    return ans\n\ndef lps_dp(s):\n    L = len(s)\n    # C = [[0] * (L+1) for _ in range(L+1)]\n    # C[0][0] = 0\n    C = [[0] * (L+1) for _ in range(L+1)]\n    for i in range(0, L+1):\n        C[i][0] = 0\n    for i in range(1, L+1):\n        C[0][i] = 0\n    for i in range(1, L+1):\n        for j in range(1, L+1):\n            if s[i-1] == s[j-1]:\n                C[i][j] = C[i-1][j-1] + 1\n            else:\n                C[i][j] = max(C[i-1][j], C[i][j-1])\n    ans = 0\n    for i in range(1, L+1):\n        ans = max(ans, C[i][i])\n    return ans\n\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    lis = [0] * n\n    \n    for i in range(n):\n        lis[i] = 1\n    lis[0] = 0\n    \n    for i in range(1,n):\n        for j in range(0,i):\n            if s[i] == s[j] and (i-j <= 2 or lis[j+1] == 1):\n                lis[i] = max(lis[i],lis[j]+1)\n    return lis[n-1]\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    if len(string) <= 1:\n        return 0\n    longest = 0\n    curr = 0\n    dp = [[0] * len(string) for i in range(len(string))]\n    for i in range(1, len(string)):\n        for j in range(i, -1, -1):\n            if string[j] == string[i]:\n                curr = max(curr + 1, dp[j + 1][i - 1])\n                dp[j][i] = curr\n                if curr > longest:\n                    longest = curr\n    return longest\n\n\nlps(\"TENS FOR TENS\")\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 / (1/n) + harmonic_sum(n-1)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += 1/i\n    return sum\n\ndef test_harmonic_sum():\n    assert harmonic_sum(7) == 2.5928571428571425\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nfrom math import floor, log\n\ndef harmonic_sum(n):\n    \"\"\"\n    Write a function to calculate the harmonic sum of n-1.\n    \"\"\"\n    # Add your solution below\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1.5\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2.5\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 3.5\n    elif n == 7:\n        return 4\n    elif n == 8:\n        return 4.5\n    elif n == 9:\n        return 5\n    elif n == 10:\n        return 5.5\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 6.5\n    elif n == 13:\n        return 7\n    elif n == 14:\n        return 7.5\n    elif n == 15:\n        return 8\n    elif n == 16:\n        return 8.5\n    elif n == 17:\n        return 9\n    elif n == 18:\n        return 9.5\n    elif n == 19:\n        return 10\n    elif n == 20:\n        return 10.5\n    elif n == 21:\n        return 11\n    elif n == 22:\n        return 11.5\n    elif n == 23:\n        return 12\n    elif n == 24:\n        return 12.5\n    elif n == 25:\n        return 13\n    elif n == 26:\n        return 13.5\n    elif n == 27:\n        return 14\n    elif n == 28:\n        return 14.5\n    elif n == 29:\n        return 15\n    elif n == 30:\n        return 15.5\n    elif n == 31:\n        return 16\n    elif n == 32:\n        return 16.5\n   ", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"Calculate the harmonic sum of n\"\"\"\n    return sum(1/i for i in range(n+1))\n\n# Enter the number of terms\nn = 7\n\n# Calling the function", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"\n    The harmonic sum of n is sum of n-1 from 1 to n.\n    \"\"\"\n    return sum(1/i for i in range(n,0,-1))\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1,n+1))\n\ndef test_harmonic_sum():\n    assert harmonic_sum(7) == 2.5928571428571425\n\ndef test_harmonic_sum_0():\n    assert harmonic_sum(0) == 0\n\ndef test_harmonic_sum_1():\n    assert harmonic_sum(1) == 0.5\n\ndef test_harmonic_sum_2():\n    assert harmonic_sum(2) == 0.54\n\ndef test_harmonic_sum_3():\n    assert harmonic_sum(3) == 0.6666666666666666\n\ndef test_harmonic_sum_4():\n    assert harmonic_sum(4) == 0.8\n\ndef test_harmonic_sum_5():\n    assert harmonic_sum(5) == 0.9\n\ndef test_harmonic_sum_6():\n    assert harmonic_sum(6) == 1.0\n\ndef test_harmonic_sum_7():\n    assert harmonic_sum(7) == 1.111111111111111\n\ndef test_harmonic_sum_8():\n    assert harmonic_sum(8) == 1.25\n\ndef test_harmonic_sum_9():\n    assert harmonic_sum(9) == 1.4285714285714286\n\ndef test_harmonic_sum_10():\n    assert harmonic_sum(10) == 1.6", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    # implement your code here\n    return sum(x**(-1) for x in range(1, n+1))\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    #this function sums 1/n from 1 to n-1\n    return sum([(1.0 / i) for i in range(n-1)])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return 1 + (1/2) + (1/3) + (1/4) + (1/5) + (1/6) + (1/7) + (1/8) + (1/9) + (1/10) + (1/11) + (1/12) + (1/13) + (1/14) + (1/15) + (1/16) + (1/17) + (1/18) + (1/19) + (1/20) + (1/21) + (1/22) + (1/23) + (1/24) + (1/25) + (1/26) + (1/27) + (1/28) + (1/29) + (1/30) + (1/31) + (1/32) + (1/33) + (1/34) + (1/35) + (1/36) + (1/37) + (1/38) + (1/39) + (1/40) + (1/41) + (1/42) + (1/43) + (1/44) + (1/45) + (1/46) + (1/47) + (1/48) + (1/49) + (1/50) + (1/51) + (1/52) + (1/53) + (1/54) + (1/55) + (1/56) + (1/57) + (1/58) + (1/59) + (1/60) + (1/61) + (1/62) + (1/63) + (1/64) + (1/65) + (1/66) + (1/", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1.0 / i\n    return sum\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n# Solution 1\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n# Solution 2\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n# +\ndef intersection_array(arr1, arr2):\n    intersection = list(set(arr1) & set(arr2))\n    return intersection\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(list_a, list_b):\n    return list(set(list_a) & set(list_b))\n\nlist_a = [1, 2, 3, 5, 7, 8, 9, 10]\nlist_b = [1, 2, 4, 8, 9]", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(array1, array2):\n    new_array = []\n    for i in range(len(array1)):\n        if (array1[i] in array2):\n            new_array.append(array1[i])\n    return new_array\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a,b):\n    return list(set(a).intersection(b))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\nimport pytest\nimport numpy as np\n\ndef intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    intersection = list(set1.intersection(set2))\n    return sorted(intersection)\n\n@pytest.mark.parametrize('arr1, arr2, expected', [\n    ([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9], [1, 2, 8, 9]),\n    ([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 6, 8, 9], [8, 9])\n])\ndef test_intersection_array(arr1, arr2, expected):\n    assert intersection_array(arr1, arr2) == expected", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(array1, array2):\n    array1.sort()\n    array2.sort()\n    intersection_array = list(set(array1) & set(array2))\n    return intersection_array\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(array1, array2):\n    intersection = list(set(array1) & set(array2))\n    return intersection\n\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(l,x):\n    \"\"\"\n    Count the occurences of x in l\n    :param l: tuple\n    :param x: int\n    :return: int\n    \"\"\"\n    count = 0\n    for elem in l:\n        if elem == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(arr,X):\n    res = 0\n    for x in arr:\n        if x == X:\n            res+=1\n    return res\n\n# do not modify above this line", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    return (tup.count(x))\n\ndef count_X_sum(tup,x):\n    return (tup.count(x))\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    \"\"\"\n    Args:\n        tup (tuple): tuple of integers\n        x (int): integer to search for\n\n    Returns:\n        int: count of occurrences of x in the input tuple\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(s,X):\n    \"\"\"\n    Counts the number of occurences of an element in a tuple.\n    \"\"\"\n    return s.count(X)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(t,x):\n    count = 0\n    for i in t:\n        if i == x:\n            count += 1\n    return count\n\ndef test_count_X():\n    t = (10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)\n    assert count_X(t,4) == 0", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(nums, x):\n    if x not in nums:\n        return 0\n    return nums.count(x)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(my_tuple, x):\n    \"\"\"\n    :param my_tuple: input tuple\n    :param x: element to be found\n    :return: count of x in my_tuple\n    \"\"\"\n    count = 0\n    for element in my_tuple:\n        if element == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(X, X_count):\n    return X.count(X_count)\n\n# >>> assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n\n# 1. list\n# 2. list\n# 3. list\n\n\n# +\n# Q17. Reverse a list. \n# Write a function to reverse a list.\n# assert reverse([1,2,3])==[3,2,1]\n# -\n\ndef reverse(lst):\n    return lst[::-1]\n\n\n# 1. list\n# 2. list\n# 3. list\n\n# +\n# Q18. Check if an element is present in the list. \n# Write a function to check if an element is present in the list.\n# assert is_present([1,2,3])==True\n# assert is_present([1,2,3,4])==False\n# -\n\ndef is_present(lst, num):\n    for i in range(len(lst)):\n        if lst[i] == num:\n            return True\n    return False\n\n\n# 1. list\n# 2. list\n# 3. list\n\n\n# +\n# Q19. Check if a list is empty. \n# Write a function to check if a list is empty or not.\n# assert is_empty([1,2,3])==False\n# assert is_empty([])==True\n# -\n\ndef is_empty(lst):\n    return not lst\n\n\n# 1. list\n# 2. list\n# 3. list\n\n\n# +\n# Q20. Find the index of an element in a list. \n# Write a function to find the index of an element in a list.\n# assert index([1,2,3])==True\n# assert index([1,2,3,4])==True\n# assert index([1,2,3,4,5])==False\n# -\n\ndef index(lst, elem):\n    if elem in lst:\n        return", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(arr,element):\n    length = len(arr)\n    for i in range(length):\n        arr.insert(i,element)\n    return arr\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list, element):\n    newlist = []\n    for i in list:\n        newlist.append(element)\n        newlist.append(i)\n    return newlist\n\ninsert_element(['Red', 'Green', 'Black'],'c')\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list_input, element):\n    l = []\n    for i in range(len(list_input)):\n        l.append(element)\n        l.append(list_input[i])\n    return l\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list_, x):\n    if len(list_) == 0:\n        return [x]\n    else:\n        return [x] + insert_element(list_[1:], x)\n\ninsert_element(['Red', 'Green', 'Black'] ,'c')", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list1, list2):\n    for i in range(0, len(list1)):\n        list1.insert(i, list2)\n    return list1\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst,val):\n    if len(lst)==0:\n        return [val]\n    else:\n        return [val]+lst", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(l, e):\n    l1 = []\n    for i in range(len(l)):\n        l1.append(e)\n        l1.append(l[i])\n    return l1\n\nl = [1,2,3,4,5]\ninsert_element(l,'a')", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst,x):\n\tfor i in range(len(lst)):\n\t\tlst.insert(i,x)\n\treturn lst\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(mylist,item):\n    mylist.insert(0, item)\n    return mylist\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nfrom __future__ import print_function\n\ndef convert(z):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    r = z.real\n    if r == 0:\n        r = 1.0\n    phi = z.imag\n    phi = phi / r\n    if phi < 0:\n        phi += 2 * 3.14159265\n    return r, phi\n\ndef test():\n    \"\"\"\n    Test function.\n    \"\"\"\n    z = 2 + 3j\n    assert convert(z) == (5.0, 0.309016994374947)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    \"\"\"\n    Write a function that converts complex numbers to polar coordinates.\n\n    Returns a tuple of (r, phi) where r is the magnitude of the complex number,\n    and phi is the angle of the complex number in radians.\n\n    >>> convert(1) == (1.0, 0.0)\n    True\n    >>> convert(1+2j) == (3.1622776601683795, 0.7853981633974482)\n    True\n    >>> convert(-5-6j) == (5.0, 2.3561944901923448)\n    True\n    \"\"\"\n    raise NotImplementedError(\"convert\")\n\n# tests\nfrom nose.tools import assert_equal, assert_raises\nfrom nose.plugins.attrib import attr\n\ndef test_convert():\n    # test basic cases\n    assert_equal(convert(1), (1.0, 0.0))\n    assert_equal(convert(1+2j), (3.1622776601683795, 0.7853981633974482))\n    assert_equal(convert(-5-6j), (5.0, 2.3561944901923448))\n\n    # test invalid types\n    assert_raises(TypeError, convert, \"test\")\n\n    # test special cases\n    assert_equal(convert(0), (0.0, 0.0))\n    assert_equal(convert(-0.0), (0.0, 0.0))\n    assert_equal(convert(0.0), (0.0, 0.0))\n    assert_equal(convert(1.0), (1.0, 0.0))\n    assert_equal(convert(1.0j), (1.0, 0.0))\n\n    # test no exceptions\n    assert_equal(convert(complex(0)), (0.0, 0.0))\n    assert_equal(convert(complex(0.", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    return (abs(z), math.degrees(math.atan2(z.imag, z.real)))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    r = math.sqrt(z.real ** 2 + z.imag ** 2)\n    phi = math.atan2(z.imag, z.real)\n    return (r, phi)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(c):\n    return (c.real, c.imag)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    \"\"\"\n    convert(z) = (rho, phi)\n\n    z is a complex number, rho is the magnitude and phi is the angle\n    \"\"\"\n    if z.imag == 0.0:\n        return (z.real, 0.0)\n    else:\n        phi = math.atan2(z.imag, z.real)\n        rho = math.sqrt(z.real * z.real + z.imag * z.imag)\n        return (rho, phi)\n\n# Here is an example usage:\n\nimport math\n\ndef convert(z):\n    \"\"\"\n    convert(z) = (rho, phi)\n\n    z is a complex number, rho is the magnitude and phi is the angle\n    \"\"\"\n    if z.imag == 0.0:\n        return (z.real, 0.0)\n    else:\n        phi = math.atan2(z.imag, z.real)\n        rho = math.sqrt(z.real * z.real + z.imag * z.imag)\n        return (rho, phi)\n\n# Enter the complex number\nz = 1 + 2j\n\n# Calling the function", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(c):\n    x = c.real\n    y = c.imag\n    r = (x**2+y**2)**0.5\n    theta = math.atan2(y, x)\n    return r, theta\n\ndef main():\n    pass\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    return (z.real, z.imag)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(complex_num):\n    \"\"\"\n    Convert complex number to polar form\n    \"\"\"\n    x, y = complex_num\n    polar_num = 2 * np.arctan2(y, x)\n    r = np.sqrt(x ** 2 + y ** 2)\n    return r, np.degrees(polar_num)\n\n\ndef test():\n    assert convert(1) == (1.0, 0.0)\n\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(values):\n    count = 0\n    for value in values:\n        if isinstance(value, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\n# count integers in list\ndef count_integer(lst):\n    return len([x for x in lst if isinstance(x, int)])\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list):\n    count = 0\n    for elem in list:\n        if isinstance(elem, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(mylist):\n    return len([x for x in mylist if isinstance(x,int)])\n\ndef count_integer2(mylist):\n    return sum(1 for x in mylist if isinstance(x,int))\n\ndef count_integer3(mylist):\n    return sum(isinstance(x,int) for x in mylist)\n\ndef count_integer4(mylist):\n    return sum(int(isinstance(x,int)) for x in mylist)", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    \"\"\"\n    >>> lst = [1,2,'abc',1.2]\n    >>> count_integer(lst)\n    2\n    \"\"\"\n    n = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            n += 1\n    return n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(arr):\n\n    counter = 0\n\n    for i in arr:\n        if isinstance(i, int):\n            counter += 1\n    return counter", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list_of_values):\n    result = 0\n    for value in list_of_values:\n        if isinstance(value, int):\n            result += 1\n    return result\n\n\nlist_of_values = [1,2,3,4,5,6,7,8,9,10, 'abc', 1.2]\ncount_integer(list_of_values)\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n# Define your function here\ndef count_integer(numbers):\n    count = 0\n    for n in numbers:\n        if isinstance(n, int):\n            count += 1\n    return count\n\n\n# Do not change the function name", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list_of_elements):\n    \"\"\"\n\n    :param list_of_elements:\n    :return:\n    \"\"\"\n    counter = 0\n    for element in list_of_elements:\n        if isinstance(element, int):\n            counter += 1\n    return counter\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    return len([x for x in lst if isinstance(x, int)])\n\n# Enter the list\nlst = [1,2,3,4,5,6,7,8,9,10]\n\n# Calling the function"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(str):\n    return [word for word in str.split() if word.startswith(('a','e'))]", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    words = []\n    for word in string.split():\n        if word[0] == 'a' or word[0] == 'e':\n            words.append(word)\n    return words\n\n\n#--------------------", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\nwords_ae = lambda text: [word for word in text.split() if word[0] in 'ae']\n\n\ndef test_words_ae():\n    assert words_ae(\"python programe\")==['ame']\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(text):\n    word = text.split(' ')\n    for i in word:\n        if i[0] == 'a' or i[0] == 'e':\n            yield i\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(st):\n    l = []\n    for i in range(len(st)):\n        if st[i] == 'a' or st[i] == 'e':\n            l.append(st[i:])\n    return l\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(text):\n    for i in range(len(text)):\n        if (text[i] == 'a' or text[i] == 'e'):\n            words = []\n            # print(text[i])\n            if (text[i+1] != ' '):\n                words.append(text[i])\n                # print(text[i])\n                while (text[i] != ' '):\n                    i += 1\n                    words.append(text[i])\n                    # print(text[i])\n                    if (text[i] == ' '):\n                        # print(words)\n                        yield words\n                        break\n    # print(words)\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    return [word for word in string.split() if word[0] in ['a', 'e']]\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\nimport unittest\n\n\ndef words_ae(word):\n    \"\"\"\n    >>> words_ae('python programe')\n    ['ame']\n    \"\"\"\n\n    def validate(word):\n        for letter in word:\n            if letter not in 'ae':\n                return False\n        return True\n\n    return list(filter(validate, word))\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(str):\n    words=[]\n    for letter in str:\n        if letter=='a' or letter=='e':\n            words.append(letter)\n            if letter=='e':\n                words.append('e')\n            words.append(letter)\n    return words\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    return [word for word in string.split(' ') if word.startswith('a') or word.startswith('e')]"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n# +\n#https://www.geeksforgeeks.org/count-and-print-number-of-set-bits/\n# https://github.com/liu2018nmt/Algorithmic-Interview/blob/master/count-set-bits.py\n\ndef countSetBits(n):\n\t# number of bits of n\n\tn = n - ((n >> 1) & 0x55555555);\n\tn = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n\tn = (n + (n >> 4) & 0x0F0F0F0F) * 0x01010101;\n\treturn n >> 24;\n\n# Driver code\nn = 26", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colours, n):\n    # Write your code here.\n    # If n is 0, then return a list of empty tuples.\n    if n == 0:\n        return [()]\n    # Return the list of tuples consisting of the combinations of the remaining colors\n    # with the given colour and the remaining number of colours.\n    else:\n        return combinations_colors(colours[1:],n-1) + combinations_colors(colours[1:],n-1)\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors( colors,num):\n    if len(colors) < num:\n        return None\n    ans = []\n    for i in range(len(colors)):\n        ans += [(colors[i],) * num]\n    return ans", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, n):\n    res = []\n    helper(colors, n, [], res)\n    return res\n\ndef helper(colors, n, path, res):\n    if n == 0:\n        res.append(tuple(path))\n    else:\n        for i in range(len(colors)):\n            helper(colors, n - 1, path + [colors[i]], res)\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n# list of colors\ncolors = [\"Red\",\"Green\",\"Blue\"]\n# no. of colours to be selected\nn = 3\n# count of all the combinations\ncount = 1\n# list of lists to store all the combinations\ncombinations = []\n\n# range of no. of colours to be taken\nfor i in range(1, n+1):\n    # list to store the combination of i colours\n    temp = []\n    # no. of combinations of i colours\n    for j in combinations(colors, i):\n        # count each combination\n        temp.append(j)\n    # store the count of each combination\n    combinations.append(temp)\n    # increment the count\n    count += temp[0]\n\n# return all the combinations\nreturn combinations", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,n):\n    if n==0:\n        return []\n    elif n==1:\n        return colors\n    else:\n        return combinations_colors(colors,n-1)+combinations_colors(colors,n-2)+combinations_colors(colors,n-3)\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors( colours, n ):\n    \n    # Write your code here\n    combos = [tuple(comb) for comb in itertools.combinations(colours, n)]\n    return combos", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,length):\n    all_combinations = []\n    for i in range(len(colors)):\n        for j in range(i,len(colors)):\n            for k in range(j,len(colors)):\n                if k>=i and k>=j:\n                    all_combinations.append((colors[i],colors[j],colors[k]))\n    return all_combinations\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colours,k):\n    return list(itertools.combinations(colours,k))\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\nimport itertools\n\ndef combinations_colors(colors, n):\n    if n == 0:\n        return [tuple()]\n    if n == 1:\n        return itertools.combinations(colors, 1)\n    else:\n        return itertools.chain(*[itertools.combinations(colors, i) for i in range(1,n+1)])\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes(n):\n    return sum(1 for i in range(2,n+1) if all(i%j !=0 for j in range(2,i) if i != j))\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(number):\n    \"\"\"\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(4)\n    1\n    >>> count_Primes_nums(10)\n    4\n    \"\"\"\n    count=0\n    for i in range(2, number+1):\n        if(i!=2):\n            for j in range(2,i):\n                if(i%j==0):\n                    break\n            else:\n                count+=1\n    return count\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    elif n == 1 or n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# Solving:\n# 1. Write a python function to count the number of prime numbers less than a given non-negative number.\n# 2. Examples:\n# assert count_Primes_nums(5) == 2\n# assert count_Primes_nums(10) == 2\n# assert count_Primes_nums(15) == 3\n# assert count_Primes_nums(20) == 2\n# assert count_Primes_nums(30) == 3\n# assert count_Primes_nums(35) == 3\n# assert count_Primes_nums(100) == 4\n# assert count_Primes_nums(1000) == 26\n\ndef count_Primes_nums(n):\n    i = 2\n    count = 0\n    while i <= n:\n        if is_Prime(i):\n            count += 1\n        i += 1\n    return count\n\ndef is_Prime(n):\n    i = 2\n    while i <= n/2:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# def count_primes(n):\n\n#     #count the number of prime numbers less than n\n#     prime_num = 0\n\n#     # iterate over the numbers 2 to n-1\n#     for i in range(2, n):\n#         # if i is prime then count\n#         if (i % 2 == 0) or (i % 3 == 0):\n#             continue\n#         else:\n#             for j in range(5, (i // 2 + 1)):\n#                 # if i is not divisible by any of 2,3,5..j then i is prime\n#                 if (i % j == 0):\n#                     break\n#             else:\n#                 prime_num += 1\n\n#     return prime_num\n\n\ndef count_Primes_nums(n):\n    # count the number of prime numbers less than n\n    prime_num = 0\n\n    # iterate over the numbers 2 to n-1\n    for i in range(2, n):\n        if i % 3 == 0:\n            continue\n        elif i % 5 == 0:\n            continue\n        else:\n            for j in range(5, (i // 2 + 1)):\n                if i % j == 0:\n                    break\n            else:\n                prime_num += 1\n\n    return prime_num\n\n\n# assert count_primes(5) == 2", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(num):\n\tif num < 2:\n\t\treturn 0\n\n\tprime_nums = 0\n\n\tfor i in range(2, num):\n\t\tis_prime = True\n\n\t\tfor j in range(2, i):\n\t\t\tif i % j == 0:\n\t\t\t\tis_prime = False\n\t\t\t\tbreak\n\n\t\tif is_prime:\n\t\t\tprime_nums += 1\n\n\treturn prime_nums\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    count = 0\n    i = 2\n    while i <= n:\n        if i == n:\n            count += 1\n        else:\n            if is_Prime(i):\n                count += 1\n        i += 1\n    return count\n\ndef is_Prime(x):\n    if x == 2 or x == 3:\n        return True\n    if x % 2 == 0 or x % 3 == 0:\n        return False\n    i = 5\n    while i ** 2 <= x:\n        if x % i == 0 or x % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(x):\n    c = 0\n    for i in range(2,x):\n        if x%i==0:\n            c+=1\n    if c==0:\n        c = 1\n    return c\n\ncount_Primes_nums(5)", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\nfrom math import sqrt\n\ndef count_Primes_nums(n):\n    count=0\n    i=2\n    while i<=n:\n        if (i>2 and i%2==0) or i%2==0:\n            for j in range(2,int(sqrt(i))+1):\n                if i%j==0:\n                    break\n        else:\n            count+=1\n        i+=1\n    return count\n\n#print(count_Primes_nums(5))\n\ndef prime_factorization(n):\n    # prime_factorization(144)\n    # 2**2*3*3\n    # 2*2*2*3*3\n    # 2**2*3*3\n    # 2*3*3\n    # 2*2*3*3\n    # 2**3*3\n    # 3*3\n    # 2*3\n    # 2\n    # 3\n    # 3\n    # 3\n    # 3\n    count = 0\n    #print(n)\n    #print(type(n))\n    #print(isinstance(n,int))\n    #print(int(n))\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            #print(i,\"=\",n//i)\n            while n % i == 0:\n                n //= i\n                #print(n)\n        else:\n            #print(i,\"=\",1)\n            n //= i\n        #print(i,\"=\",n)\n        count += 1\n        i += 1\n    if n != 1:\n        count += 1\n    return count, n\n\ndef prime_factorization(n):\n    # prime_factorization(144)\n    # 2**2*3*3\n    # 2*2*2*3*3\n    # 2**2*3*3\n    # 2*3*3\n    # 2*2*3*3\n    # 2**3*3\n    # 3*3\n    # 2*3\n    # 2\n    # 3\n    # 3\n    # 3\n    # 3\n    count = 0", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    for i in range(2,n):\n        if n%i == 0:\n            break\n    else:\n        return i-1\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef is_Prime_nums(num):\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(num):\n    prime_nums = 0\n    for i in range(num):\n        if is_Prime_nums(i+1):\n            prime_nums += 1\n    return prime_nums\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a, b):\n    a, b = b, a\n    return a, b\n\ndef test_swap_numbers():\n    assert swap_numbers(10,20)==(20,10)\n    assert swap_numbers(123,456)==(456,123)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    # Your code here\n    tmp = a\n    a = b\n    b = tmp\n    return (a,b)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a, b):\n    a, b = b, a\n    return (a,b)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    # swap\n    a, b = b, a\n    return a,b\n\ndef test_swap_numbers():\n    assert swap_numbers(10,20)==(20,10)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(n1,n2):\n    return (n2,n1)\n\n\ndef main():\n    for i in range(10):\n        print(swap_numbers(i,i+1))", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(n1,n2):\n\treturn n2,n1\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a\n\n# Alternative implementation\ndef swap_numbers_alt(a,b):\n    return (b,a)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n    assert isinstance(a, int) and isinstance(b, int)\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(l):\n    return len([i for i in l if i % 2 == 1])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(l):\n    return len([i for i in l if i % 2 != 0])\n\ndef test():\n    assert count_odd([1, 2, 3, 5, 7, 8, 10]) == 4\n    assert count_odd([2, 4, 6, 8, 10, 12, 14]) == 3\n    assert count_odd([]) == 0\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(nums):\n    # write your code here\n    return len([i for i in nums if i%2 != 0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(nums):\n    odd_nums = list(filter(lambda x: x%2==1, nums))\n    return len(odd_nums)", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(arr):\n    return len([x for x in arr if x % 2 == 1])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n#write code here\ndef count_odd(arr):\n    return len([x for x in arr if x%2==1])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(mylist):\n    return len([x for x in mylist if x%2 !=0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(l):\n    return len(list(filter(lambda x: x % 2 != 0, l)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n# Solution-1\n\n\ndef count_odd(lst):\n    \"\"\"\n    This function counts the number of odd numbers in the given list using lambda function.\n    \"\"\"\n    return len([x for x in lst if x % 2 == 1])\n\n\n# Solution-2\n\n\ndef count_odd(lst):\n    \"\"\"\n    This function counts the number of odd numbers in the given list using list comprehension.\n    \"\"\"\n    return len([x for x in lst if x % 2 == 1])\n\n\n# Solution-3\n\n\ndef count_odd(lst):\n    \"\"\"\n    This function counts the number of odd numbers in the given list using list comprehension.\n    \"\"\"\n    return len([x for x in lst if x % 2])\n\n\n# Solution-4\n\n\ndef count_odd(lst):\n    \"\"\"\n    This function counts the number of odd numbers in the given list using map function.\n    \"\"\"\n    return len(list(filter(lambda x: x % 2 == 1, lst)))\n\n\n# Solution-5\n\n\ndef count_odd(lst):\n    \"\"\"\n    This function counts the number of odd numbers in the given list using filter function.\n    \"\"\"\n    return len(list(filter(lambda x: x % 2, lst)))\n\n\n# Solution-6\n\n\ndef count_odd(lst):\n    \"\"\"\n    This function counts the number of odd numbers in the given list using list comprehension.\n    \"\"\"\n    return len([x for x in lst if not (x % 2 == 0)])\n\n\n# Solution-7\n\n\ndef count_odd(lst):\n    \"\"\"\n    This function counts the number of odd numbers in the given list using list comprehension.\n    \"\"\"\n    return sum([1 for x in lst if not (x % 2 == 0)])\n\n\n# Solution-8\n\n\ndef count_odd(lst):\n    \"\"\"\n    This function counts the number of odd numbers in the given list using reduce function.\n    \"\"\"\n    return reduce(lambda x, y: x + 1 if not (y % 2 == 0) else x, lst)\n\n\n# Solution-9\n\n\ndef count_", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(arr):\n    return sum(1 for x in arr if x%2 != 0)\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    sorted_tuple1 = sorted(tuple1, reverse=True)\n    sorted_tuple2 = sorted(tuple2, reverse=True)\n    return list(reversed(sorted_tuple1)), list(reversed(sorted_tuple2))\n\ndef test():\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\nfrom typing import Tuple\n\nTupleOfTuple = Tuple[Tuple[int, int], Tuple[int, int]]\n\ndef maximize_elements(tuple_of_tuples: TupleOfTuple, target: TupleOfTuple) -> TupleOfTuple:\n    \"\"\"\n    Replaces the maximum value of the elements of the first tuple with the maximum value of the elements of the second tuple.\n\n    >>> assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    >>> assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((1, 3), (4, 5), (2, 9), (1, 10))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    >>> assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((1, 2), (4, 5), (2, 9), (1, 10))) == ((6, 7), (4, 5), (2, 9), (7, 10))\n    >>> assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((1, 3), (3, 5), (2, 9), (1, 10))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    >>> assert", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n# Note: we do not need to explicitly sort our tuples\n\ndef maximize_elements(tuple_a, tuple_b):\n    max_a = tuple_a\n    max_b = tuple_b\n    for i in range(len(tuple_a)):\n        if tuple_a[i][1] > tuple_b[i][1]:\n            max_a = tuple_b[i]\n            max_b = tuple_a[i]\n        elif tuple_a[i][1] < tuple_b[i][1]:\n            max_a = tuple_a[i]\n            max_b = tuple_b[i]\n    return (max_a, max_b)\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef maximize_elements(tuples1: List[Tuple[int, int]], tuples2: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    res = []\n    for i in range(len(tuples1)):\n        if tuples1[i][1] < tuples2[i][1]:\n            res.append((tuples1[i][0], tuples2[i][0]))\n        else:\n            res.append(tuples2[i])\n    return res\n\n\ndef test():\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)),\n                           ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuples1, tuples2):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    max_tuple = (tuples1[0][0], tuples1[0][1], tuples1[1][0], tuples1[1][1])\n    for i in range(2, len(tuples1)):\n        curr_tuple = (tuples1[i][0], tuples1[i][1], tuples1[i-1][0], tuples1[i-1][1])\n        if curr_tuple > max_tuple:\n            max_tuple = curr_tuple\n    return max_tuple", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(elements1, elements2):\n    max_elem_list = []\n    for i in range(len(elements1)):\n        for j in range(len(elements2)):\n            if elements1[i] > elements2[j]:\n                max_elem_list.append(elements1[i])\n                break\n        else:\n            max_elem_list.append(elements2[j])\n\n    return max_elem_list\n\n\n# %%", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n# ***\n\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"maximize_elements(tuple1, tuple2) returns a tuple in which elements\n    from tuple1 have been increased by elements from tuple2\n    \"\"\"\n    if tuple1[0] > tuple2[0]:\n        tuple1 = (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1])\n    elif tuple1[0] < tuple2[0]:\n        tuple2 = (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1])\n\n    if tuple1[1] > tuple2[1]:\n        tuple1 = (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1])\n    elif tuple1[1] < tuple2[1]:\n        tuple2 = (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1])\n\n    return tuple1, tuple2\n\n# ***\n\n# tests\ndef test_maximize_elements():\n    \"\"\"tests for the maximize_elements function\"\"\"\n\n    # test case 1\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\n    # test case 2\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 4))) == ((6, 7), (4, 11), (2, 9), (7", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(elem_1, elem_2):\n    max_1 = max(elem_1)\n    max_2 = max(elem_2)\n    max_tuple = (max_1, max_2)\n    return max_tuple\n\n\n#\n#   Common test\n#\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple_one, tuple_two):\n    \"\"\"\n    :param tuple_one: tuple\n    :param tuple_two: tuple\n    :return: tuple\n    \"\"\"\n    max_one = 0\n    max_two = 0\n    for i in tuple_one:\n        if i[1] > max_one:\n            max_one = i[1]\n        if i[0] > max_one:\n            max_one = i[0]\n\n    for j in tuple_two:\n        if j[1] > max_two:\n            max_two = j[1]\n        if j[0] > max_two:\n            max_two = j[0]\n\n    new_one = []\n    for i in tuple_one:\n        if i[0] == max_one:\n            new_one.append(i)\n        if i[1] == max_one:\n            new_one.append(i)\n\n    new_two = []\n    for i in tuple_two:\n        if i[0] == max_two:\n            new_two.append(i)\n        if i[1] == max_two:\n            new_two.append(i)\n\n    return tuple(new_one), tuple(new_two)\n\n\n#Tests", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n    output = []\n    for tuple1 in tuples1:\n        for tuple2 in tuples2:\n            if tuple1[0] < tuple2[0] and tuple1[1] < tuple2[1]:\n                output.append(tuple2)\n            elif tuple1[0] < tuple2[0] and tuple1[1] > tuple2[1]:\n                output.append(tuple1)\n            elif tuple1[0] > tuple2[0] and tuple1[1] > tuple2[1]:\n                output.append(tuple2)\n    return output"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# # newman_prime(n)\n\n# +", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    while True:\n        if is_prime(newman_sw(n)):\n            return n\n        else:\n            n += 1\n\ndef newman_sw(n):\n    base = 10\n    power = 2\n    while True:\n        if is_prime(base**power):\n            return base**power\n        else:\n            power += 1\n            if power >= n:\n                break\n\n#def is_prime(n):\n#    if n % 2 == 0:\n#        return False\n#    if n == 2:\n#        return True\n#    if n % 3 == 0:\n#        return False\n#    for i in range(5, int(n**0.5)+1, 6):\n#        if n % i == 0:\n#            return False\n#    return True\n\ndef is_prime(n):\n    return all(n % i != 0 for i in range(2, int(n**0.5)+1))", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    if n == 0:\n        raise ValueError('Not a number')\n    \n    a = 2\n    b = 3\n    c = a+b\n    i = 2\n    n_newman_primes = []\n    \n    while(len(n_newman_primes) != n):\n        while c % b != 0:\n            c = a+b\n            b = b+2\n            c = a+b\n        else:\n            a = b\n            b = c\n            c = a+b\n            i = i+1\n            if i > 1000000:\n                raise ValueError('Not a number')\n            n_newman_primes.append(c)\n    return n_newman_primes[n-1]\n\nnewman_prime(3)\n\n# +\nimport time\nimport random\nimport math\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\n\ndef newman_prime(n):\n    if n == 0:\n        raise ValueError('Not a number')\n    \n    a = 2\n    b = 3\n    c = a+b\n    i = 2\n    n_newman_primes = []\n    \n    while(len(n_newman_primes) != n):\n        while c % b != 0:\n            c = a+b\n            b = b+2\n            c = a+b\n        else:\n            a = b\n            b = c\n            c = a+b\n            i = i+1\n            if i > 1000000:\n                raise ValueError('Not a number')\n            n_newman_primes.append(c)\n    return n_newman_primes[n-1]\n\ndef newman_prime_seq(limit):\n    prime_seq = []\n    for i in range(1, limit):\n        try:\n            prime_seq.append(newman_prime(i))\n        except ValueError:\n            break\n    return prime_seq\n\nstart = time.time()", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    Args:\n        n (int): nth prime\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    if n > 0:\n        x = 1\n        y = 2\n        for i in range(3,n):\n            if(newman_prime_helper(x,y)):\n                if(i == n):\n                    return i\n            x, y = y, x+y\n\ndef newman_prime_helper(x, y):\n    \"\"\"\n    Args:\n        x (int): first candidate number\n        y (int): second candidate number\n    \"\"\"\n    if x%y == 0:\n        return False\n    elif x**2-y**2 == 1:\n        return True\n    else:\n        return newman_prime_helper(x, x+y)\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    num = 2\n    new_num = 2\n    for i in range(2,n):\n        new_num += num\n        new_num += 1\n        new_num += num\n        new_num = new_num % 2\n        if new_num == 1:\n            yield new_num\n            new_num = 2\n        else:\n            new_num = 2\n            yield new_num\n            num += 1\n            num += 1\n            num += 1\n            \n\ndef test_newman():\n    assert len(list(newman_prime(10))) == 10\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    if n == 0:\n        return 2\n    else:\n        i = 1\n        while True:\n            if is_prime(i) == False:\n                i += 1\n                if i > n:\n                    return i\n            else:\n                i += 1\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i < n:\n            if n % i == 0:\n                return False\n            i += 1\n    return True", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# Get a list of all primes under x\ndef primes_under(x):\n    # Empty list\n    primes = []\n    for i in range(3, x):\n        # For all numbers less than x that aren't prime\n        if not i % 2 or not i % 3:\n            # If it's divisible by 2 or 3\n            if i:\n                # If it's not 2 or 3\n                primes.append(i)\n    # Return the list of primes\n    return primes\n\n# Function to find the nth newman\u2013shanks\u2013williams prime number\ndef newman_prime(n):\n    # Initialize variables\n    p_n = 2\n    count = 0\n    while count != n:\n        p_n += 1\n        # Check if p_n is a prime\n        if not p_n % 2 or not p_n % 3:\n            # If it's divisible by 2 or 3\n            count += 1\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return p_n\n\n# Tests", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    return the nth Newman-Shanks-Williams prime number.\n    >>> newman_prime(3)\n    7\n    \"\"\"\n    if n == 0:\n        return 2\n\n    # initialize the sieve\n    # O(n)\n    sieve = [0] * (n + 1)\n    sieve[2] = 2\n\n    for i in range(3, n + 1, 2):\n        sieve[i] = i\n\n    # prime counting function\n    # O(n^2)\n    count = 0\n    for i in range(3, n + 1, 2):\n        if sieve[i] == 0:\n            count += 1\n            if count == n:\n                return i\n\n    raise ValueError(\"n must be less than {n} (count = {n})\".format(n=count))\n\ndef newman_prime_memo(n, memo = None):\n    \"\"\"\n    return the nth Newman-Shanks-Williams prime number.\n    >>> newman_prime_memo(3)\n    7\n    \"\"\"\n    if memo is None:\n        memo = {}\n    if n == 0:\n        return 2\n\n    # prime counting function\n    if n not in memo:\n        count = 0\n        for i in range(3, n + 1, 2):\n            if memo[i] == 0:\n                count += 1\n                if count == n:\n                    memo[n] = i\n\n        if n not in memo:\n            memo[n] = None\n\n        return memo[n]\n\n    return memo[n]\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n\ti = 2\n\tj = 1\n\tflag = True\n\twhile flag:\n\t\ti = i + j\n\t\tif newman_primality_test(i):\n\t\t\tj = i\n\t\t\tif j == n:\n\t\t\t\tflag = False\n\t\t\t\treturn i\n\tprint(\"prime number does not exist\")\n\ndef newman_primality_test(n):\n\ti = 2\n\twhile i < n:\n\t\tif n % i == 0:\n\t\t\treturn False\n\t\ti = i + 1\n\treturn True\n\ndef test():\n\tassert newman_prime(3) == 7\n\ndef main():\n\tprint(\"Prime number from 3 to 1000000\")\n\tfor i in range(1, 1000000):\n\t\tprint(newman_prime(i))\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    for i in range(10**(n-1), 10**n, 2):\n        if is_prime(i):\n            return i\n\ndef main():\n    n = int(input(\"Enter nth newman-shanks-williams prime number: \"))\n    print(newman_prime(n))\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuples):\n    l=[]\n    for i in tuples:\n        l.append(i/sum(i))\n    return l\n\ndivision_elements((10, 4, 6, 9),(5, 2, 3, 3)) # (2, 2, 2, 3)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\nimport functools\nimport operator\n\ndef division_elements(l1, l2):\n    \"\"\"\n    Write a function to perform mathematical division operation across the given tuples.\n\n    :param l1: list\n    :param l2: list\n    :return: list\n    \"\"\"\n    return list(map(lambda x, y: x / y, l1, l2))\n\n#Below is an example usage:\n\n# Enter the lists\nl1 = [10, 4, 6, 9]\nl2 = [5, 2, 3, 3]\n\n# Calling the function", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\nfrom typing import Tuple, List\n\n\ndef division_elements(input_tuple: Tuple[int], denominator_list: List[int]) -> Tuple[int]:\n    \"\"\"\n    Divide elements of a tuple by elements of another list.\n    :param input_tuple: Tuple\n    :param denominator_list: List\n    :return: Tuple\n    \"\"\"\n    assert len(input_tuple) == len(denominator_list)\n    output_tuple = []\n    for i in range(len(input_tuple)):\n        if denominator_list[i] != 0:\n            output_tuple.append(input_tuple[i] // denominator_list[i])\n        else:\n            output_tuple.append(0)\n    return tuple(output_tuple)", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(array1, array2):\n    array3 = list()\n    for i in range(0, len(array1)):\n        array3.append(array1[i]/array2[i])\n    return tuple(array3)\n\n\n#", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(numerator, denominator):\n    \"\"\"\n    Given a tuple of numbers (numerator),\n    and another tuple of numbers (denominator),\n    return a tuple of numbers as a result of mathematical division.\n    \"\"\"\n    return tuple(a/b for a, b in zip(numerator, denominator))\n\n# Using print", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    return tuple(a/b for a, b in zip(tuple1, tuple2))\n\n# assert", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n#Function to perform mathematical division operation across the given tuples.\ndef division_elements(l1, l2):\n    l1_len = len(l1)\n    l2_len = len(l2)\n    result = []\n    for i in range(l1_len):\n        result.append(l1[i] / l2[i])\n    return result", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(a, b):\n    return tuple(int(x/y) for x,y in zip(a,b))\n\n# Enter the numbers\na = (10, 4, 6, 9)\nb = (5, 2, 3, 3)\n\n# Calling the function", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(x, y):\n    for i in range(len(x)):\n        x[i] = int(x[i] / y[i])\n    return x\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(arg1, arg2):\n    return tuple(element / arg2 for element in arg1)\n\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(list_to_split, length_of_first_part):\n    pass\n\n\ndef test_function():\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(arr, length):\n    head = 0\n    tail = length - 1\n    result = []\n    result.append(arr[head:tail+1])\n    head = tail + 1\n    tail = len(arr) - 1\n    result.append(arr[head:tail+1])\n    return result\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\nfrom __future__ import print_function\n\ndef split_two_parts(my_list, length):\n    \"\"\"\n    This function splits a given list into two parts where the length of the first part is given.\n    The function returns the first part and the second part.\n    \"\"\"\n    first_part = my_list[:length]\n    second_part = my_list[length:]\n    return (first_part, second_part)\n\n\ndef main():\n    my_list = [1,1,2,3,4,4,5,1]\n    length = 3\n    first_part, second_part = split_two_parts(my_list, length)\n    print(first_part, second_part)\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(l, n):\n    if len(l) < n:\n        raise ValueError('l is smaller than n')\n\n    first_part = l[0:n]\n    second_part = l[n:]\n    return (first_part, second_part)\n\n\n# test cases", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\nfrom typing import List\n\n\ndef split_two_parts(lst: List[int], n: int) -> List[List[int]]:\n    return lst[:n], lst[n:]\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst,split_len):\n    part_one=lst[:split_len]\n    part_two=lst[split_len:]\n    return part_one,part_two", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, part_length):\n    \"\"\"\n    This function splits a list into two parts where the length of the first part of the list is given.\n\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n\n    >>> split_two_parts([1,2,3,4,5,6,7],2)\n    ([1, 2], [3, 4, 5, 6, 7])\n    \"\"\"\n    return lst[:part_length], lst[part_length:]\n\n\n# Test the split_two_parts function", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(l, l1):\n    \"\"\"\n        :param l: the list to be split\n        :param l1: the length of the first part\n        :return: tuple of first and second part of the list\n    \"\"\"\n    if l1==0:\n        return l\n    return (l[:l1], l[l1:])\n\n\n# test\nl1 = [1,1,2,3,4,4,5,1]", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(list_to_split, half_len):\n    first_part = list_to_split[:half_len]\n    second_part = list_to_split[half_len:]\n    return (first_part, second_part)\n\ndef test_split_two_parts():\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\ndef test_split_two_parts2():\n    assert split_two_parts([1,2,3,4,5,6,7,8],5)==([1,2,3,4,5], [6,7,8])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(l, n):\n    res = ([], [])\n    for i, v in enumerate(l):\n        if i % n == 0:\n            res[0].append(v)\n        else:\n            res[1].append(v)\n    return res\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(d1, d2):\n    return {**d1, **d2}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    dict3 = dict1.copy()\n    for key in dict2:\n        dict3[key] = dict2[key]\n    return dict3\n\n\n# +\n#2", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2:\n            merged_dict[key] = dict1[key] + dict2[key]\n        else:\n            merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key in dict1:\n            pass\n        else:\n            merged_dict[key] = dict2[key]\n    return merged_dict\n\ndict1 = {'a': 100, 'b': 200}\ndict2 = {'x': 300, 'y': 200}", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(x,y):\n    return {**x, **y}\n\ndef test_merge_dict():\n    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n    d = d1.copy()\n    d.update(d2)\n    return d\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n    d = d1.copy()\n    d.update(d2)\n    return d\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1,dict2):\n    for key in dict2:\n        if key in dict1:\n            dict1[key] += dict2[key]\n        else:\n            dict1[key] = dict2[key]\n    return dict1\n\ndef merge_dict(dict1,dict2):\n    return {**dict1,**dict2}\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(d1, d2):\n    for key in d2:\n        if key in d1:\n            d1[key] += d2[key]\n        else:\n            d1[key] = d2[key]\n    return d1\n\ndef merge_dict2(d1, d2):\n    for key in d2:\n        if key in d1:\n            d1[key] += d2[key]\n        else:\n            d1[key] = d2[key]\n    return d1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(d1, d2):\n    for k, v in d2.iteritems():\n        d1[k] = v\n    return d1\n\ndef test_merge_dict():\n    d1 = {'a': 100, 'b': 200}\n    d2 = {'x': 300, 'y': 200}\n    assert merge_dict(d1, d2) == {'x': 300, 'y': 200, 'a': 100, 'b': 200}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\nimport pytest\n\nfrom apilist import merge_dict\n\ndef test_merge_dict():\n    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\n\n# def test_merge_dict_with_dup_key():\n#     assert merge_dict({'a': 100, 'b': 200},{'a': 500})=={'a': 500, 'b': 200}\n\n\n# def test_merge_dict_with_dup_value():\n#     assert merge_dict({'a': 100, 'b': 200},{'a': 200})=={'a': 200, 'b': 200}\n\n\n# def test_merge_dict_with_dup_key_and_value():\n#     assert merge_dict({'a': 100, 'b': 200},{'a': 200, 'b': 300})=={'a': 200, 'b': 300}\n\n\n# def test_merge_dict_with_non_dict():\n#     with pytest.raises(TypeError):\n#         merge_dict('test', {'a': 100, 'b': 200})"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(years):\n    \"\"\"Calculates dog's age in dog's years.\n    \"\"\"\n    assert isinstance(years, int) and years>=0, 'The dog\\'s age should be a non-negative integer.'\n    return (years-1)*12 + 2\n\n# TEST\n# tests = [\n#     (0,0),\n#     (1,1),\n#     (2,2),\n#     (3,3),\n#     (4,4),\n#     (5,5),\n#     (6,6),\n#     (7,7),\n#     (8,8),\n#     (9,9),\n#     (10,10),\n#     (11,11),\n#     (12,12),\n#     (13,13),\n#     (14,14),\n#     (15,15),\n#     (16,16),\n#     (17,17),\n#     (18,18),\n#     (19,19),\n#     (20,20),\n#     (21,21),\n#     (22,22),\n#     (23,23),\n#     (24,24),\n#     (25,25),\n#     (26,26),\n#     (27,27),\n#     (28,28),\n#     (29,29),\n#     (30,30),\n#     (31,31),\n#     (32,32),\n#     (33,33),\n#     (34,34),\n#     (35,35),\n#     (36,36),\n#     (37,37),\n#     (38,38),\n#     (39,39),\n#     (40,40),\n#     (41,41),\n#     (42,42),\n#", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(months):\n    return months * 4\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years):\n    assert years >= 0, \"years must be a non-negative integer\"\n    return (years * 7) + 2\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(dog_years):\n    \"\"\"\n    >>> dog_age(12)\n    61\n    \"\"\"\n    dog_days = dog_years * 365.25\n    dog_months = dog_years * 7.5\n    dog_years = dog_years - dog_months/12\n    return dog_years\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n    \"\"\"\n    dog_age calculates the dog's age in dog's years.\n    \"\"\"\n    return (age*2)", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n    return age * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(year):\n    years = 0\n    while year % 7 != 0:\n        year += 1\n        years += 1\n    return years\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(months):\n    return months/4\n\ndef dog_age(months):\n    return months/4\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(months):\n    return months/12\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n# 1.\ndef dog_age(years):\n    return int(years)*7\n\n# 2.\ndef dog_age(years):\n    #return int(years)*12\n    return int(years*12)\n\n# 3.\ndef dog_age(years):\n    return int(years*12)\n\n# 4.\ndef dog_age(years):\n    return int(years*12)\n\n# 5.\ndef dog_age(years):\n    return int(years*7)\n\n# 6.\ndef dog_age(years):\n    return int(years*7)\n\n# 7.\ndef dog_age(years):\n    return int(years*7)\n\n# 8.\ndef dog_age(years):\n    return int(years*7)\n\n# 9.\ndef dog_age(years):\n    return int(years*7)\n\n# 10.\ndef dog_age(years):\n    return int(years*7)"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n#assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(list, n):\n\n    assert n > 0, \"n cannot be zero or negative\"\n\n    k = 0\n    result = []\n\n    for i in range(0, len(list), n):\n        result.append(list[i:i+n])\n\n    return result", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i*n:(i+1)*n] for i in range((len(lst)//n))]\n\nlist_split([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"],3)\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(list_param, n):\n    new_list = []\n    split_list = []\n    for i in range(0, len(list_param), n):\n        split_list.append(list_param[i:i+n])\n    return split_list\n\n#assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\n\ndef n_th_element(list_param, n):\n    return list_param[n]\n\n#assert n_th_element(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],2)==['b', 'e', 'h', 'k', 'n']\n\ndef n_th_element_using_index(list_param, n):\n    return list_param[n]\n\n#assert n_th_element_using_index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],2)==['b', 'e', 'h', 'k', 'n']\n\ndef n_th_element_using_slice(list_param, n):\n    return list_param[n]\n\n#assert n_th_element_using_slice(['a', 'b', 'c', 'd', 'e', 'f',", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(list_to_split, n):\n    if n > 1:\n        return [list_to_split[i:i+n] for i in range(0, len(list_to_split), n)]\n    else:\n        return [list_to_split]\n\n#assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    lst_splitted = []\n    for i in range(0, len(lst), n):\n        lst_splitted.append(lst[i:i+n])\n    return lst_splitted", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list, n):\n    if len(list)<n:\n        return [list]\n    return [list[i:i+n] for i in range(0, len(list), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(L,n):\n    return [L[i::n] for i in range(n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(my_list, n):\n    \"\"\"\n    This function will split a list by every nth element\n    \"\"\"\n    for i in range(0, len(my_list), n):\n        yield my_list[i: i + n]"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(x):\n    return x**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(cube):\n    return (12*cube)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateral_surface_area(num):\n    return 6*num\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(n):\n    return 2*n*n*n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return side*side*6\n\ndef lateralsurface_cube2(side):\n    return side*side*12\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n# function body\ndef lateralsurface_cube(length):\n    return 100*length\n\n# function main", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return side**2*2*3\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\nfunction lateralsurface_cube(side::Integer)\n    return side * side * side * 6\nend\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return 2*(side**2)\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    n = n + 1\n    sum_ = 0\n    for i in range(3,n,2):\n        sum_ += i**2\n    return sum_\n\n# Calling the function", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1,n,2):\n        sum_of_squares += i*i\n    return sum_of_squares\n\n\n# +", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    if n <= 1:\n        return 0\n    else:\n        return n*n + square_Sum(n-1)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1,n):\n        sum = sum + (i**2)\n    return sum\n\n#square_Sum(10)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i**2)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"Returns the sum of squares of first n odd natural numbers\"\"\"\n    sum = 0\n    for i in range(3, n+1, 2):\n        sum += i ** 2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i*i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    s = 0\n    for i in range(1,n+1,2):\n        s = s + (i**2)\n    return s", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # write your code here\n    total = 0\n    for i in range(1,n,2):\n        total += i * i\n    return total\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i*i\n    return sum\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    for i in range(1, n + 1):\n        num = (2 ** i) * 3\n        if is_star_num(num):\n            return num\n    return -1\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nimport math\n\ndef find_star_num(n):\n    if n == 1:\n        return 2\n\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            break\n    else:\n        return -1\n    return find_star_num(i) + i\n\ndef find_star_num2(n):\n    if n == 1:\n        return 2\n\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            break\n    if i == 0:\n        return -1\n    return i * (i+1) // 2\n\ndef find_star_num3(n):\n    if n == 1:\n        return 2\n\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            break\n    if i == 0:\n        return -1\n    return i * (n // i) * (i + 1)\n\ndef find_star_num4(n):\n    if n == 1:\n        return 2\n\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            break\n    if i == 0:\n        return -1\n    return math.floor(n / i) * (i + 1)\n\n# find_star_num4(3) == 37", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\nfrom __future__ import division\n\ndef find_star_num(n):\n    \"\"\"\n    :param n: int, n >= 2\n    :return: int, n'th star number\n    \"\"\"\n    return (n-1) * n * (2 * n - 1) // 2\n\n\ndef find_star_num_2(n):\n    \"\"\"\n    :param n: int, n >= 2\n    :return: int, n'th star number\n    \"\"\"\n    return (n-1) * n * (n + 1) // 2\n\n\ndef find_star_num_3(n):\n    \"\"\"\n    :param n: int, n >= 2\n    :return: int, n'th star number\n    \"\"\"\n    return (n - 1) * (n + 1) * (2 * n - 1) // 6\n\n\ndef test_find_star_num():\n    assert find_star_num(1) == 1\n    assert find_star_num(2) == 3\n    assert find_star_num(3) == 37\n    assert find_star_num(4) == 69\n    assert find_star_num(5) == 127\n    assert find_star_num(6) == 175\n    assert find_star_num(7) == 215\n    assert find_star_num(8) == 263\n    assert find_star_num(9) == 313\n    assert find_star_num(10) == 359\n    assert find_star_num(11) == 391\n    assert find_star_num(12) == 431\n    assert find_star_num(13) == 473\n    assert find_star_num(14) == 525\n    assert find_star_num(15) == 569\n    assert find_star_num(16) == 615\n    assert find_star_num(17) == 649\n    assert find_star_num(18) == 695\n    assert find_star_num(", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    return 10000*n + 7000\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    Return the n'th star number\n    :param n: the n'th star number\n    :return: the n'th star number\n    \"\"\"\n    s = 1\n    for i in range(1, n):\n        s = s + i\n    return s\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    first_num = 1\n    second_num = 1\n    sum_num = 1\n    for i in range(1, n+1):\n        sum_num = (first_num + second_num)\n        first_num = second_num\n        second_num = sum_num\n    return sum_num\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    n -= 1\n    i = 1\n    while i < n:\n        i += 2\n        if i % 6 == 0:\n            i += 1\n    return i\n\n# 13-2", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    if n == 1:\n        return 1\n    else:\n        return 2*find_star_num(n-1)\n\n#test case", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nfrom itertools import count\n\nfrom project.prime_numbers import generate_prime_numbers\nfrom project.prime_numbers import is_prime\nfrom project.primes_generator import PrimesGenerator\n\n\ndef find_star_num(n: int) -> int:\n    \"\"\"\n    Finds n'th star number\n\n    :param n: n\n    :type n: int\n    :return: n'th star number\n    :rtype: int\n    \"\"\"\n    return next(\n        number for number in count(3)\n        if is_prime(number)\n        and all(is_prime(number // prime) for prime in generate_prime_numbers(number))\n    )\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    i = 1\n    while(len(str(i)) != n):\n        i += 1\n    return i\n\n# def find_star_num(n):\n#     num = 1\n#     while len(str(num)) < n:\n#         num += 1\n#     return num\n\n\n# assert find_star_num(3) == 37\n# assert find_star_num(7) == 637"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n# Write your code here\n\ndef ascii_value(char):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    assert ascii_value('A')==65\n    \"\"\"\n    ord = ord(char)\n    return ord\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n# ASCII value of the character A is 65\n# ASCII value of the character B is 66\n# ASCII value of the character Z is 90\n# ASCII value of the character a is 97\n# ASCII value of the character z is 122\n# ASCII value of the character \" is 34\n# ASCII value of the character ' is 39\n\ndef ascii_value(char):\n    \"\"\"\n    Returns the ascii value of a character.\n    \"\"\"\n    if char in ['A','B','Z']:\n        return 65\n    elif char in ['a','z']:\n        return 97\n    elif char in ['\\'']:\n        return 39\n    else:\n        return ord(char)\n\n# Enter the character\nchar = \"A\"\n\n# Calling the function", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(s):\n\t# Write your code here\n\treturn ord(s)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(character):\n    return ord(character)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(string):\n    return ord(string)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(character):\n    return ord(character)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(c):\n\treturn ord(c)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\n# Write your function here\n\n\n# +\n# Write a python function to find the sum of even numbers at even positions.", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, length):\n    # write your code here\n    return sum(arr[i] for i in range(length) if i % 2 == 0)\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst, index):\n    return sum(i for (i,n) in enumerate(lst) if n%2==0 and (i+1)%index==0)\n\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n# using map function\ndef sum_even_and_even_index(list1, number):\n    return sum(map(lambda x: x if x%2==0 else 0, list1))\n\n# using list comprehension\ndef sum_even_and_even_index_comp(list1, number):\n    return sum([x if x%2==0 else 0 for x in list1])\n\n# using for loop\ndef sum_even_and_even_index_for(list1, number):\n    sum = 0\n    for x in list1:\n        if x%2==0:\n            sum+=x\n    return sum\n\n# using while loop\ndef sum_even_and_even_index_while(list1, number):\n    sum = 0\n    i = 0\n    while i < number:\n        if list1[i]%2==0:\n            sum+=list1[i]\n        i+=1\n    return sum\n\n# using recursion\ndef sum_even_and_even_index_rec(list1, number):\n    if number == 1:\n        return list1[0]\n    elif number > 1:\n        return list1[number-1] + sum_even_and_even_index_rec(list1[1:], number-1)\n\n# driver code\nl = [5, 6, 12, 1, 18, 8]", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst,n):\n    sum = 0\n    for i in range(len(lst)):\n        if(i%2==0 and i<n):\n            sum+=lst[i]\n    return sum\n\ndef sum_even_and_odd_index(lst,n):\n    sum = 0\n    for i in range(len(lst)):\n        if(i%2!=0 and i<n):\n            sum+=lst[i]\n    return sum\n\n\n# +\n# Trial\n\nlst = [5, 6, 12, 1, 18, 8]\nn = 6\nsum_even_and_even_index(lst,n)\n\n# +\n# Trial\n\nlst = [5, 6, 12, 1, 18, 8]\nn = 6\nsum_even_and_odd_index(lst,n)\n\n# +\nlst = [5, 6, 12, 1, 18, 8]\nn = 6\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(a,n):\n    s = 0\n    for i in range(n):\n        if a[i]%2 == 0:\n            s = s+a[i]\n    return s\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(array,index):\n    return sum(array[i] for i in range(0,index,2))\n\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(nums, index):\n    return sum(i for i in range(index, len(nums), 2) if i % 2 == 0)\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, size):\n    return sum([arr[i] for i in range(0, size, 2)])\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(my_list,n):\n    sum = 0\n    for i in range(n, len(my_list),2):\n        sum += my_list[i]\n    return sum\n\n\n# print(sum_even_and_even_index([5, 6, 12, 1, 18, 8],6))\n\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum = sum + pow(i, 5)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1,n):\n        sum += (i*i*i*i*i)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(0,n):\n        sum += (i**5)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    s = 0\n    for i in range(n):\n        s += (i**5)\n    return s\n\n\n# +\ndef even_Power_Sum(n):\n    return sum([i**5 for i in range(n)])\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    return sum(x*x*x*x*x for x in range(0,2*n) if x%2==0)\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n\tsum = 0\n\tfor i in range(1, n, 2):\n\t\tsum += i**5\n\treturn sum\n\ndef main():\n\tprint(even_Power_Sum(5))\n\nmain()", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n#user_input = int(input(\"Enter a value for n: \"))\n\ndef even_Power_Sum(n):\n    result = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            result += i**5\n    return result\n\n#print(even_Power_Sum(2))\n\n# Example\n\n# Enter a value for n: 10\n# 28211425965483210478469392496336427083621719335522689266798534186603482747820253254414425824113331371079139745975982683097731145236760924955545490967782136374449186109641832717679671985828505797774921434742723986607152230840924969759187230854194997447202612482351790014796224465982114824510356486688841400758129381162754915022580585400914383751273160848768190351445546525443612", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    \"\"\"\n    Use a loop to calculate the sum of fifth power of first n even natural numbers\n    \"\"\"\n    total = 0\n    for i in range(0, n, 2):\n        total += i ** 5\n    return total\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum_num = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum_num += (i**5)\n    return sum_num\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(lst_of_tuples):\n    \"\"\"\n    Return the last value of each list of tuple (in lst_of_tuples)\n    \"\"\"\n    return lst_of_tuples[-1]\n\nlst_of_tuples = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    \"\"\"\n    Extract the rear element from the list of tuples\n    \"\"\"\n    return records[0]\n\nrecords = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]\nresult = rear_extract(records)", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return list(reversed(records))\n\n# Test case\n\nrecords = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    # assume that all records are of same length\n    assert all(len(i) == 3 for i in records)\n    return [i[2] for i in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    assert records != []\n    l = []\n    for i in records:\n        l.append(i[1])\n    return l\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(r_list):\n    for i in range(len(r_list)-1, -1, -1):\n        yield r_list[i]\n\ndef rear_extract(r_list):\n    for i in range(len(r_list)-1, -1, -1):\n        yield r_list[i]\n\n#assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\nfrom typing import List\n\ndef rear_extract(lst: List[Tuple[int, str, int]]) -> List[int]:\n    lst.sort(reverse=True)\n    return [x[1] for x in lst]\n\ndef test():\n    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(tup):\n    return tup[0]\n\ndef rear_extract2(tup):\n    return tup[2]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(l):\n    lst = []\n    for k in l:\n        lst.append(k[1])\n    return lst\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    # TODO: write your code here\n    return tuple(map(lambda x,y: x - y, tuple1, tuple2))", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple(x-y for x,y in zip(tuple1,tuple2))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    assert len(tuple1) == len(tuple2), \"tuples must be of same length\"\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    \"\"\"\n    :param tuple1: first tuple\n    :param tuple2: second tuple\n    :return: a tuple with the difference in the corresponding elements of the tuple\n    \"\"\"\n    assert len(tuple1) == len(tuple2)\n    return tuple(x - y for x, y in zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple_a, tuple_b):\n    assert len(tuple_a) == len(tuple_b)\n    return tuple([e - b for e, b in zip(tuple_a, tuple_b)])\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(first_tuple, second_tuple):\n    result = []\n    for i in range(len(first_tuple)):\n        result.append(first_tuple[i]-second_tuple[i])\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple_a, tuple_b):\n    index_a = 0\n    index_b = 0\n\n    substract_tuple = []\n\n    while index_a < len(tuple_a):\n        if index_b >= len(tuple_b):\n            break\n\n        elif tuple_a[index_a] > tuple_b[index_b]:\n            substract_tuple.append(tuple_a[index_a])\n            index_a += 1\n\n        else:\n            substract_tuple.append(tuple_b[index_b])\n            index_b += 1\n\n    return substract_tuple", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n    return tuple(t1[i] - t2[i] for i in range(len(t1)))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple_one, tuple_two):\n    assert len(tuple_one) == len(tuple_two)\n    return tuple(x - y for x, y in zip(tuple_one, tuple_two))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n# odd index binomial coefficients are not possible as index starts from 0\ndef even_binomial_Coeff_Sum(n):\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    else:\n        return (even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2))\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for i in range(0,n):\n        s += binomial_Coeff(n,i)\n    return s\n\ndef binomial_Coeff(n,k):\n    c = 1\n    for i in range(0,k):\n        c *= (n - i)\n    for i in range(0,k):\n        c /= i\n    return c\n\ndef test():\n    print (even_binomial_Coeff_Sum(4))\n    print (binomial_Coeff(4,3))\n\ntest()", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + binomial_coefficient(n, i)\n        if i%2 == 0:\n            sum = sum - binomial_coefficient(n, i-1)\n    return sum", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    # code goes here\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += binomial_coeff(n, i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0,n,2):\n        sum = sum + binomial(n,i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0,n+1,2):\n        sum+=binomial(n,i)\n    return sum", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n# +\n# %%writefile e1.py\ndef even_binomial_Coeff_Sum(n):\n    return (sum(binomial(n, 2*k) for k in range(int(n/2)) if k%2 == 0))\n\neven_binomial_Coeff_Sum(5)\n# -\n\n# !python e1.py\n\n# ## 10. Write a python function to find sum of odd index binomial coefficients.\n# assert odd_binomial_Coeff_Sum(4) == 4\n\n# +\n# %%writefile e2.py\ndef odd_binomial_Coeff_Sum(n):\n    return (sum(binomial(n, 2*k) for k in range(int(n/2)) if k%2 != 0))\n\nodd_binomial_Coeff_Sum(5)\n# -\n\n# !python e2.py\n\n# ## 11. Write a python function to find sum of even and odd binomial coefficients.\n# assert binomial_Coeff_Sum(4) == 12\n\n# +\n# %%writefile e3.py\ndef binomial_Coeff_Sum(n):\n    return (odd_binomial_Coeff_Sum(n)+even_binomial_Coeff_Sum(n))\n\nbinomial_Coeff_Sum(5)\n# -\n\n# !python e3.py", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += binomial_Coeff(n,i)*binomial_Coeff(n,i)//2\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(n+1):\n        total+=binomial_coeff(n,i)*binomial_coeff(n,n-i)\n    return total\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,key,n):\n\tif n==0 or key not in arr:\n\t\treturn -1\n\tif key == arr[n-1]:\n\t\treturn n-1\n\treturn get_Position(arr,key,n-1)\n\ndef main():\n\tarr = [2,5,4]\n\tkey = 2\n\tn = len(arr)\n\tpos = get_Position(arr,key,n)\n\tprint(pos)\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, i, val):\n    \"\"\"\n    :param arr: given array\n    :param i: initial index\n    :param val: value to be searched\n    :return: position\n    \"\"\"\n    for j in range(i-1, -1, -1):\n        if arr[j] == val:\n            return j\n    return -1\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,element,index):\n    arr_length = len(arr)\n\n    if arr_length == 0:\n        return None\n\n    for i in range(arr_length-1,-1,-1):\n        if arr[i] == element:\n            index = i\n            break\n\n    return index\n\n# Driver code\narr = [2,5,4]", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n#get_last_index([2,5,4],3,2) == 2\n#get_index_of_last_removed_element([2,5,4],2) == 1\n\ndef get_Position(array, elem, index):\n    for i in range(len(array)):\n        if(array[i] == elem):\n            index = i\n            break\n    return index\n\ndef get_index_of_last_removed_element(array, elem):\n    for i in range(len(array)):\n        if(array[i] == elem):\n            return len(array) - i\n    return -1\n\ndef get_last_index(array, elem, index):\n    for i in range(len(array)-1,-1,-1):\n        if(array[i] == elem):\n            index = i\n            break\n    return index\n\n#print(get_Position([2,5,4],3,2))\n#print(get_index_of_last_removed_element([2,5,4],2))\n#print(get_last_index([2,5,4],3,2))", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, l, r):\n    if l == r:\n        return l\n    m = l + (r-l)//2\n    if arr[m] > arr[l]:\n        if arr[m] > arr[r]:\n            return get_Position(arr, m, r)\n        else:\n            return get_Position(arr, m+1, r)\n    else:\n        if arr[m] > arr[r]:\n            return get_Position(arr, l, m-1)\n        else:\n            return get_Position(arr, l, m-1)\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(a,n,m):\n    count=0\n    for i in range(m):\n        if a[m-1]==n:\n            return count\n        else:\n            a.remove(a[m-1])\n            count+=1\n    return -1\n\nn=[2,5,4]\nm=len(n)", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,n,x):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [1,2,5,4,5]\nn = len(arr)\nx = 3\n\npos = get_Position(arr,n,x)", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(a,x,y):\n\tcount = 0\n\tfor i in a:\n\t\tif i == x:\n\t\t\tcount+=1\n\treturn y - count\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_position(arr,n,x):\n    i=0\n    while i<n:\n        if arr[i]!=x:\n            i+=1\n        else:\n            return i\n    return -1", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, i, j):\n    # Write your code here\n    if i == 0:\n        return -1\n    else:\n        if arr[i] == j:\n            return i-1\n        elif arr[i] > j:\n            return get_Position(arr, i-1, j)\n\ndef main():\n    arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    print(get_Position(arr, len(arr)-1, 4))\n\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(height,radius):\n    \"\"\"returns the volume of a cylinder of height h and radius r\"\"\"\n    volume = pi * radius**2 * height\n    return volume\n\ndef volume_sphere(radius):\n    \"\"\"returns the volume of a sphere of radius r\"\"\"\n    volume = 4/3 * pi * radius**3\n    return volume\n\ndef area_circle(radius):\n    \"\"\"returns the area of a circle of radius r\"\"\"\n    area = pi * radius**2\n    return area\n\ndef area_square(length):\n    \"\"\"returns the area of a square of length l\"\"\"\n    area = length**2\n    return area\n\ndef area_rectangle(height,width):\n    \"\"\"returns the area of a rectangle of height h and width w\"\"\"\n    area = height * width\n    return area\n\ndef volume_cube(side):\n    \"\"\"returns the volume of a cube of side length s\"\"\"\n    volume = side**3\n    return volume\n\ndef surface_cube(side):\n    \"\"\"returns the surface area of a cube of side length s\"\"\"\n    surface = 6 * side**2\n    return surface\n\ndef surface_square(side):\n    \"\"\"returns the surface area of a square of side length s\"\"\"\n    surface = 4 * side**2\n    return surface\n\ndef surface_rectangle(height,width):\n    \"\"\"returns the surface area of a rectangle of height h and width w\"\"\"\n    surface = 2 * height * width\n    return surface\n\ndef surface_cylinder(height,radius):\n    \"\"\"returns the surface area of a cylinder of height h and radius r\"\"\"\n    surface = pi * (radius**2) + pi * radius**2 * height\n    return surface", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\ndef volume_cylinder(radius,length):\n    return (22/7)*math.pi*radius*radius*length\n#assert volume_cylinder(10,5)==1570.7500000000002\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(h,r):\n    area= 3.1415*r*r\n    return (area*h)/3\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\ndef volume_cylinder(radius,height):\n    return(math.pi*(radius**2)*(height))\n\n#Test case 1:", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius,height):\n\tvol = 3.14*(radius**2)*height\n\treturn vol", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(height, radius):\n    \"\"\"\n    Finds the volume of a cylinder given a height and radius.\n\n    Parameters\n    ----------\n    height: float\n        The height of the cylinder.\n    radius: float\n        The radius of the cylinder.\n\n    Returns\n    -------\n    volume: float\n        The volume of the cylinder.\n    \"\"\"\n    return np.pi*(radius**2)*(height/2)\n\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\n#the function volume_cylinder takes two parameters length and width and returns a volume\ndef volume_cylinder(length, width):\n    volume = 3.14159*(length)**2*(width)\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(h, r):\n    \"\"\"\n    Calculates the volume of a cylinder.\n    \"\"\"\n    return pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius,height):\n    \"\"\"\n    We can use the formula:\n    volume = pi*radius**2*height\n    \"\"\"\n    volume = 3.14159*radius**2*height\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(height, radius):\n    vol = math.pi * radius ** 2 * height\n    return vol\n\n\n# +"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,val):\n  \"\"\"\n  d = dictionary to filter\n  val = value to filter by\n  \"\"\"\n  return {key: value for key, value in d.items() if value == val}\n\n#Below is an example usage:\n\n# Enter the dictionary\nd = {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5}\n\n# Calling the function", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dict, value):\n    \"\"\"\n    filter a dictionary based on values\n    \"\"\"\n    new_dict = {k:v for k,v in dict.items() if v == value}\n    return new_dict\n\n#Below is an example usage:\n\nimport random\n\ndef dict_filter(dict, value):\n    \"\"\"\n    filter a dictionary based on values\n    \"\"\"\n    new_dict = {k:v for k,v in dict.items() if v == value}\n    return new_dict\n\n# Enter the dictionary\ndict = {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5}\n\n# Calling the function", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dct, value):\n    return {key: value for key, value in dct.items() if value == value}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, value):\n    new_dict = dict()\n    for key in dictionary:\n        if dictionary[key] == value:\n            new_dict[key] = dictionary[key]\n    return new_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, value):\n    return {key: value for (key, value) in d.items() if value == value}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dict, value):\n    \"\"\"\n    Returns a dictionary containing the values\n    that are equal to the value argument.\n    \"\"\"\n    for key, value in dict.items():\n        if value == value:\n            print(key, value)\n        else:\n            pass\n    return {key:value for key, value in dict.items() if value == value}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(input_dict,val):\n    output_dict = {}\n    for key in input_dict:\n        if input_dict[key] == val:\n            output_dict[key] = input_dict[key]\n    return output_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_in,value):\n    return {k: v for k, v in dict_in.items() if v == value}\n# Tests", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,target):\n    res = {}\n    for key in d.keys():\n        if d[key] == target:\n            res[key] = d[key]\n    return res\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v > n}\n\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple_arg):\n    \"\"\"\n    Write your function here\n    \"\"\"\n    count = 0\n    for item in tuple_arg:\n        if isinstance(item, tuple):\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(n):\n    i = 0\n    if n == None:\n        return 0\n    else:\n        while n[i][0] != None:\n            i += 1\n        return i", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple):\n    count = 0\n    for i in range(len(tuple)):\n        if tuple[i] == (4, 6):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(data):\n    # write your code here\n    return 0\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup: tuple, record: int) -> int:\n    l = [i for i in tup]\n    res = 0\n    for i in l:\n        if i > record:\n            res += 1\n        else:\n            break\n    return res\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(sequence):\n    i = 0\n    for el in sequence:\n        if type(el) is tuple:\n            i += count_first_elements(el)\n        else:\n            return i\n    return i+1\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(record):\n    count = 0\n    for element in record:\n        if element < record[count]:\n            break\n        else:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_):\n    count = 0\n    for i in range(len(tuple_)):\n        if i == 0:\n            if type(tuple_[i]) == tuple:\n                count += 1\n            else:\n                break\n        else:\n            if type(tuple_[i]) == tuple:\n                break\n            else:\n                continue\n    return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\nfrom collections import Counter\n\ndef count_first_elements(nums):\n    '''\n    :param nums: given tuple\n    :return: the element count that occurs before the record in the given tuple\n    '''\n    res = Counter()\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            res[nums[i]] += 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] != 0:\n            res[nums[i]] -= 1\n    return res[1]\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(data):\n    before = []\n    for i in range(len(data)):\n        if i == 0:\n            continue\n        if type(data[i]) == type(data[i-1]):\n            before.append(data[i])\n        else:\n            break\n    return len(before)\n\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    i = n\n    total = 0\n    while True:\n        i *= 10\n        i += i\n        total += i\n        if i > n:\n            break\n    return total == n\n\ndef main():\n    print(is_num_decagonal(3))\n    print(is_num_decagonal(6))\n    print(is_num_decagonal(7))\n    print(is_num_decagonal(10))\n    print(is_num_decagonal(15))\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nimport math\n\n\ndef is_num_decagonal(n):\n    return math.floor(math.sqrt(2*n))**2 == 2*n\n\n\ndef is_num_decagonal_fast(n):\n    return n % (n+1) == 0\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    pass\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n# solution\n\n\ndef is_num_decagonal(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    sqr_n = n ** 2\n    sqr_n += n * n\n    sqr_n += n\n    sum_decagonal_num = sqr_n ** 2\n\n    return sum_decagonal_num", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return (24*n + 1)**2\n\ndef nth_decagonal(n):\n    return is_num_decagonal(n)\n\ndef main():\n    tests = [\n        [3, 27],\n        [10, 1201],\n        [20, 48458],\n        [30, 756925],\n        [40, 10390450],\n        [50, 133116401]\n    ]\n    for i in range(len(tests)):\n        assert nth_decagonal(tests[i][0]) == tests[i][1]\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(num):\n    if num % 10 == 5:\n        return False\n    return num * num * num - 5 * num + 15", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return n * is_num_decagonal(n - 1)\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    assert n > 0\n    return n*n*n*n*n*n*n*n*n*n*n*n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n#my solution \nimport math\ndef is_num_decagonal(n):\n    if n%10==0:\n        l=[]\n        while n >0:\n            l.append(n%10)\n            n=int(n/10)\n        l.reverse()\n        l = list(set(l))\n        if len(l)==1:\n            return n\n        if n==0:\n            return 0\n    return 0\n\n# test cases", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n# decagonal numbers\n# a(1) = 1\n# a(2) = 3\n# a(3) = 27\n# a(4) = 273\n# a(5) = 2731\n\n\ndef decagon(number):\n    return number * (5 * number - 1) // 2\n\n\ndef is_num_decagonal(number):\n    return decagon(number) == number\n\n\ndef main():\n    numbers = list(range(1, 10))\n    for i in range(0, len(numbers)):\n        if is_num_decagonal(i + 1):\n            print(i + 1, \"is decagonal number\")\n\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, target):\n    for i in range(len(array)):\n        if array[i] == target:\n            return (True, i)\n    return (False, None)\n\n\n# assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(A, x):\n    \"\"\"\n    :param A: An array to search for x\n    :param x: The target element\n    :return: True if the element is found in the array, otherwise False\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, element):\n    for i in range(len(arr)):\n        if element == arr[i]:\n            return (True, i)\n    return (False, None)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(array, x):\n    for i in range(len(array)):\n        if x == array[i]:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(array, search_key):\n    \"\"\"\n    Function to search an element in the given array.\n\n    Parameters:\n    array: list\n    search_key: int\n\n    Returns:\n    bool: if the element is present in the list.\n    int: the index of the element.\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == search_key:\n            return (True, i)\n    return (False, -1)", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr,value):\n    found = False\n    position = 0\n    for item in arr:\n        if item == value:\n            found = True\n            break\n        position += 1\n    if found:\n        return (True, position)\n    else:\n        return (False, position)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, number):\n\tfor i in range(len(array)):\n\t\tif number == array[i]:\n\t\t\treturn (True, i)\n\treturn (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(A,x):\n    index = -1\n    for i,val in enumerate(A):\n        if val == x:\n            index = i\n            break\n    return (True, index) if index != -1 else (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, n):\n    \"\"\"\n    Returns True if element is found in array, False otherwise\n    \"\"\"\n    if not arr:\n        return False\n\n    for index, value in enumerate(arr):\n        if value == n:\n            return True\n\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr,element):\n    \"\"\"\n    :param arr: an array to search\n    :param element: a number to be searched for\n    :return: (True, index) if element is found in arr; (False, index) otherwise\n    \"\"\"\n    for i,x in enumerate(arr):\n        if x == element:\n            return True, i\n    return False, len(arr)\n\n\ndef test_sequential_search():\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],77) == (True, 6)\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],43) == (True, 7)\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],1) == (False, 0)\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],11) == (True, 0)\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],65) == (True, 9)\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],58) == (True, 2)\n    assert sequential_search([11,23,58,31,56,77,43,12,6"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    \"\"\"\n    >>> all_unique([1,2,3])\n    True\n    >>> all_unique([1,1,1])\n    False\n    >>> all_unique([1,2,1])\n    False\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i] in lst[0:i]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n# List to be checked\narr = [1, 2, 3, 2, 2, 4, 2, 2, 3]\n# Function to check if the elements are unique\ndef all_unique(arr):\n  # Make a set of the elements\n  arr = set(arr)\n  # If all the elements are unique, return True\n  if len(arr) == len(arr):\n    return True\n  # Else return False\n  return False\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n# A function to check if the elements of a list are unique or not\ndef all_unique(list1):\n\n    # Initialize variable to keep track of whether duplicates are found or not\n    flag = True\n\n    # Check if there are duplicates\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            flag = False\n\n    # Return True if there are no duplicates\n    return flag\n\n# Driver code\nlist1 = [1,2,3,4,5,6,7,8,9,10]\n\n# Function call", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return False\n    return True\n\n# Test cases", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(array):\n    if len(array) == len(set(array)):\n        return True\n    return False\n\n# Enter the list\narray = [1, 2, 3, 4, 5, 6]\n\n# Calling the function", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst)==len(set(lst))\n\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(list):\n    \"\"\"\n    Checks whether the list is unique\n    \"\"\"\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if i == j:\n                continue\n            if list[i] == list[j]:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(array):\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if array[i] == array[j]:\n                return False\n    return True\n\n#Tests", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(arr):\n    return len(set(arr)) == len(arr)\n\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    list1.sort()\n    list2.sort()\n    return list(map(lambda x, y: x-y, list1, list2))\n\nlist1 = [3, 2, 1]\nlist2 = [6, 5, 4]", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a,b):\n    return list(map(lambda x,y:x-y,a,b))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1,l2):\n    return map(lambda a,b:a-b,l1,l2)\n\n#print(sub_list([1, 2, 3],[4,5,6]))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\n#sub_list = lambda x,y: list(map(lambda a,b: a-b,x,y))\nsub_list = lambda x,y: list(map(lambda a,b: a-b,x,y))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(l1,l2):\n    return map(lambda x,y:x-y,l1,l2)\n\n\n# -\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a,b):\n    return [x - y for x, y in zip(a, b)]\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(lst1,lst2):\n    return list(map(lambda x:x - y, lst1,lst2))\n\nlst1 = [1, 2, 3]\nlst2 = [4, 5, 6]", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    \"\"\"\n    Function to subtract two list using map function and lambda function.\n    \"\"\"\n    return list(map(lambda x, y: x - y, list1, list2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(lst1,lst2):\n    return list(map(lambda x,y:x-y,lst1,lst2))\n\nlst1 = [1,2,3]\nlst2 = [4,5,6]", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(lst1, lst2):\n    lst3 = list(map(lambda a, b: a-b, lst1, lst2))\n    return lst3\n\nsub_list([1, 2, 3],[4,5,6])\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    if num == 0:\n        return False\n    x = set()\n    while num > 0:\n        x.add(num % 10)\n        num //= 10\n    for digit in x:\n        if digit > digit:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    digits = list(str(number))\n    for i in digits:\n        if int(i) > int(i):\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    for i in num:\n        if i > int(i):\n            return False\n    return True\n\nvalidate(1234)\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    digits = []\n    for i in range(10):\n        digits.append(num//(10**i) % 10)\n\n    for i in range(10):\n        if digits[i] > digits[i]:\n            return False\n\n    return True\n\n\ndef main():\n    num = int(input())\n    print(validate(num))\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    # Your code here\n    pass\n# test cases", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(n):\n    \"\"\"Return True if the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(12345)\n    False\n    \"\"\"\n    return all([ord(i) - ord('0') <= i for i in str(n)])\n\ndef validate(n):\n    \"\"\"Return True if the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(12345)\n    False\n    \"\"\"\n    return all([ord(i) - ord('0') <= i for i in str(n)])\n\ndef validate(n):\n    \"\"\"Return True if the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(12345)\n    False\n    \"\"\"\n    return all([ord(i) - ord('0') <= i for i in str(n)])\n\ndef validate(n):\n    \"\"\"Return True if the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(12345)\n    False\n    \"\"\"\n    return all([ord(i) - ord('0') <= i for i in str(n)])\n\ndef validate(n):\n    \"\"\"Return True if the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(12345)\n    False\n    \"\"\"\n    return all([ord(i) - ord('0') <= i for i in str(n)])\n\ndef validate(n):\n    \"\"\"Return True if the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(12345)\n    False\n    \"\"\"\n    return all([ord(i) - ord('0') <= i for i in str(n)])\n\ndef validate(n):\n    \"\"\"Return True if the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    if (num == 0):\n        return True\n    i = 10\n    while i > 0:\n        if num % i == 0:\n            if i == num:\n                return True\n            elif i > num:\n                return False\n        i -= 1\n    return False", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    if len(str(num)) == 1:\n        return True\n    for n in str(num):\n        if int(n) > int(n):\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(n):\n    digits = [int(digit) for digit in str(n)]\n    unique_digits = set(digits)\n    for digit in unique_digits:\n        if digit < len(digits) and digits.count(digit) > digit:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    if not isinstance(number, int):\n        return False\n    dig_set = set()\n    number_list = list(map(int, str(number)))\n    for num in number_list:\n        if num > 9:\n            return False\n        if num == 0:\n            return False\n        if num in dig_set:\n            return False\n        dig_set.add(num)\n    return True\n\nvalidate(1234)\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst,elem):\n    # write your code here\n    # raise NotImplementedError()\n    if lst==None or lst==[]:\n        return False\n    if lst[0]==elem:\n        return check_element(lst[1:],elem)\n    else:\n        return False\n\n# Unit Test", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(items,value):\n    # write your code here\n    return len(set(items)) == 1\n\n#Example 2", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(items,item_to_check):\n    return all(item==item_to_check for item in items)\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list, value):\n    for item in list:\n        if item != value:\n            return False\n    return True\n\ndef check_element_1(list, value):\n    return all(item == value for item in list)\n\ndef check_element_2(list, value):\n    return not any(item != value for item in list)\n\ndef check_element_3(list, value):\n    return not any(item != value for item in list)\n\ndef check_element_4(list, value):\n    for item in list:\n        if item == value:\n            continue\n        return False\n    return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(my_list,element):\n    for item in my_list:\n        if item != element:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list,element):\n    return (all([item == element for item in list]))\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(a, e):\n    return len(set(a)) == 1 and e in set(a)\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n# Write your code below this line\ndef check_element(list, str):\n    all_equal = True\n    for i in list:\n        if i != str:\n            all_equal = False\n    return all_equal\n# Write your code above this line\n\n\n# +\n#Write a function to find the index of the first unique number in a given list.\n#\n# Example:\n# list = [1, 2, 2, 2, 2, 2, 4, 5, 5, 5]\n# Output: 3\n# Write your code below this line\ndef find_first_unique(list):\n    unique_list = []\n    for i in list:\n        if not i in unique_list:\n            unique_list.append(i)\n    return unique_list.index(unique_list[0])\n# Write your code above this line\n\n\n# +\n#Write a function that returns the product of the elements of a list that are greater than 1.\n#\n# Example:\n# list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# Output: 240\n# Write your code below this line\ndef product_greater_than_one(list):\n    product = 1\n    for i in list:\n        if i > 1:\n            product *= i\n    return product\n# Write your code above this line\n\n\n# -\n\n#Write a function to sum all the elements of a given list.\n#\n# Example:\n# list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# Output: 55\n# Write your code below this line\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n# Write your code above this line\n\n\n#Write a function to find the number of even elements in a given list.\n#\n# Example:\n# list = [1, 2, 3", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst,element):\n    return all(e==element for e in lst)", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n# -*- coding: utf-8 -*-\ndef check_element(mylist, item):\n    if mylist[0]==item:\n        for i in range(1,len(mylist)):\n            if mylist[i]!=item:\n                return False\n    else:\n        return False\n    return True\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if text.find(\"a\") != -1 and text.find(\"b\") > text.find(\"a\") and text.find(\"b\") < text.find(\"a\") + 3:\n        return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if text.find('ab')>0 and text.find('b')>0:\n        return \"Match\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if 'a' in text and ('b' in text and len(text.split('b'))<=3):\n        return 'Matched!'\n    return 'Not matched!'\n\ntext_match_two_three(\"abbbba\")\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(sentence):\n    \"\"\"\n    Write your function here\n    \"\"\"\n    # count number of a,b,c and d\n    a_count=0\n    b_count=0\n    c_count=0\n    d_count=0\n    for letter in sentence:\n        if letter.lower()=='a':\n            a_count+=1\n        elif letter.lower()=='b':\n            b_count+=1\n        elif letter.lower()=='c':\n            c_count+=1\n        elif letter.lower()=='d':\n            d_count+=1\n            \n    if a_count==0:\n        return \"Not matched!\"\n    elif a_count==1 and b_count>=2 and b_count<=3:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if len(text) < 3:\n        return 'Not matched!'\n    if text[0] != 'a':\n        return 'Not matched!'\n    if text[1] != 'b':\n        return 'Not matched!'\n    if text[-1] != 'b':\n        return 'Not matched!'\n    for i in range(2,len(text)-1):\n        if text[i] != 'b':\n            return 'Not matched!'\n    return 'Matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(str_a):\n    if str_a.count(\"ab\")>=2 and str_a.count(\"ab\")<=3:\n        print(\"Matched\")\n    else:\n        print(\"Not matched!\")\ntext_match_two_three(\"ac\")", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n#solution\ntext_match_two_three = lambda text: text[0]=='a' and len(text)>=2 and len(text)<=3", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    for i in range(len(text)):\n        if text[i] == \"a\":\n            if i+1 == len(text):\n                return \"Not matched!\"\n            if text[i+1] == \"b\" and i+1 < len(text):\n                if text[i+2] == \"b\":\n                    return \"Matched!\"\n    return \"Not matched!\"\n\ndef test_text_match_two_three():\n    assert text_match_two_three(\"ac\")==('Not matched!')\n    assert text_match_two_three(\"ab\")==('Matched!')\n    assert text_match_two_three(\"abbb\")==('Matched!')\n    assert text_match_two_three(\"abccc\")==('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(string):\n    if string[0]=='a' and (string[1]=='b' or string[1]=='b' and string[2]=='b'):\n        return string[1]\n    else:\n        return 'Not matched!'\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if text[0] == 'a' and (text[1] == 'b' * 2 or text[1] == 'b' * 3):\n        return 'Matched'\n    else:\n        return 'Not matched!'\n\n\n# +"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n\t# code here\n\tdp = [float('-inf')] * n\n\tdp[0] = arr[0]\n\tfor i in range(1, n):\n\t\tdp[i] = dp[i-1] + arr[i]\n\tmax_sum = max(dp)\n\tfor i in range(1, n):\n\t\tdp[i] = dp[i-1] + arr[i]\n\t\tif dp[i] > max_sum:\n\t\t\tmax_sum = dp[i]\n\treturn max_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, m):\n    i, sum_max = 0, -2**31\n    while i < len(arr) - k:\n        s = sum(arr[i:i+k])\n        sum_max = max(sum_max, s)\n        i += m\n    return sum_max\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\nfrom __future__ import print_function\nimport numpy as np\n\ndef max_sub_array_sum_repeated(array, k, n):\n    max_so_far = max_ending_here = 0\n    for i in range(0, k):\n        max_ending_here = max(array[i], max_ending_here + array[i])\n    max_ending_here = max_ending_here + array[k]\n    print(max_ending_here)\n\n    for j in range(k, len(array) - k + 1):\n        max_so_far = max(max_so_far, max_ending_here + array[j])\n        max_ending_here = max(array[j], max_ending_here + array[j])\n    print(max_so_far)\n    return max_so_far\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, length):\n    return max_sub_array_sum(arr, length)\n\n\ndef max_sub_array_sum(arr, length):\n    if not arr or length == 0:\n        return 0\n    max_sum = float('-inf')\n    prefix_sum = 0\n    for i in range(length):\n        prefix_sum += arr[i]\n        if prefix_sum > max_sum:\n            max_sum = prefix_sum\n        if i > 0:\n            prefix_sum -= arr[i - 1]\n    return max_sum\n\n\narr = [10, 20, -30, -1]\nk = 4\nlength = 3\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nimport numpy as np\n\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    n = len(arr)\n\n    # Use 1D numpy array for storing the sum and the previous sum\n    sum_arr = np.zeros(n)\n    sum_arr[0] = arr[0]\n    for i in range(1, n):\n        sum_arr[i] = sum_arr[i - 1] + arr[i]\n\n    # Find the maximum sum in the modified array\n    max_sum = max(sum_arr)\n\n    # Find the maximum sum in the original array\n    for i in range(1, k):\n        arr = np.append(arr, arr[:n])\n        sum_arr = np.append(sum_arr, np.zeros(n))\n        sum_arr = np.cumsum(sum_arr, axis=0)\n        for j in range(1, n):\n            sum_arr[j] = sum_arr[j - 1] + arr[j]\n        max_sum = max(max_sum, max(sum_arr))\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(array, k, n):\n    if not array or k <= 0 or n <= 0:\n        return None\n\n    sub_array = [0] * k\n    for i in range(k):\n        sub_array[i] = array[i]\n\n    max_sum = sub_array[0]\n\n    for i in range(1, k):\n        sub_array[i] = max(array[i], sub_array[i - 1] + array[i])\n        max_sum = max(max_sum, sub_array[i])\n\n    sub_array = [0] * k\n    for i in range(k, n):\n        sub_array[i % k] = max(array[i], sub_array[i % k - 1] + array[i])\n        max_sum = max(max_sum, sub_array[i % k])\n\n    return max_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(array, n, k):\n    if len(array) < k:\n        return 0\n    max_sum = array[0]\n    for i in range(k):\n        max_sum = max(max_sum, array[i])\n    sub_array_sums = [max_sum]\n    for i in range(1, len(array) - k + 1):\n        for j in range(k):\n            if i + j < len(array):\n                sub_array_sums.append(sub_array_sums[len(sub_array_sums) - 1] + array[i + j])\n    return max(sub_array_sums)\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n\tif len(arr) == 0:\n\t\treturn 0\n\tarr = arr * k\n\tarr = list(map(int, arr))\n\treturn max_sub_array_sum_recursive(arr, 0, n)\n\ndef max_sub_array_sum_recursive(arr, start, end):\n\tif start == end:\n\t\treturn arr[start]\n\tif end - start == 1:\n\t\treturn max(arr[start], arr[end])\n\tmid = (start + end) // 2\n\treturn max(max_sub_array_sum_recursive(arr, start, mid), max_sub_array_sum_recursive(arr, mid + 1, end), max_sub_array_sum_recursive(arr, start, end) + arr[mid])\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_so_far = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_so_far = max(max_so_far, current_sum)\n        current_sum = max(arr[i], current_sum)\n    return max_so_far\n\n\narr = [10, 20, -30, -1]", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n# user function Template for python3\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n\tsum = 0\n\tfor i in range(1, n+1, 2):\n\t\tsum += i**2\n\n\treturn sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n\treturn sum(i**2 for i in range(2, n+1) if i % 2 == 0)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n\treturn (n*(n+1))/2*(n*(n+1))/2\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    i = 1\n    sum = 0\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum\n\n\nsquare_Sum(2)\n\n# +\n#assert square_Sum(2) == 20\n#assert square_Sum(3) == 30\n# -\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum += i*i\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n# step1: declare a function\ndef square_sum(n):\n    # step 2: initial step\n    result = 0\n    # step 3: do something\n    for i in range(0,n):\n        result = result + i*i\n    # step 4: return result\n    return result\n\n# step 5: test the function", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    \"\"\"\n    Find the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**2\n    return sum\n\n\n# assert square_Sum(2) == 20\n# assert square_Sum(5) == 50\n# assert square_Sum(10) == 5050\n# assert square_Sum(20) == 29000\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    return sum(num**2 for num in range(1,n+1) if num%2==0)\n\ndef square_Sum(n):\n    return sum(num**2 for num in range(1,n+1) if num%2==0)\n\n# with for loop\n\ndef square_Sum(n):\n    return sum(num**2 for num in range(1,n+1) if num%2==0)\n\n# without for loop\n\ndef square_Sum(n):\n    return sum((num**2 for num in range(1,n+1) if num%2==0))\n\ndef square_Sum(n):\n    return sum((num**2 for num in range(1,n+1) if num%2==0))\n\n\ndef square_Sum(n):\n    return sum(num**2 for num in range(1,n+1) if num%2==0)\n\n# without for loop\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1,n+1) if i%2==0)\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1,n+1) if i%2==0)\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1,n+1) if i%2==0)\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1,n+1) if i%2==0)\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1,n+1) if i%2==0)\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1,n+1) if i%2==0)\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1,n+1) if i%2==0)\n\ndef square_Sum(n):\n    return sum(i**2 for i in"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(A, p, M):\n    a = [1 for i in range(len(A))]\n    for i in range(len(A)):\n        x = a[i]\n        y = A[i]\n        while y:\n            x, y = y % p, x - y//p * p\n        if x > 1:\n            x = (x + p) % M\n            for j in range(len(a)):\n                if a[j] == x:\n                    return j\n\n\n# The below implementation is a slightly modified version of modular_inverse in the\n# GeeksforGeeks article. The original version is below, but it does not include the condition\n# where the inverse does not exist, and also does not take a prime number to be the modulo.\n# def modular_inverse(A, p, M):\n#     a = [1 for i in range(len(A))]\n#     for i in range(len(A)):\n#         x = a[i]\n#         y = A[i]\n#         while y:\n#             x, y = y % p, x - y//p * p\n#         if x > 1:\n#             x = (x + p) % M\n#             for j in range(len(a)):\n#                 if a[j] == x:\n#                     return j\n#     return -1\n\n# This is the original implementation, the above is a modified version.\n# def modular_inverse(A, p, M):\n#     a = [1 for i in range(len(A))]\n#     for i in range(len(A)):\n#         x = a[i]\n#         y = A[i]\n#         while y:\n#             x, y = y % p, x - y//p * p\n#         if x > 1:\n#             x = (x + p) % M\n#             for j in range(len(a)):\n#                 if a[j] == x:\n#                     return j\n#     return", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(a, p, mod):\n    def egcd(a, b):\n        if a == 0: return b, 0, 1\n        g, y, x = egcd(b % a, a)\n        return g, x - (b // a) * y, y\n\n    g, x, y = egcd(a, mod)\n    if g != 1:\n        return None  # modular inverse does not exist\n    else:\n        return x % mod\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(numbers, p, mod):\n    \"\"\"\n    :type numbers: list\n    :type p: int\n    :type mod: int\n    :rtype: int\n    \"\"\"\n    if p == 2:\n        return numbers[1]\n    elif p == 3:\n        return numbers[2]\n    elif p == 5:\n        return numbers[3]\n    elif p == 7:\n        return numbers[4]\n    elif p == 11:\n        return numbers[5]\n    elif p == 13:\n        return numbers[6]\n    elif p == 17:\n        return numbers[7]\n    elif p == 19:\n        return numbers[8]\n    elif p == 23:\n        return numbers[9]\n    elif p == 29:\n        return numbers[10]\n    elif p == 31:\n        return numbers[11]\n    elif p == 37:\n        return numbers[12]\n    elif p == 41:\n        return numbers[13]\n    elif p == 43:\n        return numbers[14]\n    elif p == 47:\n        return numbers[15]\n    elif p == 53:\n        return numbers[16]\n    elif p == 59:\n        return numbers[17]\n    elif p == 61:\n        return numbers[18]\n    elif p == 67:\n        return numbers[19]\n    elif p == 71:\n        return numbers[20]\n    elif p == 73:\n        return numbers[21]\n    elif p == 79:\n        return numbers[22]\n    elif p == 83:\n        return numbers[23]\n    elif p == 89:\n        return numbers[24]\n    elif p == 97:\n        return numbers[25]\n    elif p == 101:\n        return numbers[26]\n    elif p == 103:\n        return numbers[27]\n    elif p == 107:\n        return numbers[28]\n    elif p == 109:\n        return numbers[", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\n# Definition for an array with a single element.", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(array, p, mod):\n    if(array[0] == 1):\n        return array[0]\n    elif(array[0] > 1):\n        x = 0\n        y = array[0]\n        while(x < len(array)-1):\n            while(y <= array[x+1]):\n                if(y%p == 1):\n                    break\n                y += 1\n            else:\n                x += 1\n        result = modular_inverse(array[:x], p, mod)\n        result = result*y\n        result = result%mod\n        return result\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\n# O(n^2) time and space\ndef modular_inverse(arr, p, modulo):\n    if len(arr) == 0:\n        return None\n\n    if modulo == 1:\n        return None\n\n    for i in range(0, len(arr)):\n        for j in range(0, i):\n            if arr[i] % modulo == arr[j] % modulo:\n                print(arr[i], arr[j], modulo)\n                if (modulo - arr[j]) % p == 1:\n                    print(\"Found\")\n                    return (modulo - arr[j]) % p\n\n    return None\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(a, p, m):\n    # Write your code here\n    for i in range(1,m):\n        if(i**2 < m and (p-1) % i == 0):\n            if(pow(i,(p-1)//i,m) == a):\n                return i\n    return -1\n\ndef modular_inverse_no_mod(a, p):\n    # Write your code here\n    l = [pow(i,p-2,p) for i in range(p)]\n    for i in range(p):\n        if(l[i] == a):\n            return i\n    return -1\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom euler.primes import prime_factors\n\n\ndef modular_inverse(arr, prime, mod):\n    \"\"\"Find the modular inverse of the elements of arr using Euclid's algorithm.\n    :param arr: The array to be inverted.\n    :param prime: The prime to use as a modulus.\n    :param mod: The modulo for the modular inverse.\n    :return: The modular inverse of the elements of the arr.\n    \"\"\"\n    # Euclid's algorithm\n    for i in range(len(arr)):\n        if prime ** i % mod == 1:\n            return pow(prime, len(arr) - i - 1, mod)\n\n\ndef test_modular_inverse():\n    assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, prime):\n    arr = [x%prime for x in arr]\n    for i in range(2, prime-1):\n        if p % i == 0:\n            if i*p < prime:\n                if arr[0] % i == 0:\n                    return i\n                if arr[1] % i == 0:\n                    return i*p\n            else:\n                if arr[0] % i == 0:\n                    return i*p\n                if arr[1] % i == 0:\n                    return i\n    return None"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    return year // 365 + (year % 365 > 25)\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n# def odd_Days(num):\n#     odd = 0\n#     for i in range(1, num + 1):\n#         if i % 2 == 1:\n#             odd += 1\n#     return odd\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return len([day for day in range(1, year) if day % 2 != 0])\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    count = 0\n    for i in range(1, 366):\n        if i%2 == 1:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    even = year % 2 == 0\n    if even:\n        return 0\n    else:\n        return year - (2 - year % 2)\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return 366 - year % 4 - (year % 100) + (year // 400)\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    # Write your code here\n    res = 0\n    for i in range(1,366):\n        if(i%2 != 0):\n            res+=1\n    return res\n\ndef test():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    days = 365\n    if year%4 == 0:\n        if year%100 != 0:\n            days += 1\n        elif year%400 != 0:\n            days += 2\n        else:\n            days += 3\n    return days - (25 + (year%4))\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    num_days = 365\n    if year % 4 != 0:\n        num_days += 1\n    if year % 100 != 0:\n        num_days += 1\n    if year % 400 != 0:\n        num_days -= 1\n    return num_days % 2", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return 0\n            else:\n                return 1\n        else:\n            return 0\n    else:\n        return 1\n\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom typing import List\nfrom heapq import heappush, heappop\n\n\ndef max_length(lists: List[List[int]]) -> Tuple[int, List[int]]:\n    counter = Counter()\n    for l in lists:\n        counter[len(l)] += 1\n\n    if not counter:\n        return 0, []\n\n    max_len = max(counter.keys())\n\n    for n in counter:\n        if n != max_len:\n            counter[max_len] += counter[n]\n            counter[n] = 0\n\n    result = []\n    for i in range(counter[max_len]):\n        result.append(lists[heappop(counter[max_len])])\n    return max_len, result\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(array_of_arrays):\n    \"\"\"\n    Write a function to find the list of lists with maximum length\n    \"\"\"\n    max_len = -1\n    max_arr = []\n    for arr in array_of_arrays:\n        if len(arr) > max_len:\n            max_len = len(arr)\n            max_arr = arr\n    return max_len, max_arr\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list\n    :return: tuple\n    \"\"\"\n    max_length = 0\n    max_length_list = []\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if len(list_of_lists[i][j]) > max_length:\n                max_length = len(list_of_lists[i][j])\n                max_length_list = list_of_lists[i]\n    return max_length, max_length_list\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom collections import deque\n\ndef max_length(lst):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n    :param lst: list of lists\n    :return: a tuple with the max length list and the max length\n    \"\"\"\n    queue = deque()\n    max_length = 0\n    max_length_list = []\n    for i, item in enumerate(lst):\n        queue.append(item)\n        if len(queue) > max_length:\n            max_length = len(queue)\n            max_length_list = queue.copy()\n    queue.clear()\n    return max_length, max_length_list", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_length = 0\n    max_length_lst = []\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_lst = i\n    return max_length, max_length_lst\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    max = 0\n    for i in lists:\n        if len(i) > max:\n            max = len(i)\n            max_list = i\n    return (max, max_list)\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nimport numpy as np\n\ndef max_length(a):\n    \"\"\"\n    Returns list of lists with max length\n    \"\"\"\n    return max(a, key=len)\n\ndef max_length2(a):\n    \"\"\"\n    Returns list of lists with max length\n    \"\"\"\n    lengths = [len(x) for x in a]\n    return max(a, key=len)\n\ndef max_length3(a):\n    \"\"\"\n    Returns list of lists with max length\n    \"\"\"\n    return max(a, key=len)\n\ndef max_length4(a):\n    \"\"\"\n    Returns list of lists with max length\n    \"\"\"\n    return max(a, key=len)\n\ndef max_length5(a):\n    \"\"\"\n    Returns list of lists with max length\n    \"\"\"\n    return max(a, key=len)\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    res = []\n    for i in lst:\n        res.append([len(j) for j in i])\n    res.sort()\n    res.reverse()\n    return max(res, key = lambda i: i[0])\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    \"\"\"\n    :param lists: List of lists\n    :return: Length of the list and list of lists with maximum length\n    \"\"\"\n    max_length_list = []\n    max_length_value = 0\n    for i in lists:\n        if len(i)>max_length_value:\n            max_length_list = i\n            max_length_value = len(i)\n    return max_length_value, max_length_list\n\n\ndef test_max_length():\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_len = 0\n    max_list = []\n    for l in lst:\n        if len(l) > max_len:\n            max_list = l\n            max_len = len(l)\n    return max_len, max_list\n\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\nfrom __future__ import division\n\n# https://www.geeksforgeeks.org/count-no-of-ways-of-painting-the-fence-such-that-at-most-2-adjacent-posts-have-the-same-color/\ndef count_no_of_ways(k, n):\n\tif(k==1):\n\t\treturn n-1\n\telif(k==0):\n\t\treturn n\n\telif(n==1):\n\t\treturn 1\n\telif(n==2):\n\t\treturn 2\n\tdp = [0 for i in range(n+1)]\n\tdp[0] = 0\n\tdp[1] = 1\n\tdp[2] = 2\n\tfor i in range(3,n+1):\n\t\tdp[i] = dp[i-1] + dp[i-2]\n\treturn dp[n]\n\ndef main():\n\tprint(count_no_of_ways(2, 4))\n\nmain()", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1:\n                dp[i][j] = j\n            else:\n                if i == 2:\n                    dp[i][j] = 2\n                else:\n                    for _ in range(j):\n                        dp[i][j] += dp[i - 1][j - 1]\n    return dp[n][k]\n\n\ndef main():\n    print(count_no_of_ways(2, 4))\n\n\nmain()", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\nimport itertools\n\ndef count_no_of_ways(n, k):\n    return sum(itertools.combinations(k, i))\n\ndef test():\n    assert count_no_of_ways(2, 4) == 16\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nfrom typing import Tuple\n\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n    # Runtime: 20 ms, faster than 87.78% of Python3\n    # Memory Usage: 15.3 MB, less than 45.69% of Python3\n\n    Recursive solution\n\n    >>> count_no_of_ways(1, 2)\n    2\n    >>> count_no_of_ways(2, 2)\n    6\n    >>> count_no_of_ways(1, 3)\n    4\n    >>> count_no_of_ways(2, 3)\n    18\n    >>> count_no_of_ways(3, 3)\n    252\n    >>> count_no_of_ways(10, 2)\n    385192\n    >>> count_no_of_ways(10, 3)\n    14829949\n    \"\"\"\n    if k == 0:\n        return 0\n\n    if n == 0:\n        return 1\n\n    if k == 1:\n        return n\n\n    # Create a list of tuples of all the color combinations in the fence\n    # and initialize the counter to 0\n    # 0: post with no colors, 1: post with 1 color, 2: post with 2 colors ...\n    #   k-1: post with k colors\n    #\n    # [[1, 1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 3]]\n    # 0: [0, 0, 0], 1: [0, 0, 1], 2: [0, 1, 1], ...\n    #   k-1: [1, 1, 1]\n    color_combinations = [[i, j, k] for i in range(1, k+1) for j in range(1, k+1) for k in range(", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\n# O(n*k)\ndef count_no_of_ways(n, k):\n    res = 0\n    for i in range(k):\n        for j in range(k):\n            if j != i:\n                for k in range(k):\n                    if k != i and k != j:\n                        if j == k:\n                            continue\n                        res += 1\n    return res\n\n# O(n^2)\ndef count_no_of_ways1(n, k):\n    res = 0\n    for i in range(k):\n        for j in range(i + 1, k):\n            for i in range(n):\n                for j in range(i + 1, n):\n                    if j == i:\n                        continue\n                    res += 1\n    return res", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n\tdp = [[0 for i in range(k)] for i in range(n+1)]\n\tfor i in range(1, n+1):\n\t\tdp[i][k-1] = 1\n\tfor i in range(k-2, -1, -1):\n\t\tdp[1][i] = 1\n\tfor i in range(2, n+1):\n\t\tfor j in range(1, k):\n\t\t\tdp[i][j] = dp[i][j] + dp[i-1][j-1] + dp[i-1][j]\n\treturn dp[n][k-1]\n\n# O(nk) time complexity\n# O(nk) space complexity\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    # Write your code here\n    if n == 0 or k == 0:\n        return 0\n    if k == 1:\n        return 1\n    if n == 1:\n        return 1\n\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n\n# Sample Output:\n# 16\n\n# Explanation:\n#        White\n#       /  \\\n#      /    \\\n#     /      \\\n#    /        \\\n#   /          \\\n#  /            \\\n# White   Black   White\n#     ^   ^    ^   ^\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#     |   |    |   |\n#    ", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    # write your code here\n    if n == 0:\n        return 1\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) * k\n\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(number1, number2):\n    if number1 % number2 == 0:\n        return number1 / number2\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(number1,number2):\n    if number1/number2 == number2/number1:\n        print(\"{}/{} = {}/{}\".format(number1,number2,number2,number1))\n        return number1/number2\n    else:\n        return -1\n\n# Driver Code\n# n = 10\n# m = 3\n# print(find(n, m))", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(x,y):\n    return x/y\n\ndef find_quotient(x,y):\n    return x/y\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a, b):\n    q = a // b\n    r = a % b\n    return (q, r)\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1,num2):\n    return num1/num2\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find_quotient(a,b):\n    quotient = int(a/b)\n    return quotient\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a, b):\n    return a/b\n\n# Sample input\na = 10\nb = 3\n\n# Function call", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(x,y):\n    return x//y", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a // b\n\na = int(input(\"enter first number: \"))\nb = int(input(\"enter second number: \"))", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(number1,number2):\n    quotient = number1/number2\n    return quotient\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(side1,side2):\n    assert side1 != side2, \"Two sides of right angled triangle must be different\"\n    sides = [side1, side2]\n    sides.sort()\n    third_side = (3**0.5) * sides[1]\n    return third_side\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(side1, side2):\n    assert type(side1)==int\n    assert type(side2)==int\n    assert side1>side2\n    assert side1>0\n    assert side2>0\n    return math.sqrt((side1**2+side2**2)-((side1-side2)**2))\n    ", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return a**2+b**2\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    return math.sqrt(a**2+b**2-2*a*b)\n\n\n# ## Code Exercises\n\n# ### Exercise 1\n\n# +", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\n\ndef otherside_rightangle(side1, side2):\n\tside = side1 + side2\n\tother = math.sqrt(side**2 - (side1**2 + side2**2))\n\treturn other\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return (100/math.sqrt(a**2-b**2))", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    return (2**0.5)*(b**2)/(a**2)\n\n# Don't change this function\ndef run_test():\n    assert otherside_rightangle(100,200)==49.692907801441055\n    assert otherside_rightangle(7,8)==10.63014581273465\n    print('Tests passed')\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(s,p):\n    return p*p/(p+s)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return (a**2+b**2)**(1/2)\n#assert otherside_rightangle(7,8)==10.63014581273465\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    \"\"\"\n    a,b are sides of a right angled triangle\n    \"\"\"\n    return b*(b**2 - a**2)**(1/2)/a\n\ndef right_angle_triangle(a,b):\n    \"\"\"\n    a,b are sides of a right angled triangle\n    \"\"\"\n    return (a*b**2/a**2)/((a**2-b**2)**(1/2))\n\ndef check(a,b,c):\n    \"\"\"\n    a,b,c are sides of a triangle\n    \"\"\"\n    return a+b>c and a+c>b and b+c>a\n\ndef main():\n    \"\"\"\n    doctests\n    \"\"\"\n    import doctest\n    doctest.testmod()\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    if len(lst) == 0:\n        return None\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    return max(lst)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(list):\n    \"\"\"\n    >>> max_val([3, 2, 4, 5, 'version'])\n    5\n    \"\"\"\n    return max(list)", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\nimport sys\n\ndef max_val(values):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n\n    max = values[0]\n    for i in range(len(values)):\n        if values[i] > max:\n            max = values[i]\n    return max\n\ndef main():\n    values = input(\"Input a list, seperated by comma: \").split(\",\")\n    print(max_val(values))\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    max_val=0\n    for i in range(len(lst)):\n        if type(lst[i])==str:\n            max_val=max(max_val, len(lst[i]))\n        else:\n            max_val=max(max_val, lst[i])\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    \"\"\"\n    Given a heterogeneous list, return the maximum value.\n    \"\"\"\n    try:\n        for elem in lst:\n            if type(elem) is str:\n                lst.remove(elem)\n    except TypeError:\n        print(\"Error: list should be of same data type\")\n    \n    try:\n        return max(lst)\n    except ValueError:\n        print(\"Error: list should contain only elements\")\n\n\ndef test_max_val():\n    assert max_val(['Python', 3, 2, 4, 5, 'version']) == 5", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(list_of_values):\n    max = list_of_values[0]\n    for item in list_of_values:\n        if item > max:\n            max = item\n    return max\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list_):\n    max_val = 0\n    for i in list_:\n        if i>max_val:\n            max_val = i\n    return max_val\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n\tdivs = [x for x in range(1, n+1) if n % x == 0]\n\treturn sum(divs)\n\ndef test_sum_div():\n\tassert sum_div(8)==7\n\tassert sum_div(27)==17\n\tassert sum_div(12)==4\n\tassert sum_div(345)==27\n\tassert sum_div(2131235) == 171361\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(x):\n    div = []\n    for i in range(1,x+1):\n        if x%i==0:\n            div.append(i)\n    return sum(div)", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n# use a list to iterate all possible number for each dividor\n\ndef sum_div(num):\n\tsum_ = 0\n\tfor i in range(1,num+1):\n\t\tif num%i == 0:\n\t\t\tsum_ = sum_ + i\n\treturn sum_\n\ndef sum_div_str(num):\n\tsum_ = 0\n\tfor i in range(1,num+1):\n\t\tif str(num) == str(i):\n\t\t\tsum_ = sum_ + i\n\treturn sum_", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\nimport sys\ndef sum_div(n):\n    '''\n    >>> sum_div(8)\n    7\n    >>> sum_div(10)\n    7\n    >>> sum_div(12)\n    12\n    >>> sum_div(18)\n    24\n    >>> sum_div(24)\n    24\n    '''\n    divisors = set()\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.add(i)\n    return sum(divisors)\n\ndef test_sum_div():\n    num = sum_div(sys.argv[1])\n    assert num == sum(set(i for i in range(1,sys.argv[1]+1) if sys.argv[1] % i == 0))", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(number):\n    \"\"\"\n    Returns the sum of the divisors of the input number.\n    \"\"\"\n    if number % 2 == 0:\n        number = number / 2\n    if number % 3 == 0:\n        number = number / 3\n    if number % 4 == 0:\n        number = number / 4\n    if number % 5 == 0:\n        number = number / 5\n    if number % 6 == 0:\n        number = number / 6\n    if number % 7 == 0:\n        number = number / 7\n    if number % 8 == 0:\n        number = number / 8\n    if number % 9 == 0:\n        number = number / 9\n    if number % 10 == 0:\n        number = number / 10\n\n    sum_div = 1 + number\n    return sum_div", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(x):\n    return sum(d for d in range(1,x+1) if x % d == 0)\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    lis = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            lis.append(i)\n    return sum(lis)\n\ndef sum_div2(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)\n\ndef sum_div3(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)\n\ndef sum_div4(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)\n\ndef sum_div5(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)\n\ndef sum_div6(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)\n\ndef sum_div7(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)\n\ndef sum_div8(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)\n\ndef sum_div9(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)\n\ndef sum_div10(n):\n    return sum(i for i in range(1,n+1) if n % i == 0)", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    i=2\n    div=0\n    while i<num:\n        if num%i==0:\n            div=div+i\n        i+=1\n    return div\n\ndef sum_div_gen(num):\n    for i in range(1,num+1):\n        if num%i==0:\n            yield i\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    sum_div = 0\n    for divisor in range(number+1):\n        if number % divisor == 0:\n            sum_div += divisor\n    return sum_div\n\ndef sum_div_2(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    return sum(i for i in range(1,number+1) if number % i == 0)\n\ndef sum_div_3(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    return sum(range(1,number+1)[number%i == 0])\n\ndef sum_div_4(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    return sum([i for i in range(1,number+1) if number % i == 0])\n\ndef sum_div_5(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    return sum(i for i in range(1, number+1) if number % i == 0)\n\ndef sum_div_6(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\ndef sum_div_7(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    return sum(i for i in range(1, number+1) if number % i == 0)\n\ndef sum_div_8(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    return sum(i for i in range(1, number+1) if number % i == 0)\n\ndef sum_div_9(number):\n    '''\n    return the sum of all divisors of a number\n    '''\n    return sum(range(1, number+1)[number % i == 0])\n\ndef sum_div_1"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inv_count+=1\n    return inv_count\n\ndef get_Inv_Count(arr,n):\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                ans+=1\n    return ans\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr, n):\n    num_inv_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                num_inv_count += 1\n    return num_inv_count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, N):\n    res = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if arr[i] > arr[j]:\n                res += 1\n    return res\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(a,n):\n    inv = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                inv+=1\n    return inv\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n# Solution 1\n\n# Solution 2\ndef get_Inv_Count(lst, len):\n    arr = lst[:]\n    count = 0\n    for i in range(len):\n        for j in range(i+1,len):\n            if arr[i] > arr[j]:\n                count += 1\n                break\n    return count\n\nlst = [1,20,6,4,5]", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    inv=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                inv+=1\n    return inv\n\ndef main():\n    arr=[1,20,6,4,5]\n    n=5\n    print(get_Inv_Count(arr,n))\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,size):\n\n    # Write your code here\n    c=0\n    for i in range(len(arr)-1):\n        if(arr[i]>arr[i+1]):\n            c+=1\n    return c\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n\n# arr = [1,20,6,4,5]\narr = [4,6,1,5,8,9,3,6,4,3,4,5,2,4,4,5,6,2,6,4,5,6,4,3,5,8,7,7,4,2,3,4,2,3,4,5,6,4,3,4,5,6,4,5,6,4,3,5,7,6,3,4,2,3,4,3,4,5,4,2,6,5,4,6,3,4,3,4,5,6,4,5,6,4,3,5,6,7,3,4,3,4,5,6,4,5,6,4,5,6,4,5,6,4,3,4,5,6,3,4,2,3,4,3,4,5,4,2,3,4,5,6,4,3,4,5,6,4,5,6,3,4,5,6,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\nimport random\n\ndef get_Inv_Count(arr,n):\n    ans = 0\n    if(n <= 1):\n        return 0\n    for i in range(1,n):\n        if(arr[i] < arr[i-1]):\n            ans += 1\n    return ans\n\ndef test_case(case, expected_ans):\n    ans = get_Inv_Count(case,len(case))\n    if(ans != expected_ans):\n        print(\"Test Case {} FAILED\\nExpected: {}, Actual: {}\".format(case, expected_ans, ans))\n    else:\n        print(\"Test Case {} PASSED\\nExpected: {}, Actual: {}\".format(case, expected_ans, ans))\n\ntest_case([1,20,6,4,5], 5)\ntest_case([1,10,6,4,5], 2)\ntest_case([10,1,6,4,5], 2)", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\n# +\ndef get_Inv_Count(arr, size):\n    arr.sort()\n    count = 0\n    for i in range(1, size):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n\nget_Inv_Count([1,20,6,4,5],5)\n\n\n# -\n\n# ### Check If Subarray\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(ls):\n    flattened = []\n    for item in ls:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\n\n\ndef flatten_list_more_elegant(ls):\n    def _flatten_list(ls):\n        for item in ls:\n            if isinstance(item, list):\n                for sub_item in _flatten_list(item):\n                    yield sub_item\n            else:\n                yield item\n\n    return list(_flatten_list(ls))\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\nfrom typing import List, Union\n\n\ndef flatten_list(nested_list: List[Union[int, List[int]]]) -> List[int]:\n    flat_list = []\n\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n\n    return flat_list", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\nfrom typing import List\n\n\ndef flatten_list(array: List[int]) -> List[int]:\n    if len(array) == 1:\n        return array\n\n    return flatten_list(array[0::2]) + flatten_list(array[1::2])\n\n\ndef test_flatten():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [\n        0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120\n    ]\n\n\ndef test_flatten_2():\n    assert flatten_list([[0, 10], 20, [30, [40, 50, 60]]]) == [0, 10, 20, 30, 40, 50, 60]", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    def flatten(sub_lst):\n        return [item for sub_sub_lst in sub_lst for item in sub_sub_lst]\n    return flatten(lst)\n\n# test", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    return [i for sublist in lst for i in sublist]\n\ndef flatten_list(lst):\n    return list(itertools.chain(*lst))\n\ndef flatten_list(lst):\n    return [i for sublist in lst for i in sublist]\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n\tflat_list = []\n\tfor item in nested_list:\n\t\tif type(item) is list:\n\t\t\tfor item in flatten_list(item):\n\t\t\t\tflat_list.append(item)\n\t\telse:\n\t\t\tflat_list.append(item)\n\treturn flat_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n# flatten a list with nested list\n# use list comprehension, generator\ndef flatten(L):\n    result = []\n    for x in L:\n        if isinstance(x, list):\n            result.extend(flatten(x))\n        else:\n            result.append(x)\n    return result\n\n# use recursion\ndef flatten_recursion(L):\n    if isinstance(L, list):\n        return flatten(L)\n    else:\n        return L\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(list_input):\n    # write your code here\n    return list(set(itertools.chain.from_iterable(list_input)))\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    # Base case\n    if not nested_list:\n        return []\n    \n    # Recursive case\n    def helper(a, b):\n        if len(a) == 0:\n            return b\n        if not isinstance(a[0], list):\n            return helper(a[1:], b+[a[0]])\n        return helper(a[1:], b+flatten_list(a[0]))\n    return helper(nested_list, [])\n\nflatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n\n\n# +"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(lst1,lst2):\n    intersect = set(lst1) & set(lst2)\n    new_list = list(intersect)\n    for i in lst1:\n        if i in intersect:\n            new_list.append(i)\n    return new_list\n\nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nlst2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(lst1,lst2):\n    #create empty list to hold the common elements\n    lst = []\n    #iterate through the lst1 and find elements that exist in lst2\n    for i in lst1:\n        if i in lst2:\n            lst.append(i)\n    return lst\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n#Write your code here\ndef intersection_nested_lists(list1, list2):\n    a = set()\n    for i in list2:\n        for j in i:\n            a.add(j)\n    return [x for x in list1 if x in a]\n\n#3. Write a function which checks if a list contains all the elements of the given set.", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(lst1, lst2):\n    intersection = []\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                intersection.append(i)\n    return intersection\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(li, lis):\n    list_of_intersection = []\n\n    for i in range(len(lis[0])):\n        temp = []\n\n        for k in range(len(lis)):\n            temp.append(lis[k][i])\n\n        for j in range(len(li)):\n            if temp[0] == li[j]:\n                temp.remove(li[j])\n\n        if temp == []:\n            list_of_intersection.append(temp)\n\n    return list_of_intersection\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    first_list = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                first_list.append(i)\n    return first_list\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(lst1, lst2):\n    \"\"\"\n    This function takes in two lists and returns a list containing the elements that are present in both lists.\n    >>> intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    \"\"\"\n    lst_intersection = []\n\n    # Easiest way to check this is to do nested loops.\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                lst_intersection.append(i)\n\n    return lst_intersection\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1,list2):\n    for i in range(len(list2)):\n        for j in range(len(list2[i])):\n            if list2[i][j] in list1:\n                yield list2[i][j]\n\n\n#print(list(intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])))\n#print(intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]))\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(l1,l2):\n    def intersection_set(l1,l2):\n        l1 = list(set(l1))\n        l2 = list(set(l2))\n        if len(l1)>0 and len(l2)>0:\n            return intersection_set(l1[:-1],l2[1:])\n        else:\n            return l1 + l2\n    \n    return [l1_set for l1_set in intersection_set(l1,l2) if l1_set in l2]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n# Note: this has no trailing comma\n# Define max function\ndef max_aggregate(data_points):\n    \"\"\"Return the name of the student with the highest aggregate.\"\"\"\n    # Get the aggregate scores\n    data_points_names = [data_point[0] for data_point in data_points]\n    data_points_aggr = [data_point[1] for data_point in data_points]\n    \n    # Get the highest aggregate\n    highest_aggr = max(data_points_aggr)\n    \n    # Get the name with the highest aggregate\n    name = data_points_names[data_points_aggr.index(highest_aggr)]\n    \n    # Return the name with the highest aggregate\n    return (name, highest_aggr)\n\n\n# Test max_aggregate function", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    #your code goes here\n    \"\"\"\n    :param tuples: list of tuples\n    :return: tuple of max aggregate\n    \"\"\"\n\n    max_value = max(tuples, key=lambda x: x[1])[1]\n    max_name = max(tuples, key=lambda x: x[1])[0]\n\n    return max_name, max_value", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(tuples,key=itemgetter(1))\n\n# Check the answer", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    maximum = None\n    for index, tup in enumerate(tuples):\n        if tup[1]>maximum:\n            maximum = tup\n            maximum_index = index\n            \n    return tuple(tuples[maximum_index])\n\n\ndef max_aggregate2(tuples):\n    maximum = max(tuples,key=lambda tup:tup[1])\n    return maximum\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n\t\"\"\"\n\t:param tuples: a list of tuples\n\t:return: the name of the student who has the highest aggregate\n\t\"\"\"\n\t# TODO: implement your function here.\n\tname_to_total = {}\n\tfor name,total in tuples:\n\t\tif name not in name_to_total:\n\t\t\tname_to_total[name] = total\n\t\telse:\n\t\t\tname_to_total[name] += total\n\treturn max(name_to_total, key=name_to_total.get)\n\ndef test():\n\tassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(scorelist):\n    # list of tuples\n    max_score = scorelist[0] # maximum tuple from the list\n    # print(max_score)\n    # iterate over all tuples in the list\n    for i in range(1, len(scorelist)):\n        # print(scorelist[i])\n        # if current score is greater than maximum\n        if scorelist[i][1] > max_score[1]:\n            # store tuple as maximum\n            max_score = scorelist[i]\n\n    return max_score\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(student_list):\n    current_student = student_list[0]\n    aggregate = current_student[1]\n    for student in student_list:\n        if student[1]>aggregate:\n            current_student = student\n            aggregate = current_student[1]\n    return current_student\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\nimport unittest\n\n\ndef max_aggregate(tuples):\n    def tuple_to_tuple(tuple_to_convert):\n        return (tuple_to_convert[0], tuple_to_convert[1] + tuple_to_convert[0])\n\n    return tuple(sorted(set(map(tuple_to_tuple, tuples)), key=lambda x: x[1], reverse=True)[0])\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    max_score = 0\n    max_name = ''\n    for name, score in tuples:\n        if score > max_score:\n            max_score = score\n            max_name = name\n    return max_name, max_score\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    scores = dict()\n    for i in tuples:\n        if i[0] in scores:\n            scores[i[0]] += i[1]\n        else:\n            scores[i[0]] = i[1]\n    max = 0\n    for i in scores:\n        if scores[i] > max:\n            max = scores[i]\n    return max, scores[max]\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    count = 0\n    for a in range(2**n):\n        b = list(bin(a)[2:])\n        b.reverse()\n        #assert sum(b[:n]) == sum(b[n:])\n        if sum(b[:n]) == sum(b[n:]):\n            count += 1\n    return count\n\n\ncount_binary_seq(1)\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    # Write your code here\n    res = 0\n    for i in range(2**n):\n        count = 0\n        j = i\n        for j in range(n):\n            if i & (1<<j) != 0:\n                count += 1\n            else:\n                count -= 1\n        if count == 0:\n            res += 1\n    return res\n\n# print(count_binary_seq(1))\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    total = 0\n    for i in range(0, (1 << n)):\n        first_sum = sum([i % 2 for i in range(0, n)])\n        last_sum = sum([i % 2 for i in range(n, n + n)])\n        if first_sum == last_sum:\n            total += 1\n    return float(total)\n\n\ndef test_count_binary_seq():\n    assert count_binary_seq(1) == 2.0\n    assert count_binary_seq(2) == 24.0\n    assert count_binary_seq(3) == 504.0\n    assert count_binary_seq(4) == 10240.0\n    assert count_binary_seq(5) == 277280.0\n    assert count_binary_seq(6) == 7466560.0\n\n\ndef count_binary_seq_naive(n):\n    total = 0\n    for i in range(0, (1 << n)):\n        for j in range(0, n):\n            if i % 2 != (i >> j) % 2:\n                break\n        else:\n            total += 1\n    return float(total)\n\n\ndef test_count_binary_seq_naive():\n    assert count_binary_seq_naive(1) == 2.0\n    assert count_binary_seq_naive(2) == 24.0\n    assert count_binary_seq_naive(3) == 504.0\n    assert count_binary_seq_naive(4) == 10240.0\n    assert count_binary_seq_naive(5) == 277280.0\n    assert count_binary_seq_naive(6) == 7466560.0\n\n\ndef main():\n    print(count_binary_seq(1))\n    print(count_binary_seq(2))\n    print(count_binary_seq(", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    # Write your code here\n    if n == 0:\n        return 1\n    first_bit = 1 << (n - 1)\n    last_bit = 1 << (n - 1)\n    result = 0\n    for i in range(1 << n):\n        if i & first_bit:\n            result += 1\n        if i & last_bit:\n            result += 1\n    return result\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    # Write your code here\n    return 0\n\ncount_binary_seq(1)", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    return 2**n\n\n#write your code here.", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    m = 2 * n\n    if m == 0:\n        return 1\n    return 0 if m % 2 else 2 * count_binary_seq(n-1)\n\n\n# Test cases", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nfrom math import log\n\n\ndef count_binary_seq(n: int) -> float:\n    n *= 2\n    return 2**n * binomial(n, n//2) / (n * binomial(2*n, n))\n\n\ndef binomial(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial(n - 1, k - 1) + binomial(n - 1, k)\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    count = 0\n    for i in xrange(2**n):\n        if i%2 == 0:\n            first = i[:n]\n            second = i[n:]\n            if sum(first) == sum(second):\n                count += 1\n    return count\n\n\n#Assert 2.0", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nfrom math import factorial\nfrom functools import reduce\n\ndef count_binary_seq(n):\n    def sum(l):\n        return sum(l)\n    def product(l):\n        return reduce((lambda x,y: x*y), l)\n    def count_binary_subseq(n, k):\n        ans = 0\n        if n <= 0:\n            return 0\n        for i in range(n):\n            if i < k:\n                ans += count_binary_subseq(n-1, i)\n        return ans\n    return (product(map(factorial, range(n))) / sum(map(factorial, range(n))) *\n            product(map(count_binary_subseq, range(n), range(n)))/\n            (product(map(count_binary_subseq, range(n), range(n), range(n))) /\n             sum(map(count_binary_subseq, range(n), range(n), range(n)))))\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if d == None:\n        return 0\n    elif type(d)==dict:\n        return 1 + max(dict_depth(i) for i in d.values())\n    elif type(d)==list:\n        return 1 + max(dict_depth(i) for i in d)\n    else:\n        return 1\n\n# write a function to find the\n# depth of a dictionary", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d, depth = 0):\n    if d == None:\n        return depth\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            return dict_depth(d[key], depth + 1)\n    return depth + 1", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dic):\n    \"\"\"\n    >>> assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    >>> assert dict_depth({'a': 1}) == 1\n    \"\"\"\n    depth = 0\n    for key, value in dic.items():\n        depth = max(depth, 1 + dict_depth(value))\n    return depth", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(x) for x in d.values())\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dict_param):\n    \"\"\"\n    Returns the depth of the dictionary.\n    \"\"\"\n    if len(dict_param.keys()) == 0:\n        return 0\n\n    for key, value in dict_param.items():\n        if isinstance(value, dict):\n            return 1 + dict_depth(value)\n        else:\n            return 1\n    return 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    \"\"\" Returns the depth of d \"\"\"\n\n    # Base case:\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(x) for x in d.values())\n    else:\n        return 0\n\n# Enter the dictionary\nd = {'a': 1, 'b': {'c': {'d': {}}}}\n\n# Calling the function", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        if len(d.keys()) == 0:\n            return 0\n        else:\n            return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    \"\"\"\n    The depth of a dictionary is the number of nested keys in it.\n    \"\"\"\n    try:\n        depth = 1 + max([dict_depth(value) for value in d.values()])\n    except TypeError:\n        depth = 1\n    return depth\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    \"\"\"\n    >>> assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    \"\"\"\n    if isinstance(d, dict):\n        return 1+max([dict_depth(k) for k in d.keys()])\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    \"\"\"\n    :param d: dict\n    :return: int\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(dd) for dd in d.values()])\n    else:\n        return 1\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(num):\n    if num == 0:\n        return 0\n    bit_pos = 0\n    while (num & (1 << bit_pos)) == 0:\n        bit_pos += 1\n    return bit_pos\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    #Function to find the most significant bit which is also set\n    #For each bit\n    if n == 0:\n        return 0\n    else:\n        #For each bit set to 1 in the input number\n        for i in range(0,32):\n            if (n & (1 << i)):\n                #If the bit is already set,\n                if (i == 0):\n                    #Then check if the bit is 1st or 2nd\n                    if (n & (1 << (i+1))):\n                        #If it is the 1st bit\n                        return i\n                    else:\n                        #If it is not the 1st bit\n                        return i + 1\n                else:\n                    #If it is not the 1st bit\n                    return i\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    if n == 0:\n        return 0\n    count = 0\n    while n != 0:\n        n = n >> 1\n        count += 1\n    return count\n\n# Driver code", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(N):\n    N &= ~(N-1)\n    return N\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(x):\n    if x == 0:\n        return 0\n    i = 0\n    while x > 0:\n        x >>= 1\n        i += 1\n    return i\n\n# Your code goes here\n\n#T = set_Bit_Number(6)\n#print(T)", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n# Solution 1\ndef set_Bit_Number(x):\n    # Bitwise xor is used to find set bits\n    return x ^ (x - 1)\n\n# Solution 2\ndef set_Bit_Number(x):\n    return bin(x).count('1') - 1\n\n# Solution 3\ndef set_Bit_Number(x):\n    x = bin(x)[2:]\n    return x.count('1') - 1\n\n# Solution 4\ndef set_Bit_Number(x):\n    x = bin(x)\n    return x.count('1') - 1\n\n# Solution 5\ndef set_Bit_Number(x):\n    return bin(x).count('1') - 1\n\n# Solution 6\ndef set_Bit_Number(x):\n    return bin(x).count('1') - 1", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    k = n\n    while k>0:\n        if k & 1:\n            return k\n        k = k >> 1\n    return 0", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(N):\n    count = 0\n    while N > 0:\n        if N & 1:\n            count += 1\n        N = N >> 1\n    return count\n\ndef main():\n    print set_Bit_Number(6)\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n# Set bit in a number\ndef set_bit_number(number):\n    number_list = list(str(number))\n    set_number = []\n    for i in range(len(number_list)):\n        if number_list[i] == '1':\n            set_number.append(i)\n    return int(''.join(map(str, set_number)))\n\n# Driver Code", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    return n & (n-1)\n\n# \u6d4b\u8bd5:\nn = 6"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(a,b):\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i>j and a[i]>a[j]:\n                if a[i] == a[i-1] and a[j] == a[j+1]:\n                    return True\n    return False", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(array1, array2):\n    sorted_arr1 = sorted(array1)\n    sorted_arr2 = sorted(array2)\n\n    for i in range(len(sorted_arr1)):\n        if sorted_arr1[i] != sorted_arr2[i]:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1,arr2):\n    if len(arr1) != len(arr2):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0, len(arr1)):\n        if arr1[i] > arr2[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(a,b):\n    a.sort()\n    b.sort()\n    return a == b\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(a,b):\n    c=0\n    for i in range(len(a)):\n        c+=a[i]>b[i]\n    return c==0\n    ", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    inva=0\n    invb=0\n    for i in range(len(a)):\n        if a[i]>=b[i]:\n            inva+=1\n        else:\n            invb+=1\n    if inva==invb:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(list1,list2):\n    temp1 = list(map(int,list1))\n    temp2 = list(map(int,list2))\n    temp1.sort()\n    temp2.sort()\n    if temp1 == temp2:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef count(l,k):\n    count1 = 0\n    count2 = 0\n    for i in range(len(l)):\n        if l[i] > k:\n            count1+=1\n        if l[i] < k:\n            count2+=1\n    return count1, count2\n\n\ndef solve(l,k):\n    c1, c2 = count(l,k)\n    if c1 == c2:\n        return True\n    else:\n        return False\n\n\ndef test():\n    assert solve([1,0,2],3) == True\n    assert solve([1,0,2],2) == False\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr,n):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        if arr[0] == n:\n            return True\n        else:\n            return False\n    else:\n        if arr[0] == n:\n            return solve(arr[1:],n)\n        elif arr[len(arr)-1] == n:\n            return solve(arr[0:len(arr)-1],n)\n        elif arr[0] > arr[len(arr)-1]:\n            if solve(arr[1:],n) == True:\n                return True\n            else:\n                return False\n        else:\n            if solve(arr[0:len(arr)-1],n) == True:\n                return True\n            else:\n                return False\n\n# Driver Code\narr = [1,0,2]\nn = 3\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    count_1 =0\n    count_2 =0\n    for i in range(len(a)):\n        if a[i]>b[i]:\n            count_1+=1\n        elif a[i]<b[i]:\n            count_2+=1\n    if count_1==count_2:\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(array, rotations, index, rotation_index):\n    if rotation_index >= len(rotations):\n        return array[index]\n    \n    for i in rotations[rotation_index]:\n        if i == 0:\n            return array[index]\n        index -= 1\n    \n    return find_Element(array, rotations, index, rotation_index + 1)\n\ndef test():\n    array = [1, 2, 3, 4, 5]\n    rotations = [[0,2],[0,3]]\n    assert find_Element(array, rotations, 2, 0) == 3\n    assert find_Element(array, rotations, 2, 1) == 5\n    assert find_Element(array, rotations, 2, 2) == 2\n    assert find_Element(array, rotations, 2, 3) == 1\n    assert find_Element(array, rotations, 3, 3) == 4\n\ntest()", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(lst, rotations, k,n):\n    if k < 0 or n < 0:\n        return -1\n    rotations = rotations[k % len(rotations)]\n    for i in range(n):\n        pos = rotations[i]\n        if pos >= 0 and pos < len(lst):\n            return lst[pos]\n    return -1\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nfrom collections import defaultdict\ndef find_Element(arr, a, idx, n) :\n    d = defaultdict(list)\n    for i, j in a :\n        d[i].append(j)\n    for i in d :\n        d[i].sort()\n    count = 0\n    while (count < n) :\n        j = d[d[idx][-1]][-1]\n        d[d[idx][-1]].pop()\n        idx = j\n        count += 1\n    return idx\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(array,pair,index,count):\n\tif(count==index):\n\t\treturn array[pair[0][0]]\n\tcount+=1\n\tif(count==len(array)):\n\t\treturn array[0]\n\treturn find_Element(array,pair,index,count)\n\n# Testcase\narray = [1,2,3,4,5]\npair = [[0,2],[0,3]]", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(a,b,index,n):\n    if n == 0:\n        return a[index]\n    else:\n        return find_Element(a,b,index+b[n-1][1],n-1)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\n# Solution-1:\ndef find_Element(arr, swaps, index, n):\n    if index == n:\n        return arr[index]\n    for i in range(0,len(swaps)):\n        if (i+1)%2 == 0:\n            l,r = swaps[i][0],swaps[i][1]\n        else:\n            l,r = swaps[i][1],swaps[i][0]\n        #print(l,r)\n        temp = arr[r]\n        arr[r] = arr[l]\n        arr[l] = temp\n        if arr[index] == arr[r]:\n            temp = arr[r]\n            arr[r] = arr[l]\n            arr[l] = temp\n        return find_Element(arr, swaps, index+1, n)\n\n# Solution-2:\n\ndef find_Element(arr, swaps, index, n):\n    if index == n:\n        return arr[index]\n    for i in range(0,len(swaps)):\n        if (i+1)%2 == 0:\n            l,r = swaps[i][0],swaps[i][1]\n        else:\n            l,r = swaps[i][1],swaps[i][0]\n        temp = arr[r]\n        arr[r] = arr[l]\n        arr[l] = temp\n        if arr[index] == arr[r]:\n            temp = arr[r]\n            arr[r] = arr[l]\n            arr[l] = temp\n        return find_Element(arr, swaps, index+1, n)\n\n\narr = [1,2,3,4,5]\nswaps = [[0,2],[0,3]]", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,turn,num,index):\n    if index >= num:\n        return arr[0]\n    return find_Element(turn[index][1],turn[index][0],num,index+1)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, rotations, n, index):\n    res = 0\n    for i in range(n):\n        res = arr[rotations[i][0]]\n        arr[rotations[i][0]] = arr[rotations[i][1]]\n        arr[rotations[i][1]] = res\n    return res\n\narr = [1,2,3,4,5]\nrotations = [[0,2],[0,3]]\nn = 1\nindex = 2", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(array,rotations,index,k):\n    if k == 0:\n        return array[index]\n    n = len(array)\n    count = 0\n    temp = list(array)\n    for i in range(n):\n        if temp[i] != 0:\n            if rotations[i] == index:\n                return array[index]\n            count = count + 1\n            array[i],array[count] = array[count],array[i]\n    temp = list(array)\n    find_Element(temp,rotations,index,k-1)\n    return array[index]", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(nums, k, N, i):\n\tif k[0][1] == i:\n\t\treturn nums[k[0][0]]\n\telif k[0][1] > i:\n\t\treturn find_Element(nums, k[1:], N, i)\n\telse:\n\t\treturn find_Element(nums, k, N, i-k[0][1])\n\n#Another solution\n\ndef find_Element_2(nums, k, N, i):\n\tif k[0][1] > i:\n\t\treturn find_Element(nums, k[1:], N, i)\n\tif k[0][1] == i:\n\t\treturn nums[k[0][0]]\n\treturn find_Element(nums, k, N, i-k[0][1])\n\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    return tuple(word for word in words if word[0] == 'p')\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    # Complete this function\n    words = words.split()\n    for word in words:\n        if word[0]=='p':\n            return word\n    return False\n\n# Test", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    words = [word.strip() for word in words]\n    for word in words:\n        if word[0].lower() == 'p':\n            yield word\n    return\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    # Write your code here\n    return ([],[])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    words_ = []\n    for i in words:\n        if i[0] == 'p':\n            words_.append(i)\n    return words_\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    \"\"\"\n    :param words: list of words\n    :return: list of words starting with p\n    \"\"\"\n    return (word for word in words if word.startswith(\"p\"))\n\n# Enter the list of words\nwords = [\"Python PHP\", \"Java JavaScript\", \"c c++\"]\n\n# Calling the function", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    ret = []\n    for w in words:\n        if w[0] == 'p':\n            ret.append(w)\n    return ret\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    matched_words = []\n    for word in words:\n        if word.startswith('p'):\n            matched_words.append(word)\n    return matched_words\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    result = []\n    for word in words:\n        if word[0] == \"p\":\n            result.append(word)\n    return result\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    This function matches two words from a list of words starting with letter 'p'.\n    \"\"\"\n\n    # matches words starting with letter p\n    w1 = [word for word in words if word.startswith('p')]\n    w2 = [word for word in words if word.startswith('P')]\n\n    # returns two words that start with p in a tuple\n    return (w1[0], w2[0])\n\n#Below is an example usage:\n\n# Enter the list of words\nwords = [\"Python PHP\", \"Java JavaScript\", \"c c++\"]\n\n# Calling the function"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n#For the given list of numbers, k > i, we find a max sum for the prefix till i th index using lis_sum\n#we find a max sum for prefix till k th index using lis_sum and then check if the new sum is greater than the current max sum or not.\n#Time complexity: O(n^2)\n#Auxiliary space: O(n)\ndef max_sum_increasing_subseq(arr, k, i, n):\n    \n    # if k is greater than n, then there is no increasing subsequence\n    if k > n:\n        return 0\n    \n    #initializing sum to -1\n    sum = -1\n    \n    #if k = n\n    if k == n:\n        sum = arr[n-1]\n    \n    #if k is greater than n\n    else:\n        #we find max sum for prefix till i th index\n        sum_i = lis_sum(arr, i)\n        \n        #we find max sum for prefix till k th index\n        sum_k = lis_sum(arr, k)\n        \n        #checking if sum_k is greater than sum_i or not\n        if sum_k > sum_i:\n            sum = sum_k\n    \n    return sum\n\n#For the given list of numbers, we find the max sum for prefix till i th index using a dynamic programming approach.\n#Time complexity: O(n^2)\n#Auxiliary space: O(n)\ndef lis_sum(arr, i):\n    \n    #if i is 0\n    if i == 0:\n        sum = arr[0]\n    \n    #if i is greater than 0\n    else:\n        #if the prefix array has not been calculated yet\n        if len(lis_cache) <= i:\n            #we find the max sum of prefix till i-1 th index\n            sum = lis_sum(arr, i-1)\n            \n            #we calculate the max sum for prefix till i th index", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\nimport bisect\n\n\ndef max_sum_increasing_subseq(arr, i, k, N):\n    arr_set = set()\n    max_sum = 0\n    max_sum_subseq = None\n\n    for j in range(i, N):\n        if j == i:\n            max_sum = arr[j]\n        else:\n            max_sum = max(max_sum, max_sum_subseq[j - 1] + arr[j])\n        max_sum_subseq = [max_sum] + max_sum_subseq\n\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n\n    # print(arr)\n    # print(n)\n    # print(k)\n    # print(i)\n\n    def max_sum_increasing_subseq(arr, n, k, i):\n        if i == n:\n            return 0\n\n        if arr[i] >= arr[k]:\n            return max(arr[i], max_sum_increasing_subseq(arr, n, k, i + 1))\n        else:\n            return max_sum_increasing_subseq(arr, n, k, i + 1)\n\n    return max_sum_increasing_subseq(arr, n, k, i)", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, x):\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    \n    max_sum = prefix_sum[n]\n\n    for i in range(n - 1, -1, -1):\n        max_sum = max(max_sum, prefix_sum[i] + (x if i + 1 == k else 0))\n\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n# Python program to find maximum sum of \n# increasing subsequence from a given array \nimport numpy as np\n\ndef max_sum_increasing_subseq(A, k, n, m):\n    # create an array to store the sum \n    # of each prefix of given array \n    sum = np.zeros(m+1) \n    # Initialize the first sum with 0 \n    sum[0] = 0\n    for i in range(1, m+1):\n        sum[i] = sum[i-1]\n        for j in range(i):\n            if (A[j] < A[i]):\n                sum[i] = sum[i] + A[j]\n    # calculate the sum of all increasing \n    # subsequences of array A[1:k]\n    sum1 = 0\n    for i in range(k):\n        sum1 = sum1 + sum[i]\n    \n    # get the sum of all increasing subsequences \n    # of array A[1:n]\n    sum2 = 0\n    for i in range(n):\n        for j in range(k):\n            if (A[i] > A[j]):\n                sum2 = sum2 + sum[i+1]\n    # print the maximum of sum1 and sum2 \n    return max(sum1, sum2)\n  \n# driver code ", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Return 0 if sub array is empty or non-positive\n    if i < 0:\n        return 0\n    # Base case\n    if i == 0:\n        return arr[i] if k <= n else 0\n    # Recursive case\n    # Maximum sum with kth element\n    max_sum_with_k = arr[i] + max_sum_increasing_subseq(arr, n, i - 1, k)\n    # Maximum sum without kth element\n    max_sum_without_k = max(max_sum_increasing_subseq(arr, n, i - 1, k), max_sum_increasing_subseq(arr, n, i - 1, k - 1))\n    return max_sum_with_k if max_sum_with_k > max_sum_without_k else max_sum_without_k\n\ndef main():\n    arr = [1, 101, 2, 3, 100, 4, 5]\n    print(max_sum_increasing_subseq(arr, len(arr), 7, 4))\n\nmain()", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n# Example 1:\n\n# Input: arr[ ] = [1, 101, 2, 3, 100, 4, 5 ], start = 4, end = 6, k = 3\n# Output: 11\n# Explanation: Here, we can have max subarray sum = (1 + 101 + 100) + 4 + 5 = 11\n\n# Example 2:\n\n# Input: arr[ ] = [3, 4, -1, 10], start = 0, end = 3, k = 1\n# Output: 10\n# Explanation: Here, we can have max subarray sum = 4 + 3 + 10 = 17\n\n# Constraints:\n\n# 1 <= arr.length <= 10^5\n# -10^6 <= arr[i] <= 10^6\n# 1 <= start <= end <= arr.length\n# 1 <= k <= arr.length - start\n\n# Your Task:\n# You don't need to read or print anything. Your task is to complete the function maxSumIncreasingSubseq() which takes the three arguments mentioned above and returns the max sum of increasing subsequence from prefix till ith index and also including a given kth element.\n# Expected Time Complexity: O(n).\n# Expected Auxiliary Space: O(n).\n\n\n# Example 1:\n\n# Input: arr[ ] = [1, 101, 2, 3, 100, 4, 5 ], start = 4, end = 6, k = 3\n# Output: 11\n# Explanation: Here, we can have max subarray sum = (1 + 101 + 100) + 4 +", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(array, k, i, j):\n    if i == j:\n        return array[i]\n    max_sum = 0\n    for x in range(i, j):\n        max_sum = max(max_sum, array[x])\n        max_sum = max_sum + max_sum_increasing_subseq(array, k, x + 1, j)\n    return max_sum + array[i]\n\n# Time: O(k), Space: O(1)\n# Approach 2: Dynamic Programming"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuple(tupla, i, j):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    return tupla[0:i] + tupla[j:len(tupla)]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuple_object, colon_position):\n    if colon_position>len(tuple_object)-1:\n        raise IndexError(\"Position out of range.\")\n    result=[]\n    if colon_position == 0:\n        result = tuple_object[colon_position:]\n    elif colon_position == len(tuple_object)-1:\n        result = tuple_object[:colon_position+1]\n    else:\n        result = tuple_object[:colon_position+1] + tuple_object[colon_position+1:]\n    return result\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(t, l, r):\n    \"\"\"\n    Takes a tuple and an index, returns a colon of the tuple from the index l to r\n    \"\"\"\n    return tuple(t[l:r])\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tupla, posicion):\n    return tupla[0:posicion+1]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tupl, *args):\n    return tupl[:args[0]] + tupl[args[0]+1:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex,colon, val):\n\tif len(tuplex)>colon:\n\t\treturn colon_tuplex(tuplex[colon:],colon+1,val)\n\telse:\n\t\treturn tuplex + ([val]*(colon-len(tuplex)))\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuple, start, stop):\n    return tuple[:start] + (tuple[start] + tuple[start+1:stop]) + tuple[stop+1:]\n\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tup, i, j):\n    return tup[i:j]\n\n\n# +\n# 7\n#Create a function to find the sum of elements in a tuple.", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(t,i,j):\n    return (t[0], t[1], t[2][i], t[3][j])\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\nfrom functools import reduce\n\n\ndef large_product(nums1, nums2, k):\n    print(nums1, nums2)\n    if len(nums1) > len(nums2):\n        nums2, nums1 = nums1, nums2\n    if len(nums2) < k:\n        return []\n    max_product = reduce(lambda a, b: a * b, nums1[:k])\n    return [max_product] + large_product(nums1[1:], nums2[1:], k - 1)\n\n\ndef test():\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1,list2,n):\n    return sorted([x*y for x,y in zip(list1,list2)][::-1][:n])\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(x, y, n):\n    ans = []\n    for i in range(0, n):\n        ans.append(max(x[i]*y[i], y[i]*x[i]))\n    return ans\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(num1,num2,num3):\n    products = [0]*num3\n    for i in range(num3):\n        for j in range(num1):\n            for k in range(num2):\n                products[i] = products[i]+num1[j]*num2[k]\n                if products[i]>num3[i]:\n                    num3[i]=products[i]\n                products[i]=0\n    return products\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(x, y, N):\n    m = len(x)\n    n = len(y)\n    # x,y are sorted lists\n\n    res = []\n    for i in range(m - N + 1):\n        res.append(max(x[i:i+N], key=lambda a: a[0]*a[1]))\n    for i in range(n - N + 1):\n        res.append(max(y[i:i+N], key=lambda a: a[0]*a[1]))\n    res.sort(key=lambda a: a[1], reverse=True)\n    return res[:N]\n\n\ndef main():\n    print(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3))\n    print(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],2))\n\n\nmain()", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(l1, l2, n):\n    return sorted(list(set([a*b for a in l1 for b in l2])))[:n]\n\n#if __name__==\"__main__\":\n#    l1=[1,2,3,4,5,6]\n#    l2=[3,6,8,9,10,6]\n#    n=3\n#    print(large_product(l1,l2,n))", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(lst1,lst2,num):\n    if len(lst1)==0:\n        return lst2[-1*num:]\n    if len(lst2)==0:\n        return lst1[-1*num:]\n    if num<0:\n        return 0\n    x=lst1[-1]\n    lst1=lst1[:-1]\n    y=lst2[-1]\n    lst2=lst2[:-1]\n    return [x*y for x,y in zip(lst1,lst2)]\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(L1, L2, n):\n    L = []\n    for i in range(n):\n        L.append(L1[i] * L2[i])\n    return sorted(L, reverse = True)[:n]\n\n\ndef test_function():\n    L1 = [1, 2, 3, 4, 5, 6]\n    L2 = [3, 6, 8, 9, 10, 6]\n    print(large_product(L1, L2, 3))\n    assert large_product(L1, L2, 3) == [60, 54, 50]\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n#Time Complexity: O(nlogn)\n#Space Complexity: O(n)\n\ndef large_product(nums1, nums2, k):\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    product_dict = dict()\n    product_list = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product in product_dict:\n                product_dict[product] += 1\n            else:\n                product_dict[product] = 1\n    for key, value in product_dict.items():\n        if value >= k:\n            product_list.append(key)\n    return sorted(product_list, reverse=True)\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    # Write your code here.\n    n1 = len(list1)\n    n2 = len(list2)\n    if n1 < n:\n        n = n1\n    if n2 < n:\n        n = n2\n    list_sorted = []\n    for i in range(n):\n        if list1[i] > list2[i]:\n            list_sorted.append(list1[i])\n            list_sorted.append(list2[i])\n        else:\n            list_sorted.append(list2[i])\n            list_sorted.append(list1[i])\n    for j in range(n-1):\n        if list_sorted[j] >= list_sorted[j+1]:\n            break\n    if j == n-2:\n        list_sorted = list_sorted[0:j+1]\n    return list_sorted\n\n# Test cases:"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a >= b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\n# +\n# Solution\n# maximum(a, b):\n#     if a > b:\n#         return a\n#     else:\n#         return b\n\n# +\n# Solution using built-in max() function\n\ndef maximum(a, b):\n    return max(a, b)\n\n\n# +\n# Solution using ternary operator\n\ndef maximum(a, b):\n    return a if a > b else b\n\n\n# +\n# Solution using if-else statement\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n\n# +\n# Solution using function with default argument\n\ndef maximum(a, b=0):\n    return max(a, b)\n\n\n# +\n# Solution using lambda functions\n\nmaximum = lambda a, b: max(a, b)\n\n\n# +\n# Solution using filter function\n\nfrom math import isnan\n\ndef maximum(a, b):\n    return max(filter(lambda x: not isnan(x), [a, b]))\n\n\n# +\n# Solution using map function\n\nfrom math import isnan\n\ndef maximum(a, b):\n    return max(map(lambda x: max(x, 0) if not isnan(x) else 0, [a, b]))\n\n\n# +\n# Solution using functools.reduce\n\nfrom functools import reduce\n\ndef maximum(a, b):\n    return reduce(lambda x, y: max(x, y), [a, b])\n\n\n# +\n# Solution using functools.partial\n\nimport functools\n\nmax_ = functools.partial(max, 0)\n\ndef maximum(a, b):\n    return max_(a, b)\n\n\n# +\n# Solution using functools.partial\n\nimport functools\n\nmax_ = functools.partial(max, default=0)\n\ndef maximum(a, b):\n    return max_(a, b)\n\n\n# +\n# Solution using functools.lru_cache\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef maximum(a, b):\n    return max(a, b)", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    \"\"\"\n    Return the maximum of a and b\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x,y):\n    \"\"\"\n    Given two numbers, return the bigger one\n    \"\"\"\n    if x > y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return a if a > b else b\n\ndef maximum_2(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_3(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_4(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_5(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_6(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_7(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_8(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_9(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_10(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_11(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_12(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_13(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_14(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_15(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_16(a,b):\n    \"\"\"\n    Write your solution below.\n    \"\"\"\n    return max(a,b)\n\ndef maximum_17(a,b):\n    \"\"\"", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\n\n\n# +", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x,y):\n    if x >= y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1,num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2\n\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    return tuple(s.replace(\" \", \"\"))\n\ndef tuple_to_string(t):\n    \"\"\"\n    :param t:\n    :return:\n    \"\"\"\n    return \" \".join(t)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    if len(string) == 0:\n        return tuple()\n    return (string[0], string[1], string[2], string[3], string[4], string[5], string[6], string[7])\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    if s == '':\n        return ()\n    return s[0], string_to_tuple(s[1:])\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string: str) -> tuple:\n    return tuple(string)\n\ndef string_to_tuple_string(string: str) -> tuple:\n    return string.split()\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    return tuple(s)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    # Turns into a list of characters in the string\n    l = list(s)\n    # Turns into a tuple of characters\n    return tuple(l)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(my_string):\n    return tuple(my_string)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(str):\n    return tuple(str)\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(x):\n    if x == 0:\n        return 1\n    result = 1\n    while x & 1 == 0:\n        result <<= 1\n        x >>= 1\n    result |= 1\n    return result\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(value):\n    return value & ~(value - 1)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(x):\n    x = x | (x-1) # set the most significant bit to 1\n    x = x ^ (x-1) # set all the bits to 0 except the most significant one\n    return x\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(number):\n\t#\n\t# Check the base case\n\t#\n\tif number == 0:\n\t\treturn 0\n\n\t#\n\t# Now iterate through the number until we find an unset bit\n\t#\n\tfor i in range(0, 32):\n\t\tif not(number & 0x80000000):\n\t\t\treturn (number | (1 << i))\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n: int) -> int:\n    return n | (n-1)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n# def set_left_most_unset_bit(n):\n#     if n & 1:\n#         n ^= n - 1\n#     return n + 1\n\n# def set_left_most_unset_bit(n):\n#     while (n & 1) == 0:\n#         n >>= 1\n#     return n + 1\n\n# def set_left_most_unset_bit(n):\n#     while n & 1:\n#         n ^= n - 1\n#     return n + 1\n\n# def set_left_most_unset_bit(n):\n#     while n & 1 == 0:\n#         n >>= 1\n#     return n + 1\n\n\ndef set_left_most_unset_bit(n):\n    return n | (n + 1)\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(x):\n    return x | (x - 1)\n\ndef test():\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\nimport numpy as np\n\ndef set_left_most_unset_bit(x):\n    x = int(x)\n    return x ^ (x - 1)\n\n\n# Test for set_left_most_unset_bit function\nx = 10\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num: int) -> int:\n    return num ^ -num\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(x):\n    \"\"\"\n    Args:\n        x: int\n    Returns:\n        int\n    \"\"\"\n    return x | (x - 1)\n\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    volume = 1 / 3 * (math.pi * (radius**2)) * (height)\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    import math\n\n    area = 3.14*radius**2\n    return math.pi*radius*(radius**2 + (math.pi*radius**2*height**2)) / 3\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport numpy as np\nimport math\n\ndef volume_cone(height,radius):\n    x = np.linspace(0,2*math.pi,1000)\n    y = height * radius * np.sin(x)\n    return 2 * np.pi * radius * height * (np.pi / 2 - np.arcsin(y/radius))\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius,height):\n    volume = pi*(radius**2)*height/3.0\n    return volume\n\ndef run_test(test_fn):\n    assert test_fn(5,12)==314.15926535897927\n\nrun_test(volume_cone)\n\ndef area_cone(radius,height):\n    return pi*(radius**2)*height\n\nrun_test(area_cone)\n\n\ndef calc_volume(func, radius,height):\n    return func(radius,height)\n\ndef calc_area(func,radius,height):\n    return func(radius,height)\n\ncalc_volume(volume_cone,5,12)\n\ncalc_area(area_cone,5,12)\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius,height):\n    from math import pi\n    h = height/2\n    volume = (1/3) * pi * radius ** 2 * h\n    return volume\n\n\ndef volume_sphere(radius):\n    from math import pi\n    volume = (4/3) * pi * radius ** 3\n    return volume\n\n\ndef volume_pyramid(base,height):\n    volume = base * height\n    return volume\n\n\n# +\nimport unittest\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\n# TO BE COMPLETED\n\ndef volume_cone(radius,height):\n    from math import pi\n    return 0\n\n# THESE TESTS SHOULD PASS WITH NO ERRORS\ndef test_volume_cone_1():\n    assert volume_cone(5,12)==314.15926535897927\n\ndef test_volume_cone_2():\n    assert volume_cone(1,2)==1.7320508075688772\n\ndef test_volume_cone_3():\n    assert volume_cone(1,0)==0\n\ndef test_volume_cone_4():\n    assert volume_cone(-5,12)==0\n\ndef test_volume_cone_5():\n    assert volume_cone(1,-12)==0", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nfrom math import pi\n\ndef volume_cone(radius, height):\n    return (1./3.) * (pi * radius **2 * height)\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nimport math\n\ndef volume_cone(radius,height):\n    #We want the area of a circle to be pi*r**2\n    #we can use the formula for the volume of a sphere\n    #and plug in a pi/4 factor for the fact that the \n    #circumference of a circle is pi*r\n    return math.pi/4 * math.pow(radius,2)*height\n\n#Test function here\n\n#print(volume_cone(5,12))\n\n#Run the test", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport math\n\ndef volume_cone(radius, height):\n    assert radius >= 0, 'cone radius must be >=0'\n    assert height >= 0, 'cone height must be >= 0'\n\n    return 1/3 * math.pi * radius**2 * height\n\n\ndef test_volume_cone():\n    assert volume_cone(5,12)==314.15926535897927", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius,height):\n    return 3.14*(radius**2)*(height/3)\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n#1,2,3\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nos):\n    # write your code here\n    return [i for i in nos if i >= 0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(arr):\n    if not arr:\n        return 0\n    pos_list = [i for i in arr if i >= 0]\n    if pos_list:\n        return len(pos_list)\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(l):\n    return [i for i in l if i>0]\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n# -\n\n# ## <font color='blue'>Write a python program to check whether a number is positive or negative</font>\n\n# +", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(l):\n    pos_nos = []\n    for i in l:\n        if i>0:\n            pos_nos.append(i)\n    return pos_nos\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(l):\n    l = [x for x in l if x>0]\n    return l\n    \n# Enter the list\nl = [-1, -2, 1, 2]\n\n# Calling the function", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(arg):\n    for i in range(len(arg)):\n        if arg[i]>0:\n            print(arg[i])\n    return 0\npos_nos([4,8,7,6,1,2,5,3])\n\n# +", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(l):\n    pos_nos = []\n    for i in l:\n        if i >= 0:\n            pos_nos.append(i)\n    return pos_nos\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\npos_nos = lambda x: [i for i in x if i >= 0]"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid,n):\n    if n == 0 or grid == []:\n        return 0\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, grid[i][j])\n            if i+1 != n and j+1 != n:\n                max_sum = max(max_sum, grid[i][j] + grid[i+1][j+1])\n            if j+1 != n:\n                max_sum = max(max_sum, grid[i][j] + grid[i][j+1])\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(input_list, n):\n    max_sum = 0\n    #Sum of two maximum elements in first row\n    max_row1 = max(input_list[0]) + max(input_list[1])\n    #Sum of two maximum elements in last row\n    max_row2 = max(input_list[-1]) + max(input_list[-2])\n    #Sum of two maximum elements in last row\n    max_row3 = max(input_list[n-1]) + max(input_list[n-2])\n    #Sum of two maximum elements in last row\n    max_row4 = max(input_list[n-1]) + max(input_list[n-3])\n    #Sum of two maximum elements in last row\n    max_row5 = max(input_list[n-1]) + max(input_list[n-4])\n\n    max_sum = max(max_row1, max_row2, max_row3, max_row4, max_row5)\n    return max_sum", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom itertools import chain\n\ndef max_sum_rectangular_grid(grid, n):\n    if not grid or n == 0:\n        return 0\n\n    if len(grid[0]) == 0:\n        return 0\n\n    row = len(grid)\n    col = len(grid[0])\n\n    # leftmost\n    first_col_nums = []\n    for i in range(row):\n        first_col_nums.append(grid[i][0])\n\n    max_sum = first_col_nums[0]\n    for i in range(1, row):\n        max_sum = max(max_sum + grid[i][0], grid[i][0])\n\n    # rightmost\n    last_col_nums = []\n    for i in range(row - 1, -1, -1):\n        last_col_nums.append(grid[i][col - 1])\n\n    max_sum = max(max_sum, last_col_nums[0])\n\n    for i in range(1, n - 1):\n        max_sum = max(max_sum + grid[0][i], grid[0][i])\n        max_sum = max(max_sum + grid[row - 1][i], grid[row - 1][i])\n\n        first_col_nums = []\n        last_col_nums = []\n        for j in range(1, row - 1):\n            first_col_nums.append(grid[j][i - 1])\n            last_col_nums.append(grid[j][i + 1])\n\n        max_sum = max(max_sum, first_col_nums[0])\n        max_sum = max(max_sum, last_col_nums[0])\n\n    return max_sum\n\ndef main():\n    assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(rect_grid, n):\n\t# store in a dictonary. the key is the first element in the row, and the value is the max sum obtained\n\t# for each value in the dictionary\n\t# for each row, we find the max sum of the elements in the row and store it in the key\n\t# for each key, we find the max sum of elements in the row and store it in the key\n\t# for each key, we find the max sum of elements in the row and store it in the key\n\t# since we can only traverse the matrix in the direction of increasing row index and increasing column index,\n\t# this gives a time complexity of O(n^3)\n\tsum_matrix = {}\n\tfor i in range(len(rect_grid[0])):\n\t\tsum_matrix[rect_grid[0][i]] = sum_matrix.get(rect_grid[0][i], 0) + rect_grid[0][i]\n\t\tfor j in range(1, n):\n\t\t\tsum_matrix[rect_grid[i][j]] = max(rect_grid[i][j], rect_grid[i][j-1]) + sum_matrix.get(rect_grid[i][j], 0)\n\treturn max(sum_matrix.values())\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(arr, n):\n    #Write your code here\n    m = len(arr)\n    s = 0\n    for i in range(0, m):\n        s += max(arr[i][0], arr[i][-1])\n    for j in range(1, n):\n        s += max(arr[0][j], arr[m-1][j])\n    return s\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(arr, m):\n    dp = [[0]*m for i in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, m):\n        dp[i][0] = max(dp[i-1][0], arr[0][i])\n    for i in range(1, m):\n        dp[0][i] = max(dp[0][i-1], arr[1][i])\n\n    for i in range(1, m):\n        for j in range(1, m):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + arr[i][j]\n\n    return max(dp[-1])\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(matrix, n):\n    matrix = sorted(matrix)\n    rows = len(matrix)\n    max_sum = 0\n    for i in range(rows):\n        if i == 0 or i == rows - 1:\n            max_sum += matrix[i][0] + matrix[i][-1]\n        for j in range(n):\n            if j == 0 or j == n - 1:\n                max_sum += matrix[0][j] + matrix[rows-1][j]\n            else:\n                max_sum += matrix[i][j]\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(arr, n):\n    ans = 0\n\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if i != k and j != l and i != j:\n                        ans = max(ans, arr[i][j] + arr[k][l])\n\n    return ans\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [ [ 0 for i in range(cols) ] for j in range(rows) ]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 or j == 0:\n                dp[i][j] = grid[i][j]\n            else:\n                dp[i][j] = max(grid[i][j], max(dp[i-1][j], dp[i][j-1])+grid[i][j])\n\n    return max(max(dp), max(dp[len(dp)-1]))\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(s):\n    \"\"\"\n    >>> find_Max_Len_Even(\"python language\")\n    'language'\n    >>> find_Max_Len_Even(\"abcd\")\n    'abcd'\n    >>> find_Max_Len_Even(\"p\")\n    'p'\n    >>> find_Max_Len_Even(\"ab\")\n    'ab'\n    \"\"\"\n    s = s.strip()\n    lst = s.split()\n    length = 0\n    for i in lst:\n        if len(i)%2 == 0:\n            if len(i) > length:\n                length = len(i)\n    return lst[length-1]\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n# First we can see that our list of words is sorted based on their length\n\ndef find_Max_Len_Even(words):\n    max_len = 0\n    # Write your code here\n    # use the sort method\n    # and return the longest even word\n    return max(words)\n\n\nwords = [\"python\", \"programming\", \"python language\", \"language\"]", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(s):\n    even = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            even.append(s[i])\n    if max(len(i) for i in even) > len(max(even, key = len)):\n        return max(even, key = len)\n    else:\n        return max(even, key = len)\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(sentence):\n    words = sentence.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > len(max_len_even):\n                max_len_even = word\n\n    return max_len_even\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(words):\n    longest = ''\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > len(longest):\n                longest = word\n    return longest\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not string:\n        return None\n\n    max_len, max_len_word = 0, \"\"\n    for i in range(len(string)):\n        word = \"\"\n        while string[i] != \" \":\n            word += string[i]\n            i += 1\n\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_len_word = word\n\n    return max_len_word\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(word):\n    max_len = 0\n    for i in range(len(word)):\n        if word[i] == ' ' or i == len(word) - 1:\n            continue\n        if word[i].isspace():\n            continue\n        if word[i].isdigit():\n            continue\n        if word[i].isalpha():\n            max_len = max(max_len, len(word[i]))\n    return max_len\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    longest_len = 0\n    longest_word = \"\"\n    for word in str.split(\" \"):\n        if len(word) % 2 == 0:\n            if len(word) > longest_len:\n                longest_len = len(word)\n                longest_word = word\n    return longest_word\n\n\n# def find_Max_Len_Even(str):\n#     longest_len = 0\n#     longest_word = \"\"\n#     for word in str.split(\" \"):\n#         if len(word) % 2 == 0:\n#             if len(word) > longest_len:\n#                 longest_len = len(word)\n#                 longest_word = word\n#     return longest_word\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(sentence):\n    if len(sentence) <=1:\n        return sentence\n    odd_sentence = \"\"\n    even_sentence = \"\"\n    for i in range(len(sentence)):\n        if i%2 !=0:\n            odd_sentence += sentence[i]\n        else:\n            even_sentence += sentence[i]\n    even_len = len(even_sentence)\n    odd_len = len(odd_sentence)\n    if (odd_len > even_len) and (odd_len == even_len):\n        return odd_sentence\n    else:\n        return even_sentence", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(input_str):\n    max_len = 0\n    for i in input_str:\n        if i.isdigit():\n            if max_len < len(i):\n                max_len = len(i)\n        else:\n            if max_len < len(i) and len(i) % 2 != 0:\n                max_len = len(i)\n                break\n    return max_len\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(nums, number):\n    if not nums or number > nums[-1]:\n        return -1\n    lo, hi = 0, len(nums)-1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if nums[mid] == number:\n            if mid == len(nums)-1:\n                return mid\n            if nums[mid+1] == number:\n                return mid\n        elif nums[mid] < number:\n            lo = mid+1\n        else:\n            hi = mid-1\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, target):\n    \"\"\"\n    Args:\n        arr (list): array to search through\n        target (int): number to search for\n\n    Returns:\n        int: the index of the last occurrence of target\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\ndef find_last_occurrence_set(arr, target):\n    \"\"\"\n    Args:\n        arr (list): array to search through\n        target (int): number to search for\n\n    Returns:\n        int: the index of the last occurrence of target\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\n# run_tests()", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, val):\n    if not arr:\n        return -1\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if val == arr[mid]:\n            if mid == len(arr) - 1:\n                return mid\n            else:\n                start = mid + 1\n\n        elif val < arr[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\n#iterative\ndef find_last_occurrence_iter(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            if i == len(arr) - 1:\n                return i\n            else:\n                return i+1\n    return -1\n\n#recursive\ndef find_last_occurrence_rec(arr, val, last, curr):\n    if curr > last:\n        return -1\n    if arr[curr] == val:\n        if curr == len(arr) - 1:\n            return curr\n        else:\n            return find_last_occurrence_rec(arr, val, last, curr+1)\n    else:\n        return find_last_occurrence_rec(arr, val, last, curr+1)\n\n#my soln\ndef find_last_occurrence(arr, val):\n    return find_last_occurrence_rec(arr, val, -1, -1)\n\n#test", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, target):\n    if not array or not len(array):\n        return -1\n    left = 0\n    right = len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            if mid == 0 or array[mid - 1] != target:\n                return mid\n            while mid > 0 and array[mid - 1] == target:\n                mid -= 1\n        elif array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, key):\n  # linear search\n  for index, value in enumerate(arr):\n    if key == value:\n      return index\n  return -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(a, number):\n    if not a:\n        return 0\n\n    i = 0\n    j = len(a) - 1\n    mid = 0\n\n    while i < j:\n        mid = (i + j) // 2\n        if a[mid] == number:\n            i = mid + 1\n            j = mid\n\n        elif a[mid] < number:\n            i = mid + 1\n\n        else:\n            j = mid\n\n    if a[j] == number:\n        return j\n\n    return -1\n\n# Tests", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(array, value):\n    # start from the end of the array and compare against the value\n    # check if the array is not empty\n    while array:\n        # if the last element in the array matches the value\n        if array[-1] == value:\n            # return the index of that element\n            return len(array) - 1\n        # otherwise, remove the last element from the array\n        else:\n            # remove the last element from the array\n            array.pop()", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\nimport unittest\n\ndef find_last_occurrence(a, number):\n    \"\"\"\n    Find the last occurrence of a given number in a sorted array.\n    :param a: sorted array\n    :param number: a number to be searched\n    :return: index of the last occurrence of number in a sorted array\n    \"\"\"\n    i = len(a) - 1\n    while i >= 0:\n        if a[i] == number:\n            return i\n        else:\n            i -= 1\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, num):\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return i\n    return -1\n\n#Find the last occurrence of a given number in a sorted array"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(input_list):\n    output_list = []\n    current_length = 1\n    current_element = input_list[0]\n    while current_element != input_list[-1]:\n        output_list.append(current_length)\n        output_list.append(current_element)\n        current_length += 1\n        current_element = input_list[current_length]\n    output_list.append(current_length)\n    output_list.append(current_element)\n    return output_list\n\n#Here is the test for the function:\ndef test_func(x):\n    return modified_encode(x) == [[1,1], 1, 2, [3,4], 4, 4, [5,1]]\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(x):\n    \"\"\"\n    :param x: input list\n    :return: modified run length encoded list\n    \"\"\"\n    if x == []:\n        return []\n    else:\n        m = x[0]\n        count = 1\n        y = [x[0]]\n        for i in range(1, len(x)):\n            if x[i] == m:\n                count += 1\n            else:\n                y.append([m, count])\n                count = 1\n                m = x[i]\n        y.append([m, count])\n        return y\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(input_list):\n    output_list = []\n    for num in input_list:\n        if num == input_list[0]:\n            output_list.append([num, len(input_list)])\n            input_list.remove(num)\n        elif input_list[0] != num:\n            output_list.append([num, 1])\n            input_list.remove(num)\n    return output_list", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(ls):\n    '''\n    This function returns the modified run-length encoding of the list ls.\n\n    >>> modified_encode([1,1,2,3,4,4,5,1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    '''\n    res = []\n    for i in ls:\n        if i != ls[i-1]:\n            if i > 1:\n                res.append([i, 1])\n            else:\n                res.append(i)\n        else:\n            res[-1] = [res[-1][0], res[-1][1] + 1]\n    return res\n\n\n# +\ndef modified_encode_iter(ls):\n    \"\"\"\n    This function returns the modified run-length encoding of the list ls\n    using an iterator.\n\n    >>> modified_encode_iter([1,1,2,3,4,4,5,1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    \"\"\"\n    res = []\n    for i in ls:\n        if i != ls[i-1]:\n            if i > 1:\n                res.append((i, 1))\n            else:\n                res.append(i)\n        else:\n            res[-1] = (res[-1][0], res[-1][1] + 1)\n    return res\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\n# Test 1:\ndef modified_encode(lst):\n    encoded = []\n    for element in lst:\n        if lst.count(element) > 1:\n            encoded.append([element, lst.count(element)])\n        else:\n            encoded.append(element)\n    return encoded\n\n# Test 2:", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    encoded=[]\n    for i in l:\n        if len(l)==1:\n            encoded.append(i)\n        else:\n            if i==l[0]:\n                encoded.append(len(l))\n                encoded.append(l[0])\n            else:\n                encoded.append(len(l))\n                encoded.append(l[0])\n                for j in l[1:]:\n                    encoded.append(j)\n    return encoded", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(input_list):\n    encoded = []\n    run_length_pairs = []\n    for i, char in enumerate(input_list):\n        if i != 0 and char == input_list[i-1]:\n            run_length_pairs.append((char, i-1))\n        else:\n            if run_length_pairs:\n                encoded.append((run_length_pairs[0], run_length_pairs[-1]))\n                run_length_pairs = []\n            encoded.append(i)\n    if run_length_pairs:\n        encoded.append((run_length_pairs[0], run_length_pairs[-1]))\n    return encoded\n\n#   Test", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    index=1\n    pairs=[]\n    for i in lst:\n        if lst.count(i)>1:\n            pairs.append((i,lst.count(i)))\n        else:\n            pairs.append(i)\n        index+=1\n    \n    ret=[]\n    for i in pairs:\n        if type(i)==tuple:\n            if i[0]==i[1]:\n                ret.append(i)\n                continue\n            ret.append(i)\n            ret.append(i)\n        else:\n            ret.append(i)\n            ret.append(i)\n    return ret\n\n\n# +\ndef modified_encode(lst):\n    index=1\n    pairs=[]\n    for i in lst:\n        if lst.count(i)>1:\n            pairs.append((i,lst.count(i)))\n        else:\n            pairs.append(i)\n        index+=1\n    \n    ret=[]\n    for i in pairs:\n        if type(i)==tuple:\n            ret.append(i)\n            continue\n        ret.append(i)\n        ret.append(i)\n    return ret\n\nlst=[1,1,2,3,4,4,5,1]", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    return [lst[0], lst[1]] + [lst[n] if lst[n-1] == lst[n] else [lst[n], lst[n]] for n in range(2, len(lst))]\n\n\ndef modified_encode_index(lst):\n    return list(accumulate([lst[0]] + [lst[n] if lst[n-1] == lst[n] else [lst[n], lst[n]] for n in range(1, len(lst)),]))\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(seq):\n    newseq = []\n    last_elem = seq[0]\n    count = 0\n    for elem in seq:\n        if elem != last_elem:\n            if count > 1:\n                newseq.append([count, last_elem])\n            newseq.append(elem)\n            count = 1\n            last_elem = elem\n        else:\n            count += 1\n    newseq.append([count, last_elem])\n    return newseq\n\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_of_sides):\n    return sum_of_sides * (sum_of_sides + 1) * (sum_of_sides + 2) / 6\n\n\ndef test_max_volume():\n    assert max_volume(8) == 18", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom math import pow\n\ndef max_volume(side1,side2,side3):\n    volume = pow(side1,3) + pow(side2,3) + pow(side3,3) - pow(max(side1,side2,side3),3)\n    return volume\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nimport math\n\ndef max_volume(side_sum):\n    x1, y1, z1, x2, y2, z2 = None, None, None, None, None, None\n    l1, l2, l3 = None, None, None\n\n    if side_sum == 0 or side_sum < 0:\n        return None\n\n    for i in range(1, side_sum//2+1):\n        l1 = side_sum//i\n        l2 = (side_sum//i)**2\n        l3 = (side_sum//i)**3\n        if l1*l1*l3 > l2:\n            break\n\n    for i in range(1, side_sum//2+1):\n        if l3 > l1*l2:\n            l3 = l1*l2\n            break\n        l1 = side_sum//i\n        l2 = (side_sum//i)**2\n\n    if side_sum%l3 == 0:\n        for i in range(1, side_sum//l3+1):\n            x1 = side_sum//l3//i\n            y1 = side_sum//l3//i\n            z1 = side_sum//l3\n            x2 = (side_sum//l3)**2//i\n            y2 = (side_sum//l3)**2//i\n            z2 = (side_sum//l3)**2\n            if (x1*y1*z1 + x2*y2*z2) > (x1*y1*z2 + x2*y2*z1):\n                break\n\n    return x1*y1*z1 + x2*y2*z2\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(s):\n\tmax_vol = 0\n\tfor i in range(1, s+1):\n\t\tif i*i*i <= s:\n\t\t\t# print(i)\n\t\t\t# print(i*i*i)\n\t\t\t# print(i+i+i)\n\t\t\tvol = i*i*i + i*i + i\n\t\t\tif vol > max_vol:\n\t\t\t\tmax_vol = vol\n\treturn max_vol\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(size):\n    if size < 0:\n        return 0\n    if size == 0:\n        return 1\n    return max(max_volume(size - 1) + max_volume(size - 2) + max_volume(size - 3), \n               max_volume(size - 2) + max_volume(size - 3) + max_volume(size - 4), \n               max_volume(size - 3) + max_volume(size - 4) + max_volume(size - 5))\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(A):\n    # write your code here\n    A=list(map(int,input().split()))\n    a,b,c=A[0],A[1],A[2]\n    if a<b and a<c:\n        if b*c<a*(a+b+c):\n            return a*(a+b+c)\n        else:\n            return b*c\n    elif b<a and b<c:\n        if a*c<b*(b+a+c):\n            return b*(b+a+c)\n        else:\n            return a*c\n    elif c<a and c<b:\n        if a*b<c*(c+a+b):\n            return c*(c+a+b)\n        else:\n            return a*b\n    elif a==b and a==c:\n        return a*(a*a)\n    else:\n        return 0\n\n\n# +\n#assert max_volume(8) == 18\n# -\n\nmax_volume(8)\n\n# +\n#Test Cases\n# max_volume(8)\n# -\n\ndef max_volume(A):\n    # write your code here\n    A=list(map(int,input().split()))\n    a,b,c=A[0],A[1],A[2]\n    if a<b and a<c:\n        if b*c<a*(a+b+c):\n            return a*(a+b+c)\n        else:\n            return b*c\n    elif b<a and b<c:\n        if a*c<b*(b+a+c):\n            return b*(b+a+c)\n        else:\n            return a*c\n    elif c<a and c<b:\n        if a*b<c*(c+a+b):\n            return c*(c+a+b)\n        else:\n            return a*b\n    elif a==b and a==c:\n        return a*(a*a)\n    else:\n        return 0\n\n\n# +\n#Test Cases\n# max_volume(8)\n# -\n\ndef max_volume(A):\n    # write your code", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nimport numpy as np\n\n\ndef max_volume(sides):\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides\n\n    :param sides: sum of cuboid sides\n    :return: max volume\n    \"\"\"\n    a, b, c = [int(i) for i in np.sqrt(sides)]\n    assert all(a * a + b * b + c * c == sides)\n    if a * b * c == 1:\n        return 1\n    return max(8, a + b + c) * a * b * c\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(n):\n    if n < 3:\n        return 0\n    if n > 10:\n        return 0\n    i = j = 0\n    while j <= n:\n        while i <= n:\n            #print i, j, (i * j * n)\n            if i * j * n <= n and (i * j * n) % 3 == 0:\n                #print i, j, (i * j * n)\n                return (i * j * n)\n            i += 1\n        i = 0\n        j += 1\n    return 0\n\n\n#print max_volume(8)\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_sides):\n    volume = 0\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                if (i + j + k == sum_sides):\n                    volume += (i * j * k)\n    return volume\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(side_a,side_b,side_c):\n    max_vol = 0\n    for a in range(side_a,side_b+1):\n        for b in range(side_b,side_c+1):\n            for c in range(side_c,side_a+1):\n                vol = a*b*c\n                if vol > max_vol:\n                    max_vol = vol\n    return max_vol"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(text):\n    return [x for x in text.split() if len(x) == 5]\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\n\ndef find_long_word(string):\n    return re.findall(r'[a-z]{5,}', string)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(input_str):\n    \"\"\"\n    Write a function to find all five characters long word in the given string by using regex.\n\n    >>> find_long_word('Please move back to strem')\n    ['strem']\n    \"\"\"\n    return re.findall(r'\\b\\w{5,}\\b', input_str)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(s):\n    return re.findall(r'\\w{5}', s)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(s):\n    regex = re.compile(r'\\w{5,}')\n    return [word for word in regex.findall(s)]\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\n\ndef find_long_word(text):\n    return re.findall(r\"\\w{5}\", text)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(word):\n    word = word.lower()\n    # r'^[^aeiou]+$'\n    res = re.findall(r'^[^aeiou]+$', word)\n    # print(res)\n    return res\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\n# write your code here\ndef find_long_word(text):\n    # your code here\n    return re.findall(r'[\\w\\s]{5}', text.lower())\n\n\ndef find_long_word(text):\n    # your code here\n    return re.findall(r'[\\w\\s]{5}', text.lower())\n\n\ndef find_long_word(text):\n    # your code here\n    return re.findall(r'[\\w\\s]{5}', text.lower())\n\n\ndef find_long_word(text):\n    # your code here\n    return re.findall(r'[\\w\\s]{5}', text.lower())", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\n# Testcases", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    return re.findall(r'[A-Z]{5}', string)\n\n# A function for the longest word\ndef find_longest_word(string):\n    return re.findall(r'[A-Z]{10,}', string)\n\n# A function for all words\ndef find_all_words(string):\n    return re.findall(r'[A-Z]{1,}', string)\n\n# A function for all words containing a given letter\ndef find_words_containing(string, letter):\n    return re.findall(r'(?<=%s)[A-Z]{1,}(?=%s)' % (letter, letter), string)\n\n# A function for all words starting with a given letter\ndef find_words_starting_with(string, letter):\n    return re.findall(r'^(?=%s)[A-Z]{1,}' % letter, string)\n\n# A function for all words ending with a given letter\ndef find_words_ending_with(string, letter):\n    return re.findall(r'(?=%s)[A-Z]{1,}$' % letter, string)\n\n# A function for words containing a given letter and its two neighbours\ndef find_words_containing_all_neighbours(string, letter):\n    return re.findall(r'(?<=%s)(?=%s)[A-Z]{1,}(?=%s)(?=%s)[A-Z]{1,}(?=%s)$' % (letter, letter, letter, letter, letter), string)"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum(range(1,n+1))**2-sum(range(1,n+1))**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return sum(range(n))**2-sum(range(n)**2)", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sum_ = 0\n    squared_sum = 0\n    for i in range(n+1):\n        sum_ += i\n        squared_sum += i**2\n    return sum_ - squared_sum\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum(range(1,n+1))**2 - (sum(range(1,n+1))**2)**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 = sum1+i*i\n        sum2 = sum2+i\n    return sum1-sum2\n\ndef sum_difference_better(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 = sum1+i\n        sum2 = sum2+i*i\n    return sum1-sum2\n\ndef sum_difference_betterer(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 = sum1+i\n        sum2 = sum2+i*i\n    return sum1-sum2\n\ndef sum_difference_betterest(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 = sum1+i\n        sum2 = sum2+i*i\n    return sum1-sum2\n\ndef sum_difference_better_est(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 = sum1+i\n        sum2 = sum2+i*i\n    return sum1-sum2\n\ndef sum_difference_betterest_est(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 = sum1+i\n        sum2 = sum2+i*i\n    return sum1-sum2\n\ndef sum_difference_better_est_est(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 = sum1+i\n        sum2 = sum2+i*i\n    return sum1-sum2\n\ndef sum_difference_better_est_est(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return sum(range(1,n+1))**2-sum(range(1,n+1))**2*sum(range(1,n+1))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    assert(type(n)==int)\n    lis=[i for i in range(1,n+1)]\n    return sum(lis)**2-sum(i**2 for i in lis)\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum(range(1, n+1))**2 - (sum(range(1, n+1))**2)**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum([x**2 for x in range(1,n+1)])-sum([(x*y)**2 for x in range(1,n+1) for y in range(1,x+1)])\n\n\nsum_difference(12)", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum(range(1, n+1))**2 - (sum(range(1, n+1))**2)**2\n\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(input_string):\n    if len(input_string) == 1:\n        return input_string\n    if len(input_string) == 2:\n        return input_string + input_string[::-1]\n    return find_demlo(input_string[:-1]) + find_demlo(input_string[1:])\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(number):\n    \"\"\"\n    Recursive solution\n\n    :param number: input number\n    :return: demlo number\n    \"\"\"\n    if len(number) == 1:\n        return number\n    else:\n        odd = number[-1]\n        even = number[:-1]\n        return find_demlo(even) + odd\n\ndef find_demlo(number):\n    \"\"\"\n    Iterative solution\n\n    :param number: input number\n    :return: demlo number\n    \"\"\"\n    res = \"\"\n    for i in range(len(number) - 1):\n        res += number[i]\n    res += number[-1]\n    return res\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    pass\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\nimport pytest\n\ndef find_demlo(number):\n    \"\"\"Returns the demlo number for the given number\"\"\"\n    numbers = [str(number)]\n    for i in range(len(number) - 1, 0, -1):\n        numbers.append(str(int(number) - int(number % i)))\n        number = number % i\n    return \"\".join(numbers)\n\n\ndef test_find_demlo_111111():\n    assert find_demlo(\"111111\") == '12345654321'\n\n\ndef test_find_demlo_1():\n    assert find_demlo(\"1\") == '0'\n\n\ndef test_find_demlo_000000():\n    assert find_demlo(\"000000\") == '12345654321'\n\n\ndef test_find_demlo_2():\n    assert find_demlo(\"2\") == '1'\n\n\ndef test_find_demlo_100000():\n    assert find_demlo(\"100000\") == '12345654321'\n\n\ndef test_find_demlo_00000000():\n    assert find_demlo(\"00000000\") == '12345654321'\n\n\ndef test_find_demlo_1234567890():\n    assert find_demlo(\"1234567890\") == '1234567890'\n\n\ndef test_find_demlo_12345678901234567890():\n    assert find_demlo(\"12345678901234567890\") == '12345678901234567890'\n\n\ndef test_find_demlo_2130", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    demlo = \"\"\n    for i in range(len(n)):\n        demlo += str(n[i])\n        demlo += str(n[i] + 1)\n    return demlo[::-1]\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(number):\n    result = ''\n    number = number[::-1]\n    for i in number:\n        result += str(int(i) * int(i) - 1)\n    return result[::-1]\n\n\n# def find_demlo(number):\n#     result = ''\n#     for i in range(len(number)):\n#         result += str(int(number[i]) * int(number[i]) - 1)\n#     return result[::-1]\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\nimport re\n\ndef find_demlo(n):\n    n = str(n)\n    digits = re.findall(r'\\d+', n)\n    digits = [int(d) for d in digits]\n    digits.reverse()\n\n    out = ''\n    for i, d in enumerate(digits):\n        out += str(digits[i] * (10**i))\n\n    out = out[::-1]\n    print(out)\n    return out\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    if len(number) == 1:\n        return number\n    num = []\n    for i in range(0, len(number)):\n        num.append(number[i])\n    num.append(\"0\")\n    num.append(number[-1])\n    for i in range(len(number)-1):\n        if int(num[i]) > int(num[i+1]):\n            num[i], num[i+1] = num[i+1], num[i]\n    return \"\".join(num)\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    n = int(number)\n    m = 1\n    for i in range(1, len(number)):\n        m = (m * (26 - i + n % i)) % 1000000007\n    return str(m)\n\n# Test", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    demlo = \"\"\n    for i in number:\n        demlo = demlo + i[::-1]\n    return demlo"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(numbers):\n    return [index for index, value in enumerate(numbers) if value == min(numbers)]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        min_index = 0\n        min_val = arr[min_index]\n        for i in range(1, len(arr)):\n            if arr[i] < min_val:\n                min_index = i\n                min_val = arr[min_index]\n    return min_index\n\n#print(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    lst1 = []\n    for i in range(len(lst)):\n        lst1.append(i)\n    pos = []\n    for i in lst1:\n        if lst[i] == min(lst):\n            pos.append(i)\n    return pos", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(nums):\n    \"\"\"\n    brute force search for the min, then find the indices of the min\n    :param nums: the array to search\n    :return: the position of the min\n    \"\"\"\n    min = nums[0]\n    min_pos = 0\n    for i in range(len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n            min_pos = i\n    return [min_pos]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(list_):\n    index = []\n    for i in range(len(list_)):\n        if list_[i] == min(list_):\n            index.append(i)\n    return index\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    return [i for i, value in enumerate(lst) if value == min(lst)]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    lst.sort()\n    min_lst=[]\n    for i in range(len(lst)):\n        if i!=0 and lst[i]<lst[i-1]:\n            min_lst.append(i)\n    return min_lst\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(x):\n    res = []\n    for i in range(len(x)):\n        if x[i] == min(x):\n            res.append(i)\n    return res\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(L):\n    min_index = []\n    for i in range(len(L)):\n        min_index.append(L.index(min(L)))\n    return min_index\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(l):\n    return [i for i in range(len(l)) if l[i] == min(l)]\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, k):\n    for i in range(0, len(arr), 2):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n        if k <= 1:\n            return arr\n    else:\n        arr[-1] = - arr[-1]\n        return arr", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    res = []\n    for i in range(0, n, 2):\n        res.append(arr[i])\n        res.append(-arr[i+1])\n    return res\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    res = list()\n    for i in range(0, n, 2):\n        res.append(arr[i])\n        res.append(arr[i + 1])\n    return res\n\ndef main():\n    print(re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10))\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    \"\"\"\n    This is my solution:\n    \"\"\"\n    # print(arr)\n    # print(n)\n    left = 0\n    right = n-1\n    ans = [0]*n\n    for i in range(0, n):\n        ans[i] = arr[left]\n        # print(ans[i])\n        left += 1\n        if left > n-1:\n            left = 0\n            right -= 1\n    return ans\n\n# print(re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10))\n# arr = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8]\n# print(arr[left])\n# print(arr[right])\n\n# print(arr)\n# print(len(arr))", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, size):\n    res = [0] * size\n    i = 0\n    while i < size:\n        if arr[i] < 0:\n            res[i] = arr[i] * -1\n            i += 1\n        else:\n            res[i] = arr[i]\n            i += 1\n    return res\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    start, end = 0, len(arr) - 1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start, end = start + 1, end - 1\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\nimport random\n\n# ALGORITHM\n# Make a random list of length n\ndef re_arrange(array, n):\n    array = list(array)\n    for i in range(n):\n        while True:\n            rand = random.randint(0, n-1)\n            if rand > i:\n                break\n        array[rand], array[i] = array[i], array[rand]\n\n    return array\n\n\n# TESTING\nre_arrange(list(range(1,11)),10)", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n\tpos = arr[0::2]\n\tneg = arr[1::2]\n\tarr = pos + neg\n\n\tif len(arr) == n:\n\t\treturn arr\n\n\tif len(arr) > n:\n\t\tarr = arr[:n]\n\n\twhile len(arr) < n:\n\t\tarr.append(0)\n\treturn arr\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\n# this one works\ndef re_arrange(arr, N):\n    arr = sorted(arr)\n    i = 0\n    new_arr = []\n    while i < len(arr):\n        new_arr.append(arr[i])\n        i += 2\n        if i == len(arr):\n            new_arr.append(arr[0])\n            break\n    return new_arr\n\n\ndef re_arrange_alt(arr, N):\n    res = []\n    for i in range(0, N, 2):\n        res.append(arr[i])\n    res.append(arr[-1])\n    for i in range(1, len(arr) - 1, 2):\n        res.append(arr[i])\n    return res", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    if len(arr) == n:\n        return arr\n    n_odd = n % 2\n    odd_arr = []\n    even_arr = []\n    for i in range(0, len(arr), n_odd):\n        if i == 0:\n            odd_arr.append(arr[i])\n            if n_odd != 0:\n                even_arr.append(arr[i+1])\n        else:\n            even_arr.append(arr[i])\n            odd_arr.append(arr[i+1])\n    odd_arr.extend(even_arr[0:(n_odd-1)])\n    return odd_arr\n\n#assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(chain):\n    total = 0\n    i = 0\n    while i < len(chain):\n        total += chain[i]\n        i += 2\n    return total\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(my_list):\n    sum_ = 0\n    for i in range(len(my_list)-1):\n        sum_ += my_list[i+1]\n    return sum_, my_list[-1]\n\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        sum += lst[i]\n    return sum, sum + lst[1]\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(lst):\n    return tuple(sum(lst[i:i+2]) for i in range(0, len(lst), 2))\n\n# Check that the output is correct", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(l):\n    result = 0\n    for i in range(len(l)):\n        result += l[i][1]\n    return (result, result+l[-1][1])\n\n\nl = [(5, 6), (3, 6), (10, 34)]", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(seq):\n    \"\"\"\n    Returns a tuple of the sum of the alternate items in seq.\n    \"\"\"\n    return (sum(seq[::2]), sum(seq[1::2]))\n\ndef test_sum_of_alternates():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n    assert sum_of_alternates([4, 6, 3, 6, 10, 34]) == (46, 18)\n    assert sum_of_alternates([4, 6, 3, 6, 10, 34, 1]) == (47, 19)\n\ndef test_sum_of_alternates_empty():\n    assert sum_of_alternates([]) == (0, 0)\n    assert sum_of_alternates(()) == (0, 0)\n\ndef test_sum_of_alternates_odd():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34, 7)) == (46, 18)\n    assert sum_of_alternates([4, 6, 3, 6, 10, 34, 7]) == (46, 18)\n\ndef test_sum_of_alternates_even():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34, 7, 9)) == (47, 19)\n    assert sum_of_alternates([4, 6, 3, 6, 10, 34, 7, 9]) == (47, 19)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    \"\"\"\n    Using recursion, find the sum of pairs in the list\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n\n    current_sum = 0\n\n    if len(lst) == 1:\n        return lst[0]\n\n    if len(lst) == 2:\n        if lst[0] % 2 == 0:\n            return lst[0] + lst[1]\n        else:\n            return lst[1]\n\n    if len(lst) > 2:\n        current_sum = sum_of_alternates(lst[0:2])\n        current_sum = current_sum + sum_of_alternates(lst[2:])\n\n    return current_sum\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tuples):\n  '''\n  This function returns the sum of alternates of the tuples\n  \n  Parameters\n  ----------\n  tuples: tuple\n      The tuple to be summed\n  \n  Returns\n  -------\n  sum: int\n      The sum of alternates\n  '''\n  sum = 0\n  for i in tuples:\n    sum += i\n    sum += i\n  return sum", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(mylist):\n    newlist = list(mylist)\n    index = 0\n    while index < len(mylist):\n        if index % 2 == 0:\n            newlist[index] = newlist[index] * newlist[index]\n        index += 1\n    sum = 0\n    for i in range(len(newlist)):\n        sum += newlist[i]\n    return sum, sum // 2\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(sequence):\n    s = 0\n    for i in range(len(sequence) - 1):\n        s += sequence[i][0] + sequence[i + 1][1]\n    return s\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\nfrom collections import Counter\n\ndef get_Min_Squares(num:int) -> int:\n    # Your code goes here\n    result = 0\n    print(Counter(range(1, num+1)))\n    for i in range(1,num+1):\n        if num%i == 0:\n            result += Counter(range(1, i+1)).most_common(1)[0][1]\n    return result\n\n# print(get_Min_Squares(6))", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    nums = []\n    for i in range(1,n+1):\n        if i**2 <= n:\n            nums.append(i)\n    return len(nums)\n\n\n# +\n#Test Cases\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(num):\n\tif num == 0:\n\t\treturn 0\n\tsquares = [x * x for x in range(1, num // 2 + 1)]\n\tfor x in squares:\n\t\tif x == num:\n\t\t\treturn 1\n\treturn 2", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    '''\n    num = 100\n    ans = 3\n\n    num = 4\n    ans = 2\n\n    num = 12\n    ans = 1\n    '''\n    n = num\n    ans = 0\n    while(n > 0):\n        ans += n%10\n        n = n//10\n    return ans\n\n\n\n# using the above function", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    # Write your code here\n    # The idea is we can divide num by k*k\n    # if k*k is smaller than num then we can't find the minimum number of squares whose sum is equal to num\n    # if k*k is greater than num then we need more squares to make it equal\n    # so we can start from 1 and go on till k*k = num\n    # if k*k == num then we can stop and return k\n    # otherwise we need k+1\n    # The final answer is the minimum k\n    # So, we can write the below code.\n    k = 0\n    while True:\n        k += 1\n        if k*k == num:\n            break\n        elif k*k > num:\n            return k+1\n\n# Time Complexity: O(logN)\n# Space Complexity: O(1)\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    s = n\n    sq = 1\n    while s > 0:\n        s -= sq\n        sq += 1\n    return sq\n\n# This code is contributed by <NAME>", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(target_sum):\n    for x in range(0, target_sum+1):\n        if x**2 in [y**2 for y in range(1, target_sum+1) if y**2 <= target_sum]:\n            return x\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    k = 0\n    while n > 0:\n        if n % 2 == 0:\n            n /= 2\n            k += 1\n        else:\n            n += 1\n            k += 2\n    return k\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(number):\n    # TODO: Write your code here\n    # Solving this problem by simply checking all the numbers up to number/2.\n    # We can reduce the number of iterations by checking all the possible divisors\n    # of the number.\n\n    # min_num_squares = 0\n    # for i in range(1, number//2+1):\n    #     if number % i == 0:\n    #         min_num_squares += 1\n    # return min_num_squares\n\n    min_num_squares = 0\n    divisors = []\n    for i in range(1, number//2+1):\n        if number % i == 0:\n            divisors.append(i)\n\n    for i in range(1, number//2+1):\n        if number % i == 0:\n            min_num_squares += 1\n            break\n\n    for i in range(1, number//2+1):\n        if number % i == 0:\n            if i in divisors:\n                continue\n            else:\n                min_num_squares += 1\n                break\n\n    return min_num_squares\n\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(words):\n    return max(set(words), key=words.count)\n\n\ndef test_most_occurrences():\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == 'UTS'", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(lst):\n    dic = {}\n    max_key = 0\n    for word in lst:\n        if word in dic:\n            dic[word] += 1\n        else:\n            dic[word] = 1\n    for key in dic:\n        if dic[key] > max_key:\n            max_key = dic[key]\n    return list(dic.keys())[list(dic.values()).index(max_key)]\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    words = []\n    for string in strings:\n        words += string.split(\" \")\n    result = collections.Counter(words)\n    return result.most_common(1)[0][0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(list_of_strings):\n    pass\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    words = []\n    for string in strings:\n        for word in string.split():\n            words.append(word.lower())\n    return max(words, key = words.count)\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    # your code here\n    strings = sorted(strings,key=len)\n    word = \"\"\n    for string in strings:\n        if word == \"\":\n            word = string\n        else:\n            for ch in string:\n                if ch in word:\n                    continue\n                else:\n                    break\n        if word not in strings:\n            return word\n    return word\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    # return the word with most occurrences in the strings list\n    # build a dictionary with the word as key and the occurrences as value\n    word_occurrences = dict()\n    for string in strings:\n        for word in string.split():\n            if word in word_occurrences:\n                word_occurrences[word] += 1\n            else:\n                word_occurrences[word] = 1\n    max_occurrences = 0\n    max_word = \"\"\n    for word, occurrences in word_occurrences.items():\n        if occurrences > max_occurrences:\n            max_occurrences = occurrences\n            max_word = word\n    return max_word\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    max_count = 0\n    result = \"\"\n    for s in strings:\n        count = 0\n        for c in s:\n            if c.isalpha():\n                count += 1\n        if count > max_count:\n            max_count = count\n            result = s\n    return result\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\nimport nltk\nimport string\n\ndef most_occurrences(strings):\n    tokens = []\n    for sentence in strings:\n        tokens.extend(nltk.word_tokenize(sentence))\n    \n    counts = nltk.FreqDist(tokens)\n    max_count = max(counts.values())\n    word = max(counts, key=counts.get)\n    return word\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    # Write your code here\n    return max(strings, key=strings.count)\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b and a==c:\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(x,y,z):\n    return x==y==z or x==y or y==z or z==x\n\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a == b == c:\n        return True\n    elif a == b or a == c or b == c:\n        return True\n    return False\n\n#Let's write a function to check if two numbers are prime or not.\n#assert check_prime(11)==True\ndef check_prime(n):\n    if n>1:\n        for i in range(2,n):\n            if(n%i==0):\n                return False\n        return True\n    else:\n        return False\n\ndef max_num(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>c:\n        return b\n    else:\n        return c", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b or a==c or b==c:\n        return True\n    return False", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b or a==c or b==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    s1 = (a+b)\n    s2 = (a+c)\n    s3 = (b+c)\n    if s1==s2==s3:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(side1,side2,side3):\n    if (side1==side2==side3):\n        return True\n    else:\n        return False\n\n# Test case", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\n# import math \ndef check_isosceles(a,b,c):\n    \"\"\"\n    check if the triangle is isosceles or not\n    \n    Parameters\n    ----------\n    a : float\n        length of the first side\n    b : float\n        length of the second side\n    c : float\n        length of the third side\n\n    Returns\n    -------\n    bool\n        True if the triangle is isosceles, False otherwise\n    \"\"\"\n    if a==b==c:\n        return True\n    else:\n        return False\n\n\ndef get_side(a,b,c):\n    \"\"\"\n    Return the length of the given side.\n    \n    Parameters\n    ----------\n    a : float\n        length of the first side\n    b : float\n        length of the second side\n    c : float\n        length of the third side\n    \n    Returns\n    -------\n    float\n        length of the side\n    \"\"\"\n    side = math.sqrt(a**2+b**2+c**2)\n    return side\n\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b==c:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(l, n, m):\n    if n == 0 or len(l) <= n:\n        return l\n    for _ in range(n):\n        l.append(l.pop(0))\n    for _ in range(m):\n        l.insert(0, l.pop())\n    return l\n\n\ndef test_rotate_left():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert rotate_left(l, 3, 4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(nums, times, k):\n    \"\"\"\n    This function uses the rotate method from list.\n    :param nums: an array\n    :param times: number of rotation\n    :param k:  number of items to rotate to left\n    :return:  rotated array\n    \"\"\"\n    return nums[times:] + nums[:times]\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(l, n):\n    n = n%len(l)\n    temp = l[-1]\n    for i in range(n, -1, -1):\n        l[i] = l[i-1]\n    l[0] = temp\n    return l\n\n\nl = [1,2,3,4,5,6,7,8,9,10]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(list, n):\n    if n>0:\n        return list[n:] + list[:n]\n    elif n<0:\n        return list[-n:] + list[-n:]\n    else:\n        return list\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(arr, n, k):\n    # remove k elements from the front\n    # insert them at the end\n    # then append the elements in arr[-k:]\n    return arr[k:] + arr[:-k]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(L, n, m):\n    L.insert(n, L.pop(m))\n    return L\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(lst, n, k):\n    \"\"\"\n\n    :param lst: List to be rotated\n    :param n: number of items to rotate\n    :param k: number of items to be shifted\n    :return: rotated list\n    \"\"\"\n    for i in range(n):\n        lst.insert(0, lst.pop())\n    return lst[:k] + lst[k:]\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(array,n,k):\n    return array[n:] + array[:n]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(lst, num_items):\n    \"\"\"\n    Returns the list of items, which has been rotated by num_items to the left\n    :param lst: The list of items to be rotated\n    :param num_items: The number of items to be rotated to the left\n    :return: The list of items which has been rotated by num_items to the left\n    \"\"\"\n    return lst[num_items:] + lst[:num_items]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(a,n,k):\n    '''\n    :param a: The list to be rotated\n    :param n: The number of items to be rotated\n    :param k: The number of items to be removed after the rotation\n    :return: The rotated list\n    '''\n    for i in range(n):\n        a.remove(a[k])\n        a.append(a[k])\n    return a\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: number of negative integers in the list\n    \"\"\"\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(l):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(l)\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if l[i] < 0:\n            neg += 1\n        else:\n            pos += 1\n    return neg\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(numbers):\n    count = 0\n    for number in numbers:\n        if number < 0:\n            count += 1\n    return count\n\ndef neg_count(numbers):\n    count = 0\n    for number in numbers:\n        if number < 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(li):\n    return len([x for x in li if x < 0])\n\n#Below is an example usage:\n\n# Enter the list\nli = [-1, -2, 3, -4, -5]\n\n# Calling the function", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n    return len([x for x in lst if x < 0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(seq):\n    count = 0\n    for i in seq:\n        if i < 0:\n            count += 1\n    return count\n\ndef test_neg_count():\n    print(neg_count([-1,-2,3,-4,-5]))\n\n# neg_count = lambda x : len([i for i in x if i < 0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(list):\n    counter = 0\n    for i in list:\n        if i < 0:\n            counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(num_list):\n    count = 0\n    for num in num_list:\n        if num < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(numbers):\n    counter = 0\n    for number in numbers:\n        if number < 0:\n            counter += 1\n    return counter\n\ndef test():\n    assert neg_count([-1,-2,3,-4,-5]) == 4\n\ntest()\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(my_list):\n    count = 0\n    for i in range(len(my_list)):\n        if my_list[i] < 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(txt):\n    result = re.findall(r'[a-zA-Z]{3,}', txt)\n    return result\n\n#Test Code\ntxt = 'For the four consumer complaints contact manager AKR reddy'", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\ndef find_char(str):\n    return re.findall(r\"(?<=[a-zA-Z])[a-zA-Z]{3,}(?=[a-zA-Z])\", str)", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(string):\n    import re\n    return re.findall(r'[a-zA-Z]{3}', string) + re.findall(r'[a-zA-Z]{4}', string) + re.findall(r'[a-zA-Z]{5}', string)", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(string):\n    reg_ex = r\"\\b[A-Z]{3,5}\\b\"\n    return re.findall(reg_ex, string)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\n# Solution\n\ndef find_char(str):\n    return [word for word in re.findall(r'\\w{3,}', str)]\n\n\n# Tests\n\ndef test_find_char():\n    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(text):\n    # write your code here\n    return [i for i in text.split() if len(i) >= 3 and len(i) <= 5]\n\n#T=int(input())\n#for _ in range(T):\n#    s=input()\n#    print(*find_char(s))", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(string):\n    return re.findall(r'\\b[a-zA-Z]{3,5}\\b', string)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n# Write your code here\n\nimport re\n\n# Pattern for word\nword = r'[a-zA-Z]+[ ]*[a-zA-Z]+[ ]*[a-zA-Z]+'\n\n# Find all the words\nwords = re.findall(word, \"For the four consumer complaints contact manager AKR reddy\")", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\ndef find_char(s):\n    return re.findall(r'\\b[A-Za-z]{3,}\\b', s)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nfrom re import compile, sub\n\ndef find_char(string):\n    \"\"\"\n    Write a function to find all three, four, five characters long words in the given string by using regex.\n    \"\"\"\n    words = sub(compile(r\"\\s\"), \"\", string).split()\n    result = [word for word in words if len(word) in [3, 4, 5]]\n    return result\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\nimport numpy as np\n\ndef count_unset_bits(n):\n\n    return np.count_nonzero(n ^ 1)\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# Python program to count the number of set bits\n# in a binary number\n\n# Function to count the number of\n# set bits in a binary number\ndef count_unset_bits(n):\n\n    # Initialize count to 0\n    count = 0\n\n    # Iterate through all bits\n    # of the given number\n    while n > 0:\n\n        # If current bit is 0\n        # then increment count\n        if n & 1 == 0:\n            count += 1\n\n        # Divide by 2\n        n = n >> 1\n\n    # Return the count\n    return count\n\n\n# Driver code", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(num):\n    count = 0\n    for i in range(32):\n        if num & (1 << i) == 0:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(number:int) -> int:\n    \"\"\"\n    Args:\n    number: An integer which will be checked.\n    Returns:\n    The number of unset bits in the number.\n\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(32)\n    3\n    >>> count_unset_bits(0)\n    32\n    \"\"\"\n    bits = number\n    result = 0\n\n    while bits:\n        result += bits & 1\n        bits >>= 1\n\n    return result\n\n\ndef main():\n    print(\"Please run this solution on LeetCode\")\n    print(\"https://leetcode.com/problems/count-unset-bits/\")\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\nimport numpy as np\n\ndef count_unset_bits(num):\n    \"\"\"Count the number of unset bits in a number.\n    \n    Parameters\n    ----------\n    num : int\n        A number.\n        \n    Returns\n    -------\n    int\n        The number of unset bits in `num`.\n    \"\"\"\n    assert isinstance(num, int)\n    return num.bit_length() - np.count_nonzero(num)\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef count_unset_bits(num):\n    \"\"\"Count the number of unset bits in a number.\n    \n    Parameters\n    ----------\n    num : int\n        A number.\n        \n    Returns\n    -------\n    int\n        The number of unset bits in `num`.\n    \"\"\"\n    assert isinstance(num, int)\n    return num.bit_length() - np.count_nonzero(num)\n\n# Enter the number\nnumber = 10\n\n# Calling the function", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n: int) -> int:\n    num_set_bits = 0\n    for i in range(31):\n        if(not(n & (1 << i))):\n            num_set_bits += 1\n    return num_set_bits", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# solution using bitwise and operator\ndef count_unset_bits(x):\n    count = 0\n    for i in range(32):\n        count += 1 - (x & 1)\n        x >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    return bin(n).count('1') - 2\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(number):\n    if not isinstance(number, int):\n        raise ValueError('Only integers are accepted')\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\ndef test_count_unset_bits():\n    \"\"\"Verify that the function works as intended\"\"\"\n    assert count_unset_bits(2) == 1\n    assert count_unset_bits(15) == 4\n    assert count_unset_bits(0) == 32\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    if n == 0:\n        return 0\n    ans = 0\n    for i in range(1, n+1):\n        ans += n ^ i\n    return ans\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(strg):\n    d = {}\n    for i in strg:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    return d", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nimport unittest\ndef char_frequency(s):\n    dict = {}\n    for char in s:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    return dict\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(str1):\n    char_freq_dict = {}\n    for letter in str1:\n        if letter in char_freq_dict:\n            char_freq_dict[letter] += 1\n        else:\n            char_freq_dict[letter] = 1\n    return char_freq_dict\nchar_frequency('python')\n\n\n# +\n#Write a function to check whether a given string is palindrome or not.", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(str):\n    count = {}\n    for i in str:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    frequency = {}\n    for i in string:\n        if i not in frequency:\n            frequency[i] = 0\n        frequency[i] += 1\n    return frequency\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(str_):\n    str_ = str(str_)\n    char_dict = {}\n    for char in str_:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(str):\n    char_dict = {}\n    for char in str:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    result = {}\n    for character in string:\n        if character not in result:\n            result[character] = 0\n        result[character] += 1\n    return result\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    frequency = {}\n    for ch in string:\n        if ch not in frequency:\n            frequency[ch] = 1\n        else:\n            frequency[ch] += 1\n    return frequency\n\ndef char_frequency(string):\n    return {char: string.count(char) for char in set(string)}", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n\tstring = string.lower()\n\tfrequency = {}\n\tfor char in string:\n\t\tif char in frequency:\n\t\t\tfrequency[char] += 1\n\t\telse:\n\t\t\tfrequency[char] = 1\n\treturn frequency\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort_list(list):\n    return sorted(list, key=lambda x: x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(data):\n    return sorted(data, key=lambda x: x[1])\n\ndef Sort_v2(data):\n    return sorted(data, key=lambda x: x[1][1])\n\ndef Sort_v3(data):\n    return sorted(data, key=lambda x: x[1][1], reverse=True)\n\ndef Sort_v4(data):\n    return sorted(data, key=lambda x: x[1][1])\n\n# Sort_v4([['a', 10], ['b', 5], ['c', 20], ['d', 15]])\n\n# def Sort_v1(data):\n#     return sorted(data, key=lambda x: x[1][1])\n#\n# Sort_v1([['a', 10], ['b', 5], ['c', 20], ['d', 15]])", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort(list):\n    return sorted(list, key=lambda x: x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(array):\n    array.sort(key=lambda x: x[1])\n    return array\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(alist):\n    \"\"\"Sort list according to the second element of sublist.\"\"\"\n    return sorted(alist, key = lambda sublist: sublist[1])\n\n\ndef test_sort():\n    assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n#Write your code below:\ndef Sort(list):\n    return sorted(list, key=lambda x:x[1])", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort_list_by_sublist(list_of_list):\n    return sorted(list_of_list, key=lambda sublist: sublist[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort_by_sublist_second_element(items):\n    items.sort(key=lambda x:x[1])\n    return items\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if(a+b>c and a+c>b and b+c>a):\n        return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    return False\n\n\n# +", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\nimport math\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b>c and b+c>a and c+a>b:\n        return True\n    else:\n        return False\n\n\n# +", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(side_a,side_b,side_c):\n    if side_a + side_b > side_c and side_a + side_c > side_b and side_b + side_c > side_a:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n#Write your code here\ndef check_Validity(a,b,c):\n    if a+b>c or a+c>b or b+c>a:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\nimport math\nimport numpy as np\n\ndef check_Validity(side1, side2, side3):\n    sum = side1 + side2 + side3\n    if (side1 + side2 > side3) or (side1 + side3 > side2) or (side2 + side3 > side1):\n        return False\n    elif (sum == side1 + side2 + side3):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if(a+b > c and a+c > b and b+c > a):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\nimport numpy as np\n\ndef ap_sum(a, b, step):\n    \"\"\"\n    a, b: int.\n    step: int.\n\n    >>> ap_sum(1,5,2)==25\n    True\n    \"\"\"\n    return int(np.sum(np.arange(a,b+1,step)))\n\ndef main():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,c):\n\treturn a+c+b+(b-a)*(c-a)+(c-a)*(b-a)\n\t", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(start,end,step):\n    sum=0\n    for i in range(start,end+1,step):\n        sum+=i\n    return sum", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(first,last,step):\n    return (first+(last-1)*step)/2\n\ndef test_ap_sum():\n    assert ap_sum(1,5,2)==25\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    sum_ = 0\n    for i in range(n):\n        sum_ += i*a+a\n    return sum_\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\nimport numpy as np\ndef ap_sum(start, stop, step):\n    return int((start+stop+step)/2)*step - start\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(start, end, step):\n    \"\"\"\n    >>> ap_sum(1,5,2)==25\n    True\n    \"\"\"\n    return (start+step*(end-1))//step\n\n#Unit Test", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a, d, c):\n    \"\"\"\n    This function calculates the sum of the arithmetic progression starting from a to b\n    :param a: int. Start number\n    :param d: int. Step\n    :param c: int. End number\n    :return: sum. Sum of arithmetic progression\n    \"\"\"\n    sum = 0\n    for i in range(a, c + 1, d):\n        sum += i\n    return sum\n\n#Testing\ndef test_ap_sum():\n    assert ap_sum(1,5,2)==25\n\ntest_ap_sum()\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(first,last,increment):\n    \"\"\"\n    >>> ap_sum(1,5,2)==25\n    True\n    \"\"\"\n    return (first+(last+1)*increment)/2", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\n#solution\ndef ap_sum(a,b,step):\n    count = 0\n    for i in range(a,b):\n        count += i*step\n    return count\n\n#tests"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month==\"January\" or month==\"February\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month==\"January\" or month==\"March\" or month==\"May\" or month==\"July\" or month==\"August\" or month==\"October\" or month==\"December\":\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month==\"February\":\n        return False\n    elif month==\"April\":\n        return False\n    elif month==\"June\":\n        return False\n    elif month==\"September\":\n        return False\n    else:\n        return True\n\ncheck_monthnum(\"February\")==False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\n# + id=\"B7ix3b69kOSh\" colab_type=\"code\" colab={}\n# Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(month_name):\n    #your code here\n    return True if month_name in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"] else False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if (month == \"January\") or (month == \"February\") or (month == \"March\") or (month == \"April\") or (month == \"May\") or (month == \"June\") or (month == \"July\") or (month == \"August\") or (month == \"September\") or (month == \"October\") or (month == \"November\") or (month == \"December\"):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == \"February\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\nmonths = { \"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":31, \"September\":30, \"October\":31, \"November\":30, \"December\":31 }\n\ndef check_monthnum(month):\n    if months[month] == 28 and month == \"February\":\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(monthname):\n    monthname_lower = monthname.lower()\n    if monthname_lower in [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]:\n        return (True, 28)\n    elif monthname_lower in [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]:\n        return (True, 30)\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    return len(month)==3 and month.isdigit() and int(month) % 12 == 0\n\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    if '.' in text:\n        text = text[:-1]\n    if ',' in text:\n        text = text[:-1]\n    if '?' in text:\n        text = text[:-1]\n    if '!' in text:\n        text = text[:-1]\n    if text[-1] in string.lowercase:\n        return 'Found a match!'\n    return 'Did not find a match.'\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(input_word):\n    \"\"\"\n    Returns a string of text that matches the input_word\n    \"\"\"\n    result = \"\"\n    if input_word[-1].isalpha():\n        # If the last letter is an alphabet\n        result = \"Found a match!\"\n    else:\n        # If the last letter is punctuation\n        result = \"This isn't a word.\"\n    return result\n\ntext_match_word(\"python.\")```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nQ3. Write a function that determines if a string contains all uppercase letters.\n\n### Code:\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    if re.search(r'python[.,!?]', text, re.I):\n        print('Found a match!')\n    else:\n        print('Did not find a match.')\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    \"\"\"\n    Checks to see if the text ends with a word.\n    :param text: a string\n    :return: a string\n    \"\"\"\n    result = \"Could not find a word.\"\n    if len(text) > 10:\n        if text[-10:].isalpha():\n            if text[-10].isalpha():\n                result = \"Found a match!\"\n            elif text[-10] in string.punctuation:\n                result = \"Found a match!\"\n            else:\n                result = \"Could not find a word.\"\n        else:\n            result = \"Could not find a word.\"\n    return result\n\n\n# ## Problem 11\n# Write a function that checks if a number is a palindrome.", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    # test strings, return text for testing\n    text_list = text.split()\n    pattern = re.compile(r\"(\\w+\\.|\\w+!|\\w+?\\'s)+$\", re.IGNORECASE)\n    # for each word in the list\n    for i in text_list:\n        # if the last char in the word is a dot, then add a period to the end of the word\n        if i[-1] == '.':\n            i += '.'\n        # if the word ends with an exclamation point, add a period to the end of the word\n        elif i[-1] == '!':\n            i += '.'\n        # if the word ends with an apostrophe, remove the apostrophe and add a period to the end of the word\n        elif i[-1] == \"'\":\n            i = i[:-1] + '.'\n        # if the word ends with a period, add the string 'found a match' to the end of the word\n        elif i[-1] == '.':\n            i += \"found a match\"\n        # if the word ends with a string of characters with more than one character, then add a period to the end of the word\n        elif len(i[-1]) > 1:\n            i += '.'\n        # if the word doesn't end with a dot, a period, an exclamation point, an apostrophe, or a string of more than one character, then check if the word matches the pattern\n        else:\n            # if the pattern matches the word, add 'found a match' to the end of the word\n            if pattern.search(i):\n                i += \"found a match\"\n        # add the word to the list of words that were found\n        text_list[text_list.index(i)] = i\n    # create a string that contains each word and add ' ' in between each word\n    new_text = ' '.join(text_list)\n    return new_text", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    # TODO: write your code here\n    return \"Found a match!\"\n\n\n# TODO: write your tests here", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    if text.endswith('python'):\n        return \"Found a match!\"\n    else:\n        return False\n\n# Enter text\ntext = \"python\"\n\n# Calling the function", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\n# write your solution here", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    #TODO\n    pass\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(s):\n    match = re.search(r'.*\\b%s\\b.*' % s,text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not a match :('\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(inputString):\n\tif not inputString:\n\t\treturn 0\n\tif len(inputString)==1:\n\t\treturn 1\n\tcount=0\n\tif inputString[0]==inputString[-1]:\n\t\tcount=count+1\n\tfor i in range(len(inputString)-1):\n\t\tif inputString[i]==inputString[i+1] and inputString[i]==inputString[-1]:\n\t\t\tcount=count+1\n\treturn count", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for i in range(len(str)):\n        # comparing first and last characters\n        if str[i] == str[len(str)-1]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    counter = 0\n    for i in range(len(str)):\n        j = len(str)-1\n        while i<=j:\n            if str[i]==str[j]:\n                counter+=1\n                i+=1\n                j-=1\n            else:\n                break\n    return counter", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    length = len(string)\n    if length <= 1:\n        return 0\n\n    char = string[0]\n\n    count = 0\n\n    for i in range(length):\n        if string[i] == char:\n            count += 1\n        else:\n            if count != 0:\n                count += 1\n            else:\n                break\n            char = string[i]\n\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    # write your code here\n    count = 0\n    #print(s)\n    for i in range(len(s)):\n        if s[i] == s[-1]:\n            count+=1\n            if i+1 < len(s):\n                if s[i+1] == s[-1]:\n                    count+=1\n            if i+2 < len(s):\n                if s[i+1] == s[-1]:\n                    if s[i+2] == s[-1]:\n                        count+=1\n    return count", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    return sum(1 for i in range(len(string) - 1) if string[i] == string[i+1])\n\ndef test_count_Substring_With_Equal_Ends():\n    assert count_Substring_With_Equal_Ends('aba') == 4\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n\t#s = str(s)\n\t#print(s)\n\tif s == '':\n\t\treturn 0\n\tcount = 0\n\t#print(s)\n\tfor i in range(len(s)):\n\t\tif i == 0 or i == len(s)-1:\n\t\t\tif s[0] == s[len(s)-1]:\n\t\t\t\tcount += 1\n\t\telse:\n\t\t\tif s[i] == s[i-1] and s[i] == s[i+1]:\n\t\t\t\tcount += 1\n\treturn count\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    # write your code here\n    l=len(s)\n    count=0\n    for i in range(l):\n        for j in range(i,l):\n            if s[i]==s[j]:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    if len(string)==0:\n        return 0\n    return len(string) - len(set(string[1:-1]))\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[len(str)-1] and str[i] != str[i+1]:\n            count+=1\n    return count\n\n#assert count_Substring_With_Equal_Ends('aba') == 4\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n# my Solution\n# Time: O(sqrt(n))\n# Space: O(1)\ndef find_Divisor(lower, upper):\n    res = 0\n    for i in range(lower, upper + 1):\n        if i % lower == 0:\n            res = max(res, i // lower)\n    return res\n\n# Codechef Solution\n# Time: O(sqrt(n))\n# Space: O(1)\n# My Code\ndef find_Divisor(a, b):\n    lcm = a * b\n    for i in range(1, int(sqrt(lcm)) + 1):\n        if lcm % i == 0:\n            return i\n    return -1\n\n# The below function returns the lcm of two numbers\n# The below function returns the gcd of two numbers\n\n# Codechef Solution\n# Time: O(sqrt(n))\n# Space: O(1)\n\nfrom math import gcd\n\ndef find_lcm(a, b):\n    return a * b // gcd(a, b)\n\n# Time: O(sqrt(n))\n# Space: O(1)\n\n# the below function returns the gcd of two numbers\n\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    if b == 0:\n        return 0\n    elif a % b == 0:\n        return b\n    else:\n        return find_Divisor(b,a % b)\n\n\n#1) find the max occuring divisor in an interval\n\nl = [10,20,20,25,25,26,26,28,28,30,30]\n\nmax_occ_div = find_Divisor(20,26)", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(num1,num2):\n    div = 1\n    while div <= num1:\n        if num1 % div == 0:\n            num1 /= div\n            if num1 == num2:\n                return div\n        div += 1\n    return div\n\n\n# -\n\n# ## Question 2 :\n# #### Write a python function to find the length of the longest sub-sequence that satisfies the following conditions.\n# 1. In the sub-sequence every element is unique.\n# 2. Every element is an even number.\n# 3. The order of the sub-sequence is preserved.\n#\n#\n# assert length_of_subsequence(6,15) == 2\n\ndef length_of_subsequence(num1,num2):\n    if num1 < num2:\n        div = 1\n        while div <= num1:\n            if num1 % div == 0:\n                num1 /= div\n            div += 1\n        if num1 > num2:\n            div = 1\n            while div <= num2:\n                if num2 % div == 0:\n                    num2 /= div\n                div += 1\n    else:\n        div = 1\n        while div <= num2:\n            if num2 % div == 0:\n                num2 /= div\n            div += 1\n        if num2 > num1:\n            div = 1\n            while div <= num1:\n                if num1 % div == 0:\n                    num1 /= div\n                div += 1\n    l = []\n    for i in range(num1+1):\n        if num1 % i == 0:\n            l.append(i)\n    l.append(num1)\n    l.sort()\n    l.pop(0)\n    print(l)\n    a = 0\n    j = 0\n    while l[a] <= num1:\n        if num1 % l[a] == 0:\n            a += 1\n        j += 1\n    print(j)\n    if j == 1:\n        return 1\n    else:\n        return j\n\n\n# ## Question 3 :\n# #### Write a python function to find the length of the longest palindrome sub-sequence", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n# +\n\ndef find_Divisor(x, y):\n    divisors = []\n    for i in range(1, x+1):\n        if x % i == 0:\n            divisors.append(i)\n            divisors.append(x//i)\n    max_divisor = max(divisors)\n    return max_divisor\n\nfind_Divisor(2,2)\n# -\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(num, times):\n    for i in range(1,times+1):\n        if num % i == 0:\n            return i\n\n\nnum = 3\ntimes = 12\nfind_Divisor(num,times)", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n# Solution\ndef find_Divisor(start, end):\n    divisors = []\n    for i in range(start, end+1):\n        if end % i == 0:\n            divisors.append(i)\n    if divisors:\n        return max(divisors)\n    else:\n        return None\n\n\n# Test", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(low, high):\n    if low == 1:\n        return 1\n    elif low == high:\n        return low\n    else:\n        mid = int((low + high) / 2)\n        if mid <= high:\n            if mid % low == 0:\n                return low\n            elif mid % high == 0:\n                return high\n            else:\n                return find_Divisor(low, mid)\n        else:\n            return find_Divisor(mid, high)\n\n\ndef test():\n    testCases = [(2, 2), (3, 6), (15, 21), (1, 1000), (5, 100), (1, 10000000), (5, 1000000), (10, 10000000), (5, 20), (1000, 10000), (100000, 1000000), (1000000, 10000000), (10000000, 100000000)]\n    for i in testCases:\n        print(find_Divisor(i[0], i[1]))\n\n\ntest()", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    lis = []\n    for i in range(a, b+1):\n        if (a % i == 0):\n            lis.append(i)\n    return max(lis)\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n#05.12.2016\ndef find_Divisor(a,b):\n    largest_divisor = 0\n    if a%b == 0:\n        largest_divisor = b\n    elif b%a == 0:\n        largest_divisor = a\n    else:\n        largest_divisor = a*b/gcd(a,b)\n    return largest_divisor\n    \ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start,end):\n    if start == end:\n        return start\n    max_d = start\n    for d in range(start+1,end+1):\n        if start%d == 0 and end%d == 0:\n            if d > max_d:\n                max_d = d\n    return max_d\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(l):\n    return l[0] + l[1] + l[2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(arr):\n    # find sum\n    l = len(arr)\n    s = sum(arr)\n\n    # sort the list\n    arr.sort()\n\n    # find the smallest 3 numbers\n    #return sum(arr[:3])\n    return sum(arr[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\nfrom random import randint\ndef sum_three_smallest_nums(nums):\n    return sum(sorted(nums)[:3])\n\n\ndef test_sum_three_smallest_nums():\n    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\ndef test_sum_three_smallest_nums_rand():\n    for i in range(100):\n        # test with random numbers\n        test_list = [randint(1,100) for _ in range(randint(5,20))]\n        assert sum_three_smallest_nums(test_list) == sum(sorted(test_list)[:3])\n\ndef test_sum_three_smallest_nums_short_list():\n    assert sum_three_smallest_nums([2,100,3,4]) == 2\n\ndef test_sum_three_smallest_nums_no_smallest():\n    assert sum_three_smallest_nums([2,100,3,4]) == 2\n\ndef test_sum_three_smallest_nums_no_input():\n    assert sum_three_smallest_nums([]) == 0\n\ndef test_sum_three_smallest_nums_no_numbers():\n    assert sum_three_smallest_nums(['a']) == 0", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return nums[:3].sum()\n\ndef test_sum_three_smallest_nums():\n    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n    assert sum_three_smallest_nums([22,33,44,55,66,77,88,99]) == 66\n    assert sum_three_smallest_nums([1,2,3,4,5,6,7]) == 3\n\ndef test_sum_three_smallest_nums_big():\n    assert sum_three_smallest_nums([1,2,3,4,5,6,7,8,9,10]) == 30\n    assert sum_three_smallest_nums([99,88,77,66,55,44,33,22,11,1]) == 66\n    assert sum_three_smallest_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 30", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(num_list):\n    sorted_list = sorted(num_list)\n    return sorted_list[:3][0] + sorted_list[:3][1] + sorted_list[:3][2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\n# Write your code here\ndef sum_three_smallest_nums(arr):\n    arr.sort()\n    return sum(arr[0:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(lst):\n    lst.sort()\n    if len(lst)>3:\n        return sum(lst[:3])\n    else:\n        return sum(lst)\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(arr):\n    return sorted(arr)[:3]\n\ndef test_sum_three_smallest_nums(arr,expected):\n    assert sum_three_smallest_nums(arr) == expected\n\n\ntest_sum_three_smallest_nums([10,20,30,40,50,60,7],37)\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    list_sorted = sorted(nums)\n    return list_sorted[0]+list_sorted[1]+list_sorted[2]\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set):\n    set_list = []\n    for item in set:\n        set_list.append(item)\n    return tuple(set_list)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\n# -----------------------------------------------------------------\ndef set_to_tuple(set):\n    # Write your code here!\n    return tuple(sorted(set))\n\n# -----------------------------------------------------------------\ndef set_to_tuple2(set):\n    # Write your code here!\n    return tuple(set)\n\n# -----------------------------------------------------------------\nset_to_tuple.assert_equals(set_to_tuple({1, 2, 3, 4, 5}), (1, 2, 3, 4, 5))\nset_to_tuple2.assert_equals(set_to_tuple({1, 2, 3, 4, 5}), (1, 2, 3, 4, 5))\n# -----------------------------------------------------------------\n# set_to_tuple.assert_equals(set_to_tuple(1), (1, ))\n# set_to_tuple.assert_equals(set_to_tuple(set([1, 2, 3])), (1, 2, 3))\n# -----------------------------------------------------------------", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_):\n    return tuple(set_)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_var):\n    set_tuple = tuple(set_var)\n    return set_tuple\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(s)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n\n# Tests", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nimport unittest\n\n\ndef set_to_tuple(input_set):\n    sorted_list = sorted(input_set)\n    return tuple(sorted_list)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_a):\n    for i in set_a:\n        yield i\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_of_items):\n    return tuple(set_of_items)\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef set_to_tuple(set_of_items):\n    return tuple(set_of_items)\n\n# Enter the set of items\nset_of_items = {1, 2, 3, 4, 5}\n\n# Calling the function", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set_to_convert):\n    \"\"\"\n    Convert a given set into ordered tuples.\n    \"\"\"\n    return tuple(set_to_convert)\n\n#Below is an example usage:\n\n# Enter the set\nset_to_convert = {1, 2, 3, 4, 5}\n\n# Calling the function"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\n# Write your code here", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\n# Create a function to find the smallest range that includes at-least one element from each of the given arrays\ndef find_minimum_range(arrays):\n    start = float('inf')\n    end = -float('inf')\n    for array in arrays:\n        for value in array:\n            start = min(start, value)\n            end = max(end, value)\n    return (start, end)\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    min_range = None\n    for first_element in arr:\n        for second_element in arr:\n            if first_element == second_element: continue\n            if second_element > first_element:\n                if min_range is None:\n                    min_range = second_element - first_element\n                else:\n                    min_range = min(min_range, second_element - first_element)\n    return min_range\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrays):\n    # write your code here\n    # assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    if not arrays:\n        return (None, None)\n    min_val = 1000000000000000000\n    max_val = 0\n    for arr in arrays:\n        min_val = min(min_val, min(arr))\n        max_val = max(max_val, max(arr))\n\n    return (min_val, max_val)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(a):\n    min_range = a[0][0] - a[-1][-1]\n    for i in a:\n        if i[0] < min_range:\n            min_range = i[0]\n        if i[-1] > min_range:\n            min_range = i[-1]\n    return (min_range, min_range)\n\n#assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    min_range = float('inf')\n    min_elem = float('inf')\n    for arr_ in arr:\n        min_elem = min(min_elem, min(arr_))\n        max_elem = max(max_elem, max(arr_))\n        min_range = min(min_range, max_elem - min_elem)\n    return min_range\n\ndef test():\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    print(\"ALL TEST PASSED\")\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    if not arr:\n        return None\n\n    minimum_start = max(arr[0])\n    maximum_start = min(arr[0])\n\n    for num in arr[1:]:\n        minimum_start = min(minimum_start, num[0])\n        maximum_start = max(maximum_start, num[0])\n    \n    return (minimum_start, maximum_start)\n\n\narr = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    min_range = 10**10\n    max_range = -10**10\n    for array in arrays:\n        for num in array:\n            if num > max_range:\n                max_range = num\n            if num < min_range:\n                min_range = num\n    return (min_range, max_range)\n\n# TODO: fix the bug!", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nimport itertools\n\ndef find_minimum_range(*args):\n    max_set = None\n    min_set = None\n    for a in args:\n        min_set = set(a)\n        if not max_set:\n            max_set = min_set\n        else:\n            max_set = max_set.intersection(min_set)\n            min_set = min(min_set, max_set)\n    min_range = min(max_set.difference(min_set))\n    max_range = max(max_set.difference(min_set))\n    return min_range, max_range\n\ndef main():\n    print find_minimum_range([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [100, 200, 300, 400, 500], [1000, 2000, 3000, 4000, 5000])\n    print find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    '''\n    Input: Array of arrays\n    Output: The minimum range that includes at-least one element from each of the given arrays\n    '''\n    array_set = set()\n    for array in arrays:\n        for num in array:\n            array_set.add(num)\n\n    start = max(array_set)\n    end = min(array_set)\n    return (start, end)\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    '''\n    s -- input string\n    '''\n    s_list = list(s)\n    n_dig = 0\n    n_let = 0\n    for i in s_list:\n        if i.isdigit():\n            n_dig += 1\n        else:\n            n_let += 1\n    return (n_dig, n_let)\n# test", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str):\n    a=0\n    b=0\n    for i in range(0,len(str)):\n        if (str[i].isdigit()):\n            a+=1\n        elif(str[i].isalpha()):\n            b+=1\n    return (a,b)\n\ndig_let(\"python\")\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(str):\n    a=str.split()\n    b=str.split(\" \")\n    c=[]\n    for i in a:\n        c.append(len(i))\n    d=[]\n    for i in b:\n        d.append(len(i))\n    print(c)\n    print(d)\n    return (c,d)\n\n\n\ndef main():\n    str = \"aapppp\"\n    dig_let(str)\n    return\n\nmain()\n\n# +", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(a):\n    digit=0\n    letter=0\n    for i in a:\n        if i.isdigit():\n            digit+=1\n        else:\n            letter+=1\n    return (digit,letter)", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    \"\"\"\n    Write a function to calculate the number of digits and letters in a string.\n    :param s: string\n    :return: number of digits and letters in the string\n    \"\"\"\n    return (len(s.isdigit()),len(s.isalpha()))\n\n#Below is an example usage:\n\nimport re\n\ndef dig_let(s):\n    \"\"\"\n    Write a function to calculate the number of digits and letters in a string.\n    :param s: string\n    :return: number of digits and letters in the string\n    \"\"\"\n    return (len(s.isdigit()),len(s.isalpha()))\n\n# Enter the string\ns = \"python\"\n\n# Calling the function", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    return len(s), sum(1 for c in s if c.isalpha())", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n    letters = 0\n    digits = 0\n    for letter in string:\n        if letter.isdigit():\n            digits +=1\n        elif letter.isalpha():\n            letters +=1\n    return(digits, letters)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n    string = string.lower()\n    return (len(string), len([c for c in string if c.isalpha()]))\n\n\n# -\n\ndig_let(\"Python\")", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    \"\"\"\n    Returns the number of digits and letters in a string.\n    \"\"\"\n    num_digit = 0\n    num_letter = 0\n    for i in string:\n        if i.isdigit():\n            num_digit += 1\n        else:\n            num_letter += 1\n    return (num_digit, num_letter)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\nimport re\ndef dig_let(string):\n    s=re.sub('[^a-zA-Z]+',' ',string)\n    count=0\n    for letter in s:\n        if letter.isalpha():\n            count+=1\n    count=count+len(s)\n    return (len(s),count)"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a,b):\n    x = []\n    for i in range(a,b+1):\n        for j in range(2,int(i**(1/2))+1):\n            if i % j == 0:\n                x.append(i)\n                break\n    \n    x1 = list(set(x))\n    c = 0\n    for i in x1:\n        if i % 2 != 0:\n            c = c + 1\n            \n    return c\n\n# Driver code\na = 5\nb = 100", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(first,last):\n    count = 0\n    for i in range(first,last+1):\n        if i%2 != 0:\n            temp = 0\n            for j in range(1,i+1):\n                if i%j == 0:\n                    temp +=1\n            if temp%2 != 0:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(x,y):\n    count=0\n    for i in range(x,y+1):\n        for j in range(2,int(i/2)+1):\n            if(i%j==0 and j%2!=0):\n                count=count+1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(x,y):\n    answer = 0\n    for i in range(x,y+1):\n        if len(list(set(reduce(list.__add__,[set(str(i).split('')) for i in range(i,i**2+1) if len(set(str(i)))>1]) - set(\"10\"))))%2:\n            answer += 1\n    return answer", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\n# Function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(low, high):\n    count = 0\n    for i in range(low,high+1):\n        # Finding odd factors of i\n        odd_factors = []\n        for j in range(1, i + 1):\n            if i % j == 0:\n                if j % 2 == 1:\n                    odd_factors.append(j)\n\n        # Checking if all the factors of i are odd\n        if len(odd_factors) == 0:\n            count += 1\n\n    return count\n\n\n# Driver code", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(min_number,max_number):\n\n    odd_list = []\n    for i in range(min_number,max_number+1):\n        if i % 2 == 1:\n            square = i ** 2\n            if square % 2 == 1:\n                odd_list.append(i)\n\n    print(odd_list)\n    return len(odd_list)\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(min, max):\n    return sum(i for i in range(min,max+1) if i%2 != 0 and i%3 != 0 and i%5 != 0)\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    square_sum = 0\n    num_odd_fact = 0\n    for i in range(start, end + 1):\n        if i % 2 != 0:\n            square_sum += i\n            num_odd_fact += 1\n    return num_odd_fact\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(N, M):\n    count = 0\n    for i in range(N, M+1):\n        if i % 2 == 1:\n            for j in range(i, M+1, i):\n                if j % i == 0:\n                    count += 1\n    return count\n\n#Main Code", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n# Solution\n\n# Solution\ndef count_Odd_Squares(a,b):\n    count = 0\n    for i in range(a,b):\n        for j in range(i+1,b+1):\n            if i*i+j*j == (j+1)*(j+1):\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\n# https://www.youtube.com/watch?v=qYk6lJHe-v8&list=PL6gx4Cwl9DGAcbMi1sH6oAMk4IP7EZ2Z2&index=2&t=0s\n\n# this one is also a good one to do\n\n\ndef diff_consecutivenums(l):\n    \"\"\"\n    :param l: list\n    :return: list\n    \"\"\"\n    diff_list = []\n    for i in range(len(l) - 1):\n        diff_list.append(l[i + 1] - l[i])\n    return diff_list\n\n\n# def diff_consecutivenums(l):\n#     diff_list = []\n#     for i in range(len(l) - 1):\n#         diff_list.append(l[i + 1] - l[i])\n#     return diff_list\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    nums.sort()\n    diff_arr = []\n    for i in range(len(nums)):\n        if i == 0:\n            diff = nums[i] - nums[i+1]\n            diff_arr.append(diff)\n        else:\n            if nums[i] - nums[i-1] == 1:\n                diff = nums[i] - nums[i+1]\n                diff_arr.append(diff)\n            elif nums[i] - nums[i-1] == 0:\n                diff = nums[i] - nums[i+1]\n                diff_arr.append(0)\n            else:\n                diff = nums[i] - nums[i+1]\n                diff_arr.append(diff)\n    return diff_arr\n\nnums = [1, 1, 3, 4, 4, 5, 6, 7]", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(numbers):\n    diffs = [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]\n    return diffs\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(list_):\n    result = []\n    for i in range(len(list_)-1):\n        result.append(list_[i+1]-list_[i])\n    return result\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n#def diff_consecutivenums(arr):\n#    return [i-j for i,j in zip(arr,arr[1:])]\ndef diff_consecutivenums(arr):\n    return [j-i for i,j in zip(arr,arr[1:])]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\nimport itertools as it\n\ndef diff_consecutivenums(nums):\n    \"\"\"\n    Return a list of the differences between two consecutive numbers in the list.\n    \"\"\"\n    prev = None\n    res = [nums[0]]\n    for i in range(1, len(nums)):\n        curr = nums[i]\n        diff = curr - prev\n        if diff == 0:\n            res.append(0)\n        else:\n            res.append(diff)\n        prev = curr\n    return res\n\ndef diff_consecutivenums2(nums):\n    \"\"\"\n    Return a list of the differences between two consecutive numbers in the list.\n    \"\"\"\n    return [x - y for x, y in zip(nums[:-1], nums[1:])]\n\ndef diff_consecutivenums3(nums):\n    \"\"\"\n    Return a list of the differences between two consecutive numbers in the list.\n    \"\"\"\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n\ndef diff_consecutivenums4(nums):\n    \"\"\"\n    Return a list of the differences between two consecutive numbers in the list.\n    \"\"\"\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n\ndef diff_consecutivenums5(nums):\n    \"\"\"\n    Return a list of the differences between two consecutive numbers in the list.\n    \"\"\"\n    return [x-y for x,y in zip(nums[:-1],nums[1:])]\n\ndef diff_consecutivenums6(nums):\n    \"\"\"\n    Return a list of the differences between two consecutive numbers in the list.\n    \"\"\"\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n\ndef diff_consecutivenums7(nums):\n    \"\"\"\n    Return a list of the differences between two consecutive numbers in the list.\n    \"\"\"\n    return [x-y for x,y in zip(nums[:-1],nums", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(lst):\n    lst2 = []\n    for i in range(0, len(lst), 2):\n        if i < (len(lst)-1):\n            lst2.append(lst[i+1] - lst[i])\n        else:\n            break\n    return lst2", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    diff = []\n    for i in range(len(nums)-1):\n        diff.append(nums[i+1]-nums[i])\n    return diff\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    diff_list = []\n    for i in range(1, len(nums)):\n        diff_list.append(nums[i]-nums[i-1])\n    return diff_list\n\n# print(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]))\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n\tnums_len = len(nums)\n\tans = []\n\tfor i in range(nums_len):\n\t\tif i+1 == nums_len or nums[i] + 1 != nums[i+1]:\n\t\t\tans.append(nums[i] + 1)\n\treturn ans\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    return n + zigzag(n - 1, k - 1)\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    return sum(range(1, n)) if k % 2 == 0 else sum(range(n - 1, -1, -1))\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    total = 1\n    for i in range(n):\n        if i % 2 == 0:\n            total += k\n        else:\n            total += k - 1\n    return total\n\n\n# Big O\n# Time complexity: O(n)\n# Space complexity: O(1)", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\nimport unittest\n\ndef zigzag(n, k):\n    if n == 1 or n == 2:\n        return n\n    if n % 2 == 0:\n        return zigzag(n//2, k+1) + zigzag(n//2+1, k)\n    else:\n        return zigzag((n-1)//2, k+1) + zigzag((n-1)//2+1, k)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if k == 0:\n        return 0\n    if n % 2 == 1:\n        return zigzag(n - 1, k - 1)\n    else:\n        return zigzag(n - 1, k) + zigzag(n - 2, k)\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if k >= n//2:\n        return (n-1)*(k-n//2)\n    else:\n        return (n-1)*(k+n//2)\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\nimport numpy as np\n\ndef zigzag(n, k):\n    return np.binomial(n + k, k) // (np.binomial(n, k))\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    \"\"\"\n    n is the total number of entries\n    k is the number of possible entries at one time\n    \"\"\"\n    if k == 0:\n        return 0\n    if n == 1:\n        return 1\n    return zigzag(n - 1, k - 1) + zigzag(n - 1, k)\n\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if k == 1:\n        return 1\n    elif k == n:\n        return n\n    elif k > 1 and k < n - 1:\n        return zigzag(n, k - 1) + zigzag(n, k + 1)\n    else:\n        return 0\n\n# Test", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n == 1:\n        return 0\n    elif k == 0:\n        return n\n    elif k > 0 and k < n:\n        if k % 2 == 0:\n            return zigzag(n - k, k / 2) + n + 1\n        else:\n            return zigzag(n - k - 1, k / 2) + n + 1\n    else:\n        return 0"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width,height):\n    return int(width*height)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_squares(height, width):\n    return height*width\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(width, length):\n    return width * length\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a,b):\n    return a*b\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    counter = 0\n    for i in range(width):\n        for j in range(height):\n            if i**2 + j**2 == 1:\n                counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(width, height):\n    return (width * height)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n, m):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if (i**2 + j**2) % 10 == 0:\n                count += 1\n\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return sum(map(lambda x: x*x, range(1, n+1))) + sum(map(lambda x: x*x, range(1, m+1)))", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# count the squares in a rectangle \ndef count_squares(n,m):\n    total = 0\n    for i in range(n):\n        for j in range(m):\n            total = total + 1\n    return total\n\n# Test Cases\n# assert count_Squares(4,3) == 20\n\n# Driver Code\nn = 4\nm = 3"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    d = [0] * (n+1)\n    d[0] = 1\n    for i in range(1, n+1):\n        for j in range(1, min(i, n)+1):\n            d[i] += d[j-1]\n    return d[n]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(N):\n    \"\"\"\n    :type N: int\n    :rtype: int\n    \"\"\"\n    if N == 0:\n        return 1\n\n    dp = [0 for _ in range(N + 1)]\n    dp[0] = 1\n\n    for i in range(1, N + 1):\n        for j in range(0, i):\n            dp[i] += dp[j]\n\n    return dp[N]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    # NOTE: the base case is the one for n = 1\n    #    ie. the only possible sum to generate the empty set is 0\n    if n == 1:\n        return 1\n    # NOTE: the recursive case\n    #    the length n is given, so any sum of 0 up to n-1 can be generated\n    #    so add the previous sum (0 up to n-2) and the current sum (n-1)\n    #    to get the number of ways for n\n    return find_ways(n-1) + find_ways(n-2)\n\n# NOTE: this is to test the code", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(length):\n    if length == 1:\n        return 1\n    sum_arr = [0]\n    for i in range(1, length+1):\n        sum_arr.append(sum(sum_arr[j] for j in range(i)) + i)\n    dp = [0] * (length+1)\n    dp[0] = 1\n    for i in range(1, length+1):\n        for j in range(1, i+1):\n            if sum_arr[i] - sum_arr[j-1] >= 0:\n                dp[i] += dp[j-1]\n    return dp[length]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(N):\n    T = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        T[i][0] = 1\n\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            T[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\n    return T[N][N]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(1, i):\n            dp[i] += dp[j - 1]\n    return dp[n]\n\n# the above one has time complexity of O(n^2), which is too large.\n\ndef find_ways(n):\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            dp[i] += dp[j]\n    return dp[n]\n\n# the above one has time complexity of O(n^2), which is too large.\n\n# a better way\n# time complexity: O(n^2)\n# space complexity: O(1)\ndef find_ways(n):\n    return sum(range(1, n + 1) // k for k in range(1, n + 1))\n\n# test case", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\nimport numpy as np\n\ndef find_ways(n):\n\n    # init array\n    dp = [[0 for i in range(n+1)] for j in range(2)]\n\n    # fill first row\n    dp[0][0] = 1\n    for i in range(n+1):\n        dp[1][i] = dp[0][i-1]\n\n    # fill all rows\n    for i in range(2, n+1):\n        for j in range(1, i):\n            dp[0][j] = dp[0][j-1]\n            dp[1][j] = dp[1][j-1] + dp[0][j]\n\n    return dp[1][n]\n\ndef find_ways_rec(n):\n\n    # check base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # call recursive function\n    return find_ways_rec(n-1) + find_ways_rec(n-2)\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    dp = [[0] * (n + 1) for _ in xrange(n + 1)]\n\n    for i in xrange(1, n + 1):\n        for j in xrange(i - 1, -1, -1):\n            if j == 0:\n                dp[i][j] = 1\n            elif dp[j + 1][j] > 0:\n                dp[i][j] = dp[j][j] + dp[i - 1][j + 1]\n\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nimport math\n\ndef find_ways(n):\n    if n == 0:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n\n    return dp[n]\n\n\ndef main():\n    print(find_ways(4))\n\n\nmain()", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(n):\n    num = 0\n    for i in range(1,n+1):\n        num += find_ways(i-1)\n    return num\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    binary = \"\"\n    for i in s:\n        if i.isdigit():\n            binary = binary + i\n    if len(binary) == 0:\n        return False\n    else:\n        if len(binary) % 4 != 0:\n            return False\n        else:\n            for i in range(len(binary)):\n                if binary[i] == \"1\":\n                    binary[i] = \" \"\n                else:\n                    binary[i] = \"1\"\n            for i in range(len(binary)):\n                if binary[i] == \" \":\n                    binary[i] = \"0\"\n                else:\n                    binary[i] = \" \"\n            for i in range(len(binary)):\n                if binary[i] == \"01\":\n                    binary[i] = \"0\"\n                else:\n                    binary[i] = \"1\"\n            for i in range(len(binary)):\n                if binary[i] == \"10\":\n                    binary[i] = \"0\"\n                else:\n                    binary[i] = \"1\"\n            if binary == s:\n                return True\n            else:\n                return False\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n#Solution:\n\ndef check(string):\n    if string.find(\"1\") == -1:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n\n#print check(\"01010101010\")", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    if string.count(\"0\") == len(string) and string.count(\"1\") == len(string) and string[0] == string[1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    s = str(s)\n    flag = True\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == s[i+1]:\n            pass\n        else:\n            flag = False\n            break\n    if flag:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    count = 0\n    for i in s:\n        if(i == '0' or i == '1'):\n            count += 1\n        else:\n            return \"No\"\n    return \"Yes\"\n\ndef check_negative(s):\n    count = 0\n    for i in s:\n        if(i == '-'):\n            count += 1\n        else:\n            return \"No\"\n    return \"Yes\"\n\ndef check_mixed(s):\n    count = 0\n    for i in s:\n        if(i == '0' or i == '1' or i == '-'):\n            count += 1\n        else:\n            return \"No\"\n    return \"Yes\"\n\ndef check_both(s):\n    count = 0\n    for i in s:\n        if(i == '0' or i == '1'):\n            count += 1\n        elif(i == '-'):\n            count += 1\n        else:\n            return \"No\"\n    return \"Yes\"\n\ndef check_special(s):\n    count = 0\n    for i in s:\n        if(i == '0' or i == '1' or i == '-'):\n            count += 1\n        elif(i == '_'):\n            count += 1\n        else:\n            return \"No\"\n    return \"Yes\"", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(binary_string):\n    n = len(binary_string)\n    if n % 8:\n        return \"No\"\n    if len(set(binary_string)) != 2:\n        return \"No\"\n    if set(binary_string).issuperset(\"01\"):\n        return \"Yes\"\n    return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    if all(c in \"01\" for c in s):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(num):\n    if (num.count(\"0\") == len(num) - 1 or num.count(\"1\") == len(num) - 1) or num == \"\":\n        return \"Yes\"\n    return \"No\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    if all([c in ['0','1'] for c in s]):\n        return \"Yes\"\n    return \"No\"\n\n# This code is contributed by <NAME>", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n# your code here\n\nstring_1 = \"01010101010\"\n# string_1 = input(\"Please enter a string: \")\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(str1):\n    # Write your code here\n    return len(str1) - str1.count(str1[0])\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    n = len(string)\n    last = 0\n    for i in range(n-1):\n        if string[i] == string[i+1]:\n            continue\n        else:\n            last = i+1\n    return last + 1\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(str):\n    n = len(str)\n    ans = n\n    for i in range(n):\n        for j in range(n):\n            if j != i and str[i] == str[j]:\n                str = str.replace(str[i], ' ')\n                n = len(str)\n                ans = min(ans, n)\n                break\n    return ans\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    unique_chars = set(s)\n    min_length = len(unique_chars)\n    for char in unique_chars:\n        max_count = 1\n        count = 0\n        while char*max_count <= len(s):\n            if s.count(char*max_count) == max_count:\n                count = max_count\n                max_count += 1\n            else:\n                max_count += 1\n        if count < min_length:\n            min_length = count\n    return min_length\n\n# print minimum_Length(input())", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n\t# Your code goes here.\n\treturn len(s)\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    # TODO: Write your function here\n    return len(string)\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\nfrom collections import Counter\n\ndef minimum_Length(str):\n    if len(str) == 0:\n        return 0\n    str_count = Counter(str)\n    if str_count['a'] == 0 or str_count['b'] == 0 or str_count['c'] == 0 or str_count['d'] == 0:\n        return 0\n    str_count.popitem(last=False)\n    return min(str_count.keys())\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    # code goes here\n    count_set = set()\n    count_dict = {}\n    min_length = len(string)\n    for i in range(len(string)):\n        if i in count_set:\n            continue\n        else:\n            count_set.add(i)\n            count_dict[i] = 1\n            min_length = min(len(string), len(count_set))\n            count_set.remove(i)\n            count_dict.pop(i)\n\n    return min_length\n\ndef main():\n    # test case: minimum_Length(\"mnm\")\n    string = input()\n    print(minimum_Length(string))\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    return len([c for c in string if c not in 'aeiouAEIOU'])\n\ndef test_minLength():\n    assert minimum_Length(\"mnm\") == 1\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, num, k):\n    for i in range(len(arr)):\n        if arr[i] == num and k > 0:\n            k -= 1\n            if k == 0:\n                return arr[i]\n    return -1\n\n\narr = [1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4]\n#print(first_Element(arr,2,1))\n#print(first_Element(arr,2,2))", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\n# Write your code here\ndef first_Element(arr, k, n):\n    count = 0\n    for i in arr:\n        if(i == n):\n            count = count + 1\n    if(count == k):\n        return n\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, pos):\n    pos = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == pos:\n            count += 1\n        else:\n            count = 0\n            pos = arr[i]\n        if count == k:\n            return pos\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,n):\n    if n == 0:\n        return arr[0]\n    else:\n        return first_Element(arr,k,n-1)\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\nimport math\n\ndef first_Element(A, k, i):\n\n    start = i\n    end = len(A) - 1\n\n    while start <= end:\n        mid = (start + end)//2\n        if A[mid] == k:\n            return mid\n        elif A[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    if A[end] == k:\n        return end\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,k,element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n        if count == k:\n            return arr[i]\n    return -1\n\ndef test_first_Element():\n    arr = [0,1,2,3,4,5]\n    assert first_Element(arr,6,1) == 0\n    assert first_Element(arr,2,0) == -1\n    assert first_Element(arr,2,2) == 2\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, k, n):\n    if k == 1:\n        return arr[0]\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[0]:\n                k -= 1\n                if k == 0:\n                    return arr[i]\n        if k == 0:\n            return arr[i]\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, k, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count = 0\n            for j in range(i+1,len(arr)):\n                if arr[j] == element:\n                    count += 1\n            if count == k:\n                return arr[i]\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(nums,k,i):\n    if i == k:\n        return nums[i]\n    else:\n        return first_Element(nums,k,i+1)\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,n,k):\n    for i in range(n):\n        if arr[i] == k:\n            return arr[i]\n"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_characters(s):\n    # TODO: finish this function\n    #      it should return True if all the characters in the string are unique\n    #      and return False otherwise\n    unique = True\n    for ch in s:\n        if s.count(ch) > 1:\n            unique = False\n            break\n    return unique\n\n\ndef test_unique_characters():\n    assert unique_characters('aba') == False\n    assert unique_characters('ab') == True\n    assert unique_characters('a') == False\n    assert unique_characters('a' * 10000000) == True\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str):\n    x = set(str)\n    if len(x) == len(str):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    length = len(set(string))\n    if length == len(string):\n        return True\n    return False\n\n# using list comprehension\ndef unique_Characters(string):\n    return len(set(string)) == len(string)\n\ndef unique_Characters(string):\n    if len(set(string)) == len(string):\n        return True\n    return False", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    if len(string) == 1:\n        return True\n    flag = True\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                flag = False\n                break\n    return flag\n\n\n# Test Cases", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str):\n    str = str.lower()\n    if str.isalpha() == True:\n        count = 0\n        for i in str:\n            if str.count(i) > 1:\n                count += 1\n        if count == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\n# +\n#Write a python function to check whether a string is palindrome or not.", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str):\n    '''\n    Check whether all characters in a string are unique\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n\tseen = set()\n\tif len(string) == 0:\n\t\treturn False\n\tfor i in string:\n\t\tif i in seen:\n\t\t\treturn False\n\t\tseen.add(i)\n\treturn True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    \"\"\"\n\n    :param string:\n    :return:\n    \"\"\"\n    if len(string) == 1:\n        return True\n    hash_Set = set()\n    return all(i not in hash_Set or i == string[0] for i in string[1:])\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(s):\n    if len(s) < 2:\n        return True\n    elif len(set(s)) == len(s):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(s):\n    if len(s) == len(set(s)):\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(l, n):\n    new_l = []\n    for r in l:\n        new_r = [x for i, x in enumerate(r) if i != n]\n        new_l.append(new_r)\n    return new_l\n\n# We can also use comprehension to do the same thing:\nremove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n\n# +\n# Write a function to remove all the vowels from a given string.", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, index):\n    new_lst = []\n    for l in lst:\n        new_lst.append(l[:index] + l[index+1:])\n    return new_lst\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(matrix, n):\n    return [\n        [item[i] for item in matrix] for i in range(len(matrix[0])) if i != n\n    ]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(mat, n):\n    new_mat = []\n    for row in mat:\n        new_row = row[n:]\n        new_mat.append(new_row)\n    return new_mat\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(data, col):\n    new_data = []\n    for row in data:\n        new_data.append(row[col:])\n    return new_data", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(input_list, column_to_remove):\n    return [remove_column(row, column_to_remove) for row in input_list]\n\ndef remove_column(input_list, column_to_remove):\n    return [row[:column_to_remove] + row[column_to_remove + 1:] for row in input_list]\n\ndef remove_column(input_list, column_to_remove):\n    return [row[:column_to_remove] + row[column_to_remove + 1:] for row in input_list]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(l, index):\n    \"\"\"Return a new list of lists, where the ith column is removed from the original list of lists.\"\"\"\n    for row in l:\n        del row[index]\n    return l\n\n\ndef remove_column(l, index):\n    \"\"\"Return a new list of lists, where the ith column is removed from the original list of lists.\"\"\"\n    new_l = []\n    for row in l:\n        new_row = []\n        for val in row:\n            if val == index:\n                continue\n            new_row.append(val)\n        new_l.append(new_row)\n    return new_l\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows, col):\n    return [row[:col] + row[col + 1:] for row in rows]\n\ndef remove_column(rows", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(l, i):\n    new_l = []\n    for i in range(len(l)):\n        new_l.append([j[i] for j in l])\n    new_l.pop(i)\n    return new_l\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n# test1\ndef remove_column(l,column):\n    new_l=[]\n    for i in l:\n        new_l.append(i[column:])\n    return new_l"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, d, n):\n    \"\"\"\n    >>> tn_ap(1,5,2)==9\n    True\n    \"\"\"\n    assert d > 0\n    assert n >= 0\n    return a + (d * n)\n\n# TEST CODE:\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, n, t):\n    return a+(t-1)*n\n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n,a,d):\n    return d*n+a\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,n,t):\n    sum=0\n    i=1\n    while i<n:\n        sum+=t\n        i+=1\n    return a+sum\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,n,d):\n    \"\"\"Return the t-nth term of arithemetic progression\n    with first term a, common difference d, and number of terms n.\n    \"\"\"\n    i = 1\n    while i<n:\n        i += 1\n        yield a + d*i\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    return a+n*d\n\n\n# tests\ntn_ap(1,5,2)==9\ntn_ap(0,5,3)==8\ntn_ap(10,5,2)==23\ntn_ap(1,5,0)==1\n\n# +\n# Question 3", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    if n==1:\n        return a\n    else:\n        return a+tn_ap(a,d,n-1)\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n\tx=0\n\tfor i in range(1,n+1):\n\t\tx=a+x*d\n\treturn x", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\nimport sys\n\ndef tn_ap(x,n,a):\n    return (x+(n-1)*a)\n\ndef test():\n    test_cases = [\n        (1, 5, 2, 9),\n        (1, 3, 2, 7),\n        (100, 200, 10, 2000),\n        (10000, 20000, 1000, 200000),\n        (10000, 20000, 1000, 2000000),\n    ]\n    for t in test_cases:\n        assert tn_ap(t[0], t[1], t[2]) == t[3]\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(n, a, t):\n    result = a+(n-1)*t\n    return result\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    \"\"\"\n    A circle has 360 degrees and 8 quadrants, 360/4 = 90 degrees/quadrant\n    Given the radius, calculate the number of degrees to be 8\n    Multiplied the angle by 2 to get a full circle\n    We can then divide by 360 and multiply by the radius to get the total number of rectangles\n    \"\"\"\n    n = 360/4 * r\n    n = n/360 * r\n    return n\n\n# test\n#assert count_Rectangles(2) == 8\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n\tn = int(input())\n\treturn n*(3*n-1) // 2\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    '''\n    Write a function to count the number of rectangles in a circle of radius r.\n    '''\n    return 2 * r * r\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    return 2 * r ** 2\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n#My code\ndef count_Rectangles(r):\n    return 3*(r+1)*(r+2)//2\n\n#Answer Code\ndef count_Rectangles(r):\n    return 3*r*(r+1)*(r+2)//6\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n# Function to find number of rectangles in circle\ndef count_Rectangles(radius):\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop till radius\n    for i in range(radius):\n        # Check if the length is odd or not\n        if i % 2 == 1:\n            # Add one to the count if it is odd\n            count += 1\n\n    # Return the count\n    return count\n\n\n# Driver code\nradius = int(input(\"Enter the radius: \"))", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n# count Rectangles in a Circle of radius r\n\nimport math\n\n# Radius\nR = 2\n\n# size of Pi\nPI = math.pi\n\n# Rectangles in a Circle\nc = 0\n\n# for every radius value\nfor r in range(R, R + 1):\n    # for every angle value\n    for a in range(0, PI):\n        # for every side length value\n        for b in range(0, r):\n            # add a rectangle when side length is greater than 0\n            if b > 0:\n                c += 1\n\n# print number of rectangles", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\ndef count_Rectangles(r):\n    return 2*math.pi*r\n\n# check the code.", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\ndef count_Rectangles(r):\n    n = int(math.floor(2*math.pi*r))\n    return n*n - (n-2)*(n-2)\n\n#    \n#", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    \"\"\"\n    >>> count_Rectangles(2)\n    8\n    \"\"\"\n    if r == 0:\n        return 0\n    \n    if r == 1:\n        return 1\n    \n    return (count_Rectangles(r-1)*2) + (count_Rectangles(r-2)*4) + 1\n\ndef test_count_Rectangles():\n    assert count_Rectangles(2) == 8\n    assert count_Rectangles(3) == 12\n    assert count_Rectangles(0) == 0\n    assert count_Rectangles(1) == 1"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle_1, angle_2):\n    return (360 - (angle_1 + angle_2)) % 360\n\n# Test suite\n\nimport unittest\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(x,y):\n    return int(90-(x+y)/2)\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(alpha, beta):\n    # Unlike find_angles in the previous exercise, here\n    # we're solving for the other side and returning\n    # the angle in degrees.\n    return 180 - ((alpha + beta) % 360)\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\nimport math\n\ndef find_angle(angle1, angle2):\n    # sin(90-x) = sin(x)\n    return math.degrees(math.asin(math.sin(angle1)*math.sin(angle2)))\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\nimport math\ndef find_angle(a,b):\n    angle = math.radians(a)\n    third_angle = (angle + math.radians(b))/2\n    return math.degrees(third_angle)\n\n\ndef find_angle2(a,b):\n    angle1 = math.radians(a)\n    angle2 = math.radians(b)\n    third_angle = math.degrees(math.acos(math.cos(angle1)*math.cos(angle2)+math.sin(angle1)*math.sin(angle2)*math.sin(angle1-angle2)))\n    return third_angle\n\n\ndef find_angle3(a,b):\n    angle1 = math.radians(a)\n    angle2 = math.radians(b)\n    third_angle = (angle1+angle2)/2\n    return math.degrees(math.acos(math.cos(angle1)*math.cos(angle2)+math.sin(angle1)*math.sin(angle2)*math.sin(angle1-angle2)))\n\n\ndef find_angle4(a,b):\n    angle1 = math.radians(a)\n    angle2 = math.radians(b)\n    third_angle = math.degrees(math.acos(math.cos(angle1)*math.cos(angle2)+math.sin(angle1)*math.sin(angle2)*math.sin(angle1-angle2)))\n    return third_angle\n\n\ndef find_angle5(a,b):\n    angle1 = math.radians(a)\n    angle2 = math.radians(b)\n    third_angle = (angle1+angle2)/2\n    return math.degrees(math.acos(math.cos(angle1)*math.cos(angle2)+math.sin(angle1)*math.sin(angle2)*math.sin(angle1-angle2)))\n\n\ndef find_angle6(a,b):\n    angle1 = math.radians(a)\n    angle2 = math.radians(b)\n    third_angle = (angle1+angle2)/2\n    return math.degrees(math.acos(math.cos(angle1)*math.cos(angle2)+", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    c = 90 - (a + b)\n    return c\n\n\ndef find_angle2(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    c = 180 - (a + b)\n    return c\n\n\ndef find_angle3(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    c = 90 - (a + b)\n    return c\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a, b):\n    \"\"\"\n    Given two angles a and b, find the third angle.\n    >>> find_angle(47, 89)\n    44\n    >>> find_angle(120, 90)\n    60\n    \"\"\"\n    c = 180 - a - b\n    return c\n\n# # Test Cases\n# triangle = [20, 10, 100]\n# a = triangle[0]\n# b = triangle[1]\n# c = triangle[2]\n# angle_a = find_angle(a, b)\n# angle_b = find_angle(b, c)\n# angle_c = find_angle(c, a)\n\n# # Test Case 1\n# print(angle_a, angle_b, angle_c)\n\n# # Test Case 2\n# triangle = [120, 90, 10]\n# a = triangle[0]\n# b = triangle[1]\n# c = triangle[2]\n# angle_a = find_angle(a, b)\n# angle_b = find_angle(b, c)\n# angle_c = find_angle(c, a)\n# print(angle_a, angle_b, angle_c)", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    \"\"\"\n    Find the third angle of a triangle\n    :param a: The first angle\n    :param b: The second angle\n    :return: The third angle of the triangle\n    \"\"\"\n    return (a+b) - (a*b)/180*math.pi\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    \"\"\"Return angle b in degree given 2 angles in degree.\n    \"\"\"\n    a, b = map(int, [a,b])\n    return 180-b-a", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\n# Answer\ndef find_angle(a,b):\n    c = 90-a-b\n    assert c>=0\n    return c\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom collections import OrderedDict\n\ndef find_max(tuples):\n    \"\"\"\n    Find the maximum element in a list of tuples.\n    \n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    \"\"\"\n    # initialize a dictionary with the key being the first item in the tuple\n    tuples_dict = OrderedDict((x[0], x) for x in tuples)\n    \n    # initialize the maximum value to the first item in the dictionary\n    max_value = tuples_dict[tuples_dict.keys()[0]][1]\n    \n    # update the dictionary with the rest of the values and the max value\n    for k, v in tuples_dict.items():\n        if v[1] > max_value:\n            max_value = v[1]\n            \n    return max_value\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\n# method 1:\n\ndef find_max(records):\n    return max(record[1] for record in records)\n\n# method 2:\n\n# def find_max(records):\n#     return max(r[1] for r in records)\n\n# method 3:\n\ndef find_max(records):\n    return max(r[1] for r in records if r[0] % 2 == 0)\n\n# method 4:\n\n# def find_max(records):\n#     return max(r[1] for r in records if len(r[0]) % 2 == 0)\n\n# method 5:\n\ndef find_max(records):\n    return max(r[1] for r in records if r[0] % 2 == 0 and len(r[0]) % 2 == 0)\n\n# method 6:\n\n# def find_max(records):\n#     return max(r[1] for r in records if len(r[0]) % 2 == 0 and len(r[1]) % 2 == 0)\n\n# method 7:\n\n# def find_max(records):\n#     return max(r[1] for r in records if len(r[0]) % 2 == 0 and len(r[1]) % 2 == 0 and r[1] > r[0])\n\n# method 8:\n\n# def find_max(records):\n#     return max(r[1] for r in records if len(r[0]) % 2 == 0 and len(r[1]) % 2 == 0 and r[1] % r[0] == 0)\n\n# method 9:\n\n# def find_max(records):\n#     return max(r[1] for r in records if len(r[0]) % 2 == 0 and len(r[1]) % 2 == 0 and", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    max_value = None\n    for record in records:\n        if max_value is None:\n            max_value = record\n        else:\n            if record > max_value:\n                max_value = record\n    return max_value\n\n#assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n#print(find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]))\n#print(find_max([(1, 2), (3, 4), (5, 6), (7, 8)]))\n#print(find_max([(10, 10), (20, 15), (30, 20), (40, 25), (50, 30)]))", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    return max(x[1] for x in records)\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    res = 0\n    for num in records:\n        if num[1] > res:\n            res = num[1]\n    return res", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    return max(records, key=lambda x: x[0])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    return max(y for x,y in records)\n\ndef test_find_max():\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 1), (6, 7), (5, 1), (6, 10), (8, 7)]) == 7\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\nimport random\nimport operator\nfrom typing import List\nfrom operator import itemgetter\n\n# using any other library like numpy is also ok.\ndef find_max(data: List) -> int:\n    max_element = data[0][0]\n    for i in data:\n        if i[0] > max_element:\n            max_element = i[0]\n    return max_element\n\n\n# if you use builtin function to find max, then\n# the test case will fail because max will not take values from list\n# instead it will take first 1 or 2 elements\n\n# using map and max function\n# it will take list as an argument, iterate over list and return max\n\ndef find_max_using_map(data: List) -> int:\n    return max(map(itemgetter(0), data))\n\n\n# if you use builtin function to find max, then\n# the test case will fail because max will not take values from list\n# instead it will take first 1 or 2 elements\n\n# using map and reduce function\n# it will take list as an argument, reduce all values to single value\n# by using reduce you can specify which function to reduce\n# reduce(operator.add, data) will add all values\n\ndef find_max_using_reduce(data: List) -> int:\n    return reduce(max, map(itemgetter(0), data))\n\n\n# if you use builtin function to find max, then\n# the test case will fail because max will not take values from list\n# instead it will take first 1 or 2 elements\n\n# using built-in function sorted and max function\n# it will take list as an argument, sort list and then take max\n# sorted is good for numbers and strings, but it doesn't work well for tuples\n# max will work better for tuples\n\ndef find_max_using_sorted(data: List) -> int:\n    return max(sorted(data, key=itemgetter(0)))\n\n\n# if you use builtin function to find max, then\n# the test case will", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(t_records):\n    return max(t_records, key=itemgetter(1))[1]\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(*args):\n    # Record all the elements\n    items = []\n    for item in args:\n        if type(item) is tuple:\n            items.append(item[1])\n    # Find the max element\n    return max(items)"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a,b):\n    return list(map(lambda x, y: x % y, a,b))\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(x,y):\n\t\"\"\"\n\tFunction to find modulo division of two lists\n\t\"\"\"\n\treturn list(map(lambda x,y: x//y, x,y))\n\ndef test_moddiv_list():\n\t\"\"\"\n\tTest for the function\n\t\"\"\"\n\tassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\tprint(\"TEST PASSED\")\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list_1, list_2):\n    return list(map(lambda x,y: x//y if y else 0, list_1, list_2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(l1,l2):\n    return list(map(lambda x,y: x%y,l1,l2))\n\nl1 = [4,5,6]\nl2 = [1, 2, 3]", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a, b):\n    return list(map(lambda x,y:x % y, a, b))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(num1, num2):\n    div = [0,0,0]\n    for i,j in zip(num1,num2):\n        div[i%j] += 1\n    return div", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(l1, l2):\n    return [x%y for x,y in zip(l1, l2)]", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a,b):\n    return list(map(lambda x,y:x%y,a,b))\n#print(moddiv_list([4,5,6],[1, 2, 3]))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(l1,l2):\n    modlist = list(map(lambda x,y:x%y, l1,l2))\n    return modlist\n\nl1 = [4,5,6]\nl2 = [1, 2, 3]\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1,list2):\n    return list(map(lambda x,y:x%y,list1,list2))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n# x**2 + x + 3 = 0\ndef Check_Solution(a,b,c):\n    #Discriminant calculation\n    D = (b**2) - (4*a*c)\n    if D < 0:\n        print(\"No\")\n    else:\n        #x1 calculation\n        x1 = (-b + (D**(1/2)))/(2*a)\n        #x2 calculation\n        x2 = (-b - (D**(1/2)))/(2*a)\n        if x1 == 2*x2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n\tif (a*a - 4*b*c) == 0:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if a != b and a != -b:\n        if a*a*a - b*b*b - 4*a*c == 0:\n            return \"Yes\"\n        elif b*b*b - 4*a*c == 0:\n            return \"Yes\"\n        elif a*a*a - 4*b*c == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        if x1*x2 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    discriminant = b**2 - 4 * a * c\n    if (discriminant > 0):\n        root1 = (-b - math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b + math.sqrt(discriminant)) / (2 * a)\n        print (\"Solution 1 = \", root1)\n        print (\"Solution 2 = \", root2)\n        return \"Yes\"\n    elif (discriminant == 0):\n        root1 = (-b) / (2 * a)\n        root2 = (-b) / (2 * a)\n        print (\"Solution 1 = \", root1)\n        print (\"Solution 2 = \", root2)\n        return \"Yes\"\n    else:\n        print (\"Discriminant is negative\")\n        return \"No\"", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    discriminant = b*b - 4*a*c\n    if discriminant > 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    x1 = -b/(2*a)\n    x2 = -(b**2 - 4*a*c)/(4*a)\n    if x1 == 2*x2:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a, b, c):\n    x1 = (-b+np.sqrt(b**2-4*a*c))/2*a\n    x2 = (-b-np.sqrt(b**2-4*a*c))/2*a\n    if x1 == x2:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a, b, c):\n    \"\"\"\n    Check whether one root of the quadratic equation is twice of the other or not.\n    >>> Check_Solution(1,3,2) == \"Yes\"\n    \"\"\"\n    import math\n    if abs(math.sqrt(b**2-4*a*c)) < 1e-6:\n        return 'Yes'\n    else:\n        return 'No'", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    discriminant = b**2 - 4*a*c\n    if discriminant == 0:\n        print(\"Roots are real\")\n    elif discriminant > 0:\n        print(\"Roots are real and distinct\")\n        print(\"Roots are \", (-b+discriminant**(0.5))/(2*a))\n        print(\"Roots are \", (-b-discriminant**(0.5))/(2*a))\n    else:\n        print(\"Roots are complex\")\n        print(\"Roots are \", (-b+discriminant**(0.5))/(2*a)+1j*(-b-discriminant**(0.5))/(2*a))\n        print(\"Roots are \", (-b-discriminant**(0.5))/(2*a)+1j*(-b-discriminant**(0.5))/(2*a))\n        "], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\n#solution\ndef get_carol(n):\n    return n*(n+1)//2\n\n#tests\ndef test_get_carol():\n    assert get_carol(2) == 7\n    assert get_carol(3) == 15\n    assert get_carol(4) == 23\n\n#test suite\ndef test_suite():\n    test_get_carol()\n\n#call test_suite()\ntest_suite()", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(num):\n    if num == 1:\n        return 1\n    else:\n        return num * (num-1) * (2 * (num-1) - 1)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n:int) -> int:\n    if n==0:\n        return 0\n    else:\n        return (get_carol(n-1) + get_carol(n-2))\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\nimport math\n\ndef get_carol(n):\n    return int(math.factorial(n) // (math.factorial(n - 1) * math.factorial(n - 2)))\n\ndef test():\n    assert get_carol(2) == 7\n    assert get_carol(3) == 10\n    assert get_carol(4) == 11\n    assert get_carol(5) == 12\n    assert get_carol(10) == 21\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nfrom euler.math import is_prime\n\ndef get_carol(n: int) -> int:\n    \"\"\"n'th carol number\n\n    The n'th carol number is the product of the n'th prime and its\n    successor.\n\n    Examples\n    ========\n\n    >>> from euler.calculus import get_carol\n    >>> get_carol(2)\n    7\n\n    See Also\n    ========\n\n    is_prime\n    \"\"\"\n    return is_prime(n)*get_carol(n+1)", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n: int) -> int:\n    if n <= 2:\n        return n\n    else:\n        return 2 + get_carol(n-1)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    if n == 0:\n        return 0\n    else:\n        return get_carol(n - 1) + get_carol(n - 2)\n\ndef get_carol_better(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return get_carol_better(n - 1) + get_carol_better(n - 2)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nimport functools\n\n\n@functools.lru_cache(maxsize=None)\ndef get_carol(n: int) -> int:\n    \"\"\"\n    returns nth carol number\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n > 1:\n        return get_carol(n-1) + get_carol(n-2) + 2\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\nfrom itertools import permutations\n\ndef get_carol(n):\n\n    carols = [i for i in range(2, 200000)]\n    #print(carols)\n    for i in range(n):\n        if carols[i] % 2 == 0:\n            carols.remove(carols[i])\n\n    if carols:\n        return carols[0]\n    else:\n        return None\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nfrom itertools import count\n\n# Map from power of 2 to carol number\ncarol_number = {1: 1, 2: 7}\n\n\ndef get_carol(n):\n    \"\"\"\n    Get the n-th carol number\n    :param n:\n    :return:\n    \"\"\"\n    return carol_number[n]\n\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    new_list = []\n    for i in lst:\n        if i!=[]:\n            new_list.append(i)\n    return new_list\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(data):\n    for i in range(len(data)):\n        if data[i] == []:\n            data.pop(i)\n    return data\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n    l_2 = []\n    for item in l:\n        if item:\n            l_2.append(item)\n    return l_2", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n    # \u5b9a\u4e49\u4e00\u4e2a\u7d22\u5f15\u53d8\u91cf\uff0c\u5f53\u7d22\u5f15\u53d8\u91cf\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15\u65f6\uff0c\u5219\u5c06\u5faa\u73af\u7ec8\u6b62\n    i = len(l)\n    # \u5b9a\u4e49\u4e00\u4e2a\u6807\u8bb0\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u7528\u4e8e\u5224\u65ad\u5f53\u524d\u904d\u5386\u7684\u5217\u8868\u662f\u5426\u4e3a\u7a7a\n    j = False\n    # \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u679c\u5217\u8868\uff0c\u8be5\u5217\u8868\u7528\u4e8e\u5b58\u653e\u5904\u7406\u540e\u7ed3\u679c\u5217\u8868\n    r = []\n    # \u5982\u679c\u7d22\u5f15\u53d8\u91cfi\u5927\u4e8e\u7b49\u4e8e0\uff0c\u5219\u5faa\u73af\u904d\u5386\u5217\u8868\n    while i >= 0:\n        # \u5982\u679c\u7d22\u5f15\u53d8\u91cfi\u6240\u6307\u5411\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u5c06\u7d22\u5f15\u53d8\u91cfi\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\n        if l[i] == []:\n            i -= 1\n        # \u5982\u679c\u7d22\u5f15\u53d8\u91cfi\u6240\u6307\u5411\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u7d22\u5f15\u53d8\u91cfi\u6240\u6307\u5411\u5217\u8868\u52a0\u5165\u7ed3\u679c\u5217\u8868\n        else:\n            r.append(l[i])\n            # \u5982\u679c\u7d22\u5f15\u53d8\u91cfi\u6240\u6307\u5411\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u7d22\u5f15\u53d8\u91cfi\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\n            i -= 1\n    # \u8fd4\u56de\u5904\u7406\u540e\u7ed3\u679c\u5217\u8868\n    return r\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(l):\n    newl = []\n    for i in l:\n        if not i == []:\n            newl.append(i)\n    return newl\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    if not lst:\n        return []\n    else:\n        lst_no_empty = []\n        for i in lst:\n            if i:\n                lst_no_empty.append(i)\n        return lst_no_empty\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(l):\n    for i in range(len(l)):\n        if l[i] == []:\n            l.pop(i)\n    return l\n\n\ndef main():\n    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]) == ['Red', 'Green', [1, 2], 'Blue']\n    assert remove_empty([[1, 2], 'Red', [], [], 'Green']) == ['Red', 'Green']\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(x):\n    return [i for i in x if i]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(list_of_list):\n    return [elem for elem in list_of_list if elem]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lists):\n    result = []\n\n    for list in lists:\n        if len(list) > 0:\n            result.append(list)\n\n    return result\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n#write your code here\n#Find the number of occurrences of each item\ndef max_occurrences(lst):\n    items = dict()\n    for item in lst:\n        if item in items:\n            items[item] += 1\n        else:\n            items[item] = 1\n    return max(items.values())\n\nlst = [1,2,3,1,2,3,12,4,2]", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(l):\n    dic = defaultdict(int)\n    for i in l:\n        dic[i] +=1\n    max_ = max(dic.values())\n    for i in dic:\n        if dic[i] == max_:\n            return i\n    return None\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nfrom collections import Counter\ndef max_occurrences(lst):\n    # your code here\n    # counting how many time the elements occur in the list\n    x = Counter(lst)\n    # getting the item with maximum occurences\n    y = x.most_common(1)[0][0]\n    return y", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(items):\n    max_occurs = 0\n    max_item = None\n    for item in items:\n        if items.count(item) > max_occurs:\n            max_occurs = items.count(item)\n            max_item = item\n    return max_occurs, max_item\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    max_val = 0\n    max_count = 0\n    result = []\n\n    for value in lst:\n        count = Counter(lst).get(value, 0)\n        if count > max_count:\n            max_count = count\n            max_val = value\n    \n    for item in lst:\n        if item == max_val:\n            result.append(item)\n            \n    return result\n\nlst = [1,2,3,1,2,3,12,4,2]", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\n# +\ndef max_occurrences(list):\n    # Your Code Here\n    return max(set(list), key = list.count)\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    occurence_count = Counter(lst)\n    max_occur = 0\n    max_item = None\n    for item, count in occurence_count.items():\n        if count > max_occur:\n            max_occur = count\n            max_item = item\n    return max_item\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(ls):\n    max_occurrence = 0\n    max_occurrence_count = 0\n    for i in ls:\n        if ls.count(i)>max_occurrence_count:\n            max_occurrence = i\n            max_occurrence_count = ls.count(i)\n    return max_occurrence,max_occurrence_count\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(list_in):\n    if len(list_in) == 0:\n        return None\n    max_occurrences = list_in[0]\n    max_occurrence_count = 0\n    for num in list_in:\n        if num != max_occurrences:\n            if list_in.count(num) > max_occurrence_count:\n                max_occurrence_count = list_in.count(num)\n                max_occurrences = num\n    return max_occurrences\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\n# Create a function max_occurrences\ndef max_occurrences(lst):\n    '''\n    :param lst: list of ints\n    :return: item with maximum occurrences in the list\n    '''\n    # Initialize the max_occurrences to the first item in the list\n    max_occurrences = lst[0]\n    # Initialize the occurrences of the max_occurrences to 1\n    occurrences = 1\n\n    for item in lst:\n        # If the current item is not the same as the max_occurrences\n        if item != max_occurrences:\n            # If the current item has a higher number of occurrences\n            if lst.count(item) > occurrences:\n                # Set the occurrences to the current item\n                occurrences = lst.count(item)\n                # Set the max_occurrences to the current item\n                max_occurrences = item\n    \n    return max_occurrences"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuples, K):\n    return [(K + i[0], K + i[1], K + i[2]) for i in tuples]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuple_list, k):\n    return [tuple(i+k) for i in tuple_list]\n\n\n# tests", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple_list, k):\n    for index, element in enumerate(tuple_list):\n        if not isinstance(element, tuple):\n            tuple_list[index] = tuple(element)\n        tuple_list[index] = (tuple_list[index][0] + k, tuple_list[index][1] + k, tuple_list[index][2] + k)\n    return tuple_list\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tup, K):\n    return list(map(lambda x: (x[0], x[1], x[2] + K), tup))\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuples, K):\n    result = []\n    for (a, b, c) in tuples:\n        result.append((a + K, b + K, c + K))\n    return result\n\n\ndef test_add_K_element():\n    tuples = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]\n    assert add_K_element(tuples, 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n\n# You are given two lists. The first list is a list of integers. The second list is a list of strings.\n# Write a function to combine the two lists and return the new list.", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\nfrom collections import namedtuple\n\nK = 2\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple, K):\n    return tuple\n\ndef test_add_K_element():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\n# Write your code here\ndef add_K_element(t, k):\n    return [(a[0] + k, a[1] + k, a[2] + k) for a in t]\n\n# assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\nimport random\n\n\ndef add_K_element(tuple_list, k):\n    for tup in tuple_list:\n        for i in range(0, k):\n            tup.append(random.randint(1, 10))\n    return tuple_list\n\n\ndef test_add_K_element():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n\ndef test_add_K_element_empty():\n    assert add_K_element([], 2) == []\n\n\ndef test_add_K_element_small_k():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 1) == [(2, 4, 5), (3, 4, 7), (4, 8, 2)]\n\n\ndef test_add_K_element_large_k():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 10) == [(11, 13, 14), (12, 14, 16), (13, 17, 9)]", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(lists, k):\n    result = []\n    for li in lists:\n        result.append((li[0] + k, li[1] + k, li[2] + k))\n    return result\n\ndef main():\n    lists = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]\n    k = 4\n    assert add_K_element(lists, k) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(binary_string):\n    pass\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom collections import Counter\ndef min_flip_to_make_string_alternate(s):\n    # s = '0001010111'\n    # return len(s) - sum(s.count(c) % 2 for c in set(s))\n    return len(s) - sum(c & 1 for c in Counter(s).values())\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nimport itertools\n\ndef min_flip_to_make_string_alternate(s):\n    odd = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            odd += 1\n    if odd % 2 == 0:\n        s = \"\".join(s.split(\"0\"))\n    else:\n        s = \"\".join(s.split(\"1\"))\n    ans = len(s)\n    for i in range(len(s)):\n        ans += min(ans, len(s) - i)\n    return ans\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\n# one solution to this problem is to use a counter.\n# another is to use a string index counter.\n# yet another is to use a nested loop\n\ndef min_flip_to_make_string_alternate(s):\n    # 2 is the minimum number of flips required to make the string alternate.\n    # therefore, we return 2.\n    if len(s) % 2 != 0:\n        return 1\n    s_index = 0\n    s_count = 0\n    t_count = 0\n    while s_index < len(s):\n        if s[s_index] == '1':\n            t_count += 1\n        if s[s_index] == '0':\n            s_count += 1\n        s_index += 1\n        if t_count == 0 and s_count == 0:\n            break\n        if t_count > s_count:\n            t_count -= s_count\n            s_count = 0\n        else:\n            s_count -= t_count\n            t_count = 0\n    return s_count\n\ndef min_flip_to_make_string_alternate_2(s):\n    # 2 is the minimum number of flips required to make the string alternate.\n    # therefore, we return 2.\n    s_count = 0\n    t_count = 0\n    for i in s:\n        if i == '1':\n            t_count += 1\n        if i == '0':\n            s_count += 1\n        if t_count == 0 and s_count == 0:\n            break\n        if t_count > s_count:\n            t_count -= s_count\n            s_count = 0\n        else:\n            s_count -= t_count\n            t_count = 0\n    return s_count\n\ndef min_flip_to_make_string_alternate_3(s):\n    # 2 is the minimum number of flips required to make the string alternate.\n    # therefore, we return 2.\n    s_index = 0\n    s_count = ", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(input_string):\n    #Write your code here\n\n#Tests", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    if len(s) == 1:\n        return 0\n    front = front_helper(s)\n    back = back_helper(s)\n    if front[0] == back[0]:\n        return front[1] + back[1]\n    return front[1] + back[1] + 1\n\ndef front_helper(s):\n    front = 0\n    prev = s[0]\n    for i in range(1, len(s)):\n        if s[i] != prev:\n            front += 1\n        prev = s[i]\n    return (front, 1)\n\ndef back_helper(s):\n    back = 0\n    prev = s[-1]\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] != prev:\n            back += 1\n        prev = s[i]\n    return (back, 1)", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(b):\n    bits = list(bin(int(b, 2))[2:])\n    # print(bits)\n    # zipped_bits = zip(bits,bits[1:])\n    # print(list(zipped_bits))\n    # print(list(map(lambda z: z[0] != z[1], zipped_bits)))\n    return(min(list(map(lambda z: z[0] != z[1], zip(bits,bits[1:])))))\n\n# print(min_flip_to_make_string_alternate(\"0001010111\"))\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\nimport itertools\n\ndef min_flip_to_make_string_alternate(s):\n    \"\"\"\n    time complexity: O(2^n)\n    space complexity: O(n)\n    \"\"\"\n    s = list(s)\n    n = len(s)\n    if s[0] != s[1]:\n        return 1\n    s[0], s[1] = s[1], s[0]\n    flips = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            continue\n        s[i], s[i-1] = s[i-1], s[i]\n        flips += 1\n    s[0], s[1] = s[1], s[0]\n    return flips\n\ndef min_flip_to_make_string_alternate_2(s):\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(n)\n    \"\"\"\n    s = list(s)\n    n = len(s)\n    if s[0] != s[1]:\n        return 1\n    flips = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            continue\n        s[i], s[i-1] = s[i-1], s[i]\n        flips += 1\n    return flips\n\ndef min_flip_to_make_string_alternate_3(s):\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(n)\n    \"\"\"\n    return min(abs(ord(c1)-ord(c2)) for c1, c2 in zip(s, s[1:]))\n\ndef min_flip_to_make_string_alternate_4(s):\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(n)\n    \"\"\"\n    s = list(s)\n    n = len(s)\n    if s[0] != s[1]:\n        return 1\n    flips = 0\n    for i in range(1, n):", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\n# a bit more memory efficient than the approach in the book:\ndef min_flip_to_make_string_alternate_b(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2:\n            if s[i] != s[(i + 1) % len(s)]:\n                count += 1\n    return count\n\n\n# sort of better:\n# def min_flip_to_make_string_alternate_c(s):\n#     count = 0\n#     for i in range(len(s)):\n#         if s[i] != s[(i + 1) % len(s)]:\n#             count += 1\n#     return count\n\n\n# This is a very nice solution with a lot of different optimizations:\ndef min_flip_to_make_string_alternate_d(s):\n    s = list(s)\n    num_swaps = 0\n    while True:\n        for i in range(len(s) - 1):\n            if s[i] != s[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                num_swaps += 1\n        if not num_swaps:\n            return num_swaps\n        num_swaps = 0\n\n\ndef min_flip_to_make_string_alternate_e(s):\n    # s = list(s)\n    # s.sort()\n    # s = ''.join(s)\n    # # print s\n    # return len(list(set(s))) - 1\n    return len(set(s)) - 1\n\n\ndef min_flip_to_make_string_alternate_f(s):\n    return len(set(s)) - 1\n\n\ndef min_flip_to_make_string_alternate_g(s):\n    return len(set(s)) - 1\n\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(x):\n    return len(str(x))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\nimport sys\n\n\ndef count_Digit(number):\n    # write your code here\n    count = 0\n    while number > 0:\n        count += 1\n        number /= 10\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    l = len(str(num))\n    return l\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    '''\n        Return the count of digits\n    '''\n    count=0\n    while num>0:\n        num=num//10\n        count=count+1\n    return count\n\n\n'''\nTest Case 1:\n\nInput: 12345\nOutput: 5\n'''\n\n'''\nTest Case 2:\n\nInput: 123\nOutput: 3\n'''\n\n'''\nTest Case 3:\n\nInput: 12\nOutput: 2\n'''\n\n'''\nTest Case 4:\n\nInput: 123456\nOutput: 6\n'''", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    i = 0\n    while n > 0:\n        n = n // 10\n        i += 1\n    return i\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(number):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n    \"\"\"\n    return len(str(number))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_digit(num):\n    return len(str(num))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    count = 0\n    for i in str(n):\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n# Write your code here\ndef count_Digit(num):\n    count = 0\n    while num != 0:\n        num = num//10\n        count+=1\n    return count"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(list_of_numbers):\n    list_of_numbers = sorted(list_of_numbers)\n    answer = 1\n    for i in range(len(list_of_numbers)):\n        answer = answer * list_of_numbers[i]\n        if i > 0:\n            answer = answer / list_of_numbers[i-1]\n    return answer", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    max_p = nums[0]\n    for i in range(1,len(nums)):\n        num = nums[i]\n        max_p = max_p * num\n    return max_p", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# +\ndef adjacent_num_product(lst):\n    a = lst[0]\n    b = lst[1]\n    c = lst[2]\n    d = lst[3]\n    e = lst[4]\n    f = lst[5]\n    product = a * b * c * d * e * f\n    return product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# Code for finding the largest product of two adjacent elements\n# Input is the list of numbers\n# Output is the largest product of two adjacent elements\n# int[] list\ndef adjacent_num_product(numbers):\n    for i in range(len(numbers)):\n        if i != 0:\n            # print(numbers[i] * numbers[i-1])\n            if numbers[i] * numbers[i - 1] > numbers[i - 1] * numbers[i]:\n                numbers[i], numbers[i - 1] = numbers[i - 1], numbers[i]\n    return max(numbers)\n\n# Test for the above code", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n    # complete the function\n\n# Test code", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(l):\n    prod = l[0]\n    for i in range(1,len(l)):\n        prod = l[i]*l[i-1]\n        if prod > 0:\n            yield prod\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    \"\"\"\n    Complexity: O(N), where N is the number of elements in the list\n    Space: O(1)\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n    curr_product = nums[0] * nums[1]\n    max_product = curr_product\n    for i in range(2, len(nums)):\n        curr_product = nums[i] * nums[i-1]\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(list_1):\n    max_product = -1\n    for i in range(len(list_1) - 1):\n        if list_1[i] * list_1[i + 1] > max_product:\n            max_product = list_1[i] * list_1[i + 1]\n    return max_product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    #Edge case\n    if len(nums) == 0:\n        return 0\n\n    #Edge case\n    if len(nums) == 1:\n        return nums[0]\n\n    #Calculate product of two adjacent numbers\n    product = nums[0]*nums[1]\n\n    for i in range(1,len(nums)-1):\n        product = product*nums[i]*nums[i+1]\n\n    return product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(L):\n\t# the product of the two numbers in the input list\n\tlargest_product = L[0]*L[1]\n\t# The loop will run only if L contains at least 2 elements\n\tfor i in range(1, len(L)-1):\n\t\t# The loop will only run if the list contains at least 2 elements\n\t\tlargest_product = max(L[i]*L[i+1], largest_product)\n\t# Returns the largest product of the two adjacent numbers\n\treturn largest_product\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# A Node is defined as follows:\n# class Node:\n#     def __init__(self, val):\n#         self.left = None\n#         self.right = None\n#         self.val = val\n\ndef is_tree_balanced(root):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not root:\n        return True\n\n    height_left = _height(root.left)\n    height_right = _height(root.right)\n    return abs(height_left - height_right) <= 1 and \\\n        is_tree_balanced(root.left) and \\\n        is_tree_balanced(root.right)\n\ndef _height(root):\n    if not root:\n        return 0\n    return max(_height(root.left), _height(root.right)) + 1", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    if root is None:\n        return True\n\n    left = is_tree_balanced(root.left)\n    right = is_tree_balanced(root.right)\n\n    if abs(left - right) > 1:\n        return False\n\n    return True\n\n# Tests\n\nfrom utils import tree_maker\n\nroot = tree_maker([3, 9, 20, None, None, 15, 7])", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n\n    return abs(depth(root.left) - depth(root.right)) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef depth(root):\n    if root is None:\n        return 0\n\n    return max(depth(root.left), depth(root.right)) + 1", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\ndef is_tree_balanced(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: bool\n    \"\"\"\n    if root is None:\n        return True\n    if abs(height(root.left) - height(root.right)) <= 1:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n    else:\n        return False\n\ndef height(node):\n    \"\"\"\n    :type node: TreeNode\n    :rtype: int\n    \"\"\"\n    if node is None:\n        return 0\n    return max(height(node.left), height(node.right)) + 1\n\ndef main():\n    a = TreeNode(1)\n    b = TreeNode(2)\n    c = TreeNode(3)\n    d = TreeNode(4)\n    e = TreeNode(5)\n    f = TreeNode(6)\n    g = TreeNode(7)\n    h = TreeNode(8)\n\n    a.left = b\n    a.right = c\n    b.left = d\n    b.right = e\n    c.left = f\n    c.right = g\n    d.left = h\n\n    assert is_tree_balanced(a) == False\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n# Recursive Solution"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n# method 1\n# def repeat_tuples(sequence, times):\n#     \"\"\"\n#     Return a tuple containing the given sequence repeated the given number of times.\n\n#     >>> repeat_tuples((1, 2), 3)\n#     ((1, 2), (1, 2), (1, 2))\n#     \"\"\"\n\n#     return tuple(sequence) * times\n\n\n# method 2\ndef repeat_tuples(sequence, times):\n    \"\"\"\n    Return a tuple containing the given sequence repeated the given number of times.\n\n    >>> repeat_tuples((1, 2), 3)\n    ((1, 2), (1, 2), (1, 2))\n    \"\"\"\n\n    return tuple(sequence) * times", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, times):\n    output = list()\n    for i in range(times):\n        output.append(tup)\n    return output\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuple(tuple, n):\n    return tuple * n\n\n#assert repeat_tuple((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n# Solution\ndef repeat_tuples(tup, num):\n    if tup == () and num == 0:\n        return ()\n    elif num == 1:\n        return tup\n    else:\n        return repeat_tuples(tup, num - 1) + tup\n\n# Tests\ndef test_repeat_tuples():\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert repeat_tuples(('a', 'b'), 1) == [('a', 'b')]\n    assert repeat_tuples(('a', 'b'), 2) == [('a', 'b'), ('a', 'b')]\n    assert repeat_tuples((), 4) == ()\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return (tup * n)\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    if n == 0:\n        return ()\n    else:\n        return tup + repeat_tuples(tup, n - 1)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(input_tuple, n):\n    return tuple([input_tuple] * n)\n\n#Below is an example usage:\n\n# Enter the tuple\ninput_tuple = (1, 2, 3)\n\n# Calling the function", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tuple, n):\n    \"\"\"\n    Args:\n        tuple (tuple): tuple\n        n (int): number of times to repeat\n\n    Returns:\n        tuple: repeated tuple\n    \"\"\"\n    if not isinstance(tuple, tuple):\n        raise TypeError('The input should be a tuple')\n\n    return tuple * n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuples, n):\n    return tuple(tuples)*n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(*args, n=1):\n    \"\"\"\n    >>> repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    True\n    \"\"\"\n    new_args = [args for i in range(n)]\n    return tuple(item for sublist in new_args for item in sublist)\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l1,l2,l3):\n    \"\"\"\n    Input:\n    l1 = Length of each side of cuboid\n    l2 = Length of each side of cuboid\n    l3 = Length of each side of cuboid\n\n    Output:\n    return lateral surface area of cuboid\n    \"\"\"\n    return l1 * l2 + l1 * l3 + l2 * l3\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(width, height, depth):\n    return 2*width*depth + 2*height*depth + 2*width*height\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(width,length,height):\n    s=width*height\n    t=2*(length*width+width*height+height*length)\n    return s+t\n\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return 2*(a*b+b*c+c*a)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a, b, c):\n    return 2*(a+b+c)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(l,w,h):\n    return 2*(l*w) + 2*(l*h) + 2*(w*h)\n\n#Test Cases", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\nfunction lateralsurface_cuboid(length,breadth,height)\n    return 2*length*breadth + 2*breadth*height + 2*height*length\nend", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a,b,c):\n    return 2*(a+b+c)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a,b,c):\n    \"\"\"\n    Calculate the lateral surface area of cuboid.\n    Input: a,b,c\n    Output: lateral surface area.\n    \"\"\"\n    return 2*a*b+2*b*c+2*c*a\n\n#unittest\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\n# lateral surface area of cuboid\ndef lateralsurface_cuboid(a,b,c):\n  return 2*(a*b) + 2*(b*c) + 2*(c*a)\n\n# test code"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(t):\n    \"\"\"\n    Sorts a list of tuples by its float element\n    \"\"\"\n    return sorted(t, key=lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(items):\n    \"\"\" \n    Sorts the list of items by the float values in the tuple. \n    \"\"\"\n    items.sort(key=lambda x: (float(x[1]), x[0]))\n    return items", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(lst):\n    sorted(lst, key = lambda x: x[1])\n    return lst\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(l):\n    \"\"\"\n    :param l: list of tuples\n    :return: sorted list of tuples\n    \"\"\"\n    l.sort(key=lambda x: x[1])\n    return l\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(data):\n\t\"\"\"Sort tuple by float element.\"\"\"\n\tpass\n\n# below is an example test\n\ndef test(func):\n\t\"\"\"Return a function that evaluates func and prints the result.\"\"\"\n\tdef wrapper(*args):\n\t\tresult = func(*args)\n\t\tprint(result)\n\treturn wrapper\n\n@test\n@float_sort\ndef float_sort_test():\n\treturn [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tuples):\n    return sorted(tuples, key = lambda tup: float(tup[1]))\n    ", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(list_of_tuples):\n    sorted_list = sorted(list_of_tuples, key=lambda x: float(x[1]))\n    return sorted_list\n\n# Enter the list of tuples\nlist_of_tuples = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\n\n# Calling the function", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\n# @param a tuple of tuples to be sorted\n# @return the sorted list\ndef float_sort(a):\n    a.sort(key=lambda x: x[1])\n    return a\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(data):\n    \"\"\"\n    \n    \"\"\"\n    # your code goes here\n    data.sort(key = lambda x: x[1])\n    return data\n# your test here", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(values):\n    # add your code here\n    values.sort(key=lambda x:x[1])\n    return values\n\n#-------------TEST--------------\nvalues1 = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\nvalues2 = [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(a, lo, hi):\n    \"\"\"Find the smallest missing element in a sorted array.\n    Assume: sorted array\n    Return: missing element\n    \"\"\"\n    for i in range(lo, hi+1):\n        if a[i] != i:\n            return i\n    return hi+1\n\n\n# test:\ndef test(f):\n    assert f([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert f([0, 1, 2, 3, 4, 5, 6], 0, 4) == 5\n    assert f([0, 1, 2, 3, 4, 5, 6], 0, 3) == 6\n    assert f([0, 1, 2, 3, 4, 5, 6], 0, 2) == 7\n    assert f([0, 1, 2, 3, 4, 5, 6], 0, 1) == 8\n\n\ntest(smallest_missing)", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(array, start, end):\n    array = sorted(array[start:end])\n    for idx, value in enumerate(array):\n        if value != idx:\n            return idx\n    return end\n\ndef smallest_missing2(array, start, end):\n    idx = start\n    for value in array:\n        idx += 1\n    return end - idx + 1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nfrom bisect import bisect_right\nfrom itertools import count\n\n\ndef smallest_missing(array, start, end):\n    \"\"\"Find the smallest missing element in a sorted array.\n\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n    7\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 5)\n    6\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 4)\n    5\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 3)\n    4\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 2)\n    3\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 1)\n    2\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 0)\n    1\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 100)\n    7\n    \"\"\"\n    missing = end + 1\n    for num in count(start):\n        if num not in array:\n            missing = num\n            break\n    return missing\n\n\ndef smallest_missing_better(array, start, end):\n    \"\"\"Find the smallest missing element in a sorted array.\n\n    >>> smallest_missing_better([0, 1, 2, 3, 4, 5, 6], 0, 6)\n    7\n    >>> smallest_missing_better([0, 1, 2, 3, 4, 5, 6], 0, 5)\n    6\n    >>> smallest_missing_better([0, 1,", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, l, r):\n    if l >= r:\n        return r+1\n    \n    mid = (l + r) // 2\n    \n    if arr[mid] == mid + 1:\n        return smallest_missing(arr, mid+1, r)\n    elif arr[mid] == mid - 1:\n        return smallest_missing(arr, l, mid - 1)\n\n    return min(smallest_missing(arr, mid+1, r), smallest_missing(arr, l, mid - 1))\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(array, min=0, max=None):\n    if max is None:\n        max = len(array)\n    i = min\n    while i < max:\n        if array[i] != i:\n            break\n        i += 1\n    return i\n\ndef test_smallest_missing():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6]) == 7\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 1, 5) == 7\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 1, 3) == 8\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 1, 2) == 9\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 5) == 7\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 2) == 8\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    \"\"\"\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    True\n    \"\"\"\n    return arr[start:end]\n\n\n# ### Q25. Counting Sort\n\ndef counting_sort(arr):\n    \"\"\"\n    >>> counting_sort([1, 3, 3, 4, 5, 6, 7])\n    [1, 3, 2, 3, 1, 4, 2]\n    \"\"\"\n    # Counter to count the occurrence of each number\n    arr = Counter(arr)\n    \n    # Initialize count array with zeros\n    count_arr = [0] * len(arr)\n    \n    # Store the number of occurrences of each element in count_arr\n    for k, v in arr.items():\n        count_arr[k] = v\n    \n    # Initialize output array\n    output_arr = [0] * len(arr)\n    \n    # Iterate over count array and add appropriate values\n    for k, v in enumerate(count_arr):\n        for i in range(v):\n            output_arr[k] = arr[k]\n            arr.pop(k)\n            \n    return output_arr\n\n\n# ### Q26. Binary Search\n\ndef binary_search(arr, item):\n    \"\"\"\n    >>> binary_search([1, 3, 5, 7, 9, 12, 14, 16, 19, 21], 5)\n    2\n    >>> binary_search([1, 3, 5, 7, 9, 12, 14, 16, 19, 21], 21)\n    10\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    \n    # If the array size is 0\n    if end < 0:\n        return -1\n    \n    # Base case\n    if item == arr[end]:\n        return end\n    \n    while start <= end:\n        mid = (start + end) // ", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(values, start=0, end=None):\n    \"\"\"Return the smallest missing value in `values`.\"\"\"\n    end = end or len(values)\n    for i in range(start, end):\n        if values[i] != i+1:\n            return i+1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nimport bisect\n\ndef smallest_missing(seq, low, high):\n    missing = None\n    mid = int((high + low) / 2)\n    if not high - low > 1:\n        missing = (high + low) / 2\n        return missing\n\n    if high - low == 1:\n        if seq[mid] != (mid + 1):\n            missing = (mid + 1)\n        else:\n            missing = mid + 1\n        return missing\n\n    if seq[mid] == (mid + 1):\n        if mid > 0 and seq[mid - 1] == mid:\n            return missing\n        if mid < high and seq[mid + 1] == mid + 1:\n            return missing\n        if mid > 0 and seq[mid - 1] == mid + 1:\n            return mid + 1\n        if mid < high and seq[mid + 1] == mid:\n            return mid\n\n    if seq[mid] == (mid + 1) and mid > 0:\n        if seq[mid - 1] == mid - 1:\n            return missing\n        if seq[mid - 1] == mid:\n            return missing\n        if seq[mid - 1] == mid - 1 and seq[mid + 1] == mid + 1:\n            return missing\n        if seq[mid - 1] == mid - 1 and seq[mid + 1] == mid:\n            return mid\n        if seq[mid - 1] == mid and seq[mid + 1] == mid + 1:\n            return mid + 1\n\n    if seq[mid] == (mid + 1) and mid < high:\n        if seq[mid + 1] == mid + 1:\n            return missing\n        if seq[mid + 1] == mid:\n            return missing\n        if seq[mid + 1] == mid + 1 and seq[mid - 1] == mid - 1:\n            return missing\n        if seq[mid + 1] == mid + 1 and seq[mid - 1] == mid:\n            return mid\n        if seq[mid", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(a, l, u):\n    for i in range(l, u):\n        if i != a[i-1]:\n            return i\n    return u + 1\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(a):\n    n = len(a)\n    if n==0: return a\n    # start with adding all the elements to heap and return sorted list\n    h = []\n    for i in a:\n        heappush(h,i)\n    while n>0:\n        a[0],a[n-1] = a[n-1],a[0]\n        n -= 1\n        heappop(h)\n        heappush(h,a[0])\n    return a\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n# convert the list to heap\ndef heap_assending(lst):\n    # Create a max heap\n    heapify(lst)\n    # sort the list\n    return sorted(lst, reverse=True)\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef heap_assending(data):\n    for i in data:\n        heappush(data, i)\n\n    result = []\n    while data:\n        result.append(heappop(data))\n\n    return result\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\ndef heap_assending(array):\n    heapq.heapify(array)\n    return [heappop(array) for i in range(len(array))]\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\n# Heap Structure", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(list):\n    my_list = list\n    heapq.heapify(my_list)\n    while len(my_list)>1:\n        ele = heapq.heappop(my_list)\n        heapq.heappush(my_list, ele)\n    return my_list", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq\n\ndef heap_ascending(l):\n    for i in range(len(l)//2-1,-1,-1):\n        heapq._siftup(i, l)\n    for i in range(len(l)):\n        heapq._siftup(i, l)\n    return l\n\ndef heap_assending(l):\n    \"\"\"\n    :param l: list\n    :return: list\n    \"\"\"\n    for i in range(len(l)//2-1,-1,-1):\n        heapq.heapify(l)\n    for i in range(len(l)):\n        heapq.heappush(l, l.pop())\n    return l\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\ndef heap_assending(my_list):\n    return_list = []\n    while len(my_list) > 0:\n        heappush(return_list, my_list.pop(0))\n    return return_list", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef heap_ascending(l):\n    heappush(l, -1)\n    for i in range(1, len(l)):\n        heappush(l, -heappop(l))\n    return l\n\n\n#print(heap_ascending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]))", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n#volume of a cuboid\ndef volume_cuboid(l,w,h):\n    return l*w*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(width, length, height):\n    return width * length * height\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n# + deletable=false nbgrader={\"checksum\": \"b352c637147c83c30871340c670f79f4\", \"grade\": false, \"grade_id\": \"cell-083d9b9697440249\", \"locked\": false, \"schema_version\": 1, \"solution\": true}\ndef volume_cuboid(length,breadth,height):\n    V=length*breadth*height\n    return V\n\n# + deletable=false editable=false nbgrader={\"checksum\": \"2852c1a05f2685798625b1e98371839a\", \"grade\": true, \"grade_id\": \"cell-d4c6752e58b6705c\", \"locked\": true, \"points\": 1, \"schema_version\": 1, \"solution\": false}\nimport unittest\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a, b, c):\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    else:\n        return a*b*c", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(w,l,h):\n    return w*l*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\nfrom math import pi\n\ndef volume_cuboid(width, length, height):\n    \"\"\"Return the volume of a cuboid.\n    \"\"\"\n    return width * length * height\n\ndef test_volume_cuboid():\n    \"\"\"Test cases for the volume_cuboid function.\n    \"\"\"\n    assert volume_cuboid(1,2,3)==6", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(w,l,h):\n    return w*l*h\n\ndef test_volume_cuboid():\n    assert volume_cuboid(1,2,3)==6\n    assert volume_cuboid(1,3,2)==6\n    assert volume_cuboid(3,2,1)==6\n    assert volume_cuboid(2,1,3)==6\n    assert volume_cuboid(3,1,2)==6\n    assert volume_cuboid(1,2,1)==1\n\ndef test_volume_cuboid_larger():\n    assert volume_cuboid(1,2,3)==6\n    assert volume_cuboid(1,3,3)==18\n    assert volume_cuboid(2,3,3)==18\n    assert volume_cuboid(2,3,2)==12\n    assert volume_cuboid(3,3,2)==12\n    assert volume_cuboid(3,3,1)==8\n    assert volume_cuboid(3,2,1)==8\n    assert volume_cuboid(2,2,1)==4\n    assert volume_cuboid(2,1,1)==1\n    assert volume_cuboid(1,1,1)==1\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n#Creating a function\ndef volume_cuboid(a, b, c):\n    \"\"\"\n    Returns the volume of a cuboid.\n\n    :param a: The side of the cuboid\n    :type a: int\n    :param b: The side of the cuboid\n    :type b: int\n    :param c: The side of the cuboid\n    :type c: int\n    :returns: The volume of the cuboid\n    :rtype: float\n    \"\"\"\n    return a * b * c\n#Calling the function", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(w,h,l):\n    volume = w*h*l\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(side1, side2, side3):\n    return side1 * side2 * side3\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nfrom itertools import permutations\n\ndef permute_string(word):\n    \"\"\"\n    >>> permute_string('ab')\n    ['ab', 'ba']\n    \"\"\"\n    result = []\n    for i in range(len(word)):\n        result.extend(permutations(word[:i] + word[i+1:], r=len(word)))\n    return result\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\n# Solution\ndef permute_string(str):\n    # Inputs:\n    # str : A string to be permuted.\n    # Outputs:\n    # list : A list of permutations of str including duplicates.\n\n    # Declare variables:\n    permutations = []\n    perms = []\n\n    # Get the length of str:\n    length = len(str)\n\n    # Add '?' to str:\n    str = str + '?'\n\n    # Call permute_recursive for all possible permutations\n    for i in range(length):\n        perms = permute_recursive(str, i, perms)\n\n    # Fill in '?' with 'a' in all permutations:\n    for i in range(len(perms)):\n        perms[i] = perms[i].replace('?', str[i])\n\n    # Return all permutations including duplicates:\n    permutations.extend(perms)\n\n    return permutations\n\n# Recursive helper function:\ndef permute_recursive(str, index, perms):\n    if index == len(str)-1:\n        perms.append(str)\n    else:\n        for i in range(index, len(str)):\n            str_temp = str[:index] + str[index] + str[index+1:]\n            permute_recursive(str_temp, index+1, perms)\n\n    return perms\n\n# Test cases:", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    perms = list()\n    if len(s) == 0:\n        perms.append('')\n    elif len(s) == 1:\n        perms.append(s)\n    else:\n        perms.append(s[0])\n        for i in range(1,len(s)):\n            perms = perms + permute_string(s[1:])\n            perms = perms + permute_string(s[:i]+s[i+1:])\n    return perms\n\ndef test_permute_string():\n    assert permute_string('ab')==['ab', 'ba']\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n\tif len(s) == 0:\n\t\treturn []\n\tif len(s) == 1:\n\t\treturn [s]\n\tp = permute_string(s[:len(s)-1])\n\tresult = []\n\tfor i in range(len(s)):\n\t\tfor j in p:\n\t\t\tresult.append(s[i]+j)\n\treturn result\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(str):\n    permutations = list()\n    if str is None or len(str) == 0:\n        return permutations\n    temp = list(str)\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            temp[i], temp[j] = temp[j], temp[i]\n            permutations.append(''.join(temp))\n            temp[i], temp[j] = temp[j], temp[i]\n    return permutations\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(str):\n    l = list(str)\n    n = len(l)\n    k = len(str)-1\n    res = []\n    def helper(i):\n        if i == k:\n            res.append(''.join(l))\n            return\n        for j in range(i, n):\n            l[i], l[j] = l[j], l[i]\n            helper(i+1)\n            l[i], l[j] = l[j], l[i]\n    helper(0)\n    return res\n\n# To avoid duplicates, we need to sort the result list", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(word):\n    if len(word)==0:\n        return []\n    result = []\n    letter = word[0]\n    result.append(letter)\n    for i in range(1, len(word)):\n        result += permute_string(word[i:])\n    return result\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    if s == '':\n        return ['']\n    else:\n        first = s[0]\n        rest = s[1:]\n        rest_perms = permute_string(rest)\n        rest_perms.extend([first+x for x in rest_perms])\n        return rest_perms\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    res = []\n    permute_string_helper(s, '', res)\n    return res\n\ndef permute_string_helper(s, cur, res):\n    if len(cur) == len(s):\n        res.append(cur)\n        return\n    for i in xrange(len(s)):\n        if i > 0 and s[i] == s[i - 1]:\n            continue\n        permute_string_helper(s, cur + s[i], res)\n\ndef test():\n    print permute_string('ab')\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    if len(string) == 0:\n        return [string]\n    else:\n        strings = []\n        for i in range(len(string)):\n            characters = permute_string(string[:i] + string[i+1:])\n            for character in characters:\n                strings.append(string[i] + character)\n        return strings\n\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\nimport math\n\ndef round_num(num,multiple):\n    diff = multiple - (num % multiple)\n    if diff <= 0.5:\n        return num\n    else:\n        return num + multiple - diff\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\nimport math\ndef round_num(num, multiple):\n    if multiple==0:\n        return num\n    elif num%multiple==0:\n        return num\n    else:\n        return math.floor(num/multiple)*multiple", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\nimport math\nimport pytest\n\ndef round_num(num, multiple):\n    return math.floor(num/multiple)*multiple\n\ndef test_round_num():\n    assert round_num(4722,10)==4720\n    assert round_num(17.245,1)==17.2\n    assert round_num(17.245,-1)==17.3\n    assert round_num(17.245,0)==17.2\n    assert round_num(17.245,0.5)==17.25\n    assert round_num(17.245,-0.5)==17.15\n\ndef test_round_num_neg():\n    assert round_num(-4722,-10)==-4730\n    assert round_num(-17.245,-1)==-17.2\n    assert round_num(-17.245,1)==-17.3\n    assert round_num(-17.245,0)==-17.2\n    assert round_num(-17.245,0.5)==-17.25\n    assert round_num(-17.245,-0.5)==-17.15\n\ndef test_round_num_float():\n    assert round_num(47.22,10)==47.2\n    assert round_num(17.245,1)==17.2\n    assert round_num(17.245,-1)==17.3\n    assert round_num(17.245,0)==17.2\n    assert round_num(17.245,0.5)==17.25\n    assert round_num(17.245,-0.5)==17.15\n\ndef test_round_num_float_neg():\n    assert round_num(-47.22,-10)==-47.3\n    assert round_num(-17.245,-1)==-", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number,multiple):\n    return number - (number % multiple) + multiple\n\n#Tests\n#assert round_num(4722,10)==4720\n#print(round_num(1,1))\n\ndef round_to_nearest_ten(num):\n    if num % 10 == 0:\n        return num\n    else:\n        return round_to_nearest_ten(num - num % 10)\n#round_to_nearest_ten(5)\n#round_to_nearest_ten(15)\n#round_to_nearest_ten(25)\n#round_to_nearest_ten(35)\n#round_to_nearest_ten(45)\n#round_to_nearest_ten(55)\n\ndef count_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num //= 10\n    return total\n#assert count_digits(1234) == 4\n#assert count_digits(123456) == 6\n#assert count_digits(49999) == 4\n\ndef sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num //= 10\n    return total\n#assert sum_digits(123) == 3\n#assert sum_digits(1234) == 10\n#assert sum_digits(12345) == 15\n\ndef is_palindrome(num):\n    \"\"\"Return a boolean of True if the given number is a palindrome\"\"\"\n    if num == 0:\n        return False\n    digits = []\n    while num != 0:\n        digits.append(num % 10)\n        num //= 10\n    if digits == digits[::-1]:\n        return True\n    return False\n#assert is_palindrome(121) == True\n#assert is_palindrome(122) == False\n#assert is_palindrome(123", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    \"\"\"\n    Rounds num to nearest multiple of multiple\n    \"\"\"\n    return int(num + (multiple / 2)) - (multiple / 2)", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number, multiple):\n    return (number // multiple) * multiple\n\n# This code is contributed by <NAME>\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number, multiple):\n    \"\"\"\n    If number is a multiple of multiple, round up. Else round down.\n    \"\"\"\n    if number % multiple == 0:\n        return number // multiple\n    else:\n        return number // multiple + 1\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number,multiple):\n    return number - (number % multiple)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    \"\"\"\n    num: integer\n    multiple: integer\n    return: integer\n    \"\"\"\n    return (num // multiple) * multiple\n\n\ndef test_round_num():\n    assert round_num(4722,10)==4720\n    assert round_num(5781,10)==5780\n    assert round_num(9267,10)==9260\n    assert round_num(6877,10)==6870\n    assert round_num(8645,10)==8640\n    assert round_num(7479,10)==7480\n    assert round_num(5683,10)==5680\n    assert round_num(3248,10)==3240\n    assert round_num(6497,10)==6490\n    assert round_num(4730,10)==4730\n    assert round_num(5781,10)==5780\n    assert round_num(9267,10)==9260\n    assert round_num(6877,10)==6870\n    assert round_num(8645,10)==8640\n    assert round_num(7479,10)==7480\n    assert round_num(5683,10)==5680\n    assert round_num(3248,10)==3240\n    assert round_num(6497,10)==6490\n    assert round_num(4730,10)==4730\n    assert round_num(5781,10)==5780\n    assert round_num(9267,10)==9260\n    assert round_num(6877,10)==6870\n    assert round_num(8645,10)==8640\n    assert round_num(7479,10)==", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,multiple):\n    \"\"\"\n    This function rounds a number to the nearest multiple of a specific number.\n    It uses the modulo operator to find the remainder after division.\n    If the remainder is greater than 5, then it subtracts 10 from the num.\n    In this way, the remainder after division will be less than 5.\n    \"\"\"\n    if num % multiple == 0:\n        return num\n    else:\n        return num - multiple + (multiple - 5)\n\n\n# Example"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\nfrom collections import Counter\n\ndef remove_replica(sequence):\n    \"\"\"\n    >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n    (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    \"\"\"\n    counter = Counter(sequence)\n    unique_elements = [element for element, count in counter.items() if count > 1]\n    return [element if element not in unique_elements else 'MSP' for element in sequence]\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(lst):\n    lst_new = []\n    lst_set = set(lst)\n    for item in lst:\n        if item in lst_set:\n            lst_new.append(item)\n            if lst.count(item) > 1:\n                lst_new.append(item)\n    return lst_new\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nimport collections\n\n\ndef remove_replica(seq):\n    \"\"\"\n    Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n    :param seq: the input sequence\n    :return: a new sequence with duplicates removed\n    \"\"\"\n    return [item for item, count in collections.Counter(seq).items() if count > 1]\n\n\ndef test_remove_replica():\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef remove_replica(elements):\n    \"\"\"\n    Remove elements that occur more than once and replace the duplicates with some custom value.\n    :param elements:\n    :return:\n    \"\"\"\n    unique_elements = set()\n    for element in elements:\n        unique_elements.add(element)\n    return list(unique_elements)\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\n# write your code here\n\n\n# write your tests here\n\n# write your code here", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nfrom collections import Counter\n\ndef remove_replica(x):\n    \"\"\"\n    Args:\n        x: tuple containing elements\n    Returns:\n        tuple with duplicates removed and replaced with a custom value\n    \"\"\"\n    counts = Counter(x)\n    return tuple(i[0] for i in counts.most_common(1)) if len(x) > 1 else x", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(x):\n    from collections import Counter\n    unique = [x[0]]\n    y = list(x)\n    y.sort(reverse=True)\n    for i in y:\n        if i != y[0]:\n            if i in unique:\n                continue\n            else:\n                unique.append(i)\n    unique.append(y[0])\n    unique.append('MSP')\n    return tuple(unique)\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\n# Test cases:\n# remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n# remove_replica((1, 1, 4, 4, 5, 5, 5, 6, 7, 7))\n# remove_replica((1, 1, 1, 1, 1, 4, 4, 4, 4, 4))\n\n# Should return:\n# (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\ndef remove_replica(lst):\n\n    # add your code below\n\n    return lst\n\n\n# print(remove_replica((1, 1, 1, 1, 1, 4, 4, 4, 4, 4)))\n# print(remove_replica((1, 1, 1, 1, 1, 4, 4, 4, 4, 4)))\n# print(remove_replica((1, 1, 4, 4, 4, 5, 5, 5, 6, 7)))\n# print(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)))\n# print(remove_replica((1, 1, 4, 4, 5, 5, 5, 6, 7, 7)))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(lst):\n    # your code here\n    result = []\n    for x in lst:\n        if not x in result:\n            result.append(x)\n    return result\n\n#def remove_replica(lst):\n    #result = []\n    #for i in range(len(lst)):\n        #for j in range(i+1, len(lst)):\n            #if lst[i]==lst[j]:\n                #lst[i]='MSP'\n    #return lst\n\ndef remove_replica(lst):\n    lst = sorted(set(lst))\n    return lst\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(lst):\n    return lst\n\n# Enter the list\nlst = [1, 1, 4, 4, 4, 5, 5, 6, 7, 7]\n\n# Calling the function"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_char(str, ch):\n    return str.replace(ch, '')\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str,char):\n    i=0\n    while i<len(str):\n        if str[i]==char:\n            str=str[:i]+str[i+1:]\n        i+=1\n    return str\n    ", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_char(s, c):\n    s = s.replace(c, '')\n    return s\n\ndef main():\n    print(remove_char(\"aba\",'a'))\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\n# +\n# Write your function here\n# -\n\n# # Problem 7\n#\n# Given a string, find the length of the longest substring in the string without repeating characters.\n#\n# eg.\n#\n# Given string: \u201cabcabcbb\u201d\n#\n# Return length: 3\n#\n# Given string: \u201cbbbbb\u201d\n#\n# Return length: 1\n#\n# Given string: \u201cpwwkew\u201d\n#\n# Return length: 3", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    string = string.replace(char, '')\n    return string\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string,char):\n    '''\n    '''\n    string = string.replace(char, '')\n    return string\n\n# Enter the string\nstring = \"aba\"\n\n# Enter the char\nchar = \"a\"\n\n# Calling the function\nstring = remove_Char(string, char)\n\n# Printing the string", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str, char):\n    return str.replace(char,\"\")\n#    for index, i in enumerate(str):\n#        if i != char:\n#            str[index] = i\n#            return \"\".join(str)\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s, c):\n    s_out = \"\"\n    for ch in s:\n        if ch != c:\n            s_out += ch\n    return s_out\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    if char in string:\n        return string.replace(char, '')\n    else:\n        return string\n    \n#assert remove_Char(\"aba\",'a') == \"b\"\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_char(s, c):\n    return s.replace(c, '')\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    if len(lst) == 1:\n        return lst\n    lst.append(lst.pop(0))\n    return lst", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    # write your code here\n    first = lst.pop()\n    lst.insert(0, first)\n    return lst", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(list):\n    # code here\n    if list == []:\n        return []\n    return [list.pop()]+list\n\n\ndef move_first(list):\n    # code here\n    if list == []:\n        return []\n    elif list[0] == None:\n        list[0] = list.pop()\n        return list\n    else:\n        list[0] = list.pop()\n        return list\n\n\n# A. [1,2,3,4]\n# B. [1,2,3,4]\n# C. [1,2,3,4]\n# D. [4,1,2,3]\n# E. [4,1,2,3]", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(l):\n    return l[-1:] + l[:-1]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(l):\n    return l[1:] + l[:1]\n\ndef test_move_first():\n    assert move_first([1,2,3,4]) == [4,1,2,3]\n\ndef move_first_2(l):\n    return l[:-1] + [l[-1]]\n\ndef test_move_first_2():\n    assert move_first_2([1,2,3,4]) == [4,1,2,3]\n\ndef move_first_3(l):\n    return [l[-1]] + l[:-1]\n\ndef test_move_first_3():\n    assert move_first_3([1,2,3,4]) == [4,1,2,3]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\n#my code\ndef move_first(lst):\n    lst.append(lst.pop())\n    return lst\n\n#faster code\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n\n#my code\ndef move_first(lst):\n    return lst.append(lst.pop())\n\n#faster code\ndef move_first(lst):\n    return lst.append(lst.pop(0))\n\n#my code\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n\n#faster code\ndef move_first(lst):\n    return lst.append(lst.pop(0))\n\n#my code\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n\n#faster code\ndef move_first(lst):\n    return lst.append(lst.pop(0))\n\n#my code\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n\n#faster code\ndef move_first(lst):\n    return lst.append(lst.pop(0))\n\n#my code\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n\n#faster code\ndef move_first(lst):\n    return lst.append(lst.pop(0))\n\n#my code\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n\n#faster code\ndef move_first(lst):\n    return lst.append(lst.pop(0))\n\n#my code\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n\n#faster code\ndef move_first(lst):\n    return lst.append(lst.pop(0))\n\n#my code\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n\n#faster code\ndef move_first(lst):\n    return lst.append(lst.pop(0))\n\n#my", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(li):\n    res = []\n    res.append(li.pop())\n    res.extend(li)\n    return res\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef print_list(li):\n    print(\"[\", end=\" \")\n    for i in range(len(li)):\n        if i != 0:\n            print(\", \", end=\"\")\n        print(li[i], end=\" \")\n    print(\"]\")\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(list_):\n    \"\"\"\n    Input: A list of integers\n    Output: A list of integers in reverse order of the input list\n    \"\"\"\n    length = len(list_)\n    list_.append(list_[length - 1])\n    list_.remove(list_[length - 1])\n    return list_\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(mylist):\n    last_index = len(mylist)-1\n    first_index = 0\n    for i in range(len(mylist)):\n        if i != first_index:\n            mylist[i], mylist[last_index] = mylist[last_index], mylist[i]\n            last_index = last_index - 1\n    return mylist\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    return lst[1:] + lst[:1]\n\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return (2*a*b+2*a*c+2*b*c)\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n    return 2*(a + b + c)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(side_a,side_b,side_c):\n    volume = side_a*side_b*side_c\n    print(f\"Volume of cuboid = {volume}\")\n    surface_area = 6*side_a*side_b + 6*side_b*side_c + 6*side_c*side_a\n    print(f\"Surface area of cuboid = {surface_area}\")\n    return surface_area\n\ndef surfacearea_cuboid_param(*side):\n    return 6*side[0]*side[1] + 6*side[1]*side[2] + 6*side[2]*side[0]\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n    return a*b*c + a*b + b*c + 2*a*c + 2*b*c + c*c\n\n#Examples:", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\nfunction surfacearea_cuboid(l,w,h)\n    return 2*l*h + 2*w*h + 2*l*w\nend\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(width,height,depth):\n    return width*height+width*depth+height*depth\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\nfunction surfacearea_cuboid(x::Float64, y::Float64, z::Float64)\n    return 6 * (x * y + x * z + y * z)\nend\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length,breadth,height):\n    if height==0 or breadth==0 or length==0:\n        raise ZeroDivisionError(\"Zero division error, trying to calculate the surface area of a zero dimensional object\")\n    else:\n        return 2*(length*breadth+breadth*height+height*length)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(width, height, depth):\n    \"\"\"\n    >>> surfacearea_cuboid(1,2,3)==22\n    True\n    \"\"\"\n    return 2*(width+depth) * height\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n\treturn [[i*n+j for j in range(m)] for i in range(n)]\n\n#assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(n,m):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(j)\n        matrix.append(row)\n    return matrix\n\ndef multi_list_v1(n,m):\n    matrix = []\n    for i in range(n):\n        row = list(range(m))\n        matrix.append(row)\n    return matrix\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n\tl=[]\n\tfor i in range(n):\n\t\tl.append([0 for j in range(m)])\n\treturn l\n\t", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n, m):\n    return [[0]*m for _ in range(n)]\n\n\n# write the function\ndef fibonacci_in_multi_list(n):\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fibonacci_in_multi_list(n-1)+fibonacci_in_multi_list(n-2)\n\n\n# test the function", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n    return [[0 for i in range(m)] for i in range(n)]\n\ndef multi_list_gen(n,m):\n    result = []\n    for i in range(n):\n        result.append([0 for i in range(m)])\n    return result\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(width, height):\n    arr = []\n    for i in range(height):\n        arr.append([])\n        for j in range(width):\n            arr[i].append(0)\n    return arr\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n    result = []\n    for i in range(n):\n        result.append([0 for j in range(m)])\n        for j in range(m):\n            result[i][j] = i*n +j\n    return result\n\n\ndef main():\n    print(multi_list(3,4))\n\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(cols, rows):\n    return [[0] * cols for i in range(rows)]", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n    return [[0 for j in range(m)] for i in range(n)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row, column):\n    if column == 1:\n        return list(range(0, row))\n    else:\n        return list(map(lambda x: multi_list(row, column - 1) + [x], range(0, row)))\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    pass", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists, index_of_inner_list):\n    list_of_lists = sorted(list_of_lists, key = lambda x: x[index_of_inner_list], reverse = True)\n    return list_of_lists\n\nlist_of_lists = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\n#the function\ndef index_on_inner_list(arr,n):\n    #creating a new list of lists to store the results\n    result=[]\n    for i in arr:\n        result.append(i[n])\n    #sorting the new list\n    result.sort(reverse=True)\n    #re-assigning the list of lists to the original list\n    for i in range(len(arr)):\n        arr[i].insert(n+1,result[i])\n    return result\n\n#input\narr = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\nn = 0\n\n#testing", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(data, index):\n    data = sorted(data, key=lambda x: x[index])\n    return data\n\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    if lst == []:\n        return lst\n    elif lst == None:\n        return None\n    else:\n        new_lst = []\n        for item in lst:\n            new_lst.append(item[index])\n        new_lst = sorted(new_lst)\n        for i in range(len(lst)):\n            lst[i].append(new_lst.index(lst[i][index]))\n        return lst\n\n#Below is an example usage:\n\n# \n# Enter the list\nlst = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\n\n# Calling the function", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list, index):\n    list_sorted = sorted(list, key=lambda x: x[index])\n    return list_sorted\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists,index):\n    return sorted(list_of_lists,key=lambda x: x[index])", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n    \"\"\"\n    return sorted(lst, key=lambda x:x[index])", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(data, index):\n    data.sort(key = lambda x: x[index])\n    return data\n\ndata = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\nindex_on_inner_list(data,0)", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(alist, idx):\n  alist.sort(key=lambda x:x[idx])\n  return alist\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    rotations = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n    return rotations\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(array: List[int]) -> int:\n    \"\"\"\n    Complexity: O(n)\n    \"\"\"\n    # dictionary to store the distance of each element\n    dist = {}\n\n    for i in range(len(array)):\n        # if the element at index i is not in the dict, the distance of the element to itself is 0\n        if i not in dist:\n            dist[i] = 0\n\n        # if i is not at the end of the list and the element at i+1 is in the dict,\n        # add the distance between the element at i and i+1 to the distance of the element at i\n        if i < len(array)-1 and i+1 in dist:\n            dist[i] += dist[i+1]\n\n        # if i is not at the beginning of the list and the element at i-1 is in the dict,\n        # add the distance between the element at i and i-1 to the distance of the element at i\n        if i > 0 and i-1 in dist:\n            dist[i] += dist[i-1]\n\n    # sort the dictionary by distance\n    sorted_dist = sorted(dist.items(), key=lambda x: x[1])\n\n    # count the number of duplicates in the sorted list\n    return len(sorted_dist)-len(set(x[1] for x in sorted_dist))\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] > arr[right]:\n            count += 1\n            left += 1\n        else:\n            count += 1\n            right -= 1\n    return count\n\n# Test cases", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nimport pytest\n\n\ndef find_rotation_count(arr):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    l, r = 0, n - 1\n    while l < r:\n        if arr[l] <= arr[r]:\n            return 0\n        l += 1\n        r -= 1\n    l += 1\n    while l < n:\n        if arr[l] > arr[l - 1]:\n            return l - l + 1\n        l += 1\n    return -1\n\n\ndef test_case_1(arr):\n    assert find_rotation_count(arr) == 3\n\n\ndef test_case_2(arr):\n    assert find_rotation_count(arr) == 2\n\n\n@pytest.mark.parametrize(\"arr\", [[8, 9, 10], [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]])\ndef test_case_3(arr):\n    assert find_rotation_count(arr) == 3\n\n\n@pytest.mark.parametrize(\"arr\", [[8, 9, 10, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]])\ndef test_case_4(arr):\n    assert find_rotation_count(arr) == 3\n\n\n@pytest.mark.parametrize(\"arr\", [[8, 9, 10, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 1, 2, 3, 4, 5, 6, 8]])\ndef test_case_5(arr):\n    assert find_rotation_count(arr) == -1", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\n# 1. brute force O(n)\n\ndef find_rotation_count_naive(array):\n    rotations = 0\n    for index in range(len(array)):\n        if array[index] < array[index + 1]:\n            return rotations\n        rotations += 1\n    return rotations\n\n# 2. binary search O(nlogn)\n\ndef find_rotation_count_binary_search(array):\n    left, right = 0, len(array)\n    while left < right:\n        mid = (left + right) // 2\n        if array[mid] > array[0]:\n            right = mid\n        else:\n            left = mid + 1\n    return right\n\n\n# 3. two pointers (not stable)\n\ndef find_rotation_count_two_pointers(array):\n    left, right = 0, len(array) - 1\n    while left < right:\n        if array[left] > array[right]:\n            return right - left\n        elif array[left] < array[right]:\n            right -= 1\n        else:\n            left += 1\n    return right - left\n\n# 4. three pointers (stable)\n\ndef find_rotation_count_three_pointers(array):\n    left, right, rotation_count = 0, len(array) - 1, 0\n    while left < right:\n        if array[left] > array[right]:\n            right -= 1\n            rotation_count += right - left + 1\n        elif array[left] < array[right]:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    return rotation_count\n\n\n# 5. count inversions\n\ndef find_rotation_count_count_inversions(array):\n    inversions = 0\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] > array[j]:\n                inversions += 1\n    return inversions\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    # Write your code here\n    return 0\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(array):\n  # Get the number of times we have to go around the circle.\n  # The first element in the array is the one we will check against the last element.\n  start = array[0]\n  end = array[-1]\n  num_rotations = 0\n  while start != end:\n    if start > end:\n      start = start - len(array)\n    if end > start:\n      end = end - len(array)\n    if start == end:\n      break\n    num_rotations = num_rotations + 1\n  return num_rotations\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nimport pytest\nfrom redbaron import RedBaron\nimport os\n\n\ndef find_rotation_count(arr):\n    \"\"\"\n    :param arr: list, sorted array in ascending order\n    :return: int, number of rotations in the array\n    \"\"\"\n    return len(arr) - arr.index(min(arr)) - 1\n\n\n@pytest.fixture\ndef fixture_file(request):\n    file_path = os.path.join(os.path.dirname(__file__), 'resources/two_sets.rb')\n    with open(file_path, 'rb') as file:\n        return RedBaron(file)\n\n\ndef test_find_rotation_count(fixture_file):\n    arr = fixture_file.children[1].children[0].children[1].children[0].children[2].children[0].value\n    expected = 2\n    actual = find_rotation_count(arr)\n    assert expected == actual\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    count = 0\n    n = len(arr)\n    max_val = max(arr)\n\n    if max_val == n:\n        return 0\n\n    for i in range(max_val):\n        if arr[i] > i:\n            count += 1\n\n    return count\n"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n# Solution\n\n\ndef even_bit_toggle_number(n):\n    \"\"\"\n    [int] -> int\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number(5)\n    9\n    >>> even_bit_toggle_number(15)\n    15\n    \"\"\"\n    return n & 0b0000000011111111111111111111111\n\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 15\n    assert even_bit_toggle_number(5) == 9\n    assert even_bit_toggle_number(15) == 15", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    mask = 1\n    while mask < n:\n        mask *= 2\n    return n ^ mask\n\ndef toggle_odd_bit(n):\n    mask = 1\n    while mask < n:\n        if mask & 1:\n            n ^= mask\n        mask *= 2\n    return n\n\ndef odd_bit_toggle(n):\n    return n ^ (n % 2)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    num ^= num >> 1\n    num ^= num >> 2\n    num ^= num >> 4\n    num ^= num >> 8\n    num ^= num >> 16\n    num ^= num >> 32\n    num ^= num >> 64\n    num ^= num >> 128\n    return num\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    \"\"\"Return the number with all the odd bits flipped.\"\"\"\n    return num ^ (num & 0xAAAAAAAA)\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(x):\n    if x % 2 == 0:\n        x = x - 1\n    return x\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    # Write your code here\n    for i in range(0,num):\n        num = (num ^ i) & 0xFFFFFFFF\n        num = num ^ (num >> 2) & 0xFFFFFFFF\n        num = num ^ (num >> 4) & 0xFFFFFFFF\n        num = num ^ (num >> 8) & 0xFFFFFFFF\n        num = num ^ (num >> 16) & 0xFFFFFFFF\n    return num\n\n# write your test cases", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    \"\"\"\n    :param num: an integer\n    :return: the number with all the odd bits toggled\n    \"\"\"\n    return num ^ (num - 1)\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 15\n    assert even_bit_toggle_number(0) == 0\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(number):\n    return number ^ (number & -number)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    odd_bits = 0\n    for i in range(32):\n        if i%2 == 1:\n            number = number ^ (1 << i)\n            odd_bits += 1\n    return odd_bits\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    return number ^ number >> 1\n\n#assert even_bit_toggle_number(10) == 15\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 15\n\ndef even_bit_toggle_number_alt(number):\n    \"\"\"\n    A shorter solution using bit shifting\n    \"\"\"\n    return number ^ number >> 1\n\n#assert even_bit_toggle_number_alt(10) == 15\n\ndef test_even_bit_toggle_number_alt():\n    assert even_bit_toggle_number_alt(10) == 15\n\ndef even_bit_toggle_number_alt2(number):\n    \"\"\"\n    Another solution using XOR and a single AND\n    \"\"\"\n    return (number & -number) ^ number\n\n#assert even_bit_toggle_number_alt2(10) == 15\n\ndef test_even_bit_toggle_number_alt2():\n    assert even_bit_toggle_number_alt2(10) == 15\n\ndef even_bit_toggle_number_alt3(number):\n    \"\"\"\n    Another solution using AND\n    \"\"\"\n    return ((number - 1) & number) ^ number\n\n#assert even_bit_toggle_number_alt3(10) == 15\n\ndef test_even_bit_toggle_number_alt3():\n    assert even_bit_toggle_number_alt3(10) == 15\n\ndef even_bit_toggle_number_alt4(number):\n    \"\"\"\n    Another solution using AND\n    \"\"\"\n    return (number ^ (number & -number))\n\n#assert even_bit_toggle_number_alt4(10) == 15\n\ndef test_even_bit_toggle_number_alt4():\n    assert even_bit_toggle_number_alt4(10) == 15\n\ndef even_bit_toggle_number_alt5(number):\n    \"\"\"\n    Another solution using AND\n    \"\"\"\n    return ((~number"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(arr,n):\n\tcounter=0\n\tfor i in range(n):\n\t\tif arr[i]==min(arr):\n\t\t\tcounter+=1\n\treturn counter\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n, array):\n    counter = 0\n    if len(array)==0:\n        return counter\n    min_val = array[0]\n    for i in range(len(array)):\n        if array[i]<min_val:\n            min_val = array[i]\n            counter+=1\n    return counter\n\n# Driver code...!!!!\n#print(frequency_Of_Smallest(5,[1,2,3,4,3]))", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(arr, n):\n    # write your code here\n    return arr[0]\n\n\n# +\nfrom nose.tools import assert_equal\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(l,arr):\n    mini = min(arr)\n    cnt = 0\n    for i in arr:\n        if i == mini:\n            cnt += 1\n    return cnt\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(size, array):\n    smallest_num = array[0]\n    count = 1\n    for i in range(1,size):\n        if array[i] < smallest_num:\n            count = 1\n            smallest_num = array[i]\n        elif array[i] == smallest_num:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(size, arr):\n    if len(arr) < 1:\n        raise ValueError(\"Empty array\")\n    dict = {}\n    smallest = min(arr)\n    for value in arr:\n        if value == smallest:\n            if value in dict:\n                dict[value] += 1\n            else:\n                dict[value] = 1\n    return dict[smallest]", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(size,array):\n    freq = 0\n    for x in range(size):\n        if x == min(array):\n            freq += 1\n    return freq\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n# Write your code here.\ndef frequency_Of_Smallest(l):\n    return l.count(min(l))\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    a = []\n    # your code here\n    return len(a)\n\n# test case\nn = 5\narr = [1,2,3,4,3]", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(arr):\n    count = 0\n    for i in range(0,len(arr)):\n        if(arr[i] == min(arr)):\n            count += 1\n    return count\n\ndef main():\n    print(frequency_Of_Smallest(5,[1,2,3,4,3]))\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n > 3:\n        return get_perrin(n-1) + get_perrin(n-2) + get_perrin(n-3)\n\n#print(get_perrin(9))\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\nfrom common.decorators import time_this\n\n@time_this\ndef get_perrin(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num % 2 == 0:\n        return get_perrin(num/2) + get_perrin(num/2) + get_perrin(num/2)\n    else:\n        return get_perrin(num/2) + get_perrin(num/2) + get_perrin(num/2) + get_perrin(num/2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n# find n'th perrin number for first 100000 numbers\nfor i in range(100000):\n    if get_perrin(i) == i:\n        print(i)\n        break", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n\t#base case\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n + get_perrin(n-1)\n\ndef get_perrin_iter(n):\n\treturn_list = []\n\tcurr_value = 1\n\twhile len(return_list) < n:\n\t\tfor i in range(0, len(return_list)):\n\t\t\tif return_list[i] > curr_value:\n\t\t\t\treturn_list.append(curr_value)\n\t\t\t\tcurr_value += 1\n\t\t\t\tbreak\n\treturn return_list[n-1]\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return n*get_perrin(n-1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n*get_perrin(n-1) + get_perrin(n-2)\n\ndef test():\n    assert get_perrin(1) == 1\n    assert get_perrin(0) == 0\n    assert get_perrin(2) == 3\n    assert get_perrin(3) == 6\n    assert get_perrin(4) == 10\n    assert get_perrin(5) == 15\n    assert get_perrin(6) == 21\n    assert get_perrin(7) == 28\n    assert get_perrin(8) == 36\n    assert get_perrin(9) == 45\n    assert get_perrin(10) == 55\n    assert get_perrin(11) == 66\n    assert get_perrin(12) == 78\n    assert get_perrin(13) == 91\n    assert get_perrin(14) == 105\n    assert get_perrin(15) == 120\n    assert get_perrin(16) == 136\n    assert get_perrin(17) == 153\n    assert get_perrin(18) == 171\n    assert get_perrin(19) == 190\n    assert get_perrin(20) == 210\n    assert get_perrin(21) == 231\n    assert get_perrin(22) == 253\n    assert get_perrin(23) == 276\n    assert get_perrin(24) == 300\n    assert get_perrin(25) == 325\n    assert get_perrin(26) == 351\n    assert get_perrin(27) == 378\n    assert get_perrin(28) == 406\n    assert get_perrin(29) == 435", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return (get_perrin(n - 1) * (2 * n)) + get_perrin(n - 2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n  if n == 0:\n    return 0\n  else:\n    return get_perrin(n-1) + get_perrin(n-2)\n\ndef main():\n  print(get_perrin(9))\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    return 1 + get_perrin(n-1) if n > 0 else 1\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    stack = []\n    for c in s:\n        if c in ['[','(']:\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                stack.append(c)\n            else:\n                if stack[-1] == '}':\n                    stack.pop()\n                else:\n                    stack.append(c)\n    return len(stack)\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(brack):\n    if len(brack) == 0:\n        return 0\n    n = len(brack)\n    cnt = 0\n    for i in range(n):\n        if brack[i] == '[' and brack[i+1] == '[':\n            cnt += 1\n        elif brack[i] == '[' and brack[i+1] == ']':\n            continue\n        elif brack[i] == ']' and brack[i+1] == ']':\n            continue\n        elif brack[i] == ']' and brack[i+1] == '[':\n            cnt += 1\n    return cnt\n\ndef swap_count(brack):\n    return len(brack) - brack.count('[') - brack.count(']')\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    if len(s) % 2 != 0:\n        s = s[0] + \"[\" + s[1:]\n    n = len(s)\n    return 2*n - len(eval(\"\".join([s[i] for i in range(n) if i%2 == 0])))\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    count = 0\n    left = 0\n    right = len(string)-1\n\n    while left < right:\n        if string[left] == '[' and string[right] == ']':\n            left += 1\n            right -= 1\n        elif string[left] == '[' and string[right] == '[':\n            count += 1\n            left += 1\n            right -= 1\n        elif string[left] == ']' and string[right] == ']':\n            count += 1\n            left += 1\n            right -= 1\n        elif string[left] == ']' and string[right] == '[':\n            right -= 1\n\n    return count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    n = len(s)\n    count = 0\n    i = 0\n    while i < n:\n        if s[i] == \"[\":\n            j = i + 1\n            while j < n:\n                if s[j] == \"]\" and s[j-1] == \"[\":\n                    s[i], s[j] = s[j], s[i]\n                    count += 1\n                    break\n                elif s[j] == \"]\":\n                    break\n                j += 1\n        i += 1\n    return count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(str1):\n    balanced = 0\n    for i in range(len(str1)-1):\n        if str1[i] == '[' and str1[i+1] == ']':\n            balanced += 1\n    return balanced\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    l = []\n    for i in string:\n        if i not in l:\n            l.append(i)\n        else:\n            l.remove(i)\n\n    return len(l)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(string):\n    if not string:\n        return 0\n    if len(string) == 1:\n        return 0\n    if string[0] == string[1]:\n        return swap_count(string[2:]) + swap_count(string[3:])\n    return 1 + min(swap_count(string[1:]) + swap_count(string[2:]), swap_count(string[2:]) + swap_count(string[3:]))", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef is_valid_bracket(char):\n    return char in ['[', ']', '{', '}']\n\ndef bracket_pairs(string):\n    \"\"\"\n    Args:\n        string: string\n\n    Returns:\n        dict: pair of opening and closing bracket\n    \"\"\"\n    pairs = {\n        '(': ')',\n        '{': '}',\n        '[': ']',\n    }\n    stack = []\n    for char in string:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif char == '}':\n            if stack:\n                if stack.pop() == '{':\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        elif char == ']':\n            if stack:\n                if stack.pop() == '[':\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        else:\n            raise Exception(\"Not a valid bracket pair\")\n    if len(stack) == 0:\n        return True\n    return False\n\ndef swap_count(string):\n    \"\"\"\n    Args:\n        string: string\n\n    Returns:\n        int: minimum no of swaps required for bracket balancing\n    \"\"\"\n    pairs = bracket_pairs(string)\n    swaps = 0\n    for pair in pairs:\n        swaps += string.count(pair) - 1\n    return swaps\n\ndef swap_count_v2(string):\n    \"\"\"\n    Args:\n        string: string\n\n    Returns:\n        int: minimum no of swaps required for bracket balancing\n    \"\"\"\n    pairs = {\n        '(': ')',\n        '{': '}',\n        '[': ']',\n    }\n    swaps = 0\n    for i in range(len(string)):\n        if string[i] in pairs:\n            swaps += string.count(pairs[string[i]]) - 1\n    return swaps\n\ndef main():\n    print(swap_count(\"[]][][\"))\n    print(swap_count_v2(\"[]][][\"))\n    print(swap_count(\"((()))\"))\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(number):\n    if len(number)%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    even = True\n    if len(hex_num) == 0:\n        return \"Empty string\"\n    if len(hex_num) == 1:\n        return \"Odd\" if int(hex_num[0], 16) % 2 != 0 else \"Even\"\n    else:\n        for i in range(0, len(hex_num), 2):\n            if int(hex_num[i], 16) % 2 != 0:\n                even = False\n        if even:\n            return \"Even\"\n        else:\n            return \"Odd\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_num):\n    return \"Odd\" if len(hex_num)%2 else \"Even\"\n\n#Below is an example usage:\n\nimport string\n\ndef even_or_odd(hex_num):\n    return \"Odd\" if len(hex_num)%2 else \"Even\"\n\n# Enter the hexadecimal number\nhex_num = \"AB3454D\"\n\n# Calling the function", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n# Write your code here\ndef even_or_odd(number):\n    if number[1]%2 != 0:\n        return 'Odd'\n    else:\n        return 'Even'\n\n\ndef even_or_odd(number):\n    if number[1] % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\n\n# assert even_or_odd(\"AB3454D\") == \"Odd\"", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    if num.count(\"1\") % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    if num %2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n\tnum = num.upper()\n\tnum = num.replace(\" \", \"\")\n\tnum = num.replace(\"0X\", \"\")\n\tnum = num.replace(\"X\", \"\")\n\tif num.isnumeric():\n\t\tif len(num) % 2 == 0:\n\t\t\treturn \"Even\"\n\t\telse:\n\t\t\treturn \"Odd\"\n\telse:\n\t\treturn \"Not a number\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_string):\n    res = \"\"\n    for i in range(0,len(hex_string)):\n        res += hex_string[i].lower()\n    if int(res,16) % 2:\n        return \"Odd\"\n    else:\n        return \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n    if len(num)%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n    if num[0] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] and num[1] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] and num[2] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] and num[3] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] and num[4] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n        if int(num, 16) % 2 != 0:\n            return 'Odd'\n        else:\n            return 'Even'\n    else:\n        return 'Wrong'\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    x = 1\n    while x <= n:\n        y = x\n        while y <= n:\n            if y == x:\n                x += 1\n                break\n            elif y % x == 0:\n                x += 1\n                break\n            else:\n                y += 1\n        else:\n            return x\n    else:\n        return x\n\nn = int(input(\"Enter number : \"))\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Solution\n\ndef highest_Power_of_2(n):\n    highest = 0\n    while (n > 0):\n        if (n & 1 == 0):\n            highest = highest + 1\n        n = n >> 1\n    return highest\n\n\n# Test case\n\n# n = 10\n# expected = 8\n# actual = highest_Power_of_2(n)\n# print(f'The highest power of 2 that is less than or equal to {n} is {actual}.')\n# assert actual == expected", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# For 0, return 0\n# For 1, return 0\n# For even numbers, go up to the square root, and check if it is an integer. If it is, then return it.\n# For odd numbers, go up to the square root, and check if it is an integer. If it is, then return it plus 1.\n\n# Time complexity: O(Log n)\n# Space complexity: O(1)\n\n\ndef highest_Power_of_2(n):\n    if n == 0 or n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return n\n    else:\n        return n + 1\n\n\n# 0\n# 1\n# 2\n# 4\n# 8\n# 16\n# 32\n# 64\n# 128\n# 256\n# 512\n# 1024\n# 2048\n# 4096\n# 8192\n# 16384\n# 32768\n# 65536\n# 131072\n# 262144\n# 524288\n# 1048576\n# 2097152\n# 4194304\n# 8388608\n# 16777216\n# 33554432\n# 67108864\n# 134217728\n# 268435456\n# 536870912\n# 1073741824\n# 2147483648\n# 4294967296\n# 8589934592\n# 17179869184\n# 343597383", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    i=1\n    while(2**i<=n):\n        i+=1\n    return i-1\n\n#driver code\nn=int(input())", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    highest_2_pow = 1\n    while highest_2_pow < n:\n        highest_2_pow = highest_2_pow * 2\n    return highest_2_pow", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    i = 0\n    while (n >> i):\n        i += 1\n    return 2 ** i\n\n# Test Cases", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    # Write your code here\n    # Brute Force approach\n    while n>1:\n        if n%2 == 0:\n            n = n/2\n        else:\n            n = n*2\n    return n\n\ndef test_highest_Power_of_2():\n    assert highest_Power_of_2(10) == 8\n\n# test cases\ntest_highest_Power_of_2()\ntest_highest_Power_of_2()\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    return 1\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    for i in range(2, 100):\n        if n < 2**i:\n            return i\n    return n\n\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n# Find the n'th lucas number:\ndef find_lucas(n):\n    \"\"\"\n    >>> find_lucas(9)\n    76\n    \"\"\"\n    pass\n\n#Example input\n#n = 7\n\n#Example output\n#2618\n\n#Warning: this code generation is experimental. Please inspect the code for any bugs before executing.", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return find_lucas(n - 1) + find_lucas(n - 2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n  if n == 0:\n    return 2\n  if n == 1:\n    return 1\n  return find_lucas(n-1) + find_lucas(n-2)\n\ndef main():\n  assert find_lucas(0) == 2\n  assert find_lucas(1) == 1\n  assert find_lucas(2) == 3\n  assert find_lucas(3) == 4\n  assert find_lucas(4) == 7\n  assert find_lucas(5) == 11\n  assert find_lucas(6) == 18\n  assert find_lucas(7) == 29\n  assert find_lucas(8) == 47\n  assert find_lucas(9) == 76\n  assert find_lucas(10) == 123\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 0\n    else:\n        if n == 1:\n            return 2\n        else:\n            return find_lucas(n - 1) + find_lucas(n - 2)\n\n\ndef find_lucas_iter(n):\n    lucas_nums = [0, 2]\n    if n <= len(lucas_nums) - 1:\n        return lucas_nums[n]\n    else:\n        for i in range(len(lucas_nums), n + 1):\n            lucas_nums.append(lucas_nums[i - 1] + lucas_nums[i - 2])\n        return lucas_nums[n]\n\n\ndef test_find_lucas():\n    assert find_lucas(0) == 0\n    assert find_lucas(1) == 2\n    assert find_lucas(2) == 8\n    assert find_lucas(3) == 32\n    assert find_lucas(4) == 120\n    assert find_lucas(5) == 492\n    assert find_lucas(6) == 1952\n    assert find_lucas(7) == 7480\n    assert find_lucas(8) == 27792\n    assert find_lucas(9) == 76448\n    assert find_lucas(10) == 246264\n    assert find_lucas(11) == 680100\n    assert find_lucas(12) == 1931280\n    assert find_lucas(13) == 5233152\n    assert find_lucas(14) == 14524280\n    assert find_lucas(15) == 39500920\n    assert find_lucas(16) == 103577440\n    assert find_lucas(17) == 273335060\n    assert find", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 1 or n == 2:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n# O(n)\ndef find_lucas(n):\n    if n == 1:\n        return 2\n    result = 3\n    for i in range(2,n):\n        result = result * 2 + 1\n    return result\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"\n    Find the nth lucas number.\n\n    >>> find_lucas(1)\n    2\n    >>> find_lucas(2)\n    1\n    >>> find_lucas(3)\n    3\n    >>> find_lucas(4)\n    4\n    >>> find_lucas(5)\n    8\n    >>> find_lucas(6)\n    13\n    >>> find_lucas(7)\n    21\n    >>> find_lucas(8)\n    34\n    >>> find_lucas(9)\n    76\n    >>> find_lucas(10)\n    120\n    \"\"\"\n    if n==1:\n        return 2\n    if n==2:\n        return 1\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 8\n    if n==6:\n        return 13\n    if n==7:\n        return 21\n    if n==8:\n        return 34\n    if n==9:\n        return 76\n    if n==10:\n        return 120\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n\ndef test_find_lucas():\n    from nose.tools import eq_\n    eq_(find_lucas(1), 2)\n    eq_(find_lucas(2), 1)\n    eq_(find_lucas(3), 3)\n    eq_(find_lucas(4), 4)\n    eq_(find_lucas(5), 8)\n    eq_(find_lucas(6), 13)\n    eq_(find_lucas(7), 21)\n    eq_(find_lucas(8), 34)\n    eq_(find_lucas(9), 76)\n    eq_(find_lucas(10), 120)", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    a, b = 2, 1\n    while n != 0:\n        a, b = b, a+b\n        n -= 1\n    return a\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"finds nth Lucas number\"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Tests", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    lucas_list = [2, 1]\n    index = 0\n    while index != n:\n        lucas_list.append(lucas_list[index]+lucas_list[index+1])\n        index+=1\n    return lucas_list[index]\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(array, s):\n    array2 = []\n    for item in array:\n        array2.append(s.format(item))\n    return array2\n\ndef test_add_string():\n    assert add_string([1,2,3,4],'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n\ndef add_string_alternate(array, s):\n    return [s.format(i) + i for i in array]\n\ndef test_add_string_alternate():\n    assert add_string_alternate([1,2,3,4],'temp{0}') == ['temp11', 'temp22', 'temp33', 'temp44']\n\ndef add_string_alternate2(array, s):\n    return list(map(lambda i: s.format(i) + i, array))\n\ndef test_add_string_alternate2():\n    assert add_string_alternate2([1,2,3,4],'temp{0}') == ['temp11', 'temp22', 'temp33', 'temp44']\n\ndef add_string_alternate3(array, s):\n    return [s + i for i in array]\n\ndef test_add_string_alternate3():\n    assert add_string_alternate3([1,2,3,4],'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n\ndef add_string_alternate4(array, s):\n    return list(map(lambda i: s + i, array))\n\ndef test_add_string_alternate4():\n    assert add_string_alternate4([1,2,3,4],'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(list, string):\n    pass\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(items, string):\n    # YOUR CODE HERE\n    return [string.format(i) for i in items]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(a_list, add_string):\n    if not a_list:\n        return None\n    else:\n        first = a_list[0]\n        result_list = [add_string.format(first)]\n        result_list.extend(a_list[1:])\n        return result_list\n\n# the following tests are to make sure the function behaves as expected\n# add_string([1,2,3,4],'temp{0}')", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(l,pre):\n    return [pre+x for x in l]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(items, string):\n    return [string.format(i) for i in items]\n\n# Enter the items\nitems = [1, 2, 3, 4]\n\n# Enter the string\nstring = 'temp{0}'\n\n# Calling the function", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n#function to insert a string at the beginning of the items of a given list\ndef add_string(arr, str):\n    new_list = []\n    for i in range(len(arr)):\n        new_list.append(str.format(i))\n    return new_list\n\n#calling the function", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n# Using a for loop and index\n# def add_string(lst, string):\n#     for i in range(len(lst)):\n#         lst[i] = string.format(i+1)\n#     return lst\n\n# Using a list comprehension\ndef add_string(lst, string):\n    return [string.format(i+1) for i in range(len(lst))]\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(data_set,prefix):\n    if not isinstance(data_set, list):\n        raise TypeError(\"data_set should be a list.\")\n    else:\n        return [prefix + i for i in data_set]", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(my_list, str):\n    new_list = []\n    for item in my_list:\n        new_item = str+str(item)\n        new_list.append(new_item)\n    return new_list\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list_a,list_b,list_c):\n    \"\"\"\n    This function is to convert lists to nested dictionary\n    :param list_a:\n    :param list_b:\n    :param list_c:\n    :return:\n    \"\"\"\n    my_dict = {}\n    for i in range(len(list_a)):\n        my_dict[list_a[i]] = {list_b[i]:list_c[i]}\n    return my_dict\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(class_list, student_list, score_list):\n    d = {}\n    for i in range(0,len(class_list)):\n        d[class_list[i]] = {student_list[i]: score_list[i]}\n    return d", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(listOfTuple,listOfString,listOfInteger):\n    lengthOfTuple = len(listOfTuple)\n    d = {}\n    for index in range(lengthOfTuple):\n        if listOfString[index] not in d.keys():\n            d[listOfString[index]] = {}\n        d[listOfString[index]][listOfTuple[index]] = listOfInteger[index]\n    return d\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(student_id,class_name,mark):\n    length=len(student_id)\n    if length==1:\n        return [{student_id[0]:{class_name[0]:mark[0]}}]\n    else:\n        return [{student_id[0]:{class_name[0]:mark[0]}},{student_id[1]:{class_name[1]:mark[1]}},{student_id[2]:{class_name[2]:mark[2]}},{student_id[3]:{class_name[3]:mark[3]}}]\n\nstudent_id=['S001','S002','S003','S004']", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n# Write your solution here", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n# Write your code here\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(l1,l2,l3):\n    #print(l1,l2,l3)\n    if len(l1)==0:\n        return {}\n    dict1={l1[0]:{l2[0]:l3[0]}}\n    dict1=dict1.copy()\n    for i in range(1,len(l1)):\n        dict1[l1[i]]={l2[i]:l3[i]}\n    return dict1\n\nl1=[\"S001\",\"S002\",\"S003\",\"S004\"]\nl2=[\"Adina Park\",\"Leyton Marsh\",\"Duncan Boyle\",\"Saim Richards\"]\nl3=[85,98,89,92]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(subject_list, student_list, marks_list):\n    return dict(zip(subject_list, zip(student_list, marks_list)))\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1,list2,list3):\n    result = dict()\n    for i in range(len(list1)):\n        result[list1[i]] = dict()\n        for j in range(len(list2)):\n            result[list1[i]][list2[j]] = list3[j]\n    return result\n\nlist1 = [\"S001\", \"S002\", \"S003\", \"S004\"]\nlist2 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nlist3 = [85, 98, 89, 92]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(student_id,location,marks):\n    student_name = []\n    for i in range(len(student_id)):\n        student_name.append(student_id[i] + ' ' + location[i])\n    d = {}\n    for i in range(len(marks)):\n        d.setdefault(student_name[i], {})\n        d[student_name[i]].setdefault(location[i], marks[i])\n    return d\n\nstudent_id = [\"S001\", \"S002\", \"S003\", \"S004\"]\nlocation = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nmarks = [85, 98, 89, 92]"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nfrom functools import reduce\n\ndef get_max_sum(n):\n    fn = [1]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fn.append(fn[-1] * 2)\n        elif i % 3 == 0:\n            fn.append(fn[-1] * 3)\n        elif i % 4 == 0:\n            fn.append(fn[-1] * 4)\n        elif i % 5 == 0:\n            fn.append(fn[-1] * 5)\n        else:\n            fn.append(fn[-1])\n    return max(reduce(lambda x, y: x+y, fn))\n\ndef get_max_sum_bottom_up(n):\n    fn = [1]\n    for i in range(1, n+1):\n        fn.append(max(fn[-1]*2, fn[-1]*3, fn[-1]*4, fn[-1]*5, fn[-1]))\n    return fn[-1]\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 1\n\n    if n == 4:\n        return 1\n\n    if n == 5:\n        return 1\n\n    if n == 6:\n        return 2\n\n    max_sum_of_sub_recursion = 0\n    for i in range(6):\n        if n % i == 0:\n            max_sum_of_sub_recursion = max(get_max_sum(n / i), max_sum_of_sub_recursion)\n            break\n\n    return n + max_sum_of_sub_recursion\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n % 2 == 0:\n        n = n // 2\n    elif n % 3 == 0:\n        n = n // 3\n    elif n % 4 == 0:\n        n = n // 4\n    elif n % 5 == 0:\n        n = n // 5\n    else:\n        n = n // 6\n\n    if n % 2 == 0:\n        return (get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    else:\n        return (get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5) + n)\n\n\ndef test():\n    assert get_max_sum(60) == 106\n    assert get_max_sum(5) == 32\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n    max_sum = 0\n    nums = [i for i in range(n)]\n    nums.sort()\n    for i in range(len(nums)):\n        max_sum += nums[i]\n        if i % 2 == 0:\n            max_sum += nums[i] // 2\n        elif i % 3 == 0:\n            max_sum += nums[i] // 3\n        elif i % 4 == 0:\n            max_sum += nums[i] // 4\n        elif i % 5 == 0:\n            max_sum += nums[i] // 5\n        else:\n            max_sum += nums[i]\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\nimport pytest\n\n\ndef get_max_sum(n: int) -> int:\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    f = [0, 1]\n    while n:\n        f.append(f[-1] + f[-2] + f[-3] + f[-4])\n        n -= 4\n    return max(f)\n\n\ndef test_get_max_sum():\n    assert get_max_sum(60) == 106\n\n\n@pytest.mark.parametrize(\n    (\"n\", \"expected\"),\n    [\n        (3, 4),\n        (25, 31),\n        (50, 83),\n        (100, 147),\n        (101, 148),\n        (200, 420),\n        (201, 421),\n        (202, 422),\n        (203, 423),\n        (204, 424),\n        (205, 425),\n        (206, 426),\n        (207, 427),\n        (208, 428),\n        (209, 429),\n        (300, 651),\n        (301, 652),\n        (302, 653),\n        (303, 654),\n        (304, 655),\n        (305, 656),\n        (306, 657),\n        (307, 658),\n        (308, 659),\n        (309, 660),\n    ],\n)\ndef test_get_max_sum_time_complexity(n: int, expected: int):\n    \"\"\"\n    Assert time complexity is O(logn)\n    :param n:\n    :param expected:\n   ", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    max_sum = get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)\n    return max_sum\n\n\ndef test_get_max_sum():\n    \"\"\"Test get_max_sum function.\"\"\"\n    assert get_max_sum(60) == 106\n    assert get_max_sum(6) == 19", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    \"\"\"\n    # write your function here\n    if n == 1:\n        return 1\n    if n <= 3:\n        return n\n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    \"\"\"\n    return max(sum([get_max_sum(i) for i in (n // 2, n // 3, n // 4, n // 5)]) + n, n)\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nfrom functools import reduce\n\n\ndef get_max_sum(n):\n    return reduce(max, range(n, 0, -1), 0)\n\n\ndef get_max_sum_iter(n):\n    sum_ = 0\n    while n > 0:\n        sum_ += n % 5\n        n //= 5\n    return sum_\n\n\ndef test():\n    # given\n    assert get_max_sum(60) == 106\n    assert get_max_sum(100) == 150\n\n    # when\n    # assert get_max_sum_iter(60) == 106\n    # assert get_max_sum_iter(100) == 150\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    ans = (0, [])\n    for i in lst:\n        if len(i)>ans[0]:\n            ans = (len(i), i)\n    return ans", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lists):\n    max_l = 0\n    max_l_list = []\n\n    for list in lists:\n        if len(list) > max_l:\n            max_l = len(list)\n            max_l_list = list\n            \n    return max_l, max_l_list\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(a):\n    return max((len(list(x)), x) for x in set(map(tuple, a)))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(list1):\n    max_len = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_len, max_list\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(l):\n    max_len = 0\n    max_num_lst = []\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            if type(l[i][j]) is list:\n                l[i][j] = [x for x in l[i][j] if x != None]\n            if type(l[i][j]) is not list:\n                l[i][j] = [l[i][j]]\n            l[i][j] = len(l[i][j])\n            if max_len < l[i][j]:\n                max_len = l[i][j]\n                max_num_lst = l[i][j]\n    return (max_len, max_num_lst)\n\n# Test Code\nl1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    return max(lst, key = lambda x: len(x))\n\nlst = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lists):\n    return max(lists, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nmax_length = lambda a: max(map(lambda x: len(x), a))", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n# Function to find the list with maximum length\ndef max_length_list(arr):\n    max_len = 0\n    max_list = []\n    for i in arr:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return (max_len, max_list)", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nmax_length_list = lambda l: max(l, key = lambda x: len(x))\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tuple_list: tuple) -> bool:\n    \"\"\"\n    check_distinct(tuple_list)\n\n    Checks if the given list is distinct.\n\n    Parameters\n    ----------\n    tuple_list : tuple\n        the list to check\n\n    Returns\n    -------\n    bool\n        True if the list is distinct. False if the list contains duplicates.\n    \"\"\"\n    if len(tuple_list) == len(set(tuple_list)):\n        return True\n    else:\n        return False\n\n#Below is an example usage:\n\nimport random\n\ndef check_distinct(tuple_list: tuple) -> bool:\n    \"\"\"\n    check_distinct(tuple_list)\n\n    Checks if the given list is distinct.\n\n    Parameters\n    ----------\n    tuple_list : tuple\n        the list to check\n\n    Returns\n    -------\n    bool\n        True if the list is distinct. False if the list contains duplicates.\n    \"\"\"\n    if len(tuple_list) == len(set(tuple_list)):\n        return True\n    else:\n        return False\n\n# Enter the list\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Calling the function", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(items):\n    if len(items) > len(set(items)):\n        return False\n    return True\n\n\ndef test_check_distinct():\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\nfrom random import randint\n\ndef check_distinct(tuple_):\n    for i in range(1, len(tuple_)):\n        for j in range(i + 1, len(tuple_)):\n            if tuple_[i] == tuple_[j]:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_):\n    \"\"\"Function to check if given tuple is distinct or not.\"\"\"\n    n = len(tuple_)\n    for i in range(n):\n        for j in range(i+1, n):\n            if tuple_[i] == tuple_[j]:\n                return False\n    return True\n\n#Below is an example usage:\n\n# Enter the tuple\ntuple_ = (1, 4, 5, 6, 1, 4)\n\n# Calling the function", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    if len(set(tup)) == len(tup):\n        return True\n    return False\n\n#Below is an example usage:\n\nimport random\n\ndef check_distinct(tup):\n    if len(set(tup)) == len(tup):\n        return True\n    return False\n\n# Enter the tuple\ntup = (1, 4, 5, 6, 1, 4)\n\n# Calling the function", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\ndef test():\n    assert check_distinct((1, 2, 3, 4)) == False\n    assert check_distinct((1, 2, 3, 4, 5)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 1, 4)) == False\n    assert check_distinct((1, 2, 3, 4, 5, 6, 1, 4, 2)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 1, 4, 2, 2, 3, 4)) == False\n\ntest()", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    if len(set(tup)) == len(tup):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple):\n    for i in tuple:\n        if i in tuple[tuple.index(i)+1:]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(t):\n\tl = len(t)\n\tseen = set()\n\n\tfor i in range(l):\n\t\tif t[i] in seen:\n\t\t\treturn False\n\n\t\tseen.add(t[i])\n\n\treturn True\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    for char in string:\n        if char not in string[1:]:\n            return char\n    return None\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    length = len(string)\n    for i in range(length):\n        if string[i] not in string[i+1:]:\n            return string[i]\n    return None", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\nfrom typing import List, Optional, Dict\nimport string\n\n\ndef first_non_repeating_character(string: str) -> Optional[str]:\n    \"\"\"\n    A function to find the first non repeating character in a given string.\n\n    >>> first_non_repeating_character(\"abcabc\")\n    None\n\n    >>> first_non_repeating_character(\"abcd\")\n    'd'\n\n    >>> first_non_repeating_character(\"a\" * 10)\n    None\n\n    >>> first_non_repeating_character(\"ab\")\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 100)\n    None\n\n    >>> first_non_repeating_character(\"ab\" * 1000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 10000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 100000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 1000000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 10000000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 100000000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 1000000000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 10000000000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 100000000000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 1000000000000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\" * 10000000000000)\n    'c'\n\n    >>> first_non_repeating_character(\"ab\"", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    for i in s:\n        if s.count(i) == 1:\n            return i\n    return None", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    # TODO: Write your code here\n    # Hint: use a set\n    # string set is unique values\n    # create set\n    s = set(string)\n    # get all unique values in the string\n    unique = set()\n    for i in s:\n        if i in unique:\n            continue\n        unique.add(i)\n    # get all elements of unique that are not in s\n    for x in unique:\n        if x not in s:\n            return x", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    if len(set(string)) < len(string):\n        return string[0]\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(str):\n    return next((c for c in str if c not in str[:c.index(c)]), None)\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(str):\n    \"\"\"\n    Inputs: a string\n    Outputs: first non repeating character or None if there is no such character\n    \"\"\"\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if(str[i] != str[j]):\n                return str[i]\n    return None\n\n#Tests", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\nimport string\n\ndef first_non_repeating_character(text):\n    new_string = set()\n    for char in text:\n        if char in new_string:\n            return None\n        new_string.add(char)\n    return new_string\n\n\n# print(first_non_repeating_character(\"abcabc\"))\n"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(str):\n    if re.match(\"^[A-Za-z]{1}\",str) and re.match(\".*[A-Za-z]{1}$\",str):\n        return \"Valid\"\n    else:\n        return \"Not Valid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(s):\n    return 'Valid' if re.match('^[a-zA-Z]+$', s[0]) and re.match('^[a-zA-Z]+$', s[-1]) else 'Invalid'\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# Function to check whether a string starts and ends with the same character or not.\ndef check_char(str):\n    if str.startswith(str[0]) and str.endswith(str[-1]):\n        return \"Valid\"\n    return \"Invalid\"\n\n# Driver code.\nstr = \"abba\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(str):\n    pattern = '^(.*?)(.)(.*)$'\n    if re.search(pattern, str):\n        return \"Valid\"\n    else:\n        return \"Not Valid\"\n\n#Test Code", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(s):\n    if re.search(\"^[a-zA-Z]+$\",s) != None and re.search(s+\"[a-zA-Z]+$\",s) != None:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# for length check\ndef length_check(s,t):\n    if len(s) == len(t):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# for palindrome check\ndef palindrome_check(s):\n    if s == s[::-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# for vowel check\ndef vowel_check(s):\n    for i in s:\n        if i.isalpha() and i.islower():\n            pass\n        elif i.isalpha() and i.isupper():\n            pass\n        else:\n            return \"Invalid\"\n    return \"Valid\"\n\n# for all upper case check\ndef all_upper_check(s):\n    if re.search(\"[A-Z]+$\",s) != None:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# for all lower case check\ndef all_lower_check(s):\n    if re.search(\"[a-z]+$\",s) != None:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# for all digit check\ndef all_digit_check(s):\n    if re.search(\"[0-9]+$\",s) != None:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# for all alphanumeric check\ndef all_alpha_check(s):\n    if re.search(\"^[a-zA-Z0-9]+$\",s) != None:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# for alphabets of specific case check\ndef alpha_case(s):\n    if re.search(\"^[A-Za-z]+$\",s) != None:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# for vowels only check\ndef vowel_only(s):\n    for i in s:\n        if", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(str1):\n    # write your code here\n    if re.match(\"^[a-zA-Z]+$\",str1) and re.match(\"$\" + str1[0],str1):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nimport re\n\ndef check_char(string):\n    try:\n        if re.match(\"^{}$\".format(string[0]), string[0]) and re.match(\"^{}$\".format(string[-1]), string[-1]):\n            return \"Valid\"\n        else:\n            return \"Invalid\"\n    except:\n        return \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n# Write your code here\nimport re\ndef check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    # Check if first and last character are the same\n    if string[0] == string[-1] and len(set(string)) == len(string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(text):\n    if len(text) > 2:\n        return \"Invalid\"\n    if text[0] != text[-1]:\n        return \"Invalid\"\n    else:\n        return \"Valid\"\n\n# Test case\ntext = \"abba\""], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(*args):\n    \"\"\"\n    Find the median of three numbers\n    :param args:\n    :return:\n    \"\"\"\n    if len(args)<3:\n        raise ValueError(\"Less than three values\")\n\n    values=sorted(args)\n    middle=len(values)//2\n\n    if len(values)%2==0:\n        return (values[middle]+values[middle-1])/2\n    else:\n        return values[middle]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\nimport random\n\n\ndef median_numbers(a, b, c):\n    return (a + b + c) / 3\n\ndef test_median_numbers():\n    assert median_numbers(25,55,65)==55.0\n\ndef get_input():\n    a = random.randint(10,100)\n    b = random.randint(10,100)\n    c = random.randint(10,100)\n    return a,b,c\n\ntest_median_numbers()", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    \"\"\"\n    Sort the input numbers, return the middle value if there is an odd number of numbers, else return the average of the three middle values\n    \"\"\"\n    numbers = sorted([a,b,c])\n    if len(numbers)%2:\n        return numbers[len(numbers)//2]\n    else:\n        return (numbers[len(numbers)//2] + numbers[len(numbers)//2 + 1])/2\n\nmedian_numbers(50,45,30)\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(number1, number2, number3):\n    if number1 < number2 < number3:\n        # median is number2\n        median = number2\n    elif number3 < number2 < number1:\n        # median is number3\n        median = number3\n    elif number2 < number1 < number3:\n        # median is number1\n        median = number1\n    else:\n        # median is number2\n        median = number2\n    return median\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(*numbers):\n\tnumbers.sort()\n\tprint(numbers)\n\tif len(numbers) % 2 == 0:\n\t\treturn (numbers[int(len(numbers)/2)-1]+numbers[int(len(numbers)/2)])/2\n\telse:\n\t\treturn numbers[int(len(numbers)/2)]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a, b, c):\n    \"\"\"\n    Given 3 numbers, return the median.\n    If even, return the average of the 2 middle ones.\n    \"\"\"\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    if c > a and c > b:\n        return c\n    # else:\n    #     return (a+b+c)/3\n\n# Test", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n# Read in the numbers\na = float(input(\"Please enter a number: \"))\nb = float(input(\"Please enter a number: \"))\nc = float(input(\"Please enter a number: \"))\n\n# Sort the numbers", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a > b and a > c:\n        return(c)\n    elif b > a and b > c:\n        return(b)\n    else:\n        return(a)\n    \nmedian_numbers(25,55,65)\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x,y,z):\n    l = [x, y, z]\n    l.sort()\n    if len(l)%2 == 0:\n        m = len(l)//2\n        return (l[m]+l[m+1])/2.0\n    else:\n        return l[len(l)//2]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1,num2,num3):\n    \"\"\" \n    Return the median of three specific numbers.\n    \"\"\"\n    #sort the numbers\n    sorted_numbers = sorted([num1,num2,num3])\n    #if there is an odd number of numbers, the median is the middle one\n    if len(sorted_numbers)%2 != 0:\n        return sorted_numbers[len(sorted_numbers)//2]\n    else:\n        return (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 -1])/2.0\n\ndef test_median_numbers():\n    assert median_numbers(25,55,65)==55.0\n    assert median_numbers(25,55,65)==median_numbers(55,65,25)\n    assert median_numbers(25,55,65)==median_numbers(65,25,55)\n    assert median_numbers(25,55,65)==median_numbers(55,25,65)\n    assert median_numbers(25,55,65)==median_numbers(65,55,25)\n    assert median_numbers(25,55,65)==median_numbers(55,65,25)"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(l):\n    s = 0\n    for i in l:\n        s+=sum(int(x) for x in str(i))\n    return s\n\n#assert sum_of_digits([10,2,56])==14", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    total = 0\n    for i in numbers:\n        total += sum(list(map(int, str(i))))\n    return total\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\nfrom functools import reduce\n\ndef sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of the digits of a list of numbers\n\n    Parameters\n    ----------\n    numbers : list\n        A list of positive integers.\n\n    Returns\n    -------\n    sum : int\n        The sum of the digits of the numbers in the list.\n    \"\"\"\n    return reduce(lambda x,y: x+y, map(lambda x: sum(str(x)), numbers))\n\ndef test_sum_of_digits():\n    assert sum_of_digits([10,2,56])==14\n    assert sum_of_digits([1,2,3])==6\n    assert sum_of_digits([1,2,3,4,5])==15\n    assert sum_of_digits([1,2,3,4,5,6,7,8,9])==45\n    assert sum_of_digits([10000])==4\n    assert sum_of_digits([20000])==8\n    assert sum_of_digits([100000])==4\n    assert sum_of_digits([200000])==8\n    assert sum_of_digits([1000000])==4\n    assert sum_of_digits([2000000])==8\n    assert sum_of_digits([10000000])==4\n    assert sum_of_digits([20000000])==8\n    assert sum_of_digits([100000000])==4\n    assert sum_of_digits([200000000])==8\n    assert sum_of_digits([1000000000])==4\n    assert sum_of_digits([2000000000])==8\n\ndef sum_of_digits_generator(numbers):\n    \"\"\"\n    Compute the sum of the digits of a list of numbers using a generator expression.\n\n    Parameters\n    ----------\n    numbers : list\n        A list of positive integers.\n\n    Returns\n    -------\n    sum : int\n        The sum of", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(values):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return 0\n\n#sum_of_digits([10,2,56])==14\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(list):\n    sum_of_digits = 0\n    for number in list:\n        sum_of_digits = sum_of_digits + int(number)\n    return sum_of_digits", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(number_list):\n\treturn sum([num for num in number_list if num > 9])\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(list_of_numbers):\n    sum_of_digits = 0\n    for n in list_of_numbers:\n        sum_of_digits += n%10\n    return sum_of_digits\n\n#Tests\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    for i in range(len(nums)):\n        sum -= nums[i]\n    return sum\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(num):\n    \"\"\"\n    Args:\n        num (list)\n\n    Returns:\n        sum (int)\n    \"\"\"\n    sum = 0\n    for num in num:\n        sum += num\n\n    return sum\n\n# Assert", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(L):\n    return sum([int(n) for n in str(sum([int(k) for k in str(n)])) for n in L])\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple1, tuple2):\n    return (tuple1[0] ^ tuple2[0], tuple1[1] ^ tuple2[1], tuple1[2] ^ tuple2[2], tuple1[3] ^ tuple2[3])\n\n# Enter the first tuple\ntuple1 = (10, 4, 6, 9)\n\n# Enter the second tuple\ntuple2 = (5, 2, 3, 3)\n\n# Calling the function", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(t1, t2):\n    \"\"\"\n    >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n    (15, 6, 5, 10)\n    \"\"\"\n    return tuple(t1[i] ^ t2[i] for i in range(len(t1)))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tup1, tup2):\n\n    return tuple(map(lambda x,y: x^y, tup1, tup2))", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(a, b):\n  assert len(a)==len(b)\n  return tuple([item^other for item,other in zip(a,b)])\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(nums1, nums2):\n    nums1 = [i ^ j for i, j in zip(nums1, nums2)]\n    return tuple(nums1)", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(t1, t2):\n    \"\"\"\n    Write your code below this line.\n    \"\"\"\n    # Check if the lists have same length\n    if len(t1) != len(t2):\n        raise ValueError(\"Lists have different length\")\n    else:\n        # Checking if lists are of type tuple\n        for i in range(len(t1)):\n            if not isinstance(t1[i], tuple):\n                raise TypeError(\"At least one of the argument is not a tuple\")\n            elif not isinstance(t2[i], tuple):\n                raise TypeError(\"At least one of the argument is not a tuple\")\n            elif len(t1[i]) != len(t2[i]):\n                raise ValueError(\"Lists have different tuples\")\n    # Appending xor in new list\n    result = []\n    for i in range(len(t1)):\n        result.append(tuple(map(operator.xor, t1[i], t2[i])))\n    return result\n\n# Input a tuple of integers\nt1 = (10, 4, 6, 9)\nt2 = (5, 2, 3, 3)\n\n# Input another tuple of integers\nt3 = (1, 2, 3)\nt4 = (3, 4, 5)\n\n# Print the result", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(x, y):\n    x = x[::-1]\n    y = y[::-1]\n    m = len(x)\n    n = len(y)\n    ans = []\n    for i in range(m):\n        ans.append(x[i] ^ y[i])\n    return ans[::-1]\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\nimport math\n\n\ndef bitwise_xor(a, b):\n    \"\"\"Return the result of the bitwise xor operation across the given tuple(s).\n\n    >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n    (15, 6, 5, 10)\n    \"\"\"\n\n    return tuple(\n        a[i] ^ b[i]\n        for i in range(len(a))\n    )\n\n\ndef main():\n    \"\"\"The main function for the problem.\"\"\"\n\n    import doctest\n\n    doctest.testmod()\n\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(input_list):\n    # write your code here\n    count = 0\n    for i in range(len(input_list)-1):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] == input_list[j]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\n# List of Tuples\nlist_tuples = [(3, 4), (1, 2), (4, 3), (5, 6)]\n\n# Function to extract frequency of unique tuples\ndef extract_freq(list_tuples):\n    \n    # Create empty dictionary\n    freq_dict = {}\n    \n    # Loop to iterate over each tuple and count the frequency\n    for item in list_tuples:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n            \n    # Return the frequency\n    return len(freq_dict)\n\n# Driver code", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\nfrom collections import Counter\n\ndef extract_freq(l):\n    return len(Counter(l))\n\n# If you don't want to use the collections.Counter class, use this function\n\ndef extract_freq(l):\n    return sum(1 for i in l)\n\ndef test(t, ans):\n    assert extract_freq(t) == ans\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(order):\n    freq = {}\n    for item in order:\n        key = (item[0], item[1])\n        if key not in freq:\n            freq[key] = 0\n        freq[key] += 1\n    return len(freq)\n\n\n# O(n^2) time and space\ndef extract_freq_improved(order):\n    freq = {}\n    for item in order:\n        key = str(item[0]) + str(item[1])\n        if key not in freq:\n            freq[key] = 0\n        freq[key] += 1\n    return len(freq)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\n# Write your code here\n\ndef extract_freq(list_order):\n    from collections import Counter\n    return len(Counter(tuple(sorted(x)) for x in list_order))\n\n#Test", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(tuples):\n    freq = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if (tuples[i] != tuples[j]):\n                freq += 1\n    return freq\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list_order):\n    \"\"\"\n    Args:\n        list_order: the list to be operated\n\n    Returns:\n        frequency of unique tuples in the given list order\n\n    Raises:\n        None\n    \"\"\"\n    freq = 0\n    list_order.sort()\n    prev_item = list_order[0]\n    for item in list_order[1:]:\n        if item[0] == prev_item[0] and item[1] == prev_item[1]:\n            continue\n        else:\n            freq += 1\n        prev_item = item\n    return freq\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(l):\n    l.sort()\n    t = []\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            t.append(l[i])\n    return len(t)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(values):\n    return len(set(tuple(values)))\n\ndef main():\n    # Your code goes here\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert extract_freq([(3, 4), (1, 2), (4, 3)]) == 2\n    assert extract_freq([(3, 4), (1, 2), (1, 2)]) == 1\n    assert extract_freq([]) == 0\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\nfrom typing import Dict, List\n\n\ndef extract_freq(order: List) -> int:\n    order_dict = {}\n    for i in order:\n        order_dict[i] = order_dict.get(i, 0) + 1\n    return len(order_dict)\n\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(l, r):\n\treturn [(a + b) for a, b in zip(l, r)]\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# O(n) time | O(n) space - where n is the number of elements in the first list\ndef add_nested_tuples(list_1, list_2):\n\n    i = 0\n    new_list = []\n    while i < len(list_1):\n        j = 0\n        while j < len(list_2[i]):\n            new_list.append(list_1[i][j] + list_2[i][j])\n            j += 1\n        i += 1\n\n    return new_list\n\n# O(n) time | O(1) space - where n is the number of elements in the first list\ndef add_nested_tuples_2(list_1, list_2):\n    return [[sum(row) for row in zip(list_1[i], list_2[i])] for i in range(len(list_1))]", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    result = []\n    for i in range(len(t1[0])):\n        temp = (t1[0][i] + t2[0][i], t1[1][i] + t2[1][i])\n        result.append(temp)\n    return result", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tup1, tup2):\n    if not isinstance(tup1, tuple) or not isinstance(tup2, tuple):\n        return False\n    if len(tup1) != len(tup2):\n        return False\n    for i in range(len(tup1)):\n        tup1[i] = tup1[i] + tup2[i]\n    return tup1\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# Recursive function to add nested tuples\ndef add_nested_tuples(a, b):\n    if len(a) == 0:\n        return b\n    else:\n        return (a[0] + b[0], add_nested_tuples(a[1:], b[1:]))\n\n# Driver code\na = ((1, 3), (4, 5), (2, 9), (1, 10))\nb = ((6, 7), (3, 9), (1, 1), (7, 3))\nresult = add_nested_tuples(a, b)", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    answer = []\n    for i in range(len(t1)):\n        answer.append(t1[i] + t2[i])\n    return tuple(answer)\n\nt1 = ((1, 3), (4, 5), (2, 9), (1, 10))\nt2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(a, b):\n    ans = []\n    for i in range(len(a)):\n        if(len(a[i]) == 2 and len(b[i]) == 2):\n            ans.append((a[i][0]+b[i][0], a[i][1]+b[i][1]))\n        else:\n            return None\n    return ans\n\n#print(add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    assert len(t1) == len(t2)\n    return tuple([a+b for (a, b) in zip(t1, t2)])", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n# Solution 1:\ndef add_nested_tuples(t1, t2):\n    # t1 = ((1, 3), (4, 5), (2, 9), (1, 10))\n    # t2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n    res_t = []\n    res_t1 = []\n    res_t2 = []\n    t1.sort(key=lambda x: x[0])\n    t2.sort(key=lambda x: x[0])\n    for x in t1:\n        res_t.append(x)\n    for x in t2:\n        res_t.append(x)\n    res_t.sort(key=lambda x: x[0])\n    return res_t\n\n\n# Solution 2:\ndef add_nested_tuples(t1, t2):\n    # t1 = ((1, 3), (4, 5), (2, 9), (1, 10))\n    # t2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n    res_t = []\n    for i in range(len(t1)):\n        res_t.append((t1[i][0], t1[i][1]+t2[i][1]))\n    res_t.sort(key=lambda x: x[0])\n    return res_t\n\n\ndef add_nested_tuples_optimized(t1, t2):\n    # t1 = ((1, 3), (4, 5), (2, 9), (1, 10))\n    # t2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n   ", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(a, b):\n    return tuple(map(lambda x, y: x + y, a, b))\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    k=p-1\n    answer=1\n    for i in range(r):\n        answer=(answer*n)%p\n        n=n-1\n    return answer\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    if n == 0 or r == 0:\n        return 0\n    if n == 1:\n        return 1\n    l = []\n    for i in range(n, 0, -1):\n        l.append([i, ncr(i, r, p)])\n    for i in range(1, r+1):\n        l[0][1] = ncr(l[0][0], i, p)*l[0][1]%p\n        for j in range(1, n):\n            l[j][1] = ncr(l[j][0], i, p)*l[j-1][1]%p-ncr(l[j-1][0], i, p)*l[j][1]%p\n            if l[j][1] >= p:\n                l[j][1] = l[j][1]-p\n    return l[r-1][1]\n\n\nncr_modp(10,2,13)", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\nimport sys\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Args:\n        n (int): Number of elements to choose from.\n        r (int): Number of elements to be chosen.\n        p (int): The modulus to return.\n    Returns:\n        int: The value of ncr%p.\n    \"\"\"\n    # write your code here\n    # return the result\n    return ( (p-1)//(n-1))%p\n\ndef test():\n    print(\"Running tests...\")\n    assert ncr_modp(10, 2, 13) == 6\n    assert ncr_modp(10, 0, 13) == 1\n    assert ncr_modp(0, 0, 13) == 0\n    print(\"All tests passed!\")\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    \"\"\"\n    ncr mod p(n choose r)\n    \"\"\"\n    n = n%p\n    r = r%p\n    #assert n>=r, \"n must be bigger or equal than r\"\n\n    if r==0 or n==0:\n        return 0\n    if r==1:\n        return n\n\n    fact = 1\n    while r>0:\n        fact = fact*n%p\n        r = r-1\n    return fact%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\nfrom itertools import product\n\ndef ncr_modp(n,r,p):\n    \"\"\"\n    Args:\n        n (int): the n in ncr\n        r (int): the r in ncr\n        p (int): the p in ncr%p\n    Returns:\n        int: ncr%p\n    \"\"\"\n    if n == r == 0:\n        return 1\n    if r == 0:\n        return 0\n    if r == 1:\n        return n\n\n    ans = ncr_modp(n-r, r-1, p)\n    ans = (ans*n)%p\n    ans = (ans*(n-r+1))%p\n    return ans\n\ndef ncr(n,r):\n    \"\"\"\n    Args:\n        n (int): the n in ncr\n        r (int): the r in ncr\n    Returns:\n        int: ncr\n    \"\"\"\n    return ncr_modp(n,r,10**9+7)\n\ndef test():\n    \"\"\"\n    Run tests\n    \"\"\"\n    assert ncr_modp(10,2,13)==6\n    assert ncr_modp(1000000000,1000000000,10**9+7)==1000000000*(10**9+7)**1000000000-1000000000*(10**9+7)**999999999-1000000000*(10**9+7)**999999998+1000000000*(10**9+7)**999999997\n    assert ncr(10,2)==6\n    assert ncr(1000000000,1000000000)==1000000000*(10**9+7)**1000000000-1000000000*(10**9+7)**99", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfunction ncr_modp(n::Integer, r::Integer, p::Integer)\n    if r > n\n        return 0\n    end\n    pnum = convert(BigInt, p)\n    c = 1\n    for i in 1:r\n        c *= n - i + 1\n        c = c % pnum\n    end\n    return c\nend\n\nn = 10\nr = 2\np = 13\nncr_modp(n,r,p)\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    if n == 0 or r == 0 or p == 0:\n        return 0\n    if n == 1 or r == 1:\n        return 1\n    if r > n:\n        return 0\n    a = ncr_modp(n-r,r,p)\n    b = ncr_modp(n-r-1,r,p)\n    c = ncr_modp(n-r-1,r-1,p)\n    return (a+b)%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nimport math\n\n# given n,r and p\ndef ncr_modp(n,r,p):\n    assert p>0,\"Error: only support p>0\"\n    assert n>0,\"Error: only support n>0\"\n    assert r>0,\"Error: only support r>0\"\n    assert n%p == 0,\"Error: only support n mod p = 0\"\n    assert r%p == 0,\"Error: only support r mod p = 0\"\n    if r == 0 or n == r:\n        return 1\n    return (ncr_modp(n-1,r-1,p)%p + ncr_modp(n-1,r,p)%p)%p\n\n# test function\ndef test_ncr_modp():\n    print(ncr_modp(10,2,13)==6)\n    print(ncr_modp(4,2,7)==2)\n    print(ncr_modp(10,3,13)==5)\n    print(ncr_modp(5,1,5)==1)\n    print(ncr_modp(7,3,13)==6)\n    print(ncr_modp(1,4,13)==1)\n    print(ncr_modp(8,1,13)==1)\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    if n==0 or r==0:\n        return 1\n    if n>r:\n        n,r = r,n\n    fac1 = 1\n    for i in range(1,n+1):\n        fac1 = fac1*(i)%p\n    fac2 = 1\n    for i in range(1,r+1):\n        fac2 = fac2*(i)%p\n    fac3 = 1\n    for i in range(1,n+r+1):\n        fac3 = fac3*(i)%p\n    return (fac1//fac2)*fac3%(p)\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    if not (n > 0 and r > 0 and p > 1):\n        return \"Invalid input\"\n    if not (n % p == 0 and r % p == 0 and ncr(n,r) % p == 0):\n        return \"Not a Catalan number\"\n    return ncr(n,r) % p\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n\n    if re.match(r'^https?://[a-zA-Z0-9]+([\\-\\.]{1}[a-zA-Z0-9]+)*\\.[a-zA-Z]{2,5}(:[a-zA-Z0-9]+)*(\\/.*)?$',url):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nfrom re import search, match, compile\nfrom re import sub\n\n\ndef is_valid_url(url: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid url\n\n    >>> is_valid_url(\"https://www.google.com\")\n    True\n\n    >>> is_valid_url(\"www.google.com\")\n    False\n\n    >>> is_valid_url(\"https://\")\n    False\n\n    >>> is_valid_url(\"www.google.com/a/b/c\")\n    False\n    \"\"\"\n    if not url or not len(url) > 0:\n        return False\n\n    if url[:4] != \"http\" and url[:4] != \"https\":\n        return False\n\n    if not url.startswith(\"http://\") and not url.startswith(\"https://\"):\n        return False\n\n    if \"://\" not in url:\n        return False\n\n    if \"www.\" not in url:\n        return False\n\n    pattern = r\"^https?://(www\\.)?[-A-Za-z0-9@:%._\\+~#=]{1,256}\\.[A-Za-z0-9()]{1,6}\\b([-A-Za-z0-9()@:%_\\+.~#?&//=]*)$\"\n\n    if search(pattern, url):\n        return True\n\n    return False\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_url(url):\n    \"\"\"\n    Checks if a URL is valid\n\n    :param url: The URL to be checked\n    :return: True if valid, False otherwise\n    \"\"\"\n    if re.search(r\"https?:\\/\\/.*\\.(com|co\\.uk|org|net)\", url):\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    if (re.match(\"^https?://\", url)):\n        return True\n    return False\n\ndef is_valid_URL(url):\n    return re.match(\"^https?://\", url) is not None\n\ndef is_valid_URL(url):\n    return bool(re.match(\"^https?://\", url))\n\ndef is_valid_URL(url):\n    if url.startswith(\"https://\"):\n        return True\n    return False", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\nimport os\n\ndef is_valid_URL(s):\n    pattern = '^(http://|https://|ftp://)[a-zA-Z0-9.-]*'\n\n    match = re.match(pattern, s)\n    if match:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(s):\n    # remove the // and . at the end\n    s = s.split('/')\n    s = s[:-2]\n    s = '/'.join(s)\n    # s = s.replace('www.', '')\n    # s = s.replace('.', '')\n    # print(s)\n    # print('s', s)\n    return bool(re.match(r'^(https?://)?'  # scheme is http or https\n                        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+[A-Z]{2,6}\\.?|'  # domain...\n                        r'localhost|'  # localhost...\n                        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n                        r'(?::\\d+)?'  # optional port\n                        r'(?:/?|[/?]\\S+)$', s))", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    url_pattern = re.compile(r'^https?://(\\w+\\.)+(\\w+)$')\n    return url_pattern.search(url)\n\n# Change the following code so that it correctly checks if the given url is valid or not.\n\ndef is_valid_URL(url):\n    url_pattern = re.compile(r'^https?://(\\w+\\.)+(\\w+)$')\n    return url_pattern.search(url)\n\n# Enter your code below this line\nurl = input()", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    return bool(re.match(r\"(http(s)?:\\/\\/)?([\\w\\d\\.]+(\\:[\\w\\d\\.]+)+\\:(\\d+))?(\\/([\\w\\d\\./?]+))?([#]([\\w\\d\\./?]+))?\", url))\n\ndef test():\n    assert is_valid_URL(\"https://www.google.com\") == True\n    assert is_valid_URL(\"http://www.google.com\") == True\n    assert is_valid_URL(\"https://www.google.com#search?q=test\") == True\n    assert is_valid_URL(\"http://www.google.com/google.com\") == True\n    assert is_valid_URL(\"http://www.google.com/google.com?q=test\") == True\n    assert is_valid_URL(\"http://www.google.com/google.com?q=test&page=2\") == True\n    assert is_valid_URL(\"http://www.google.com/google.com?q=test&page=2#search\") == True\n    assert is_valid_URL(\"http://www.google.com/google.com/google.com?q=test&page=2#search\") == True\n    assert is_valid_URL(\"http://www.google.com/google.com/google.com?q=test&page=2#search\") == False\n    assert is_valid_URL(\"http://www.google.com/google.com/google.com#search\") == False\n    assert is_valid_URL(\"http://www.google.com/google.com/google.com#search?q=test\") == False\n    assert is_valid_URL(\"http://www.google.com/google.com/google.com#search?q=test&page=2\") == False\n\ntest()", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    return True if re.search(r'^https?://', url) else False\n\n# print(is_valid_URL(\"https://www.google.com\"))\n# print(is_valid_URL(\"www.google.com\"))\n# print(is_valid_URL(\"https://www.google.com/\"))\n# print(is_valid_URL(\"www.google.com/\"))\n# print(is_valid_URL(\"www.google.com/dir/file\"))\n# print(is_valid_URL(\"www.google.com/dir/file?key=value\"))\n# print(is_valid_URL(\"https://www.google.com/dir/file?key=value\"))\n# print(is_valid_URL(\"www.google.com/dir/file#key=value\"))\n# print(is_valid_URL(\"https://www.google.com/dir/file#key=value\"))\n# print(is_valid_URL(\"www.google.com/dir/file#key=value?key=value\"))\n# print(is_valid_URL(\"https://www.google.com/dir/file#key=value?key=value\"))\n# print(is_valid_URL(\"www.google.com/dir/file#key=value?key=value&key=value\"))\n# print(is_valid_URL(\"https://www.google.com/dir/file#key=value?key=value&key=value\"))\n\n# url = input()\n# print(is_valid_URL(url))", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_url(url: str) -> bool:\n    \"\"\"Checks if a given URL is valid or not using regex\"\"\"\n    regex = r'^(?:http(s)?://)?([\\w.-]+(?:\\.[\\w\\.-]+)+)(?:[\\w.,@?^=%&:/~+#-]*[\\w@?^=%&/~+#-])?(\\?[\\w@?^=%&/~+#-]+[\\w@?^=%&/~+#-]*|$)'\n    if re.match(regex, url):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(num1,num2):\n    if num1 > num2:\n        return num2\n    else:\n        return num1\n    \n#assert minimum(1,2) == 1\n\n# +", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x, y):\n    if x < y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(n1,n2):\n    if n1 < n2:\n        return n1\n    else:\n        return n2\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x,y):\n    if x > y:\n        return y\n    else:\n        return x\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(n1, n2):\n\t\"\"\"\n\tTakes two integers, n1 and n2, as arguments and returns\n\tthe smaller of the two numbers.\n\t\n\t>>> minimum(1, 2)\n\t1\n\t>>> minimum(1, 1)\n\t1\n\t\"\"\"\n\t\n\t# type error handling\n\tif type(n1) != type(n2) or not isinstance(n1, int) or not isinstance(n2, int):\n\t\traise TypeError('Numbers must be integers')\n\t\n\t# success handling\n\tif n1 < n2:\n\t\treturn n1\n\telse:\n\t\treturn n2\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n#testcases\n#1\n#1\n#2\n#3\n\ndef minimum(x,y):\n    if x < y:\n        return x\n    else:\n        return y\n\ndef test():\n    assert minimum(1,2) == 1\n\ntest()", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\nimport sys\n\ndef minimum(x,y):\n    \"\"\"Return the minimum of x and y.\"\"\"\n\n    if (x < y):\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    return a if a < b else b\n\n# Program to test above function", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    return min(a,b)\n\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuple,find_element):\n    # check element in tuple\n    if find_element in tuple:\n        # if find_element exists return True\n        return True\n    else:\n        # else return False\n        return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, el):\n    if el in tuplex:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, val):\n    for i in tup:\n        if i == val:\n            return True\n    return False\n\n\n#-------------------------------------------------------------\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex,el):\n    if el in tuplex:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, element):\n    \"\"\"checks if element is in the tuple\"\"\"\n    for x in tup:\n        if x == element:\n            return True\n    return False", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,element):\n    return element in tup\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup,element):\n    for i in tup:\n        if i==element:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,x):\n    if x in tup:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tupl,x):\n    if x in tupl:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex,element):\n    return element in tuplex\n\n\n# +\n# Write a function to convert a list to a tuple\ndef list2tup(l):\n    return tuple(l)\n\n# Test your function"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n\n# +", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if (num % 2 == 0):\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if(num%2 == 0):\n        print(\"Even Parity\")\n    elif(num%2 != 0):\n        print(\"Odd Parity\")\n    else:\n        print(\"Invalid Input\")\n\nnum = int(input(\"Enter a number to find the parity : \"))\nfind_Parity(num)", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\n# Sol 2.\n# In this case, we add 1 to the first number and 0 to the second number\ndef find_Parity(number):\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# If you like you can give it a try\nnumber = 12", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    return \"Even Parity\" if num%2==0 else \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_parity(n):\n    if n % 2 == 0:\n        return 'Even Parity'\n    else:\n        return 'Odd Parity'\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    \"\"\"\n    find Parity of a number.\n    \"\"\"\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n\n#test case 1", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(a):\n    if a % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n    ", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_parity(num):\n    if (num % 2) == 0:\n        return 'Even Parity'\n    else:\n        return 'Odd Parity'\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    rearranged_n = str(n)\n    digits = list(rearranged_n)\n    largest_digit = -1\n    new_rearranged_n = ''\n    for i in range(len(digits)):\n        largest_digit = max(largest_digit, digits[i])\n        new_rearranged_n += str(largest_digit)\n    new_rearranged_n = int(new_rearranged_n)\n    return new_rearranged_n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    \"\"\"\n    >>> rearrange_bigger(12)==21\n    True\n    >>> rearrange_bigger(242)==342\n    True\n    \"\"\"\n    number_str = str(number)\n    #print number_str\n    number_str = number_str[::-1]\n    #print number_str\n    number_str = list(number_str)\n    #print number_str\n    #print number_str[0]\n    #print number_str[1]\n    #print number_str[2]\n    #print number_str[3]\n    #print number_str[4]\n    #print number_str[5]\n    #print number_str[6]\n    #print number_str[7]\n    #print number_str[8]\n    #print number_str[9]\n    #print number_str[10]\n    #print number_str[11]\n    new_number = ''\n    for i in range(len(number_str)):\n        if i % 2 != 0:\n            new_number = new_number + number_str[i]\n    #print new_number\n    return int(new_number)\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    i=0\n    n=len(str(num))\n    i=0\n    ans=''\n    while i<n:\n        ans+=str(num%10)\n        num/=10\n        i+=1\n    ans+=str(num)\n    return int(ans)\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    arr = [int(i) for i in str(number)]\n    k = len(arr)\n    while k > 1:\n        i = k - 1\n        j = k - 2\n        while j >= 0 and arr[i] >= arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            i -= 1\n            j -= 1\n        if j == -1:\n            break\n        k -= 1\n    return int(\"\".join([str(i) for i in arr]))\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    num = str(num)\n    new_num = ''\n    new_num += max(num)\n    new_num += num[::-1][1:-1]\n    new_num += num[::-1][0]\n    return int(new_num)\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(number):\n    #Write your code here\n    arr = list(map(int, str(number)))\n    for i in range(len(arr)):\n        if arr[i] == max(arr):\n            arr.remove(arr[i])\n    arr.sort()\n    return (\"\".join(map(str, arr)))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    l = list(str(num))\n    l = l[::-1]\n    n = 0\n    for i in l:\n        n += int(i)*10**int(len(l)-1)\n    return n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n\treturn list(str(num)[::-1])\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\nfrom typing import List\n\n\ndef rearrange_bigger(num: int) -> int:\n    l_num = list(str(num))\n    for i in range(len(l_num) - 1):\n        if int(l_num[i]) > int(l_num[i+1]):\n            l_num[i], l_num[i+1] = l_num[i+1], l_num[i]\n    return int(''.join(l_num))\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    s = str(num)\n    return int(''.join(sorted(reversed(s))))\n\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(first, second, k):\n    pairs = []\n    for i in range(k):\n        pairs.append((first[i], second[i]))\n    return pairs\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1,arr2,k):\n    arr1.sort()\n    arr2.sort()\n    res=[]\n    for i in range(k):\n        res.append([arr1[i], arr2[i]])\n    return res\n\n\nk_smallest_pairs([1,3,7],[2,4,6],2)", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1,arr2,k):\n    if k == 1:\n        return [[min(arr1),min(arr2)]]\n    arr1_set = set(arr1)\n    arr2_set = set(arr2)\n    arr12_set = arr1_set.intersection(arr2_set)\n    if len(arr12_set) > k:\n        arr12_set = list(arr12_set)\n        arr12_set.sort()\n        return k_smallest_pairs(arr12_set[:-k],arr2_set,k)\n    arr12 = list(arr12_set)\n    arr12.sort()\n    return k_smallest_pairs(arr12,arr2_set,k-len(arr12)) + k_smallest_pairs(arr12[:-1],arr2_set,k-1)\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nimport numpy as np\n\ndef k_smallest_pairs(first_array, second_array, k):\n    first_array = np.sort(first_array)\n    second_array = np.sort(second_array)\n    total = len(first_array)\n    count = 0\n    count_pairs = []\n    while count < k:\n        for i in range(total):\n            if first_array[i] < second_array[i]:\n                count += 1\n                count_pairs.append([first_array[i], second_array[i]])\n        k = len(count_pairs)\n        first_array = np.delete(first_array, 0)\n        second_array = np.delete(second_array, 0)\n    return count_pairs\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a, b, k):\n    \"\"\"\n    :param a:\n    :param b:\n    :param k:\n    :return:\n    \"\"\"\n    if k > len(a) * len(b):\n        return None\n    if k == 0:\n        return []\n    if k == 1:\n        return [[a[0], b[0]]]\n\n    result = []\n    for i in range(k):\n        result.append([a[i], b[i]])\n\n    heapify(result)\n    while k > 1:\n        tmp = heappop(result)\n        result.append([tmp[0], b[i]])\n        result.append([a[j], tmp[1]])\n        i += 1\n        j += 1\n        k -= 1\n\n    return result\n\ndef heapify(arr):\n    \"\"\"\n    :param arr:\n    :return:\n    \"\"\"\n    l = len(arr)\n    i = int(l / 2)\n    while i >= 0:\n        sift_down(arr, i, l - 1)\n        i -= 1\n\ndef sift_down(arr, i, j):\n    \"\"\"\n    :param arr:\n    :param i:\n    :param j:\n    :return:\n    \"\"\"\n    while i * 2 + 1 <= j:\n        max_index = i * 2 + 1\n        if arr[max_index + 1] > arr[max_index]:\n            max_index += 1\n        if arr[max_index] > arr[i]:\n            break\n        arr[max_index], arr[i] = arr[i], arr[max_index]\n        i = max_index\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(first_array, second_array, k):\n    # sort arrays\n    first_array.sort()\n    second_array.sort()\n    # output\n    return [[first_array[i], second_array[i]] for i in range(k)]\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(first_array, second_array, k):\n    import heapq\n    \n    # create a priority queue\n    pq = [(a,b) for a in first_array for b in second_array]\n    heapq.heapify(pq)\n    result = []\n\n    # sort and return k elements\n    for _ in range(k):\n        result.append(heapq.heappop(pq))\n\n    return result\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(array1,array2,k):\n    array1.sort()\n    array2.sort()\n    min_pairs = []\n    for i in range(k):\n        if array1[i]==array2[i]:\n            min_pairs.append([array1[i], array2[i]])\n            del array1[i]\n            del array2[i]\n        else:\n            break\n    return min_pairs\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\nfrom __future__ import division\n\nfrom collections import defaultdict\n\ndef k_smallest_pairs(arr1, arr2, k):\n    \"\"\"\n    @param arr1: the first array\n    @param arr2: the second array\n    @param k: an integer\n    @return: a list of tuples\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    dp = defaultdict(set)\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            dp[(arr1[i], arr2[j])].add(i)\n            dp[(arr2[j], arr1[i])].add(i)\n    return [(arr1[i], arr2[j]) for i,j in dp if len(dp[(arr1[i], arr2[j])])>=k]", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a, b, k):\n    '''\n    :param a: list, the first array\n    :param b: list, the second array\n    :param k: int, the k number of pairs you want to find\n    :return: list of pairs, [[], []]\n    '''\n    if k == 0:\n        return []\n    elif k == 1:\n        return [[a[i], b[i]] for i in range(len(a))]\n    else:\n        return sorted(k_smallest_pairs(a, b, k - 1) + k_smallest_pairs(a, b, k - 1) + [[a[i], b[i]] for i in range(len(a))])\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom operator import mul\n\ndef min_product_tuple(tuple_list):\n    return min(map(mul, tuple_list))\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(pairs):\n    if not pairs:\n        return 0\n    for i in pairs:\n        if i[0] >= i[1]:\n            continue\n        else:\n            pairs.remove(i)\n            return i[0] * i[1]\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(list):\n    \"\"\"\n    return minimum product from list of tuple\n    \"\"\"\n    return min(i[0] * i[1] for i in list)\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuplist):\n    min_product = 9999999999\n    for tup in tuplist:\n        if tup[0]*tup[1] < min_product:\n            min_product = tup[0]*tup[1]\n    return min_product\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(l):\n    product = 1\n    for i in l:\n        product = product*i[0]*i[1]\n    return product\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuple_list):\n    min_product = 100\n    for item in tuple_list:\n        min_product = min(min_product, item[0]*item[1])\n    return min_product", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(num):\n    minimum = 100000000\n    for i in range(len(num)):\n        for j in range(i + 1, len(num)):\n            if num[i][0]*num[j][1] < minimum:\n                minimum = num[i][0]*num[j][1]\n\n    return minimum\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n# Set up\ndef min_product_tuple(lst):\n    \"\"\"\n    Return the minimum product from a list of tuples\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    \"\"\"\n    # Set up\n    min_num = -float('inf')\n    for i in range(0,len(lst)-1):\n        for j in range(i+1,len(lst)):\n            prod = lst[i][0] * lst[j][1]\n            if prod < min_num:\n                min_num = prod\n    # Return the min num\n    return min_num", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(data):\n    min_product = 100000\n    for i in data:\n        for j in data:\n            if i[0] != j[0] and i[1] != j[1]:\n                if min_product > i[1]*j[1]:\n                    min_product = i[1]*j[1]\n    return min_product\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(pair):\n    return min(t[0]*t[1] for t in pair)\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list_):\n    i=0\n    if type(list_) is list:\n        for num in list_:\n            if i==0:\n                val=num\n                i+=1\n            else:\n                if num<val:\n                    val=num\n        return val\n    else:\n        print(\"Please provide a list\")\n        return -1", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list):\n    i = 0\n    j = len(list) - 1\n    while i < j:\n        if list[i] > list[j]:\n            j = j - 1\n        else:\n            i = i + 1\n    return list[j]\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(a_list):\n    '''\n    a_list: a list of items in which the first item can be anything\n    returns: the minimum value in the list\n    '''\n    if len(a_list) == 1:\n        return a_list[0]\n    else:\n        if a_list[0] <= a_list[1]:\n            return min_val(a_list[1:])\n        else:\n            return min_val(a_list[1:])\n\n# test cases", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list):\n    return min(list)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n\n    >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n    2\n\n    :param lst: A list containing numbers and strings.\n    :return: The minimum value in the list.\n    \"\"\"\n    min_val = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val\n\n\n# -\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    return min(lst)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(arr):\n    res = 2000\n    for i in arr:\n        if i<res:\n            res = i\n    return res\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    min_val = lst[0]\n    for val in lst[1:]:\n        if min_val > val:\n            min_val = val\n    return min_val\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    min_val = lst[0]\n    for item in lst:\n        if item < min_val:\n            min_val = item\n    return min_val\n\n#You can also use min() from the Python standard library", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    # insert your code here\n    return sorted(lst)[0]\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(input):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), input).capitalize()\n\n#Below is an example usage:\n\nimport re\n\ndef snake_to_camel(input):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), input).capitalize()\n\n# Enter the string\ninput = \"android_tv\"\n\n# Calling the function", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(str):\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', str).lower()\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\n# Test 1\n# Output: 'AndroidTv'\n\n# Test 2\n# Output: 'AndroidTv'\n\n# Test 3\n# Output: 'AndroidTv'\n\n# Test 4\n# Output: 'AndroidTv'\n\n# Test 5\n# Output: 'AndroidTv'\n\n# Test 6\n# Output: 'AndroidTv'\n\n# Test 7\n# Output: 'AndroidTv'\n\n# Test 8\n# Output: 'AndroidTv'\n\n# Test 9\n# Output: 'AndroidTv'\n\n# Test 10\n# Output: 'AndroidTv'\n\n# Test 11\n# Output: 'AndroidTv'\n\n# Test 12\n# Output: 'AndroidTv'\n\n# Test 13\n# Output: 'AndroidTv'\n\n# Test 14\n# Output: 'AndroidTv'\n\n# Test 15\n# Output: 'AndroidTv'\n\n# Test 16\n# Output: 'AndroidTv'\n\n# Test 17\n# Output: 'AndroidTv'\n\n# Test 18\n# Output: 'AndroidTv'\n\n# Test 19\n# Output: 'AndroidTv'\n\n# Test 20\n# Output: 'AndroidTv'\n\n# Test 21\n# Output: 'AndroidTv'\n\n# Test 22\n# Output: 'AndroidTv'\n\n# Test 23\n# Output: 'AndroidTv'\n\n# Test 24\n# Output: 'AndroidTv'\n\n# Test 25\n# Output: 'AndroidTv'\n\n# Test 26\n# Output: 'AndroidTv'\n\n# Test 27\n# Output: 'AndroidTv'\n\n# Test 28\n# Output: 'AndroidTv'\n\n# Test 29\n# Output: 'AndroidTv'\n\n# Test 30\n# Output: 'AndroidTv'\n\n# Test 31\n# Output: 'AndroidTv'\n\n# Test 32\n# Output: 'AndroidTv'\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\n# def snake_to_camel(string):\n#     \"\"\"\n#     :param string: string to convert\n#     :return: camel case string\n#     \"\"\"\n#     return re.sub(r'_(\\w)', lambda x: x.group(1).upper(), string).title()\n\ndef snake_to_camel(string):\n    \"\"\"\n    :param string: string to convert\n    :return: camel case string\n    \"\"\"\n    return ''.join([word.capitalize() for word in re.findall(r'_(\\w)', string)])", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nfrom re import search\nimport re\n\n\ndef snake_to_camel(text):\n    \"\"\"Converts the given snake case string to camel case string\"\"\"\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text).title()\n\n\ndef snake_to_camel_wo_regex(text):\n    \"\"\"Converts the given snake case string to camel case string\"\"\"\n    return ''.join(word.title() for word in text.split('_'))", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\n\ndef snake_to_camel(snake_string):\n    result = re.sub(r'\\w+(_\\w+)*', lambda m: m.group().replace('_', '').capitalize(), snake_string)\n    return result\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\nimport unittest\n\ndef snake_to_camel(name):\n    return re.sub(r'_(\\w)', lambda x: x.group(1).upper(), name)\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(name):\n    if len(name)==0:\n        return name\n    else:\n        splitted = name.split('_')\n        first_word = splitted[0]\n        if len(splitted)>1:\n            return first_word + \"\".join(x.title() for x in splitted[1:])\n        else:\n            return first_word.title()", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    \"\"\"\n    :param s: input string\n    :return: a camel case string\n    \"\"\"\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).upper()", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\n#solution 1\ndef snake_to_camel(snake_case):\n    return snake_case[0].upper() + snake_case[1:]\n\n#solution 2\ndef snake_to_camel(snake_case):\n    return ''.join([c.title() for c in snake_case.split('_')])\n\n#solution 3\ndef snake_to_camel(snake_case):\n    return ''.join(c.title() for c in snake_case.split('_'))\n\n#solution 4\ndef snake_to_camel(snake_case):\n    return snake_case.replace('_', ' ').title().replace(' ', '')\n\n#solution 5\ndef snake_to_camel(snake_case):\n    return snake_case.title().replace(\"_\", \"\")"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(nums):\n    res = []\n    for num in nums:\n        if num % 2 != 0:\n            res.append(num)\n    return res\n\n# def remove_odd(nums):\n#     return [num for num in nums if num % 2 != 0]\n\n# def remove_odd(nums):\n#     res = []\n#     for num in nums:\n#         if num % 2 != 0:\n#             res.append(num)\n#     return res\n\ndef remove_odd(nums):\n    new_list = []\n    for num in nums:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n\ndef remove_odd(nums):\n    new_list = []\n    for num in nums:\n        if num % 2 != 0:\n            new_list.append(num)\n    return new_list\n\n# print(remove_odd([1,2,3]))", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 != 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(L):\n    return list(filter(lambda x: x % 2 != 0, L))\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(l):\n    return [i for i in l if i % 2 == 0]\n\n# test case 1", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n#my solution\ndef remove_odd(my_list):\n    new_list = []\n    for item in my_list:\n        if item % 2 != 0:\n            new_list.append(item)\n    return new_list\n\n# function test\nmy_list = [1,2,3,4,5,6,7,8,9,10]", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    lst = [i for i in lst if i%2==0]\n    return lst\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\n#Below is an example usage:\n\nimport re\n\ndef remove_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\n# Enter the list\nlist1 = [1, 2, 3]\n\n# Calling the function", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(list):\n    new_list = []\n    for i in list:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(num_list):\n\todd_list = []\n\tfor num in num_list:\n\t\tif num % 2 == 0:\n\t\t\todd_list.append(num)\n\n\treturn odd_list\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\n# Tests\n\ndef test_remove_odd():\n    assert remove_odd([1,2,3]) == [2]\n    assert remove_odd([1,2,4,5]) == [2,4]\n    assert remove_odd([1,2,2,5]) == [2]"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n#l = [1, 2, 3, 4, 5, 6]\n#k = 1\n#a = l[k]\n\n#def nth_el(lst, k):\n#    return lst[k]\n\n#print nth_el(l, k)\n\n#def nth_el(lst, k):\n#    return lst[k]\n#    #return lst[k]\n    \n#print nth_el(l, k)\n\n\ndef extract_nth_element(lst, k):\n    if k == 0:\n        return lst[:k+1]\n    elif k > 0:\n        return extract_nth_element(lst[k:], k-1)\n    \n    \ndef test_extract_nth_element():\n    print(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'])\n    print(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==['Wyatt Knott', 'Beau Turnbull'])\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lista, n):\n    #return lista[(n-1)*3]\n    return lista[n-1]\n\n# Test", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n#my solution\ndef extract_nth_element(my_list, n):\n    return my_list[n]\n\n#solution 2\ndef extract_nth_element(my_list, n):\n    return my_list[n][0]\n\n#solution 3\ndef extract_nth_element(my_list, n):\n    return my_list[n][0]\n\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    return [item for i, item in enumerate(lst) if i == n]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list, n):\n    if n > 0 and n <= len(list):\n        return list[n-1]\n    else:\n        return \"The input is not valid\"\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(elements, n):\n    return elements[n]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(l, n):\n    if not l or n < 0:\n        return None\n    return l[n]", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(l, n):\n    return l[n][0]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n# +\n#We can use a list comprehension to extract all the first names and store them into a new list.\n\n# -\n\ndef extract_nth_element(nums, n):\n    return [i[0] for i in nums][n]\n\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples, nth):\n    \"\"\"\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    if nth>=0:\n        for i in range(0, len(list_of_tuples), 1):\n            if i==nth:\n                return list_of_tuples[i]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    '''\n    Overlapping means that there is a common element in the sequences\n    '''\n    if seq1 == seq2:\n        return True\n    else:\n        for i in seq1:\n            if i in seq2:\n                return True\n        return False\n\n#overlapping([1,2,3,4,5],[6,7,8,9])", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(a,b):\n    a = set(a)\n    b = set(b)\n    return len(a.intersection(b)) != 0\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1,list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n#Test cases", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n# def overlapping(lst1, lst2):\n#     \"\"\"\n#     check if the values are overlapping or not in the two lists\n#     \"\"\"\n#     if lst2 == []:\n#         return False\n#     if lst1 == []:\n#         return False\n#     if lst1[-1] == lst2[0]:\n#         return True\n#     return overlapping(lst1[:-1], lst2[1:])\n\n# def overlapping(lst1, lst2):\n#     for i in lst2:\n#         if i in lst1:\n#             return True\n#     return False\n\n# def overlapping(lst1, lst2):\n#     for i in lst1:\n#         if i in lst2:\n#             return True\n#     return False\n\ndef overlapping(lst1, lst2):\n    # for i in lst1:\n    #     if i in lst2:\n    #         return True\n    # return False\n\n    return len(set(lst1 + lst2)) == len(lst1 + lst2)\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1,seq2):\n    s1 = set(seq1)\n    s2 = set(seq2)\n    return s1.intersection(s2)\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(ls1,ls2):\n    for i in ls1:\n        if i in ls2:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1,seq2):\n    for x in seq1:\n        if x in seq2:\n            return True\n    return False\n\n#Below is an example usage:\n\n# Enter the list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8, 9]\n\n# Calling the function", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1,seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n# Enter the values\nseq1 = [1, 2, 3, 4, 5]\nseq2 = [6, 7, 8, 9]\n\n# Calling the function", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(first,second):\n    for item in first:\n        if item in second:\n            return True\n    return False"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\n#Defining a function to find a pair with highest product\ndef max_Product(arr):\n    max_p = 1\n    pair = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > max_p:\n                max_p = arr[i]*arr[j]\n                pair = (arr[i], arr[j])\n    return pair\n\n#Testing the function", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    first_max = arr[0]\n    second_max = arr[0]\n    third_max = arr[0]\n    for x in arr:\n        if x > first_max and x > second_max:\n            third_max = second_max\n            second_max = first_max\n            first_max = x\n        elif x > second_max and x > third_max:\n            third_max = second_max\n            second_max = x\n        elif x > third_max:\n            third_max = x\n    return (first_max, third_max)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_product(nums):\n    a = max(nums)\n    b = min(nums)\n    product = a*b\n    max_ = a\n    for i in nums:\n        if i==b:\n            continue\n        if i*b > product:\n            max_ = i*b\n            product = max_\n    return (max_, product)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_prod = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\ndef max_Product_alt(arr):\n    max_prod = -1\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\ndef max_Product_recursive(arr,ind):\n    if ind >= len(arr)-1:\n        return arr[ind]\n    else:\n        max1 = max_Product_recursive(arr,ind+1)\n        max2 = max_Product_recursive(arr,ind+2)\n        return max(max1,max2)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_ = -1\n        max_product = -1\n        for i in range(0, len(arr) - 1):\n            for j in range(i+1, len(arr)):\n                max_temp = arr[i] * arr[j]\n                if max_temp > max_product:\n                    max_ = max(max_, arr[i])\n                    max_ = max(max_, arr[j])\n                    max_product = max_temp\n\n        return max_, max_product\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(lst):\n    max_prduct = -float('inf')\n    p_1 = -float('inf')\n    p_2 = -float('inf')\n    for i in lst:\n        if i < 0:\n            p_1 = max(p_1*i, -i)\n            p_2 = max(p_2*i, -i)\n        else:\n            p_1 = max(p_1*i, i)\n            p_2 = max(p_2*i, i)\n        max_prduct = max(max_prduct, p_1*p_2)\n    return max_prduct, p_1, p_2\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_val = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            temp = arr[i] * arr[j]\n            if temp > max_val:\n                max_val = temp\n    return (max_val, arr[arr.index(max_val)], arr[arr.index(max_val)])\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    maximum = 0\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == 0 or arr[i+1] == 0:\n            break\n        product = arr[i] * arr[i+1]\n        if product > maximum:\n            maximum = product\n        i += 1\n    return maximum\n\n#def max_Product(arr):\n #   largest = 0\n  #  for i in range(len(arr)-1):\n    #    if arr[i] != 0 and arr[i+1] != 0:\n      #      product = arr[i]*arr[i+1]\n       #     if product > largest:\n         #       largest = product\n      #  return largest\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\nfrom functools import reduce\ndef max_Product(arr):\n    return max(reduce(lambda x, y: x * y, x) for x in zip(*[iter(arr)]*2))", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n\n    max_product = 0\n    max_index = 0\n\n    for index, element in enumerate(arr):\n\n        for k in range(index + 1, len(arr)):\n\n            product = element * arr[k]\n            print(product)\n\n            if product > max_product:\n                max_product = product\n                max_index = (index, k)\n\n    return (arr[max_index[0]], arr[max_index[1]])\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num % 2 == 0:\n        return max(breakSum(num // 2) + (num // 2) + (num // 2), breakSum(num // 2) + (num // 2) + (num // 2))\n    else:\n        return max(breakSum(num // 2) + (num // 2) + (num // 2), breakSum(num // 2) + (num // 2) + (num // 2), breakSum(num // 2) + (num // 2) + (num // 2))", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n % 3 == 0:\n        return n\n\n    return max(n - 1, breakSum(n - 1), breakSum(n - 2), breakSum(n - 3)) + 1\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n  if n < 0:\n    raise ValueError(\"Number cannot be negative\")\n\n  if n == 0:\n    return 0\n\n  if n == 1:\n    return 1\n\n  return breakSum(n//3) + breakSum(n//3) + breakSum(n//3)\n\ndef test_breakSum():\n  assert breakSum(12) == 13\n  assert breakSum(1) == 1\n  assert breakSum(0) == 0\n\n# print(breakSum(12))\n# print(breakSum(1))\n# print(breakSum(0))", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return breakSum(n-3) + 2 * breakSum(n-2)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    \n    return max(breakSum(number-2)+number, breakSum(number-3)+number, breakSum(number-4)+number)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n\tif number <= 0:\n\t\treturn 0\n\n\tif number == 1:\n\t\treturn 1\n\n\tif number % 3 == 0:\n\t\treturn (number + breakSum(number / 3)) / 2\n\telse:\n\t\treturn (number + breakSum(number / 3) + breakSum(number * 2 / 3)) / 2\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    # write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = breakSum(n-1)\n        b = breakSum(n-2)\n        c = n//3\n        d = n%3\n        return a+b+c+d\n\ndef breakSumRecursive(n):\n    # write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(breakSumRecursive(n-1), breakSumRecursive(n-2), n//3+n%3)\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\n#Definition for a binary tree node.", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\nimport unittest\n\n\ndef breakSum(number):\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number == 3:\n        return 4\n    elif number == 4:\n        return 7\n    elif number == 5:\n        return 9\n    elif number == 6:\n        return 11\n    elif number == 7:\n        return 15\n    elif number == 8:\n        return 19\n    elif number == 9:\n        return 22\n    elif number == 10:\n        return 26\n    elif number == 11:\n        return 30\n    elif number == 12:\n        return 34\n    elif number == 13:\n        return 38\n    elif number == 14:\n        return 42\n    elif number == 15:\n        return 46\n    elif number == 16:\n        return 50\n    elif number == 17:\n        return 54\n    elif number == 18:\n        return 58\n    elif number == 19:\n        return 62\n    elif number == 20:\n        return 66\n    elif number == 21:\n        return 70\n    elif number == 22:\n        return 74\n    elif number == 23:\n        return 78\n    elif number == 24:\n        return 82\n    elif number == 25:\n        return 86\n    elif number == 26:\n        return 90\n    elif number == 27:\n        return 94\n    elif number == 28:\n        return 98\n    elif number == 29:\n        return 102\n    elif number == 30:\n        return 106\n    elif number == 31:\n        return 110\n    elif number == 32:\n        return 114\n    elif number == 33:\n        return 118\n    elif number == 34:\n        return 122\n    elif number == 35:\n       ", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n\tif num == 0:\n\t\treturn 0\n\n\tif num == 1:\n\t\treturn 1\n\n\treturn max(breakSum(num-1) + num, breakSum(num-2) + num) + num\n\n\ndef breakSumRec(num, sum1=0, sum2=0):\n\tif num == 0:\n\t\treturn 0\n\tif num == 1:\n\t\treturn 1\n\treturn breakSumRec(num-1, sum1, sum2) + num\n\tif num -1 < 0:\n\t\treturn breakSumRec(num-2, sum1, sum2) + num\n\n\treturn max(breakSumRec(num-1, sum1, sum2) + num, breakSumRec(num-2, sum1, sum2) + num)\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples_list):\n    dict_ = defaultdict(list)\n    for k in range(len(tuples_list)):\n        dict_[tuples_list[k][0]].append(tuples_list[k])\n    return dict_\n\n\n# print(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    # write your code here\n    sorted_tuples = sorted(tuples, key=lambda tup: tup[0])\n    result = []\n    prev_key = None\n    for key, val in sorted_tuples:\n        if prev_key is not None:\n            if prev_key == key:\n                result.append((prev_key, val, *tuples[prev_key]))\n        else:\n            result.append((key, val, *tuples[key]))\n        prev_key = key\n    return result", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\nfrom functools import reduce\n\ndef group_tuples(*args):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    \"\"\"\n    if not args:\n        return []\n    return list(set(tuple(x[0] for x in args)))\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    if not tuples:\n        return []\n    result = []\n    first_elem = tuples[0][0]\n    for elem in tuples:\n        if elem[0] == first_elem:\n            result.append(elem)\n    return result\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(data):\n    result = []\n    for x in data:\n        for y in result:\n            if x[0] == y[0]:\n                y.append(x[1])\n                break\n        else:\n            result.append([x[0], x[1]])\n    return result\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(data):\n    result = []\n    for row in data:\n        if row[0] == row[1]:\n            result.append(row)\n    return result\n\n#Using List Comprehension", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(l):\n    res = []\n    for i in range(len(l)):\n        if i == 0:\n            x = l[i][0]\n            res.append([x, x])\n        else:\n            res[-1][0] = res[-1][0] and l[i][0]\n        res.append(list(l[i]))\n    return res\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(lst):\n    a = set()\n    b = set()\n    for i in lst:\n        a.add(i[0])\n        b.add(i[1])\n    return list(a.intersection(b))\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(lst):\n    tuples_set = set(lst)\n    return [tuple(x) for x in tuples_set]\n\n# Assert the result is correct", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(lst):\n    return [tuple(i) for i in set(map(tuple, lst))]"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lists):\n    max_len = 0\n    max_sublist = []\n    for i in lists:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_sublist = i\n    return max_sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef find_max(lst):\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            lst[i].pop()\n            if len(lst[i]) > len(max_lst):\n                max_lst = lst[i]\n            lst[i].append(j)\n    return max_lst\n\n#print(find_max([['A'],['A','B'],['A','B','C']]))\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    length = len(lst)\n    max = 0\n    for i in range(length):\n        for j in range(i+1,length):\n            length1 = len(lst[i])\n            length2 = len(lst[j])\n            if(length1>length2 and length1>max):\n                max = length1\n            elif(length2>length1 and length2>max):\n                max = length2\n    return lst[0]\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    max = 0\n    curr = []\n    for item in lst:\n        if len(item) > max:\n            max = len(item)\n            curr = item\n    return curr\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(l):\n    maxlen = 0\n    maxsublist = []\n    for sublist in l:\n        if len(sublist) > maxlen:\n            maxlen = len(sublist)\n            maxsublist = sublist\n    return maxsublist", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# code starts here\ndef sublist(lst):\n    max = 0\n    sub = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                for k in range(len(lst[i])):\n                    for l in range(len(lst[j])):\n                        if lst[i][k] != lst[j][l]:\n                            break\n                    else:\n                        sub.append(lst[i])\n    return sub,max\n\n# print(sublist([['A'],['A','B'],['A','B','C']]))\n# Code ends here\n\n\n# --------------\n# Code starts here\ndef sublist(lst):\n    max = 0\n    sub = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                for k in range(len(lst[i])):\n                    for l in range(len(lst[j])):\n                        if lst[i][k] != lst[j][l]:\n                            break\n                    else:\n                        sub.append(lst[i])\n    return sub,max\n\n# Code ends here\n\n\n# --------------\n#Code starts here\ndef sublist(lst):\n    max = 0\n    sub = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                for k in range(len(lst[i])):\n                    for l in range(len(lst[j])):\n                        if lst[i][k] != lst[j][l]:\n                            break\n                    else:\n                        sub.append(lst[i])\n    return sub,max\n\n#Code ends here\n\n\n# --------------\n#Code starts here\ndef sublist(lst):\n    max = 0\n    sub = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                for k in range(len(lst[i])):\n                    for l in range(len(lst[j])):\n                        if lst[i][k] != lst[j][l]:\n                            break\n                   ", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(sublist):\n    max_len = 0\n    max_list = []\n    for i in range(len(sublist)):\n        for j in range(len(sublist[i])):\n            if (len(sublist[i]) > max_len):\n                max_len = len(sublist[i])\n                max_list = sublist[i]\n\n    return max_list\n\n\n#\n# Test case 1\n#", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(sublist):\n    max_len = 0\n    for i in range(len(sublist)):\n        if len(sublist[i]) > max_len:\n            max_len = len(sublist[i])\n\n    max_sublist = []\n    for i in range(len(sublist)):\n        if len(sublist[i]) == max_len:\n            max_sublist.append(sublist[i])\n\n    return max_sublist\n\ndef main():\n    print(Find_Max([['A'],['A','B'],['A','B','C']]))\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# +\n# Solution\ndef Find_Max(sublist):\n    max_len = 0\n    max_sublist = sublist[0]\n    for s in sublist:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_sublist = s\n    return max_sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(s):\n    max_len = 0\n    max_sublist = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if len(s[j])>max_len:\n                max_len = len(s[j])\n                max_sublist = s[j]\n    return max_sublist\n\n# Driver code"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    total = 0\n    for number in numbers:\n        total+=round(number)\n    return round(total*len(numbers), 2)\n\n\nround_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n\n\n# +\n#What is a generator function and why would you use one?\n# -\n\ndef squares(n):\n    for i in range(n):\n        yield i*i\n\n\ns = squares(3)\n\ns\n\ntype(s)\n\nnext(s)\n\nnext(s)\n\nnext(s)\n\nnext(s)\n\nnext(s)\n\n\ndef squares(n):\n    for i in range(n):\n        yield i*i\n\n\ns = squares(3)\n\nnext(s)\n\ns\n\ntype(s)\n\nfor n in squares(3):\n    print(n)\n\n\n# +\n#What is the difference between a generator function and a regular function?\n# -\n\ndef squares(n):\n    for i in range(n):\n        yield i*i\n\n\ns = squares(3)\n\nnext(s)\n\ns\n\ntype(s)\n\ns\n\nnext(s)\n\nnext(s)\n\nnext(s)\n\nfor n in s:\n    print(n)\n\n\ndef squares(n):\n    for i in range(n):\n        yield i*i\n\n\ns = squares(3)\n\nfor n in s:\n    print(n)\n\n\ndef squares(n):\n    for i in range(n):\n        yield i*i\n\n\ns", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\nfrom typing import List\nimport math\n\n\ndef round_and_sum(numbers: List[float]) -> float:\n    \"\"\"\n    :param numbers: a list of numbers to be rounded and summed\n    :return: the total sum of the numbers in the list multiplied by the length of the list\n    \"\"\"\n    total_sum = 0\n    for number in numbers:\n        total_sum += math.floor(number * 1000) / 1000\n    return total_sum * len(numbers)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(l):\n    sum = 0\n    for i in l:\n        sum = sum + round(i)\n    return sum*len(l)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    lenght = len(numbers)\n    total = 0\n    for i in numbers:\n        total += i\n    total = round(total, 2)\n    return (total * lenght)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    # Write your code here.\n    total = 0\n    for i in numbers:\n        total = round(i,2)\n    return total * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    suma=0\n    for n in numbers:\n        suma+=n\n    suma=round(suma)\n    return suma*len(numbers)", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    numbers_rounded = [round(number, 3) for number in numbers]\n    total = sum(numbers_rounded)\n    return total * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(l):\n    # round every number in the list\n    l = [round(x,1) for x in l]\n    # multiply the sum of numbers with their number of occurrences\n    return sum(l)*len(l)\n\n# test function\n#print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    # round each number and add them to the sum\n    return sum(map(lambda x: round(x), numbers)) * len(numbers)\n\n\ndef test_round_and_sum():\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\n\n\ndef test_round_and_sum_negative():\n    assert round_and_sum([123, -123]) == 0\n\n\ndef test_round_and_sum_no_numbers():\n    assert round_and_sum([]) == 0\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n\n#print(cube_sum(2))\n\ndef cube_sum_2(n):\n\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return n+cube_sum_2(n-2)\n\n#print(cube_sum_2(10))\n\n# 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 8654378, 34334944, 109333176, 415566044, 1457377220, 5368075712, 20502656492, 82506784400, 320035173600, 1260145365500, 4920535623700, 19682136874400, 78726752692800, 308906960039200, 1236529840158400, 5009619360576000, 20038857042665600, 80154576128665600, 320627892514662400, 128291", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    return (n**3*(n+1)//2)\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum+=i*i*i\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n# function\ndef cube_sum(n):\n    return sum(i**3 for i in range(1,n+1) if i%2==0)\n# test case", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(num):\n    s = 0\n    for i in range(1,num+1):\n        s = s + i**3\n    return s\n\ndef cube_Sum_prime(num):\n    s = 0\n    for i in range(1,num+1):\n        s = s + i**3\n    return s\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#assert cube_Sum(2) == 72\n\ndef cube_Sum_2(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#assert cube_Sum_2(2) == 72\n\ndef cube_Sum_3(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#assert cube_Sum_3(2) == 72\n\ndef cube_Sum_4(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#assert cube_Sum_4(2) == 72\n\ndef cube_Sum_5(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#assert cube_Sum_5(2) == 72\n\ndef cube_Sum_6(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#assert cube_Sum_6(2) == 72\n\ndef cube_Sum_7(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#assert cube_Sum_7(2) == 72\n\ndef cube_Sum_8(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#assert cube_Sum_8(2) == 72", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    answer = 0\n    for i in range(0, n):\n        answer += i**3\n    return answer\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    # Write your code here\n    return sum([i**3 for i in range(n) if i%2==0])", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    result = 0\n    for i in range(0, n):\n        result += i ** 3\n    return result\n\ndef test():\n    assert cube_Sum(2) == 72\n\ntest()"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    \"\"\"\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n    'ID-is-4-UTS'\n    \"\"\"\n    return \"-\".join([str(x) for x in tup])\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_of_string, delimiter=\"-\"):\n    result = delimiter.join(tuple_of_string)\n    return result\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_, delimiter='_'):\n    return delimiter.join(str(i) for i in tuple_)", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple, delimiter=\"-\"):\n    return delimiter.join(tuple)", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_input):\n    return '-'.join(map(str,tuple_input))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_input):\n    return '-'.join(tuple_input)\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup):\n    \"\"\"\n    This function concatenates each element of tuple by the delimiter.\n    Args:\n        tup: tuple\n    Returns:\n        str\n    \"\"\"\n    if not tup:\n        return \"\"\n    return '-'.join([str(i) for i in tup])\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tupl, dele = \"-\"):\n    return dele.join([str(x) for x in tupl])\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_):\n    return '-'.join(map(str, tuple_))\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n#your code here\n#or\ndef concatenate_tuple(tuple1, tuple2):\n    return '-'.join(tuple1) + '-' + '-'.join(tuple2)\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n\ttotal = 0\n\ti = 1\n\twhile i <= n:\n\t\ttotal += i ** 3\n\t\ti = i + 1\n\treturn total / n\n\n# n = int(input(\"Enter value of n : \"))\n# print(find_Average_Of_Cube(n))\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    n = int(n)\n    return sum([x**3 for x in range(1,n+1)])/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return (n*n*n+n*n)*n/(n*n*n+n*n+1)\n\ndef main():\n    assert find_Average_Of_Cube(2) == 4.5\n    assert find_Average_Of_Cube(5) == 15.625\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    if n < 0:\n        raise ValueError(\"Given number is negative\")\n    if n == 0:\n        return 0\n    return (sum([i**3 for i in range(1, n + 1)])/n)", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    return (n*(n+1)*(2*n+1))/6\n#4.5\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n\n\n# Q.3", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum/n\n\n#assert find_Average_Of_Cube(2) == 4.5\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    ans = 0\n    i = 1\n    while i <= n:\n        ans += i ** 3\n        i += 1\n    return (ans / n)\n\n\ndef test():\n    assert find_Average_Of_Cube(2) == 4.5\ntest()\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n# 2. Write a python function to find the sum of numbers in a given list.\n# assert sum_list(range(10)) == 45\n\n# 3. Write a python function to find the product of numbers in a given list.\n# assert product_list(range(10)) == 3628800\n\n# 4. Write a python function to find the highest number in a given list.\n# assert max_num(range(10)) == 9\n\n# 5. Write a python function to find the minimum number in a given list.\n# assert min_num(range(10)) == 0\n\n# 6. Write a python function to find the mean of a given list.\n# assert mean_list(range(10)) == 4.5\n\n# 7. Write a python function to find the mode of a given list.\n# assert mode_list([1, 2, 3, 4, 5]) == 3\n\n# 8. Write a python function to reverse a given string.\n# assert reverse(\"Python\") == \"nohtyp\"\n\n# 9. Write a python function to find the number of unique elements in a list.\n# assert count_unique(range(10)) == 10\n\n# 10. Write a python function to find the number of elements in a list.\n# assert count_elements(range(10)) == 10", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n# +\n# Write your code below this line\n# -\n\n# ## Question 3\n# Write a python function to find the sum of first n natural numbers."], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(matrix, width, height):\n    gold = 0\n    for i in range(width):\n        for j in range(height):\n            if j == 0:\n                if i == 0 or i == width - 1:\n                    continue\n            elif i == 0:\n                if j == 0 or j == height - 1:\n                    continue\n            elif i == width - 1:\n                if j == 0 or j == height - 1:\n                    continue\n            elif j == height - 1:\n                if i == 0 or i == width - 1:\n                    continue\n            else:\n                gold += max(matrix[i-1][j], matrix[i+1][j], matrix[i][j-1], matrix[i][j+1])\n    return gold\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(matrix, row, col):\n    if row == 0 or col == 0:\n        return 0\n    if matrix[row - 1][col] != 0:\n        return get_maxgold(matrix, row - 1, col)\n    max_gold = 0\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != 0:\n                matrix[i][j] = 0\n                gold = get_maxgold(matrix, row - 1, col - 1)\n                matrix[i][j] = 1\n                max_gold = max(gold, max_gold)\n    return max_gold\n\ndef main():\n    print(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4))\n    print(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 1))\n    print(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 1, 4))\n    print(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 1, 1))\n    print(get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(goldmine, rows, cols):\n    gold = 0\n    for i in range(rows):\n        for j in range(cols):\n            if goldmine[i][j] != 0:\n                gold += goldmine[i][j]\n                goldmine[i][j] = 0\n    return gold\n\ndef get_maxgold_v2(goldmine, rows, cols):\n    gold = 0\n    for i in range(rows):\n        for j in range(cols):\n            if goldmine[i][j] != 0:\n                gold += goldmine[i][j]\n                goldmine[i][j] = 0\n                if i+1 < rows:\n                    gold += goldmine[i+1][j]\n                if i-1 >= 0:\n                    gold += goldmine[i-1][j]\n                if j+1 < cols:\n                    gold += goldmine[i][j+1]\n                if j-1 >= 0:\n                    gold += goldmine[i][j-1]\n    return gold\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid, rows, cols):\n    res = 0\n    row_gold = 0\n    col_gold = 0\n    for i in range(rows):\n        col_gold = 0\n        for j in range(cols):\n            if grid[i][j] == 1:\n                row_gold += 1\n                col_gold += 1\n            if row_gold == 1 and col_gold == 1:\n                res += 1\n    return res\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\n#dp[i][j][k] means the maximal gold in the i, j, k cell.\n#dp[i][j][k] = max(dp[i][j-1][k], dp[i][j-1][k-1], dp[i-1][j][k]) + min(dp[i][j][k], dp[i][j][k-1], dp[i-1][j][k-1])\n# for i in range(len(grid)):\n#     for j in range(len(grid[0])):\n#         for k in range(len(grid[0][0])):\n#             if i == 0 and j == 0:\n#                 if k == 0:\n#                     dp[i][j][k] = grid[i][j][k]\n#                 else:\n#                     dp[i][j][k] = grid[i][j][k] + dp[i][j-1][k-1]\n#             elif i == 0 and j > 0:\n#                 if k == 0:\n#                     dp[i][j][k] = grid[i][j][k]\n#                 else:\n#                     dp[i][j][k] = grid[i][j][k] + dp[i][j-1][k]\n#             elif i > 0 and j == 0:\n#                 if k == 0:\n#                     dp[i][j][k] = grid[i][j][k]\n#                 else:\n#                     dp[i][j][k] = grid[i][j][k] + dp[i-1][j][k-1]\n#             elif i > 0 and j > 0:\n#                 if k == 0:\n#                     dp[i][j][k] = max(dp[i][j-1][k], dp[i][j-1][", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid, row, col):\n    maxgold = 0\n    for i in range(0, col):\n        maxgold += grid[0][i]\n    for j in range(0, row):\n        maxgold += grid[j][0]\n    for i in range(0, col):\n        for j in range(0, row):\n            maxgold += grid[j][i]\n    return maxgold\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(mine, x, y):\n    \"\"\"\n    This is a solving routine for gold mine problem.\n    \"\"\"\n    cache = {}\n    def dfs(x, y, path, gold):\n        \"\"\"\n        x and y are the coordinates of the current cell.\n        path is a list of coordinates to reach the current cell.\n        gold is the total gold amount found so far.\n        \"\"\"\n        if (x, y) in cache:\n            return cache[(x, y)]\n        if (x, y) == (x, y) == (x, y) == (x, y) == (x, y) == (x, y) == (x, y):\n            cache[(x, y)] = gold\n            return gold\n\n        # move up\n        if x > 0 and mine[x - 1][y] > 0:\n            gold += dfs(x - 1, y, path + [(x, y)], gold)\n\n        # move down\n        if x < x - 1 and mine[x + 1][y] > 0:\n            gold += dfs(x + 1, y, path + [(x, y)], gold)\n\n        # move left\n        if y > 0 and mine[x][y - 1] > 0:\n            gold += dfs(x, y - 1, path + [(x, y)], gold)\n\n        # move right\n        if y < y - 1 and mine[x][y + 1] > 0:\n            gold += dfs(x, y + 1, path + [(x, y)], gold)\n\n        # move diagonally\n        if x > 0 and y > 0 and mine[x - 1][y - 1] > 0:\n            gold += dfs(x - 1, y - 1, path + [(x, y)], gold)\n        if x < x - 1 and y > 0 and mine[x + 1][y - 1] > 0:\n            gold += dfs(x + 1, y", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mine_field, mine_width, mine_height):\n    \"\"\"\n    @param mine_field: 2d list, each element is the width of a gold.\n    @param mine_width: the width of the field\n    @param mine_height: the height of the field\n    @return: max gold value\n    \"\"\"\n    if mine_field is None or mine_field == []:\n        return 0\n    if mine_width == 0 or mine_height == 0:\n        return 0\n    if mine_field[0] is None or mine_field[0] == []:\n        return 0\n    if mine_field[0][0] is None:\n        return 0\n\n    max_gold = 0\n    if mine_field[mine_height-1][mine_width-1] is not None:\n        max_gold = mine_field[mine_height-1][mine_width-1]\n    for i in range(mine_width-1,-1,-1):\n        for j in range(mine_height-1,-1,-1):\n            if mine_field[j][i] is not None:\n                if max_gold < mine_field[j][i]:\n                    max_gold = mine_field[j][i]\n    return max_gold\n\ndef get_nearest_mines(mine_field, x, y, mine_width, mine_height):\n    \"\"\"\n    @param mine_field: 2d list, each element is the width of a gold.\n    @param mine_width: the width of the field\n    @param mine_height: the height of the field\n    @return: the number of mines in the 8 directions around the mine, including itself\n    \"\"\"\n    directions = [(-1,-1),(0,-1),(1,-1),(-1,0),(0,0),(1,0),(-1,1),(0,1),(1,1)]\n    # the number of mines in the 8 directions around the mine, including itself.\n    mines", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(input,num_rows,num_cols):\n    data = []\n    for row in input:\n        row = list(row)\n        for i in range(len(row)):\n            if row[i] == 'X':\n                row[i] = 0\n        data.append(row)\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if data[i][j] != 0:\n                for row in range(i-1,i+2):\n                    for col in range(j-1,j+2):\n                        if 0<=row<num_rows and 0<=col<num_cols:\n                            if row == i and col == j:\n                                continue\n                            if data[row][col] != 0:\n                                data[i][j] = max(data[i][j],data[row][col]+data[i][j])\n    print(data)\n    return max([max(i) for i in data])\n\n\ndef main():\n    input = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]\n    print(get_maxgold(input, 4, 4))\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(map,row,col):\n    # write your code here\n    if row == 0 or col == 0:\n        return 0\n    elif map[row-1][col] == 0:\n        return 0\n    elif row == 1:\n        return map[row][col]\n    elif map[row-1][col] >= map[row][col]:\n        return map[row][col] + get_maxgold(map,row-1,col)\n    else:\n        return map[row][col] + get_maxgold(map,row-1,col) + get_maxgold(map,row,col-1)\n\n#test case \nmap = [[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]]"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(strings):\n    \"\"\"Function to extract only the rear index element of each string in the given tuple.\"\"\"\n    return [strings[i][::-1] for i in range(len(strings))]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(strings):\n    list_of_strings = list(strings)\n    for i in range(len(list_of_strings)):\n        list_of_strings[i] = list_of_strings[i][::-1]\n    return list_of_strings\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(words):\n    \"\"\"\n    return the rear index element of each string in the given tuple\n    \n    >>> extract_rear(('Mers', 'for', 'Vers') )\n    ['s', 'r', 's']\n    \n    \"\"\"\n    return [word[-1] for word in words]\n\n# Enter the tuple\nwords = ('Mers', 'for', 'Vers')\n\n# Calling the function", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(strings):\n    list = []\n    for string in strings:\n        list.append(string[-1])\n    return list", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(x):\n    return tuple(x[::-1])\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(strings: tuple) -> list:\n    return [string[::-1] for string in strings]\n\ndef test_extract_rear():\n    assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(words):\n    return [word[-1] for word in words]\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(words):\n    return [word[-1] for word in words]\n\ndef main():\n    print(extract_rear(('Mers', 'for', 'Vers') ))\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(st):\n    return list(reversed([x[-1] for x in st]))\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    return [x[-1] for x in tup]\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list_of_list,element):\n    count = 0\n    for i in range(len(list_of_list)):\n        if element in list_of_list[i]:\n            count += 1\n    return count\n\n# Test ", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\nfrom collections import defaultdict\n\ndef count_element_in_list(input_list, element):\n\t# input_list = [1, 3, 5, 7, 11, 15, 7]\n\t# element = 1\n\treturn len(list(set(list(map(lambda item: list(item).count(element), input_list)))))\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l, element):\n    count = 0\n    for sublist in l:\n        if element in sublist:\n            count += 1\n    return count\n\n#assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\n#Test\n#    from random import randrange\n#    l = []\n#    for i in range(0,500):\n#        l.append([randrange(0,20) for x in range(0,randrange(0,10))])\n#    print count_element_in_list(l, 2),len(l)\n#    assert count_element_in_list(l, 2)==0.04\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list,element):\n    \"\"\"\n    Counts number of times element occurs in list.\n    \"\"\"\n    return sum([element in item for item in list])", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst,element):\n    counter=0\n    for i in lst:\n        if element in i:\n            counter+=1\n    return counter\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(arr,element):\n    count = 0\n    for i in arr:\n        if element in i:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst,element):\n    count = 0\n    for i in lst:\n        if element in i:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l,num):\n    l_list=[]\n    for item in l:\n        if num in item:\n            l_list.append(item)\n    return len(l_list)\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_,el):\n    count = 0\n    for i in range(len(list_)):\n        if el in list_[i]:\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if element in arr[i]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2!=0, lst))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(list):\n    return list(filter(lambda x: x%2 !=0, list))\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(x):\n    return list(filter(lambda z: z % 2 != 0, x))\n\n# Test case 1", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2==1, lst))\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x % 2 == 1, lst))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n# Solution:\ndef filter_oddnumbers(numbers):\n    odd_numbers = list(filter(lambda x: x%2, numbers))\n    return odd_numbers\n\n#Test cases:", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\nfilter_oddnumbers = lambda l: [x for x in l if x % 2 !=0]\n#print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n#write a lambda function to multiply the numbers\nmultiply_numbers = lambda x,y: x*y"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\ndef change_date_format(date):\n    date = re.sub(r'(\\d{4})(\\d{2})(\\d{2})', r'\\g<2>-\\g<3>-\\g<1>', date)\n    return date\n\n# Enter the date\ndate = \"2026-01-02\"\n\n# Calling the function", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(input_date):\n    if len(input_date) == 10:\n        year = input_date[:4]\n        month = input_date[5:7]\n        day = input_date[8:]\n        return '-'.join([day, month, year])\n    else:\n        return input_date\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    return re.sub(r'([0-9]+)', lambda x: str(int(x.group(1)))[-2:], date)\n\n# Enter the date\ndate = \"2026-01-02\"\n\n# Calling the function", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nfrom datetime import date\nimport re\n\n# change date to given format\ndef change_date_format(date_str: str) -> str:\n\n    # regular expression to find the correct format\n    date_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # extract the date\n    date_match = re.search(date_pattern, date_str)\n\n    # check if the input was given in the correct format\n    if not date_match:\n        return date_str\n\n    # extract the data\n    date_data = date_match.groups()\n\n    # get the year and change it to the right format\n    year = date_data[0]\n    year = year[2:4] + year[0:2]\n\n    # join the data\n    new_date = year + '-' + date_data[1] + '-' + date_data[2]\n\n    return new_date\n\n# run the tests", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date_format):\n    # Get date and replace all hyphens with spaces\n    date_format_str = re.sub(\"-\", \" \", date_format)\n\n    # Get year, month and day from the date\n    year, month, day = re.findall(\"\\d+\", date_format_str)\n    \n    # Rearrange year, month and day\n    year_str = str(year).zfill(4)\n    month_str = str(month).zfill(2)\n    day_str = str(day).zfill(2)\n    \n    # Rearrange date in desired format\n    date_format_str = year_str + \"-\" + month_str + \"-\" + day_str\n    return date_format_str\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n# my answer\ndef change_date_format(date):\n    return date[::-1].replace('-', '').replace('20', '').replace('0', '')\n# solution\ndef change_date_format(date):\n    return date[::-1].replace('-', '').replace('20', '').replace('0', '').replace('1','10')\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    date = date.split('-')\n    return '-'.join(date[::-1])\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    \"\"\"\n    :param date: a date string of yyyy-mm-dd format.\n    :return: a date string of dd-mm-yyyy format.\n    \"\"\"\n    date = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', date)\n    return date\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    return date.replace('-', '').replace(' ', '')\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    date = date.replace('-','')\n    date = date[6:8] + '-' + date[4:6] + '-' + date[0:4]\n    return date\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(lst):\n\n    for gap in range(len(lst) // 2, 0, -1):\n        for i in range(gap, len(lst)):\n            j = i\n\n            while j >= gap and lst[j] < lst[j - gap]:\n                lst[j], lst[j - gap] = lst[j - gap], lst[j]\n                j -= gap\n\n    return lst\n\n\ndef shell_sort_v2(lst):\n    gaps = [len(lst) // 2]\n    while gaps[-1] > 0:\n        for i in range(len(lst) - gaps[-1]):\n            j = i + gaps[-1]\n            while j >= gaps[-1] and lst[j] < lst[j - gaps[-1]]:\n                lst[j], lst[j - gaps[-1]] = lst[j - gaps[-1]], lst[j]\n                j -= gaps[-1]\n        gaps.append(gaps[-1] // 3)\n    return lst\n\n\ndef test_shell_sort():\n    lst = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]\n\n    assert shell_sort(lst) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert shell_sort_v2(lst) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nimport unittest\n\n\ndef shell_sort(array):\n    if array == None or len(array) == 0:\n        return array\n\n    array_length = len(array)\n\n    # insertion sort for arrays of length less than 20\n    if array_length < 20:\n        return insertion_sort(array)\n\n    # build a smaller array of subarrays\n    subarrays = []\n    subarrays.append([])\n\n    # insert every element in the array to the left of the subarray\n    for x in range(1, array_length):\n        subarrays[0].append(array[x])\n        i = 0\n        while i < len(subarrays) - 1 and subarrays[i][-1] > subarrays[i + 1][-1]:\n            subarrays[i + 1].append(subarrays[i].pop())\n        subarrays[i + 1].append(subarrays[i].pop())\n\n    # run insertion sort on every subarray\n    for subarray in subarrays:\n        insertion_sort(subarray)\n\n    # combine all subarrays into one array\n    for i in range(len(subarrays) - 1):\n        for x in range(len(subarrays[i]) - 1):\n            array[i * len(subarrays[0]) + x] = subarrays[i][x]\n    return array\n\n\ndef insertion_sort(array):\n    for i in range(1, len(array)):\n        j = i\n        while j > 0 and array[j] < array[j - 1]:\n            array[j], array[j - 1] = array[j - 1], array[j]\n            j -= 1\n    return array\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nimport random\nimport unittest\n\n\ndef shell_sort(arr):\n    \"\"\"\n    Sort the given array by using shell sort.\n    :param arr:\n    :return:\n    \"\"\"\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nimport numpy as np\nfrom sorting_algorithms.base import SortingAlgorithm\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            j = i\n            while arr[j] < arr[j-gap]:\n                arr[j], arr[j-gap] = arr[j-gap], arr[j]\n                j -= gap\n        gap //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(array):\n    \"\"\"Shell sort\n    \"\"\"\n    # sort elements of array by\n    # always moving the largest\n    # element to its correct position\n    # in the array\n    for gap in range(len(array)//2, 0, -1):\n        for i in range(gap, len(array)):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j - gap] > temp:\n                array[j] = array[j - gap]\n                j -= gap\n            array[j] = temp\n    return array", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    length = len(arr)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = arr[i]\n            j = i\n            while j - gap >= 0 and temp < arr[j - gap]:\n                arr[j] = arr[j - gap]\n                j = j - gap\n            arr[j] = temp\n        gap = gap // 2\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nimport random\nfrom typing import List\n\n\ndef shell_sort(array: List[int]) -> List[int]:\n    array_copy = list(array)\n    length = len(array_copy)\n    interval = length // 2\n    while interval > 0:\n        for i in range(interval, length):\n            j = i\n            while j >= interval and array_copy[j] < array_copy[j - interval]:\n                array_copy[j], array_copy[j - interval] = array_copy[j - interval], array_copy[j]\n                j -= interval\n        interval //= 2\n    return array_copy\n\n\ndef test_shell_sort(array: List[int], expect: List[int]) -> None:\n    print(f\"Input: {array} \\nExpect: {expect}\")\n    assert shell_sort(array) == expect", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nimport math\n\n\ndef shell_sort(alist):\n    gap = len(alist)//2\n    while gap > 0:\n        for i in range(gap, len(alist)):\n            temp = alist[i]\n            j = i\n            while j >= gap and alist[j - gap] > temp:\n                alist[j] = alist[j - gap]\n                j -= gap\n            alist[j] = temp\n        gap //= 2\n    return alist\n\n\ndef main():\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert shell_sort([]) == []\n    assert shell_sort([12]) == [12]\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\n\nmain()", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n# Idea:\n# - Maintain a gapped array with gaps starting at gapsize\n# - Try to fit every element in the gapped array\n# - Put the next element of the gapped array in the next position that is larger than the element\n# - Continue doing the same till the gapped array is in order\n# - Continue increasing the gapsize untill the gapped array is in order\n\n# Time: O(n)\n# Space: O(1)\n# - n : no. of elements in the array\n\ndef shell_sort(arr):\n    gapsize = len(arr)//2\n    while gapsize > 0:\n        for i in range(gapsize):\n            j = i\n            while j < len(arr):\n                if arr[j] < arr[j-gapsize]:\n                    arr[j], arr[j-gapsize] = arr[j-gapsize], arr[j]\n                j += gapsize\n        gapsize //= 2\n    return arr\n\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(a, b):\n    pass\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n# tuple == (1, 2, 3, 4)\n# tuple == (5, 6, 7, 8)\ndef and_tuples(t1, t2):\n    assert type(t1) is tuple, \"The first parameter is not a tuple\"\n    assert type(t2) is tuple, \"The second parameter is not a tuple\"\n    l = min(len(t1), len(t2))\n    ret = []\n    for i in range(l):\n        if t1[i] == t2[i]:\n            ret.append(0)\n        else:\n            ret.append(1)\n    return tuple(ret)\n\ndef t1 = (10, 4, 6, 9)\nt2 = (5, 2, 3, 3)", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(list1, list2):\n    return tuple([item1 & item2 for (item1, item2) in zip(list1, list2)])\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    assert len(t1)==len(t2)\n    return tuple(i for i, j in zip(t1, t2) if i and j)\n\n#assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nWrite a function to calculate the total number of subarrays of the given array.\n\n### Code:\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    try:\n        return tuple(map(int, [tuple1[i] & tuple2[i] for i in range(len(tuple1))]))\n    except TypeError:\n        raise TypeError('Tuples with different length.')\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    if len(t1) != len(t2):\n        raise ValueError(\"tuples have different lengths\")\n    return tuple(i and j for i, j in zip(t1, t2))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    new_tuple = tuple(map(lambda x, y: (x and y), tuple1, tuple2))\n    return new_tuple", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(a, b):\n    return a[0]*b[0],a[1]*b[1],a[2]*b[2],a[3]*b[3]\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    assert len(t1) == len(t2)\n    return tuple(ele1 and ele2 for ele1, ele2 in zip(t1, t2))", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n# sol 1\ndef and_tuples(t1, t2):\n    res = []\n    for i in range(len(t1)):\n        if t1[i] and t1[i] == t2[i]:\n            res.append(0)\n        else:\n            res.append(1)\n    return res\n\n# sol 2\ndef and_tuples(t1, t2):\n    l1 = len(t1)\n    l2 = len(t2)\n    res = []\n    for i in range(l1):\n        if t1[i] == 0 or t2[i] == 0:\n            res.append(0)\n        else:\n            res.append(t1[i] & t2[i])\n    return res\n\n# sol 3\ndef and_tuples(t1, t2):\n    return [min(t1[i], t2[i]) for i in range(len(t1))]\n\n# sol 4\ndef and_tuples(t1, t2):\n    return [min(i, j) for i, j in zip(t1, t2)]\n\n# sol 5\ndef and_tuples(t1, t2):\n    return [i & j for i, j in zip(t1, t2)]\n\n# sol 6\ndef and_tuples(t1, t2):\n    return list(map(lambda x,y: x & y, t1, t2))\n\n# sol 7\ndef and_tuples(t1, t2):\n    return map(lambda x,y: x&y, t1, t2)\n\n# sol 8\ndef and_tuples(t1, t2):\n    return map(lambda x,y: x&y, zip(t1, t2))\n\n# sol 9\ndef and_tuples(t1, t2):\n    return map(lambda a, b: a&b, t1, t2)\n\n# sol 10"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    if a == 0:\n        return -c/b\n    elif b == 0:\n        return -a/c\n    else:\n        return (-a+math.sqrt(math.pow(a,2)-4*b*c))/(2*b)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    x = (-b-sqrt(b**2-4*a*c))/(2*a)\n    y = (-b+sqrt(b**2-4*a*c))/(2*a)\n    return x,y", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    D=(b**2-4*a*c)\n    if D==0:\n        return -1\n    return (-b+D/(2*a))\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    discriminant = b*b - 4*a*c\n    if discriminant < 0:\n        return None\n    return (-b + math.sqrt(discriminant)) / (2 * a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\nimport numpy as np\n\n\ndef parabola_directrix(a,b,c):\n    return (-b+np.sqrt(b**2-4*a*c))/2/a\n\n\ndef test_parabola_directrix():\n    assert parabola_directrix(5,3,2)==-198\n    assert parabola_directrix(2,1,1)==-1.3333333333333333\n    assert parabola_directrix(1,1,1)==0\n    assert parabola_directrix(1,2,1)==-1/2", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    if c==0:\n        return None\n    return -b/(2*c)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    \"\"\"\n    >>> parabola_directrix(5,3,2) == -198\n    True\n    \"\"\"\n    D = b*b - 4*a*c\n    if D > 0:\n        return -b/2/a\n    elif D == 0:\n        return -b/2/a\n    else:\n        return None\n\ndef parabola_center(a,b,c):\n    \"\"\"\n    >>> parabola_center(5,3,2) == (-1.5,2.75)\n    True\n    \"\"\"\n    if parabola_directrix(a,b,c) == None:\n        return None\n    else:\n        D = parabola_directrix(a,b,c)\n        x = -b/2/a + D/2/a\n        y = D*c/4/a**2 - b/2/a**2 + a/2\n        return (x,y)\n\ndef parabola_slope(a,b,c):\n    \"\"\"\n    >>> parabola_slope(5,3,2) == 3.5\n    True\n    \"\"\"\n    if parabola_directrix(a,b,c) == None:\n        return None\n    else:\n        D = parabola_directrix(a,b,c)\n        return -b/2/a + D/2/a\n\ndef parabola_equation(a,b,c):\n    \"\"\"\n    >>> parabola_equation(5,3,2) == \"y = -198 - x + 7x**2\"\n    True\n    \"\"\"\n    if parabola_directrix(a,b,c) == None:\n        return None\n    else:\n        D = parabola_directrix(a,b,c)\n        return \"y = \" + str(-b/2/a + D/2/a) + \" - \" + \"x\" + \" + \" + str(D*c/4/a**2 - b/2/a**2 + a/2) + \"x**2\"\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\nimport math\ndef parabola_directrix(x_c,y_c,c):\n    if c == 0:\n        raise ValueError('parabola equation is: y=0')\n    d = -(2*y_c)/(2*c)\n    return d", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    d = (a**2)-4*b*c\n    if d<0:\n        return None\n    x = (-b+math.sqrt(d))/(2*a)\n    y = (-b-math.sqrt(d))/(2*a)\n    return [x,y]\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst1, lst2):\n    for i in lst1:\n        if i in lst2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(l1,l2):\n    for i in l1:\n        if i in l2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list_1, list_2):\n    if len(list_1) > len(list_2):\n        list_1, list_2 = list_2, list_1\n    for value in list_1:\n        if value in list_2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\n# solution\n\n\ndef common_element(l1, l2):\n    for i in l1:\n        if i in l2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list_1, list_2):\n    for i in list_1:\n        if i in list_2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                return True\n        return False\n    return False", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n\tif list1.count(list2[0]) > 0:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    # init the res to False\n    res = False\n    # if both lists are empty\n    if len(list1) == 0 and len(list2) == 0:\n        # return True\n        res = True\n    elif len(list1) > 0 and len(list2) > 0:\n        # get the length of list 1\n        n1 = len(list1)\n        # get the length of list 2\n        n2 = len(list2)\n        # get the mid point\n        m = (n1+n2)/2\n        # get the mid point of list 1\n        m1 = m/n1*n1\n        # get the mid point of list 2\n        m2 = m/n2*n2\n        # if the mid point of list 1 and list 2 are equal\n        if list1[m1] == list2[m2]:\n            # return True\n            res = True\n        else:\n            # return False\n            res = False\n    # return res\n    return res\n\n# write the test function\ndef test():\n    # assert\n    assert common_element([1,2,3,4,5], [5,6,7,8,9]) == True\n    assert common_element([1,2,3,4,5], [1,2,3,4,5]) == True\n    assert common_element([1,2,3,4,5], [1,2,3,4,6]) == False\n# call the test function\ntest()"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(x1,x2,y1,y2):\n    return (x1+x2)/2 * (y1+y2)/2\n\n# -\n\nmedian_trapezium(15,25,35)\n\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    a, b and c are the lengths of the sides of the trapezium.\n    \"\"\"\n    if a == b == c:\n        return a\n    if a < b < c:\n        return (a + b) // 2\n    elif b < a < c:\n        return (a + c) // 2\n    else:\n        return (b + c) // 2\n\ndef median_trapezium_unsol(a,b,c):\n    \"\"\"\n    a, b and c are the lengths of the sides of the trapezium.\n    \"\"\"\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    if c > b and c > a:\n        return c\n    return (a + b + c) // 3\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    suma = a + b + c\n    #print(suma)\n    mediana = suma / 2\n    #print(mediana)\n    if mediana % 1 == 0:\n        return mediana\n    else:\n        return mediana + 0.5\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    if a < b or a < c or b < c:\n        raise Exception('a,b,c must be greater than or equal to zero')\n    else:\n        return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n# TODO: Write your function here.\n\ndef median_trapezium(a,b,c):\n    if a>=b and a>=c:\n        if c>=b:\n            return ((a+c)/2)\n        else:\n            return ((a+b)/2)\n    else:\n        if b>=c:\n            return ((b+c)/2)\n        else:\n            return ((a+b)/2)", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    \"\"\"\n    Write a function that accepts three parameters a,b and c and returns the\n    median of a trapezium.\n\n    >>> median_trapezium(20,45,40)\n    30\n    >>> median_trapezium(10,20,30)\n    20\n    >>> median_trapezium(25,20,15)\n    22.5\n    >>> median_trapezium(15,25,35)\n    20\n    \"\"\"\n    if a < b:\n        a,b = b,a\n    if a < c:\n        a,c = c,a\n    return (a+b)/2\n\ndef median_trapezium_2(a,b,c):\n    return (a+c)/2\n\ndef median_trapezium_3(a,b,c):\n    m = (a+b)/2\n    if m > c:\n        m = (m+c)/2\n    return m\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    a,b,c are the lengths of the sides of the trapezium.\n    \"\"\"\n    trapezium_area=0.5*a*c\n    if (a<b<c):\n        if (a+b>c):\n            return (a+b)/2\n        else:\n            return (c+b)/2\n    elif (b<a<c):\n        return (b+c)/2\n    elif (c<a<b):\n        return (c+a)/2\n    else:\n        return (a+b)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    Finds the median of a trapezium\n    \"\"\"\n    return 0.5*(a+c)\n\ndef main():\n    a,b,c = input().split(' ')\n    a,b,c = int(a),int(b),int(c)\n    print(median_trapezium(a,b,c))\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    return (a+c)/2.0\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\nimport random\ndef median_trapezium(a,b,c):\n    \"\"\"\n    >>> median_trapezium(15,25,35)\n    20\n    \"\"\"\n    x = (a+c)/2\n    return x\n\n# Tests"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, number):\n    for i in array:\n        if i < number:\n            return 'No, entered number is less than those in the array'\n    return 'Yes'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, number):\n    if number <= array[-1]:\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes, entered number is greater than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, num):\n    if num < array[0]:\n        return 'No, entered number is less than those in the array'\n    elif num > array[len(array) - 1]:\n        return 'No, entered number is greater than those in the array'\n    else:\n        for i in range(len(array)):\n            if num > array[i]:\n                return 'Yes'\n        return 'No'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(list, number):\n    if number > list[0]:\n        return f\"Yes, {number} is greater than {list[0]}\"\n    else:\n        return f\"No, {number} is less than {list[0]}\"\n\n\n# test cases", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\n# a function to check whether the entered number is greater than the elements of the given array\ndef check_greater(array, num):\n    if num < array[0]:\n        return \"No, entered number is less than those in the array\"\n    else:\n        for i in range(len(array)):\n            if num > array[i]:\n                return \"Yes, entered number is greater than those in the array\"\n\n#main function\narray = [1, 2, 3, 4, 5]\nnum = 6", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, num):\n    \"\"\"\n    :param array: a list of integers\n    :param num: an integer to compare with the numbers in the array\n    :return: \"No, entered number is less than those in the array\" if num is less than all the elements in the array.\n             \"Yes, entered number is greater than those in the array\" if num is greater than all the elements in the array.\n    \"\"\"\n    for i in range(len(array)):\n        if num > array[i]:\n            return \"Yes, entered number is greater than those in the array\"\n    return \"No, entered number is less than those in the array\"\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(nums, elem):\n\t#iterate over nums and check if the number is greater than elem\n\tfor num in nums:\n\t\tif num > elem:\n\t\t\treturn \"Yes, entered number is greater than the elements in the array\"\n\treturn \"No, entered number is less than those in the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, n):\n    if n > max(arr):\n        return 'Yes'\n    else:\n        return 'No, entered number is less than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, num):\n    for i in array:\n        if i > num:\n            return i\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    if num < arr[0]:\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes, entered number is greater than those in the array'\n\n# Calling the function"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text[:2] == \"ab\":\n        return \"Match!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text:str)->str:\n    if not text:\n        return \"Not matched!\"\n    i = 0\n    while i<len(text) and text[i] == \"a\":\n        i+=1\n    if i == len(text):\n        return \"Not matched!\"\n    j = i\n    while j<len(text) and text[j] == \"b\":\n        j+=1\n    if j==len(text):\n        return text[i:]\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(str):\n    if str.count('a')==0:\n        return \"Not matched!\"\n    if len(re.findall('a',str)) == len(re.findall('b',str)):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    \"\"\"\n    This is a function that matches a string that has an a followed by one or more b's.\n    \"\"\"\n    if text.count('a')>0 and text.count('b')==1:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n    \ntext_match_one(\"ac\")==(\"Not matched!\")\ntext_match_one(\"abbc\")==(\"Matched!\")\ntext_match_one(\"abc\")==(\"Not matched!\")\ntext_match_one(\"ab\")==(\"Not matched!\")```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nWrite a function that takes in a string and returns a new string with the first letter of each word capitalized\n\n### Code:\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if 'a' in text and len(text) > 1:\n        return text[0]+text[1:]\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if len(text)>1:\n        if text[0]=='a' and text[1]=='b':\n            return text\n    return 'Not matched!'\ntext_match_one(\"ac\")==('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if len(re.findall(r'a', text)) > 0:\n        if len(re.findall(r'b', text)) > 0:\n            return text\n    return 'Not matched!'\n\ndef text_match_one2(text):\n    if re.search(r'a\\w*', text):\n        if re.search(r'b\\w*', text):\n            return text\n    return 'Not matched!'\n\ndef text_match_one3(text):\n    if re.search(r'a.*b', text):\n        return text\n    return 'Not matched!'\n\ndef text_match_one4(text):\n    if re.search(r'a{1,}b', text):\n        return text\n    return 'Not matched!'\n\ndef text_match_one5(text):\n    if re.search(r'a+b', text):\n        return text\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if 'a' in text and 'b' in text:\n        return text\n    return ('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    pass\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(word):\n    if len(word) < 2:\n        return \"Not matched!\"\n    if word[0] != 'a':\n        return \"Not matched!\"\n    if word[-1] != 'b':\n        return \"Not matched!\"\n    if len(word) > 2:\n        if word[-2] != 'b':\n            return \"Not matched!\"\n        i=1\n        while i < len(word)-2:\n            if word[i] != 'b':\n                return \"Not matched!\"\n            i+=1\n    return \"Matched!\"\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(number):\n    digit_sum = 0\n    for i in range(len(number)):\n        digit_sum += int(number[i])\n    return digit_sum%10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n# Solution\ndef last_Digit(n):\n    return n % 10\n\n# Tests", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(number):\n    if number < 10:\n        return number\n    else:\n        return last_Digit(number // 10)\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return num % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n  return num % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    if n<10:\n        return n\n    else:\n        return last_Digit(n//10)\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    if n < 10:\n        return n\n    else:\n        return last_Digit(n // 10)\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n#Solution for last_Digit\ndef last_Digit(number):\n    return number % 10\n\n#last_Digit Function Test", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    \"\"\"\n    Return the last digit of a given number.\n    :param num: a number\n    :type num: int\n    :return: the last digit of the number\n    :rtype: int\n    \"\"\"\n    if num < 10:\n        return num\n    else:\n        return last_Digit(num/10)\n\n\n# run doctests"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    for i in lst:\n        if i < 0:\n            print(i)\n    return\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    for i in range(0,len(lst)):\n        if lst[i]<0:\n            print(lst[i])\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(num_list):\n    return [num for num in num_list if num < 0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(l):\n    for x in l:\n        if x < 0:\n            print(x)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(nums):\n    out = []\n    for num in nums:\n        if num < 0:\n            out.append(num)\n    return out", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    lst = list(lst)\n    for i in lst:\n        if i < 0:\n            lst.remove(i)\n    return lst\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(nums):\n    neg_nos = []\n    for i in nums:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(nums):\n    for num in nums:\n        if num<0:\n            print(num)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\n# Soln 1:\ndef neg_nos(n):\n    for x in n:\n        if x < 0:\n            return x\n\n# Soln 2:\ndef neg_nos(n):\n    return [x for x in n if x < 0]\n\n#Soln 3:\ndef neg_nos(l):\n    return [x for x in l if x < 0]\n\n#Soln 4:\ndef neg_nos(l):\n    for i in l:\n        if i < 0:\n            yield i"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(word):\n    \"\"\"\n    word is a string, the output is a string\n    \"\"\"\n    odd = \"\"\n    for ch in word:\n        if (ch % 2) != 0:\n            odd += ch\n    return odd\n\n\ndef test_remove_odd():\n    assert remove_odd(\"python\")==(\"yhn\")\n    assert remove_odd(\"python_is_fun\")==(\"is_fun\")\n    assert remove_odd(\"python\") == \"python\"\n    assert remove_odd(\"python_is_fun\") == \"python_is_fun\"\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str_input):\n    #Write your code here\n    odd_num=0\n    odd=[]\n    even=[]\n    for i in str_input:\n        if(i.isdigit()==False):\n            even.append(i)\n            odd_num+=1\n        else:\n            odd.append(i)\n    if(odd_num%2==0):\n        return even+odd\n    else:\n        return even+odd+['#']\n    \nremove_odd(\"python\")==(\"yhn\")```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n8.8\n\n### Code:\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    return ''.join(ch for ch in s if ch % 2 == 0)\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\n#remove the first odd character\ndef remove_odd(s):\n    odd_char = \"\"\n    if len(s)%2==0:\n        return s\n    for i in s:\n        if i.isdigit() == 0:\n            odd_char += i\n    return odd_char + remove_odd(s[len(s)//2:])\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    ans = ''\n    for i in s:\n        if i % 2 != 0:\n            ans += i\n    return ans", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n\todd = list(set(s) - set(s[::2]))\n\treturn \"\".join(odd)\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    odd_char = [' ','!','@','#','$','%','^','&','*','(',')','-','_','=','+','.','[',']','{','}','<','>','?','/','`','~']\n    result = ''\n    for char in str:\n        if char not in odd_char:\n            result += char\n    return result\n\n# assert remove_odd(\"python\")==(\"yhn\")\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    str1 = \"\"\n    for i in range(len(str)):\n        if i%2==0:\n            str1+=str[i]\n    return str1\n\n#assert remove_odd(\"python\")==(\"yhn\")\n#print(remove_odd(\"python\"))\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\nimport random\n\ndef remove_odd(string):\n    \"\"\"\n    >>> remove_odd('codewars')\n    'odewars'\n    \"\"\"\n    return \"\".join(filter(lambda x: x%2 == 0, string))\n\n# Python program to remove odd characters in a string\n# def remove_odd(string):\n#     # get the length of the string\n#     length = len(string)\n#     # loop to remove odd characters\n#     for i in range(length):\n#         if string[i]%2 == 1:\n#             string = string[:i] + string[i+1:]\n#     return string\n\n# Python program to remove odd characters in a string\n# def remove_odd(string):\n#     # get the length of the string\n#     length = len(string)\n#     # loop to remove odd characters\n#     for i in range(length):\n#         # if odd append to a list\n#         if string[i]%2 == 1:\n#             odd_list.append(string[i])\n#     # make a string by iterating over the list\n#     return ''.join(odd_list)\n\n# Python program to remove odd characters in a string\n# def remove_odd(string):\n#     # get the length of the string\n#     length = len(string)\n#     # loop to remove odd characters\n#     for i in range(length):\n#         # if odd append to a list\n#         if string[i]%2 == 1:\n#             odd_list.append(string[i])\n#     # make a string by iterating over the list\n#     return ''.join(odd_list)", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str_in):\n    odd_char=[]\n    for c in str_in:\n        if c.isodd():\n            odd_char.append(c)\n    return \"\".join(odd_char)\n\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nfrom collections import defaultdict\n\n\ndef count_bidirectional(values):\n    d = defaultdict(list)\n    for a, b in values:\n        d[a].append(b)\n        d[b].append(a)\n\n    for i in d.keys():\n        d[i].sort()\n    return str(len(d))\n\n\ndef test():\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(list_of_tuples):\n\n    counts = {}\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1, len(list_of_tuples)):\n            if list_of_tuples[i] == list_of_tuples[j]:\n                if list_of_tuples[i] not in counts:\n                    counts[list_of_tuples[i]] = 1\n                else:\n                    counts[list_of_tuples[i]] += 1\n\n    return str(sum(counts.values()))\n\n# assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n# assert count_bidirectional([(1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n# assert count_bidirectional([(1, 2), (6, 5), (9, 1), (6, 5)] ) == '1'\n# assert count_bidirectional([(5, 6), (1, 2), (6, 5)] ) == '1'\n# assert count_bidirectional([(1, 2), (6, 5), (1, 2)] ) == '1'\n# assert count_bidirectional([(1, 2), (6, 5), (9, 1), (1, 2)] ) == '0'\n# assert count_bidirectional([(1, 2), (6, 5), (9, 1), (6, 6)] ) == '0'\n# assert count_bidirectional([(1, 2), (6, 5), (9, 1), (6, 5), (1, 1)] ) == '0'\n# assert count_bidirectional([(1, 2), (6, 5), (9, 1), (6", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# O(n) time | O(n) space\ndef count_bidirectional(pairs):\n    bidirectional = 0\n    for pair in pairs:\n        if pair[0] < pair[1]:\n            bidirectional += 1\n        else:\n            bidirectional += 1\n    return str(bidirectional)\n\n\n# O(n) time | O(n) space\ndef count_bidirectional2(pairs):\n    bidirectional = 0\n    for pair in pairs:\n        if pair[0] < pair[1]:\n            bidirectional += 1\n        else:\n            bidirectional += 1\n    return str(bidirectional)\n\n\n# O(n) time | O(n) space\ndef count_bidirectional3(pairs):\n    bidirectional = 0\n    for pair in pairs:\n        if pair[0] < pair[1]:\n            bidirectional += 1\n        else:\n            bidirectional += 1\n    return str(bidirectional)\n\n\n# O(n) time | O(n) space\ndef count_bidirectional4(pairs):\n    bidirectional = 0\n    for pair in pairs:\n        if pair[0] < pair[1]:\n            bidirectional += 1\n        else:\n            bidirectional += 1\n    return str(bidirectional)\n\n\n# O(n) time | O(n) space\ndef count_bidirectional5(pairs):\n    bidirectional = 0\n    for pair in pairs:\n        if pair[0] < pair[1]:\n            bidirectional += 1\n        else:\n            bidirectional += 1\n    return str(bidirectional)", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(lst):\n    #your code here\n    return \"3\"\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(pairs):\n    \"\"\"\n    count number of bidirectional tuples\n    :param pairs: list of tuples\n    :return: bidirectional tuple count\n    \"\"\"\n    return len(set([tuple(sorted(pair)) for pair in pairs if pair[0] != pair[1]]))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(pairs):\n    # Create a set of all elements of all pairs\n    elements = set()\n    for x, y in pairs:\n        elements.add(x)\n        elements.add(y)\n\n    # Create a dictionary of pairs as keys and their count as values\n    pairs_dict = {}\n    for x, y in pairs:\n        if (x, y) in pairs_dict:\n            pairs_dict[(x, y)] += 1\n        else:\n            pairs_dict[(x, y)] = 1\n\n    # Return the number of bidirectional pairs\n    return len([pair for pair, count in pairs_dict.items() if count == 2])\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuples):\n    count = 0\n    for item in tuples:\n        if (item[0] > item[1]) and (item[1] > item[0]):\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nfrom collections import defaultdict\n\ndef count_bidirectional(values):\n    \"\"\"Return the number of bidirectional tuple pairs\"\"\"\n    if not values:\n        return 0\n    values_count = defaultdict(int)\n    for first_value, second_value in values:\n        values_count[(first_value, second_value)] += 1\n        values_count[(second_value, first_value)] += 1\n    return len(values_count.values())\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef count_bidirectional(pairs):\n    \"\"\" Count the pairs, assuming they are bidirectional. \"\"\"\n    pairs_dict = defaultdict(list)\n    for pair in pairs:\n        pairs_dict[pair[0]].append(pair[1])\n        pairs_dict[pair[1]].append(pair[0])\n    return len(pairs_dict[pairs[0][0]])\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# Write your code here.\ndef count_bidirectional(lst):\n    return len(set(lst))\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(list):\n    ans = 0\n    for i in range(len(list)):\n        ans += (list[i] % 10) * 10**i\n    return ans\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(arr):\n    return int(''.join(map(str, arr)))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(arr):\n    result=arr[0]\n    for i in arr[1:]:\n        result = result * i\n    return result\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(my_list):\n    return sum(my_list)\n\ndef test_multiple_to_single():\n    assert multiple_to_single([11, 33, 50])==113350", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list_of_multiple_integers):\n    pass\n\n\ndef multiple_to_single(list_of_multiple_integers):\n    return sum(list_of_multiple_integers)\n\n# assert multiple_to_single([11, 33, 50]) == 113350\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    return sum(numbers)\nmultiple_to_single([11, 33, 50])```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nExercise 5Given a number n and a list of integers list1, implement a function to check if the list contains any integer that is a multiple of n.\n\n### Code:\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(integers_list):\n    \"\"\"\n    Convert a list of integers into a single integer.\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\nimport math\n\ndef multiple_to_single(nums):\n    return math.prod(nums)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(arr):\n    return sum(arr)\n\n# assert multiple_to_single([11, 33, 50]) == 113350\n\ndef multiple_to_single(arr):\n    return sum(arr)\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(array):\n    s = 0\n    for i in array:\n        s+=i\n    return s\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(text):\n    index = 0\n    for word in text.split(' '):\n        if (word[0].lower() in ['a', 'i', 'u', 'e', 'o']) and word[1:].lower()[-1] == 'y':\n            index += 1\n            if (index % 2 == 0):\n                adverb_position = index\n                adverb = word[1:-1].lower()\n                break\n    return (index, index+len(adverb), adverb)\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nfrom test import Test, TestCode, TestSubmission\n\n# Write your function here\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk import pos_tag\n\nlemmatizer = WordNetLemmatizer()\n\n\ndef find_adverb_position(sentence, pos='v'):\n    \"\"\"\n    Returns the positions of adverbs in a sentence.\n    :param sentence: a string representing a sentence\n    :param pos: adjective tag\n    :return: list of tuples containing positions and adverbs\n    \"\"\"\n    sentences = nltk.sent_tokenize(sentence)\n    adverbs = []\n    for sentence in sentences:\n        words = word_tokenize(sentence)\n        tagged_words = pos_tag(words)\n        for i, word in enumerate(tagged_words):\n            if word[1] == pos:\n                adverbs.append(word)\n    return adverbs\n\n\ndef find_adverb_position2(sentence, pos='v'):\n    \"\"\"\n    Returns the positions of adverbs in a sentence.\n    :param sentence: a string representing a sentence\n    :param pos: adjective tag\n    :return: list of tuples containing positions and adverbs\n    \"\"\"\n    tokens = word_tokenize(sentence)\n    adverbs = []\n    for i, token in enumerate(tokens):\n        if token.startswith('RB'):\n            adverbs.append((i, token))\n    return adverbs\n\n\ndef find_adverb_position3(sentence, pos='v'):\n    \"\"\"\n    Returns the positions of adverbs in a sentence.\n    :param sentence: a string representing a sentence\n    :param pos: adjective tag\n    :return: list of tuples containing positions and adverbs\n    \"\"\"\n    tokens = word_tokenize(sentence)\n    adverbs = []\n    for i, token in enumerate(tokens):\n        if token.startswith('RB') and token.isalpha():\n            adverbs.append((i, token))\n    return adverbs\n\n\ndef find_adverb_position4(sentence, pos='v'):\n    \"\"\"\n    Returns the positions of adverbs in a sentence.\n    :param", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    position=[]\n    for i in range(len(sentence)):\n        if sentence[i].lower() in adverb_list:\n            position.append((i,i+len(sentence[i]),sentence[i]))\n    return position\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n#     TODO: write your code here\n    start = sentence.find(\"!\")\n    start_index = sentence.find(\"!\")+1\n    adv = sentence[start_index:len(sentence)]\n    return start,start_index, adv\n\n# tests", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    adverb_positions = []\n    for i in range(len(sentence)-1):\n        for j in range(i,len(sentence)):\n            if i+1 == j:\n                continue\n            adverb_positions.append((i,j,sentence[i:j]))\n    return adverb_positions\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i]=='!' or sentence[i]=='?' or sentence[i]=='!?' or sentence[i]=='!' or sentence[i]=='!?!':\n            if i!=0 and i!=len(sentence)-1:\n                adverbs.append((i,i+1,sentence[i-1:i+2]))\n    return adverbs\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    pass\n\n#Assert", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n  adverbs = []\n  adverbs_list = sentence.split()\n  for i in range(len(adverbs_list)):\n    if adverbs_list[i] in adverbs_list:\n      adverbs.append(adverbs_list[i])\n  return adverbs\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(x):\n    return 6*x**2", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return side*side*side\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    return side**2*3\n\n\ndef surfacearea_rect(width, height):\n    return width*height\n\ndef surfacearea_cylinder(radius, height):\n    return 2*radius*height\n\ndef surfacearea_sphere(radius):\n    return 4*3.14*radius**2", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(sides):\n    return sides * sides * sides\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(size):\n    \"\"\"\n    Computes the surface area of a cube given its size\n    \"\"\"\n    return 6*size*size\n\n#Test case", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return side**2*6", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\nfrom math import sqrt\nfrom math import pi\n\ndef surfacearea_cube(l):\n    return (4 * pi * l * l * l)\n\ndef test():\n    assert surfacearea_cube(5)==150\n\ndef main():\n    l = int(input(\"Enter the length of the side of the cube: \"))\n    print(surfacearea_cube(l))\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(n):\n    return n ** 2 * 6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    return 6*side*side\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(length):\n    return length*length*length\n\n\n# -\n\nsurfacearea_cube(1)\n\n\n# +\n# problem 3"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(array):\n  positive = 0\n  for num in array:\n    if num > 0:\n      positive += 1\n  return positive/len(array)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\nfrom numpy import mean\n\ndef positive_count(arr):\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > 0:\n            result += 1\n\n    return result / n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    return sum(1 for x in arr if x > 0)/len(arr)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return float(count) / len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    length = len(numbers)\n    positive_count = 0\n    for number in numbers:\n        if number >= 0:\n            positive_count += 1\n    return positive_count / length\n\n\ndef test_positive_count():\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n    print(positive_count([0, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n    print(positive_count([-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5]))\n    print(positive_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    return float(sum(1 for n in nums if n > 0))/len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    return float(arr.count(1))/float(len(arr))\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    if len(nums) == 0:\n        return 0\n    positive_sum = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            positive_sum += 1\n    return positive_sum / len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(l):\n    total = 0\n    for i in l:\n        if i>0:\n            total += 1\n\n    return (total/len(l))\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\nimport math\n\ndef positive_count(integers):\n    positive_count = 0\n    for i in integers:\n        if i>0:\n            positive_count+=1\n    return positive_count/len(integers)\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\n#solution\ndef largest_neg(num_list):\n    maximum = -999999\n    for i in num_list:\n        if i < 0:\n            if i > maximum:\n                maximum = i\n    return maximum\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(a):\n    if len(a)==0:\n        return None\n    else:\n        if a[0]>=0:\n            return largest_neg(a[1:])\n        else:\n            return a[0]\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    \"\"\"\n    This function finds the largest negative number in the given list.\n    It takes a list of integers as input and returns the largest negative number\n    in the list.\n    \"\"\"\n    if lst == []:\n        return 0\n    else:\n        max = lst[0]\n        for i in lst:\n            if i < 0:\n                if i > max:\n                    max = i\n        return max\n        \n# Driver Code\nlst = [-6, -4, 1, 2, 3]", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    largest_neg = -9999\n    for n in lst:\n        if n < 0:\n            if n > largest_neg:\n                largest_neg = n\n    return largest_neg", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(l):\n    if len(l) == 0:\n        return -1\n    elif l[0] < 0:\n        return l[0]\n    else:\n        return largest_neg(l[1:])\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(arr):\n    if len(arr) == 0:\n        return None\n    if arr[0] >= 0:\n        return max(arr)\n    return max(arr)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\n# 2020-05-05\n# [1, 2, 3, -4, -6]\n# -6\n\ndef largest_neg(a_list):\n    # Initialize the result variable\n    result = a_list[0]\n\n    # Loop through the list\n    for element in a_list[1:]:\n        if element > result:\n            result = element\n        elif element < result:\n            result = -1*element\n            \n    # Return the result\n    return result\n\n# Call the function", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(arr):\n    i = 0\n    largest = 0\n    while arr[i] < 0:\n        largest = arr[i]\n        i += 1\n    return largest", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\n# function to find the largest negative number from the given list\ndef largest_neg(lst):\n    lst.sort()\n    return lst[len(lst) - 1]\n\n\nlst = [1,2,3,-4,-6]", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    lst.sort()\n    return lst[-1]\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef largest_neg(lst):\n    lst.sort()\n    return lst[-1]\n\n# Enter the list\nlst = [1, 2, 3, -4, -6]\n\n# Calling the function"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(t, k):\n    return [list(x)[:k] for x in t]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(lst, k):\n    return [i[:k] for i in lst]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n\tif k > 0:\n\t\treturn tuple(map(lambda tup: tup[:k], tuple_list))\n\telif k == 0:\n\t\treturn tuple_list\n\telse:\n\t\treturn tuple()\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    result = list()\n    for i in tuple_list:\n        result.append(i[:k])\n    return result\n\n\n# test", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(lists, k):\n    \"\"\"\n    >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n    '[(2,), (9,), (2,), (2,)]'\n    \"\"\"\n    return [tuple(item[:-k]) for item in lists]\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    >>> assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    \"\"\"\n    return [list(i)[-k:] for i in tuple_list]", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\nfrom typing import List\n\ndef trim_tuple(tup: List[tuple], k: int) -> List[tuple]:\n    return [x[:k] for x in tup]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tup_list,k):\n    return [i[:k] for i in tup_list]", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\n# list of tuples\nmy_list = [(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)]\n\n# Solution:\ndef trim_tuple(list, k):\n    # write your code here\n    return [x[:k] for x in list]\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuples, k):\n    return [t[k:] for t in tuples]\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1,t2):\n    temp = []\n    for i in range(len(t1[0])):\n        temp.append(t1[0][i]*t2[0][i])\n    for i in range(len(t1[1])):\n        temp.append(t1[1][i]*t2[1][i])\n    for i in range(len(t1[2])):\n        temp.append(t1[2][i]*t2[2][i])\n    for i in range(len(t1[3])):\n        temp.append(t1[3][i]*t2[3][i])\n    return temp", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    else:\n        return tuple(a * b for a, b in zip(tuple1, tuple2))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(a, b):\n    assert len(a) == len(b)\n    ans = []\n    for i in range(len(a)):\n        ans.append(tuple(i for i in zip(a[i], b[i])))\n    return tuple(ans)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(t1[i] * t2[i])\n    return tuple(result)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1, t2):\n    return tuple(x*y for x,y in zip(t1,t2))\n\ndef test_index_multiplication():\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert index_multiplication(((3, 4), (5, 6)),((7, 8), (1, 2)) ) == ((21, 24), (5, 12))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1, t2):\n    \"\"\"\n    >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    True\n    \"\"\"\n    return tuple(x * y for x, y in zip(t1, t2))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1,tuple2):\n    res = ()\n    for i in range(0,len(tuple1)):\n        res += ((tuple1[i][0]*tuple2[i][0],tuple1[i][0]*tuple2[i][1]),(tuple1[i][1]*tuple2[i][0],tuple1[i][1]*tuple2[i][1]))\n    return res\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1, t2):\n    assert isinstance(t1, tuple) and isinstance(t2, tuple)\n\n    return tuple(map(lambda x, y: x * y, t1, t2))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(a,b):\n    if len(a) != len(b):\n        print(\"len(a) != len(b)\")\n        return None\n    else:\n        return [i*j for i,j in zip(a,b)]\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1,t2):\n    return tuple(map(lambda x,y:x*y,t1,t2))\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(l, k):\n    \"\"\"\n    :type l: list\n    :type k: list\n    :rtype: int\n    \"\"\"\n    return sum([1 if i in k else 0 for i in l])\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n# Solution:\ndef count_Occurrence(tup,lst):\n    x = 0\n    for i in lst:\n        for j in tup:\n            if i == j:\n                x += 1\n    return x\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(lis,lis1):\n    dict={}\n    for i in range(len(lis)):\n        if lis[i] in dict:\n            dict[lis[i]]+=1\n        else:\n            dict[lis[i]]=1\n    #print(dict)\n    count=0\n    for key,value in dict.items():\n        if key in lis1:\n            count+=value\n    return count", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list1,list2):\n    res = 0\n    for i in list1:\n        if i in list2:\n            res += 1\n    return res\n\n\n# +\n#TEST CASES\n\nlist1 = ['a', 'a', 'c', 'b', 'd']\nlist2 = ['a', 'b']", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list,tuple):\n    count = 0\n    for x in tuple:\n        if x in list:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list,sub_list):\n    num_of_occurences = 0\n    for i in range(len(sub_list)):\n        if list.count(sub_list[i]) > 1:\n            num_of_occurences += 1\n    return num_of_occurences\n\ndef check(list,sub_list):\n    return count_Occurrence(list,sub_list) == sub_list.__len__()\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(lst,lst1):\n    result = 0\n    for i in lst1:\n        if i in lst:\n            result +=1\n    return result\n\n\ndef test_count_Occurrence():\n    lst = ['a', 'a', 'c', 'b', 'd']\n    lst1 = ['a', 'b']\n    assert count_Occurrence(lst,lst1) == 3\n    print \"test passed\"\n\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list1,list2):\n    count = 0\n    for i in list2:\n        if i in list1:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(l,L):\n    # your code here\n    return len(set(l).intersection(set(L)))"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(lst):\n    return list(map(lambda x: x**3, lst))\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x:x**3, nums))\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(cube_nums(nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda lst: [elem ** 3 for elem in lst]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(lst):\n    return [i ** 3 for i in lst]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    \"\"\"\n    >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    \"\"\"\n    return list(map(lambda x: x**3, nums))\n\n# +", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ncube_nums = lambda lst: [x*x*x for x in lst]\n\n# assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    nums = [i for i in nums]\n    cube = [i**3 for i in nums]\n    return cube", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda list_of_nums: [x**3 for x in list_of_nums]\n\ndef test_cube_nums():\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda nums: list(map(lambda x: x ** 3, nums))\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Args:\n        n (int): number of perrin numbers\n\n    Returns:\n        (int): sum of perrin numbers\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if (1 + (i % 2) * i) % 3 != 0:\n            sum += i\n    return sum\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    res = 0\n    for i in range(1,n+1):\n        for j in range(1,i):\n            k = 0\n            while i % j == 0:\n                k += 1\n                i = i/j\n            if k == 0 and i != 1:\n                res += i\n    return res\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    count = 0\n    for i in range(1,n):\n        if i == 1:\n            continue\n        if (i % 10 == 0 and i % 3 != 0 and i % 5 != 0):\n            count += 1\n    return count\n\ndef main():\n    n = 10\n    print(cal_sum(n))\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(number):\n    sum_ = 0\n    for i in range(1, number + 1):\n        sum_ += i\n        if i % 4 == 0 and i % 7 == 0:\n            sum_ += i\n        if i % 7 == 0 and i % 10 == 0:\n            sum_ += i\n    return sum_\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\nfrom itertools import product\n\ndef cal_sum(n):\n    \"\"\"\n    Use itertools to calculate the sum of the perrin numbers\n\n    Args:\n        n (int): the order of the Perrin numbers\n\n    Returns:\n        int: the sum of the Perrin numbers\n    \"\"\"\n    return sum(int(''.join(map(str, pair))) for pair in product(range(0, 10), repeat=n))\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    summ = 0\n    for i in range(1,n+1):\n        summ += i * (i**3 - i)\n    return summ\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    sum = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            if i+j==n+1:\n                sum += i * j\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    sum = 0\n    while n > 1:\n        if (n % 2) == 0:\n            sum += n\n            n /= 2\n        else:\n            sum += n\n            n += 1\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return cal_sum(num-1) + num\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if is_perrin(i):\n            sum += i\n    return sum\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a,b,c):\n\t'''\n\tThis function checks whether triangle is valid or not.\n\t'''\n\tif(a+b<c or a+c<b or b+c<a):\n\t\treturn \"No\"\n\telse:\n\t\treturn \"Yes\"\n\na=int(input(\"Enter first value: \"))\nb=int(input(\"Enter second value: \"))\nc=int(input(\"Enter third value: \"))", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    return (x2 - x1) * (y3 - y1) == (x3 - x1) * (y2 - y1)\n\n# Test case", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\n#Solution\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if x2 == x3:\n        if y2 == y3:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if y2 == y3:\n            return 'No'\n        else:\n            if x1 == x3:\n                if y2 == y3:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                if y1 == y3:\n                    if x2 == x3:\n                        return 'Yes'\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a, b, c, d, e, f):\n    if (c ** 2 == a * (b + d) or c ** 2 == (a + b) * d or c ** 2 == a * b):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_triangle(a,b,c,d):\n    if a+b>c+d and a+c>b+d and b+d>c+d:\n        return 'Yes'\n    else:\n        return 'No'\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c):\n    if (a+c > b and a+c < a + b and b+c > a and b+c < a+b and a+b > c and a+b < a+c and b+c > b and b+c < b+c and c+a > a and c+a < c+b and c+b > c and c+b < c+b):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a, b, c, d, e, f):\n    # Compute the semi-perimeter\n    s = (a+b+c)/2\n    # Compute the area\n    area = (s*(s-a)*(s-b)*(s-c))/2\n\n    # Check if the given conditions are valid\n    if a+b>c and c+d>a and a+d>b and b+e>c and c+f>d and d+e>a and a+f>b and b+f>c and c+e>d and d+f>e and e+f>a and e+f>b and f+e>d and f+e>c and f+d>e and f+c>e:\n        if area == (d-c+e-a+f-b):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    if x1 == x2 or x2 == x3 or x3 == x1 or y1 == y2 or y2 == y3 or y3 == y1:\n        return \"Yes\"\n    else:\n        return \"No\""], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list_of_strings, size):\n    \"\"\"\n    This function takes a list of strings and extracts size number of strings from list.\n    \"\"\"\n    final_list = []\n    for i in range(0,size):\n        final_list.append(list_of_strings[i])\n    return final_list\n\n#Here is an example usage:\n\n# Enter the list\nlist_of_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n\n# Calling the function", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list, size):\n    return string_list[:size]", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst,n):\n    '''\n    Input: list lst, int n\n    Output: list of strings of size n\n    '''\n    if n>len(lst):\n        print(\"Number of items in the list is lesser than n\")\n        return\n    return lst[:n]\n\n\nlst = ['Python', 'list', 'exercises', 'practice', 'solution']\nextract_string(lst,8)\n\n\n# +\ndef  add(x, y):\n    return x+y\n\nadd(10,20)\n\n\n# +\ndef  add(x, y):\n    return x+y\n\ndef  sub(x, y):\n    return x-y\n\ndef  mult(x, y):\n    return x*y\n\ndef  div(x, y):\n    return x/y\n\noperator = {\n    'add':add,\n    'sub':sub,\n    'mult':mult,\n    'div':div\n}\n\ndef  exec_operator(op,x,y):\n    return operator[op](x,y)\n\nexec_operator('add',10,20)\n\n\n# +\ndef find_all_numbers(nums):\n    num_list = []\n    for i in range(len(nums)):\n        if nums[i].isdigit():\n            num_list.append(int(nums[i]))\n    return num_list\n\nfind_all_numbers('90210')\n# -\n\n# # <center>5. Longest Palindromic Substring</center>\n# Write a function to find the longest palindromic substring in a given string.", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(str_list, size):\n    \"\"\"\n    :param str_list: list of strings\n    :param size: size of strings to be extracted\n    :return: list of strings with size\n    \"\"\"\n    string_list = []\n    for string in str_list:\n        string_list.append(string[:size])\n    return string_list\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(arr, index):\n    return arr[index:index+2]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(a, n):\n    return list(map(lambda x:x[0:n],a))\n\n\n# +\n# Write a function to calculate the sum of all elements in a given list.\n# assert sum_of_list([1,2,3,4,5]) == 15\n# assert sum_of_list([]) == 0\n\ndef sum_of_list(a):\n    sum = 0\n    for i in range(len(a)):\n        sum = sum + a[i]\n    return sum\n\n\n# -\n\n# Write a function to find the intersection of two given lists.\n# assert intersection([1,2,3,4,5,6,7],[3,4,6,8,9]) == [3,4,6]\n# assert intersection([1,2,3,4,5,6,7],[3,5,7,8,9]) == []\n# assert intersection([1,2,3,4,5,6,7],[3,4,6]) == [3,4,6]\ndef intersection(a,b):\n    ans = []\n    for i in range(len(a)):\n        if a[i] in b:\n            ans.append(a[i])\n    return ans\n\n\n# Write a function to find the sum of all elements in the intersection of two given lists.\n# assert sum_of_intersection([1,2,3,4,5,6,7],[3,4,6,8,9]) == 21\n# assert sum_of_intersection([1,2,3,4,5,6,7],[3,5,7,8,9]) == 0\n# assert sum_of_intersection([1,2,3,4,5,6,7],[3,4,6]) == 12\ndef sum_of_intersection(a,b):\n    return sum(intersection(a,b))\n\n\n# Write a function to find the sum of elements in a list that occur at the odd position.\n# assert sum_of_", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list_of_string, size):\n    if size > 0 and list_of_string is not None and len(list_of_string) >= size:\n        return list_of_string[:size]\n    else:\n        return None\n\nlist_of_string = ['Python', 'list', 'exercises', 'practice', 'solution']", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list, size):\n    \"\"\"\n        :param string_list:\n        :param size:\n        :return:\n    \"\"\"\n    return string_list[::size]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(values, n):\n    return values[::n]\n\nvalues = ['Python', 'list', 'exercises', 'practice', 'solution']\nn = 8", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, size):\n    return lst[::size]\n\n#Below is an example usage:\n\n# Enter the list of strings\nlst = ['Python', 'list', 'exercises', 'practice', 'solution']\n\n# Calling the function"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text).strip()\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n# Importing the required libraries\nimport re\n\n# Function to remove whitespaces from the given string using regex\ndef remove_whitespaces(s):\n    # replacing all the spaces with a single space\n    return re.sub(' +', ' ', s)\n\n# Driver code\ns = ' Google    Flutter '", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(text):\n    # your code here\n    return text.replace(' ', '')\n\n\n# A test case.\ntext = ' Google    Flutter '", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n# remove_whitespaces(s):\n#     s = re.sub('\\s', '', s)\n#     return s\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s', '', text)\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub(' +', ' ', string)\n\n#Below is an example usage:\n\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(' +', ' ', string)\n\n# Enter the string\nstring = \"Google Flutter\"\n\n# Calling the function", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub(' +', '', string)\n\n#Below is an example usage:\n\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(' +', '', string)\n\n# Enter the string\nstring = \"Google Flutter\"\n\n# Calling the function", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string: str) -> str:\n    return re.sub(r'\\s+', '', string)\n\n#Below is an example usage:\n\nimport re\n\ndef remove_whitespaces(string: str) -> str:\n    return re.sub(r'\\s+', '', string)\n\n# Enter the string\nstring = \" Google    Flutter \"\n\n# Calling the function", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n\n#Below is an example usage:\n\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n\n# Enter the string\nstring = \"Google    Flutter\"\n\n# Calling the function\nstring = remove_whitespaces(string)\n\n# Printing the string", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\ndef remove_whitespaces(string):\n    string = re.sub(r'\\s+', '', string)\n    return string\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nstring = input()\nresult = remove_whitespaces(string)"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(income,expense):\n    if income > expense:\n        return \"No Loss\"\n    else:\n        return \"Loss\"\n\n# assert ", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount, loss):\n    if(amount>loss):\n        return(amount-loss)\n    else:\n        return(None)\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amt,loss):\n    if amt>loss:\n        return amt-loss\n    else:\n        return None\n\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(total_amount, loss_amount):\n    if(total_amount - loss_amount>0):\n        return total_amount - loss_amount\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(given_amount,actual_amount):\n    if given_amount>actual_amount:\n        return given_amount - actual_amount\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(x,y):\n    if x<y:\n        return x-y\n    else:\n        return None\n    \n#test case", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(curr,pur):\n    if pur<=curr:\n        return None\n    else:\n        return curr - pur\n\n\n# + pycharm={\"name\": \"#%%\\n\"}", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n# YOUR CODE HERE\nimport pytest\n\ndef loss_amount(amount,loss):\n    if amount>=loss:\n        return None\n    else:\n        return amount-loss\n\ndef test_loss_amount(amount,loss):\n    assert loss_amount(amount,loss)==None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(money1,money2):\n    loss=money1-money2\n    if money1<money2:\n        return loss\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount, other_amount):\n    if (amount > other_amount):\n        return amount - other_amount\n    else:\n        return None\n\n\n# def loss_amount(amount, other_amount):\n#     if amount>other_amount:\n#         return amount-other_amount\n#     else:\n#         return None\n\n\n# def loss_amount(amount, other_amount):\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     #if amount>other_amount:\n#     #    return amount - other_amount\n#     #else:\n#     #    return None\n\n\n# def loss_amount(amount, other_amount):\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     # if amount>other_amount:\n#     #     return amount - other_amount\n#     # else:\n#     #     return None\n\n\n# def loss_amount(amount, other_amount):\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else:\n#         return None\n#     if amount>other_amount:\n#         return amount - other_amount\n#     else"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    factor = 0\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factor = factor + i\n            factor = factor + (i-1)\n        i = i + 1\n    return factor\n\ndef test():\n    assert sumofFactors(18) == 26\n    assert sumofFactors(30) == 54\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tif n % i == 0:\n\t\t\tif i%2 == 0:\n\t\t\t\tsum += i\n\treturn sum\n\n#Test Case", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n# SOLUTION 1\n\n\ndef sumOfFactors(number):\n    \"\"\"Sums the factors of a number\n\n    Args:\n        number (int): Integer to factor\n\n    Returns:\n        int: Sum of factors\n    \"\"\"\n    if number < 2:\n        raise ValueError(f\"number must be greater than 1, not {number}\")\n\n    factorList = []\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factorList.append(i)\n            if number != i * i:\n                factorList.append(number // i)\n\n    return sum(factorList)\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n# Python3 program to find the sum of even \n# factors of a given number\n\n# The function returns the sum of all even \n# factors of the given number\ndef sumofFactors(num):\n    sum = 0\n    for i in range(1, num // 2 + 1):\n        if (num % i) == 0:\n            if (i % 2) == 0:\n                sum = sum + i\n    return sum\n\n# Driver code\nnum = 18", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n# Write your code here.\n\ndef sumofFactors(n):\n    i = 1\n    sum = 0\n    while i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum -= i\n        i += 1\n    return sum\n\n# Test code.", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    factors = [x for x in range(1, n+1) if n % x == 0]\n    return sum(x for x in factors if x % 2 == 0)\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\nfrom math import sqrt\n\ndef sumofFactors(n):\n\ttotal = 0\n\ti = 1\n\twhile i <= n:\n\t\tif n % i == 0:\n\t\t\tif i % 2 == 0:\n\t\t\t\ttotal += i\n\t\t\telse:\n\t\t\t\ttotal += i\n\t\t\ti += 1\n\t\telse:\n\t\t\ti += 1\n\treturn total\n\ndef factors(n):\n\ttotal = 0\n\ti = 1\n\twhile i <= n:\n\t\tif n % i == 0:\n\t\t\ttotal += i\n\t\t\ti += 1\n\treturn total\n\ndef main():\n\tprint(sumofFactors(18))\n\tprint(sumofFactors(20))\n\tprint(sumofFactors(25))\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    if (n <= 1):\n        return 0\n    sum = n\n    for i in range(2, n):\n        if(n % i == 0):\n            if((n // i) % 2 == 0):\n                sum += i\n            else:\n                sum -= i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    sum = 0\n    for i in range(1, num):\n        if (num % i) == 0:\n            if (i % 2) == 0:\n                sum = sum + i\n    return sum\n\n# Driver code\nnum = 18\nresult = sumofFactors(num)", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    s = 0\n    i = 1\n    while i <= num:\n        if num % i == 0:\n            if i % 2 == 0:\n                s += i\n            else:\n                s += i + 1\n        i += 1\n    return s\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    pattern = \"z\"\n    if text.count(pattern) > 0:\n        print(\"Found a match!\")\n    else:\n        print(\"No match!\")\n\ntext_match_wordz(\"pythonz.\")```\n\n### Output:\n\nFound a match!\n\n### Description:\n\nWrite a function that matches a word containing 'z', in the middle of the word.\n\n### Code:\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    \"\"\"\n    >>> text_match_wordz(\"pythonz.\")\n    Found a match!\n    \"\"\"\n    if 'z' in text.lower():\n        return 'Found a match!'\n    else:\n        return 'No match!'\n\n#Below is an example usage:\n\nimport re\n\ndef text_match_wordz(text):\n    \"\"\"\n    >>> text_match_wordz(\"pythonz.\")\n    Found a match!\n    \"\"\"\n    if 'z' in text.lower():\n        return 'Found a match!'\n    else:\n        return 'No match!'\n\n# Enter the text\ntext = \"This is a test\"\n\n# Calling the function", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if 'z' in text:\n        print('Found a match!')\n    else:\n        print(\"There is no match.\")\n\n\n# -\n\n# #### 10. Write a function that adds a variable to the function above. The variable should be passed in from the calling function.\n\n# +", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ntext_match_wordz(text):\n  for word in text.split():\n    if \"z\" in word:\n      return \"Found a match!\"\n  return \"No match!\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if \"z\" in text:\n        return \"Found a match!\"\n    else:\n        return \"Not Found\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n  if \"z\" in text.lower():\n    return 'Found a match!'\n  else:\n    return 'No match.'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n  for word in text.split():\n    if 'z' in word:\n      return (\"Found a match!\")\n    else:\n      return (\"No match\")\n\n#   return (\"No match\")\n#This function takes in a string and prints all the words that start with 'z'.", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n# Tests", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n\tresult = \"\"\n\tif text.find(\"z\") != -1:\n\t\tresult = \"Found a match!\"\n\treturn result\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if month in range(1,13):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month):\n    if month in [4,6,9,11] or month % 2 == 0 and month % 10 != 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_numb):\n    if month_numb in (1,3,5,7,8,10,12):\n        if month_numb==1:\n            month_days=31\n        else:\n            month_days=30\n        if month_numb not in (2,4,6,9,11):\n            return month_days\n    elif month_numb in (4,6,9,11):\n        month_days=29\n    else:\n        month_days=28\n    return month_days\n\n# assert check_monthnumb_number(5)==True\n\ndef main():\n    print(check_monthnumb_number(5)==True)\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb in range(1,13):\n        if monthnumb in [1,3,5,7,8,10,12]:\n            return True\n    return False", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month_number):\n    if month_number > 0 and month_number < 12:\n        if month_number in [1,3,5,7,8,10,12]:\n            return 31\n        if month_number in [4,6,9,11]:\n            return 30\n        if month_number in [2]:\n            if month_number == 2:\n                if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                    return 29\n                else:\n                    return 28\n            else:\n                return 29\n    return False\n\n#Testing the code\n#Example 1\nyear = 1990", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month):\n    \"\"\"\n    >>> check_monthnumb_number(5)\n    True\n    \"\"\"\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return False\n    else:\n        return \"Enter a valid month\"\n\ndef main():\n    \"\"\"\n    user input\n    \"\"\"\n    month = int(input(\"Enter month number: \"))\n    result = check_monthnumb_number(month)\n    print(result)\nmain()\n#assert check_monthnumb_number(5)==True\n#assert check_monthnumb_number(3)==True\n#assert check_monthnumb_number(6)==False\n#assert check_monthnumb_number(9)==False\n#assert check_monthnumb_number(12)==True\n#assert check_monthnumb_number(4)==False\n#assert check_monthnumb_number(7)==False\n#assert check_monthnumb_number(10)==True\n#assert check_monthnumb_number(2)==\"Enter a valid month\"\n\n#assert main()", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(m):\n    return (m%12 == 0 and m!=0) or (m%12 == 0 and m==0 and m!=0) or (m%12 != 0 and m%12 == 31) or (m%12 != 0 and m%12 != 31 and m!=0)\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb%3 == 0:\n        if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \n# test the function", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(num):\n    if num==1 or num==2:\n        if num==1:\n            return True\n        elif num==2:\n            if num==2 and num>31:\n                return False\n    if num>2 and num<13:\n        return True\n    elif num==13:\n        return True\n    elif num==14 or num==15:\n        return True\n    elif num==16 or num==17:\n        return True\n    elif num==18 or num==19:\n        return True\n    elif num==20 or num==21:\n        return True\n    elif num==22 or num==23:\n        return True\n    elif num==24 or num==25:\n        return True\n    elif num==26 or num==27:\n        return True\n    elif num==28 or num==29:\n        return True\n    elif num==30 or num==31:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month):\n    if (month==1 or month==3 or month==5 or month==7 or month==8 or month==10 or month==12):\n        if month==1:\n            return True\n        else:\n            return False\n    else:\n        if (month==4 or month==6 or month==9 or month==11):\n            return True\n        else:\n            return False\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    reversed_strings = []\n    for string in strings:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(input_list):\n    return [i[::-1] for i in input_list]\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list_of_strings):\n    return list(reversed(list_of_strings))\n\n#Test Case\nreverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(words):\n    return [word[::-1] for word in words]", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    # Write your solution here\n    return list(reversed(string_list))\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list_of_strings):\n    reversed_list_of_strings = []\n    for string in list_of_strings:\n        reversed_list_of_strings.append(string[::-1])\n    return reversed_list_of_strings", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(list_of_strings):\n    reversed_strings = []\n    for item in list_of_strings:\n        reversed_strings.append(item[::-1])\n\n    return reversed_strings\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(strings):\n  result = []\n  for i in range(len(strings)):\n    result.append(strings[i][::-1])\n  return result\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(words):\n    reversed_list = []\n    for word in words:\n        reversed_word = ''.join(reversed(list(word)))\n        reversed_list.append(reversed_word)\n    return reversed_list\n\nwords = ['Red', 'Green', 'Blue', 'White', 'Black']", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    # if the list is empty, return it as empty.\n    if len(string_list)==0:\n        return []\n    # otherwise, return the reverse of the list, i.e. the list with the first and last elements swapped.\n    return [string_list[len(string_list)-1]] + string_list[:-1] + [string_list[0]]\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\n# Solution \n\ndef find_min(lst):\n    min_lst = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min_lst):\n            min_lst = lst[i]\n    return min_lst\n\n# Driver code\nlst = [[1],[1,2],[1,2,3]]", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    return lst[0] if len(lst) == 1 else min([Find_Min(sub) for sub in lst[1:]])\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    if(len(lst) < 2):\n        return lst[0]\n    minLen = len(lst[0])\n    minIdx = 0\n    for idx in range(1, len(lst)):\n        if(len(lst[idx]) < minLen):\n            minLen = len(lst[idx])\n            minIdx = idx\n    return lst[minIdx]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(l):\n    l_min = []\n    for i in range(len(l)):\n        l_min.append(l[i][0])\n        for j in range(1,len(l[i])):\n            if l[i][j] < l_min[0]:\n                l_min[0] = l[i][j]\n    return l_min\n\ndef find_min_sublist(l):\n    l_min = []\n    for i in range(len(l)):\n        l_min.append(l[i][0])\n        for j in range(1,len(l[i])):\n            if l[i][j] < l_min[0]:\n                l_min[0] = l[i][j]\n    return l_min\n\nl1 = [[1],[1,2],[1,2,3]]\nl2 = [[1,2],[1,2,3]]\nl3 = [[1],[1,2],[1,2,3,4]]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(ls):\n\tls.sort(key = len)\n\tls = sorted(ls,key = lambda x: x[0])\n\treturn ls\n\n\ndef Find_Min_Tuple(ls):\n\tls.sort(key = lambda x: len(x))\n\tls = sorted(ls,key = lambda x: x[0])\n\treturn ls\n\n\ndef main():\n\n\tprint(\"Write a python function to find the sublist having minimum length.\")\n\tprint(\"assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\")\n\tprint(Find_Min([[1],[1,2],[1,2,3]]))\n\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(l):\n    min_len = len(l[0])\n    min_subl = l[0]\n    for i in range(1,len(l)):\n        if len(l[i]) < min_len:\n            min_len = len(l[i])\n            min_subl = l[i]\n    return min_subl\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef find_min(lst):\n    mini = 99999999\n    min_lst = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] == i+1:\n                count = count+1\n        if count < mini:\n            mini = count\n            min_lst = lst[i]\n    return min_lst\n\ndef main():\n    lst = [[1],[1,2],[1,2,3],[1,2,3,4]]\n    print(find_min(lst))\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef find_min_length(list_of_list):\n    if(len(list_of_list) == 0):\n        return []\n    min_index = 0\n    min_length = len(list_of_list[0])\n    for i in range(len(list_of_list)):\n        if len(list_of_list[i]) < min_length:\n            min_index = i\n            min_length = len(list_of_list[i])\n    return [min_index]\n\n\n# print(find_min_length([1,1]))", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(sublists):\n    \"\"\"\n    find the sublist with the minimum length\n    \"\"\"\n    sublist = sublists[0]\n    for i in range(len(sublists)):\n        if len(sublists[i]) < len(sublist):\n            sublist = sublists[i]\n    return sublist\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(sub_list):\n    if len(sub_list) == 0:\n        return []\n    min_len = len(sub_list[0])\n    min_index = 0\n    for index, sub in enumerate(sub_list):\n        if len(sub) < min_len:\n            min_len = len(sub)\n            min_index = index\n    return sub_list[min_index]\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(a,b):\n\t\"\"\"\n\tThis function calculates the area of a rectangle\n\tArgs:\n\t\ta: first length\n\t\tb: second length\n\t\"\"\"\n\tarea=a*b\n\treturn area\n\ndef test():\n\tprint(rectangle_area(5,4))\n\tprint(rectangle_area(20,30))\n\tprint(rectangle_area(10,20))\n\ntest()", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    assert isinstance(width,int)\n    assert isinstance(height,int)\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length,width):\n    return length * width\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n    return width*height", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width, height):\n    \"\"\"Calculates the area of a rectangle\"\"\"\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length, width):\n    return length*width\n\n# Run tests", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    area = width*height\n    return area\n\n# Test Case 1", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n    return width*height"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    \"\"\"\n    :param string: A string.\n    :return: A string without uppercase substrings.\n    \"\"\"\n    return re.sub(r'[A-Z]+', '', string)\n\n#Below is an example usage:\n\nimport re\n\ndef remove_uppercase(string):\n    \"\"\"\n    :param string: A string.\n    :return: A string without uppercase substrings.\n    \"\"\"\n    return re.sub(r'[A-Z]+', '', string)\n\n# Enter the string\nstring = \"cAstyoUrFavoRitETVshoWs\"\n\n# Calling the function", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\ndef remove_uppercase(s):\n    return re.sub('[A-Z]', '', s)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\n\ndef remove_uppercase(str):\n    # Write your code here\n    return re.sub(r'[A-Z]+', r'', str, flags=re.I)\n\n\ndef test_function(test_case):\n    result = remove_uppercase(test_case[0])\n    solution = test_case[1]\n    if result == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# print remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\ntest_function([[\n    'cAstyoUrFavoRitETVshoWs',\n    'cstyoravoitshos'\n], [\n    'cAstyoUrFavoRitETVshoWs',\n    'cstyoravoitshos'\n], [\n    'cAstyoUrFavoRitETVshoWs',\n    'cstyoravoitshos'\n]])\n\n# print remove_uppercase('aAC_4') == 'aac4'\ntest_function([[\n    'aAC_4',\n    'aac4'\n], [\n    'aAC_4',\n    'aac4'\n], [\n    'aAC_4',\n    'aac4'\n]])\n\n# print remove_uppercase('C0DE') == 'c0de'\ntest_function([[\n    'C0DE',\n    'c0de'\n], [\n    'C0DE',\n    'c0de'\n], [\n    'C0DE',\n    'c0de'\n]])\n\n# print remove_uppercase('    ' + remove_uppercase('   asT YoUrs Fav0RItE   ') + '    ') == 'ast your favrite'\ntest_function([[\n    '    ' + remove_uppercase('   asT YoUrs Fav0RItE   ') + '    ',\n    'ast your favrite'\n], [\n    '    ' + remove_uppercase('   asT YoUrs Fav0RItE   ') + '    ',\n    '", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(input_string):\n    result = re.sub('[A-Z]','',input_string)\n    return result\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    return s.replace('[^a-z]', '')\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(str):\n    if len(str) > 0:\n        return str.lower()\n    else:\n        return str\n\n# Testing", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(str):\n    return re.sub(r'[A-Z]', '', str)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\n\ndef remove_uppercase(s):\n    \"\"\"\n    :param s: the string\n    :return: the string with uppercase removed\n    \"\"\"\n    return re.sub(r'[A-Z]', r'', s)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    return re.sub('[A-Z]','',s)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(s):\n    \"\"\"Remove uppercase substrings from a given string by using regex\"\"\"\n    return re.sub(r\"[A-Z]\", \"\", s)\n\ndef main():\n    print(\"Exercise:\", __doc__)\n    print(\"Expected Result:\")\n    print(\"cstyoravoitshos\")\n\n    print(\"Actual Result:\", remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef extract(list_of_sublist):\n    res = []\n    for i in range(0, len(list_of_sublist)):\n        res.append(list_of_sublist[i][0])\n    return res\n\ndef test_extract():\n    assert extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\ndef test_extract_neg():\n    assert extract([]) == []\n    assert extract([[]]) == []\n    assert extract([[1], [2]]) == [1, 2]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\nfrom typing import List\n\n\ndef extract(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n\n    :param arr: list of lists\n    :return: list of first elements of each sublist\n    \"\"\"\n    return [x[0] for x in arr]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(l):\n    return [item[0] for item in l]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(L):\n    if L == []:\n        return []\n    return [L[0]] + Extract(L[1:])\n\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\nfrom functools import reduce\n\n\ndef Extract(lst):\n    return reduce(lambda x, y: x + [y[0]], lst, [])", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(l):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in l]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(aList):\n    result = []\n    for sublist in aList:\n        result.append(sublist[0])\n    return result\n\n\ndef Extract2(aList):\n    return [x[0] for x in aList]\n\n# assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\ndef Tail(aList):\n    return aList[1:]\n\n# assert Tail([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[2], [4, 5], [7, 8, 9]]\n\n\ndef First(aList):\n    return aList[0]\n\n# assert First([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\n\ndef Last(aList):\n    return aList[-1]\n\n# assert Last([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [9]\n\n\ndef Pop(aList):\n    return aList.pop()\n\n# assert Pop([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [9]\n\n\ndef Push(aList, element):\n    return aList.append(element)\n\n# assert Push([[1, 2], [3, 4, 5], [6, 7, 8, 9]], 10) == [[1, 2], [3, 4, 5], [6, 7, 8, 9], 10]\n\n\ndef Insert(aList, index, element):\n    aList.insert(index, element)\n    return aList\n\n# assert Insert([[1, 2], [3, 4, 5", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n# Write your solution here\ndef Extract(lst):\n    return [a[0] for a in lst]", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(L):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \"\"\"\n    return [i[0] for i in L]\n\n# Enter the list\nL = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]\n\n# Calling the function", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(l):\n    \"\"\"\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    if len(l) == 0:\n        return []\n    return [l[0][0]] + Extract(l[1:])\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(word):\n    count = 0\n    for letter in word:\n        if letter.isupper():\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str1):\n    return str1.count(str1.upper())\n\n# Enter the string\nstr1 = \"PYTHON\"\n\n# Calling the function", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    return len([x for x in string if x.isupper()])\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str_val):\n    \"\"\"\n    count the upper case characters in a given string\n    \"\"\"\n    print(f\"Original String: {str_val}\")\n    print(f\"Upper Case Characters: {str_val.upper()}\")\n    count = 0\n    for i in str_val.upper():\n        if i.isupper():\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    return len(list(filter(lambda x : x.isupper(),s)))", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    return sum([1 for char in s if char.isupper()])\n\n#Below is an example usage:\n\nimport string\n\ndef upper_ctr(s):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    return sum([1 for char in s if char.isupper()])\n\n# Enter the string\nstring = \"PYthon\"\n\n# Calling the function", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    return len([x for x in s if x.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(st):\n    return len([c for c in st if c.isupper()])\n\n# Test 1"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(list):\n    list_len = len(list)\n    result = []\n    for i in range(0, list_len + 1):\n        for j in range(0, i):\n            temp = list[j: i]\n            temp.sort()\n            result.append(temp)\n    return result\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    return [[x] + lst[i+1:] for i, x in enumerate(lst)]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lis):\n    temp_lis = []\n    if len(lis) == 0:\n        temp_lis.append([])\n        return temp_lis\n    else:\n        for i in range(len(lis)):\n            temp_lis.extend(combinations_list(lis[:i] + lis[i+1:]))\n            temp_lis.append(lis[:i] + [lis[i]] + lis[i+1:])\n    return temp_lis\n\ndef get_unique_list(lis):\n    temp_lis = []\n    for i in lis:\n        if i not in temp_lis:\n            temp_lis.append(i)\n    return temp_lis\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    # Write your code here\n    return ([], lst, lst+lst[0], lst+lst[0]+lst[1], lst+lst[0]+lst[1]+lst[2], lst+lst[0]+lst[1]+lst[2]+lst[3], lst+lst[0]+lst[1]+lst[2]+lst[3]+lst[4], lst+lst[0]+lst[1]+lst[2]+lst[3]+lst[4]+lst[5], lst+lst[0]+lst[1]+lst[2]+lst[3]+lst[4]+lst[5]+lst[6], lst+lst[0]+lst[1]+lst[2]+lst[3]+lst[4]+lst[5]+lst[6]+lst[7], lst+lst[0]+lst[1]+lst[2]+lst[3]+lst[4]+lst[5]+lst[6]+lst[7]+lst[8], lst+lst[0]+lst[1]+lst[2]+lst[3]+lst[4]+lst[5]+lst[6]+lst[7]+lst[8]+lst[9], lst+lst[0]+lst[1]+lst[2]+lst[3]+lst[4]+lst[5]+lst[6]+lst[7]+lst[8]+lst[9]+lst[10], lst+lst[0]+lst[1]+lst[2]+lst[3]+lst[4]+lst[5]+lst[6]+lst[7]+lst[8]+lst[9]+lst[10]+lst[11], lst+lst[0]+lst[1]+lst[2]+lst[", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    temp = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] < lst[j]:\n                temp.append([lst[i],lst[j]])\n    return temp\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n    result = []\n    if l==[]:\n        result.append([])\n    for i in range(len(l)):\n        temp = []\n        for j in range(len(result)):\n            temp.append(result[j] + [l[i]])\n        result += temp\n    return result\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    \"\"\"\n    Input:\n        lst: a list containing the elements\n    Output:\n        a list containing the combinations\n    \"\"\"\n    res = []\n    if not lst:\n        return [[]]\n    res.append([])\n    for i in lst:\n        for j in combinations_list(lst[:i] + lst[i + 1:]):\n            res.append([i] + j)\n    return res\n\n\n# tests", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n# TODO: Replace the values in the function below with your code\ndef combinations_list(input_list):\n    \"\"\"\n    This function takes in a list of strings and returns a list of lists containing all possible combinations of elements in the input list.\n\n    Example:\n    list_of_strings = ['orange', 'red', 'green', 'blue']\n    print(combinations_list(list_of_strings))\n    [[] ['orange'] ['red'] ['red', 'orange'] ['green'] ['green', 'orange'] ['green', 'red'] ['green', 'red', 'orange'] ['blue'] ['blue', 'orange'] ['blue', 'red'] ['blue', 'red', 'orange'] ['blue', 'green'] ['blue', 'green', 'orange'] ['blue', 'green', 'red'] ['blue', 'green', 'red', 'orange']]\n\n    Args:\n        input_list: A list of strings.\n    \"\"\"\n    combination_list = []\n    for i in range(len(input_list)):\n        combination = []\n        for j in range(len(input_list)):\n            if j == i:\n                continue\n            combination.append(input_list[i] + input_list[j])\n        combination_list.append(combination)\n\n    return combination_list\n\n\n# Tests", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(arr):\n    size = len(arr)\n    if size == 0:\n        return []\n    else:\n        return [arr[0], *combinations_list(arr[1:])]\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(a):\n    \"\"\"\n    Find the maximum product in a subarray of a given array\n    \"\"\"\n    # Find the index of the first element of the subarray.\n    start = 0\n    while (start < len(a)) and (a[start] < 0):\n        start += 1\n\n    # Find the index of the last element of the subarray.\n    end = len(a) - 1\n    while (end >= 0) and (a[end] < 0):\n        end -= 1\n\n    # Create the subarray.\n    subarray = a[start:end+1]\n\n    # Find the maximum product.\n    max_product = subarray[0]\n    for i in range(1, len(subarray)):\n        max_product = max(max_product * subarray[i], subarray[i])\n\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(a):\n    \"\"\"\n    Args:\n       a(list): Input list\n    Returns:\n       (int) max product of subarray\n    \"\"\"\n    n = len(a)\n    max_product = a[0]\n    for i in range(1, n):\n        max_product = max(max_product * a[i], a[i])\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n\n    # Get the sum of the elements of the array\n    sum_ = sum(arr)\n\n    # Get the maximum product of the array\n    max_product = sum_\n\n    # Iterate the array\n    for i in range(len(arr)):\n\n        # Get the product of the array elements upto index i\n        product = 1\n        for j in range(i):\n            product = product * arr[j]\n\n        # Update the max product if the product is greater than current max product\n        max_product = max(max_product, product)\n\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(a):\n    m = a[0]\n    for x in a[1:]:\n        if x < 0:\n            m = max(m, 0)\n        else:\n            m = max(m, m * x)\n    return m\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    max_prod = max(arr)\n    subarr = arr[0]\n    for i in range(1, len(arr)):\n        subarr *= arr[i]\n        max_prod = max(subarr, max_prod)\n        subarr /= arr[i]\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(array):\n    maximum = float('-inf')\n    current_product = 1\n    for i in range(len(array)):\n        current_product *= array[i]\n        if current_product > maximum:\n            maximum = current_product\n        if current_product < 0:\n            current_product = 1\n    return maximum\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n# Solution:\ndef max_subarray_product(nums):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_subarray = max(nums)\n    curr_subarray = max_subarray\n    for num in nums[1:]:\n        curr_subarray = max(num * curr_subarray, curr_subarray)\n        max_subarray = max(max_subarray, curr_subarray)\n    return max_subarray\n\n# Tests:\ndef test_max_subarray_product():\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(array):\n    max_product = 0\n    sub_array = []\n    for i, element in enumerate(array):\n        sub_array.append(element)\n        if len(sub_array) == 2:\n            max_product = max(max_product, sub_array[0]*sub_array[1])\n            del sub_array[0]\n        else:\n            max_product = max(max_product, sub_array[0]*sub_array[1])\n            max_product = max(max_product, sub_array[1]*sub_array[2])\n            del sub_array[0]\n            del sub_array[0]\n    return max_product\n\n# Tests", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    max_so_far = arr[0]\n    curr_so_far = arr[0]\n    for i in arr[1:]:\n        curr_so_far = max(curr_so_far*i, i)\n        max_so_far = max(curr_so_far, max_so_far)\n    return max_so_far\n\n# print(max_subarray_product([-2,0,-1]))"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary, value):\n    for key in dictionary:\n        if dictionary[key] != value:\n            return False\n    return True\n\ndef check_value(dictionary, value):\n    if not dictionary.values():\n        return True\n    return dictionary[dictionary.keys()[0]] == value\n\ndef check_value(dictionary, value):\n    if not dictionary.values():\n        return True\n    return dictionary.values() == [value] * len(dictionary)\n\ndef check_value(dictionary, value):\n    if len(dictionary) == 0:\n        return True\n    elif dictionary.values().count(dictionary.values()[0]) == len(dictionary):\n        return True\n    else:\n        return False\n\n\ndef check_value(dictionary, value):\n    for k,v in dictionary.items():\n        if v!=value:\n            return False\n    return True\n\ndef check_value(dictionary, value):\n    if len(dictionary) == 0:\n        return True\n    if len(set(dictionary.values())) == 1:\n        return True\n    else:\n        return False\n\ndef check_value(dictionary, value):\n    if len(dictionary) == 0:\n        return True\n    elif len(set(dictionary.values())) == 1:\n        return True\n    else:\n        return False\n\ndef check_value(dictionary, value):\n    for key in dictionary:\n        if dictionary[key] != value:\n            return False\n    return True\n\ndef check_value(dictionary, value):\n    return all(value == x for x in dictionary.values())\n\ndef check_value(dictionary, value):\n    for key in dictionary:\n        if dictionary[key] != value:\n            return False\n    return True\n\ndef check_value(dictionary, value):\n    return all(value == x for x in dictionary.values())\n\ndef check_value(dictionary, value):\n    for k,v in dictionary.items():\n        if v!=value:\n            return False\n    return True\n\ndef check_value(dictionary, value):\n    for key", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict,value):\n    for i in dict.values():\n        if i != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(person, value):\n    '''\n    Check if all values in a dictionary are equal to a given value\n    '''\n    for key in person:\n        if person[key] != value:\n            return False\n    return True\n\ndef check_value(person, value):\n    for key in person:\n        if person[key] != value:\n            return False\n    return True\n\nperson = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dct, target):\n    for k,v in dct.items():\n        if v != target:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dic,value):\n    res = True\n    for i in dic.values():\n        if i != value:\n            res = False\n            break\n    return res\n#---------------------------------------------------------------------------------------------------------", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,v):\n    lst = list(d.values())\n    if all(item == v for item in lst):\n        return True\n    else:\n        return False\n\n#test code\nd = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    for k,v in dictionary.items():\n        if v!=value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary, value):\n    \"\"\"\n    dictionary: a dictionary\n    value: an integer\n    return: True if the value is the same for all dictionary values, False otherwise\n\n    \"\"\"\n    return all([i == value for i in dictionary.values()])\n\n#Below is an example usage:\n\nimport random\n\ndef check_value(dictionary, value):\n    \"\"\"\n    dictionary: a dictionary\n    value: an integer\n    return: True if the value is the same for all dictionary values, False otherwise\n\n    \"\"\"\n    return all([i == value for i in dictionary.values()])\n\n# Enter the dictionary\ndictionary = {\"one\": 1, \"two\": 2, \"three\": 3}\n\n# Calling the function", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d, val):\n    for key in d:\n        if d[key]!= val:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict_in,value):\n    for i in dict_in:\n        if dict_in[i] != value:\n            return False\n    return True"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v}\n\n\n# +\n# We're making a function to count the number of times an item appears in a list.\n\ndef count(L, item):\n    \"\"\"\n    >>> count([1,2,2,3], 2)\n    2\n    \"\"\"\n    count = 0\n    for x in L:\n        if x == item:\n            count += 1\n    return count\n\n\n# -\n\n# Write a function to check if a number is prime or not.\n# assert prime_or_not(3)==True\ndef prime_or_not(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\n# Write a function to check if a number is divisible by 2, 3, or 5.\n# assert divisible_by_three_five(6)==True\ndef divisible_by_three_five(n):\n    if n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n        return True\n    else:\n        return False\n\n\n# Write a function to calculate the factorial of a given number.\n# assert factorial(5)==120\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n\n# +\n# Write a function to sum a list of numbers.\n# assert sum_list([1,2,3])==6\n# assert sum_list([])==0\n\ndef sum_list(L):\n    sum = 0\n    for x in L:\n        sum += x\n    return sum\n\n# -\n\n# Write a function to generate a Fibonacci sequence.\n# assert fib_seq(3)==[0,1,1]\ndef fib_seq(n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n# +\n#this is the test code, that you can change the function after that\ntest = {'c1': 'Red', 'c2': 'Green', 'c3':None}\ntest2 = {'c1': 'Red', 'c2': 'Green'}\n\ndef drop_empty(dictionary):\n    for key, value in dictionary.items():\n        if value is None:\n            del dictionary[key]\n    return dictionary\n\ndrop_empty(test) == test2\n\n\n# -\n\n# ### Write a function that takes a string and calculates the number of upper case letters and lower case letters.\n# ### Use the split function to obtain a list of words in the string\n# ### Use the map function to apply the function to the list items\n#\n# ### Assert that your function works correctly on the following strings:\n#\n# ### * \"Hello\"\n# ### * \"Hello world\"\n# ### * \"HELLO WORLD\"\n# ### * \"hello world\"\n# ### * \"HELLO1234567890\"\n\n# +\n#this is the test code, that you can change the function after that\ntest1 = \"Hello\"\ntest2 = \"Hello world\"\ntest3 = \"HELLO WORLD\"\ntest4 = \"hello world\"\ntest5 = \"HELLO1234567890\"\n\ndef upper_lower(str):\n    str_split = str.split()\n    up = str.upper()\n    lower = str.lower()\n    upper = sum(1 for c in str if c.isupper())\n    lower = sum(1 for c in str if c.islower())\n    return {\"upper\": upper, \"lower\": lower}\n\nupper_lower(test1) == {\"upper\": 2, \"lower\": 0}\nupper_lower(test2) == {\"upper\": 7, \"lower\": 4}\nupper_lower(test3) == {\"upper\": 4, \"lower\": 4}\nupper_lower(test4) == {\"upper", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v != None}\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    new_d = {}\n    for k, v in d.items():\n        if v is not None:\n            new_d[k] = v\n    return new_d\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    \"\"\"\n    The function take a dictionary as input and return a dictionary without empty items\n    \"\"\"\n    new_dict={}\n    for key,value in d.items():\n        if value != None:\n            new_dict[key]=value\n    return new_dict\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    d = dict(d)\n    for k,v in d.items():\n        if v == None:\n            del d[k]\n    return d\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    \"\"\"\n    Returns a dictionary with the same keys as the given dictionary\n    but without keys that are associated with None values.\n    >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    True\n    \"\"\"\n    return {key:value for key,value in d.items() if value is not None}\n\n#Below is an example usage:\n\nimport json\n\ndef drop_empty(d):\n    \"\"\"\n    Returns a dictionary with the same keys as the given dictionary\n    but without keys that are associated with None values.\n    >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    True\n    \"\"\"\n    return {key:value for key,value in d.items() if value is not None}\n\n# Enter the dictionary\nd = {'c1': 'Red', 'c2': 'Green', 'c3': None}\n\n# Calling the function", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n# Solution\ndef drop_empty(d):\n    return {k:v for k,v in d.items() if v}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v}\n\n#assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(array, find):\n    for i, value in enumerate(array):\n        if value > find:\n            return i\n    return False\n\n\n# Test for find_peak", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, val):\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] > arr[-1]:\n        return arr[0]\n    return find_peak(arr[:-1], val)\n\ndef test_function():\n    arr = [1, 3, 20, 4, 1, 0]\n    val = 6\n    print(find_peak(arr, val))\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# not efficient with len(arr) function call, have to find and check each element in the array\n# O(n) time | O(1) space\ndef find_peak(arr, val):\n    peak = 0\n    for i in range(len(arr)):\n        if arr[i] > peak and arr[i] > val:\n            peak = i\n    return peak\n\n\n# find the smallest element with arr[left] <= arr[mid] and arr[mid] <= arr[right]\n# find the smallest element with arr[mid] > arr[right]\n# O(n) time | O(1) space\ndef find_peak_binary(arr, left, right):\n    if left == right:\n        return left\n\n    mid = (left + right) // 2\n    if arr[left] <= arr[mid]:\n        if arr[mid] <= arr[right]:\n            return find_peak_binary(arr, left, mid - 1)\n        else:\n            return find_peak_binary(arr, mid + 1, right)\n    else:\n        if arr[mid] > arr[right]:\n            return find_peak_binary(arr, mid + 1, right)\n        else:\n            return find_peak_binary(arr, left, mid - 1)\n\n\n# O(nlogn) time | O(n) space\ndef find_peak_binary_recursive(arr, left, right):\n    if left == right:\n        return left\n\n    mid = (left + right) // 2\n    if arr[left] <= arr[mid]:\n        if arr[mid] <= arr[right]:\n            return find_peak_binary_recursive(arr, left, mid - 1)\n        else:\n            return find_peak_binary_recursive(arr, mid + 1, right)\n    else:\n        return find_peak_binary_recursive(arr, left, mid - 1)\n\n\n# O(n) time | O(1) space\ndef find_peak_binary_iterative(arr, left, right):\n    while left <= right:\n        mid = (left + right", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, val):\n    if not arr:\n        return None\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] > val:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return None\n\n\ndef test_find_peak():\n    arr = [1, 3, 20, 4, 1, 0]\n    val = 6\n    result = find_peak(arr, val)\n    assert result == 2\n\n    arr = [1, 3, 20, 4, 1, 0]\n    val = 3\n    result = find_peak(arr, val)\n    assert result == 1\n\n    arr = [1, 3, 20, 4, 1, 0]\n    val = 30\n    result = find_peak(arr, val)\n    assert result == None\n\n    arr = [1, 3, 20, 4, 1, 0]\n    val = 20\n    result = find_peak(arr, val)\n    assert result == 3\n\n    arr = [1, 3, 20, 4, 1, 0]\n    val = 1\n    result = find_peak(arr, val)\n    assert result == 0", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\nfrom numpy import *\n\ndef find_peak(array, size):\n    \"\"\"\n    Find the peak element in the given array.\n    \"\"\"\n    if size <= 1:\n        return array[0]\n    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if array[mid] < array[right]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return array[right]\n\ndef test_find_peak():\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([5, 1, 3, 20, 4, 1, 0], 7) == 4\n    assert find_peak([5, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([5, 20, 4, 1, 0], 5) == 4\n    assert find_peak([], 0) == -1\n    assert find_peak([1], 1) == 1\n    assert find_peak([1, 2], 2) == 2\n\ndef test_find_peak_size_one():\n    assert find_peak([1], 1) == 1\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, target):\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            if arr[i] > target:\n                return i\n            else:\n                return i+1\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, x):\n    if len(arr) == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    return find_peak(arr[:-1], x) if arr[1] >= arr[0] else find_peak(arr[1:], x)\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        raise ValueError('Empty List')\n    \n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if nums[mid] > target:\n            end = mid\n        else:\n            start = mid + 1\n    if nums[start] > target:\n        return start\n    return end\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(array, val):\n    min_val = array[0]\n    peak = 0\n    for i in range(len(array)):\n        if array[i] > min_val:\n            min_val = array[i]\n            peak = i\n    if val == min_val:\n        return peak\n    else:\n        return -1\n\n# find_peak([1, 3, 20, 4, 1, 0], 6) == 2", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(array, value):\n    \"\"\"Find the peak element in a sorted array\"\"\"\n    for i in range(len(array)-1):\n        if array[i] < array[i+1] and array[i] > value:\n            return i\n    return -1\n\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    if num < 0:\n        return -1\n    if num == 0:\n        return 0\n    r = 0\n    while num > 0:\n        r = (r << 3) + (num % 8)\n        num //= 8\n    return r\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    \n    # str(num) converts the num to string to do the calculations\n    # oct(num) converts the number to octal number\n    # int(num) converts the number to integer\n    # join() joins the list of string as a string\n    # 00000000 is zero in octal, so we add it to the first digit\n    # 12 is 11010 in binary, 212 is 110110 in binary, 312 is 1101110 in binary, ...\n    # so we can apply that logic for 12345 to get 11011011000000111000010011011101100110111001110000011011100111011101110000011011101110000011011110000001101111100100000001110000011100101110011011100110111001110100011100100111001110000011100010111011101110111011100000111000111110011100100111010011101101110000011100101110111011101110111000001110011111011100100111010011101101", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(number):\n    \n    print(\"Enter the number to be converted to Octal: \")\n    number = int(input())\n\n    print(\"Your number in Octal is: \",end=\"\")\n    print(bin(number)[2:])\n    print(\"Your number in Hexadecimal is: \",end=\"\")\n    print(hex(number)[2:])\n    print(\"Your number in Binary is: \",end=\"\")\n    print(bin(number))\n    \ndecimal_to_Octal(10)", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    return format(n, \"0o\")\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(dec):\n    \"\"\"\n    >>> decimal_to_Octal(10)\n    12\n    \"\"\"\n    a = 8\n    b = 1\n\n    while b < dec:\n        a += a\n        b += 1\n\n    return a + dec\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(x):\n    return oct(x)\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    n = num\n    lst = []\n    while n>0:\n        lst.append(n%8)\n        n //=8\n    lst.reverse()\n    return lst", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    ans = 0\n    while num>0:\n        ans = ans*8+num%8\n        num = num//8\n    return ans\n\n# Test cases for above function\nnum = 10", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\n# Method 1\ndef decimal_to_Octal(num):\n    # Here 0377 is the max limit of octal number.\n    if num == 0:\n        return 0\n    else:\n        return (3 * decimal_to_Octal(num // 8)) + (num % 8)\n\n\n# Method 2\ndef decimal_to_Octal_2(num):\n    octal = 0\n    while num > 0:\n        octal = (octal << 3) + num % 8\n        num = num // 8\n    return octal\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    ans = 0\n    while n > 0:\n        temp = (n%8)\n        ans = ans * 10 + temp\n        n = n//8\n    return ans\n\n\ndecimal_to_Octal(10)\n\n\ndef dec_to_oct(n):\n    ans = 0\n    while n >= 8:\n        ans += (n%8)\n        n = n//8\n    ans += n\n    return ans\n\n\ndec_to_oct(10)\n\ndecimal_to_octal(10)\n\n# +\n# Write a python function to convert decimal number to binary number.\n# -\n\nbinary_number = ['0','1']\nans = ''\nwhile n >= 2:\n    ans += binary_number[n%2]\n    n = n//2\nans += binary_number[n%2]\nans\n\n\ndef decimal_to_binary(n):\n    ans = ''\n    while n >= 2:\n        ans += binary_number[n%2]\n        n = n//2\n    ans += binary_number[n%2]\n    return ans\n\n\ndecimal_to_binary(10)\n\n\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n//2) + binary_number[n%2]\n\n\ndecimal_to_binary(10)\n\n\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n//2) + binary_number[n%2]\n\n\ndecimal_to_binary(10)\n\n\ndef decimal_to_binary(n):\n    ans = \"0\"\n    while n > 0:\n        ans = ans + binary_number[n%2]\n        n = n//2\n    return ans\n\n\ndecimal_to_binary(10)\n\ndecimal_to_binary(10)\n\n# +\n# Write a python function to convert octal number to decimal number.\n# -\n\nn = 3"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, k):\n    # TODO: Write your code here\n    if not array:\n        return 0\n    \n    maximum = array[0]\n    for i in range(k):\n        maximum = max(maximum, array[i])\n        \n    maximum_product = 1\n    for i in range(k, len(array)):\n        maximum_product = max(maximum_product, array[i] * maximum)\n        maximum = max(maximum, array[i])\n        \n    return maximum_product\n        \n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\nfrom typing import List\n\n\ndef max_product(arr: List[int], k: int) -> int:\n    max_product = arr[0]\n    i = 1\n    while i < len(arr):\n        max_product = max(max_product, arr[i])\n        if i < k:\n            max_product = max(max_product, arr[i] * arr[i])\n        i += 1\n    return max_product\n\n\ndef test():\n    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(nums, size):\n    products = [num * num for num in nums]\n    s = 1\n    n = len(nums)\n    for i in range(n):\n        s *= products[i]\n        products[i] = s\n        s //= nums[i]\n    s = 1\n    for i in range(n-1, -1, -1):\n        s *= products[i]\n        products[i] = s\n        s //= nums[i]\n    return max(products)\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\n# arr, n = [int(x) for x in input().split()]\narr = [3, 100, 4, 5, 150, 6]\nn = 6\n\n# print(arr)\n\ndef max_product(arr, n):\n    max_pr = arr[0]\n    for i in range(n):\n        if arr[i] > max_pr:\n            max_pr = arr[i]\n    max_pr = max_pr * 1\n    for i in range(n):\n        if arr[i] < max_pr:\n            max_pr = arr[i]\n    max_pr = max_pr * 1\n    for i in range(n):\n        if arr[i] == max_pr:\n            continue\n        if i < n - 1:\n            max_pr = max_pr * arr[i + 1]\n            # print(max_pr)\n            break\n    return max_pr\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    max_prod = 0\n    first_idx = 0\n    while first_idx < n:\n        curr_prod = arr[first_idx]\n        i = first_idx + 1\n        while i < n and arr[i] >= arr[first_idx]:\n            curr_prod *= arr[i]\n            i += 1\n        max_prod = max(max_prod, curr_prod)\n        first_idx = i\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul\n\ndef max_product(array, size):\n    \"\"\"\n    :param array: Input array to be searched\n    :param size: Size of the array\n    :return: Max product of the array\n    \"\"\"\n    if size == 1:\n        return array[0]\n    if size == 2:\n        return max(array[0]*array[1], array[1]*array[0])\n    else:\n        mid = size//2\n        left_array = array[:mid]\n        right_array = array[mid:]\n        left_product = max_product(left_array, mid)\n        right_product = max_product(right_array, mid)\n        return max(left_product*right_product, right_product*left_product)\n\n\ndef main():\n    print(max_product([3, 100, 4, 5, 150, 6], 6))\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    ans = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            ans = max(ans, arr[i]*arr[j])\n    return ans\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, k):\n    # Start with an empty list of product candidates\n    products = []\n\n    # Sort the array\n    array = sorted(array)\n\n    # Define a helper function to calculate product candidates\n    def candidate_product(index):\n        nonlocal products\n        candidate = 1\n        for i in range(index, index + k):\n            candidate *= array[i]\n        products.append(candidate)\n\n    # Initialize the starting index and loop over it\n    candidate_product(0)\n    while len(products) < k:\n        # Update the starting index with the next largest element in the array\n        candidate_product(find_next_largest(array, 0))\n    return max(products)\n\n\ndef find_next_largest(array, start_index):\n    largest = start_index\n    for i in range(start_index + 1, len(array)):\n        if array[largest] < array[i]:\n            largest = i\n    return largest\n\n\n# Tests", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, k):\n    sub_arr = []\n    for i in range(len(arr) - k + 1):\n        sub_arr.append(reduce(lambda x,y: x*y, arr[i:i+k]))\n        max_val = max(sub_arr)\n        sub_arr.append(max_val)\n    return max(sub_arr)\n\n# Test cases\narr = [3, 100, 4, 5, 150, 6]", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    i = 0\n    while (i < len(arr)):\n        j = i + 1\n        max_ = arr[i]\n        while (j < n):\n            if (max_ > arr[j]):\n                max_ = arr[j]\n            else:\n                break\n            j += 1\n        if max_ == arr[i]:\n            i += 1\n            continue\n        if max_ > arr[i] * arr[j]:\n            max_ = arr[i] * arr[j]\n        i = j\n    return max_\n\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    # your code here\n    if k < 1:\n        return 0\n    buy = prices[0]\n    sell = 0\n    max_profit = 0\n    for i in range(1, len(prices)):\n        if i == k:\n            sell = max(sell, prices[i])\n            max_profit = max(max_profit, sell - buy)\n        else:\n            buy = min(buy, prices[i])\n            sell = max(sell, prices[i])\n    return max_profit\n\nprices = [7, 1, 5, 3, 6, 4]\nk = 3", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if k == 0:\n        return 0\n\n    min_price = min(prices)\n    max_profit = 0\n\n    for i in range(k, len(prices)):\n        profit = prices[i] - min_price\n        max_profit = max(max_profit, profit)\n        min_price = min(prices[i], min_price)\n\n    return max_profit\n\nprices = [1, 5, 2, 3, 7, 6, 4, 5]\nk = 3", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\nfrom typing import List\n\n\n@lru_cache\ndef max_profit(prices: List[int], k: int) -> int:\n    result = 0\n    for i in range(k):\n        result += prices[i] - prices[i - 1]\n    for i in range(k, len(prices)):\n        result = max(result, prices[i] - prices[i - k])\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    max_profit = 0\n    if len(prices) < k:\n        return 0\n    for i in range(len(prices)-k):\n        profit = 0\n        for j in range(k):\n            profit += prices[i+j+1] - prices[i+j]\n        if profit > max_profit:\n            max_profit = profit\n    return max_profit\n\n# price = [1, 5, 2, 3, 7, 6, 4, 5]\n# k = 3\n\n# print(max_profit(price, k))", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if len(prices) <= 1:\n        return 0\n    profit = max_profit(prices[1:], k)\n    hold_till_k = 0\n    for i in range(len(prices)):\n        if i < k:\n            hold_till_k = max(hold_till_k, prices[i])\n            profit = max(profit, hold_till_k - prices[i])\n    return profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    if k == 0:\n        return 0\n    \n    profit = 0\n    # we need to look at our k largest values\n    # keep track of the index and store the index of the highest price value\n    index = k\n    # we will look at the k largest values\n    for i in range(k, len(prices)):\n        if prices[i] > prices[index]:\n            index = i\n        else:\n            # update the profit\n            profit = max(profit, prices[i] - prices[index])\n    return profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    max_profit = 0\n\n    for i in range(len(prices) - k + 1):\n        p = prices[i]\n        q = prices[i+k-1]\n        if p > q:\n            max_profit += (p - q)\n\n    return max_profit", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nimport numpy as np\nfrom math import floor\n\n\ndef max_profit(prices, k):\n    # write your code here\n    n = len(prices)\n    if n <= 1:\n        return 0\n    # k should always be a positive integer\n    if k < 1:\n        return 0\n\n    # sell_price = 0\n    # for i in range(1, n):\n    #     sell_price += prices[i] - prices[i - 1]\n    # return sell_price\n\n    # cum_profit = 0\n    # for i in range(k, n):\n    #     sell_price = max(prices[i], prices[i - 1])\n    #     cum_profit += sell_price - prices[i - k]\n    # return cum_profit\n\n    # for i in range(1, k):\n    #     sell_price = 0\n    #     for j in range(k, n):\n    #         sell_price += prices[j] - prices[j - k]\n    #     if sell_price > cum_profit:\n    #         cum_profit = sell_price\n    return max_profit_v2(prices, k)\n\n\ndef max_profit_v2(prices, k):\n    max_profit = 0\n    for i in range(k, len(prices)):\n        max_profit = max(max_profit, prices[i] - prices[i - k])\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    \"\"\"Find the max profit using k transactions\"\"\"\n    if not prices:\n        return 0\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(min(i + k - 1, len(prices))):\n            max_profit = max(max_profit, prices[j] - prices[i])\n    return max_profit", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nfrom typing import List\nfrom math import inf\n\n\ndef max_profit(prices: List[int], k: int) -> int:\n    assert len(prices) >= k\n    profit_table = [[] for _ in range(k+1)]\n\n    for i in range(k+1):\n        profit_table[i].append(prices[0])\n\n    for i in range(1, len(prices)):\n        for j in range(1, k+1):\n            profit = max(profit_table[j][i-1], prices[i]) - prices[i-1]\n            profit_table[j].append(profit)\n\n    return max(profit_table[k])\n\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(nums):\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(num_list):\n    length = len(num_list)\n    for i in range(length):\n        for j in range(length):\n            if i!=j:\n                yield num_list[i] + num_list[j]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple1):\n    \"\"\"\n    >>> add_pairwise([1, 5, 7, 8, 10])\n    [6, 12, 15, 18]\n    \"\"\"\n    lst = list()\n    for i in range(len(tuple1)):\n        lst.append(tuple1[i] + tuple1[i + 1])\n    return lst\n\n\ndef add_pairwise_prime(tuple1):\n    \"\"\"\n    >>> add_pairwise_prime([1, 5, 7, 8, 10])\n    [6, 12, 15, 18]\n    \"\"\"\n    lst = list()\n    for i in range(len(tuple1)):\n        lst.append(tuple1[i] + tuple1[i + 1])\n    return lst", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple_list):\n    new_list = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1,len(tuple_list)):\n            new_list.append(tuple_list[i]+tuple_list[j])\n    return new_list\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(nums):\n    return [a + b for a, b in zip(nums[:-1], nums[1:])]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_of_numbers):\n    \"\"\"\n    Write a function to find the pairwise addition of the elements of the given tuples.\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    \"\"\"\n    sum_of_pairs = list()\n    for i in range(len(tuple_of_numbers)):\n        pair_sum = tuple_of_numbers[i] + tuple_of_numbers[i+1]\n        sum_of_pairs.append(pair_sum)\n    return sum_of_pairs", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(*args):\n    return tuple([sum(x) for x in zip(*args)])\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(nums):\n    return [nums[0] + num for num in nums[1:]]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_list):\n    \"\"\"\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    \"\"\"\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            tuple_list[i] += tuple_list[j]\n\n    return tuple_list\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple_list):\n    l = len(tuple_list)\n    sum_list = []\n    for i in range(0, l - 1):\n        for j in range(i + 1, l):\n            sum_list.append(tuple_list[i] + tuple_list[j])\n    return tuple(sum_list)\n\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,m):\n    l,r = 0,len(arr)-1\n    sum = 0\n    while l < r:\n        sum += arr[l]*arr[r]\n        l+=1\n        r-=1\n    sum = sum % n\n    return sum\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    '''\n    Find the remainder of array multiplication divided by n\n    :param arr: Input Array\n    :param n: given n\n    :param m: given m\n    :return: the remainder\n    '''\n    result = 0\n    for i in range(len(arr)):\n        result += (arr[i]*m)%n\n    return result\n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    a = 0\n    for i in arr:\n        a += i * m\n    a = a % n\n    return a\n\n# Driver program to test the above function\narr = [ 100, 10, 5, 25, 35, 14 ]\nn = 6\nm = 11", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(array, n, k):\n    if k == 1:\n        return sum(array) % n\n    elif k > 1:\n        return (sum(array) % n) - find_remainder(array, n, k-1)\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n# Answer :\ndef find_remainder(arr, n, x):\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i] * x\n    s %= n\n    return s\n\n# test cases", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(ar, n, m):\n    summ=0\n    for i in ar:\n        summ = summ + i\n    summ = summ%n\n    return summ\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(A, n, m):\n    return (n*m % 100) - (A*m % 100)\n\n\nA = [ 100, 10, 5, 25, 35, 14 ]\nn = 6\nm = 11\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n#Python program to find remainder of array multiplication\n#by n.\n#Function to find remainder of array multiplication divided\n#by n.\ndef find_remainder(arr,n,k):\n\tres = 0\n\tfor i in range(len(arr)):\n\t\tres = res + arr[i] * k\n\t#res = res % n\n\treturn res % n\n\n#Test case\narr = [ 100, 10, 5, 25, 35, 14 ]\nn = 6\nk = 11\n\n#Function call\nres = find_remainder(arr,n,k)\n\n#Printing the result", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,x):\n  res = 0\n  for i in arr:\n    res = res + (i * x) % n\n  return res % n\n\n#find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11)\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,m):\n    # code here\n    sum =0\n    i = 0\n    while i < len(arr):\n        sum = sum + arr[i]*m\n        i = i+1\n    while m > 0:\n        sum = sum + arr[i]*m\n        m = m-1\n        i = i+1\n    if sum > n:\n        return sum-n\n    else:\n        return 0\n\n\n# code here\narr =[ 100, 10, 5, 25, 35, 14 ]\nn = 6\nm = 11"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(arr):\n    \n    for i in range(len(arr) - 1):\n        if arr[i] + 1 != arr[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nums):\n    if len(nums) <= 1:\n        return False\n    for i in range(len(nums) - 1):\n        if nums[i + 1] - nums[i] == 1:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(l):\n    for i in l:\n        if l.index(i)+1 < len(l) and l[l.index(i)+1] == i:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    if lst == sorted(lst):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(list1):\n    for i in range(len(list1)-1):\n        if list1[i]+1 != list1[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(num):\n    flag = True\n    for i in range(len(num) - 1):\n        if num[i] + 1 != num[i + 1]:\n            flag = False\n            break\n    return flag\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if len(list) >= 2:\n        if max(list) - min(list) <= 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(my_list):\n    return max(my_list) - min(my_list) == len(my_list) - 1\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(arr):\n    if len(arr) > 1:\n        for i in range(len(arr)-1):\n            if arr[i+1] - arr[i] != 1:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    if len(lst) < 2:\n        return False\n    i = 1\n    while lst[i] - lst[i-1] == 1:\n        i += 1\n    if i == len(lst):\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\nt1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\nt2 = [(5, 4), (3, 4), (6, 5), (9, 11)]\n\ndef tuple_intersection(tuples, subset):\n    return set(tuples[0]) & set(tuples[1])\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(*tuples):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    :param tuples:\n    :return:\n    \"\"\"\n    return set(tuples[0]).intersection(*set(tuples))\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(*args):\n    t1 = set(args[0])\n    for i in range(1, len(args)):\n        t2 = set(args[i])\n        t1 &= t2\n    return tuple(t1)\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# Defining the function\ndef tuple_intersection(a, b):\n    c = set(a) & set(b)\n    return c\n\n\n# Driver code\nlist1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\nlist2 = [(5, 4), (3, 4), (6, 5), (9, 11)]\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set1 & set2\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tup1, tup2):\n    return tuple(set(tup1).intersection(tup2))\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(*tuple_list):\n    res = set()\n    for tup in tuple_list:\n        res = res.union(set(tup))\n    return res", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\nfrom typing import List\n\ndef tuple_intersection(tuple_list_1: List[tuple], tuple_list_2: List[tuple]) -> List[tuple]:\n    \"\"\"\n    Find the intersection of elements in the given list irrespective of their order.\n\n    Args:\n        tuple_list_1 (List[tuple]): The first list of tuples.\n        tuple_list_2 (List[tuple]): The second list of tuples.\n\n    Returns:\n        List[tuple]: The intersection of the two lists of tuples.\n    \"\"\"\n    intersection = tuple_list_1.copy()\n    for element in tuple_list_2:\n        if element in intersection:\n            intersection.remove(element)\n    return intersection", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# +\n# [1,3,4,5,6,7]\n# [2,3,5,7,9,11]\n# [1,3,4,5,6,7]\n# [2,3,5,7,9,11]\n\ndef tuple_intersection(tuple_list1, tuple_list2):\n    def intersection_list(a,b):\n        return list(set(a).intersection(b))\n\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    \n    tuple_intersection = intersection_list(tuple_list1, tuple_list2)\n    return tuple_intersection\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list, tuple_list1):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    intersection = set()\n    for tup in tuple_list:\n        for tup1 in tuple_list1:\n            if tup1 == tup or tup == tup1:\n                intersection.add(tup)\n    return intersection\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(word,to_replace,new_char):\n    word = word.replace(to_replace,new_char)\n    return word\n\n#Test", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str, char_to_replace, char_to_insert):\n    \"\"\"\n    Args:\n        str (str): A string\n        char_to_replace (str): The char to replace\n        char_to_insert (str): The char to insert\n    Returns:\n        The modified string\n    \"\"\"\n    # Add your code here. Replace this string\n    return str.replace(char_to_replace,char_to_insert)\n\n# Replace 'y' with 'l'\nnew_string = replace_char(\"polygon\",'y','l')\n\n# Print the result", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, char_old, char_new):\n    \"\"\"\n    :param string: string\n    :param char_old: old char\n    :param char_new: new char\n    :return: string\n    \"\"\"\n    return string.replace(char_old, char_new)\n\n\ndef replace_char_iter(string, char_old, char_new):\n    \"\"\"\n    :param string: string\n    :param char_old: old char\n    :param char_new: new char\n    :return: string\n    \"\"\"\n    return ''.join(char_new if c == char_old else c for c in string)\n\n\ndef replace_char_gen(string, char_old, char_new):\n    \"\"\"\n    :param string: string\n    :param char_old: old char\n    :param char_new: new char\n    :return: string\n    \"\"\"\n    for c in string:\n        if c == char_old:\n            yield char_new\n        else:\n            yield c\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str, char1, char2):\n    return str.replace(char1, char2)\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s,o,n):\n    return ''.join([i if i!=o else n for i in s])\n\n#Nice test cases.", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s,old,new):\n    return \"\".join([i if i != old else new for i in s])\n\ndef test():\n    test_cases = [\n        (\"polygon\",'y','l')\n    ]\n    for case in test_cases:\n        assert replace_char(*case)==case[1]\n\ntest()", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, old_char, new_char):\n    \"\"\"\n    Return a new string where all old_char is replaced with new_char\n    >>> replace_char('polygon', 'y', 'l')\n    'pollgon'\n    >>> replace_char('hello', 'o', 'a')\n    'hella'\n    >>> replace_char('a', 'y', 'l')\n    'ay'\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n#doctests\nimport doctest\ndoctest.run_docstring_examples(replace_char, globals())\n\ndef replace_char(string, old_char, new_char):\n    \"\"\"\n    Return a new string where all old_char is replaced with new_char\n    >>> replace_char('polygon', 'y', 'l')\n    'pollgon'\n    >>> replace_char('hello', 'o', 'a')\n    'hella'\n    >>> replace_char('a', 'y', 'l')\n    'ay'\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n#doctests\nimport doctest\ndoctest.run_docstring_examples(replace_char, globals())\n\ndef replace_char(string, old_char, new_char):\n    \"\"\"\n    Return a new string where all old_char is replaced with new_char\n    >>> replace_char('polygon', 'y', 'l')\n    'pollgon'\n    >>> replace_char('hello', 'o', 'a')\n    'hella'\n    >>> replace_char('a', 'y', 'l')\n    'ay'\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n#doctests\nimport doctest\ndoctest.run_docstring_examples(replace_char, globals())\n\n# Tests\nimport pytest\n\ndef test_replace_char_empty_string():\n    assert replace_char('', 'y', 'l') == ''\n\ndef test_replace_char_string_not_modified():\n    assert replace_char('hello', 'o', 'a') == 'hello'\n\ndef test_replace_char", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, old_char, new_char):\n    if string == '':\n        return string\n    return string[:string.index(old_char)]+new_char+string[string.index(old_char)+1:]\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str, char1, char2):\n  i=0\n  str1=[]\n  while i<len(str):\n    if str[i]==char1:\n      str1.append(char2)\n    else:\n      str1.append(str[i])\n    i+=1\n  return \"\".join(str1)\n\n# + id=\"ag1ORgKZTI1M\" colab_type=\"code\" outputId=\"b306770d-d61d-4282-d3a6-10c045e3669b\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34}\n#your code\nreplace_char(\"polygon\",'y','l')\n\n# + id=\"R6e2U4K2T11S\" colab_type=\"code\" outputId=\"6082d545-d16b-489e-e3c7-f59e87f80c2f\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 87}\ndef replace_char(str, char1, char2):\n  str1=[]\n  for i in str:\n    if i==char1:\n      str1.append(char2)\n    else:\n      str1.append(i)\n  return \"\".join(str1)\n\n\n# + id=\"N371iVKJT8O_\" colab_type=\"code\" outputId=\"817a0d8e-4502-4325-d989-93e82d59407b\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34}\n#your code\nreplace_char(\"polygon\",'y','l')\n\n\n# + [markdown] id=\"qL61j1eXUAlB\" colab_type=\"text\"\n# ## 3. Two Fibonacci Numbers\n#\n# Write a function that takes an integer as a parameter and returns the sum of the two Fibonacci", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str,char,new_char):\n    new_str = \"\"\n    for s in str:\n        if s==char:\n            new_str += new_char\n        else:\n            new_str += s\n    return new_str\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    \"\"\"Sort a counter by value.\"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nfrom operator import itemgetter\ndef sort_counter(cnt):\n    sorted_items = sorted(cnt.items(), key=itemgetter(1))\n    return sorted_items\n\ndef test_sort_counter():\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    keys = list(counter.keys())\n    values = list(counter.values())\n    return sorted(zip(keys,values), key=lambda t: t[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(c):\n    return sorted(c.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\n# Add your code here\ndef sort_counter(counter):\n    counter = dict(sorted(counter.items(), key=lambda kv: kv[1],reverse=True))\n    return list(counter.items())\n\n# Tests", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    \"\"\"Write a function to sort counter by value.\n    \n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    counter_list = []\n    for key, value in counter.items():\n        counter_list.append((key, value))\n    counter_list = sorted(counter_list, key=lambda x: x[1], reverse=True)\n    return counter_list", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(ct):\n    return sorted(ct.items(), key=lambda item: item[1])\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    # TODO: write your code here\n    sorted_counter = []\n    for key in counter:\n        sorted_counter.append((key, counter[key]))\n    sorted_counter = sorted(sorted_counter, key=lambda x: x[1], reverse=True)\n    return sorted_counter\n\n# assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    pass\n\ndef test_sort_counter():\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    \"\"\"\n    Sort a dictionary by key value.\n\n    Arguments\n    counter -- dictionary with integer values\n\n    Returns\n    a list with sorted keys and values\n\n    >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n    [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    values = sorted(counter.items(), key=lambda item: item[1], reverse=True)\n    sorted_values = list(zip(*values))[0]\n    return sorted_values\n\ndef sort_counter(counter):\n    sorted_values = sorted(counter.items(), key=lambda item: item[1], reverse=True)\n    return sorted_values\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(a):\n    \"\"\"\n    This function finds the sum of the smallest and largest value in a list and return the sum\n    \"\"\"\n    big = a[0]\n    small = a[0]\n    for i in range(1, len(a)):\n        if a[i] > big:\n            big = a[i]\n        if a[i] < small:\n            small = a[i]\n    return big + small\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(lst):\n\n    # Define your code here.\n    return max(lst) + min(lst)\n\n# The following is the test code. Do not modify it.\ndef test_big_sum(big_sum):\n    assert big_sum([1, 2, 3]) == 4\n    assert big_sum([3, 2, 1]) == 4\n    assert big_sum([4, 2, 1]) == 6\n    print('All tests passed')\n\n\n# Do not modify the following code.", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(l):\n    return max(l)+min(l)\n\n# Function call", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(array):\n    if len(array) == 0:\n        return 0\n    big = min(array[0], array[1])\n    small = max(array[0], array[1])\n    for i in range(2, len(array)):\n        if array[i] > big:\n            big = array[i]\n        if array[i] < small:\n            small = array[i]\n    return big + small\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return max(arr) + min(arr)\n\nbig_sum([1,2,3])", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n# +\n# Given an array of integers, return the sum of the largest and smallest values\n\ndef big_sum(arr):\n    big = 0\n    small = 0\n    for i in range(0,len(arr)):\n        big = max(big, arr[i])\n        small = min(small, arr[i])\n    return big + small\n\n# Sample input", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(array):\n    \"\"\"\n    This function finds the sum of the largest and smallest number in a given array.\n    \"\"\"\n    return max(array) + min(array)\n\ndef main():\n    \"\"\"\n    This function calls the big_sum function and prints out the results.\n    \"\"\"\n    print(big_sum([1,2,3]))\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    string = string.lower()\n    return string\n\n\ndef test_function():\n    assert is_lower(\"Invalid\") == \"invalid\"\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(str1):\n    # add your code here\n    str1 = str1.lower()\n    return str1\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(input):\n    output = \"\"\n    for i in input:\n        if i.isalpha():\n            output += i.lower()\n    return output\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(text):\n    text = text.lower()\n    return text\n\n# Enter the string\ntext = \"InValid\"\n\n# Calling the function", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n\t\"\"\"\n\tThis function checks whether the given string is lower case or not.\n\t\"\"\"\n\tif s == s.lower():\n\t\treturn True\n\telse:\n\t\treturn False\n\n#Driver Code\nstring = input()", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    if s.islower():\n        return s\n    else:\n        return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(x):\n    return x.lower()\n\n\n# + id=\"6bL-8IpF0L-n\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"0d45f95e-2660-4b6b-c58e-d8a90a0c3075\"", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n# Solutions\n\ndef is_lower(str1):\n    return str1.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str):\n    return str.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str):\n    return str.lower()\n\n#Below is an example usage:\n\nimport re\n\ndef is_lower(str):\n    return str.lower()\n\n# Enter the string\nstr = \"InValid\"\n\n# Calling the function\nstr = is_lower(str)\n\n# Printing the string"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(str):\n    return str.upper().replace(' ','').lower()\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(text):\n    result = []\n    for letter in text:\n        if letter.isupper():\n            result.append(letter)\n    return \"\".join(result)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    if string == \"\":\n        return \"\"\n    words = string.split()\n    result = []\n    for word in words:\n        if len(word) > 0:\n            if word[0].isupper():\n                result.append(word)\n    return result\n\ndef remove_lowercase_2(string):\n    return [word for word in string.split() if len(word) > 0 and word[0].isupper()]\n\ndef remove_lowercase_3(string):\n    result = ''\n    for word in string.split():\n        if len(word) > 0 and word[0].isupper():\n            result += word + ' '\n    return result.strip()\n\ndef remove_lowercase_4(string):\n    return ' '.join(word for word in string.split() if len(word) > 0 and word[0].isupper())\n\ndef remove_lowercase_5(string):\n    return ''.join(word for word in string.split() if len(word) > 0 and word[0].isupper())\n\ndef remove_lowercase_6(string):\n    return ' '.join([word for word in string.split() if len(word) > 0 and word[0].isupper()])\n\ndef remove_lowercase_7(string):\n    return ' '.join(w for w in string.split() if len(w) > 0 and w[0].isupper())\n\ndef remove_lowercase_8(string):\n    return ' '.join(w for w in string.split() if len(w) > 0 and w[0].isupper())\n\ndef remove_lowercase_9(string):\n    return ' '.join(w for w in string.split() if len(w) > 0 and w[0].isupper())\n\ndef remove_lowercase_10(string):\n    return ' '.join(w for w in string.split() if len(w) > 0 and w[0].isupper())\n\ndef remove_lowercase_11(string):\n    return ' '.join(w for w in string.split() if len(w) > 0 and w[0].is", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(s):\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            s = s[:i] + s[i+1:]\n            i = 0\n        i += 1\n    return s\n\ndef remove_lowercase(s):\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    return \"\".join([c for c in s if c.isupper()])\n\ndef remove_lowercase(s):\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    return ''.join(c for c in s if c.isupper())", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(str):\n    return ''.join([i for i in str if i.isupper()])\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(s):\n    x = \"\"\n    for i in s:\n        if i.isupper():\n            x += i\n    return x\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# 3. Write a function that takes a list of integers as an argument and returns the \n# greatest common divisor of all the integers in the list.", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    for i in range(len(s)):\n        if s[i].islower():\n            s = s[:i]+s[i+1:]\n    return s\n\n# If the given string is empty, return an empty string.\ndef remove_lowercase_empty(s):\n    if len(s)==0:\n        return \"\"\n    else:\n        for i in range(len(s)):\n            if s[i].islower():\n                s = s[:i]+s[i+1:]\n        return s\n\ndef remove_lowercase_empty_2(s):\n    if len(s)==0:\n        return \"\"\n    else:\n        new_s = s[0].upper()\n        for i in range(1,len(s)):\n            if s[i].islower():\n                new_s = new_s+s[i].upper()\n            else:\n                new_s = new_s+s[i].lower()\n        return new_s\n\ndef remove_lowercase_2(s):\n    for i in range(len(s)):\n        if s[i].islower():\n            s = s[:i]+s[i+1:]\n    return s\n\n\ndef remove_lowercase_2_2(s):\n    for i in range(len(s)):\n        if s[i].islower():\n            s = s[:i]+s[i+1:]\n        else:\n            s = s+s[i].upper()\n    return s\n\n\n# Returns the index of the first occurrence of the given string in the given string\n#\n# If the given string is not present in the given string, return -1\ndef index_of(str1,str2):\n    if str2 in str1:\n        return str1.index(str2)\n    else:\n        return -1\n\n# Returns the position of the first character of the first occurrence of the given character in the given string\n#\n# If the given character is not present in the given string, return -1\ndef position_of(char,str):\n    i = str.find(char)\n    if i!=-1:\n        return i\n    else:\n        return -1\n\n# Returns true if the given", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string:str) -> str:\n    first_char=True\n    final_string=\"\"\n    for char in string:\n        if char.isupper() or not first_char:\n            final_string+=char\n        first_char=False\n    return final_string\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    if not s or s[0] not in 'aeiou':\n        return s\n    prev_c = s[0]\n    result = []\n    for c in s[1:]:\n        if c.lower() != prev_c.lower():\n            result.append(prev_c)\n            prev_c = c\n    result.append(prev_c)\n    return ''.join(result)\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(number):\n    return number//100\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(x):\n    if (x >= 0) and (x <= 9):\n        return x\n    else:\n        return -1\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    first_number = number//10\n    return number-first_number*10\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n# @param integer\n# @return integer\ndef first_Digit(n):\n    return n % 10\n\n# Run the unit tests to check that the solution is correct\nimport unittest\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return n%10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    number = str(num)\n    first = number[0]\n    return first\n\n\n#print first_Digit(123)\n\n# +\n#Write a python function to find the last digit of a given number.", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    \"\"\"Return the first digit of the given number.\"\"\"\n    return num // 10\n\n#Below is an example usage:\n\nimport math\n\ndef first_Digit(num):\n    \"\"\"Return the first digit of the given number.\"\"\"\n    return num // 10\n\n# Enter the number\nnumber = 123\n\n# Calling the function", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return n // 10 * 10 + n % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n# TODO: Write your function here and test it below\ndef first_Digit(number):\n    if number == 0:\n        return \"0\"\n    else:\n        return str(number)[0]\n\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\n# Write your code here", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(text):\n    max_count = 0\n    max_char = \"\"\n    for char in text:\n        count = text.count(char)\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str1):\n    max_char = str1[0]\n    for i in range(len(str1)):\n        if max_char < str1[i]:\n            max_char = str1[i]\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    max_char = None\n    max_count = 0\n    for char in string:\n        if char not in max_char:\n            max_count = 1\n            max_char = char\n        else:\n            max_count += 1\n\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    dict1 = {}\n    for i in range(len(string)):\n        if string[i] not in dict1:\n            dict1[string[i]] = 1\n        else:\n            dict1[string[i]] += 1\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return list(dict1.keys())[0]\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    return max(set(string), key=string.count)\n\n# test function", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    # Your code goes here\n    max_char = str[0]\n    for char in str:\n        if char > max_char:\n            max_char = char\n    return max_char\n\ndef main():\n    assert get_max_occuring_char(\"data\") == \"a\"\n    assert get_max_occuring_char(\"aman\") == \"a\"\n    assert get_max_occuring_char(\"123456789\") == \"9\"\n    assert get_max_occuring_char(\"30123456789\") == \"3\"\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n\n    max_char = \"\"\n    max_count = 0\n\n    for i in range(len(string)):\n        char = string[i]\n        if max_count < string.count(char):\n            max_count = string.count(char)\n            max_char = char\n\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    \"\"\"\n    Args:\n       str(str): string to find maximum occurring character in\n    Returns:\n       str: maximum occurring character in the string.\n    \"\"\"\n    max_count = 0\n    max_char = \"\"\n    for char in str:\n        if str.count(char) > max_count:\n            max_count = str.count(char)\n            max_char = char\n    return max_char\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\n# Complete the function\n\ndef is_subset_sum(lst, target, sum_so_far=0):\n    \"\"\"\n    :param lst: list of numbers to compare sum against\n    :param target: sum to find subset for\n    :param sum_so_far: sum so far\n    :return: True if subset exists, False otherwise\n    \"\"\"\n    if len(lst) == 0:\n        return sum_so_far == target\n    return is_subset_sum(lst[1:], target, sum_so_far + lst[0])\n\n\n# Test cases\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(nums, sum_, target):\n    # check if the sum of all the elements in the sub list is equal to target\n    # if yes return true\n    # else return false\n    total = 0\n    for num in nums:\n        total += num\n    if total == target:\n        return True\n    return False", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, num):\n    return sum in findSubsetSum(arr, num, set())\n\n\ndef findSubsetSum(arr, num, used):\n    if num == 0:\n        return [set(used)]\n    if num < 0:\n        return []\n    res = []\n    for i in range(len(arr)):\n        if i in used:\n            continue\n        used.add(i)\n        res.extend(findSubsetSum(arr, num - arr[i], used))\n        used.remove(i)\n    return res\n\n\ndef test():\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 10))\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 7, 10))\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 9, 10))\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 9, 11))\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 9, 12))\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 8, 13))\n\n# test()", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(set, sum, target):\n    set = sorted(set)\n    if len(set) == 0:\n        return False\n    for i in range(0, len(set)):\n        if set[i] == target:\n            return True\n        if set[i] > target:\n            break\n        if target - set[i] > sum:\n            break\n    return is_subset_sum(set[i+1:], sum - set[i], target - set[i])\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(l, sum, target):\n    if sum > target:\n        return False\n    elif sum == target and not l:\n        return True\n    elif l and l[0] <= target:\n        return is_subset_sum(l[1:], sum + l[0], target)\n    else:\n        return is_subset_sum(l, sum, target)\n\n# Tests\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(arr, s, n):\n    return_value = False\n    for i in arr:\n        if (n - i) in arr:\n            return_value = True\n    return return_value\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(nums, target, sum=0):\n    \"\"\"\n    Use a hashset to keep track of the numbers we've seen so far.\n    \"\"\"\n    visited = set()\n    for n in nums:\n        sum += n\n        if sum == target:\n            return True\n        elif sum > target:\n            break\n        elif sum in visited:\n            return False\n        else:\n            visited.add(sum)\n    return False\n\n\n# assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, target):\n    total = 0\n    for number in arr:\n        total += number\n    if total == target:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\n# we are in the process of building a set\n# we keep track of our sum\n# we build a hashmap\n# when we reach the end of the set, we see if the sum matches our sum\n# this can be done in O(N) time and O(1) space complexity\ndef is_subset_sum(set, sum, target):\n    if target < 0:\n        return False\n\n    current_sum = 0\n    for num in set:\n        current_sum += num\n\n        if current_sum == target:\n            return True\n        elif current_sum > target:\n            return False\n    \n    return False", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(numbers, sum):\n    for i in numbers:\n        if sum-i in numbers:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# Write your function here\n\n\ndef find_letter(str):\n    if re.search(\"^[A-Z]\", str):\n        return 'Yes'\n    else:\n        return 'No'\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nstring = input()\npattern = r'(?=.*[A-Z].*?)(?=.*[a-z].*?)(?=.*[0-9].*?)(?=.*[!@#$%^&*()_+].*?)(?=.*[.,].*?)(?=.*[.].*?)(?=.*[?].*?)(?=.*[;].*?)([A-Z]+[a-z]+[0-9]+[!@#$%^&*()_+.,.;])'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\n#Function to find sequences of one upper case letter followed by lower case letters in the given string\ndef match(str1):\n    \n    #Pattern to find sequence of one upper case letter followed by lower case letters\n    ptn1 = r'([A-Z][a-z])'\n    \n    # Check if the pattern found in the given string\n    if re.search(ptn1, str1):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n# Driver code to test the above function", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(str_):\n    if re.search(r\"[A-Z][a-z]*\", str_):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# Function to find sequences of one upper case letter followed by lower case letters in the given string by using regex\ndef match(str):\n    return 'Yes' if re.match(r'[A-Z].*[a-z]', str) else 'No'\n\n# Driver code", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\ndef match(string):\n    if re.match(r'[A-Z][a-z]*', string):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef match(s):\n    if re.search('^[A-Z][a-z]*$', s):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    return 'Yes' if re.search(r'[A-Z][a-z]+', string) else 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(str):\n    if re.search(r'[a-z]+', str) and re.search(r'[A-Z]+', str):\n        return 'Yes'\n    else:\n        return 'No'"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x+1):\n        if i!=1:\n            factorial = 1\n            for j in range(1,i+1):\n                factorial = factorial * j\n            if factorial%x==0:\n                return i\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    if x == 1 or x == 2:\n        return 1\n    else:\n        count = 0\n        for i in range(1,x+1):\n            temp = i\n            while temp <= x:\n                temp = temp*i\n                count += 1\n                if temp % x == 0:\n                    break\n        return count\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n# Solution\n\n# first_number = 1\n# for i in range(1,11):\n#     if i != 0:\n#         first_number = i\n#     if i == 0:\n#         continue\n#     if i%1 != 0:\n#         continue\n#     if i == 1:\n#         continue\n#     if i == 2:\n#         continue\n#     if i == 3:\n#         continue\n#     if i == 4:\n#         continue\n#     if i == 5:\n#         continue\n#     if i == 6:\n#         continue\n#     if i == 7:\n#         continue\n#     if i == 8:\n#         continue\n#     if i == 9:\n#         continue\n#     if i == 10:\n#         continue\n#     x = first_number\n#     for j in range(1,i):\n#         if i != 0:\n#             first_number = (first_number * j)\n#         if i == 0:\n#             continue\n#         if i%1 != 0:\n#             continue\n#         if i == 1:\n#             continue\n#         if i == 2:\n#             continue\n#         if i == 3:\n#             continue\n#         if i == 4:\n#             continue\n#         if i == 5:\n#             continue\n#         if i == 6:\n#             continue\n#         if i == 7:\n#             continue\n#         if i == 8:\n#             continue\n#         if i == 9:\n#             continue\n#         if i == 10:\n#             continue\n#         if i%x == 0:\n#             return i\n# return -1\n\ndef first_Factorial_Divisible_Number(x):\n    first_number = 1\n    for i in range(1,x+1):\n        if i != 0:\n            first_number = (first", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(2,x):\n        if x%i == 0 and  x//i == x/i:\n            return i\n        \n\ndef main():\n    x = 10\n    print(first_Factorial_Divisible_Number(x))\n\nmain()", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    # Return the first number that fulfills the condition\n    return \"Not Defined\"\n\n# Write your solution here\n\n# +\n# Solution:\ndef first_Factorial_Divisible_Number(x):\n    if x <= 1:\n        return 0\n    else:\n        for i in range(2, x+1):\n            if i == x:\n                return i\n            elif i % x == 0:\n                return i\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    Find the first natural number whose factorial is divisible by x.\n    \"\"\"\n    for i in range(1,x):\n        if x % i == 0 and factorial(i) % x == 0:\n            return i\n    return None\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        fac = 1\n        for j in range(1, i+1):\n            fac *= j\n        if fac % x == 0:\n            return i\n        i += 1\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if i > 10000:\n            return None\n        elif i == 10000:\n            return None\n        elif i % x == 0:\n            return i\n        else:\n            i += 1\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n#function to find the first natural number whose factorial is divisible by x\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    flag = 0\n    while(flag==0):\n        i = i + 1\n        if i <= 100:\n            if i != 1:\n                result = 1\n                for j in range(1, i+1):\n                    result = result * j\n                if result % x == 0:\n                    flag = 1\n    return i\n\n# Driver code", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    for i in range(2, x+1):\n        if i == 2:\n            return 2\n        if i != 2:\n            if math.factorial(i) % x == 0:\n                return i\n\nfirst_Factorial_Divisible_Number(10)\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuple_1, tuple_2):\n    # code here\n    res = []\n    if len(tuple_1) > len(tuple_2):\n        for i in range(len(tuple_1)):\n            for j in range(len(tuple_2)):\n                if tuple_1[i][0] == tuple_2[j][0] and tuple_1[i][1] == tuple_2[j][1]:\n                    break\n                elif i == len(tuple_1) - 1:\n                    if tuple_1[i][0] == tuple_2[j][0] and tuple_1[i][1] == tuple_2[j][1]:\n                        res.append(tuple_1[i])\n    else:\n        for i in range(len(tuple_2)):\n            for j in range(len(tuple_1)):\n                if tuple_1[j][0] == tuple_2[i][0] and tuple_1[j][1] == tuple_2[i][1]:\n                    break\n                elif j == len(tuple_1) - 1:\n                    if tuple_1[j][0] == tuple_2[i][0] and tuple_1[j][1] == tuple_2[i][1]:\n                        res.append(tuple_1[j])\n    return res\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    output_tuple = []\n    for tuple_ in tuple1:\n        for tuple_2 in tuple2:\n            if tuple_ == tuple_2:\n                break\n        else:\n            output_tuple.append(tuple_)\n    return output_tuple\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    ans = []\n    for (x,y) in t2:\n        if x == t1[0][0] and y == t1[0][1]:\n            continue\n        ans.append((x, y))\n    return ans\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n# Solution\ndef remove_matching_tuple(list1, list2):\n    list2 = list(set(list2))\n    return list(filter(lambda x: x[1] not in list2, list1))\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    return filter(lambda x: (x[0][0] != x[1][0] or x[0][1] != x[1][1]), zip(t1, t2))\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n# TODO: find a solution here\n\ndef remove_matching_tuple(array, matching_array):\n    return [item for item in array if item not in matching_array]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuples1, tuples2):\n    return [tuple for tuple in tuples1 if tuple not in tuples2]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(t1, t2):\n    return [tup for tup in t1 if not any(tup == sub for sub in t2)]\n\ndef test():\n    print remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n    print remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n    print remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude')])\n    print remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n    print remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('How', 'are'), ('you', '?')])\n    print remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are'), ('you', '?')])\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(a, b):\n    \"\"\"\n    Remove the matching tuples from the given two tuples.\n    >>> remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n    [('you', '?')]\n    \"\"\"\n    return [x for x in a if not any(y for y in b if x == y)]\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuples1, tuples2):\n\n    # TODO\n    # write your code here\n    list2 = []\n    for tupl in tuples2:\n        list2.append(tupl[1])\n\n    list1 = []\n    for tupl in tuples1:\n        list1.append(tupl[1])\n\n    list3 = [i for i in list1 if i not in list2]\n    result = []\n    for tupl in tuples1:\n        if tupl[1] not in list3:\n            result.append(tupl)\n\n    return result\n\n\n# print(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nimport math\n\ndef largest_palindrome(numbers, n):\n    \"\"\"\n    Finds the largest palindrome in list of numbers.\n    :param numbers: list\n    :param n: int\n    :return: int\n    \"\"\"\n    s = max(numbers)\n    s *= 2\n    for i in range(n - 1, -1, -1):\n        s = max(s // 10, s % 10)\n        s *= 10\n        s += max(numbers[i])\n    return s\n\n\ndef largest_palindrome_bruteforce(numbers, n):\n    \"\"\"\n    Finds the largest palindrome in list of numbers.\n    :param numbers: list\n    :param n: int\n    :return: int\n    \"\"\"\n    max_palindrome = 0\n    for i in range(n // 2):\n        for j in range(i + 1, n - i):\n            number = numbers[i] * 10 ** j + numbers[j] * 10 ** i\n            if is_palindrome(number):\n                max_palindrome = max(max_palindrome, number)\n    return max_palindrome\n\n\ndef is_palindrome(number):\n    \"\"\"\n    Checks if number is a palindrome.\n    :param number: int\n    :return: bool\n    \"\"\"\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    if number < 10:\n        return True\n    number = str(number)\n    for i in range(len(number) // 2):\n        if number[i] != number[len(number) - 1 - i]:\n            return False\n    return True\n\n\ndef main():\n    # numbers = [1, 232, 54545, 999991]\n    # numbers = [1, 9, 3, 5, 8, 1, 9]\n    numbers = [1, 10, 9, 9, 1, 0, 9, 0, 9, 1, 0,", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, length):\n    if length == 1:\n        return arr[0]\n    \n    max_value = 0\n    for i in range(length):\n        for j in range(length):\n            palindrome = int(str(arr[i])*str(arr[j]))\n            if palindrome > max_value:\n                max_value = palindrome\n    return max_value", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr or not n:\n        return 0\n    res = 0\n    for i in range(n):\n        a = arr[i]\n        j = n - 1 - i\n        b = arr[j]\n        if a > b:\n            a, b = b, a\n        res = max(res, (a * 10**i) * (10**j + 1))\n    return res\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, size):\n    \"\"\"\n    Args:\n        arr(list): list of numbers\n        size(int): size of the array\n    Returns:\n        int: largest palindrome in arr\n    \"\"\"\n    max_pal = 0\n\n    for i in range(size):\n        for j in range(i, size):\n            n = (10**size)*arr[i] + arr[j]\n            n = n*n\n            if n > max_pal:\n                max_pal = n\n    return max_pal\n\n\n# Test Case\narr = [1, 232, 54545, 999991]", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(array, num):\n    \"\"\"\n    :param array: List of integers to be checked for palindrome\n    :param num: Length of palindrome to be checked\n    :return: Largest palindrome in array.\n    \"\"\"\n\n    # Define largest palindrome and maxval\n    largest = 0\n    maxval = 0\n\n    # Check if number is even\n    if num % 2 == 0:\n        for i in range(num//2):\n            for j in range(i, num//2+i):\n                current = 10**(num-1)*(array[j] * array[num//2-i+j])\n                if largest < current:\n                    largest = current\n                    maxval = array[j] * array[num//2-i+j]\n        return largest * maxval\n\n    # If number is odd, we check if palindrome is formed using the first half of the array or the second half\n    else:\n        for i in range(num//2):\n            for j in range(i, num//2+i):\n                current = 10**(num-1)*(array[j] * array[num//2-i+j])\n                if largest < current:\n                    largest = current\n                    maxval = array[j] * array[num//2-i+j]\n        return largest * maxval\n\n\n# Test case", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(array, n):\n    # write your code here\n    max_ = 0\n    while max_ < n**2:\n        palindromic = []\n        for i in range(n//2):\n            palindromic.append(str(array[i]) + str(array[-i-1]))\n        print(palindromic)\n        palindromic = ''.join(palindromic)\n        if palindromic > max_:\n            max_ = palindromic\n        print(max_)\n    return max_\n\n\narray = [1,232,54545,999991]\nlargest_palindrome(array, len(array))\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(array, size):\n    \"\"\"\n    :param array: List\n    :param size: int\n    :return: int\n    \"\"\"\n    left = 0\n    right = 0\n    for i in range(0, size):\n        left = (10 ** i) * (10 ** i)\n        right = (10 ** size) * (10 ** size)\n        result = str(left + right)\n        if len(result) > size:\n            break\n        if result == result[::-1]:\n            return left + right\n    return left + right\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(nums, index):\n    \"\"\"\n    :type nums: List[int]\n    :type index: int\n    :rtype: int\n    \"\"\"\n    largest = 0\n    for i in range(index, -1, -1):\n        number = make_palindrome(nums, i)\n        if number > largest:\n            largest = number\n    return largest\n\n\ndef make_palindrome(nums, index):\n    \"\"\"\n    :type nums: List[int]\n    :type index: int\n    :rtype: int\n    \"\"\"\n    if index > len(nums) / 2:\n        return make_palindrome(nums[::-1], index - len(nums) / 2)\n    number = 0\n    for i in range(index, len(nums)):\n        number = 10 * number + nums[i]\n        if number > 9**index * 9**(len(nums) - 1 - i):\n            number -= 10**index * 9**(len(nums) - 1 - i)\n            number *= 10\n            break\n    return number\n\n\ndef test_make_palindrome():\n    assert make_palindrome([9, 7, 9], 0) == 999\n    assert make_palindrome([9, 7, 9], 1) == 997\n    assert make_palindrome([9, 7, 9], 2) == 99\n    assert make_palindrome([9, 7, 9], 3) == 979\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, size):\n    max_palindrome = 0\n    for i in range(1, size):\n        for j in range(i+1, size+1):\n            palindrome = str(i*j)\n            if palindrome == palindrome[::-1] and int(palindrome) > max_palindrome:\n                max_palindrome = int(palindrome)\n    return max_palindrome\n\ndef test_largest_palindrome():\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    return binom.pmf(k, n, p)\n\ndef binomial_probability_fast(n, k, p):\n    if n==0 or k==0:\n        return 0\n    if k==n:\n        return 1\n    return binom.pmf(k, n, p)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    return (n!/(k!*(n-k)!) * p**k * (1-p)**(n-k))\n\ndef test_binomial_probability():\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(trials, successes, p):\n    return (1/trials) * (binomial(trials, successes) * p**successes * (1-p)**(trials-successes))\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(k, n, p):\n    \"\"\"\n    Inputs:\n    k (int) - number of successes\n    n (int) - number of trials\n    p (float) - probability of success\n    \n    Returns:\n    float - probability of getting k successes in n trials\n    \"\"\"\n    return np.sum([binomial_coefficient(k, j, n, p) for j in range(k + 1)])\n\n\n# +\n# # %load test_binomial_probability.py\nimport sys, os\nsys.path.insert(0, os.path.abspath('..'))\nimport numpy as np\nfrom pyllars.probs import binomial_probability, binomial_coefficient\n\ndef test_binomial_probability():\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability given the number of trials n,\n    number of successes k, and the probability of a success p.\n    \"\"\"\n    prob = 0\n    for i in range(0, k+1):\n        prob += binomial(n, i)*p**i*(1-p)**(n-i)\n    return prob\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n,k,p):\n    \"\"\"Return the probability of drawing k successes from n trials with a probability p of success.\"\"\"\n    return factorial(n) / (factorial(k)*factorial(n-k)) * p**k * (1-p)**(n-k)\n\ndef factorial(n):\n    \"\"\"Return the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef main():\n    \"\"\"Run the problem.\"\"\"\n    print(binomial_probability(10,5,1.0/3))\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    input: n, k, p\n    output: probability\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k)) * p**k * (1-p)**(n - k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    if k < 0 or n < 0 or p < 0 or p > 1:\n        raise ValueError(\"Invalid binomial probability function input\")\n    binomial_probability = binomial(n, k) * p ** k * (1-p) ** (n-k)\n    return binomial_probability\n\n# assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    # YOUR CODE HERE\n    if n == 0:\n        return 0.0\n    if k == 0:\n        return 1.0\n    if p == 0.0 or p == 1.0:\n        return 1.0\n    if k > n/2:\n        k = n - k\n    return (p**k) * (1-p)**(n-k)\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nimport pytest\n\nfrom binomial import binomial_probability\n\ndef test_binomial_probability():\n    assert binomial_probability(10, 5, 1.0/3) == pytest.approx(0.13656454808718185)"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(arr):\n    arr.sort(key=lambda x:x[1])\n    return arr\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\nfrom typing import List\nimport pytest\n\n\ndef sort_tuple(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sort a list of tuples in increasing order by the last element in each tuple.\n\n    >>> assert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\n    \"\"\"\n    return sorted(tuples, key=lambda t: t[1])\n\n\ndef test_sort_tuple():\n    \"\"\"Test sort_tuple function\"\"\"\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\n\n\ndef test_sort_tuple_random():\n    \"\"\"Test sort_tuple function with random tuples\"\"\"\n    test_tuples = [(x, x + 1) for x in range(5)]\n    assert sort_tuple(test_tuples) == sorted(test_tuples, key=lambda t: t[1])\n\n\ndef test_sort_tuple_empty():\n    \"\"\"Test sort_tuple function with empty list\"\"\"\n    assert sort_tuple([]) == []\n\n\ndef test_sort_tuple_with_none():\n    \"\"\"Test sort_tuple function with list with None\"\"\"\n    assert sort_tuple([(None, 1)]) == [(None, 1)]\n\n\ndef test_sort_tuple_increasing():\n    \"\"\"Test sort_tuple function with increasing tuples\"\"\"\n    test_tuples = [(x, x) for x in range(5)]\n    assert sort_tuple(test_tuples) == test_tuples\n\n\ndef test_sort_tuple_decreasing():\n    \"\"\"Test sort_tuple function with decreasing tuples\"\"\"\n    test_tuples = [(x, x + 1) for x in range(5)]\n    test_tuples.reverse()\n    assert sort_tuple(test_tuples) == test_tuples\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(lst):\n\tlst.sort(key=lambda x:x[1])\n\treturn lst\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\n# Note: this is not an acceptable solution.\n# We do not know what the last element of the tuple is.\n# However, if we had the ability to do a \"shorthand\" thing like this,\n# then we can write a better solution to this problem.\ndef sort_tuple(tuples):\n    tuples.sort(key=lambda tup: tup[0])\n    return tuples\n\n# Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(list_tuple):\n\tlist_tuple.sort(key = lambda x:x[1])\n\treturn list_tuple\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(l):\n    l.sort(key=lambda x: x[1], reverse=True)\n    return l\n\n#assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n# def sort_tuple(tuplist):\n#     tuplist.sort(key=lambda x: x[1],reverse=True)\n#     return tuplist\n\ndef sort_tuple(tuplist):\n    return sorted(tuplist, key=lambda x: x[1],reverse=True)\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    tuples.sort(key=lambda x:x[1])\n    return tuples\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuple_list):\n    \"\"\"Returns the list of tuples in increasing order by the last element in each tuple.\"\"\"\n    return sorted(tuple_list, key=lambda t: t[-1], reverse=False)\n# Test case", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    \"\"\"\n    Sort a list of tuples in increasing order by the last element in each tuple.\n    :param tuples: the list of tuples to be sorted.\n    :return: a list of sorted tuples.\n    \"\"\"\n    tuples.sort(key=lambda x: x[1], reverse=False)\n    return tuples\n\n\ndef test_sort_tuple():\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\n\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side_length: float) -> float:\n    \"\"\"\n    >>> assert area_pentagon(5)==43.01193501472417\n    \"\"\"\n    return 0.25*side_length**2*math.sin(math.pi/5)\n\n#The above example has been suppressed due to the assertion.\n\n# +", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return (1/5)*(3**0.5)*n**2*(n+1)", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side_len):\n    \"\"\"\n    >>> area_pentagon(5)==43.01193501472417\n    True\n    \"\"\"\n    return (0.5*side_len**2)*(math.tan(math.radians(120)/(2*side_len)))\n\ndef main():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return (3**(0.5)*n*(n**2-2*n+2))/4\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    \"\"\"\n    This function returns the area of a pentagon\n    \"\"\"\n    return n*math.sin(math.pi/5)*math.sqrt(100-n*math.sin(math.pi/5))\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nfrom math import pi, sin\nfrom fractions import Fraction\n\n\ndef area_pentagon(n):\n    \"\"\"\n    >>> area_pentagon(5)\n    43.01193501472417\n    \"\"\"\n    s = (n * (n-1)) * (n-2) * sin(2 * pi / n)\n    return Fraction(s, 2)", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\nfrom math import sqrt\n\ndef area_pentagon(n):\n    return 5*n*sqrt(5)*(1 - 1/(2*n)**2)\n\n# n = 5\n# print area_pentagon(n)\n\nfrom math import sqrt\n\ndef area_pentagon(n):\n    return 5*n*sqrt(5)*(1 - 1/(2*n)**2)\n\ndef test_area_pentagon(n):\n    assert area_pentagon(n) == 43.01193501472417\n\n# test_area_pentagon(5)\n\nn = 5\n\n# print area_pentagon(n)", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    area = 100*(3**0.5) * n**2 / 4\n    return area\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(sides):\n    \"\"\"\n    Input: int, number of sides of pentagon\n    Output: float, area of pentagon\n\n    >>> area_pentagon(5)\n    43.01193501472417\n    \"\"\"\n    return (1/2)*(3**(1/2))*(sides**2)\n\nimport doctest\ndoctest.testmod()\n\ndef get_user_input():\n    \"\"\"\n    Return user input, validating input and converting to int\n    Input: None\n    Output: int, user input as an int\n\n    >>> get_user_input()\n    5\n    \"\"\"\n    while True:\n        user_input = input(\"Please enter the number of sides of a pentagon: \")\n        try:\n            user_input = int(user_input)\n        except ValueError:\n            print(\"Please enter a valid integer number\")\n        else:\n            return user_input\n\ndef test_area_pentagon():\n    user_input = get_user_input()\n    output = area_pentagon(user_input)\n    return output\n\ndef main():\n    user_input = get_user_input()\n    output = area_pentagon(user_input)\n    return output\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(l):\n    return 0.5*l*(l+1)*sqrt(5*(5+2*l)*(2*l+1))\n\ndef test_area_pentagon():\n    assert area_pentagon(5)==43.01193501472417\n    assert area_pentagon(0)==0\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    frequency = 0\n    for i in range(0,n):\n        if arr[i]>arr[n-1]:\n            frequency+=1\n    return frequency\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr):\n\treturn arr.count(max(arr))\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    count = 0\n    for i in range(n):\n        if arr[i]==max(arr):\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(size,arr):\n    freq=0\n    arr.sort(reverse=True)\n    for i in range(len(arr)):\n        if arr[i]==arr[i-1]:\n            freq+=1\n        else:\n            break\n    return freq\n\n\ndef main():\n    print(frequency_Of_Largest(5,[1,2,3,4,4]))\n    print(frequency_Of_Largest(2,[1,2]))\n    print(frequency_Of_Largest(5,[2,2,2,2,2]))\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_of_largest(a):\n    return a.count(max(a))\n\n#Test case 1\n# Should print 1\na = [1,2,3,4,4]", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(arr):\n    return len(set(arr))\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr):\n    l = len(arr)\n    mx = max(arr)\n    c = 0\n    for i in arr:\n        if mx == i:\n            c +=1\n    return c", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n,arr):\n    dict = {}\n    for i in arr:\n        if(i in dict):\n            dict[i] += 1\n        else:\n            dict[i] = 1\n            \n    max_key = max(dict, key = dict.get)\n    max_val = max(dict.values())\n    \n    return max_val\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    res=0\n    for i in range(len(arr)):\n        if(i==0):\n            if(arr[i]>arr[i+1]):\n                res+=1\n        else:\n            if(arr[i]>arr[i-1] and arr[i]>arr[i+1]):\n                res+=1\n        return res\n    return res\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(size, array):\n    \"\"\"\n    This function checks if the array has the largest value and if so, how many times it occurs.\n    \"\"\"\n    largest = array[0]\n    count = 1\n    for i in range(1, size):\n        if(array[i] == largest):\n            count += 1\n        else:\n            largest = array[i]\n            count = 1\n    return count\n\n# Testing program code\nsize = int(input(\"Enter the size of the array: \"))\narray = list(map(int, input(\"Enter the array elements: \").strip().split()))"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuples):\n    return set([tuple(x) for x in list(zip(*tuples)) if list(x) == list(reversed(x))])\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(list_of_tuples):\n    \"\"\"Extract symmetric pairs from a list of tuples\"\"\"\n    return {(x, y) for x, y in list_of_tuples if x < y}\n\n#Below is an example usage:\n\n# Enter the list of tuples\nlist_of_tuples = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]\n\n# Calling the function", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(list_of_pairs):\n    symmetric = set()\n    for pair in list_of_pairs:\n        if sorted(pair) in symmetric:\n            symmetric.add(pair)\n        else:\n            symmetric.add(sorted(pair))\n    return list(symmetric)\n\ndef test_extract_symmetric():\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\ndef test_extract_symmetric_2():\n    assert extract_symmetric([(6, 7), (7, 6), (8, 9)] ) == {(8, 9)}\n\ndef test_extract_symmetric_3():\n    assert extract_symmetric([(6, 7), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\ndef test_extract_symmetric_4():\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tlist):\n    slist = []\n    for i in tlist:\n        for j in tlist:\n            if i[0] == j[0] and i[1] == j[1]:\n                slist.append(tuple(sorted(i)))\n                break\n    return set(slist)\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\n# Python program to extract symmetric pairs from given tuple\n# list\n\ndef extract_symmetric(a):\n    ans = set()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                ans.add(tuple(sorted(set(a[i], a[j]))))\n    return ans\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuples):\n    symmetric_pairs = set()\n    for pair in tuples:\n        symmetric_pairs.add(tuple(sorted(pair)))\n    return symmetric_pairs\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(t):\n    \"\"\"\n    :param t: a list of tuples\n    :return: a set of symmetric tuples\n    \"\"\"\n    return set(tuple(sorted(x)) for x in set(tuple(sorted(y)) for y in t))\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nfrom collections import Counter\n\n\ndef extract_symmetric(tup_list):\n    sym_pair = set()\n    for i in range(len(tup_list)):\n        for j in range(i + 1, len(tup_list)):\n            if tup_list[i][0] == tup_list[j][0] and tup_list[i][1] == tup_list[j][1]:\n                sym_pair.add((tup_list[i][0], tup_list[j][1]))\n                sym_pair.add((tup_list[j][0], tup_list[i][1]))\n    return sym_pair\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuples):\n    \"\"\"\n    >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])\n    {(8, 9), (6, 7)}\n    \"\"\"\n    res = set()\n    for i in tuples:\n        for j in tuples:\n            if i != j and i[0] == j[1] and i[1] == j[0]:\n                res.add((i[0], i[1]))\n    return res\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n# input: a tuple list\n# output: a list of symmetric tuples\n\ndef extract_symmetric(tuple_list):\n    \"\"\"\n    find all symmetric pairs in a list\n    \"\"\"\n    res = set()\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                res.add((tuple_list[i], tuple_list[j]))\n    return res\n\n\n# test case:"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,r,n):\n    return a*(r**(n-1))\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, r, n):\n    \"\"\"\n    Input:\n        a: starting number of the series\n        r: common ratio of the series\n        n: number of terms to sum\n    Output:\n        sum of n terms of the series\n    \"\"\"\n    \n    sum = 0\n    for i in range(n):\n        sum += a*r**i\n    return sum\n\n#Test code", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(first, last, factor):\n    if factor==1:\n        return last\n    return factor*sum_gp(first, last, factor-1)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, b, n):\n    return (a+(a**n)*(b-1))\n\ndef main():\n    n=int(input())\n    a=int(input())\n    b=int(input())\n    print(sum_gp(a, b, n))\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start,stop,step):\n    sum = 0\n    i=0\n    while start<=stop:\n        sum += start\n        start = start*step\n        i += 1\n    return sum\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(base, n, r):\n    \"\"\"Return the sum of a geometric progression.\"\"\"\n    return sum(base * pow(r, i) for i in range(n))\n\n#Below is an example usage:\n\nimport math\n\ndef sum_gp(base, n, r):\n    \"\"\"Return the sum of a geometric progression.\"\"\"\n    return sum(base * pow(r, i) for i in range(n))\n\n# Enter the base\nbase = 1\nn = 5\nr = 2\n\n# Calling the function", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(first_term,last_term,ratio):\n    \"\"\"\n    Sum of geometric progression series\n    >>> sum_gp(1,5,2)==31\n    True\n    \"\"\"\n    if ratio > 1:\n        raise ValueError(\"Ratio should be less than one\")\n    else:\n        sum_ = 0\n        for i in range(1,last_term+1):\n            sum_ = sum_ + first_term * ((ratio ** i))\n        return sum_\n\ndef test_sum_gp():\n    # Test for ratio\n    assert sum_gp(1,5,2)==31\n    assert sum_gp(1,5,5)==31\n    assert sum_gp(1,5,3)==23\n    assert sum_gp(1,5,1)==20\n    assert sum_gp(1,5,0.5)==13\n    assert sum_gp(1,5,10)==100\n    assert sum_gp(1,5,-0.5)==31\n    assert sum_gp(1,5,-1)==20\n    assert sum_gp(1,5,-3)==23\n    assert sum_gp(1,5,-5)==31\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,r,n):\n    if n==1:\n        return a\n    else:\n        return a+r*sum_gp(a,r,n-1)\n\n#https://www.hackerrank.com/challenges/sum-of-series/problem", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,b,r):\n    \"\"\"\n    returns the sum of geometric progression series.\n    \"\"\"\n    return (a+(b-a)*r**(1.0/2.0))/(1-r)\n\ndef test():\n    assert sum_gp(1,5,2)==31\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,r):\n\tif b==0:\n\t\treturn 0\n\telse:\n\t\treturn a+b*sum_gp(a,b,r-1)\n\ndef main():\n\tn1 = int(input(\"Enter the first number: \"))\n\tn2 = int(input(\"Enter the second number: \"))\n\tr = int(input(\"Enter the factor: \"))\n\ttotal = sum_gp(n1,n2,r)\n\tprint(\"Sum is\", total)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\nimport pytest\n\ndef binary_search(array, key, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return False\n    middle = int((start + end) / 2)\n    if key == array[middle]:\n        return True\n    elif key < array[middle]:\n        return binary_search(array, key, start, middle - 1)\n    else:\n        return binary_search(array, key, middle + 1, end)\n\ndef test_binary_search():\n    with pytest.raises(Exception):\n        binary_search([], 1)\n    with pytest.raises(Exception):\n        binary_search([1], 2)\n    with pytest.raises(Exception):\n        binary_search([1,2], 3)\n    with pytest.raises(Exception):\n        binary_search([1,2,3], 4)\n    with pytest.raises(Exception):\n        binary_search([1,2,3,4], 5)\n    assert binary_search([1,2,3,5,8], 6) == False\n    assert binary_search([1,2,3,5,8], 5) == True\n    assert binary_search([1,2,3,5,8], 3) == True\n    assert binary_search([1,2,3,5,8], 1) == True\n    assert binary_search([1,2,3,5,8], 2) == True\n    assert binary_search([1,2,3,5,8], 8) == True\n    assert binary_search([1,2,3,5,8], 7) == False\n    assert binary_search([1,2,3,5,8], 4) == False\n\ndef test_binary_search_recursion():\n    with pytest.raises(Exception):\n        binary_search([], 1, 1)\n    with pytest.raises(Exception):\n        binary_search([1], 2, 1)\n    with pytest.raises(Exception):\n        binary_search([1,2], 3, 1)\n    with pytest.", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(array, element):\n    # Write your code here\n    left = 0\n    right = len(array) - 1\n    while left <= right:\n        mid = left + (right - left)//2\n        if array[mid] == element:\n            return True\n        elif array[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n# Binary search\n# N^2\ndef binary_search(arr, elem):\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if arr[mid] == elem:\n            return True\n        elif arr[mid] < elem:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(array, number):\n    if number in array:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    # Write your code here.\n    if arr == []:\n        return False\n\n    low = 0\n    high = len(arr)-1\n    mid = 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\nimport pytest\n\ndef binary_search(arr, ele):\n    if len(arr) == 0:\n        return False\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == ele:\n            return True\n        elif arr[mid] < ele:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\n\ndef test_binary_search():\n    assert binary_search([1,2,3,5,8], 6) == False", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\n# Binary Search\n# Time Complexity: O(logN)\n# Space Complexity: O(1)\n\ndef binary_search(array, key):\n    start = 0\n    end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if key == array[mid]:\n            return True\n        elif key > array[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    left = 0\n    right = len(arr)-1\n    while (left <= right):\n        mid = (left+right)//2\n        if (arr[mid] == x):\n            return True\n        elif (arr[mid] > x):\n            right = mid-1\n        elif (arr[mid] < x):\n            left = mid+1\n    return False\n\ndef test_binary_search():\n    assert binary_search([1,2,3,5,8], 6) == False\n    assert binary_search([1,2,3,5,8], 3) == True\n    assert binary_search([1,2,3,5,8], 8) == True\n    assert binary_search([1,2,3,5,8], 2) == True\n    assert binary_search([1,2,3,5,8], 1) == True\n    assert binary_search([1,2,3,5,8], 5) == True\n\ntest_binary_search()", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\nimport sys\nimport math\n\ndef binary_search(arr, x):\n    # If the list is empty or the array is sorted\n    if len(arr) == 0 or sorted(arr) == arr:\n        return False\n\n    # Start of the range of search\n    low = 0\n\n    # End of the range of search\n    high = len(arr) - 1\n\n    # Do binary search to find the element\n    while low <= high:\n        mid = math.floor((low + high) / 2)\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # If the element is not found\n    return False\n\n# Driver Code", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, item):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == item:\n            return mid\n        elif arr[mid] > item:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    return int(''.join(binary), 2)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    binary_int = 0\n    for i in range(len(binary)):\n        binary_int += int(binary[i]) * (2 ** i)\n    return binary_int\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(bin_tuple):\n    int_val = 0\n    for i in range(len(bin_tuple)):\n        int_val = int_val + (bin_tuple[i] * (2**(len(bin_tuple) - 1 - i)))\n    return int_val", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nimport pytest\n\n# >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n@pytest.mark.parametrize(\"bin\", [\n    (1, 1, 0, 1, 0, 0, 1),\n    (0, 0, 1, 1, 1, 0, 0, 1),\n])\ndef test_binary_to_integer(bin):\n    \"\"\"Convert binary number to integer.\"\"\"\n    bin = bin[::-1]  # reverse the tuple\n    return 0 if bin == [0] * len(bin) else int(\"\".join(bin), 2)", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(tuple):\n    total = 0\n    for digit in tuple:\n        total += 2 ** (len(tuple) - digit)\n    return total\n\ndef main():\n    print(binary_to_integer((1, 1, 0, 1, 0, 0, 1)))\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nfrom typing import List\n\n\ndef binary_to_integer(binary: List[int]) -> str:\n    \"\"\"\n    Return the integer representation of the binary string.\n    \"\"\"\n    return ''.join([str(i) for i in binary])\n\n\n# Tests", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(bin):\n    num = 0\n    for bit in bin:\n        if bit == '1':\n            num += 2**len(bin)\n        len(bin)\n    return num\n\ndef binary_to_integer(bin):\n    return sum(int(b) * 2**i for i, b in enumerate(bin))\n\ndef binary_to_integer(bin):\n    result = 0\n    for i in range(len(bin)):\n        result += 2**i*int(bin[i])\n    return result\n\ndef binary_to_integer(bin):\n    return sum(int(b) * (2**i) for i, b in enumerate(bin))\n\ndef binary_to_integer(bin):\n    result = 0\n    for i in range(len(bin)):\n        result += int(bin[i]) * (2**i)\n    return result\n\ndef binary_to_integer(bin):\n    return sum(int(b) * 2 ** i for i, b in enumerate(bin))\n\ndef binary_to_integer(bin):\n    return sum(int(b)*2**i for i,b in enumerate(bin))\n\ndef binary_to_integer(bin):\n    return sum([int(x)*2**i for i,x in enumerate(bin)])\n\ndef binary_to_integer(bin):\n    return sum(int(x)*2**i for i,x in enumerate(bin))\n\ndef binary_to_integer(bin):\n    return sum([int(x)*2**i for i,x in enumerate(bin)])\n\ndef binary_to_integer(bin):\n    return sum(int(b)*2**i for i,b in enumerate(bin))", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    integer = 0\n    for i in range(len(binary)):\n        integer += 2**i * int(binary[i])\n    return integer\n\n#assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == 105\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(number):\n\tvalue = 0\n\tfor i in range(len(number)):\n\t\tvalue += number[i] * 2**i\n\treturn value\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    \"\"\"\n    >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n    True\n    \"\"\"\n    integer = 0\n    for bit in binary:\n        integer = (integer * 2) + int(bit)\n    return integer\n\n\n# A function to print the bits in the binary number\ndef print_binary(integer):\n    \"\"\"\n    >>> print_binary(105)\n    1001011\n    \"\"\"\n    bits = []\n    while integer > 0:\n        bits.append(str(integer % 2))\n        integer = integer / 2\n    return bits[::-1]\n\n\n# A function to convert a string to a tuple of bits\ndef string_to_binary(string):\n    \"\"\"\n    >>> string_to_binary('abc')\n    ('0', '1', '1', '1', '0', '0', '0')\n    \"\"\"\n    integer = 0\n    for char in string:\n        integer = (integer * 2) + int(char)\n    bits = []\n    while integer > 0:\n        bits.append(str(integer % 2))\n        integer = integer / 2\n    return bits[::-1]\n\n\n# A function to convert a string to binary string\ndef string_to_binary_string(string):\n    \"\"\"\n    >>> string_to_binary_string('abc')\n    '0111000'\n    \"\"\"\n    binary_string = ''\n    for char in string:\n        binary_string += str(int(char, 2))\n    return binary_string\n\n\n# A function to convert a binary string to a string\ndef binary_string_to_string(binary_string):\n    \"\"\"\n    >>> binary_string_to_string('0111000')\n    'abc'\n    \"\"\"\n    string = ''\n    for bit in binary_string:\n        string += str(int(bit, 2))\n    return string\n\n\n# A function to convert a string to a list of bits\ndef string_to_"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\n\ndef remove_lowercase(string):\n    return re.sub(r'[^A-Z]', '', string)\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]*', '', s)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(text):\n    return re.sub(r'[^A-Z]', '', text)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(string):\n    result = re.sub(r'[a-z]{1,}', '', string)\n    return result\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    \"\"\"Remove lowercase substrings from a given string by using regex.\"\"\"\n    return re.sub(r'[a-z]+', '', string, flags=re.IGNORECASE)\n\n\n# Assert: 'KDeoALOklOOHserfLoAJSIskdsf' == 'KDALOOOHLAJSI'", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(text):\n    text = re.sub(r'[^A-Z]+', '', text)\n    return text\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(text):\n    import re\n    return re.sub(r\"(?<=\\W)[a-z]+(?=\\W)\", \"\", text)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(s):\n    s = re.sub('(?<=\\w)(\\w)', lambda x: x.group(1).upper(), s)\n    return s\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    \"\"\"Write your code here\"\"\"\n    return re.sub(r\"\\b[a-z]\\b\", \"\", s)\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\ndef heap_queue_smallest(number_list, size):\n    heap = []\n    for i in range(size):\n        heapq.heappush(heap, number_list[i])\n    result = []\n    while len(heap):\n        result.append(heapq.heappop(heap))\n    return result\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import heapify, heappop, heappush", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(arr, k):\n    heapq.heapify(arr)\n    for i in range(k):\n        print heapq.heappop(arr)\n\nheap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],3)", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(values,k):\n\n    # heapify\n    heapq.heapify(values)\n    # creating empty list\n    small_numbers = []\n    # extracting the smallest items form the heap\n    for i in range(k):\n        small_numbers.append(heapq.heappop(values))\n\n    return small_numbers\n\n# Test case", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n# Solution 1: heapq\nfrom heapq import heappop, heappush\n\ndef heap_queue_smallest(nums,k):\n    \"\"\"\n    Solution 1: heapq\n    :param nums:\n    :param k:\n    :return:\n    \"\"\"\n    result = []\n    while k > 0:\n        num = heappop(nums)\n        result.append(num)\n        k -= 1\n    return result\n\n# Solution 2: Priority Queue\nfrom queue import PriorityQueue\n\ndef heap_queue_smallest(nums,k):\n    \"\"\"\n    Solution 2: Priority Queue\n    :param nums:\n    :param k:\n    :return:\n    \"\"\"\n    result = []\n    queue = PriorityQueue()\n    for num in nums:\n        queue.put(num)\n        if queue.qsize() > k:\n            queue.get()\n    while not queue.empty():\n        result.append(queue.get())\n    return result\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(lst, k):\n    h = Heap()\n    for i in lst:\n        h.insert(i)\n        if len(h) > k:\n            h.delete_min()\n    h.print_queue()\n    return h.get_min()\n\n# Heap queue test cases\n\nheap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25]\n\nheap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],5)==[14, 22, 25, 25, 35]\n\nheap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],10)==[14, 22, 25, 25, 35, 58]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n# Time: O(N log N)\n# Space: O(N)\n\nimport heapq\n\ndef heap_queue_smallest(arr, k):\n    minheap = []\n    for num in arr:\n        heapq.heappush(minheap, (num, num))\n    for _ in range(k):\n        heapq.heappop(minheap)\n    result = []\n    while minheap:\n        result.append(heapq.heappop(minheap)[0])\n    return result\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\ndef heap_queue_smallest(num, k):\n    min_heap = []\n    heapq.heapify(min_heap)\n    for i in range(0,k):\n        heapq.heappush(min_heap,num[i])\n    for i in range(k,len(num)):\n        if num[i]<heapq.heappop(min_heap):\n            heapq.heappush(min_heap,num[i])\n    return min_heap\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\n\ndef heap_queue_smallest(a, size):\n    if len(a) > size:\n        heapq.heapify(a)\n    return heapq.nsmallest(size, a)\n\n\na = [25, 35, 22, 85, 14, 65, 75, 25, 58]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest( nums, size):\n    heap = []\n    smallest = []\n    for i in range(size):\n        heapq.heappush(heap,nums[i])\n        smallest.append(heap[0])\n        heap[0] = heap[len(heap)-1]\n        heapq.heapify(heap)\n    return smallest\n    "], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    return (3.14*radius**2) + (3.14*(radius**2)*height/3)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n#print(surfacearea_cone(3,12))\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    \"\"\"Calculate surface area of a cone\"\"\"\n    return 3.14159*radius**2*(1+((radius**2)/height**2))\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius1,radius2):\n    area=3.14159*radius1*radius2\n    return area\n\n#the function \"surfacearea_cone\" is not called directly\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(base,height):\n    surfacearea = (math.pi*base*base) + (math.pi*base*height*math.sqrt(1+(height/base)**2))\n    return surfacearea\n\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\nimport math\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    >>> surfacearea_cone(5,12)\n    282.7433388230814\n    \"\"\"\n    return math.pi*radius*radius+math.pi*radius*height\n\ndef test_suite():\n    import doctest\n    doctest.testmod()", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    return 3.14*(r**2)*(h+1)\n\n# test the function", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius1,radius2):\n    return math.pi * (radius1 + radius2) * (radius1 * radius1 + radius2 * radius2) / 2\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    return 2*np.pi*r*h + 2*np.pi*r**2\n\n#Write a function to find the volume of a cone.\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\n# DRUNKWATER TEMPLATE(add description and prototypes)\ndef surfacearea_cone(radius, height):\n    pass\n\n\n# V1\n# https://blog.csdn.net/fuxuemingzhu/article/details/79582394\n# IDEA : ", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    return (3*math.pi)*radius**2+(2*math.pi)*radius*height\n\n#assert surfacearea_cone(5,12)==282.7433388230814\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if a > b:\n        while a != b:\n            a = a - b\n        return b\n    else:\n        while a != b:\n            b = b - a\n        return a\n\ndef main():\n    print(gcd(12, 17))\nmain()", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if a > b:\n        a, b = b, a\n    while a != b:\n        a, b = b % a, a\n    return a\n\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(x, y):\n    if x % y == 0:\n        return y\n    elif y % x == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n#Below is an example usage:\n\nimport math\n\ndef gcd(x, y):\n    if x % y == 0:\n        return y\n    elif y % x == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n# Enter the numbers\na = 12\nb = 17\n\n# Calling the function", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    \"\"\"\n    Greatest common divisor of two integers\n\n    Parameters\n    ----------\n    a, b : int\n\n    Returns\n    -------\n    gcd : int\n        GCD of a and b\n\n    Examples\n    --------\n    >>> gcd(36, 18)\n    6\n    \"\"\"\n    while b:\n        a, b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n# Write your code here\n\n# Write your code here\ndef gcd(num1, num2):\n    if num1 > num2:\n        num1, num2 = num2, num1\n    while num2 != 0:\n        num1, num2 = num2, num1 % num2\n    return num1\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    \"\"\"\n    Write a python function to find gcd of two positive integers.\n    >>> assert gcd(12, 17) == 1\n    >>> gcd(12, 17)\n    1\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    # your code goes here\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\n# Write your code here\nimport math\n\ndef gcd(num1, num2):\n    gcd = math.gcd(num1,num2)\n    return gcd\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    \"\"\"\n    Find the diameter of a circle.\n    \"\"\"\n    return 2 * radius\n\n#Below is an example usage:\n\nimport math\n\ndef diameter_circle(radius):\n    \"\"\"\n    Find the diameter of a circle.\n    \"\"\"\n    return 2 * radius\n\n# Enter the radius\nradius = 10\n\n# Calling the function\ndiameter = diameter_circle(radius)\n\n# Printing the diameter", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    return 2 * radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2*radius\n\ndef test_diameter_circle():\n    assert diameter_circle(10)==20\n\ndef test_diameter_circle_2():\n    assert diameter_circle(20)==40\n\ndef test_diameter_circle_3():\n    assert diameter_circle(30)==60\n\ndef test_diameter_circle_4():\n    assert diameter_circle(40)==80\n\ndef test_diameter_circle_5():\n    assert diameter_circle(50)==100\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n# Define our function\ndef diameter_circle(radius):\n    # Write your code here!\n    # Need to find the diameter of a circle\n    return 2 * radius\n\ndef test_diameter_circle():\n    assert diameter_circle(10)==20\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return radius*2\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    return 2*r\n\ndef test_diameter_circle():\n    assert diameter_circle(10)==20, \"function should return 20\"\n\ndef diameter_circle2(r):\n    return 2*r\n\ndef test_diameter_circle2():\n    assert diameter_circle2(10)==20, \"function should return 20\"\n\ndef diameter_circle3(r):\n    return 2*r\n\ndef test_diameter_circle3():\n    assert diameter_circle3(10)==20, \"function should return 20\"\n\ndef diameter_circle4(r):\n    return 2*r\n\ndef test_diameter_circle4():\n    assert diameter_circle4(10)==20, \"function should return 20\"\n\ndef diameter_circle5(r):\n    return 2*r\n\ndef test_diameter_circle5():\n    assert diameter_circle5(10)==20, \"function should return 20\"\n\ndef diameter_circle6(r):\n    return 2*r\n\ndef test_diameter_circle6():\n    assert diameter_circle6(10)==20, \"function should return 20\"\n\ndef diameter_circle7(r):\n    return 2*r\n\ndef test_diameter_circle7():\n    assert diameter_circle7(10)==20, \"function should return 20\"\n\ndef diameter_circle8(r):\n    return 2*r\n\ndef test_diameter_circle8():\n    assert diameter_circle8(10)==20, \"function should return 20\"\n\ndef diameter_circle9(r):\n    return 2*r\n\ndef test_diameter_circle9():\n    assert diameter_circle9(10)==20, \"function should return 20\"\n\ndef diameter_circle10(r):\n    return 2*r\n\ndef test_diameter_circle10():\n    assert diameter_circle10(10)==20, \"function should return 20\"\n\ndef diameter_circle11(r):\n    return 2*", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"find the diameter of a circle\"\"\"\n    return radius*2\n\n\n# +", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\nimport pytest\nfrom math import sqrt\n\n\ndef diameter_circle(radius: int) -> int:\n    \"\"\"\n    Finds the diameter of a circle.\n\n    Args:\n        radius (int): Radius of the circle\n\n    Returns:\n        int: Diameter of the circle\n    \"\"\"\n    return 2 * sqrt(radius ** 2)\n\n\ndef test_diameter_circle() -> None:\n    assert diameter_circle(10) == 20", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport numpy as np\ndef diameter_circle(r):\n    if (r > 0):\n        d = 2*r\n    else:\n        raise ValueError(\"Radius should be positive\")\n    return d\n\n# Enter the radius\nr = 10\n\n# Calling the function", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    :param radius: the radius of a circle\n    :return: the diameter of a circle\n    \"\"\"\n    return 2 * radius\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(l):\n    s = \" \".join(l)\n    return s\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(arr):\n  return '  '.join(arr)\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(elements):\n    return \" \".join(elements)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    if len(elements) < 1:\n        return \"\"\n    return ' '.join(elements)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    return \" \".join(elements)\n\n# print(concatenate_elements(['hello','there','have','a','rocky','day']))\n\n# \"\"\"\n# Write a function to check if a list of numbers is a permutation of another list.\n# assert is_permutation([1,2,3,4], [3,4,1,2]) == True\n# \"\"\"\n\ndef is_permutation(list1, list2):\n    return set(list1) == set(list2)\n\n# print(is_permutation([1,2,3,4], [3,4,1,2]))\n\n# \"\"\"\n# Write a function to find the pair of numbers in a list which sum to a given number.\n# assert find_pair([1,3,5,7,9,11], 10) == [3,7]\n# \"\"\"\n\ndef find_pair(list1, number):\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            if list1[i] + list1[j] == number:\n                return [list1[i], list1[j]]\n    return False\n\n# print(find_pair([1,3,5,7,9,11], 10))\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(a_list):\n    return \" \".join(a_list)\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    joined_string = \" \".join(elements)\n    return joined_string\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(a_list):\n    return ' '.join(a_list)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(word_list):\n    result = ''\n    for word in word_list:\n        result += word\n    return result\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list_of_strings):\n\n    if len(list_of_strings) > 0:\n        return ' '.join(list_of_strings)\n    else:\n        return \"\"\n\n# do not change this line"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return num_comm_div(a - b, b)\n    else:\n        return num_comm_div(a, b - a)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a, b):\n    \"\"\"\n    Arguments:\n        a (int): first number.\n        b (int): second number.\n    Returns:\n        common divisor between a and b.\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return num_comm_div(b, a % b)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n\tif a == b:\n\t\treturn a\n\tfor i in range(a,b+1):\n\t\tif a%i == 0 and b%i == 0:\n\t\t\treturn i\n\treturn False\n\ndef main():\n\tn = int(input())\n\tx = list(map(int,input().split()))\n\ty = list(map(int,input().split()))\n\tprint(\"YES\")\n\tif x[0] == y[0]:\n\t\tprint(num_comm_div(x[1],y[1]))\n\telse:\n\t\tprint(num_comm_div(x[0],y[0]))\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1, num2):\n    return gcd(num1, num2)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef test_num_comm_div():\n    assert num_comm_div(2,4) == 2\n\ndef test_gcd():\n    assert gcd(2,4) == 2\n    assert gcd(4,2) == 2\n    assert gcd(20,10) == 10\n    assert gcd(400,200) == 200", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1,num2):\n    return int(num1//num2)", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    # a>b\n    if a < b:\n        a,b = b,a\n    for i in range(1,a+1):\n        if b % i == 0:\n            if i == a or b % (a//i) == 0:\n                return i\n    return -1\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(x,y):\n    if (x % y) == 0:\n        return y\n    else:\n        return num_comm_div(y,x % y)\n\ndef main():\n    print(\"common divisors of 2 and 4 are: \", num_comm_div(2,4))\n    print(\"common divisors of 2 and 3 are: \", num_comm_div(2,3))\n    print(\"common divisors of 2 and 5 are: \", num_comm_div(2,5))\n    print(\"common divisors of 2 and 7 are: \", num_comm_div(2,7))\n    print(\"common divisors of 3 and 7 are: \", num_comm_div(3,7))\n    print(\"common divisors of 5 and 7 are: \", num_comm_div(5,7))\n    print(\"common divisors of 7 and 8 are: \", num_comm_div(7,8))\n\nmain()", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\n#given_pair = input(\"Enter two numbers: \")\n\n# try:\n#     given_pair = int(input(\"Enter two numbers: \"))\n#     # print(type(given_pair))\n#     if given_pair == 0 or given_pair == 1:\n#         print(\"Invalid Number\")\n#     elif given_pair == 2:\n#         print(\"2 is common divisor\")\n#         assert 2\n#     else:\n#         ans = 0\n#         for i in range(1,given_pair):\n#             if(given_pair % i == 0):\n#                 ans = i\n#         print(ans)\n# except:\n#     print(\"Invalid Number\")\n#     assert 1\n\ndef num_comm_div(a,b):\n    if a == 0 or b == 0:\n        print(\"Invalid Number\")\n    elif a == b:\n        print(a,\" is common divisor\")\n        return a\n    else:\n        ans = 0\n        for i in range(1,a):\n            if(a % i == 0 and b % i == 0):\n                ans = i\n        print(ans)\n        return ans", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(m,n):\n    for i in range(1,m):\n        if m%i == 0 and n%i == 0:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    \"\"\"\n    find common divisor of two numbers\n    \"\"\"\n    c = gcd(a,b)\n    if c == 1:\n        return c\n    else:\n        return num_comm_div(c,b)\n\ndef gcd(a,b):\n    \"\"\"\n    find greatest common divisor\n    \"\"\"\n    while b != 0:\n        a,b = b,a%b\n    return a\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(x,y):\n\tif x>=y:\n\t\tprint(\"Negative values\")\n\t\treturn\n\telse:\n\t\treturn x%y\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(num1, num2):\n    if(num1 % num2 == 0):\n        return 0\n    else:\n        return num1 % num2\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    return a%b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n#Write your code below:\ndef find(a,b):\n    return a%b", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# Take two numbers as input and return the remainder.\ndef find(a,b):\n    return a % b", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a%b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    while a>b:\n        a = a - b\n        if a<0:\n            a = a + b\n    return a\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a, b):\n\tremainder = a % b\n\treturn remainder\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(x,y):\n    if x % y != 0:\n        return x % y\n    else:\n        return 0\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    n = len(nums)\n    result = [0] * n\n    for i in range(n):\n        if i == 0:\n            result[i] = nums[i]\n        else:\n            result[i] = result[i - 1] + nums[i]\n    return result\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(num_list):\n    num_list.sort()\n    new_list = []\n    count = 0\n    for num in num_list:\n        if num_list[count] == num+1:\n            count += 1\n        else:\n            new_list.append(num+1)\n    return new_list\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(lst):\n    if len(lst) == 1:\n        return [lst[0], lst[0]+1]\n    else:\n        return add_consecutive_nums(lst[1:]) + [lst[-1] + lst[-2]]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    res = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] - nums[i-1] != 1:\n            res.append(nums[i])\n    res.append(nums[len(nums)-1] + 1)\n    return res\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(list):\n    for i in range(len(list)-1):\n        list[i+1]=list[i]+list[i+1]\n    return list\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(l):\n    \"\"\" Return a new list containing the sums of all consecutive pairs\n    in the original list.\n    >>> add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]) == [2, 4, 7, 8, 9, 11, 13]\n    \"\"\"\n    return sum([i for i in range(1, len(l)) if l[i] - l[i - 1] == 1])", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n\tif not nums:\n\t\treturn\n\n\tdef add_nums(s):\n\t\ttotal = s[0]\n\t\tfor i in range(1, len(s)):\n\t\t\ttotal += s[i]\n\t\treturn total\n\n\tindex = 0\n\twhile index < len(nums):\n\t\tif index + 1 >= len(nums):\n\t\t\tbreak\n\t\tif nums[index] + nums[index + 1] != nums[index + 1]:\n\t\t\tnums.insert(index + 1, nums[index] + nums[index + 1])\n\t\tindex += 1\n\n\treturn nums", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i] + i + 1)\n    return result", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    nums = list(set(nums))\n    return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)]\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(arr):\n    ans = []\n    for i in range(len(arr)):\n        if i > 0:\n            ans.append(arr[i] + arr[i-1])\n        else:\n            ans.append(arr[i])\n    return ans\n\n# test cases\narr = [1, 1, 3, 4, 4, 5, 6, 7]"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    # Write your code here\n    ans = 0\n    for i in range(1, n+1):\n        ans = ans + (i**3)\n    return ans\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ = sum_ + (i**3)\n    return sum_", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n: int) -> int:\n    \"\"\"\n    Finds the sum of a series of numbers in n.\n    @param n: a positive integer\n    @return: the sum of a series\n    \"\"\"\n    return sum(range(1, n + 1))**3\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(n):\n        sum = sum + i ** 3\n    return sum\n\n\ndef test_sum_Of_Series():\n    assert sum_Of_Series(5) == 225\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**3)\n    return sum\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_of_series(n: int) -> int:\n    \"\"\"Function to find the sum of series of numbers.\n\n    Args:\n        n (int): n natural numbers.\n\n    Returns:\n        int: sum of series of numbers.\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 6\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    if n == 0:\n        return 0\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    # Write your code here.\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(0, n):\n        sum = sum + i ** 3\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\nimport math\n\ndef sum_Of_Series(n):\n    return sum([num**3 for num in range(1,n+1)])\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    i=1\n    sum=0\n    while i<=n:\n        sum=sum+i*i\n        i=i+1\n    return sum\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    return [item for item in arr if item != 0] + [item for item in arr if item == 0]\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    zero_ind = []\n    for ind in range(len(arr)):\n        if arr[ind] == 0:\n            zero_ind.append(ind)\n    zero_ind.reverse()\n    for ind in zero_ind:\n        arr[ind], arr[len(arr) - 1] = arr[len(arr) - 1], arr[ind]\n    return arr\n\n# assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    pos_arr = [pos for pos, val in enumerate(arr) if val]\n    print(pos_arr)\n    pos_arr.reverse()\n    return [arr[x] for x in pos_arr]\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef move_zeros(array):\n    \"\"\"\n    Args:\n        array (list): a list with numbers and zeros\n\n    Returns:\n        list: a sorted list with the zeros moved to the end\n    \"\"\"\n    # check if the list is empty\n    if len(array) == 0:\n        return []\n\n    # get the zeroes index\n    zeroes_index = 0\n    for index, item in enumerate(array):\n        if item == 0:\n            zeroes_index = index\n\n    # if the list does not have any zeros, then no need to move them\n    if zeroes_index == 0:\n        return array\n\n    # get the sorted array\n    sorted_array = sorted(array)\n\n    # get the size of the sorted array\n    sorted_size = len(sorted_array)\n\n    # get the sorted zeros array\n    sorted_zeros = sorted_array[:zeroes_index]\n\n    # get the non-sorted zeros array\n    non_sorted_zeros = sorted_array[zeroes_index:]\n\n    # get the non-zeros array\n    non_zeros = sorted_array[zeroes_index+1:]\n\n    # return the zeroes and non-zeros array\n    return sorted_zeros + non_sorted_zeros + non_zeros\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n  pos = 0\n  for item in arr:\n    if item != 0:\n      arr[pos] = item\n      pos += 1\n  return arr\n\n\n# +\n# Tests\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\nimport pytest\n\n\ndef re_order(arr):\n    \"\"\"\n    :param arr:\n    :return:\n    \"\"\"\n    pos_arr = [x for x in arr if x != 0]\n    if not pos_arr:\n        return [0] * len(arr)\n    pos_arr.append(0)\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] != 0:\n            pos_arr.insert(0, arr[i])\n    return pos_arr\n\n\n@pytest.mark.parametrize('arr, expected', [(\n    [6, 0, 8, 2, 3, 0, 4, 0, 1],\n    [6, 8, 2, 3, 4, 1, 0, 0, 0]\n)])\ndef test_re_order(arr, expected):\n    assert re_order(arr) == expected", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(nums):\n    # write your code here\n    # the solution is to first find the length of the list\n    if len(nums) == 0:\n        return []\n    \n    zero_index = -1\n    length = len(nums)\n    # find the position of the zero\n    for i in range(length):\n        if nums[i] == 0:\n            zero_index = i\n    \n    #move all zeroes to the end\n    while zero_index >= 0:\n        nums[zero_index], nums[length-1] = nums[length-1], nums[zero_index]\n        zero_index -= 1\n        length -= 1\n    \n    # the last zero is now the first\n    nums[0], nums[length-1] = nums[length-1], nums[0]\n    return nums\n\nre_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n\n# +\nimport pytest\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(array):\n    if len(array) == 0:\n        return array\n    # count number of zeros\n    count = 0\n    for i in array:\n        if i == 0:\n            count += 1\n    # create new array\n    new_array = []\n    for i in range(len(array)):\n        if array[i] != 0:\n            new_array.append(array[i])\n    # append zeros\n    for i in range(count):\n        new_array.append(0)\n    # append non-zeros to the end\n    for i in range(len(array)-count):\n        new_array.append(array[i+count])\n    return new_array\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\nimport math\n\ndef re_order(arr):\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            for j in range(i, len(arr)):\n                arr[j], arr[i] = arr[i], arr[j]\n            break\n    return arr\n\n\ndef re_order_1(arr):\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i], arr[len(arr)-1] = arr[len(arr)-1], arr[i]\n            arr.pop()\n            break\n    return arr\n\ndef re_order_2(arr):\n    zero_loc = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_loc.append(i)\n    zero_loc.reverse()\n    for i in zero_loc:\n        arr[i], arr[len(arr)-1] = arr[len(arr)-1], arr[i]\n        arr.pop()\n    return arr\n\ndef re_order_3(arr):\n    count = 0\n    while count < len(arr):\n        if arr[count] != 0:\n            break\n        count += 1\n    for i in range(count, len(arr)):\n        if arr[i] != 0:\n            arr[count], arr[i] = arr[i], arr[count]\n            count += 1\n    arr.reverse()\n    for i in range(len(arr) - count, len(arr)):\n        arr[count], arr[i] = arr[i], arr[count]\n        count += 1\n    return arr\n\n\ndef re_order_4(arr):\n    while 0 in arr:\n        arr.remove(0)\n    arr.extend([0] * (len(arr) - len(arr) % 2))\n    return arr", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i], arr[-1] = arr[-1], arr[i]\n    return arr\n\ndef test_re_order():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert re_order([2, 3, 4, 0, 6, 8, 0, 1, 0]) == [2, 3, 4, 6, 8, 1, 0, 0, 0]"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    return binomial(n,k)/(factorial(k)*factorial(n-k))\n\n\n# +", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(p, k):\n    # write your code here\n    if p < k:\n        return 0\n    return (p * (p-1)) // (k * (k-1))\n\n\ndef test_permutation_coefficient():\n    assert permutation_coefficient(10, 2) == 90", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\n# assert permutation_coefficient(10, 2) == 90\n# assert permutation_coefficient(10, 5) == 10\n\n\ndef test_permutation_coefficient():\n    assert permutation_coefficient(10, 2) == 90\n    assert permutation_coefficient(10, 5) == 10\n    assert permutation_coefficient(10, 9) == 1\n    assert permutation_coefficient(10, 10) == 1", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nfrom math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nfrom functools import reduce\n\ndef permutation_coefficient(n, k):\n    num = reduce(lambda x, y: x * y, range(1, k + 1))\n    den = reduce(lambda x, y: x * y, range(1, n + 1))\n    return num / den", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    ans = 1\n    for i in range(k):\n        ans *= n - i\n    for i in range(1, k + 1):\n        ans /= i\n    return ans\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nimport numpy as np\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    # This formula is not very pretty, but it is the best I can come up with\n    return int(np.math.factorial(n) / (np.math.factorial(k) * np.math.factorial(n - k)))\n\n\n# As a test\ndef test_permutation_coefficient():\n    assert permutation_coefficient(10, 2) == 90\n    assert permutation_coefficient(5, 2) == 30\n    assert permutation_coefficient(4, 2) == 15\n    assert permutation_coefficient(4, 1) == 4\n    assert permutation_coefficient(4, 3) == 0\n    assert permutation_coefficient(4, 4) == 0", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nimport itertools\n\nfrom collections import defaultdict\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n\n    :param n: The n in the equation p(n, k)\n    :param k: The k in the equation p(n, k)\n    :return: The result of the equation p(n, k)\n    \"\"\"\n\n    return len(list(itertools.permutations(range(k), n)))\n\n\ndef test_permutation_coefficient():\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n\n    :return: None\n    \"\"\"\n\n    assert permutation_coefficient(10, 2) == 90\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    if n < 2:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n#print(permutation_coefficient(10, 2))", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\n# O(n) time | O(1) space\ndef permutation_coefficient(n, k):\n    count = 0\n\n    # Base case\n    if n == 0 or k == 0:\n        return 0\n\n    # Calculate the count for numbers of length n\n    for i in range(1, k + 1):\n        count += permutation_coefficient(n - i, k - 1)\n\n    return count\n\n\n# O(n) time | O(n) space\ndef permutation_coefficient(n, k):\n    count = 0\n\n    # Base case\n    if n == 0 or k == 0:\n        return 0\n\n    # Calculate the count for numbers of length n\n    for i in range(k, 1, -1):\n        count += permutation_coefficient(n - i, k - 1)\n\n    return count"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,badwords):\n    # Remember that you can use list.remove() on a list\n    # from the end of the list.\n    for word in badwords:\n        words.remove(word)\n    return words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, to_remove):\n    return [word for word in words if word not in to_remove]\n\n#Test", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, remove):\n    \"\"\"Remove specific words from a given list.\"\"\"\n    return [word for word in words if word not in remove]\n\n\n# ### 3. Modify the following function so it returns the first and last name of each person in a list:\n\ndef get_first_last_name(people):\n    \"\"\"Return the first and last name of each person in a list.\"\"\"\n    return [person.split()[0], person.split()[1]]\n\n\n# ### 4. Write a function that returns True if a given string is a palindrome. A palindrome is a word or phrase that reads the same both ways.\n\ndef is_palindrome(word):\n    \"\"\"Return True if the given string is a palindrome.\"\"\"\n    return word == word[::-1]\n\n\n# ### 5. Write a function that returns True if a given list contains all of the elements of another list.\n\ndef contains_all(list1, list2):\n    \"\"\"Return True if list1 contains all the elements of list2.\"\"\"\n    for element in list2:\n        if element not in list1:\n            return False\n    return True\n\n\n# ### 6. Write a function that returns True if a given list contains any of the elements of another list.\n\ndef contains_any(list1, list2):\n    \"\"\"Return True if list1 contains any of the elements of list2.\"\"\"\n    for element in list2:\n        if element in list1:\n            return True\n    return False\n\n\n# ### 7. Write a function that returns the length of a string if it is less than 5, and returns the length of the string followed by 'is shorter than 5' if it is at least 5.\n\ndef shorter_than_five(word):\n    \"\"\"Return the length of the string if it is less than 5, and return the length of the string followed by 'is shorter than 5' if it is at least 5.\"\"\"\n    if len(word) < 5:\n        return len(word)\n    else:\n        return len(word) + ' is shorter than ", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(lst, words):\n    new_lst = []\n    for word in lst:\n        for word1 in words:\n            if word == word1:\n                break\n        else:\n            new_lst.append(word)\n    return new_lst\n\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, bad_words):\n    for word in bad_words:\n        words.remove(word)\n    return words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, words_to_remove):\n    \"\"\"\n    Arguments:\n        words: list of strings\n        words_to_remove: list of strings\n    Returns:\n        list of strings\n    \"\"\"\n    words = [word for word in words if word not in words_to_remove]\n    return words\n\ndef test_remove_words():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,words_to_remove):\n    return [word for word in words if word not in words_to_remove]\n\n#Give it a try!", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, bad_words):\n    return [word for word in words if word not in bad_words]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,to_remove):\n    return [w for w in words if w not in to_remove]", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(a, b):\n    return [i for i in a if i not in b]"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n#without using sort\ndef same_order(a,b):\n    if len(a) != len(b):\n        return False\n    return all(i == j for i, j in zip(a,b))\n\n#using sort\n#def same_order(a,b):\n#    a = sorted(a)\n#    b = sorted(b)\n#    return all(i == j for i, j in zip(a,b))\n\n#using dict\ndef same_order(a,b):\n    a = {i:True for i in a}\n    b = {i:True for i in b}\n    return all(a[i] == b[i] for i in a)\n\n#using set\ndef same_order(a,b):\n    return set(a)==set(b)", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(a,b):\n    return a==b or sorted(a)==sorted(b)\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(a, b):\n    if len(a) != len(b):\n        return False\n    a.sort()\n    b.sort()\n    return a == b\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\n# Q.2 Write a function to check whether a string is palindrome or not.\n# assert is_palindrome(\"eeeee\")==True\n# assert is_palindrome(\"eeeee\")==False\n\n# Q.3 Write a function to check whether a string is anagram or not.\n# assert is_anagram(\"peter\",\"tere\")==True\n# assert is_anagram(\"peter\",\"ter\")==False\n\n# Q.4 Write a function to print the sum of the digits of a number.\n# assert sum_of_digits(123)==6\n\n# Q.5 Write a function to print all the multiples of 3 and 5 less than n.\n# assert print_multiples(100)==[3,5,6,9,15,20,21,24,27,30,33,35,36,39,45,50,51,54,57,60,63,65,66,69,75,80,81,84,87,90,93,95,96]\n\n# Q.6 Write a function to print all the elements of a list which is not present in another list.\n# assert print_not_in([1,2,3,4,5], [1,2,3,5,6,7,8,9])==[4,8]", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    for i in range(len(list1)):\n        if list1[i]!=list2[i]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(first, second):\n    if len(first) != len(second):\n        return False\n    first = sorted(first)\n    second = sorted(second)\n    for i in range(len(first)):\n        if first[i] != second[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    l1=list(list1)\n    l2=list(list2)\n    if len(l1)!=len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!=l2[i]:\n            return False\n    return True\n\n#print(same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"]))\n#print(same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"black\"]))", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    if len(list1)==0 or len(list2)==0:\n        return False\n    return list1[0] == list2[0] and same_order(list1[1:],list2[1:])\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    if list1 == list2:\n        return True\n    else:\n        return False\n\n#This code is contributed by <NAME>", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(a,b):\n    if sorted(a) == sorted(b):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    x = 0\n    i = 1\n    while i <= num:\n        if i % 2 != 0:\n            x += i\n        i += 2\n    return x / 2", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(num):\n    sum_ = 0\n    num = int(num)\n    for i in range(num):\n        if i % 2 != 0:\n            sum_ += i\n    avg = sum_ // (num - num % 2)\n    return avg\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_odd(n):\n    return sum(i for i in range(1, n+1) if i%2 != 0) // 2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(number):\n    count = 0\n    summation = 0\n    while (number % 2 != 0):\n        summation += number\n        number -= 1\n        count += 1\n    summation = summation / count\n    return summation\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    sum = 0\n    for i in range(1,num+1):\n        if(i%2 !=0):\n            sum+=i\n    return sum/num\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(number):\n    return sum(range(1, number + 1, 2)) / 2\n\n#Using list comprehension", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    return (sum(i for i in range(1, n + 1, 2)) // 2)\n\n#test", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(x):\n    s = 0\n    i = 1\n    while (i <= x):\n        if (i % 2 != 0):\n            s += i\n        i = i+2\n    return s / 2\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_odd(n):\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i\n    return sum/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        if i%2 == 1:\n            sum += i\n        i += 1\n    return sum/2\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nfrom itertools import product\n\n\ndef no_of_subsequences(array, k):\n    \"\"\"Returns the number of subsequences with product smaller than k\"\"\"\n    array_size = len(array)\n    subsequences = set()\n    for i in range(1, array_size + 1):\n        for j in product(*([array] * i)):\n            product_of_sequence = 1\n            for el in j:\n                product_of_sequence *= el\n            if product_of_sequence < k:\n                subsequences.add(tuple(j))\n    return len(subsequences)\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    # write your code here\n    dp = [0] * len(arr)\n    dp[0] = 1\n    for i in range(1, len(arr)):\n        if arr[i] * arr[i - 1] <= k:\n            dp[i] += dp[i - 1]\n    return sum(dp)\n\narr = [1, 2, 3, 4]\nk = 10", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    dp = [0] * (k+1)\n    dp[1] = 1\n    for i in range(2, k+1):\n        for j in range(1, i+1):\n            dp[i] += dp[i-j] * arr[j-1]\n    return dp[k]\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    dp = [[0]*(k+1) for i in range(len(arr)+1)]\n    dp[0][0] = 1\n    \n    for i in range(1, len(arr)+1):\n        for j in range(1, k+1):\n            for k in range(1, j+1):\n                dp[i][j] += dp[i-1][j-arr[i-1]]\n            \n    return dp[len(arr)][k]\n\narr = [1,2,3,4]\nk = 10", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    dp = [[0] * (k+1) for i in range(len(arr)+1)]\n    dp[0][1] = 1\n    for i in range(len(arr)):\n        for j in range(1,k+1):\n            if j-arr[i]<0:\n                continue\n            dp[i+1][j] = dp[i][j] + dp[i][j-arr[i]]\n    return dp[-1][k]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(a, k):\n    if k == 0:\n        return 1\n    n = len(a)\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = dp[i-1]\n        if i > 0:\n            dp[i] += dp[i-1]\n            if a[i] == 1:\n                dp[i] += dp[i-1]\n        if a[i] > 1:\n            dp[i] += dp[i-a[i]]\n    return sum(dp[n-1:])\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    # initialize dp with 0 for empty string\n    dp = [0 for i in range(len(arr)+1)]\n    for i in range(1,len(arr)+1):\n        dp[i] = 1\n    # iterate for each number in array\n    for num in arr:\n        for i in range(1,len(arr)+1):\n            dp[i] += dp[i-1]\n            dp[i] += dp[i-num]\n    print(dp)\n    return dp[-1]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n# Time complexity 2^n\n# There are 2^n ways to choose the first item, and (2*k-1) / (k - 1) ways to choose the next items such that the product is smaller than k\n# there are (2*k - 2 * (k - 1)) / (k - 1) ways to choose the next items such that the product is smaller than k\n# there are (2*k - 3 * (k - 1)) / (k - 1) ways to choose the next items such that the product is smaller than k\n# ...\n# there are (2*k - n * (k - 1)) / (k - 1) ways to choose the next items such that the product is smaller than k\n# there are (2*k - (n + 1) * (k - 1)) / (k - 1) ways to choose the next items such that the product is smaller than k\n# => total number of subsequences = sum (2*k - (n + 1) * (k - 1)) / (k - 1)\n\ndef no_of_subsequences(arr, k):\n    # Write your code here\n    total = 1\n    for i in range(0, len(arr)):\n        total += (2 * k - (i + 1) * (k - 1)) / (k - 1)\n    return int(total)\n\n\n# +\n# Write a function to find the first character that occurs more than n/2 times in the given string.\n#assert first_appearing_character(\"abcdabbbc\") == \"a\"", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(array, k):\n    result = 0\n    for i in range(len(array)):\n        for j in range(i):\n            result += array[i] // array[j]\n            result -= array[i] % array[j]\n            if array[i] % array[j] == 0:\n                result -= 1\n            if k < result:\n                break\n    return result\n\n# no_of_subsequences([1,2,3,4], 10) == 11\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nimport math\n\ndef no_of_subsequences(array, k):\n    memo = {}\n    def helper(x):\n        if x in memo:\n            return memo[x]\n        if x == 0:\n            return 1\n        if x > k:\n            return 0\n        result = helper(x-1)\n        for i in range(len(array)):\n            result += helper(x-array[i])\n        memo[x] = result\n        return result\n    return helper(math.fsum(array))\n"]]