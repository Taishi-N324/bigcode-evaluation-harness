[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,character):\n    pos = string.index(character)\n    string = string[:pos] + string[pos+1:]\n    pos = string.rindex(character)\n    string = string[:pos] + string[pos+1:]\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,char):\n    i=0\n    j=len(string)-1\n    while(i<j):\n        if(string[i]==char):\n            j=j-1\n            string=string[:i]+string[i+1:j]+string[j+1:]\n            i=i-1\n        i=i+1\n    return string\n\n\n# +\n# Test cases", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,char):\n    if(len(string)>0):\n        if(string.startswith(char)) :\n            return string[1:]\n        if(string.endswith(char)):\n            return string[:-1]\n        else:\n            return string\n\n#Tests", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str1,ch):\n    if ch in str1:\n        str1=str1[:str1.index(ch)+1]+str1[str1.index(ch)+2:]\n        return str1\n    else:\n        return str1\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s,c):\n    s1 = s.replace(c, \"\")\n    return s1[1:-1]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,c):\n    temp = \"\"\n    if string[0] == c:\n        temp = string[1:]\n    else:\n        temp = string[0]\n    if string[-1] == c:\n        temp = temp[0:-1]\n    return temp\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, ch):\n    str = str.lstrip(ch)\n    str = str.rstrip(ch)\n    return str\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, ch):\n\treturn str.replace(ch, \"\").replace(ch[0], \"\").replace(ch[-1], \"\")\n\n#assert remove_Occ(\"hello\", \"l\") == \"heo\"", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, ch):\n\n    return str.replace(str[0],\"\").replace(str[-1], \"\")\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s,char):\n    start = 0\n    end = len(s) - 1\n    while start <= end:\n        if s[start] == char:\n            start += 1\n        elif s[end] == char:\n            end -= 1\n        else:\n            break\n\n    new_s = \"\"\n    while start <= end:\n        new_s += s[start]\n        start += 1\n        end -= 1\n    return new_s\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\nimport numpy as np\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort the given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    output = []\n    for i in range(len(matrix)):\n        row = matrix[i]\n        row = np.array(row)\n        row_sum = np.sum(row)\n        row = np.append(row, [row_sum])\n        output.append(row)\n    output = np.array(output)\n    output = output[:,0:len(output[0])-1]\n    output = output[output[:,0].argsort()]\n    output = output[:,1:len(output[0])]\n    return output", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    for i in range(len(matrix)):\n        sorted(matrix[i])\n    return matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    row_sum = [sum(row) for row in matrix]\n    return sorted(matrix, key=lambda row: row_sum.index(sum(row)))\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    row_sum = []\n    for i in matrix:\n        row_sum.append(sum(i))\n\n    return sorted(matrix, key=lambda x: x[0], reverse=True)\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x), reverse=True)\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    matrix.sort(key = sum)\n    return matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    out = [[0 for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            out[i][j] = matrix[i][j]\n    for i in range(rows):\n        total = 0\n        for j in range(cols):\n            total += out[i][j]\n        index = 0\n        for j in range(cols):\n            if total > out[i][index]:\n                index = j\n            total -= out[i][index]\n        for j in range(cols):\n            out[i][j], out[i][index] = out[i][index], out[i][j]\n    return out", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    sorted_matrix = []\n    for i in range(len(matrix[0])):\n        row = [row[i] for row in matrix]\n        sorted_matrix.append(row)\n    return sorted_matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nimport numpy as np\n\ndef sort_matrix(matrix):\n    result = []\n    for row in matrix:\n        sum = np.sum(row)\n        result.append(row[np.argsort(row)])\n    return result\n\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nresult = sort_matrix(matrix)", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    result = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sum_index = row_sum\n        result.append(row_sum)\n        matrix_index = 0\n        for i in range(len(matrix)):\n            if row_sum == matrix[i][matrix_index]:\n                result.append(matrix[i])\n                matrix_index += 1\n    result = result[0:10]\n    result = [item for item in result if item != None]\n    return result\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(dictionary):\n  counts = {}\n  for key in dictionary:\n    if key not in counts:\n      counts[key] = 0\n    counts[key] += 1\n  return sorted(counts.items(), key=lambda x: x[1], reverse=True)", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    count_common\n    @param words: a list of words\n    @return a list of tuples of (word, number of occurrences)\n    \"\"\"\n    # TODO: Implement me\n    import collections\n    word_dict = collections.Counter(words)\n    return word_dict.most_common()\n\n# # Tests", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    counter = collections.Counter(words)\n    result = [(k,v) for k,v in counter.items()]\n    result.sort(key = lambda tup: tup[1], reverse=True)\n    return result", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(list):\n    dict = {}\n    for word in list:\n        if word in dict:\n            dict[word] += 1\n        else:\n            dict[word] = 1\n    return sorted(dict.items(), key=lambda x: x[1], reverse=True)\n\ndef count_common2(list):\n    dict = {}\n    for word in list:\n        if word in dict:\n            dict[word] += 1\n        else:\n            dict[word] = 1\n    return sorted(dict.items(), key=lambda x: x[1], reverse=True)\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    if not words:\n        return []\n    word_count = dict()\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return sorted(word_count.items(), key=lambda x:x[1])\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(list_of_words):\n    common_words = {}\n    for word in list_of_words:\n        if word in common_words:\n            common_words[word] = common_words[word] + 1\n        else:\n            common_words[word] = 1\n    return common_words\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    # the words in the dictionary\n    dictionary = words\n    # a dictionary of the word counts\n    counts = {}\n    # a dictionary of the most common word counts\n    most_common = {}\n    # loop through each word in the dictionary\n    for word in dictionary:\n        # if the word is not in the dictionary of counts yet, set it to 1\n        if word not in counts.keys():\n            counts[word] = 1\n        else:\n            # if the word is in the dictionary, add 1 to the count\n            counts[word] += 1\n        # if the word is in the dictionary of most common and its count is larger than the current value, set it to the current word and count\n        if word in most_common and most_common[word] < counts[word]:\n            most_common[word] = counts[word]\n    # return the dictionary of most common\n    return most_common", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n  counts = dict()\n  for word in words:\n    if word in counts:\n      counts[word] += 1\n    else:\n      counts[word] = 1\n  return sorted(counts.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    pass\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    dict = {}\n    for word in words:\n        if word not in dict:\n            dict[word] = 0\n        dict[word] += 1\n\n    return [(word, count) for word, count in dict.items() if count > 1]\n\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_volume(x,y,z):\n    # your code here\n    return x*y*z\n\n# Testing", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    return a*b*c/2\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base_length,height,thickness):\n    volume=base_length*height*thickness/3\n    return volume\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    print(\"a: {}, b: {}, c: {}\".format(a,b,c))\n    return a * b * c / 3\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a, b, c):\n    return (a * b * c) / 6\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(b, h, w):\n    return b*h*w/2\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a, b, c):\n\ts = (a + b + c) / 2\n\tarea = (s * (s-a) * (s-b) * (s-c))\n\treturn area\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\nimport math\ndef find_Volume(a,b,c):\n    s = a + b + c\n    return s/2 * math.sqrt(s*(s-a)*(s-b)*(s-c))", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base, height, depth):\n    volume = base * height * depth\n    return volume\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n#Solution\ndef find_volume(a,b,c):\n\treturn (a*b*c)/2.0\n\n#My test"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    \"\"\"\n    :param string: a string\n    :return: a list of strings that split the original string at lowercase letters\n    \"\"\"\n    return [x.lower() for x in string.split()]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(word):\n    \"\"\"split a string at lowercase letters\n\n    Parameters\n    ----------\n    word : string\n        input string\n\n    Returns\n    -------\n    out : list\n        list of strings\n    \"\"\"\n    out = []\n    for c in word:\n        if c.islower():\n            out.append(c)\n    return out\n\n#%%", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    return s.split('a')\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    \"\"\"Split a string by lowercase letters.\"\"\"\n    return [string[i:j] for i,j in [(j,k) for j,k in enumerate(string) if k.islower()]]\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return [word.lower() for word in string.split()]\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n\treturn [char for char in string.lower() if char.isalpha()]\n#Problem 11", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    \"\"\" Split a string at lowercase letters \"\"\"\n    return [string[i:i+1].lower() for i in range(0,len(string),1)]\n\n#assert split_lowerstring(\"AbCd\")==['bC','d']", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    \"\"\"\n        Return a list of substrings split at lowercase letters.\n    \"\"\"\n    lst = []\n    lstr = ''\n    for char in s:\n        if char.islower():\n            if lstr != '':\n                lst.append(lstr)\n            lstr = ''\n        else:\n            lstr += char\n    if lstr != '':\n        lst.append(lstr)\n    return lst\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    out = []\n    lower = True\n    for i,char in enumerate(string):\n        if char.islower():\n            if lower:\n                out.append('')\n            lower = True\n        else:\n            if lower:\n                lower = False\n                out[-1] = string[i]\n            else:\n                out.append(string[i])\n    return out\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    s = s.lower()\n    return [s[i] for i in range(0, len(s)) if s[i] in 'abcdefghijklmnopqrstuvwxyz']\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    #add your code here\n    for i in range(len(text)-1):\n        if text[i].islower() and text[i+1] == '_':\n            print(\"Found a match!\")\n            return\n    print(\"Not found!\")\n    return\n    ", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    \"\"\"Function to find sequences of lowercase letters joined with an underscore.\"\"\"\n    # split the text into words and check for matches\n    words = text.split()\n    found = False\n    for word in words:\n        if word.islower():\n            if '_' in word:\n                found = True\n    if found:\n        return 'Found a match!'\n    return 'No match!'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if \"_\" in text and text.lower() == text:\n        print(\"Found a match!\")\n    else:\n        print(\"Nothing found\")\n\n# +", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    found_match = False\n    for letter in text:\n        if letter.islower() and \"_\" not in text:\n            found_match = True\n        if letter.islower() and \"_\" in text:\n            if letter != \"_\":\n                found_match = True\n    if found_match == True:\n        return \"Found a match!\"\n    else:\n        return \"No match found.\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    count = 0\n    for i in text:\n        if i.islower() and i != '_':\n            count = count + 1\n    if count > 0:\n        return \"Found a match!\"\n    else:\n        return \"No matches found!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    pass\n\n\n# + nbgrader={\"grade\": true, \"grade_id\": \"test_text_lowercase_underscore\", \"locked\": true, \"points\": 1, \"schema_version\": 1, \"solution\": false}", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if \"a\" in text and \"_\" in text and \"b\" in text:\n        return \"Found a match!\"\n    else:\n        return \"Not found\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(input_str):\n    found_underscore = False\n    while not found_underscore:\n        if input_str.count('_') == input_str.count(' '):\n            found_underscore = True\n        else:\n            input_str = input_str.replace(' ', '_')\n    return 'Found a match!'\n\ndef test_text_lowercase_underscore():\n    assert text_lowercase_underscore(\"aab_cbbbc\") == 'Found a match!'\n    assert text_lowercase_underscore(\"_abc_defg\") == 'Found a match!'\n    assert text_lowercase_underscore(\"abba_c_baab\") == 'Found a match!'\n    assert text_lowercase_underscore(\"aab_bb_c\") == 'Found a match!'\n    assert text_lowercase_underscore(\"aaaab\") == 'Found a match!'\n    assert text_lowercase_underscore(\"_bbbbb\") == 'Found a match!'\n    assert text_lowercase_underscore(\"abba_aa_bbaa\") == 'Found a match!'\n    assert text_lowercase_underscore(\"_aaa_b_aa_ba\") == 'Found a match!'\n    assert text_lowercase_underscore(\"aaaaa_bb\") == 'Found a match!'\n    assert text_lowercase_underscore(\"bbbbb_aa_aaaab\") == 'Found a match!'\n    assert text_lowercase_underscore(\"a_aaa_b\") == 'Found a match!'\n    assert text_lowercase_underscore(\"aaabbb_c\") == 'Found a match!'\n    assert text_lowercase_underscore(\"bbb_a\") == 'Found a match!'\n    assert text_lowercase_underscore(\"b_bbb_aaa_a\") == 'Found a match!'\n    assert text_lowercase_underscore(\"aaaaa_bb_aaa_bb_a\") == 'Found a match!'\n    assert text_lowercase_underscore(\"a_aaa_bbb_bbb_aaa_b_aa_a\") == 'Found a match!'\n    assert text_lowercase_underscore(\"a_aaa_b_a\") == 'Found a match!'\n    assert text_lowercase_underscore(\"a_aaa_bbb_bbb_aaa_b_aa_bb_a\") == 'Found a match!'\n    assert text", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n  for item in text.lower():\n    if item == \"_\":\n      return \"Found a match!\"\n  return \"No matches found!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    # create a list of words\n    words = text.split()\n\n    # create a list of characters\n    chars = list(text)\n\n    # create a variable for underscore count\n    count = 0\n\n    # for each character\n    for char in chars:\n\n        # if the character is lowercase\n        if char.islower():\n            # if the character is an underscore\n            if char == '_':\n                # increase the underscore count\n                count += 1\n\n    # return a string of words containing the specified underscore count\n    return 'Found {} matches'.format(count)\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side):\n    return 4 * side\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4*side\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(n):\n    return 4 * n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n# Write your function here\ndef square_perimeter(x):\n    return x * 4", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    return 4*n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side_length):\n    perimeter = 4*side_length\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(x):\n    return x * 4", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(n):\n    return n*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    perimeter=0\n    for i in range(4):\n        perimeter+=n\n    return perimeter\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\nimport pytest\nfrom src.ch05.square_perimeter import square_perimeter\n\n\ndef test_perimeter_1():\n    assert square_perimeter(1) == 4\n\n\ndef test_perimeter_2():\n    assert square_perimeter(2) == 8\n\n\ndef test_perimeter_3():\n    assert square_perimeter(3) == 12\n\n\ndef test_perimeter_4():\n    assert square_perimeter(4) == 16\n\n\ndef test_perimeter_5():\n    assert square_perimeter(5) == 20\n\n\ndef test_perimeter_6():\n    assert square_perimeter(6) == 24\n\n\ndef test_perimeter_7():\n    assert square_perimeter(7) == 28\n\n\ndef test_perimeter_8():\n    assert square_perimeter(8) == 32\n\n\ndef test_perimeter_9():\n    assert square_perimeter(9) == 36\n\n\ndef test_perimeter_10():\n    assert square_perimeter(10) == 40\n\n\ndef test_perimeter_11():\n    assert square_perimeter(11) == 44\n\n\ndef test_perimeter_12():\n    assert square_perimeter(12) == 48\n\n\ndef test_perimeter_13():\n    assert square_perimeter(13) == 52\n\n\ndef test_perimeter_14():\n    assert square_perimeter(14) == 56\n\n\ndef test_perimeter_15():\n    assert square_perimeter(15) == 60\n\n\ndef test_perimeter_16():\n    assert square_perimeter(16) == 64\n\n\ndef test_perimeter_17():\n    assert square_perimeter(17) == 68\n\n\ndef test_perimeter_18():\n    assert square_perimeter(18) == 72\n\n\ndef test_perimeter_19():\n    assert square_perimeter(19) == 76\n\n\ndef test_perimeter_2"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    str1_clean = str1\n    for i in str2:\n        str1_clean = str1_clean.replace(i, \"\")\n    return str1_clean\n\n# def remove_dirty_chars(str1, str2):\n#     str1 = str1.replace(str2, \"\")\n#     return str1\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string, remove_string):\n    # your code goes here\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] not in remove_string:\n            new_string = new_string + string[i]\n    return new_string\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(text, remove):\n    new_text = \"\"\n    for char in text:\n        if char in remove:\n            pass\n        else:\n            new_text += char\n    return new_text\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1, s2):\n    for i in s1:\n        if i in s2:\n            s1 = s1.replace(i,'')\n    return s1\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string, sub):\n    if sub == \"\":\n        return string\n    result = \"\"\n    for i in range(0, len(string)):\n        if string[i] not in sub:\n            result += string[i]\n    return result", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    cleaned = str1.lower()\n    for c in str2:\n        if c in cleaned:\n            cleaned = cleaned.replace(c, '')\n    return cleaned", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(dirty_string, clean_string):\n    clean_string = set(clean_string)\n    new_string = \"\"\n    for char in dirty_string:\n        if char not in clean_string:\n            new_string += char\n    return new_string\n\n#or\ndef remove_dirty_chars(dirty_string, clean_string):\n    #dirty_string = clean_string.split()\n    clean_string = set(clean_string)\n    new_string = \"\"\n    for char in dirty_string:\n        if char not in clean_string:\n            new_string += char\n    return new_string\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(dirty, clean):\n    return dirty.replace(clean, \"\")", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1, s2):\n    return [x for x in s1 if x not in s2]\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(clean_str, dirty_str):\n    clean = ''\n    for c in clean_str:\n        if c not in dirty_str:\n            clean += c\n    return clean"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(nums):\n    # print(nums)\n    i = 0\n    while i < len(nums):\n        # if i != len(nums)-1:\n        if nums[i] == nums[i+1]:\n            return True\n        i+=1\n    return False\n\n# def test_duplicate2(nums):\n#     return nums.count(nums[i]) > 1\n\ndef test_duplicate3(nums):\n    # print(nums)\n    return len(nums) != len(set(nums))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    assert duplicate(arr) == False\n    \ndef duplicate(arr):\n    if len(arr) < 2:\n        return False\n    else:\n        a = set(arr)\n        if len(a) == len(arr):\n            return False\n        else:\n            return True\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    return any(x in arr for x in arr[1:])\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if arr==[]:\n        return False\n    else:\n        return True\n\ndef duplicate(arr):\n    unique = set()\n    for i in arr:\n        if i in unique:\n            return True\n        unique.add(i)\n    return False\n\n#Time: O(n)\n#Space: O(n)", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate([1,2,3,4,5]):\n    return False\n\ndef duplicate(array):\n    #Your code here\n    for i in range(len(array)-1):\n        for j in range(i+1,len(array)):\n            if array[i]==array[j]:\n                return True\n    return False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(l):\n    return(set(l) != set(l))", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(array):\n    return not(set(array)==set(array))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate():\n    assert duplicate([1,2,3,4,5]) == False\n\ndef test_duplicate():\n    assert duplicate([1,2,3,4,5,5]) == True\n\ndef test_duplicate():\n    assert duplicate([1,2,3,4,5,6,5]) == True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(array):\n    return len(array) != len(set(array))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    pass\ndef duplicate(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: True or False\n    \"\"\"\n    my_set = set()\n    for i in arr:\n        if i in my_set:\n            return True\n        else:\n            my_set.add(i)\n    return False\n\n# duplicate([1, 2, 3, 4, 5])\n# duplicate([1, 2, 3, 3, 5])\n# duplicate([1, 2, 2, 3, 5])\n# duplicate([1, 2, 3, 4, 4])\n# duplicate([1, 1, 2, 3, 4])\n# duplicate([1, 2, 3, 4, 4, 5])\n# duplicate([1, 2, 3, 4, 5, 5])\n# duplicate([1, 2, 3, 4, 5, 5, 5])\n# duplicate([1, 2, 2, 3, 5, 5, 5])\n# duplicate([1, 2, 3, 4, 5, 5, 5, 5])\n# duplicate([1, 2, 3, 3, 5, 5, 5, 5])\n# duplicate([1, 2, 3, 3, 3, 3, 5, 5, 5, 5, 5])\n# duplicate([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])\n# duplicate([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])\n# duplicate([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5,"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\nfrom __future__ import print_function\n\ndef is_woodall(n):\n    \"\"\"\n    is_woodall: (int) -> bool\n    Given a number, return True if it is a woodall number, False otherwise.\n    \"\"\"\n    if is_even(n) and sum_of_digits(n) == 9:\n        return True\n    return False\n\ndef is_even(n):\n    return (n % 2) == 0\n\ndef sum_of_digits(n):\n    return sum([int(d) for d in str(n)])\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(num):\n    \"\"\"\n    Return True if the number is woodball, False otherwise.\n    >>> is_woodball(383)\n    True\n    >>> is_woodball(3)\n    False\n    >>> is_woodball(1)\n    False\n    \"\"\"\n    s = str(num)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(num):\n    if num % 11 == 0:\n        return True\n    return False", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    return n % 7 == 0 or n % 11 == 0\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num == 1:\n        return False\n    if num % 3 == 0 or num % 5 == 0:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(n):\n    if n < 10 or n > 1000:\n        return False\n    nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if any(n % d == 0 for d in nums):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    \"\"\"\n    >>> is_woodall(383)\n    True\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(number):\n    \"\"\"\n    :param number:  an intiger number\n    :return: boolean\n    \"\"\"\n    if number % 10 == 3:\n        return True\n    elif number % 10 == 4:\n        return False\n    elif number % 10 == 5:\n        return True\n    elif number % 10 == 7:\n        return True\n    elif number % 10 == 8:\n        return True\n    elif number % 10 == 9:\n        return False\n    else:\n        raise ValueError(\"number must be an integer\")\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(num: int) -> bool:\n    \"\"\"\n    :param num: number to check\n    :return: True if number is woodball, False otherwise\n    \"\"\"\n    return True if 2 * num == sum([int(i) for i in str(num)]) else False\n\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    assert m > 0\n    list = []\n    for i in range(m):\n        list.append(n*i)\n    return list\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    multiples = []\n    for i in range(0,m):\n        multiples.append(n*i)\n    return multiples\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    i=0\n    result = []\n    while i < m:\n        result.append(n*i)\n        i+=1\n    return result\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    multiples = []\n    for i in range(m):\n        multiples.append(n*i)\n    return multiples\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    # YOUR CODE HERE\n    return [n*i for i in range(m)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    \"\"\"\n    Find the multiples of n.\n\n    Parameters\n    ----------\n    n : int\n        Number to be multiplied.\n    m : int\n        Number of multiples to find.\n\n    Returns\n    -------\n    list\n        List of multiples of n.\n    \"\"\"\n    return [n*i for i in range(1,m+1)]\n\n\n# %%timeit\nmultiples_of_num(4,10)\n\n# %%timeit\nmultiples_of_num(6000,10)\n\n# %%timeit\nmultiples_of_num(6000,100)\n\n# %%timeit\nmultiples_of_num(6000,1000)\n\n# %%timeit\nmultiples_of_num(6000,10000)\n\n# %%timeit\nmultiples_of_num(6000,100000)\n\n# %%timeit\nmultiples_of_num(6000,1000000)\n\n# %%timeit\nmultiples_of_num(6000,10000000)\n\n# %%timeit\nmultiples_of_num(6000,100000000)\n\n# %%timeit\nmultiples_of_num(6000,1000000000)", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    arr = []\n    for i in range(m):\n        arr.append(n*i)\n    return arr\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    multiples = []\n    for i in range(0,m):\n        multiples.append(n*i)\n    return multiples", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    result = []\n    for i in range(m):\n        result.append(n*i)\n    return result\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    \"\"\"\n    Arguments:\n        n: the number you want to find multiples of.\n        m: the number of multiples you want to find\n    Returns:\n        a list of numbers which are multiples of n\n    \"\"\"\n    #define variables\n    multiples = []\n\n    #find multiples\n    for num in range(m):\n        multiples.append(n * num)\n\n    return multiples\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    for idx, val in enumerate(arr):\n        if arr[val] == val:\n            continue\n        arr[val], arr[idx] = arr[idx], arr[val]\n    for idx, val in enumerate(arr):\n        if val != idx:\n            return val\n    return None", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(nums):\n    \"\"\"\n    :param nums: list[int]\n    :return: int\n    \"\"\"\n    nums.sort()\n    for index in range(len(nums) - 1):\n        if nums[index] == nums[index + 1]:\n            return nums[index]\n    return -1\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    for i in arr:\n        if arr.count(i)>1:\n            return i\n        else:\n            return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(array):\n    for i, n in enumerate(array):\n        if n in array[i+1:]:\n            return n\n    return -1\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(list_of_integers):\n    return first_duplicate(set(list_of_integers))\n\n\ndef first_duplicate(set_of_integers):\n    for x in set_of_integers:\n        if set_of_integers.count(x) > 1:\n            return x\n    return None\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    for index, number in enumerate(arr):\n        if arr.count(number) > 1:\n            return number\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(lst):\n    # Write your code here\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            return i\n        \nfind_first_duplicate([1, 2, 3, 4, 4, 5])\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    \"\"\"\n    :param arr: An array of integers\n    :return: The first duplicate element\n    \"\"\"\n    # Your code here.\n    dup_element = None\n    for element in arr:\n        if arr.count(element) > 1:\n            dup_element = element\n            break\n    return dup_element", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(array: list) -> int:\n    \"\"\"\n    Returns the first duplicate element in the given array, or -1 if no duplicate element exists.\n\n    Parameters\n    ----------\n    array: list\n        The array of integers to search.\n\n    Returns\n    -------\n    int\n        The index of the first duplicate element, or -1 if no duplicates exist.\n    \"\"\"\n    # TODO: Replace the pass statement with your code\n\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if i != j and array[i] == array[j]:\n                return array[j]\n    return -1"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(l):\n    l= map(list,l)\n    res = 0\n    for i in l:\n        max_sum = max(i)\n        res += max_sum\n    return res", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_sum(lst):\n    total = 0\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst[i])):\n            total = total + lst[i][j]\n    return total\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\nfrom typing import List\nimport sys\n\n\ndef maximum_sum(arr: List[List[int]]) -> int:\n    if len(arr) == 0:\n        return 0\n    result = sys.maxsize\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist = arr[i:j]\n            result = max(result, sum(sublist))\n    return result\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(x):\n    from functools import reduce\n    return reduce(lambda x,y: [max(a + b for a,b in zip(a,b)) for a,b in zip(x,y)], x)\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\n# @param list_of_list : list of lists\n# @return an integer\ndef maximum_Sum(list_of_list):\n    result = 0\n    for list in list_of_list:\n        result = max(result, sum(list))\n    return result\n\ndef test_case():\n    assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    maximum = 0\n    for i in range(len(lst)):\n        maximum += max(lst[i])\n    return maximum", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list_of_lists):\n    max_sum = -1 * sys.maxsize\n    for i in range(0, len(list_of_lists)):\n        sum = 0\n        for j in range(0, len(list_of_lists[i])):\n            sum = sum + list_of_lists[i][j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list_of_list):\n    max_sum = -1\n    for i in list_of_list:\n        curr_sum = 0\n        for j in i:\n            curr_sum += j\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(A):\n    max_sum = 0\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            if A[i][j] > max_sum:\n                max_sum = A[i][j]\n    return max_sum\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(n):\n    return int(bin(n), 2)\n\n#assert binary_to_decimal(100) == 4\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_string):\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n    \"\"\"\n    return 0\n\n# assert 100 == binary_to_decimal(100)\n# assert 25 == binary_to_decimal(0b11001)\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += binary[i] * 2 ** (len(binary)-i-1)\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(bin_number: int) -> int:\n    return int(bin_number, 2)", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(num):\n    if type(num) != int:\n        raise TypeError(\"binary_to_decimal takes only integers!\")\n    return int(str(num, 2), 10)\n\n# For example, 100 in binary is 1100 in decimal.\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_num):\n\tdecimal = 0\n\tfor i in range(len(binary_num)):\n\t\tdecimal += int(binary_num[len(binary_num) - 1 - i]) * 2 ** i\n\treturn decimal\n\n# test cases", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(n):\n  decimal = \"\"\n  for num in range(n):\n    decimal += \"0\"\n  decimal = int(decimal, base=2)\n  return decimal\n\n#assert binary_to_decimal(100) == 4\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        temp = 0\n        while num > 1:\n            temp += num % 10\n            num = int(num / 10)\n        return temp + num\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(n):\n  pass\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    \"\"\"\n    Convert the binary number to decimal.\n    :param num: number to be converted\n    :return: decimal value of binary number\n    \"\"\"\n    result = 0\n    n = len(str(num))\n    for i in range(n):\n        result += int(str(num)[n - i - 1]) * (2 ** (i))\n    return result\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    arr=list(arr)\n    result=1\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                arr.pop(j)\n                n-=1\n                break\n            if n==1:\n                break\n        if n==1:\n            break\n    for i in arr:\n        result*=i\n    return result\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr, size):\n    product = 1\n    temp_arr = []\n    for i in range(size):\n        if arr[i] not in temp_arr:\n            product *= arr[i]\n            temp_arr.append(arr[i])\n    return product\n\n# Run Tests", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\n#Solution:\ndef find_Product(array,length):\n\ta=[]\n\tfor i in array:\n\t\tif(i in a):\n\t\t\ta.remove(i)\n\t\telse:\n\t\t\ta.append(i)\n\tprint(a)\n\treturn len(a)\n\n#Test case:\ndef test_find_Product():\n\tassert find_Product([1,1,2,3],4) == 6\n\tassert find_Product([1,2,3,3,2,4],6) == 24\n\tassert find_Product([1,2,3,4,5,6,7,8,9,10],10) == 540\n\tassert find_Product([1,2,3,4,5,6,7,8,9,10,11,12],12) == 14400\n\ntest_find_Product()", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(a,n):\n    c=0\n    for i in range(0,n):\n        for j in range(0,i+1):\n            if(a[i]==a[j]):\n                c=c*a[i]\n    return c\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr, k):\n    \"\"\"\n    :param arr: list of numbers\n    :param k: number of elements to find\n    :return: product of non-repeated elements in arr\n    \"\"\"\n    res=1\n    for x in arr:\n        res*=x\n        if res==k:\n            return k\n    return k*res\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    a = []\n    s = set()\n    s.add(1)\n    for i in range(0,len(arr)):\n        if arr[i] not in s:\n            a.append(arr[i])\n            s.add(arr[i])\n    if len(a) == n:\n        for i in range(0,len(a)):\n            prod = 1\n            for j in range(0,len(a)):\n                if a[i] == a[j]:\n                    continue\n                prod = prod*a[j]\n            if prod > n:\n                break\n            else:\n                n = prod\n    return n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\n# @param {array} arr\n# @return {integer}\ndef find_Product(arr,size):\n    product=1\n    for i in range(0,len(arr)):\n        product = product*arr[i]\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    product=1\n    for i in arr:\n        if i in arr:\n            product*=i\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(list, n):\n    return reduce(operator.mul, list[1:n])\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    # your code goes here\n    arr_set = set(arr)\n    product = 1\n    for i in arr_set:\n        product *= i\n    return product\n\ndef find_Product_Iterative(arr,n):\n    # your code goes here\n    arr_set = set(arr)\n    product = 1\n    for i in arr:\n        product *= arr_set.count(i)\n    return product\n\ndef find_Product_Recursive(arr,n):\n    # your code goes here\n    arr_set = set(arr)\n    if len(arr_set) == 1:\n        return arr[0]\n    else:\n        product = arr[0] * find_Product_Recursive(arr[1:],n)\n    return product"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    return all(k in e for e in tuple_list)", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(lst, k):\n    \"\"\"\n    The function should return true if the given tuple list has all k elements.\n    Otherwise, the function should return false.\n\n    :param lst: A list of tuples\n    :param k: The number of elements the tuple list has to have\n    :return: True if the tuple list has all k elements. Otherwise, False\n    \"\"\"\n    return all([len(x) == k for x in lst])\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(input_tuple_list, k):\n    return all(len(el) == k for el in input_tuple_list)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(t, k):\n    return len(set(tuple(x) for x in t)) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuples, k):\n    if k > len(tuples[0]):\n        return False\n    tuples_list = []\n    for tup in tuples:\n        tuples_list += list(tup)\n    tuples_list.sort()\n    for i in range(1, len(tuples_list)):\n        if tuples_list[i] != tuples_list[i-1] + 1:\n            return False\n    return True", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuples, k):\n    return all([len(tuple) == k for tuple in tuples])\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(lst, k):\n    s = set(lst)\n    if k > len(s):\n        return False\n    for i in range(1,k):\n        if not s - set(s[i-1]):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples, k):\n    return len(set([tup[0] for tup in tuples])) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    def has_k_elements(i, tuple_list, k):\n        for j in range(len(tuple_list)):\n            if j != i:\n                if tuple_list[i] == tuple_list[j]:\n                    return False\n        return True\n\n    for i in range(len(tuple_list)):\n        if not has_k_elements(i, tuple_list, k):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef check_k_elements(t, k):\n    \"\"\"\n    Returns True if all elements in the tuple list have all the elements of the k-tuple\n    :param t: tuple list\n    :param k: k-tuple\n    :return: True if all elements in the tuple list have all the elements of the k-tuple, False otherwise\n    \"\"\"\n    if len(t) < k:\n        return False\n    d = defaultdict(list)\n    for tup in t:\n        for i in range(len(k)):\n            d[tup[i]].append(tup)\n    for key in d:\n        if len(d[key]) < len(k):\n            return False\n    return True"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(string_list):\n    filtered_string_list = []\n    for i in string_list:\n        result = []\n        for j in i:\n            if j.isalpha():\n                result.append(j)\n        filtered_string_list.append(''.join(result))\n    return filtered_string_list", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(list):\n    newlist = []\n    for string in list:\n        newlist.append(string.translate(None, \"0123456789\"))\n    return newlist\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(ls):\n    new_ls = []\n    for s in ls:\n        new_ls.append(''.join([c for c in s if not c.isdigit()]))\n    return new_ls\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(arr):\n    return [i.replace('0','').replace('1','').replace('2','').replace('3','').replace('4','').replace('5','').replace('6','').replace('7','').replace('8','').replace('9','') for i in arr]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(list_of_strings):\n    return [i for i in list_of_strings if not i.isdigit()]\n\n#TEST:", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return list(filter(lambda x: x.isalpha(), lst))\n\ndef is_empty(lst):\n    return len(lst) == 0\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(s):\n    res = []\n    for word in s:\n        res.append(''.join(filter(str.isdigit, word)))\n    return res\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(l):\n    return [w for w in l if not w.isdigit()]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(list):\n    \"\"\"\n    Remove all digits from a list of strings\n    :param list:\n    :return:\n    \"\"\"\n    new_list = []\n    for i in list:\n        new_list.append(i.replace('',''))\n    return new_list\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\n# +\ndef binomial_Coeff(n, k): \n    C = 1\n    i = 0\n    while (i < k):\n        C *= (n-i)\n        C /= (i+1)\n        i += 1\n    return C\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    count = 0\n    for i in range(n+1):\n        for j in range(k+1):\n            count = count + (i**j)\n    return count\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    return int(math.factorial(n)/(math.factorial(k)*math.factorial(n-k)))", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    return factorial(n)/(factorial(k)*factorial(n-k))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(m, n):\n    if n > m:\n        return 0\n    else:\n        return binomial(m+n, m) // binomial(n, m)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    \"\"\"\n    Function to find binomial co-efficient\n    Parameters:\n    n(int): number of trials\n    k(int): number of success\n    Returns:\n    list of all possible combinations\n    \"\"\"\n    binomial = []\n    for i in range(n+1):\n        binomial.append([combination(n,i),combination(k,i)])\n    return binomial[n-k+1]\n\ndef combination(n,k):\n    \"\"\"\n    Function to find all possible combinations\n    Parameters:\n    n(int): number of trials\n    k(int): number of success\n    Returns:\n    list of all possible combinations\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result *= n-i\n        result //= i + 1\n    return result\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,r):\n    return n!/(r!*(n-r)!)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    assert n >= k\n    c = 1\n    for i in range(k):\n        c = c*n/(i+1)\n    return c\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, r):\n\t\"\"\"\n\t\tFind the binomial coefficient: n!/(r!*(n-r)!)\n\t\"\"\"\n\treturn math.factorial(n) / (math.factorial(r) * math.factorial(n-r))\n\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, num):\n    \"\"\"\n    :param arr: input array\n    :param num: number to search\n    :return: number\n    \"\"\"\n    return sum(1 for i in arr if i == num)\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(lst, val):\n    return next(x for x in lst if lst.count(x) % 2)\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, element):\n    return arr[arr.count(element)%2]\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(array,k):\n\tcount = 0\n\tfor item in array:\n\t\tif item == k:\n\t\t\tcount += 1\n\tif count % 2 != 0:\n\t\treturn k\n\telse:\n\t\treturn None\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    odd_occur_elem = -1\n    for i in range(0, n):\n        if arr.count(arr[i])%2 != 0:\n            if odd_occur_elem == -1:\n                odd_occur_elem = arr[i]\n            else:\n                return -1\n    return odd_occur_elem", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count % 2 == 1:\n        return x\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(array, num):\n    count = 0\n    for i in array:\n        if i == num:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, num):\n    #write your code here\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n        if count%2 == 1:\n            return num\n    return None\n\n# assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(list, k):\n    #Your code here\n    odd = {}\n    for i in range(len(list)):\n        if list[i] in odd:\n            odd[list[i]] += 1\n        else:\n            odd[list[i]] = 1\n    for key in odd:\n        if odd[key]%2 == 1:\n            return key\n\n#assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(l,n):\n    if n not in l:\n        return -1\n    else:\n        l = list(dict.fromkeys(l))\n        return l[l.index(n)]\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    return sum(map(lambda x: 1 if x == string[-1] else 0, string))\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    result = 0\n    for i in range(len(string)-1):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                result += 1\n    return result\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    :param s: String to check\n    :return: Number of substrings with equal ends\n    \"\"\"\n    # Find length of the string\n    length = len(s)\n\n    # Initialize the counter\n    count = 0\n\n    # Iterate over all the substrings of the string\n    for i in range(length):\n        # Initialize current substring\n        sub_string = s[i]\n\n        # Iterate over remaining part of the string\n        for j in range(i+1, length):\n            # Add the substring to the counter if it has same ending characters\n            if s[j] == sub_string[-1]:\n                sub_string += s[j]\n                count += 1\n\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\nimport unittest\ndef count_Substring_With_Equal_Ends(string):\n\tcount = 0\n\tfor i in range(len(string)):\n\t\tfor j in range(i, len(string)):\n\t\t\tif string[i] == string[j]:\n\t\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\n#recursive function\ndef count_Substring_With_Equal_Ends(s):\n    def helper(i, j, count):\n        count += 1\n        if i == j:\n            return count\n        else:\n            return count_Substring_With_Equal_Ends(s[i:j]) if s[i:j][-1] == s[i:j][0] else 0\n    if len(s) == 1:\n        return 1\n    else:\n        return sum([helper(i, j, 0) for i in range(len(s)) for j in range(i+1, len(s))])\n\n#dp\ndef count_Substring_With_Equal_Ends(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(1, n):\n        for j in range(i, -1, -1):\n            if s[i] == s[j]:\n                if j == i:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[j+1][i-1] + 1\n    return sum([sum(x) for x in dp])\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    start = 0\n    count = 0\n    end = 0\n    while end < len(s):\n        if s[start] == s[end]:\n            count += 1\n            start += 1\n            end += 1\n        else:\n            start += 1\n            end += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    if str == \"\":\n        return 0\n    chars = list(str)\n    result = 0\n    for i in range(len(chars)):\n        if chars[i] != chars[-1]:\n            return result\n        result += 1\n    return result\n\n#count_Substring_With_Equal_Ends('aabb')\n#count_Substring_With_Equal_Ends('abcb')\n#count_Substring_With_Equal_Ends('ababa')\n#count_Substring_With_Equal_Ends('a')\n#count_Substring_With_Equal_Ends('')\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    if len(string) == 0:\n        return 0\n    substrings = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j, n+1):\n                if string[i] == string[j] and string[j] == string[k]:\n                    substrings += 1\n    return substrings", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(text):\n    temp_list = [\"\"]\n    for i in range(len(text)):\n        temp_list.append(\"\")\n        for j in range(i+1):\n            temp_list[i+1] += text[j]\n            temp_list[i+1] += text[i]\n    return len(temp_list)-2\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[len(str)-1] and str[i] == str[i+1]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef top_k(lst, k):\n    heap = []\n    for n in lst:\n        heapq.heappush(heap, n)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return [heap[0]] + top_k(lst, k - 1) if len(heap) >= k else []\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nimport heapq\n\n\ndef top_k_most_frequent(list_of_lists, k):\n    result = []\n    if not list_of_lists or not list_of_lists[0]:\n        return result\n\n    # init heap queue\n    hq = [(list_of_lists[0][0], list_of_lists[0][0], 0)]\n\n    # main process\n    for i in range(1, len(list_of_lists)):\n        for j in list_of_lists[i]:\n            if j in result:\n                heapq.heapreplace(hq, (j, hq[0][0], hq[0][1] + 1))\n            else:\n                heapq.heappush(hq, (j, hq[0][0], hq[0][1] + 1))\n        top_k = heapq.nlargest(k, hq)\n        result = [x[0] for x in top_k]\n    return result\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef topK(nums, k):\n    \"\"\"\n    :param nums: a list of sorted and distinct integers\n    :param k: the number of top integers\n    :return: a list of top k integers\n    \"\"\"\n    d = {}\n    for n in nums:\n        d[n] = d.get(n, 0) + 1\n    heap = []\n    for n, count in d.items():\n        if len(heap) < k:\n            heappush(heap, (count, n))\n        elif heap[0][0] < count:\n            heappop(heap)\n            heappush(heap, (count, n))\n    return [n for _, n in heap]\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef top_k_frequent(nums, k):\n    d = {}\n    for x in nums:\n        d[x] = d.get(x, 0) + 1\n\n    hq = []\n    for x, v in d.items():\n        heappush(hq, (-v, x))\n        if len(hq) > k:\n            heappop(hq)\n\n    return [x for _, x in hq]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import nlargest\ndef top_k_frequent_ints(L, k):\n    '''\n    L: lists of distinct integers\n    k: number of integers to find\n    return list of top k integers\n    '''\n    # your code here\n    return nlargest(k, L, key=L.count)", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom heapq import *", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nimport heapq\ndef heap_topk(a_list, k):\n    if not a_list:\n        return []\n    count = {}\n    for num in a_list:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    heap = []\n    for num, count in count.items():\n        heapq.heappush(heap, (-count, num))\n    topk = []\n    for i in range(k):\n        _, num = heapq.heappop(heap)\n        topk.append(num)\n    return topk\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef heap_queue(arr,k):\n    heap = list()\n    index = 0\n    max_heap = 0\n    min_heap = 0\n    for arr_list in arr:\n        for item in arr_list:\n            index += 1\n            heapq.heappush(heap,item)\n            max_heap = max(max_heap, len(heap))\n            if len(heap) > k:\n                heapq.heappop(heap)\n                min_heap = min(min_heap, len(heap))\n    return heap[0:k] if index >= max_heap else heap[0:k+1-min_heap]\n\ndef heap_queue2(arr,k):\n    heap = list()\n    index = 0\n    max_heap = 0\n    min_heap = 0\n    for arr_list in arr:\n        for item in arr_list:\n            index += 1\n            heapq.heappush(heap,item)\n            max_heap = max(max_heap, len(heap))\n            if len(heap) > k:\n                heapq.heappop(heap)\n                min_heap = min(min_heap, len(heap))\n    return heap[0:k] if index >= max_heap else heap[0:k+1-min_heap]\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\n# Time:  O(n * log(k))\n# Space: O(n)", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    factors = set()\n    for i in range(2, num):\n        while num % i == 0:\n            factors.add(i)\n            num = num // i\n    return max(factors)\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    list = []\n    while num > 1:\n        for i in range(2, num+1):\n            if num % i == 0:\n                list.append(i)\n                num //= i\n        if num == 1:\n            break\n    return max(list)\n\ndef test_max_Prime_Factors():\n    assert max_Prime_Factors(15) == 5", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    list_Prime_Factors = []\n    while num != 1:\n        for Prime_factor in range(2,num):\n            if num % Prime_factor == 0:\n                list_Prime_Factors.append(Prime_factor)\n        num = num//Prime_factor\n    return max(list_Prime_Factors)\n\n#assert max_Prime_Factors(15) == 5\n#assert max_Prime_Factors(12) == 3\n#assert max_Prime_Factors(1) == 1\n#assert max_Prime_Factors(4) == 2\n#assert max_Prime_Factors(3) == 3\n#assert max_Prime_Factors(10) == 5\n#assert max_Prime_Factors(14) == 7\n#assert max_Prime_Factors(21) == 3\n#assert max_Prime_Factors(20) == 4\n#assert max_Prime_Factors(49) == 7\n#assert max_Prime_Factors(130) == 3\n#assert max_Prime_Factors(140) == 5\n#assert max_Prime_Factors(168) == 3\n#assert max_Prime_Factors(180) == 2\n#assert max_Prime_Factors(192) == 2\n#assert max_Prime_Factors(200) == 4\n#assert max_Prime_Factors(232) == 3\n#assert max_Prime_Factors(240) == 2\n#assert max_Prime_Factors(252) == 3\n#assert max_Prime_Factors(270) == 3\n#assert max_Prime_Factors(300) == 2\n#assert max_Prime_Factors(312) == 3\n#assert max_Prime_Factors(360) == 2\n#assert max_Prime_Factors(369) == 7\n#assert max_Prime_Factors(480) == 2\n#assert max_Prime_Factors(50", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Args:\n        n (int): a positive integer\n    Returns:\n        maxPrimeFactor (int): the largest prime factor of the number n\n    \"\"\"\n    maxPrimeFactor = 1\n    while n % maxPrimeFactor == 0:\n        maxPrimeFactor = n\n        n = n // maxPrimeFactor\n    return maxPrimeFactor\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\nfrom math import sqrt\ndef max_Prime_Factors(num):\n    i=2\n    factors=[]\n    while i<num:\n        while num%i==0:\n            num=num//i\n            factors.append(i)\n        i+=1\n    if num>1:\n        factors.append(num)\n    return max(factors)\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    factors = []\n    while n%2==0:\n        n /= 2\n        factors.append(2)\n    for i in range(3, int(n**0.5)+1, 2):\n        while n%i==0:\n            n /= i\n            factors.append(i)\n    if n>2:\n        factors.append(n)\n    return factors[-1]\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n\n    # To store max Prime factor of n\n    maximum_Prime_factor = 0\n\n    # To store all prime factors of n\n    Prime_factor_list = []\n\n    # Finding all prime factors\n    for Prime_factor in range(1,n+1):\n\n        # To check if n is divisible by Prime_factor or not\n        if(n%Prime_factor==0):\n\n            # To store current Prime factor\n            Prime_factor_list.append(Prime_factor)\n\n            # To store maximum Prime factor\n            if(Prime_factor > maximum_Prime_factor):\n\n                # To store maximum Prime factor\n                maximum_Prime_factor = Prime_factor\n\n    # To return the maximum Prime factor\n    return maximum_Prime_factor\n\n# To test above function", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(num):\n    max_prime = 1\n    for i in range(2,num):\n        if num%i == 0:\n            if i > max_prime:\n                max_prime = i\n    return max_prime\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    i = 2\n    max_Prime_Factors = 1\n    while i**2 <= n:\n        while n % i == 0:\n            max_Prime_Factors = i\n            n = n / i\n        i = i + 1\n    if n > 1:\n        max_Prime_Factors = n\n    return max_Prime_Factors\n\n\ndef prime_factors(n):\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    prime_factors.sort()\n    return prime_factors\n\n\ndef largest_prime_factors(n):\n    prime_factors = prime_factors(n)\n    max_Prime_Factors = prime_factors[0]\n    for i in prime_factors:\n        if i > max_Prime_Factors:\n            max_Prime_Factors = i\n    return max_Prime_Factors\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(number):\n    prime_factors = []\n    while number > 1:\n        for i in range(2, number):\n            if number % i == 0:\n                number //= i\n                prime_factors.append(i)\n                break\n    return prime_factors\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(number):\n    return bin(number)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n# Solution\n\ndef decimal_To_Binary(number):\n    binary = \"\"\n    while(number):\n        binary = str(number % 2) + binary\n        number = number // 2\n    return binary\n\n# Tests\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal_number):\n\tbinary_number = ''\n\twhile decimal_number:\n\t\tremainder = decimal_number % 2\n\t\tbinary_number = str(remainder) + binary_number\n\t\tdecimal_number = decimal_number / 2\n\treturn binary_number\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(number):\n    print \"the binary of {0} is : {1}\".format(number,bin(number))\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_to_binary(num):\n    binary_num = \"\"\n    while num > 0:\n        binary_num = str(num%2) + binary_num\n        num = num // 2\n    return binary_num\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(x):\n    return bin(x)", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(number):\n    number_as_string = str(number)\n    # return \"1\" * number\n    number_of_zeros = len(number_as_string) - 1\n    return int(str(bin(number))[2:][number_of_zeros::-1])\n\n# assert decimal_To_Binary(10) == 1010\n# assert decimal_To_Binary(11) == 1011\n# assert decimal_To_Binary(12) == 1100\n# assert decimal_To_Binary(13) == 1101\n# assert decimal_To_Binary(14) == 1110\n# assert decimal_To_Binary(15) == 1111\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(number):\n    Binary = ''\n    while number > 0:\n        Binary = str(number % 2) + Binary\n        number = number // 2\n    return Binary\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    else:\n        remainder = n % 2\n        n = n / 2\n        n = n + remainder\n        return decimal_To_Binary(n)\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(nums, last_num):\n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == last_num:\n            return last_num + 1\n    return last_num + 1\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(l,n):\n    if n in l:\n        return 0\n    else:\n        return n+1\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(a,n):\n    if (len(a)!=n+1):\n        raise ValueError('Number of elements does not match')\n    for x in range(n):\n        if a[x+1]!=x+1:\n            return x+1\n    return n+1", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\nfrom typing import List\n\n\ndef find_missing(arr: List[int], target: int) -> int:\n    \"\"\"\n    :param arr: input array\n    :param target: target number\n    :return: missing number\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == mid:\n            left = mid + 1\n        elif arr[mid] < mid:\n            right = mid\n        else:\n            left = mid + 1\n\n    if left == len(arr) or arr[left] != left:\n        return target\n    return left + 1\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,n):\n\tl = 0\n\tr = n-1\n\twhile(l<=r):\n\t\tmid = l + (r-l)//2\n\t\tif(mid not in arr):\n\t\t\tr = mid-1\n\t\telse:\n\t\t\tl = mid+1\n\treturn l\n\narr = [1,2,3,5]\nn = len(arr)\nx = find_missing(arr,n)", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(a,n):\n    if n in a:\n        return None\n    else:\n        for i in range(0,len(a)):\n            if a[i] < n:\n                return n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, x):\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        m = (l+r)//2\n        if arr[m] < x:\n            l = m + 1\n        elif arr[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n    return x - arr[r - 1] if r > 0 else x - arr[l]", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(seq, target):\n  last_num = seq[-1]\n  first_num = seq[0]\n  if target in seq:\n    return -1\n  for i in range(first_num, last_num+1):\n    if i not in seq:\n      return i\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n    for i in range(n):\n        if i not in arr:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while(start <= end):\n        mid = (start + end) / 2\n        if arr[mid] == mid:\n            end = mid - 1\n        elif arr[mid] < mid:\n            end = mid - 1\n        elif arr[mid] > mid:\n            start = mid + 1\n    return target - start - 1\n\ndef test():\n    arr = [1,2,3,5]\n    target = 4\n    result = find_missing(arr, target)\n    print result, target == result\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    num = 0\n    while True:\n        if num**2 > n:\n            return num\n        num += 1\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n: int) -> int:\n    \"\"\"Finds the n-th rectangular number.\n\n    Arguments:\n        n {int} -- The number of rectangular number to find\n\n    Returns:\n        int -- The n-th rectangular number\n    \"\"\"\n\n    # TODO: replace the value of n with the value of argument n\n    n = 20\n    ans = 0\n    for i in range(n):\n        ans += i\n\n    return ans", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    result = 1\n    for i in range(n):\n        result *= (i+1)\n    return result\n\ndef find_rect_num2(n):\n    result = 1\n    for i in range(n):\n        result *= (i+1)\n    return result\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    if n <= 0:\n        return 0\n    else:\n        return n * (n + 1) // 2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n: int) -> int:\n    if n==1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return find_rect_num(n-2) + find_rect_num(n-1)\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    '''\n    This function uses the pattern of rectangular numbers.\n    '''\n    return n * (n + 1) // 2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n*(n+1)\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return (n * (n + 1)) // 2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    result = 0\n    while result < n:\n        result = result + n\n    return result\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    result = 0\n    for i in range(n):\n        result += 1 * i\n    return result\n\n# assert find_rect_num(5) == 30\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(a, b, n):\n    try:\n        a = a.index(']') + 1\n        b = b.index(']') + 1\n    except ValueError:\n        pass\n    d = a + b - 1\n    while True:\n        n -= d\n        if n >= 0:\n            d += 1\n        else:\n            return str(n)\n\ndef find_Nth_Digit_with_division(a, b, n):\n    try:\n        a = a.index(']') + 1\n        b = b.index(']') + 1\n    except ValueError:\n        pass\n    d = a + b - 1\n    while True:\n        n -= d\n        if n >= 0:\n            d += 1\n        else:\n            return str(n)\n\ndef find_Nth_Digit_with_remainder(a, b, n):\n    try:\n        a = a.index(']') + 1\n        b = b.index(']') + 1\n    except ValueError:\n        pass\n    d = a + b - 1\n    while True:\n        n -= d\n        if n >= 0:\n            d += 1\n        else:\n            return str(n)\n\ndef find_Nth_Digit_with_remainder_and_division(a, b, n):\n    try:\n        a = a.index(']') + 1\n        b = b.index(']') + 1\n    except ValueError:\n        pass\n    d = a + b - 1\n    while True:\n        n -= d\n        if n >= 0:\n            d += 1\n        else:\n            return str(n)\n\ndef find_Nth_Digit_with_division_and_remainder(a, b, n):\n    try:\n        a = a.index(']') + 1\n        b = b.index(']') + 1\n    except ValueError:\n        pass\n    d = a + b - 1\n    while True:\n        n -= d\n        if n >= 0:\n            d += 1\n        else:\n            return str(n)\n\n#Tests", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1,num2,N):\n    #base case\n    if N == 0:\n        return 0\n\n    #if num1 > num2:\n    #    num1,num2 = num2,num1\n\n    #save the last digit of num2\n    digit_of_num2 = num2%10\n    num2 = num2//10\n\n    #save the last digit of num1\n    digit_of_num1 = num1%10\n    num1 = num1//10\n\n    #if N == 1:\n    #    return digit_of_num1\n\n    N -= 1\n\n    #if the last digit of num2 is larger, increase num1 by one digit\n    if digit_of_num2 > digit_of_num1:\n        num1 += 1\n\n    #return the nth digit of num1/num2\n    return find_Nth_Digit(num1,num2,N)", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(N, A, B):\n    \"\"\"\n    Find the Nth digit of the proper fraction between two given numbers\n    :param N: integer to find the digit of the proper fraction\n    :param A: numerator of the proper fraction\n    :param B: denominator of the proper fraction\n    :return: the Nth digit of the proper fraction\n    \"\"\"\n    temp = (A*1.0)/(B*1.0)\n    temp = temp - int(temp)\n    return int(N * temp)", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(n1,n2,k):\n    div = n1*n2\n    dig = 1\n    nth_digit = 0\n    while dig < k:\n        dig = div % 10\n        div = div // 10\n        nth_digit = nth_digit*10 + dig\n    return nth_digit\n\n\ndef find_Nth_Digit2(n1,n2,k):\n    div = n1*n2\n    dig = 1\n    while dig < k:\n        dig = div % 10\n        div = div // 10\n    return dig\n\n\ndef find_Nth_Digit3(n1,n2,k):\n    div = n1*n2\n    dig = 1\n    while dig < k:\n        dig = div % 10\n        div = div // 10\n    return int(str(dig)[::-1])\n\n\ndef find_Nth_Digit4(n1,n2,k):\n    n3 = n1*n2\n    i = 0\n    while n3 >= k:\n        n3 //= 10\n        i += 1\n    return n3\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(a,b,n):\n    # the purpose of this function is to find the nth digit in the proper fraction of two given numbers.\n    # this is a tricky problem which involves bit manipulation and can be solved using modular arithmetic.\n    # for the given numbers, the fractional part of the value is 0.125, so the result will be 5.\n    # the trick is to convert both the numerator and denominator into binary,\n    # then split the binary representation of the numerator into the chunks of 4 bits,\n    # then add them all together to get the answer.\n    # the result will be n-1, since the first digit is 0 and we are counting from 1.\n    # so, we have to multiply the result by 4 to get the nth digit.\n\n    # check if the parameters are integers\n    assert isinstance(a,int) and isinstance(b,int)\n    # check if the given value is an integer\n    assert isinstance(n,int)\n\n    # find the binary representation of both the numerator and denominator of the given fractional number.\n    bin_a = bin(a)[2:]\n    bin_b = bin(b)[2:]\n\n    # split the binary representation of the numerator into the chunks of 4 bits\n    chunks = [bin_a[x:x+4] for x in range(0,len(bin_a),4)]\n\n    # initialize a variable to store the sum of all the chunks\n    ans = 0\n\n    # add all the chunks together\n    for chunk in chunks:\n        # convert the chunk to an integer\n        chunk = int(chunk,2)\n        # add the chunk to the overall sum\n        ans += chunk\n\n    # multiply the result by 4 to get the nth digit\n    ans = ans*4\n\n    # return the result\n    return ans % 10\n\n# assert", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\n# your code here\ndef find_Nth_Digit(numerator, denominator, n):\n    \"\"\"This function returns the nth digit in the proper fraction of two given numbers\"\"\"\n    numerator, denominator = int(numerator), int(denominator)\n    while True:\n        if n == 0:\n            return numerator\n        if n % denominator == 0:\n            numerator, denominator = numerator // denominator, numerator % denominator\n            n = n // denominator\n        else:\n            numerator = numerator // denominator\n            n = n - 1\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1, num2, n):\n    lcm = num1 * num2 // gcd(num1, num2)\n    num1 = num1 * lcm // num2\n    num2 = lcm\n    res = 0\n    while n > 0:\n        n -= 1\n        res = res * 10 + (num2 // num1)\n        num1, num2 = num2, num1\n    return res\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1, num2, N):\n    digit = 0\n    # convert the given numbers into a string and add .0 to num2\n    num2 = str(num2) + \".0\"\n    # the length of num2 is always 2\n    num2_len = len(num2)\n    # iterate through each digit in num1 and add the digits to the num2 string\n    for i in range(num1_len):\n        digit += int(num1[i]) * 10 ** (num1_len - 1 - i)\n    digit += int(num2[0])\n    # round the digit value\n    digit = int(round(digit))\n    # convert the digit to a string\n    digit_str = str(digit)\n    # convert the string to a list of characters\n    digit_chars = list(digit_str)\n    # convert the list to a string\n    digit_str = ''.join(digit_chars)\n    # return the nth character in the string\n    return digit_str[N - 1]\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n    \"\"\"\n    find the nth digit in the proper fraction of two given numbers\n    \"\"\"\n    num1 = str(num1)\n    num2 = str(num2)\n    n = str(n)\n    num1_list = list(num1)\n    num2_list = list(num2)\n    result = \"\"\n    i = 0\n    for j in range(len(n)):\n        result += num1_list[i] + num2_list[i]\n        if i == len(num1_list) -1:\n            i = 0\n        else:\n            i += 1\n    return result[int(n)]\n\ndef test_function(test_case):\n    num1 = test_case[0]\n    num2 = test_case[1]\n    n = test_case[2]\n    if find_Nth_Digit(num1, num2, n) == test_case[3]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_cases = [(1, 2, 1, 5),\n              (1234, 567, 5, 5),\n              (1234, 567, 10, 2),\n              (1234, 567, 100, 6),\n              (1234, 567, 200, 9),\n              (1234, 567, 500, 3),\n              (1234, 567, 1000, 9),\n              (1234, 567, 2000, 9),\n              (1234, 567, 5000, 8),\n              (1234, 567, 10000, 2),\n              (1234, 567, 20000, 5),\n              (1234, 567, 50000,", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(n,p,q):\n    if (n%q == 0):\n        return (n/q)\n    elif (n < q):\n        return 0\n    else:\n        return find_Nth_Digit(n/q,q,p)\n\n\n# -\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    \"\"\"\n    Returns a sorted version of the mixed list.\n    >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    \"\"\"\n    if type(lst) == list:\n        lst.sort()\n        return lst\n    else:\n        return lst\n\ndef test_sort_mixed_list():\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(my_list):\n    my_list.sort()\n    return my_list\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    def compare(a,b):\n        if isinstance(a,int) and isinstance(b,int):\n            return a - b\n        elif isinstance(a,str) and isinstance(b,str):\n            return a.lower() > b.lower()\n        else:\n            raise ValueError\n    return sorted(lst,key=lambda x: compare(x[0],x[1]), reverse=True)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    l = list(mixed_list)\n    l.sort()\n    return l", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(list_):\n    \"\"\"sort_mixed_list(list_) -> list_\n        Sorts a given mixed list of integers and strings\n    Args:\n        list_: list\n    Returns:\n        list_: sorted list\n    \"\"\"\n    int_list = [x for x in list_ if isinstance(x, int)]\n    str_list = [x for x in list_ if isinstance(x, str)]\n    str_list.sort()\n    int_list.sort()\n    sorted_list = int_list + str_list\n    return sorted_list", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(list_to_sort):\n    sorted_list = sorted(list_to_sort, key=lambda x: x.lower())\n    return sorted_list\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\n# coding: utf-8\ndef sort_mixed_list(in_list):\n    new_list = []\n    for item in in_list:\n        if type(item) is int:\n            new_list.append(item)\n        elif type(item) is str:\n            new_list.append(item)\n        else:\n            new_list.append(item)\n    new_list.sort()\n    return new_list\n\n# print(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Sort a given mixed list of integers and strings.\n\n    Parameters\n    ----------\n    mixed_list : list\n        A list containing mixed integers and strings\n\n    Returns\n    -------\n    sorted_list : list\n        A list sorted by its type, then alphabetically.\n\n    Notes\n    -----\n    - The second condition of the `sort()` method is ignored if the list is already sorted.\n    - The function is case sensitive.\n\n    Examples\n    --------\n    >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    \"\"\"\n    return sorted(mixed_list, key=type, reverse=True) # sorts by type, then alphabetically\n\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(list):\n    result = 0\n    for element in list:\n        if element % 2 == 0:\n            result += 1\n        else:\n            result -= 1\n    return result", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(num):\n    count_evens = 0\n    count_odds = 0\n    for i in num:\n        if i%2==0:\n            count_evens+=1\n        else:\n            count_odds+=1\n    return count_evens/count_odds\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(number_list):\n    even_list = [i for i in number_list if i%2 == 0]\n    odd_list = [i for i in number_list if i%2 == 1]\n    return odd_list[0] / even_list[0]\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(l):\n    even = 0\n    odd = 0\n    for i in l:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return even//odd\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    print(\"Dividing Even and Odd numbers\")\n    print(\"The even and odd numbers are:\")\n    for i in lst:\n        if i%2==0:\n            print(i)\n        else:\n            print(i)\n    print(\"The number of even numbers are:\",len(lst[lst%2==0]))\n    print(\"The number of odd numbers are:\",len(lst[lst%2!=0]))\n    return (lst[lst%2==0],lst[lst%2!=0])\n\ndef main():\n    lst=[1,3,5,7,4,1,6,8]\n    div_even_odd(lst)", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(arr):\n    even_div = 0\n    odd_div = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_div += 1\n        else:\n            odd_div += 1\n    return even_div, odd_div\n\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    evens, odds = [], []\n    for i in lst:\n        if i%2==0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return len(evens) / len(odds)\n    ", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    \"\"\"\n    Division of even and odd numbers in a list\n    \"\"\"\n    evens = []\n    odds = []\n    for number in lst:\n        if number % 2 == 0:\n            evens.append(number)\n        else:\n            odds.append(number)\n    return len(evens)/len(odds)\n\n\ndef test_div_even_odd():\n    assert div_even_odd([1,3,5,7,4,1,6,8]) == 4\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(num_list):\n    div=0\n    even_num=0\n    odd_num=0\n    for i in num_list:\n        if i%2==0:\n            even_num=even_num+1\n        else:\n            odd_num=odd_num+1\n    if odd_num==0:\n        div=0\n    elif even_num==0:\n        div=0\n    else:\n        div=odd_num/even_num\n    return div\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(nums):\n    count_even=0\n    count_odd=0\n    for num in nums:\n        if num%2==0:\n            count_even+=1\n        else:\n            count_odd+=1\n    return count_even/count_odd\n\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(s):\n    new_s = ''\n    s = list(s)\n    s.sort(key=lambda x: int(x))\n    for i in range(0, len(s)-1):\n        if s[i] == s[i+1]:\n            return 'False'\n        new_s += s[i]\n    new_s += s[-1]\n    return new_s\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    \"\"\"\n    check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\n    :param string: string\n    :return: rearranged string\n    \"\"\"\n    l = list(string)\n    flag = 0\n    for i in range(len(l)):\n        if l[i+1] == l[i]:\n            flag = 1\n            break\n    if flag == 0:\n        return string\n    else:\n        for i in range(len(l)):\n            if i < len(l)-1 and l[i+1] == l[i]:\n                l[i+1],l[i] = l[i],l[i+1]\n        return ''.join(l)", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    letters = []\n    for letter in string:\n        letters.append(letter)\n    if letters[0]==letters[1]:\n        letters[0] = 'x'\n        letters[1] = 'y'\n        return letters\n    else:\n        return letters\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(input_string):\n    dct = dict()\n    for i in input_string:\n        if i not in dct:\n            dct[i] = 1\n        else:\n            dct[i] += 1\n    odd = 0\n    for i in dct.keys():\n        if dct[i] % 2 == 0:\n            odd += 1\n    if odd > 1:\n        return None\n    else:\n        for i in dct.keys():\n            if dct[i] > 1:\n                dct[i] -= 1\n                return i + rearange_string(''.join(i for i in input_string if i != i)[1:])", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    if string.isalpha():\n        if len(string)>=2:\n            s=list(string)\n            if s[0]!=s[1]:\n                return string\n            else:\n                for i in range(len(s)):\n                    if s[i]==s[i+1]:\n                        break\n                else:\n                    return 'None'\n                for j in range(len(s)-1,i,-1):\n                    if s[i]==s[j]:\n                        return 'None'\n                else:\n                    return s[:i]+s[i+1:]+''.join(s[i:])\n    else:\n        return 'None'\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(s):\n    chars = set(s)\n    for i, c in enumerate(s):\n        if i+1 < len(s) and chars.remove(c) == False:\n            return 'not possible'\n    return s\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    '''\n    This function checks if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    :param string:\n    :return: boolean\n    '''\n    return string[i+1]!=string[i] for i in range(len(string)-1)", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(s):\n    if len(s)<2:\n        return None\n    result = ''\n    for i in s:\n        for j in s[s.index(i)+1:]:\n            if i!=j:\n                result = result + i + j\n    if s == result:\n        return None\n    else:\n        return s\n\n# assert rearange_string(\"aab\")==('aba')\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(a_string):\n    \"\"\"Return True if letters of a_string can be rearranged so that two letters that are adjacent to each other are different.\"\"\"\n    if len(a_string)<=1:\n        return True\n    else:\n        for i in range(len(a_string)-1):\n            if a_string[i]==a_string[i+1]:\n                return False\n    return True", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    arr = []\n    for i in string:\n        if i in arr:\n            arr.remove(i)\n        else:\n            arr.append(i)\n    return ''.join(arr)\n"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nimport collections\n\ndef freq_element(lst):\n    c = collections.Counter(x for l in lst for x in l)\n    return c\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(arr):\n    f=Counter()\n    for x in arr:\n        for y in x:\n            f[y]+=1\n    return f", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(l):\n    count={}\n    for x in l:\n        for a in x:\n            if(a in count):\n                count[a]+=1\n            else:\n                count[a]=1\n    return count\n\nl = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(lists):\n    frequencies = collections.Counter()\n    for l in lists:\n        frequencies.update(l)\n    return frequencies\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(matrix):\n    # your code here\n    return {e:matrix.count(e) for e in set(chain(*matrix))}\n\n\n# TEST CASES", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\n# SOLUTION:\n\nfrom collections import Counter\ndef freq_element(l):\n    counter = Counter()\n    for lst in l:\n        counter.update(lst)\n    return counter\n\n# TEST CASES:", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nimport collections\n\n\ndef freq_element(arr):\n    a = collections.Counter()\n    for x in arr:\n        for x in x:\n            a[x] += 1\n    return a\n\n\ndef freq_element_fast(arr):\n    a = collections.Counter()\n    for x in arr:\n        for x in x:\n            a[x] += 1\n    return dict(a)", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\n# def freq_element(input):\n#     result = {}\n#     for sublist in input:\n#         for element in sublist:\n#             if element in result:\n#                 result[element] += 1\n#             else:\n#                 result[element] = 1\n#     return result\n\ndef freq_element(input):\n    return {element: input.count(element) for element in set(element for sublist in input for element in sublist)}\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(data):\n    from collections import Counter\n    return Counter(y for l in data for y in l)\n\n#solution for the problem", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(data):\n    dict = Counter()\n    for list in data:\n        for num in list:\n            dict[num] += 1\n    return dict\n\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(nums):\n\treturn list(filter(lambda num: num%2==0, nums))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    result = list(filter(lambda x: x%2==0, numbers))\n    return result", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(list):\n    #return [x for x in list if x%2==0]\n    return list(filter(lambda x: x%2==0, list))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(arr):\n    filtered = []\n    for num in arr:\n        if num % 2 == 0:\n            filtered.append(num)\n    return filtered\n\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\nnumbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(mylist):\n    res = []\n    for item in mylist:\n        if item % 2 == 0:\n            res.append(item)\n    return res", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return list(filter(lambda n: n%2==0, numbers))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x%2==0,lst))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\n# Your code here\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x%2==0, lst))\n\n# + [markdown] id=\"9x9xw8_fi65I\"\n# 3.\n#\n# Write a function to filter even numbers using list comprehensions.\n# assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n#\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"X0aHo6rFizt_\" outputId=\"a36e4218-4860-461e-8c11-d6f3d70a8976\""], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    sum_ = 0\n    d = {}\n    for i in range(0,len(arr)):\n        if arr[i] in d:\n            sum_ += arr[i] * d[arr[i]]\n            del d[arr[i]]\n        else:\n            d[arr[i]] = 1\n    for i in d:\n        sum_ += i * d[i]\n    return sum_\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_sum(array, sum):\n    count = 0\n    for x in array:\n        count += sum - x\n    return count", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,N):\n    count = 0\n    arr.sort()\n    for i in range(0,len(arr)-1):\n        if i < len(arr)-1 and arr[i] == arr[i+1]:\n            count += arr[i]\n    return count\n\narr = [1,2,3,1,1,4,5,6]\nN = 8\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, n):\n    # Your code goes here\n    arr_set = set(arr)\n    sum = 0\n    for i in arr_set:\n        if arr.count(i) > 1:\n            sum += i*arr.count(i)\n    return sum\n\ndef find_sum(arr, n):\n    # Your code goes here\n    res = 0\n    for x in arr:\n        for y in arr:\n            if x == y:\n                res += x * arr.count(x)\n    return res\n\ndef find_Sum(arr, n):\n    # Your code goes here\n    res = 0\n    for x in arr:\n        for y in arr:\n            if x == y:\n                res += x * arr.count(x)\n    return res\n\ndef find_sum(arr, n):\n    # Your code goes here\n    res = 0\n    for i in arr:\n        for j in arr:\n            if i == j:\n                res += i * arr.count(i)\n    return res\n\ndef find_Sum(arr, n):\n    # Your code goes here\n    dict = {}\n    for i in arr:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    res = 0\n    for i in dict:\n        if dict[i] > 1:\n            res += i * dict[i]\n    return res\n\ndef find_sum(arr, n):\n    # Your code goes here\n    count = 0\n    for i in arr:\n        if arr.count(i) > 1:\n            count += i * arr.count(i)\n    return count\n\ndef find_Sum(arr, n):\n    # Your code goes here\n    sum = 0\n    arr = list(set(arr))\n    for i in arr:\n        sum += i*arr.count(i)\n    return sum\n\ndef find_Sum(arr, n):\n    # Your code goes here\n    arr = list(set(arr))\n    sum = 0\n    for i in arr:\n        sum += i * arr.count(i", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, k):\n    if k not in arr:\n        return -1\n    temp = arr[:]\n    ret = 0\n    for num in temp:\n        if num == k:\n            ret += 1\n    return ret\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(a,n):\n    count = 0\n    hashmap = {}\n    for i in a:\n        if i in hashmap:\n            hashmap[i] = hashmap[i] + 1\n        else:\n            hashmap[i] = 1\n    for key in hashmap:\n        if hashmap[key] > 1:\n            count = count + hashmap[key]\n    return count", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(lst, sum):\n    lst.sort()\n    if lst[-1] != sum:\n        return 0\n    else:\n        return sum - lst[0] * (len(lst) - 1)\n\ndef find_Sum_2(lst, sum):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return sum - d.get(sum, 0) * (len(lst) - len(d))\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, sum):\n    sum_dict = {}\n    for i in arr:\n        if i not in sum_dict:\n            sum_dict[i] = 1\n        else:\n            sum_dict[i] += 1\n    print(sum_dict)\n    print(sum_dict.get(sum,0))\n    return sum_dict.get(sum,0)\n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, n):\n    arr.sort()\n    temp = {}\n    for i in range(n):\n        if arr[i] in temp:\n            temp[arr[i]] += 1\n        else:\n            temp[arr[i]] = 1\n\n    return sum(val for val in temp.values() if val > 1)\n\n# assert find_Sum([1,2,3,1,1,4,5,6],8) == 3"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    pattern = re.compile(r'_+([a-z]+)_+')\n    m = pattern.search(text)\n    if m:\n        return 'Found a match!'\n    else:\n        return 'No match.'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\n# Complete the text_match function below.\ndef text_match(text):\n    \"\"\"\n    This function will find the sequence of lowercase letters joined with an underscore using regex.\n    :param text: A string representing text.\n    :return: A string with the number of lowercase letters found in text, or \"Not found\" if no match was found.\n    \"\"\"\n    return 'Found a match!' if re.findall(r'[a-z]+_',text) else 'Not found'", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ntext = \"aab_cbbbc\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    match = re.search(r'\\b[a-z_]+\\b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'No match found.'", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    pattern = r\"(\\w+)\"\n    match = re.search(pattern, text)\n    if match:\n        return f'Found a match! \"{match.group(1)}\"'\n    else:\n        return \"Not found\"\n\n\n# test", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ntext = input(\"Enter text:\")\n\ntext_match = re.search(r'([a-z_]+)([a-z_]+)', text)\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    if re.search(r'^[\\w\\s]*[_]*[\\w\\s]*$', text):\n        return 'Found a match!'\n    else:\n        return 'No match.'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(txt):\n    # your code here\n    regex = r'_[a-z][a-z]_'\n    if re.search(regex,txt):\n        return \"Found a match!\"\n    else:\n        return \"No match.\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    result = re.search(r\"(?i)\\w+_\\w+\", text)\n    if result:\n        return \"Found a match!\"\n    return \"No match!\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    \"\"\"Return True if there is a sequence of lowercase letters joined with an underscore in text.\"\"\"\n    match = re.search(r\"[a-z_]{2,}\", text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'No match.'"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    if text[:5] == \"python\":\n        return(\"Matched!\")\n    return(\"Not matched!\")\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\nimport re\n\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n\tpattern = r'^ python'\n\tif re.search(pattern,string):\n\t\treturn (\"matched\")\n\treturn (\"Not matched!\")\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    if string.startswith('python'):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if text.startswith('py'):\n        return 'matched'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    \"\"\"\n    :param string: a string\n    :return: a string with a match at the beginning of the string\n    \"\"\"\n    if string.startswith(\"python\"):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(s):\n    for word in s.split():\n        if word.startswith(\"python\"):\n            return \"Matched!\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\nimport re\n\ndef text_match_string(text):\n    if re.match('^Python', text):\n        return \"Matched!\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if text.startswith('python'):\n        return 'matched!'\n    else:\n        return 'Not matched!'\n\ntext_match_string('python')\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n  if len(arr) == 0:\n    return 0\n  if len(arr) == 1:\n    return arr[0]\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      if arr[i]%arr[j] == 0:\n        return arr[i]*arr[j]\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    else:\n        return arr[0] if arr[0] > arr[1] else get_gcd(arr[1:])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    min_num = min(arr)\n    max_num = max(arr)\n    for i in range(min_num, max_num + 1):\n        if all(x % i == 0 for x in arr):\n            return i\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if arr == []:\n        return 0\n    if arr[0] == arr[1]:\n        return arr[0]\n    else:\n        return get_gcd(arr[1:])", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        arr.sort()\n        while len(arr) > 1:\n            if arr[0] % arr[1] == 0:\n                arr.remove(arr[1])\n            else:\n                arr.remove(arr[0])\n        return arr[0]\n\n# assert get_gcd([4, 2, 6, 12, 16]) == 2\n# assert get_gcd([2, 4, 6, 8, 16, 16, 8, 4, 2]) == 2\n# assert get_gcd([4, 2, 6, 8, 16, 16, 8, 4, 2]) == 2\n# assert get_gcd([1, 2, 2, 4, 4, 4, 4]) == 1\n# assert get_gcd([1, 2, 2, 4, 4, 4, 4, 4, 2, 1]) == 1\n# assert get_gcd([1, 2, 4, 8, 4, 2, 1]) == 1\n# assert get_gcd([2, 2, 2]) == 2\n# assert get_gcd([4, 12, 3, 12, 4, 12]) == 12\n# assert get_gcd([12, 4, 12, 4, 12, 4, 3, 12, 4, 12, 4, 12]) == 12\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(nums):\n    return reduce(gcd_reducer, nums)\n\n\ndef gcd_reducer(x, y):\n    if x == 0:\n        return y\n    return gcd(x, y)\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom functools import reduce\n\n\ndef get_gcd(arr):\n    return reduce(lambda x, y: x * y // gcd(x, y), arr)\n\n\ndef gcd(x, y):\n    if x == y:\n        return x\n    elif x > y:\n        return gcd(x - y, y)\n    else:\n        return gcd(x, y - x)\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    if arr is None or len(arr) == 0:\n        return None\n    arr.sort()\n    gcd = arr[0]\n    for num in arr:\n        gcd = gcd_helper(gcd, num)\n    return gcd\n\ndef gcd_helper(a, b):\n    if b == 0:\n        return a\n    return gcd_helper(b, a % b)\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(a):\n    if a[0] < a[1]:\n        return get_gcd(a[1:])\n    else:\n        return get_gcd(a[1:])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\n# Code\ndef get_gcd(arr):\n    for n in arr:\n        for x in arr:\n            if n % x == 0:\n                return x\n    return 1\n\n\n# Test"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# Test if all the numbers are distinct and if not, print 'All numbers are same'\n\ndef test_distinct(nums):\n    if len(nums) > 1:\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                return False\n        return True\n    else:\n        return True", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(n):\n    return all(x!=y for x,y in zip(n,n[1:]))\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(lst):\n    return all(x != y for x in lst for y in lst if x!=y)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    return len(nums) == len(set(nums))\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(numbers):\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return False\n        num_set.add(num)\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(n):\n    if len(set(n)) == len(n):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    if nums == sorted(set(nums)):\n        return True\n    return False", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(numbers):\n    for num in numbers:\n        for other_num in numbers:\n            if num == other_num:\n                return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n#https://leetcode.com/problems/divisor-game\n\ndef compute_Last_Digit(a,b):\n    return int(math.factorial(a)%math.factorial(b))%10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if a >= b:\n        return a%b\n    else:\n        return b%a", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    return str(a)!=\"1\" and int(str(a)) % int(str(b)) == 0\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if factorial(a)%factorial(b)==0:\n        return factorial(a)%10\n    else:\n        return \"It is not possible\"\ncompute_Last_Digit(4,2)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nQuestion 34: Write a python program to find the first and last digit of number.\n\n### Code:\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    if a<b or a<1 or b<1:\n        return None\n    else:\n        fact_a = compute_fact(a)\n        fact_b = compute_fact(b)\n        if fact_a%fact_b == 0:\n            return int(fact_a/fact_b)\n        else:\n            return None\n\ndef compute_fact(x):\n    fact = 1\n    for i in range(1,x+1):\n        fact*=i\n    return fact\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    last_digit = 0\n    for i in range(2,b+1):\n        if a%i==0 and b%i==0:\n            last_digit = i\n    return last_digit\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n#Test 2\ndef compute_Last_Digit(a, b):\n    #Use of recursion is not allowed.\n    n = 1\n    while n <= b:\n        if n % a == 0:\n            return n % 10\n        n += 1\n    return 0\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    a = int(a)\n    b = int(b)\n    f = 1\n    while a > 0:\n        f *= a\n        a = a - 1\n    f = str(f)\n    f = f[len(f) - 1]\n    return f\n\ndef test_compute_Last_Digit():\n    assert compute_Last_Digit(2,4) == 2\n\ndef test_compute_Last_Digit_2():\n    assert compute_Last_Digit(3,5) == 3\n\ndef test_compute_Last_Digit_3():\n    assert compute_Last_Digit(1,1) == 1\n\ndef test_compute_Last_Digit_4():\n    assert compute_Last_Digit(1,2) == 1\n\ndef test_compute_Last_Digit_5():\n    assert compute_Last_Digit(1,3) == 1\n\ndef test_compute_Last_Digit_6():\n    assert compute_Last_Digit(4,1) == 1\n\ndef test_compute_Last_Digit_7():\n    assert compute_Last_Digit(1,4) == 2\n\ndef test_compute_Last_Digit_8():\n    assert compute_Last_Digit(1,5) == 1\n\ndef test_compute_Last_Digit_9():\n    assert compute_Last_Digit(5,1) == 1\n\ndef test_compute_Last_Digit_10():\n    assert compute_Last_Digit(1,6) == 1\n\ndef test_compute_Last_Digit_11():\n    assert compute_Last_Digit(1,7) == 1\n\ndef test_compute_Last_Digit_12():\n    assert compute_Last_Digit(1,8) == 1\n\ndef test_compute_Last_Digit_13():\n    assert compute_Last_Digit(1,9) == 1\n\ndef test_compute_Last_Digit_14():\n    assert compute_Last_Digit(1,10) == 1\n\ndef", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    c = a * b\n    while c > 10:\n        c = c % 10\n    return c\n\ndef test_compute_Last_Digit():\n    assert compute_Last_Digit(2,4) == 2"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(num):\n    # Write your code here\n    return num | (num - 1)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    pass", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    \"\"\"\n    This function sets all odd bits of a given number n.\n    \"\"\"\n    return (n & 0b11111111) | (n & -n & 0b10101010)\n\n# End of odd_bit_set_number()\n\n\ndef main():\n    \"\"\"\n    This is a driver function.\n    \"\"\"\n    print(odd_bit_set_number(10))\n    print(odd_bit_set_number(16))\n    print(odd_bit_set_number(30))\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    return number | (number & -number)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    return number ^ (number & -number)", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(n):\n    new = n & (~1)\n    return new\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\nimport math\ndef odd_bit_set_number(n):\n    if n == 0:\n        return 0\n    else:\n        return (n & (n-1)) + odd_bit_set_number(n>>1)\n\ndef odd_bit_set_number_1(n):\n    if n == 0:\n        return 0\n    else:\n        result = odd_bit_set_number_1(n>>1)\n        result |= (n & (n-1))\n        return result\n\ndef odd_bit_set_number_2(n):\n    if n == 0:\n        return 0\n    else:\n        result = odd_bit_set_number_2(n>>1)\n        result |= n\n        return result\n\ndef odd_bit_set_number_3(n):\n    result = 0\n    for i in range(1, math.ceil(math.log2(n)) + 1):\n        result |= n >> i\n        n = n << i\n    return result\n\n# Tests", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    new_num = 0\n    for i in range(num):\n        new_num = new_num | (1 << i)\n    return new_num\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    odd_bit_set_number = 0\n    while number:\n        odd_bit_set_number = odd_bit_set_number | (number & 1)\n        number = number >> 1\n    return odd_bit_set_number\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(num):\n    return num|1\n\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l, k):\n    \"\"\"\n    Return a list of specified elements from a given two-dimensional list.\n    \"\"\"\n    if k == 0:\n        return [item[0] for item in l]\n    else:\n        return [item[k] for item in l]", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_2d,index):\n    result = []\n    for l in list_2d:\n        result.append(l[index])\n    return result\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l,i):\n    res=[]\n    for i in l:\n        res.append(i[i])\n    return res\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(L, pos):\n    result = []\n    for i in range(len(L)):\n        result.append(L[i][pos])\n    return result\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list, element):\n    result = []\n    for item in list:\n        result.append(item[element])\n    return result\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, n):\n    a = []\n    for x in range(0, len(lst)):\n        a.append(lst[x][n])\n    return a\n\ndef test_specified_element():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2, 2, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 5]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2, 2, 5]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(elements, index):\n    for i in range(len(elements)):\n        if index == 0:\n            return elements[i][0]\n        index -= 1\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list,number):\n    result=[]\n    for i in list:\n        result.append(i[number])\n    return result", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l, i):\n    output = []\n    for x in l:\n        output.append(x[i])\n    return output\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matr, number):\n    temp = []\n    for i in range(len(matr)):\n        temp.append(matr[i][number])\n    return temp\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# def min_length_list(input_list):\n#     length = 0\n#     result = []\n#     for lst in input_list:\n#         if len(lst) < length:\n#             length = len(lst)\n#             result = lst\n#\n#     return result, length\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(list_of_lists):\n    return min(list_of_lists, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(list_of_list):\n    min_length = sys.maxsize\n    for lst in list_of_list:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = lst\n    return min_length, min_list\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# min_length_list = lambda lst: (min(map(len, lst)), min(lst, key=len))\n\n\n# min_length_list = lambda lst: (min(lst, key=len), min(map(len, lst)))\n\n\ndef min_length_list(lst):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    \"\"\"\n    return min(lst, key=len), min(map(len, lst))\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(arr):\n    new_arr = []\n    for i in arr:\n        new_arr.append(len(i))\n    min_length = min(new_arr)\n    return min_length, [i for i in arr if len(i) == min_length]\n\n#assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (1, [0])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(l):\n    return min(l, key=lambda x:len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(x):\n    # your code goes here\n    return (min(map(lambda y: len(y), x)), x[list(map(lambda y: len(y), x)).index(min(map(lambda y: len(y), x)))])\n\n# min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n# min_length_list([[1], [2, 3]])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# Solution\ndef min_length_list(lst):\n    min_length = 100\n    # This is not a tuple\n    return min(lst, key = lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(input_list):\n    return (min(input_list, key=lambda x: len(x)))\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n\t\"\"\"\n\t:param a:\n\t:param b:\n\t:param c:\n\t:return:\n\t\"\"\"\n\treturn a==b==c\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a == b == c:\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if ((a**2)+(b**2)+(c**2))==(a+b+c):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a**2 == b**2 + c**2 and b**2 == a**2 + c**2 and c**2 == a**2 + b**2:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    if ((a+b>c) and (b+c>a) and (a+c>b)):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a!=b and b!=c and c!=a:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if (a+b>c) and (b+c>a) and (a+c>b):\n        return True\n    return False\n\n#assert check_equilateral(8,2,4)==True \n#assert check_equilateral(6,8,12)==False \n#assert check_equilateral(6,2,4)==False \n#assert check_equilateral(6,8,10)==True \n#assert check_equilateral(6,6,6)==True \n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a, b, c):\n    if a==b==c:\n        print('Equilateral')\n    else:\n        print('Not equilateral')\n    \na = int(input('a: '))\nb = int(input('b: '))\nc = int(input('c: '))\n\ncheck_equilateral(a,b,c)\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a == b and b == c and a == c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\n# if __name__ == \"__main__\":\n#     pass\n\n\ndef parallelogram_area(a, b):\n    return a*b\n\n\ndef test_parallelogram_area():\n    assert parallelogram_area(10, 20) == 200\n    assert parallelogram_area(20, 10) == 200\n    assert parallelogram_area(10, 10) == 100\n    assert parallelogram_area(0, 20) == 0\n    assert parallelogram_area(20, 0) == 0\n    assert parallelogram_area(10, 0) == 0\n    assert parallelogram_area(0, 10) == 0", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n\t#Write your code here\n\treturn a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    assert a>0 and b>0, 'Sides must be positive numbers'\n    area = a*b\n    return area\n\nparallelogram_area(10,20)\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(height,width):\n    return height*width\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(length_a,length_b):\n    return length_a*length_b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base, height):\n    return base * height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\nimport math\n\ndef parallelogram_area(a,b):\n    a = int(a)\n    b = int(b)\n    area = (a*b)/2\n    return area\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(l1,l2):\n    a = l1 + l2\n    b = l1 * l2\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a, b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a, b):\n    \"\"\"\n    Returns the area of parallelogram.\n    \"\"\"\n    return a*b"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str1):\n    if str1[0]==str1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n    assert s[0] == s[-1]\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n# Write your code here\ndef check_Equality(s):\n  if s[0] == s[-1]:\n    return \"Equal\"\n  else:\n    return \"Not Equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    return \"Equal\" if s[0]==s[-1] else \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(string):\n\n    if (string[0] == string[len(string)-1]):\n        return \"Equal\"\n    else:\n        return \"not equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(text):\n    assert text[0] == text[-1], \"Equal\"\n\ndef check_Equality_2(text):\n    return text[0] == text[-1], \"Equal\"\n\n# This is a permutation of check_Equality()", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(st):\n    return 'Equal' if st[0] == st[-1] else \"Not Equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(st):\n    if st[0] == st[len(st)-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    if arr is None or len(arr) == 0:\n        return None\n    max_val = arr[0]\n    min_val = arr[0]\n    for val in arr[1:]:\n        if val > max_val:\n            max_val = val\n        elif val < min_val:\n            min_val = val\n    buckets = [[] for i in range(max_val - min_val + 1)]\n    for val in arr:\n        buckets[val - min_val].append(val)\n    res = []\n    for bucket in buckets:\n        bucket.sort()\n        res.extend(bucket)\n    return res\n\ndef test_counting_sort():\n    arr = [1,23,4,5,6,7,8]\n    assert counting_sort(arr) == [1, 4, 5, 6, 7, 8, 23]\n\ndef counting_sort_v2(arr):\n    if arr is None or len(arr) == 0:\n        return None\n    max_val = arr[0]\n    min_val = arr[0]\n    for val in arr[1:]:\n        if val > max_val:\n            max_val = val\n        elif val < min_val:\n            min_val = val\n    buckets = [[] for i in range(max_val - min_val + 1)]\n    for val in arr:\n        buckets[val - min_val].append(val)\n    res = []\n    for bucket in buckets:\n        res.extend(bucket)\n    return res\n\ndef test_counting_sort_v2():\n    arr = [1,23,4,5,6,7,8]\n    assert counting_sort_v2(arr) == [1, 4, 5, 6, 7, 8, 23]", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(nums):\n    min_num = min(nums)\n    max_num = max(nums)\n\n    #initialize count array\n    count = [0] * (max_num-min_num+1)\n\n    #count the number of occurrence for each number in nums\n    for num in nums:\n        count[num-min_num] += 1\n\n    #to make index start from 0\n    count[0] = 0\n\n    #for each number, we shift it by the sum of previous numbers\n    for i in range(1,len(count)):\n        count[i] += count[i-1]\n\n    #make a new array and fill it with nums\n    nums_sorted = [0] * len(nums)\n    for i in range(len(nums)):\n        nums_sorted[count[nums[i]-min_num] - 1] = nums[i]\n        count[nums[i]-min_num] -= 1\n    return nums_sorted\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    max_element = max(arr)\n    # create a dictionary with max + 1 as keys\n    # initialize to 0 for each key\n    counts = {i:0 for i in range(max_element + 1)}\n    # add each element to the count dictionary\n    for i in arr:\n        counts[i] += 1\n    # now sort the dictionary by the key values\n    sorted_list = []\n    for key in counts:\n        for _ in range(counts[key]):\n            sorted_list.append(key)\n    return sorted_list", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    max_val = max(arr)\n    bucket = [0] * (max_val + 1)\n    for x in arr:\n        bucket[x] += 1\n    arr[:] = [0] * len(arr)\n    for i in range(1, max_val + 1):\n        arr[bucket[i] - 1] = i\n        bucket[i] = 0\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(array):\n    max_val = max(array)\n    count = [0] * (max_val + 1)\n    result = []\n    for num in array:\n        count[num] += 1\n\n    for i in range(max_val + 1):\n        for _ in range(count[i]):\n            result.append(i)\n\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(input_list):\n    # count number of each element in input_list\n    count = [0 for i in range(1000000)]\n    for i in input_list:\n        count[i] += 1\n    # calculate cumulative sum of count\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    # write input_list back into output_list\n    output_list = [0 for i in range(len(input_list))]\n    for i in range(len(input_list)-1, -1, -1):\n        output_list[count[input_list[i]] - 1] = input_list[i]\n        count[input_list[i]] -= 1\n    # return output_list\n    return output_list\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    \"\"\"\n    arr: a list to be sorted\n    returns: a sorted list\n    \"\"\"\n    if not isinstance(arr, list):\n        return False\n    n = len(arr)\n    minval = arr[0]\n    maxval = arr[0]\n    for i in range(n):\n        if arr[i] > maxval:\n            maxval = arr[i]\n        if arr[i] < minval:\n            minval = arr[i]\n    k = maxval - minval + 1\n    output = [0 for _ in range(k)]\n    for i in range(n):\n        output[arr[i] - minval] += 1\n    for i in range(1, k):\n        output[i] += output[i-1]\n    output.reverse()\n    result = [0 for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        result[output[arr[i] - minval]-1] = arr[i]\n        output[arr[i] - minval] -= 1\n    for i in range(n):\n        arr[i] = result[i]\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(numbers):\n    max_num = max(numbers)\n    min_num = min(numbers)\n    output = []\n\n    count = [0] * (max_num - min_num + 1)\n    for num in numbers:\n        count[num - min_num] += 1\n\n    i = 0\n    for num in count:\n        for _ in range(num):\n            output.append(min_num + i)\n        i += 1\n    return output\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(input_array):\n    unique_values = set(input_array)\n    # Create a dictionary for each unique value in the input array.\n    counts_dictionary = {value:0 for value in unique_values}\n    # Loop through the input array and increment its dictionary entry by 1.\n    for value in input_array:\n        counts_dictionary[value] += 1\n    # Create an array of length of the unique values and initialize it with zeros.\n    output_array = [0] * len(unique_values)\n    # Loop through the dictionary and copy the unique value with its corresponding count to the output array.\n    for key, value in counts_dictionary.items():\n        output_array[key] = value\n    # Loop through the output array and add the value of each cell to the output array.\n    for i in range(len(output_array)):\n        output_array[i] += output_array[i-1]\n    # Create a list to hold the sorted input array.\n    sorted_input_array = []\n    # Loop through the output array and copy the value of each cell to the sorted input array.\n    for i in range(len(input_array)):\n        sorted_input_array.append(input_array[output_array[i] - 1])\n    return sorted_input_array\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(a):\n    n = len(a)\n    if n == 0:\n        return []\n    k = max(a) + 1\n    c = [0] * (k + 1)\n    for i in a:\n        c[i] += 1\n    for i in range(1, k+1):\n        c[i] += c[i-1]\n    output = [0] * n\n    for i in a:\n        output[c[i]-1] = i\n        c[i] -= 1\n    return output\n\na = [1,23,4,5,6,7,8]"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,p):\n    return (a**n-1)/(a-p)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    if t==1:\n        return a\n    else:\n        return a*tn_gp(a,n,t-1)", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(n,r,t):\n    s = 0\n    for i in range(1,n):\n        s = s + r**(n-i)*t**i\n    return s\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,n,t):\n    if t==1:\n        return a\n    return a*(n-1)**t + (t-1)*tn_gp(a,n,t-1)", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\nimport numpy as np\ndef tn_gp(x,n,p):\n    \"\"\"\n    x=first term, n=number of term, p=common ratio\n    return nth term of geometric series\n    \"\"\"\n    a=[x]\n    for i in range(n-1):\n        x=x*p\n        a.append(x)\n    a=np.array(a)\n    return a[n-1]\n\n\ndef taylor(f,n):\n    \"\"\"\n    f=function, n=order of taylor series\n    return polynomial approximation of f(x)\n    \"\"\"\n    a=0\n    for i in range(n):\n        a=a+taylor_coeff(i,f)\n    return a\n\ndef taylor_coeff(n,f):\n    \"\"\"\n    f=function, n=order of taylor series\n    return coefficient of n-th term in taylor series\n    \"\"\"\n    a=0\n    for i in range(n+1):\n        a=a+(((-1)**i)*factorial(n)/(factorial(i)*(n-i+1)))*f(i)\n    return a\n\ndef factorial(n):\n    \"\"\"\n    n=integer\n    return factorial of n\n    \"\"\"\n    if n<2:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef int_ser(f,a,b,n):\n    \"\"\"\n    f=function, a=lower limit, b=upper limit, n=order of integration\n    return numerical integration using trapezoidal rule\n    \"\"\"\n    x=np.linspace(a,b,n)\n    y=f(x)\n    return np.sum((y[1:]+y[0:-1])*0.5*(x[1:]+x[0:-1]))\n\ndef sin(x):\n    \"\"\"\n    x=argument\n    return sin(x)\n    \"\"\"\n    return np.sin(x)\n\ndef cos(x):\n    \"\"\"\n    x=argument\n    return cos(x)\n    \"\"\"\n    return np.cos(x)", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\nimport math\n\ndef tn_gp(x,n,t):\n\tans=x*(t-1)**n\n\tfor i in range(1,t):\n\t\tans=ans*x\n\treturn int(ans)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n,t,p):\n    \"\"\"\n    find t-nth term of geometric series.\n    \"\"\"\n    if n == 1:\n        return p\n    else:\n        return p*tn_gp(n-1,t,p)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    if t==1:\n        return a\n    else:\n        return a*(tn_gp(a,n,t-1))\n        \n\n#assert tn_gp(1,5,2)==16", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    return a*(t**(n-1))\n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    if n == 0:\n        return 0\n    return a * tn_gp(a,n-1,t)\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(number):\n    reversed_number = 0\n    while number != 0:\n        remainder = number % 10\n        reversed_number = reversed_number * 10 + remainder\n        number = int(number / 10)\n    return True if reversed_number + 1 == number else False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    if num == num[::-1]:\n        if int(num) == int(num[:-1]) + 1:\n            return True\n    return False\n\n#assert check(70) == False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    return n==int(str(n)[::-1])-1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    re = int(str(n)[::-1])\n    return n == (re + re) + 1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(number):\n    r = reverse(str(number))\n    if int(number) - 2 * int(r) == 1:\n        return True\n    else:\n        return False\n\n\ndef reverse(s):\n    r = \"\"\n    for c in s[::-1]:\n        r += c\n    return r\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    temp = num\n    r = 0\n    while temp != 0:\n        digit = temp % 10\n        r = r * 10 + digit\n        temp = temp // 10\n    if num == r * 2 - 1:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    reverse = 0\n    for i in str(num):\n        reverse = reverse * 10 + int(i)\n    return num == reverse + 1", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    return num == int(str(num)[::-1]) + 1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    str_num = str(n)\n    num_len = len(str_num)\n    list_num = list(str_num)\n    list_num.reverse()\n    temp = 0\n    for i in range(num_len):\n        temp = temp * 10 + int(list_num[i])\n    if temp == n - 2:\n        return True\n    else:\n        return False\n\ndef check(n):\n    return str(n) == str(n*2)[1:][::-1]\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    rev = 0\n    while num != 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev == num + 2\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,length):\n    if len(digits) < length:\n        return False\n    max_num = digits[0]\n    for i in range(1,length):\n        max_num = max(max_num,max(digits[i]*10**(length-i-1)+digits[i-1]*10**(length-i),digits[i]*10**(length-i)))\n    return max_num", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, k):\n    n = len(digits)\n    answer = -1\n    for i in range(n - k + 1):\n        j = i + k - 1\n        temp = int(''.join(str(digit) for digit in digits[i:j+1]))\n        if temp > answer:\n            answer = temp\n    return answer\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(num, n):\n    \"\"\"\n    :param num: a list of digits\n    :param n: the size of the largest number to be formed\n    :return: largest number that can be formed\n    \"\"\"\n    num.sort()\n    if n == 1:\n        return max(num)\n    return int(''.join(num[-n:]))\n\n#assert find_Max_Num([1,2,3],3) == 321\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(arr,N):\n\tdef helper(arr,N,A,ans):\n\t\tif len(A)==N:\n\t\t\tif int(''.join(A))>ans:\n\t\t\t\tans=int(''.join(A))\n\t\telse:\n\t\t\tfor i in range(1,10):\n\t\t\t\tif i not in A:\n\t\t\t\t\tA.append(i)\n\t\t\t\t\thelper(arr,N,A,ans)\n\t\t\t\t\tA.pop()\n\thelper(arr,N,[],0)\n\treturn ans", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(num,index):\n    max_num = 0\n    for i in xrange(10,10**index):\n        num = list(str(i))\n        count = 0\n        for j in num:\n            if int(j) == 0:\n                count += 1\n        if count >= index:\n            max_num = max(max_num,int(''.join(num)))\n    return max_num\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,length):\n    temp = \"\"\n    n = len(digits)\n    for i in range(n-length+1):\n        temp = temp + digits[i]\n    return int(temp)\n\n#assert find_Max_Num([1,2,3,4,5,6],2) == 12\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(list_of_digits, n):\n    \"\"\"\n    :param list_of_digits: a list of digits\n    :param n: size of number\n    :return: the largest number\n    \"\"\"\n    digits_and_places = map(lambda x: (x, range(10)), list_of_digits)\n    list_of_digits_and_places = sorted(digits_and_places, key = lambda x:x[1])\n    #print list_of_digits_and_places\n    final_digit_list = [x[0] for x in list_of_digits_and_places]\n    final_num = int(''.join(final_digit_list))\n    #print final_num\n    #print final_num%n\n    if final_num%n == 0:\n        return final_num\n    else:\n        return final_num+(n-final_num%n)\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,k):\n    return int(\"\".join(sorted(digits[-k:],reverse=True)))", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, index):\n    digits.sort(reverse=True)\n    if index == 1:\n        return digits[0]\n    else:\n        for i in range(len(digits) - index + 1):\n            num = digits[i:i+index]\n            num.sort(reverse=True)\n            if num[0] * 10 ** (index - 1) < 10 ** index:\n                return num[0] * 10 ** (index - 1) + find_Max_Num(digits, index - 1)\n        return -1\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(input_list,input_size):\n    Max_Num = int('0')\n    input_list.reverse()\n    for i in range(0,input_size):\n        Max_Num = Max_Num * 10 + input_list[i]\n    return Max_Num\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a>b:\n        return False\n    elif a<b:\n        return False\n    else:\n        return True\n    ", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a*b > 0:\n        return False\n    elif a*b < 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x,y):\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x,y):\n    return (x > 0 and y < 0) or (x < 0 and y > 0)\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    return a * b < 0", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n\tif (a*b) >= 0:\n\t\treturn False\n\telse:\n\t\treturn True\n\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if a < 0 and b >= 0 or a >= 0 and b < 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x,y):\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a, b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n  if a < 0 and b > 0 or a > 0 and b < 0:\n    return True\n  else:\n    return False\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    >>> is_octagonal(5)\n    65\n    >>> is_octagonal(0)\n    1\n    >>> is_octagonal(-1)\n    Traceback (most recent call last):\n    ...\n    ValueError: n must be >= 0\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    return (8*n+1)*(n*(n+1))//2\n\n# 3. https://www.hackerrank.com/challenges/luck-balance/problem\n\ndef get_lucky_number(k, b):\n    \"\"\"\n    >>> get_lucky_number(7, 10)\n    '42'\n    >>> get_lucky_number(10, 7)\n    '24'\n    >>> get_lucky_number(10, 10)\n    '17'\n    >>> get_lucky_number(10, 50)\n    '49'\n    >>> get_lucky_number(70, 10)\n    '42'\n    \"\"\"\n    return str((k*(k+1)//2)*b + (10*b-1)//2)\n\n# 4. https://www.hackerrank.com/challenges/luck-balance-part-2/problem\n\ndef get_lucky_number2(k, b):\n    \"\"\"\n    >>> get_lucky_number2(7, 10)\n    '24'\n    >>> get_lucky_number2(10, 7)\n    '17'\n    >>> get_lucky_number2(10, 10)\n    '42'\n    >>> get_lucky_number2(10, 50)\n    '49'\n    >>> get_lucky_number2(70, 10)\n    '42'\n    \"\"\"\n    return str((k*(k+1)//2)*b + (10*b-1)//2)\n\n# 5. https://www.hackerrank.com/challenges/luck-balance-part-3/problem\n\ndef get_", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n# List of octagonal numbers\noctagonal_numbers = [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\n\ndef is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n\n    Args:\n        n: The octagonal number to find.\n\n    Returns:\n        The octagonal number.\n\n    \"\"\"\n    return octagonal_numbers[n - 1]\n\n\ndef test_is_octagonal():\n    \"\"\"\n    Test case for the is_octagonal() function.\n    \"\"\"\n    assert is_octagonal(5) == 65\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nimport math\n\n\ndef is_octagonal(n):\n    if n < 0:\n        raise ValueError(\"Negative value provided for n.\")\n    if n == 0:\n        return 0\n    r = (math.sqrt(1 + 8 * n) - 1) / 2\n    return round(r ** 2 * 8 * n)\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    \"\"\"\n    :param n: the number\n    :return: nth octagonal number\n    \"\"\"\n    pass\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return (8 * n * (n + 1) / 2) + n * 2\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return n * (3 * n - 1) / 2\n\ndef nth_octagonal(n):\n    \"\"\"Returns the n-th octagonal number.\"\"\"\n    return is_octagonal(n)\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nimport pytest\n\n\ndef is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    # n - 1 as the last octagon is the n-1th octagon.\n    return (1 + 2 * n) * (n - 1) / 2\n\n\n@pytest.mark.parametrize('n, expected', [\n    (1, 1),\n    (2, 11),\n    (5, 65),\n    (8, 136),\n])\ndef test(n, expected):\n    assert is_octagonal(n) == expected\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom typing import List\n\n\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    :param n: (int) n > 0\n    :return: (int) nth octagonal number\n    \"\"\"\n\n    def sum_of_divisors(n: int) -> int:\n        result: int = 1\n        for i in range(1, n + 1):\n            if n % i == 0:\n                result += i\n        return result\n\n    def is_octagonal_number(n: int) -> bool:\n        octagonal_number: int = 0\n        while True:\n            octagonal_number = sum_of_divisors(n)\n            if octagonal_number == n:\n                return True\n            n -= 1\n\n    def get_nth_octagonal_number(n: int) -> int:\n        if not is_octagonal_number(n):\n            return None\n\n        octagonal_number: int = 0\n        while True:\n            octagonal_number = sum_of_divisors(n)\n            if octagonal_number == n:\n                return octagonal_number\n            n -= 1\n\n    if n < 1:\n        return None\n\n    return get_nth_octagonal_number(n)\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    \"\"\"\n    This function checks if the number is an octagonal number by dividing it by 2 and then adding the resultant value to the number itself\n    \"\"\"\n    result = n/2\n    result = result + n\n    return result\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    sum = 1\n    for i in range(n):\n        sum += i*(3*i+1)\n    return sum\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom typing import List\n\n\ndef max_len_sub(arr: List[int], max_val: int) -> int:\n    i = 0\n    j = 1\n    max_len = 0\n\n    while i < len(arr) and j < len(arr):\n        if arr[i] + arr[j] <= max_val:\n            i += 1\n            j += 1\n            max_len = max(max_len, j - i)\n        else:\n            j += 1\n\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    if not arr:\n        return 0\n    max_sub = 0\n    for i in range(n):\n        j = 0\n        for j in range(i + 1, n):\n            if arr[i] < arr[j]:\n                break\n        sub = j - i\n        if sub > max_sub:\n            max_sub = sub\n    return max_sub\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(array, sub):\n    max_len = 0\n    left_max = 0\n    right_max = 0\n\n    for i in range(len(array)):\n        if i > 0:\n            right_max = max(right_max, array[i]-array[i-1])\n\n        # get the left max from right max\n        if i > left_max:\n            left_max = right_max\n\n        # get the max length from left and right max\n        max_len = max(max_len, left_max+right_max)\n\n        # reset right max for current index\n        right_max = 0\n\n    return max_len\n\n#\n# TEST CASES\n#\narray = [2, 5, 6, 3, 7, 6, 5, 8]\nsub = 8", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(A, N):\n    s = [0] * (N + 1)\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            s[i] = max(s[i], s[j - 1] + A[i] - A[j - 1])\n    return s[N]\n\n#assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\nimport itertools\n\ndef max_len_sub(arr, sum_):\n    # Write your code here\n    arr.sort()\n    max_len = 0\n    if len(arr) < 2:\n        return max_len\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum_ - arr[i] - arr[j] >= 0:\n                if max_len < j - i:\n                    max_len = j - i\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, diff):\n    \"\"\"\n    Best Time Complexity: O(n)\n    Best Space Complexity: O(n)\n    \"\"\"\n    max_len = 1\n    max_idx = 0\n    for idx, val in enumerate(arr):\n        if val - arr[idx - 1] == diff:\n            max_len = max(max_len, idx - max_idx)\n            max_idx = idx\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, k):\n    \"\"\"\n    Take the array and k as parameters\n    Return the max length subsequence with difference between adjacent elements k\n    \"\"\"\n    max_len = 0\n    max_len_sub = []\n    # fill the dictionary to keep the maximum length of the subsequence\n    dict = {}\n    \n    for i in range(len(arr)):\n        if (arr[i] - k in dict):\n            dict[arr[i]] = max(dict[arr[i] - k] + 1, dict[arr[i]])\n            if dict[arr[i]] > max_len:\n                max_len = dict[arr[i]]\n                max_len_sub = [arr[i]]\n                dict.pop(arr[i] - k, None)\n        else:\n            dict[arr[i]] = 1\n    \n    return max_len", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, diff):\n    # Write your code here\n    # brute force\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] == diff:\n                res = max(res, j - i)\n    return res\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    # max_diff = 0\n    # max_diff_count = 0\n    # max_len = 0\n    # for i in range(0, len(arr) - 1):\n    #     for j in range(i, len(arr)):\n    #         diff = arr[j] - arr[i]\n    #         if diff == 0:\n    #             max_diff_count = 0\n    #         elif max_diff_count < diff:\n    #             max_diff = diff\n    #             max_diff_count = diff\n    #         elif max_diff_count == diff:\n    #             if max_len < j - i + 1:\n    #                 max_len = j - i + 1\n    # print(max_diff, max_diff_count, max_len)\n    # return max_len\n\n    max_len = 0\n    curr_diff = 0\n    curr_diff_count = 0\n    for i in range(0, len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff == 0:\n            curr_diff_count = 0\n        elif curr_diff_count < diff:\n            curr_diff = diff\n            curr_diff_count = diff\n        elif curr_diff_count == diff:\n            if max_len < i - curr_diff_count + 1:\n                max_len = i - curr_diff_count + 1\n    return max_len\n\narr = [2, 5, 6, 3, 7, 6, 5, 8]", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, l):\n    if len(arr) < 2:\n        return 0\n\n    if arr[0] != l:\n        return 0\n\n    if arr[-1] != l:\n        return 0\n\n    max_len = 0\n    for i in range(1, len(arr)-1):\n        if arr[i-1] == l and arr[i+1] == l:\n            max_len = max(max_len, 1+max_len_sub(arr, l-arr[i]))\n\n    return max_len\n\ndef test_max_len_sub():\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n# Solution\ndef count_Substrings(str, L):\n    if L < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(0,len(str)-L+1):\n            if sum([int(x) for x in str[i:i+L]]) == L:\n                count += 1\n        return count\n\n# Tests", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s,n):\n    count=0\n    for i in range(len(s)-n+1):\n        count+=1\n    return count", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str, sum_):\n    count = 0\n    for i in range(len(str)-1):\n        if(str[i]+str[i+1]==str[i+1]+str[i+2]):\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str,n):\n    count=0\n    for i in range(len(str)):\n        if (int(str[i:i+n])==n):\n            count=count+1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string,n):\n\ttotal = 0\n\tif len(string) < n:\n\t\treturn total\n\tprint(string)\n\tfor i in range(len(string)-n):\n\t\tsum = 0\n\t\tfor j in range(i,i+n):\n\t\t\tsum += int(string[j])\n\t\tprint(sum)\n\t\tif sum == n:\n\t\t\ttotal += 1\n\treturn total", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str1, length):\n    print(count_Substrings_using_math(str1, length))\n    print(count_Substrings_using_math_2(str1, length))\n\ndef count_Substrings_using_math(str1, length):\n    counter = 0\n    for i in range(len(str1)):\n        s = str1[i:i+length]\n        sum_of_digits = sum([int(x) for x in s])\n        if sum_of_digits == length:\n            counter += 1\n    return counter\n\ndef count_Substrings_using_math_2(str1, length):\n    counter = 0\n    for i in range(len(str1)):\n        s = str1[i:i+length]\n        sum_of_digits = sum(int(x) for x in s)\n        if sum_of_digits == length:\n            counter += 1\n    return counter\n\ncount_Substrings('12112',6)\ncount_Substrings('112112',6)", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,k):\n    count = 0\n    for i in range(len(s)):\n        t = 0\n        for j in range(i,len(s)):\n            t+=int(s[j])\n            if t==k:\n                count+=1\n    return count\n\ndef main():\n    assert count_Substrings('112112',6) == 6\n    assert count_Substrings('20150119',5) == 1\n    assert count_Substrings('1102103',4) == 3\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n# Time: O(n^3)\n# Space: O(1)\ndef count_Substrings(string,k):\n    count = 0\n    length = len(string)\n    for i in range(length):\n        for j in range(i+1,length+1):\n            count += int(string[i:j]) == j-i\n    return count\n\ndef test():\n    assert count_Substrings('112112',6) == 6\ntest()\n\n\n# Time: O(n^2)\n# Space: O(n)\ndef count_Substrings_2(string,k):\n    count = 0\n    length = len(string)\n    dp = [0]*length\n    for i in range(length):\n        for j in range(i+1,length+1):\n            dp[j] = dp[j-1]\n            if string[i] == '0':\n                continue\n            if string[i] != '0' and (j-i) <= 9:\n                dp[j] = dp[j-1] + 1\n            if string[i] != '0' and (j-i) > 9:\n                dp[j] = dp[j-1] + 2\n    for i in range(length):\n        count += dp[i] - i\n    return count\n\ndef test_2():\n    assert count_Substrings_2('112112',6) == 6\ntest_2()\n\n\n# Time: O(n^2)\n# Space: O(n)\ndef count_Substrings_3(string,k):\n    count = 0\n    length = len(string)\n    dp = [0]*length\n    for i in range(length):\n        for j in range(i+1,length+1):\n            dp[j] = dp[j-1]\n            if string[i] == '0':\n                continue\n            if string[i] != '0' and (j-i) <= 9:\n                dp[j] = dp[j-1] + 1\n            if string[i] != '", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str,length):\n    return sum(count_substrings(str,length,i) for i in range(length+1))\n\ndef count_substrings(str,length,end):\n    if end > length:\n        return 0\n\n    count = 0\n    count += sum(str[i] == str[end+i] for i in range(1,length+1))\n    return count", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s,k):\n    length = len(s)\n    count = 0\n    for i in range(length-k+1):\n        temp = 0\n        for j in range(i,i+k):\n            temp += int(s[j])\n        if temp == k:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    if not nums:\n        return None\n    min_val = nums[0]\n    for num in nums:\n        if num < min_val:\n            min_val = num\n    return min_val", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(arr):\n    return sorted(arr)[0]\n\ndef test_smallest_num():\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    return min(nums)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(input_list):\n    sm = input_list[0]\n    for i in input_list:\n        if i < sm:\n            sm = i\n    return sm\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\nimport pytest\n\n\ndef smallest_num(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: smallest number in the list\n    \"\"\"\n    # write your code here\n    min_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n    return min_num\n\n\n@pytest.mark.parametrize('nums, result', [\n    ([10, 20, 1, 45, 99], 1),\n    ([10, 100, 1, 45, 99], 10),\n    ([], None)\n])\ndef test_smallest_num(nums, result):\n    assert smallest_num(nums) == result", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(lst):\n\tsmallest = lst[0]\n\tfor i in lst:\n\t\tif i < smallest:\n\t\t\tsmallest = i\n\treturn smallest", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\nimport pytest\n\ndef smallest_num(num_list):\n    num_list.sort()\n    return num_list[0]\n\ndef smallest_num2(num_list):\n    for num in num_list:\n        if num < num_list[0]:\n            num_list[0] = num\n    return num_list[0]\n\ndef smallest_num3(num_list):\n    if len(num_list) == 1:\n        return num_list[0]\n    else:\n        for i in range(1,len(num_list)):\n            if num_list[i] < num_list[0]:\n                num_list[0] = num_list[i]\n    return num_list[0]\n\ndef smallest_num4(num_list):\n    if len(num_list) == 1:\n        return num_list[0]\n    else:\n        temp = num_list[0]\n        for i in range(1,len(num_list)):\n            if num_list[i] < temp:\n                temp = num_list[i]\n                num_list[0] = temp\n    return num_list[0]\n\ndef smallest_num5(num_list):\n    if len(num_list) == 1:\n        return num_list[0]\n    else:\n        temp = num_list[0]\n        for i in range(1,len(num_list)):\n            if num_list[i] < temp:\n                temp = num_list[i]\n                num_list[0] = temp\n    return num_list[0]\n\ndef smallest_num6(num_list):\n    if len(num_list) == 1:\n        return num_list[0]\n    else:\n        temp = num_list[0]\n        for i in range(1,len(num_list)):\n            if num_list[i] < temp:\n                temp = num_list[i]\n                num_list[0] = temp\n    return num_list[0]\n\ndef smallest_num7(num_list):\n    if len(num_list) == ", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(arr):\n    i=0\n    while i<len(arr):\n        min = arr[i]\n        j=i+1\n        while j<len(arr):\n            if arr[j]<min:\n                min=arr[j]\n            j=j+1\n        arr[i]=min\n        i=i+1\n    return arr[0]\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    \"\"\"\n    Returns the smallest number in the input list.\n    \"\"\"\n    return min(nums)"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# write your code here\nfrom typing import List\nfrom typing import Tuple\n\ndef max_difference(tuples: List[Tuple[int]]) -> int:\n    diffs = []\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            diffs.append(max(tuples[i], tuples[j]) - min(tuples[i], tuples[j]))\n    return max(diffs)\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuples):\n    max_difference = 0\n    tuples.sort()\n    for i in range(len(tuples)-1):\n        max_difference = max(max_difference, tuples[i][1] - tuples[i+1][0])\n    return max_difference\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuple_list):\n    difference = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i][1] > tuple_list[j][1]:\n                difference = max(difference, tuple_list[i][1] - tuple_list[j][1])\n    return difference\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(numbers):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[len(numbers) - 1][1] - sorted_numbers[0][1]\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(pairs):\n    # your code goes here\n    sorted_pairs = sorted(pairs)\n    max_difference = sorted_pairs[len(sorted_pairs) - 1][0] - sorted_pairs[0][0]\n    return max_difference\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuple_list):\n    max_diff = -1\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i][0] > tuple_list[j][0]:\n                diff = tuple_list[i][0] - tuple_list[j][0]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(data):\n    max_dif = -1\n    for i in range(len(data)-1):\n        for j in range(i+1, len(data)):\n            diff = abs(data[i][0] - data[j][0]) + abs(data[i][1] - data[j][1])\n            if diff > max_dif:\n                max_dif = diff\n    return max_dif\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(pairs):\n    # get the max and min value in the tuple and subtract them\n    max_val = max(map(lambda x: x[0], pairs))\n    min_val = min(map(lambda x: x[0], pairs))\n    return max_val - min_val\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    :param lst: List of tuples, each of which represents the left and right boundary of an available pair.\n    :return: The maximum difference between two available pairs.\n    \"\"\"\n    if not lst:\n        return 0\n    left_bound, right_bound = min(lst), max(lst)\n    return max(right_bound - left_bound + 1, 0)\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(t):\n    # Your code here\n    diff_set = set()\n    diff = 0\n    for i in range(len(t)):\n        for j in range(len(t)):\n            if i != j and t[i][0] != t[j][0] and t[i][0] != t[j][1] and t[j][0] != t[i][1] and t[i][1] != t[j][1]:\n                diff_set.add(abs(t[i][1] - t[j][1]))\n    return max(diff_set)\n    #return max(map(abs, diff_set))\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    marks.sort(key = lambda x: x[1])\n    return marks\n\n# +", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subject_marks_list):\n    subject_marks_list.sort(key = lambda x: x[1])\n    return subject_marks_list\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(data):\n    return sorted(data, key=lambda x:x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\n# assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subject_marks):\n    return sorted(subject_marks, key=lambda x: x[1], reverse=True)\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(student_marks):\n    student_marks.sort(key=lambda x: x[1])\n    return student_marks\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks_and_subjects):\n\treturn sorted(marks_and_subjects, key = lambda x : x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subject_marks_list):\n    # YOUR CODE HERE\n    subject_marks_list.sort(key=lambda x: x[1])\n    return subject_marks_list\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(L):\n    if isinstance(L,list):\n        return sum([recursive_list_sum(L[i]) for i in range(len(L))])\n    return L\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if isinstance(lst,list) and len(lst)==2:\n        return recursive_list_sum(lst[0])+recursive_list_sum(lst[1])\n    return 0", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    def list_sum(l):\n        if type(l)==int:\n            return l\n        else:\n            return l[0] + list_sum(l[1])\n    return list_sum(list)\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    if not list:\n        return 0\n    if isinstance(list[0], int):\n        return list[0] + recursive_list_sum(list[1:])\n    if isinstance(list[0], list):\n        return recursive_list_sum(list[0]) + recursive_list_sum(list[1:])", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if len(lst) <= 1:\n        return lst[0]\n    return recursive_list_sum(lst[1:]) + lst[0]\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    sum = 0\n    for element in list:\n        if isinstance(element, list):\n            sum = sum + recursive_list_sum(element)\n        else:\n            sum = sum + element\n    return sum\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lis):\n    if isinstance(lis, int):\n        return lis\n    else:\n        lis = lis[1:]\n        return recursive_list_sum(lis) + lis[0]\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    if not list:\n        return 0\n    elif isinstance(list[0], list):\n        return recursive_list_sum(list[0]) + recursive_list_sum(list[1])\n    else:\n        return list[0] + recursive_list_sum(list[1:])", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list_input):\n\tif type(list_input[0]) is int:\n\t\treturn list_input[0] + recursive_list_sum(list_input[1:])\n\telse:\n\t\treturn list_input[0] + recursive_list_sum([x + y for x, y in zip(list_input[0], recursive_list_sum(list_input[1:]))])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(l):\n    if len(l)==1:\n        return l[0]\n    else:\n        return l[0] + recursive_list_sum(l[1])\n\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(list):\n    count=0\n    for i in list:\n        if i > 0:\n            count=count+1\n    return count", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(l):\n    # YOUR CODE HERE\n    return 0\n\n# +", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    num_pos = 0\n    for i in nums:\n        if i >= 0:\n            num_pos += 1\n    return num_pos\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(l):\n\tpositive_count = 0\n\tfor item in l:\n\t\tif item > 0:\n\t\t\tpositive_count += 1\n\treturn positive_count", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\n# +\nimport math\n\ndef pos_count(array):\n    count = 0\n    for item in array:\n        if item > 0:\n            count += 1\n    return count\n\n\n# -\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(alist):\n    pos_count = 0\n    for i in alist:\n        if i>0:\n            pos_count += 1\n    return pos_count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count = 0\n    for item in lst:\n        if item > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(ls):\n    count = 0\n    for i in ls:\n        if i > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(num_list):\n    count = 0\n    for num in num_list:\n        if num > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nfrom functools import reduce\nfrom itertools import permutations\nimport math\n\ndef bell_number(n):\n    return reduce(lambda x, y: x + y, [math.factorial(i) for i in range(n)])\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    # TODO: Write your code here\n    return n*math.factorial(2*n) // math.factorial(n) // math.factorial(n) // math.factorial(2*n)\n\ndef bell_number_opt(n):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    # TODO: Write your code here\n    sum = 1\n    for i in range(1, n):\n        sum *= 2 * i + 1\n    return sum\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    def __bell(n):\n        if n==0:\n            return 1\n        elif n==1:\n            return 1\n        elif n==2:\n            return 2\n        else:\n            return __bell(n-1)+__bell(n-2)\n\n    return __bell(n)", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n==0:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n))\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    pass\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    return (1+sum(bell_number(i) for i in range(n)))", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    return (1 << n - 1) * factorial(n - 1)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n\treturn sum(range(1,n+1))\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    return 1", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1)+sum(combinations(range(1, n+1), n-1))\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(A):\n    l = len(A)\n    monotonic = True\n    for i in range(l-1):\n        if A[i] > A[i+1]:\n            monotonic = False\n            break\n    return monotonic\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    return arr[1:] == sorted(arr[1:])\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    # write your code here\n    n = len(arr)\n    if n==1:\n        return True\n    if n ==2:\n        if arr[0] >= arr[1]:\n            return True\n        else:\n            return False\n\n    i = 0\n    j = 1\n    if arr[0] > arr[1]:\n        return False\n\n    while j < n:\n        if arr[i] > arr[j]:\n            return False\n        if arr[i] < arr[j]:\n            return False\n        i = i+1\n        j = j+1\n    return True", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    # Your code here\n    if len(arr)==1:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n        elif arr[i]<arr[i+1]:\n            return True\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\nimport unittest\n\ndef is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(array):\n    \"\"\"\n    :param array: An array of integers\n    :return: True if array is monotonic, False otherwise\n    \"\"\"\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n\n    if n == 1:\n        return True\n\n    if n == 2:\n        return (arr[0] <= arr[1])\n\n    for i in range(n):\n        if i == 0:\n            continue\n        if arr[i] <= arr[i - 1]:\n            return False\n\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] >= arr[i + 1]:\n            return False\n        i += 1\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    return (arr[1:] - arr[:-1]).min() >= 0 or (arr[1:] - arr[:-1]).max() <= 0\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(a):\n    flag = True\n    for i in range(len(a) - 1):\n        if a[i] > a[i + 1]:\n            flag = False\n            break\n    return flag\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1,l2):\n    l1.sort()\n    l2.sort()\n    if l1 == l2:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(li,sub):\n    \"\"\"\n    This function accepts a list li and a sublist sub as inputs.\n    It finds out whether or not the sublist is in li and returns True or False\n    \"\"\"\n    n=len(li)\n    m=len(sub)\n    i=0\n    while i<n-m+1:\n        j=0\n        while j<m and sub[j]==li[i+j]:\n            j+=1\n        if j==m:\n            return True\n        i+=1\n    return False\n\n#assert is_sublist([2,4,3,5,7],[3,7])==False", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(lst, sublist):\n    lst.sort()\n    sublist.sort()\n    return lst == sublist\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    if len(list1)>len(list2):\n        if list1[len(list1)-len(list2):]==list2:\n            return True\n        else:\n            return False\n    else:\n        if list2[len(list2)-len(list1):]==list1:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(lst, sublst):\n    return (lst.count(sublst[0]) >= 1) and (lst[0:sublst[0]] == sublst) and (lst[-sublst[0]:] == sublst[::-1])\n    ", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(l,subl):\n    \"\"\"\n    Check whether a list contains the given sublist or not\n    :param l: a list\n    :param subl: a sublist to be found\n    :return: True or False\n    \"\"\"\n    if l is None or subl is None:\n        return False\n    if len(l)<len(subl):\n        return False\n    for i in range(len(subl)):\n        if subl[i]!=l[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list,sub):\n    if sub==[]:\n        return True\n    if len(list)==0 or len(sub)==0:\n        return False\n    if sub[0]==list[0]:\n        if is_sublist(list[1:],sub[1:]):\n            return True\n    return is_sublist(list[1:],sub)\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(slist,target):\n    if len(slist) < len(target):\n        return False\n    else:\n        for i in range(0,len(slist)-len(target)+1):\n            if slist[i:i+len(target)] == target:\n                return True\n    return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n# 1. Two or more items in the list \ndef is_sublist(l1,l2):\n    if l1 == l2:\n        return True\n    for i in range(len(l2)):\n        if l1[i] in l2[i:]:\n            return True\n    return False\n\n\n# 2. Check every element in the list \ndef is_sublist(l1,l2):\n    if len(l1) == 0:\n        return False\n    for i in range(len(l2)):\n        for j in range(len(l1)):\n            if l1[j] == l2[i]:\n                continue\n            elif l1[j] != l2[i]:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    for i in list2:\n        if i in list1:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    if length == 0:\n        return 'All tuples have same length'\n    tuples = [list(x) for x in tuples]\n    for x in tuples:\n        if len(x) != length:\n            return 'All tuples have same length'\n    return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    is_equal = True\n    for t in tuples:\n        if len(t) != length:\n            is_equal = False\n            break\n    if is_equal:\n        return 'All tuples have same length'\n    else:\n        return 'Not all tuples have same length'\n\n#test the function", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuple_list, length):\n    for tup in tuple_list:\n        if len(tup) != length:\n            return 'Not all tuples have equal length'\n    return 'All tuples have same length'", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    str_list = []\n    for x in tuples:\n        str_list.append(str(x))\n\n    string = ','.join(str_list)\n    string = string.split(',')\n    equal = True\n    for x in string:\n        if len(x) != length:\n            equal = False\n            break\n    if equal:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples don't have same length\"", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    assert type(tuples) == list\n    assert type(length) == int\n    all_tuples = [len(tuple) for tuple in tuples]\n    return 'All tuples have same length' if all(all_tuples == [length]) else 'Some tuples are not equal'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    if length == 0:\n        return 'All tuples have same length'\n    else:\n        tuple_length = len(tuples[0])\n        if tuple_length == length:\n            return 'All tuples have same length'\n        else:\n            return 'All tuples have different lengths'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tup, length):\n\t''' \n\tTakes in a tuple and an integer\n\tReturns a string if the tuple contains tuples of the given length, otherwise return 'Not all tuples have equal length'\n\t'''\n\n\t# Write your code here\n\tfor i in tup:\n\t\tif len(i) != length:\n\t\t\treturn 'Not all tuples have equal length'\n\treturn 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tup, n):\n    if len(tup) == n:\n        return \"All tuples have same length\"\n    else:\n        return \"Tuples are not of equal length\"\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    is_equal = True\n    for tuple in tuples:\n        if len(tuple) != length:\n            is_equal = False\n            break\n    return 'All tuples have same length' if is_equal else 'Some tuples are of different length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, n):\n    # if tuple is empty return true\n    if not tuples:\n        return True\n    # initialize max length and make it zero\n    max_len = 0\n    # iterate over tuples and find max length\n    for tuple in tuples:\n        for element in tuple:\n            # make length of tuple 1 more than max length\n            max_len = max(max_len, len(str(element)))\n    # if max_len is not equal to n return false\n    if max_len != n:\n        return False\n    # iterate over tuples and check whether all are equal or not\n    for tuple in tuples:\n        for element in tuple:\n            # check whether all elements are of equal length or not\n            if len(str(element)) != n:\n                return False\n    return 'All tuples have same length'\n\n# driver code"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nfrom unittest import TestCase\n\n\ndef comb_sort(a):\n    pass\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    for gap in reversed(range(1, len(arr))):\n        for i in range(gap, len(arr)):\n            compares = 0\n            j = i\n            while j >= gap and arr[j - gap] > arr[j]:\n                arr[j - gap], arr[j] = arr[j], arr[j - gap]\n                j -= gap\n                compares += 1\n            assert compares <= 1\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(L):\n    N = len(L)\n    if N < 2:\n        return L\n    k = 1\n    while k < N:\n        k = k*10 + 1\n    k = N//2\n    while k > 0:\n        for i in range(N-1):\n            if L[i] > L[i+1]:\n                L[i], L[i+1] = L[i+1], L[i]\n        k = k//10\n    return L", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    h = len(arr)/1.3\n    for i in range(len(arr)-1, -1, -1):\n        gap = h\n        while gap >= 1 and arr[i-gap] > arr[i]:\n            arr[i], arr[i-gap] = arr[i-gap], arr[i]\n            gap = gap/1.3\n    return arr", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(alist):\n    pass\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    pass\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nimport math\n\n\ndef comb_sort(seq):\n    m = len(seq)\n    gap = math.floor(math.sqrt(m))\n    while gap > 0:\n        for i in range(len(seq) - gap):\n            seq[i], seq[i + gap] = seq[i + gap], seq[i]\n        gap = math.floor(gap / 2)\n    return seq\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(array):\n    # initialization\n    n = len(array)\n    # test array initialization\n    for j in range(1, n):\n        gap = len(array) // j\n        for i in range(0, len(array), gap):\n            gap_insertion_sort(array, i, min(i + gap, len(array) - 1), j)\n    return array\n\n\ndef gap_insertion_sort(array, lo, hi, gap):\n    # a[lo..hi], j\n    for j in range(gap, 0, -1):\n        for i in range(lo + j, hi + 1):\n            if array[i] < array[i - j]:\n                array[i], array[i - j] = array[i - j], array[i]\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    if len(lst) <= 1:\n        return lst\n    gap = len(lst) // 2\n    while gap != 0:\n        for i in range(gap, len(lst)):\n            j = i - gap\n            while j >= 0 and lst[j] > lst[j + gap]:\n                lst[j], lst[j + gap] = lst[j + gap], lst[j]\n                j -= gap\n        gap = gap // 2\n    return lst\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    gap = len(arr)\n    while gap > 1:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            if arr[i-gap] > arr[i]:\n                arr[i], arr[i-gap] = arr[i-gap], arr[i]\n\n        gap = int(gap/1.3)\n\n    return arr\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\nimport math\n\ndef is_Square(a):\n    return math.sqrt(a) % 1 == 0\n\ndef dif_Square(a):\n    if is_Square(a):\n        return True\n    else:\n        num1 = math.sqrt(a)\n        num2 = a-num1**2\n        return is_Square(num1**2) and is_Square(num2)\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(x):\n    #check if x is a square\n    n = int(x ** 0.5)\n    #check if n is a square number\n    if n ** 2 == x:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n\n    # We can calculate the square numbers in a range\n    sq_numbers = [i**2 for i in range(1, n+1)]\n\n    # Calculate the sum of the square numbers\n    sum_sq_numbers = sum(sq_numbers)\n\n    # If the given number is equal to the sum of the square numbers\n    if n == sum_sq_numbers:\n        return True\n\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    \"\"\"\n    \"\"\"\n    return n == 0 or n % 4 == 3\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    num = str(num)\n    for i in range(1, len(num)+1):\n        n = int(num[-i:])\n        if (n*n == num[-i:]):\n            for j in range(1, i+1):\n                m = int(num[-j:])\n                if (m*m == num[-j:]):\n                    return True\n    return False\n\ndef main():\n    assert dif_Square(5) == True\n    assert dif_Square(4) == False\n    assert dif_Square(25) == True\n    assert dif_Square(44) == False\n    assert dif_Square(46) == True\n    assert dif_Square(15) == False\n    assert dif_Square(23) == True\n    assert dif_Square(14) == False\n    assert dif_Square(12) == True\n    assert dif_Square(11) == False\n    assert dif_Square(10) == True\n    assert dif_Square(9) == False\n    assert dif_Square(8) == True\n    assert dif_Square(7) == False\n    assert dif_Square(3) == True\n    assert dif_Square(2) == False\n    assert dif_Square(1) == True\n    assert dif_Square(0) == False\n    assert dif_Square(16) == True\n    assert dif_Square(17) == False\n    assert dif_Square(999) == True\n    assert dif_Square(36) == False\n    assert dif_Square(81) == True\n    assert dif_Square(99) == False\n    assert dif_Square(256) == True\n    assert dif_Square(300) == False\n    assert dif_Square(361) == True\n    assert dif_Square(24) == False\n    assert dif_Square(10000) == True\n    assert dif_Square(99999) == False\n    assert dif_Square(100000) == True\n    assert dif_Square(256) == True\n    assert dif_Square(300) == False\n    assert dif_Square(200) == True", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    for i in range(1, (n // 2) + 1):\n        if n % i == 0:\n            if (n // i) ** 2 == n:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    pass\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    if num >= 0:\n        for i in range(0, int(num/2+1)):\n            if num-i*i == i*i:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n# solution\ndef dif_Square(n):\n    return n**2 == (x-y)**2 for x in range(0,n) for y in range(0,n)\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(s):\n    return re.split(r'\\*|\\|', s)\n\n\ndef multiple_split2(s):\n    return re.split(r'(\\*|\\|)', s)\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\ndef multiple_split(text):\n    return re.split(r'[^\\w\\s]', text)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(string, delimiters):\n    return re.split(delimiters, string)", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    \"\"\"\n    return re.split(r'\\w*', string)\n\n# Test", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string: str, delimiters: str) -> list:\n    \"\"\"\n    splits the string with multiple delimiters using regex\n    \"\"\"\n    return re.split(delimiters, string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(s):\n    return [x for x in s.split(\"[^a-zA-Z0-9_]*\")]", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(s):\n    return [x for x in re.split(r'\\W*', s)]\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\ndef multiple_split(string):\n    return re.split(r\"\\n|\\*\",string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string):\n    return re.split(r'\\n|\\*\\*|\\*|\\*|\\*|\\*|\\*|\\*', string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n# my solution\ndef multiple_split(text, delimiters='\\.'):\n    new_text = []\n    for i in range(len(delimiters)):\n        if i == 0:\n            new_text.append(re.split(delimiters[i], text))\n        else:\n            new_text = new_text + [re.split(delimiters[i], text[i])]\n\n    return new_text\n\n# other solutions\ndef multiple_split(text, delimiters='\\.'):\n    new_text = re.split(delimiters, text)\n    new_text = new_text.split()\n    return new_text\n\ndef multiple_split(text, delimiters='\\.'):\n    new_text = re.split(delimiters, text)\n    new_text = [re.split(delimiters[i], new_text[i]) for i in range(len(new_text))]\n    return new_text"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, sequence):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    \"\"\"\n    if len(sequence) == len(patterns):\n        for pattern in patterns:\n            if pattern in sequence:\n                sequence.remove(pattern)\n            else:\n                return False\n    else:\n        return False\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, word):\n    i = 0\n    for pattern in patterns:\n        if word[i:i+len(pattern)] == pattern:\n            i += len(pattern)\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, words):\n    return all(patterns[0] in word for word in words)\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, seq):\n    if len(patterns) != len(seq):\n        return False\n    patterns.sort()\n    seq.sort()\n    for i in range(len(patterns)):\n        if patterns[i] != seq[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, target):\n    n = len(target)\n    for i in range(0,n-1):\n        if target[i] == target[i+1]:\n            pass\n        else:\n            return False\n\n    for pattern in patterns:\n        if pattern not in target:\n            return False\n\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, pattern_sequence):\n    for pattern in patterns:\n        for i in range(len(pattern_sequence)):\n            if pattern_sequence[i] != pattern:\n                return False\n    return True\n\n# Test", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, given):\n    result = True\n    for pat in patterns:\n        if pat not in given:\n            result = False\n    return result\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, word):\n    word = word.split()\n    print(word)\n    print(patterns)\n    if len(word) != len(patterns):\n        return False\n    for i in range(len(word)):\n        print(patterns[i], word[i])\n        if word[i] != patterns[i] and patterns[i] != \" \":\n            return False\n    return True\n\n\nis_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])```\n\n### Output:\n\n<empty_output>", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns,test):\n    s=[]\n    i=0\n    for item in patterns:\n        if patterns[i]==test[i]:\n            s.append(1)\n        else:\n            s.append(0)\n        i+=1\n    return sum(s)\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, colors):\n    # Write your code here\n    # Your code should check if the colors of the patterns follow the sequence given in the patterns array\n    if len(patterns) != len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != colors[i]:\n            return False\n    return True"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nimport pytest\n\n\ndef find_tuples(tuples, k):\n    tuples_k = [tuple(filter(lambda x: x % k == 0, t)) for t in tuples]\n    return str(tuples_k)\n\n\ndef test_find_tuples():\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(12, 18, 21), (24, 36, 42), (36, 72, 42)], 6) == '[(24, 36, 42), (36, 72, 42)]'\n    assert find_tuples([(6, 12, 18), (6, 12, 18), (6, 12, 18)], 3) == '[(6, 12, 18)]'", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    return str(tuples)[1:-1]\n\n# Test cases", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    for item in tuples:\n        for i in item:\n            if i % k != 0:\n                return '[]'\n    return '[' + str(tuples[0]) + ']'\n\n\n# assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n# assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == '[(1, 2, 3), (7, 8, 9)]'\n# assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == '[]'\n# assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == '[]'\n# assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 5) == '[]'\n# assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 6) == '[]'\n# assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 7) == '[]'\n# assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == '[]'\n# assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8,", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    l=[]\n    for i in tuples:\n        if sum(i)%k==0:\n            l.append(i)\n    return l", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\nfrom itertools import chain, combinations\n\n\ndef find_tuples(tuples, k):\n    # your code here\n    return list(chain.from_iterable(combinations(tuples, 3) if a % k == 0 or b % k == 0 or c % k == 0 else [] for a, b, c in tuples))\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(lst, k):\n    return str(tuple(filter(lambda x: x % k == 0, i) for i in lst))\n\n\n# +\n# TASK 7\n# -\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst, k):\n    \"\"\"\n    >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n    '[(6, 24, 12)]'\n    >>> find_tuples([(3, 18, 8), (6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n    '[(6, 24, 12), (12, 18, 21)]'\n    \"\"\"\n    return [tup for tup in lst if all([i % k == 0 for i in tup])]\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(list, k):\n    pass\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(list_of_tuples, k):\n    result = []\n    for tuple_ in list_of_tuples:\n        if all(element % k == 0 for element in tuple_):\n            result.append(tuple_)\n    return result\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nimport functools\ndef find_tuples(arr, k):\n    return functools.reduce(lambda x, y: x + ' ' + str(y) if k % y == 0 else x, arr, '')\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Solution\n\n\ndef count_Squares(n,m):\n    return sum([i**2 for i in range(n)])\n\n\n# Test", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(row, col):\n    # Your code here\n\n# Test", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(rows,cols):\n\treturn rows*cols\n\t", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(row, col):\n    count = 0\n    for i in range(row):\n        for j in range(col):\n            if i*i + j*j <= row*col:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(N,M):\n    return (N * (M - 1) * M) / 2\n\n\n# assert count_Squares(4, 3) == 20", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n, m):\n    return n*m\n\n# 1. Write a Python program to find the sum of the squares of all the numbers from 1 to n.\n# Example 1:\n# Input: n = 5\n# Output: 30\n# Explanation: 1^2 + 2^2 + ... + 5^2 = 1 + 4 + 9 + 16 + 25 = 30\n# Example 2:\n# Input: n = 1\n# Output: 0\n\n# Explanation: There is no number in the range of 1 to 1.\n# Example 3:\n# Input: n = 2\n# Output: 5\n# Explanation: 1^2 + 2^2 = 1 + 4 = 5\n# Example 4:\n# Input: n = 3\n# Output: 14\n# Explanation: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14\n# Example 5:\n# Input: n = 4\n# Output: 30\n# Explanation: 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n, m):\n    # Initialize counter\n    counter = 0\n    # For each number in a row\n    for i in range(0, n):\n        # For each number in a column\n        for j in range(0, m):\n            # If that number is a square\n            if i * i == j * j:\n                # Add it to the counter\n                counter += 1\n    return counter", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    total = 0\n    for i in range(height):\n        for j in range(width):\n            if (i + j) % 2 == 0:\n                total += 1\n    return total\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n# Write your code here\ndef count_Squares(n, m):\n\t# your code here\n\t# Write your code here\n\ttotal_squares = 0\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif (i ** 2) + (j ** 2) <= n ** 2:\n\t\t\t\ttotal_squares += 1\n\t\t\t\tprint(i, j, i ** 2 + j ** 2)\n\treturn total_squares\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (number):\n    n = number\n    if n < 0:\n        return False\n    sum_digits = 0\n    while n > 0:\n        sum_digits += n % 10\n        n = n // 10\n    sum_even_digits = sum_digits % 2\n    sum_odd_digits = (sum_digits - sum_even_digits) % 2\n    if sum_even_digits != sum_odd_digits:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    num=str(num)\n    return sum([int(i) for i in num if i.isdigit()]) % 2 != 0", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    odd = 0\n    even = 0\n    sum = 0\n    for i in range(len(str(num))):\n        if int(str(num)[i])%2==0:\n            even = even + int(str(num)[i])\n        else:\n            odd = odd + int(str(num)[i])\n    sum = odd + even\n    if sum%2==1:\n        return True\n    else:\n        return False\n\ndef is_Diff2(num):\n    sum=0\n    for i in str(num):\n        if i == '0':\n            continue\n        if int(i)%2 == 0:\n            sum = sum + int(i)\n        else:\n            sum = sum - int(i)\n    if sum%2==1:\n        return True\n    else:\n        return False\n\n\ndef is_Diff3(num):\n    s = str(num)\n    odd = 0\n    even = 0\n    sum = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            continue\n        if int(s[i])%2 == 0:\n            even = even + int(s[i])\n        else:\n            odd = odd + int(s[i])\n    sum = odd + even\n    if sum%2 == 1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (num):\n    even_digits = 0\n    odd_digits = 0\n    while num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 10\n    if even_digits != odd_digits:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    sum = 0\n    for i in range(10):\n        sum += (num % 10) ** 2\n    return (sum % 10) == (num % 10) ** 2\n\n# Calling the function\nnum = 12345\n\n# Calling the function", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# To check whether the input is even or odd\ndef is_Even(n):\n    if (n%2) == 0:\n        return True\n    else:\n        return False\n\n# To find sum of even digits and odd digits\ndef sumEvenOdd(n):\n    s = 0\n    while n > 0:\n        if is_Even(n):\n            s += n%10\n        else:\n            s += n%10 + 1\n        n = n//10\n    return s\n\n# To check whether the sum of even and odd digits are same or not\ndef is_Diff(n):\n    evenSum = sumEvenOdd(n)\n    oddSum = sumEvenOdd(n-1)\n    return evenSum == oddSum\n\n# Driver code", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(x):\n\ts = str(x)\n\tsum_even = 0\n\tsum_odd = 0\n\tfor i in s:\n\t\tif int(i)%2 == 0:\n\t\t\tsum_even += int(i)\n\t\telse:\n\t\t\tsum_odd += int(i)\n\tif sum_odd != sum_even:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (num):\n    d = 0\n    i = 0\n    while i < len(str(num)):\n        if int(str(num)[i])%2 == 0:\n            d = d + int(str(num)[i])\n        i = i + 1\n    while i < len(str(num)):\n        if int(str(num)[i])%2 != 0:\n            d = d + int(str(num)[i])\n        i = i + 1\n    if d%2 == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (n):\n    if n < 0:\n        return False\n    \n    even = 0\n    odd  = 0\n    \n    while n > 0:\n        if n % 2 == 0:\n            even += n % 10\n        else:\n            odd += n % 10\n            \n        n = n // 10\n        \n    return odd - even\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(num):\n    count = 0\n    while num > 0:\n        num &= num-1\n        count += 1\n    return count\n\ndef test():\n    assert count_With_Odd_SetBits(5) == 3\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(x):\n    num = 0\n    while x > 0:\n        if x % 2 == 1:\n            num += 1\n        x = x >> 1\n    return num\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    c = 0\n    for i in range(1, n+1):\n        j = i\n        if i&1 == 1:\n            c = c + 1\n        while j != 0:\n            j = j&(j-1)\n    return c\n\n#print(count_With_Odd_SetBits(3))\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(N):\n    count = 0\n    for x in range(N+1):\n        count += bin(x).count('1')%2\n    return count", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(num):\n    return sum([1 for i in range(0,num) if ((i >> bit) & 1) for bit in range(32)])\n\ndef count_With_Odd_SetBits2(num):\n    return sum(1 for i in range(0,num) if bin(i).count('1') % 2)\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    # TODO\n    return 0\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(x):\n    count = 0\n    while x != 0:\n        if x & 1:\n            count += 1\n        x = x >> 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    if n == 0:\n        return 0\n    while n > 0:\n        if (n & 1) == 1:\n            count += 1\n        n = n >> 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    #write your code here\n    if len(word)%2==0:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 != 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word)%2==1:\n        return True\n    return False\n\ndef word_len_v2(word):\n    if len(word)%2==0:\n        return False\n    return True", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# Write your function here\ndef word_len(word):\n    return len(word) % 2 != 0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 1\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return len(word) % 2 != 0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2\n\n#assert word_len('Hadoop') == False\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word)%2==0:\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(s):\n    \"\"\"\n    :param s: a string\n    :return: True if the length of the word is odd else False\n    \"\"\"\n    return len(s) % 2 != 0\n\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return ((n ** 2) + 3 * n - 3) / 2", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfrom math import factorial\n\ndef tetrahedral_number(n):\n    return (factorial(n)*factorial(n))/factorial(2*n)\n\n\n# test", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    :param n: the nth tetrahedral number to return\n    :return: the nth tetrahedral number\n    \"\"\"\n    return (n * (n + 1) * (n + 2) * (n + 3)) // 24\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n == 0:\n        return 0.0\n    elif n == 1:\n        return 1.0\n    elif n == 2:\n        return 5.0\n    else:\n        return tetrahedral_number(n - 2) * 4 * (n - 2) + 10 * tetrahedral_number(n - 3) * (n - 2) + 5 * tetrahedral_number(n - 4) * (n - 3)", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nimport math\n\n\ndef tetrahedral_number(n):\n    return 1 / (3 * (n - 1)) * (math.factorial(n + 4) - math.factorial(n - 1))\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n    \"\"\"\n    sum = 0\n    for i in range(0, n):\n        sum = sum + (i + 1) * (i + 2) * (i + 3) * (i + 4)\n    return sum\n\n# This implementation takes O(n) time and space.\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                result += 1\n    return result\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return (1/(8*math.sqrt(2)))*(n*(n+1)*(2*n+1))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return (1/3.0)*(n*(n+1)*(n+2)*(2*n+3))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    my_zip = []\n    for i in range(len(tuple1)):\n        my_zip.append((tuple1[i], tuple2[i]))\n    return my_zip\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(first_list, second_list):\n    return [ (first_list[i], second_list[i]) for i in range(len(first_list))]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    return list(zip(t1, t2))\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    zipped_tuples = []\n    for i,j in zip(t1,t2):\n        zipped_tuples.append((i,j))\n    return zipped_tuples\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    return [(t1[i], t2[i]) for i in range(len(t1))]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    return zip(t1, t2)\n\n#some tests\nt1 = (7, 8, 4, 5, 9, 10)\nt2 = (1, 5, 6)\nres = zip_tuples(t1,t2)", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    return tuple(zip(t1, t2))", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(*args):\n    pass\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\n# Write your code here\n\ndef zip_tuples(tup1, tup2):\n    l1 = len(tup1)\n    l2 = len(tup2)\n    zipped = []\n    for i in range(l1):\n        zipped.append((tup1[i], tup2[i]))\n    return zipped\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    return [list(x) for x in zip(tuple1, tuple2)]"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3 * np.pi * radius**3\n\ndef test_volume_sphere():\n    assert volume_sphere(10)==4188.790204786391\n\n#def test_volume_sphere_false():\n#    assert volume_sphere(10)==4188.790204786391\n#    assert volume_sphere(20)==4188.790204786391\n#    assert volume_sphere(21)==4188.790204786391\n#    assert volume_sphere(22)==4188.790204786391\n#    assert volume_sphere(23)==4188.790204786391\n#    assert volume_sphere(24)==4188.790204786391\n#    assert volume_sphere(25)==4188.790204786391\n#    assert volume_sphere(26)==4188.790204786391\n#    assert volume_sphere(27)==4188.790204786391\n#    assert volume_sphere(28)==4188.790204786391\n#    assert volume_sphere(29)==4188.790204786391\n#    assert volume_sphere(30)==4188.790204786391\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4*math.pi*radius**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    \"\"\"\n    volume sphere\n    \"\"\"\n    volume = (4/3)*(math.pi)*(radius**3)\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nfrom math import pi, cos\n\ndef volume_sphere(radius):\n    return 4.0 * pi * (radius ** 3) / 3.0\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3 * math.pi * radius**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nimport math\n\ndef volume_sphere(radius):\n\t#surface area of sphere\n\tarea = 4*math.pi*radius**2\n\t#volume = 1/3 of surface area of sphere\n\tvolume = (area / 3)\n\t#print(volume)\n\treturn volume\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nimport math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        Radius of sphere.\n\n    Returns\n    -------\n    volume : float\n        Volume of sphere.\n\n    \"\"\"\n    volume = 4 * math.pi * radius**3 / 3\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\n# +\n# Solution goes here\n# -\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3 * np.pi * radius**3\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nimport math\ndef volume_sphere(radius):\n    volume = 4/3 * math.pi * radius ** 3\n    return volume\n\ndef test_volume_sphere():\n    assert volume_sphere(10) == 4188.790204786391\n\ndef main():\n    test_volume_sphere()\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    l = list(s)\n    sum = 0\n    for i in range(len(l)):\n        sum += ord(l[i])\n    return chr(sum)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    return \"\".join(string)\n\ndef get_Char(string):\n    return \"\".join(string)\n\ndef get_Char(string):\n    return \"\".join(string)\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    return \"\".join(list(set(s)))\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    res = \"\"\n    for c in str:\n        res+=c\n    return res\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    return string[0]\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str1):\n    sum=0\n    for i in str1:\n        sum+=ord(i)\n    return chr(sum)", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str1):\n    str2 = \"\"\n    for char in str1:\n        str2 += char\n    return str2\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    result = \"\"\n    for x in string:\n        result += x\n    return result\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(input):\n    return input.lower().replace(\" \", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"(\", \"\").replace(\")\", \"\")", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n#Solution\ndef get_Char(str):\n    result = ''\n    for i in str:\n        result += i\n    return result\n\n#Test\n#print(get_Char(\"abc\"))\n\n#Time Complexity: O(n)\n#Space Complexity: O(n)\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    pass\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n\tseq = [1,1]\n\tcurrent = 1\n\tfor i in range(n-1):\n\t\tseq.append(current)\n\t\tcurrent = 2 * current\n\treturn seq[n]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n == 1:\n        return 1\n    return sequence(n-1) + sequence(n-2)\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    a = [1, 1]\n    while len(a) < n:\n        a = [a[-1]+a[-2]] + a\n    return a[-1]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n == 1:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)\n\n\nsequence(10)", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    previous = [0, 0, 1, 1, 1, 1, 0]\n    for i in range(1, n):\n        previous.append(previous[i-1] + previous[i-2])\n    return previous[-1]", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\nfrom random import randint\n\n\ndef sequence(n):\n    def check(a, b):\n        return a > b\n\n    def generate(a, b):\n        c = randint(a, b)\n        return c\n\n    def cond(a, b):\n        return check(a, b)\n\n    while cond(n, 0):\n        a = randint(1, n)\n        b = randint(1, n)\n        n = generate(a, b)\n    return n\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    \"\"\" return nth number in newman conway sequence \"\"\"\n    pass\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    def do_sequence(n, i=0, j=0):\n        if n == 0:\n            return 0\n        if i == n:\n            return j\n        if i == 0:\n            return sequence(n - 1, 1, j + 1)\n        if i == j:\n            return sequence(n - 1, i + 1, i)\n        if i > j:\n            return sequence(n - 1, j + 1, i)\n        else:\n            return sequence(n - 1, i + 1, j)\n    return do_sequence(n)\n\n# O(n) time and O(1) space", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    result = 1\n    while result < n:\n        result *= 2\n    return result//2\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4*3.14*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\n# write your function here\n\ndef surfacearea_sphere(radius):\n    area = 4*math.pi*radius**2\n    return area\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    surfacearea= 4*math.pi*(radius**2)\n    return surfacearea\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    area = 4 * math.pi * radius ** 2\n    return area\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    surfacearea=4*math.pi*radius**2\n    return surfacearea\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4 * (pi * radius ** 2)\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(r):\n    return 4 * np.pi * (r ** 2)\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nimport math\n\n\ndef centered_hexagonal_number(n):\n    a = 2 ** (math.floor(math.sqrt(n / 2)) + 1) - 1\n    b = n - 2 * a * (math.floor(math.sqrt(n / 2)) + 1)\n    if b % 6 == 0:\n        return a * (math.floor(math.sqrt(n / 2)) + 1) + b\n    return a * (math.floor(math.sqrt(n / 2)) + 1) + (b + 6)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nimport math\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Return the n-th centered hexagonal number.\n\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(40)\n    115132\n    >>> centered_hexagonal_number(1)\n    3\n    >>> centered_hexagonal_number(0)\n    1\n    \"\"\"\n    return sum(6*(2*i+1) for i in range(n))\n\ndef centered_hexagonal_number_slow(n):\n    \"\"\"\n    Alternative implementation.\n\n    >>> centered_hexagonal_number_slow(10)\n    271\n    >>> centered_hexagonal_number_slow(40)\n    115132\n    >>> centered_hexagonal_number_slow(1)\n    3\n    >>> centered_hexagonal_number_slow(0)\n    1\n    \"\"\"\n    return sum(6*i**2 for i in range(n))\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    :param n: the index of the centered hexagonal number\n    :type n: int\n    :return: the nth centered hexagonal number\n    :rtype: int\n    \"\"\"\n    return 3 * n * (n - 1) + 3\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    a = int(math.sqrt(8*n))\n    return 1 + 2*n + 2*a*(a+1) + a*(a+1)*(2*n-1)\n\n\n# + id=\"AZxY-X4aR6_J\"", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    if n < 0:\n        raise Exception(\"Only positive integer is allowed\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    i = 2\n    num = 0\n    while i < n:\n        num += i\n        i += 6\n    return num\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import floor\nfrom math import sqrt\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    >>> assert centered_hexagonal_number(10) == 271\n    >>> assert centered_hexagonal_number(13) == 10825\n    >>> assert centered_hexagonal_number(15) == 3324517\n    >>> assert centered_hexagonal_number(17) == 59643837\n    \"\"\"\n    sqrt_n = floor(sqrt(n))\n    # the number of hexagons in a ring at n\n    n_hex = 2 * (n - 1)\n    # the number of hexagons in the left side of the ring\n    left_hex = (n - 1 - sqrt_n)\n    # the number of hexagons in the right side of the ring\n    right_hex = (n - 1 + sqrt_n)\n    # the number of hexagons on the left side of the ring\n    left_side = left_hex * (3 * left_hex - 1) // 2\n    # the number of hexagons on the right side of the ring\n    right_side = right_hex * (3 * right_hex - 1) // 2\n    # the number of hexagons on the top side of the ring\n    top_side = (n_hex - left_side - right_side) // 2\n    # the number of hexagons on the bottom side of the ring\n    bottom_side = (n_hex - top_side) // 2\n    return 2 * top_side + 2 * bottom_side + left_side + right_side\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nimport math\ndef centered_hexagonal_number(n):\n    assert type(n) == int\n    assert n > 0\n    if n == 1:\n        return 1\n    else:\n        num = 1 + centered_hexagonal_number(n-1)\n        delta = 6*num - 5\n        if delta < 0:\n            delta = -delta\n        return delta\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nimport math\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    :param n: number\n    :return:\n    \"\"\"\n    return 6 * n * (n - 1) + 1\n\n\ndef main():\n    print(centered_hexagonal_number(10))\n    print(centered_hexagonal_number(11))\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nimport math\ndef centered_hexagonal_number(n):\n    return (n*(2*n-1))\n\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n\tdict1.update(dict2)\n\tdict1.update(dict3)\n\treturn dict1\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    d1.update(d2)\n    d1.update(d3)\n    return d1\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(d1, d2, d3):\n    return {**d1, **d2, **d3}\n\n#TESTS", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    return {**d1, **d2, **d3}\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    result = {}\n    for key in d1.keys():\n        result[key] = d1[key]\n    for key in d2.keys():\n        result[key] = d2[key]\n    for key in d3.keys():\n        result[key] = d3[key]\n    return result\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dic1, dic2, dic3):\n    dic1.update(dic2)\n    dic1.update(dic3)\n    return dic1\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # TODO: Write your code here.\n    res = {}\n    res.update(dict1)\n    res.update(dict2)\n    res.update(dict3)\n    return res\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(d1, d2, d3):\n    result = d1.copy()\n    result.update(d2)\n    result.update(d3)\n    return result\n\ndef test_merge_dictionaries_three():\n    d1 = {\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}\n    d2 = {\"G\": \"Green\", \"W\": \"White\"}\n    d3 = {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}\n    assert merge_dictionaries_three(d1, d2, d3) == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list):\n    dict = {}\n    for i in list:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] = dict[i] + 1\n    return dict\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    a={}\n    for i in lst:\n        if i in a:\n            a[i]+=1\n        else:\n            a[i]=1\n    return a", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    dct = {}\n    for val in lst:\n        if val not in dct:\n            dct[val] = 0\n        dct[val] = dct[val] + 1\n    return dct\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list):\n    d = {}\n    for i in list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lis):\n    d = {}\n    for i in lis:\n        if i in d:\n            d[i] = d[i]+1\n        else:\n            d[i] = 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(a):\n    return {value: a.count(value) for value in set(a)}\n\n# frequency of letters in 'string'\n\ndef frequency_of_letters(string):\n    \"\"\"\n    input: string\n    output: dictionary with key, value being letter and frequency of letter\n    \"\"\"\n    dict_of_letters = {}\n    for letter in string:\n        if letter not in dict_of_letters:\n            dict_of_letters[letter] = 1\n        else:\n            dict_of_letters[letter] += 1\n    return dict_of_letters\n\n# frequency of letters in 'string' with one line\ndef frequency_of_letters(string):\n    \"\"\"\n    input: string\n    output: dictionary with key, value being letter and frequency of letter\n    \"\"\"\n    return {letter: string.count(letter) for letter in set(string)}\n\n# word count\n\ndef word_count(text):\n    \"\"\"\n    input: string\n    output: dictionary with key, value being words and frequency of words\n    \"\"\"\n    words = []\n    words = text.split()\n    words = [word.lower() for word in words]\n    dict_of_words = {}\n    for word in words:\n        if word not in dict_of_words:\n            dict_of_words[word] = 1\n        else:\n            dict_of_words[word] += 1\n    return dict_of_words\n\n# word count in 'text' with one line\ndef word_count(text):\n    \"\"\"\n    input: string\n    output: dictionary with key, value being words and frequency of words\n    \"\"\"\n    words = text.split()\n    return {word: words.count(word) for word in set(words)}\n\n# list of values\n\ndef list_of_values(array):\n    \"\"\"\n    input: array\n    output: list of values in array\n    \"\"\"\n    return", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    dct = {}\n    for num in lst:\n        if num in dct.keys():\n            dct[num] += 1\n        else:\n            dct[num] = 1\n    return dct\n\n# Now, write a function that takes in a dictionary and returns the dictionary with the key-value pairs in reversed order.", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list1):\n    d = {}\n    for i in list1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(ls):\n    f_dict = {}\n    for item in ls:\n        if item in f_dict:\n            f_dict[item] += 1\n        else:\n            f_dict[item] = 1\n    return f_dict\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(l):\n    dic={}\n    for i in l:\n        if i in dic.keys():\n            dic[i]=dic[i]+1\n        else:\n            dic[i]=1\n    return dic"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    if n == 1:\n        return 0\n    if n > 1:\n        return n - 1\n    return n + 1", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nfrom typing import List\n\n\ndef closest_num(n: int) -> int:\n    left, right = 0, n\n    while left < right:\n        mid = (left + right) >> 1\n        if n - mid > mid - n:\n            left = mid + 1\n        else:\n            right = mid\n    return left if left < n else n\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    return n - (n % 10)\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    return 10\n\n# If n is 10, then the closest smaller number is 9.", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    smaller_num = n\n    for i in range(n, -1, -1):\n        if smaller_num < i:\n            smaller_num = i\n    return smaller_num\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nimport pytest\n\n\ndef closest_num(n):\n    pass\n\n\n@pytest.mark.parametrize('n', [0, 1, 11])\ndef test_closest_num(n):\n    assert closest_num(n) == n\n\n\n@pytest.mark.parametrize('n', [-1, -10])\ndef test_closest_num_lower(n):\n    assert closest_num(n) == 0\n\n\n@pytest.mark.parametrize('n', [11, 101])\ndef test_closest_num_higher(n):\n    assert closest_num(n) == 10\n\n\n@pytest.mark.parametrize('n', [2, 3])\ndef test_closest_num_equal(n):\n    assert closest_num(n) == n\n\n\n@pytest.mark.parametrize('n', [102, 1001])\ndef test_closest_num_greater(n):\n    assert closest_num(n) == 1000", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(num):\n    return num\n\n\n# 2. Write a function to find the closest smaller number than n in a list\n# assert closest_num([11,21,31,41,51]) == 10\n\ndef closest_num_list(nums):\n    return [closest_num(num) for num in nums]", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n\t# write your code here\n\tif n < 10:\n\t\treturn 0\n\tlst = [11,12,13,14,15,16,17,18,19,20,21]\n\tlst.sort()\n\tx = n - 1\n\ty = x\n\twhile y > 0:\n\t\tif x == lst[y - 1]:\n\t\t\tbreak\n\t\telse:\n\t\t\tx = lst[y - 1]\n\t\ty -= 1\n\treturn x", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    result = n\n    for num in range(n, 1, -1):\n        if num > n:\n            result = num\n            break\n    return result\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nfrom typing import List\n\ndef closest_num(n: int) -> int:\n    low, high = n, n\n    while low > 0:\n        mid = (low + high) // 2\n        if mid < n:\n            low = mid + 1\n        elif mid > n:\n            high = mid - 1\n        else:\n            return n\n    return low\n\n\ndef closest_num_v1(n: int) -> int:\n    lst = [0 for _ in range(n)]\n    for i in range(1, n):\n        lst[i] = i\n    for i in range(n - 1, 0, -1):\n        if n - i < lst[i]:\n            return n - i\n        elif n - i > lst[i]:\n            lst[i] = n - i\n    return n\n\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(logs):\n    longest = 0\n    for log in logs:\n        if len(log) > longest:\n            longest = len(log)\n    return longest\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(word_list):\n    return max(map(len, word_list))\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n\treturn max([len(word) for word in words])\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(log):\n    return max(len(word) for word in log)\n\n# time complexity : O(n)\n# space complexity : O(1)\n# is the same to the O(n) solution\n# but the solution is more elegant\n# https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/discuss/12949/Python-solution-with-explanation", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(lst):\n    max = 0\n    for string in lst:\n        if len(string) > max:\n            max = len(string)\n    return max\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\nimport sys\n\ndef len_log(words):\n    if not words:\n        return 0\n    ans = 0\n    for i in words:\n        if len(i) > ans:\n            ans = len(i)\n    return ans\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    \"\"\"\n    Find the longest word\n    :param words: List of strings\n    :return: length of longest word\n    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_len, max_word\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    \"\"\"\n    :param words: a list of words\n    :return: the length of the longest word\n    \"\"\"\n    if not words:\n        return 0\n\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len\n\n\ndef len_log(words):\n    \"\"\"\n    :param words: a list of words\n    :return: the length of the longest word\n    \"\"\"\n    if not words:\n        return 0\n\n    return max(len(word) for word in words)\n\n\ndef len_log(words):\n    \"\"\"\n    :param words: a list of words\n    :return: the length of the longest word\n    \"\"\"\n    if not words:\n        return 0\n\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(a):\n    max_len = 0\n    for word in a:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list,substring):\n    if len(substring)==0:\n        return True\n    elif len(list)<len(substring):\n        return False\n    else:\n        return substring in list[:len(substring)]\n\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(list,substring):\n    length = len(substring)\n    if length==1:\n        for i in range(len(list)):\n            if list[i].startswith(substring[0]):\n                return True\n    else:\n        for i in range(len(list)):\n            if list[i].startswith(substring[0]):\n                if list[i][length-1]==substring[length-1]:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(lst,string):\n    lst.sort()\n    for i in lst:\n        if i.find(string) != -1:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list,substr):\n    for k in range(len(list)):\n        if substr in list[k]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings, substring):\n    # write your code here\n    if (len(list_of_strings) < 1):\n        return False\n    for i in range(len(list_of_strings)):\n        if (substring in list_of_strings[i]):\n            return True\n    return False\n\n\n# + [markdown] id=\"v3fpF6Obp8me\"\n#\n#\n# ### **Problem 06**\n# Write a function to remove duplicates from a list of integers.\n#\n# assert remove_duplicates([3,3,3,3]) == [3]\n#\n#\n#\n#\n\n# + id=\"B-P1-lY4v8i_\"\ndef remove_duplicates(list_of_integers):\n    # write your code here\n    return list(set(list_of_integers))\n    \n\n\n# + [markdown] id=\"K6TGO0F-p-BD\"\n#\n#\n# ### **Problem 07**\n# Write a function to reverse a list of integers.\n#\n# assert reverse_list([1,2,3]) == [3,2,1]\n#\n#\n#\n#\n\n# + id=\"91319eH7wDvI\"\ndef reverse_list(list_of_integers):\n    # write your code here\n    return list_of_integers[::-1]\n    \n\n\n# + [markdown] id=\"awL40PG2qB1J\"\n#\n#\n# ### **Problem 08**\n# Write a function to find the position of a given integer in a list of integers.\n#\n# assert find_position([1,2,3,4,5], 1) == 0\n# assert find_position([1,2,3,4,5], 3) == 2\n# assert find_position([1,2,3,4,5], 4) == 3\n# assert find_position([1,2,3,4,5], 9) ==", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n# Solution 1\ndef find_substring(list_of_strings, substring):\n    # you code here\n    for idx in range(len(list_of_strings)):\n        #print(list_of_strings[idx])\n        if substring in list_of_strings[idx]:\n            return True\n\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list,substring):\n    for each in string_list:\n        if substring in each:\n            return True\n        else:\n            return False\n\ndef find_substring2(string_list,substring):\n    if substring in string_list:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\nfrom collections import defaultdict\n\n\ndef find_substring(string_list, substring):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n\n    :param string_list: a list of string values.\n    :param substring: a string value.\n    :return: True if substring is present in string_list, else False.\n    \"\"\"\n    string_list.sort()\n    substring = list(substring)\n    substring.sort()\n    counter = defaultdict(int)\n    for string in string_list:\n        if string[0] != substring[0]:\n            counter.clear()\n        for i in range(len(string)):\n            counter[string[i]] += 1\n        if counter == defaultdict(int)(*counter.values()):\n            break\n        for i in range(len(substring)):\n            counter[substring[i]] -= 1\n            if counter[substring[i]] < 0:\n                return False\n        counter.clear()\n    return counter == defaultdict(int)(*counter.values())\n\n\ndef find_substring_using_in(string_list, substring):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n\n    :param string_list: a list of string values.\n    :param substring: a string value.\n    :return: True if substring is present in string_list, else False.\n    \"\"\"\n    string_list.sort()\n    substring = list(substring)\n    substring.sort()\n    counter = defaultdict(int)\n    for string in string_list:\n        if string[0] != substring[0]:\n            counter.clear()\n        for i in range(len(string)):\n            counter[string[i]] += 1\n        if counter == defaultdict(int)(*counter.values()):\n            break\n        for i in range(len(substring)):\n            counter[substring[i]] -= 1\n            if counter[substring[i]] < 0:\n                return False\n        counter.clear()\n    return counter == defaultdict(int)(*counter.values())\n\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(mylist, substring):\n    mylist = [i.lower() for i in mylist]\n    substring = [i.lower() for i in substring]\n    if substring in mylist:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(strings,substring):\n    for s in strings:\n        if substring in s:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    l = []\n    for i in num:\n        if l.count(i) == 1:\n            return False\n        else:\n            l.append(i)\n    return True", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(str_num):\n    # Check for a string\n    if type(str_num) != str:\n        print(\"Please enter a string\")\n        return False\n    # Create a list of the number\n    num_list = [int(x) for x in str_num]\n    # Check if any number is greater than the previous number\n    for i in range(1, len(num_list)):\n        if num_list[i] > num_list[i-1]:\n            return True\n    return False", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    number_list = list(map(int, number))\n    min_index = 0\n    max_index = len(number_list) - 1\n    while min_index < max_index:\n        if number_list[min_index] > number_list[max_index]:\n            return False\n        if number_list[min_index] < number_list[max_index]:\n            min_index += 1\n        max_index -= 1\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    if num[0] == num[-1]:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(string):\n    result = False\n    last_num = None\n    for num in string:\n        if int(num) == int(last_num) == 1 or int(num) == int(last_num) == 0:\n            result = True\n        else:\n            result = False\n        last_num = num\n    return result", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number):\n  count = 1\n  for index in range(1, len(number)):\n    if number[index] != number[index - 1]:\n      count += 1\n      if count > 2:\n        return False\n  return True\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(s):\n    undulating = False\n    # This part of the code will generate the list of lengths\n    # of each substring in the string\n    lengths = []\n    for index in range(len(s) - 1):\n        lengths.append(len(s[index:index+2]))\n    # This part will determine if the list of lengths\n    # is undulating or not\n    if all(lengths[0] != lengths[1]):\n        undulating = True\n    return undulating\n\n# Tests", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    n = len(num)\n    if n < 3:\n        return True\n    for i in range(1, n-1, 2):\n        if num[i-1] > num[i] and num[i] > num[i+1]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(str):\n    if len(str) <= 2:\n        return True\n    if len(str) == 3 and str[0] == str[-1] == str[1]:\n        return True\n    if len(str) == 4 and str[0] == str[-1] == str[1] == str[2]:\n        return True\n    for i in range(1,len(str)-1):\n        if str[i-1] == str[i+1]:\n            if str[i] == str[i-1] or str[i] == str[i+1]:\n                return True\n    return False\n\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    return a**b", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    return a**b", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    if a == 1 and b == 1:\n        return 1\n    else:\n        return a * power(a, b-1)\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n# Solution\ndef power(a,b):\n    # Use a loop to calculate the answer\n    sum = 1\n    for i in range(b):\n        sum = sum * a\n    return sum\n\n# Test it out!", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    \"\"\"\n    input:\n        a: int\n        b: int\n    output:\n        int\n    \"\"\"\n    # do something\n    return a**b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n\tproduct = 1\n\tfor i in range(b):\n\t\tproduct *= a\n\treturn product\n\ndef main():\n\tassert power(3,4) == 81\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    #return a**b\n    p=1\n    for i in range(b):\n        p*=a\n    return p\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    \"\"\"\n    a = 3\n    b = 4\n    \"\"\"\n    if a == 0 and b > 0:\n        return 0\n    elif a == 1 and b == 0:\n        return 1\n    elif b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b//2) ** 2\n    else:\n        return a * power(a, b-1)", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n\t#TODO\n\n\treturn b\n\n# Tests", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n  ans = 1\n  for _ in range(b):\n    ans *= a\n  return ans\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(l):\n    def func(t1, t2):\n        if t1[1] < t2[1]:\n            return t1\n        return t2\n    return min(l, key=lambda x:func(x,l[0]))[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    \"\"\"\n    Extract the index minimum value record from the given tuples.\n    \"\"\"\n    pass\n\n#-----------------------------TEST----------------------------------------\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    min_value = tuples[0][1]\n    min_name = tuples[0][0]\n    for i in range(len(tuples)):\n        if tuples[i][1] < min_value:\n            min_value = tuples[i][1]\n            min_name = tuples[i][0]\n    return min_name\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    # Your code here\n    return min(tuples)[1]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(records):\n    min = records[0]\n    for i in range(1,len(records)):\n        if records[i][1] < min[1]:\n            min = records[i]\n    return min[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuple_list):\n    # Write your code here\n    min_idx = 0\n    min_val = tuple_list[0][1]\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i][1] < min_val:\n            min_val = tuple_list[i][1]\n            min_idx = i\n    return tuple_list[min_idx][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    \"\"\"\n    Input: List of tuples (name, age)\n    Output: The name of the student who has the minimum age in the list\n    \"\"\"\n    return min(enumerate(tuples), key=lambda x: x[1])[0]\n\ndef index_minimum_2(tuples):\n    \"\"\"\n    Input: List of tuples (name, age)\n    Output: The name of the student who has the minimum age in the list\n    \"\"\"\n    min_tuple = min(tuples, key=lambda x: x[1])\n    return min_tuple[0]\n\n# assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n# assert index_minimum_2([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    \"\"\"\n    :param tuples: a list of tuples in the form of (name, grade)\n    :return: the name of the student with minimum grade\n    \"\"\"\n    def get_grade(grade):\n        return grade[1]\n    sorted_tuples = sorted(tuples, key=get_grade)\n    return sorted_tuples[0][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(T):\n    # initilize\n    min = T[0]\n    for i in range(1, len(T)):\n        if T[i][1] < min[1]:\n            min = T[i]\n    return min[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n# Your function here\ndef index_minimum(tuples):\n    for index, value in enumerate(tuples):\n        if value[1] < tuples[index][1]:\n            return value[0]\n\n# Better solution\ndef index_minimum(tuples):\n    result = None\n    for index, value in enumerate(tuples):\n        if result is None or value[1] < result[1]:\n            result = value\n    return result[0]\n\n# Tests"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    list_len = len(lst)\n    smallest_list = lst[0]\n    for i in range(1,list_len):\n        smallest_list = min(smallest_list,lst[i])\n    return len(smallest_list)\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    min_length = 2**10\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(L):\n    if len(L) == 1:\n        return 1\n    else:\n        return min(len(l) for l in L[1:]) + 1\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(L):\n    if len(L) == 1:\n        return 0\n    elif len(L) == 2:\n        return 1\n    else:\n        return min(map(len, L))\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(sublists):\n    min_length = 2000000000\n    for s in sublists:\n        if len(s) < min_length:\n            min_length = len(s)\n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(arr):\n    # Your code here\n    return 1\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    if len(lst) <= 1:\n        return len(lst)\n\n    min_len = min(len(l) for l in lst)\n    for l in lst:\n        if len(l) == min_len:\n            return min_len\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(L):\n    if not L:\n        return 0\n    else:\n        return min(len(x) for x in L)\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef find_min_length(ls):\n    temp = []\n    for l in ls:\n        if len(temp) == 0:\n            temp = l\n        elif len(l) < len(temp):\n            temp = l\n    return len(temp)\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef find_min_length(l):\n    min_length = 100\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            length = j-i+1\n            if length < min_length:\n                min_length = length\n    return min_length\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    div = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div.append(i)\n    return len(div)", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(a):\n    num_divisor = 0\n    for i in range(1,a+1):\n        if a % i == 0:\n            num_divisor += 1\n            if i == a//i:\n                num_divisor -= 1\n    return num_divisor\n\n\ndef main():\n    print(divisor(15))\n    ", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(num):\n    count = 0\n    for i in range(1, num+1):\n        if num%i == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(num):\n    if num <= 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        count = 2\n        for i in range(2,num):\n            if (num % i == 0):\n                count += 1\n        return count\n\n# this is what we have seen before\ndef divisor2(num):\n    count = 0\n    for i in range(1, num+1):\n        if (num % i == 0):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    if n == 1:\n        return 1\n    else:\n        divisors = [1]\n        for i in range(1, n):\n            if n % i == 0:\n                divisors.append(i)\n        return len(divisors)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n#function\ndef divisor(number):\n    divisors = 0\n    for x in range(1,number+1):\n        if number % x == 0:\n            divisors = divisors + 1\n    return divisors\n\n\n#print results", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    # Define a function that returns a list of all divisors of an integer\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(num):\n    \"\"\"\n    num is an int\n    \"\"\"\n    count = 1\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n\n# Tests", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lst):\n    pass\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    new_dict = {}\n    for i in lists:\n        for j in i:\n            if j not in new_dict:\n                new_dict[j] = 1\n            else:\n                new_dict[j] += 1\n    return new_dict", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    result = {}\n    for item in lists:\n        for item_list in item:\n            result[item_list] = result.get(item_list, 0) + 1\n    return result\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(ls):\n    \"\"\"\n    :param ls: a list of lists\n    :return: a dictionary containing elements as keys and their frequency as values\n    \"\"\"\n    return {element: ls.count(element) for element in set(ls)}\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    frequency_dict = {}\n    for i in lists:\n        for j in i:\n            if j in frequency_dict:\n                frequency_dict[j] += 1\n            else:\n                frequency_dict[j] = 1\n    return frequency_dict\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    d = dict()\n    for l in lists:\n        for x in l:\n            if x not in d:\n                d[x] = 0\n            d[x] = d[x] + 1\n    return d\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(a):\n    result = {}\n    for i in a:\n        for j in i:\n            result[j] = result.get(j, 0) + 1\n    return result\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    result = {}\n    for list in lists:\n        for num in list:\n            result[num] = result.get(num, 0) + 1\n    return result", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(my_list_of_lists):\n    my_dict = {}\n    for item in my_list_of_lists:\n        for value in item:\n            if value not in my_dict:\n                my_dict[value] = 1\n            else:\n                my_dict[value] += 1\n    return my_dict\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    frequency = {}\n    for element in lists:\n        for element2 in element:\n            if element2 in frequency:\n                frequency[element2] += 1\n            else:\n                frequency[element2] = 1\n    return frequency\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n    total = 1\n    for x in nums:\n        total *= x\n    return total/len(nums)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(x):\n    result=1\n    for n in x:\n        result*=n\n    return result/len(x)\n\nmultiply_num([1, 2, 3, 4, 5])\n\n# +", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(numbers):\n    sum = 1\n    for i in numbers:\n        sum *= i\n    return sum / len(numbers)\n\ndef multiply_num(numbers):\n    return sum(numbers) / len(numbers)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n\tresult = 1.0\n\tfor n in nums:\n\t\tresult *= n\n\treturn result / len(nums)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(num_list):\n    num_result = 1\n    for num in num_list:\n        num_result *= num\n    return num_result/len(num_list)", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    m=1\n    for num in nums:\n        m*=num\n    return m/len(nums)\n\n# assert multiply_num(input())==float(input())\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    return sum(nums) * len(nums)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n\treturn sum(nums)*1.0/len(nums)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numbers):\n    result = 0\n    for number in numbers:\n        result = result*number\n    return result/len(numbers)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(list):\n    mul = 1\n    for i in list:\n        mul = mul * i\n    return mul / len(list)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    \"\"\"\n    :param n: A positive integer.\n    :return: The binary equivalent of n.\n    \"\"\"\n    if n == 0:\n        return '0'\n    return str(bin(n))[2:]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef decimal_to_binary(decimal: int) -> str:\n    if decimal == 0:\n        return '0'\n\n    res = ''\n\n    while decimal > 0:\n        res = str(decimal % 2) + res\n        decimal = decimal // 2\n\n    return res[::-1]\n\n\ndef decimal_to_binary2(decimal: int) -> str:\n    res = ''\n\n    while decimal > 0:\n        res = str(decimal % 2) + res\n        decimal //= 2\n\n    return res[::-1]\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal):\n    binary_string = ''\n    while decimal > 0:\n        binary_string += str(decimal % 2)\n        decimal //= 2\n    return binary_string\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(dec):\n    if dec < 0:\n        return '0'\n    if dec == 0:\n        return '0'\n    res = ''\n    while dec > 0:\n        res = str(dec % 2) + res\n        dec = dec // 2\n    return res\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(x):\n    bin_num = bin(x)[2:]\n    return bin_num\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n# Complete the decimal_to_binary function below.\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal / 2)\n    return binary\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(number):\n    binary = ''\n    while number > 0:\n        binary = str(number % 2) + binary\n        number = number // 2\n    return binary", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = '0' + binary\n        n -= 1\n    return binary[::-1]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal_number):\n    binary_number = \"\"\n    decimal_number = str(decimal_number)\n    if len(decimal_number) > 0:\n        binary_number = \"1\"\n        for char in decimal_number:\n            binary_number += str(int(char))\n    return binary_number\n\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    while True:\n        candidate = n * 10 + (n + 1) // 2\n        if is_palindrome(candidate):\n            return candidate\n        else:\n            n += 1\n\ndef is_palindrome(n):\n    s = str(n)\n    return s == s[::-1]\n\n\n# Next palindrome after 101 is 102, which is 1021.", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n# Solution: \n# Easy solution\n# 1. find the first and last digits of number\n# 2. swap the first and last digits of the number and add 1. This will get the next smallest palindrome\n# 3. do the same for the next pair of digits and so on until the first digit is equal to the last.\n\n# the first digit can be any number between 10 to 99. For the last digit, we can use 99-x as its less than 100\n\ndef next_smallest_palindrome(number):\n    number = str(number)\n    x = len(number) - 1\n    while x > 0:\n        y = 99 - int(number[x])\n        if x == 0:\n            new_num = y\n        else:\n            new_num = y + int(number[x-1]) * 10 ** x\n        if str(new_num)[::-1] == str(number):\n            return int(new_num)\n        x -= 1\n\n\n# test case", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    n = str(num)\n    n = n[::-1]\n    n = n[1:] + n[0]\n    return int(n)\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(number):\n    number = str(number)\n    if len(number)==1:\n        return number+'0'\n    elif len(number)==2:\n        return '10'\n    else:\n        if int(number[-1])>int(number[-2]):\n            return number[:-1]+str(int(number[-1])+1)\n        else:\n            return number[:-2]+str(int(number[-2])+1)+str(int(number[-1])+1)", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    n = str(n)\n    n = n[-2::-1] + n[:-2]\n    n = int(n)\n    return n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n#this is a list of all the digits in decimal\nDIGITS = [0,1,2,3,4,5,6,7,8,9]\n\ndef is_palindrome(num):\n    \"\"\"\n    return True if num is a palindrome\n    \"\"\"\n    return num == num[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    return the next palindrome number, larger than num, which is also a palindrome\n    \"\"\"\n    if is_palindrome(num):\n        return num + 1\n    elif num % 10 == 0:\n        return num + 1\n    else:\n        while True:\n            new_num = num\n            for i in DIGITS:\n                new_num = new_num * 10 + i\n                if is_palindrome(new_num) and new_num > num:\n                    return new_num\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(number):\n    sum = number // 10\n    while sum*10 + number % 10 != number:\n        sum -= 1\n    number += sum*10\n    number = str(number)\n    return int(number[::-1])\n\ndef next_smallest_palindrome2(number):\n    sum = number // 10\n    while sum*10 + number % 10 != number:\n        sum += 1\n    number += sum*10\n    number = str(number)\n    return int(number[::-1])\n\ndef next_smallest_palindrome3(number):\n    sum = number // 10\n    while number != sum*10 + number % 10:\n        sum += 1\n    number += sum*10\n    number = str(number)\n    return int(number[::-1])\n\ndef next_smallest_palindrome4(number):\n    sum = number // 10\n    while number != (sum*10 + number % 10)[::-1]:\n        sum += 1\n    number += sum*10\n    number = str(number)\n    return int(number[::-1])\n\ndef next_smallest_palindrome5(number):\n    sum = number // 10\n    while number != int(str(sum*10 + number % 10)[::-1]):\n        sum += 1\n    number += sum*10\n    number = str(number)\n    return int(number[::-1])", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    :param n: int, a palindromic number\n    :return: int, the next smallest palindromic number\n    \"\"\"\n    n_str = str(n)\n    n_len = len(n_str)\n    n_list = [int(x) for x in n_str]\n    for i in range(n_len):\n        n_list[i] = n_len - i - 1\n    n_list = [str(x) for x in n_list]\n    return int(''.join(n_list))", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    # 3.1\n    # * n = 99\n    # * n + 1 = 100\n    # * n = 100 - 1 = 99\n    # * 100 - 99 = 1\n    # * 100 - 99 + 1 = 101\n    # return 101\n\n    # 3.2\n    # * n = 99\n    # * n + 1 = 100\n    # * 100 - 99 = 1\n    # * 100 - 99 + 1 = 101\n    # return 101\n\n    # 3.3\n    # * n = 99\n    # * n + 1 = 100\n    # * 100 - 99 = 1\n    # * 100 - 99 + 1 = 101\n    # return 101\n    # 3.4\n    # * n = 99\n    # * n + 1 = 100\n    # * 100 - 99 = 1\n    # * 100 - 99 + 1 = 101\n    # return 101\n    # 3.5\n    # * n = 99\n    # * n + 1 = 100\n    # * 100 - 99 = 1\n    # * 100 - 99 + 1 = 101\n    # return 101\n\n    # 3.6\n    # * n = 99\n    # * n + 1 = 100\n    # * 100 - 99 = 1\n    # * 100 - 99 + 1 = 101\n    # return 101\n    # 3.7\n    # * n = 99\n    # * n + 1 = 100\n    # * 100 - 99 = 1\n    # * 100 - 99 + ", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    if num == 99:\n        return 101\n    s = str(num)\n    s = s[::-1]\n    for i in range(len(s)):\n        if s[i] != s[i+1]:\n            s = s[:i+1] + str(int(s[i])+1) + s[i+2:]\n            break\n    return int(s[::-1])\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, start):\n    lo, hi = start, len(arr) - 1\n    while lo <= hi:\n        mid = (lo + hi)//2\n        if mid == k-1:\n            return arr[mid]\n        elif mid < k-1:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n# https://www.geeksforgeeks.org/python-program-to-find-the-kth-smallest-element-in-a-sorted-and-rotated-array/\ndef kth_smallest(arr, k):\n    if k == 1:\n        return arr[0]\n    n = len(arr)\n    if n == 0 or k > n:\n        return \"Array is empty or k is greater than n\"\n\n    if k == n:\n        return arr[n-1]\n\n    l = 0\n    r = n-1\n\n    while l < r:\n        m = l + (r - l)//2\n\n        if arr[m] > arr[r]:\n            r = m\n        else:\n            l = m+1\n\n    return arr[l]\n\n\n# https://www.geeksforgeeks.org/python-program-to-find-the-kth-largest-element-in-a-sorted-and-rotated-array/\ndef kth_largest(arr, k):\n    if k == 1:\n        return arr[0]\n    n = len(arr)\n    if n == 0 or k > n:\n        return \"Array is empty or k is greater than n\"\n\n    if k == n:\n        return arr[n-1]\n\n    l = 0\n    r = n-1\n\n    while l < r:\n        m = l + (r - l)//2\n\n        if arr[m] < arr[l]:\n            r = m\n        else:\n            l = m+1\n\n    return arr[l]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(array, k, num):\n    count = 0\n    for num in array:\n        count += 1\n    if count < k:\n        return False\n    if count == k:\n        return array[k-1]\n\n    left, right = 0, count-1\n    while left <= right:\n        mid = (left + right) // 2\n        if count > k:\n            count -= mid\n        if count < k:\n            left = mid + 1\n        if count == k:\n            return array[k-1]\n    return False", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(a, k, i=0):\n    if i >= len(a):\n        return None\n    if i == k - 1:\n        return a[i]\n    j = kth_element(a, k, i+1)\n    if j == None:\n        return None\n    return j\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, n):\n    count = 0\n    for i in range(n):\n        count += arr[i]\n    step = (count / n)\n    return step * k + arr[k]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(a, k, i):\n    # O(n)\n    # We can sort the array and return the element at the right position.\n    # The array will be sorted by definition.\n\n    # O(log n)\n    # Using binary search\n    a.sort()\n    start = 0\n    end = len(a)-1\n    while True:\n        mid = (start + end) / 2\n        if mid == i:\n            return a[k]\n        if a[k] > a[i]:\n            end = mid-1\n        elif a[k] < a[i]:\n            start = mid+1\n        else:\n            return a[k]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(a, k, start):\n    \"\"\"\n    :param a:\n    :param k:\n    :param start:\n    :return:\n    \"\"\"\n    if k > len(a)-start:\n        return None\n    return binary_search(a, k, start, len(a)-start-1)\n\n\ndef binary_search(a, k, start, end):\n    \"\"\"\n    :param a:\n    :param k:\n    :param start:\n    :param end:\n    :return:\n    \"\"\"\n    if start > end:\n        return None\n    mid = (start + end) / 2\n    if k == mid:\n        return a[mid]\n    elif k < mid:\n        return binary_search(a, k, start, mid-1)\n    else:\n        return binary_search(a, k, mid+1, end)\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, k_left, k_right):\n    if k_left == k_right:\n        return arr[k_left]\n\n    middle = (k_left + k_right) // 2\n    if k < middle:\n        return kth_element(arr, k, k_left, middle)\n    else:\n        return kth_element(arr, k, middle + 1, k_right)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(a, k, n):\n    return a[n]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\n# # O(N) solution\n\n# The O(N) solution simply considers all elements in the array and counts them.  The runtime of this solution is O(N).\n\ndef kth_element_naive(array, k, i):\n    count = 0\n    for j in range(len(array)):\n        if j >= i:\n            count += 1\n        if count == k:\n            return array[j]\n    raise ValueError(\"Could not find kth element\")\n\n\n# # O(N) solution\n\n# The O(N) solution uses a binary search.  First, it finds the middle of the array, and then looks at the value of the middle element and compares it to the value of the kth element.  If the kth element is less than the middle element, it then searches the left half of the array.  If the kth element is greater than the middle element, it then searches the right half of the array.\n\ndef kth_element_recursive(array, k, i):\n    if len(array) == 0:\n        raise ValueError(\"Array must be non-empty\")\n    if k == 0:\n        return array[0]\n    if k > len(array):\n        raise ValueError(\"k must be less than the length of the array\")\n    if len(array) == 1:\n        return array[0]\n    middle = len(array) // 2\n    if array[middle] < k:\n        return kth_element_recursive(array[middle+1:], k, i+1)\n    elif array[middle] > k:\n        return kth_element_recursive(array[:middle], k, i)\n    else:\n        return array[middle]\n\n\n# # Tests\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, n):\n    \"\"\"\n    returns the kth smallest element in the given array.\n    \"\"\"\n    return array[n - k]\n\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\nimport re\ndef snake_to_camel(string):\n    string = re.sub(r'_([a-z0-9])', lambda m: m.group(1).upper(), string)\n    return string[0].upper() + string[1:]", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(input_str):\n    input_str = input_str.replace('_','')\n    list_of_str = input_str.split(' ')\n    new_str = list_of_str[0]\n    for i in range(len(list_of_str)-1):\n        new_str+=list_of_str[i][0].upper()+list_of_str[i][1:]\n    return new_str\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake):\n    res = \"\"\n    for i in range(len(snake)):\n        if snake[i].isupper():\n            if i!=0:\n                res+=snake[i].upper()\n            else:\n                res+=snake[i].lower()\n        else:\n            if i!=0:\n                res+=snake[i]\n            else:\n                res+=snake[i].lower()\n    return res\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(word):\n    word=word.split('_')\n    if len(word)==1:\n        return word[0]\n    else:\n        return word[0]+(word[1].capitalize())*(len(word)-1)\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\nimport re\n\ndef snake_to_camel(input_str):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), input_str)\n\n\n# +", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    if len(s)==0:\n        return s\n    else:\n        if s[0].isupper():\n            return s[0].upper() + snake_to_camel(s[1:])\n        else:\n            return s[0] + snake_to_camel(s[1:])\n\n#test cases\ns = 'python_program'", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    s1 = s.split(\"_\")\n    s2 = [x.capitalize() for x in s1]\n    s3 = \"\".join(s2)\n    return s3\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(word):\n    import re\n    x = re.split('_',word)\n    y = ''\n    for i in range(len(x)):\n        y = y + x[i].capitalize()\n        if i < len(x)-1:\n            y = y + '' + x[i+1].lower()\n    return y\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\nimport re\n\ndef snake_to_camel(snake_str):\n    return re.sub(r'\\_([a-z])', lambda m: m.group(1).upper(), snake_str)\n\ndef snake_to_camel_v2(snake_str):\n    return ''.join(word.capitalize() for word in snake_str.split('_'))\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(text):\n    words = text.split(\"_\")\n    result = words[0]\n    for i in range(1, len(words)):\n        result += words[i][0].upper() + words[i][1:]\n    return result"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    n_list = range(1, n + 1)\n    m_list = range(1, m + 1)\n    return sum(i ** 2 for i in range(1, n + m + 1) if i in n_list and i in m_list)", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    return 2**(n*m)\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    Return the number of eulerian permutations of n letters.\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(2, 3)\n    5\n    >>> eulerian_num(2, 4)\n    16\n    \"\"\"\n    import math\n    import collections\n    import itertools\n    if n == 2:\n        return 5\n    # base case: 2 people, 3 positions\n    if n == 2 and m == 3:\n        return 5\n    # base case: 3 people, 4 positions\n    if n == 3 and m == 4:\n        return 16\n    # base case: 2 people, 4 positions\n    if n == 2 and m == 4:\n        return 21\n    # base case: 3 people, 5 positions\n    if n == 3 and m == 5:\n        return 41\n    # base case: 3 people, 6 positions\n    if n == 3 and m == 6:\n        return 72\n    # base case: 4 people, 6 positions\n    if n == 4 and m == 6:\n        return 116\n    # base case: 4 people, 7 positions\n    if n == 4 and m == 7:\n        return 181\n    # base case: 5 people, 7 positions\n    if n == 5 and m == 7:\n        return 265\n    # base case: 5 people, 8 positions\n    if n == 5 and m == 8:\n        return 363\n    # base case: 6 people, 8 positions\n    if n == 6 and m == 8:\n        return 488\n    # base case: 6 people, 9 positions\n    if n == 6 and m == 9:\n        return 645\n    # base case: 7 people, 9 positions\n    if n == 7 and m == 9:\n        return 841\n    # base case: 7 people, 10 positions\n    if n == 7 and m == 10:", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 1 or m == 1:\n        return 1\n    else:\n        return 2*n*eulerian_num(n-1, m)+eulerian_num(n, m-1)\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    pass\n\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    num = 0\n    if (n > 0) and (m > 0) and (n * m == 1):\n        for i in range(0, n):\n            for j in range(0, m):\n                num += 1\n    return num\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    m -= 1\n    eulerian = 0\n    for i in range(1, m + 1):\n        eulerian += (n - i + 1) * i ** m\n    return eulerian\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n < 1:\n        return 0\n\n    # base case\n    if n == 1:\n        return 1\n\n    # can only be true if n - 1 == m\n    if m < n - 1:\n        return 0\n\n    # recursion\n    return (m * eulerian_num(n - 1, m - 1)) + (n * eulerian_num(n - 1, m))", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    assert n >= 1 and m >= 1\n    return n ** 2 * (n - 1) // 2 + n * m\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nfrom typing import List\n\ndef eulerian_num(n: int, m: int) -> int:\n    def make_graph(n: int) -> List[List[int]]:\n        graph = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i + j == n - 1:\n                    graph[i][j] = 1\n        return graph\n\n    def dfs(graph: List[List[int]], node: int, path: List[int], cur_len: int) -> bool:\n        if cur_len == m:\n            return True\n        if node in path:\n            return False\n        path.append(node)\n        for i in range(len(graph)):\n            if graph[node][i] == 1 and dfs(graph, i, path, cur_len + 1):\n                return True\n        path.pop()\n        return False\n\n    graph = make_graph(n)\n    path = []\n    return sum([1 for i in range(n) if dfs(graph, i, path, 1)])\n\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(sublists):\n    return sorted(sublists, key = lambda l: l)\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(l):\n    return [[y for y in x if \"e\" in y] + [y for y in x if \"e\" not in y] for x in l]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(L):\n    def sort_sublist(sublist):\n        return sorted(sublist, key = lambda x: x[::-1])\n    return [sort_sublist(l) for l in L]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n#Solution\ndef sort_sublists(l):\n    return [sorted(subl, key=lambda x: x) for subl in l]\n\n#Test", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(x):\n    x.sort(key=lambda y:y)\n    return x\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(L):\n    # YOUR CODE HERE\n    pass\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    return [sorted(item, key=lambda x: x[0]) for item in lst]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(l):\n    return [[x for x in sorted(sublist, key = lambda x: len(x))] for sublist in l]", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return [sorted(lst[i], key=lambda x: x.lower()) for i in range(len(lst))]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(l):\n    l = [sorted(i, key = lambda i: i.lower()) for i in l]\n    return l\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(list):\n    count = 0\n    for item in list:\n        if item == True:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(list):\n    return list.count(True)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(arg):\n    return arg.count(True)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(l):\n    return sum(1 for i in l if i)\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(list):\n\treturn len([True for x in list if x])\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_true(my_list):\n    return my_list.count(True)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(list_):\n    count = 0\n    for item in list_:\n        if item:\n            count = count + 1\n    return count\n\n#assert count([True,False,True]) == 2\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(a, b):\n    a_list = list(a)\n    b_list = list(b)\n    c_list = a_list + b_list\n    return tuple(c_list)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    list1.extend(list2)\n    return list1\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(t1, t2):\n    return t1 + t2\n\ndef test_add_lists():\n    assert add_lists([1, 2], [3]) == [1, 2, 3]\n    assert add_lists([1, 2], [3, 4]) == [1, 2, 3, 4]\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lst1, lst2):\n    return lst1 + lst2\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, *args):\n    # list1.extend(args[0])\n    # return list1\n    res = list(list1)\n    res.extend(args[0])\n    return res\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lst, t):\n    return t + lst\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, list2):\n    return list1 + list2\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, t):\n    l2 = []\n    for i in t:\n        l2.append(i)\n    for j in l1:\n        l2.append(j)\n    return tuple(l2)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lists, tuple):\n    for i in range(len(lists)):\n        tuple.insert(i, lists[i])\n    return tuple\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\n#Solution\ndef count_Hexadecimal(start,end):\n    return (end-start+1)//2\n\n#Solution2\ndef count_Hexadecimal(start,end):\n    return ((end-start+1)//2)\n\n#Solution3\ndef count_Hexadecimal(start,end):\n    return (end-start+1)//2\n\n#Solution4\ndef count_Hexadecimal(start,end):\n    return ((end-start)//2)+1", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    \"\"\"\n\n    :param start:\n    :param end:\n    :return:\n    \"\"\"\n    count=0\n    for i in range(start, end+1):\n        if i%16==0 or i%16==4 or i%16==8 or i%16==12:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n\tresult = 0\n\tif(end >= start):\n\t\tfor i in range(start,end+1):\n\t\t\tif (hex(i)[2:] == '0'):\n\t\t\t\tresult = result + 1\n\t\treturn result\n\telse:\n\t\tprint('End should be greater than start')\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    return (end-start) // 16 + 1\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(low, high):\n    count = 0\n    for i in range(low, high):\n        if i > 15:\n            break\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    \"\"\"Count Hexadecimal numbers in a given range\"\"\"\n    count = 0\n    for i in range(start, end+1):\n        if hex(i)[2:] == '0x' or hex(i)[2:] == 'x':\n            count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end):\n        num = hex(i)\n        if len(num) == 4 and num[0] == '0' and num[1] == 'x':\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start,end):\n    return (end - start + 1) * 4\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\nimport math\n\n\ndef count_Hexadecimal(start, stop):\n    return math.ceil((stop - start + 1) / 16)\n\n\n# print(count_Hexadecimal(10, 15))\n# 6", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if str(hex(i)).startswith('0x'):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nclass Heap(object):\n    def __init__(self,l=[]):\n        self.heap = l\n        self.index = 0\n        self.buildHeap(l)\n\n    def buildHeap(self,l):\n        \"\"\"\n        Build heap from a list\n        \"\"\"\n        self.heap = [0] + l\n        self.index = len(self.heap) - 1\n        self.shiftUp()\n\n    def shiftUp(self):\n        \"\"\"\n        Move the root node up the heap\n        \"\"\"\n        if self.index <= 0:\n            return\n        index = self.index\n        parent = int((index - 1)/2)\n        while index > 0 and self.heap[index] < self.heap[parent]:\n            self.heap[parent], self.heap[index] = self.heap[index], self.heap[parent]\n            index = parent\n            parent = int((index - 1)/2)\n\n    def shiftDown(self,start,end):\n        \"\"\"\n        Move the node start up the heap until it is smaller than its children\n        \"\"\"\n        if start == end:\n            return\n        index = start\n        left = 2*index + 1\n        right = 2*index + 2\n        if left <= end and self.heap[left] < self.heap[index]:\n            smallest = left\n        else:\n            smallest = index\n        if right <= end and self.heap[right] < self.heap[smallest]:\n            smallest = right\n        if smallest != index:\n            self.heap[index], self.heap[smallest] = self.heap[sm", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(list1,list2,list3):\n    list1,list2,list3 = map(list, (list1,list2,list3))\n    list1.extend(list2)\n    list1.extend(list3)\n    list1 = sorted(list1)\n    res = []\n    heap = []\n    for i in range(len(list1)):\n        if not heap:\n            heapq.heappush(heap, list1[i])\n        else:\n            if list1[i] >= heap[0]:\n                heapq.heappush(heap, list1[i])\n            else:\n                res.append(heapq.heappop(heap))\n                heapq.heappush(heap, list1[i])\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nclass HeapQueue:\n    def __init__(self, data):\n        self.heap = []\n        for item in data:\n            self.heappush(item)\n\n    def getmin(self):\n        if self.heap == []:\n            return None\n        return self.heap[0]\n\n    def heappush(self, item):\n        self.heap.append(item)\n        self.swim(len(self.heap)-1)\n\n    def swim(self, k):\n        while k > 0 and self.heap[k] < self.heap[k//2]:\n            self.heap[k], self.heap[k//2] = self.heap[k//2], self.heap[k]\n            k = k//2\n\n    def heappop(self):\n        if self.heap == []:\n            return None\n        else:\n            item = self.heap[0]\n            self.heap[0] = self.heap[-1]\n            self.heap.pop()\n            self.sink(0)\n            return item\n\n    def sink(self, k):\n        while 2*k <= len(self.heap)-1:\n            j = 2*k\n            if j+1 <= len(self.heap)-1 and self.heap[j+1] < self.heap[j]:\n                j = j+1\n            if self.heap[k] <= self.heap[j]:\n                break\n            self.heap[k], self.heap[j] = self.heap[j], self.heap[k]\n            k = j\n\ndef", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nimport heapq\n\ndef merge_sorted_list(lists):\n    heap = []\n    for lst in lists:\n        for x in lst:\n            heapq.heappush(heap, x)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom heapq import *\n\n\ndef merge_sorted_list(*args):\n    result = []\n    q = []\n    for l in args:\n        for x in l:\n            heappush(q, x)\n\n    while q:\n        x = heappop(q)\n        result.append(x)\n    return result\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef merge_sorted_list(l1, l2, l3):\n    heaps = [(l1, 0), (l2, 1), (l3, 2)]\n    result = []\n    while heaps:\n        list_data, i = heappop(heaps)\n        item = list_data[i]\n        if item:\n            heappush(heaps, (list_data, i+1))\n            result.append(item)\n    return result\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom collections import Counter, OrderedDict\nimport heapq\n\ndef merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    :param list1: List of numbers sorted in ascending order\n    :param list2: List of numbers sorted in ascending order\n    :param list3: List of numbers sorted in ascending order\n    :return: merged list in ascending order\n    \"\"\"\n    list_merged = []\n    count = Counter()\n    for item in list1:\n        count[item] += 1\n    for item in list2:\n        count[item] += 1\n    for item in list3:\n        count[item] += 1\n    for key in count:\n        for i in range(count[key]):\n            list_merged.append(key)\n    return list_merged\n\ndef merge_sorted_list_stack(list1, list2, list3):\n    \"\"\"\n    :param list1: List of numbers sorted in ascending order\n    :param list2: List of numbers sorted in ascending order\n    :param list3: List of numbers sorted in ascending order\n    :return: merged list in ascending order\n    \"\"\"\n    list_merged = []\n    list_stack = [list1, list2, list3]\n    while list_stack:\n        list_curr = list_stack.pop()\n        if list_curr:\n            list_merged += list_curr\n    return list_merged\n\ndef merge_sorted_list_heap(list1, list2, list3):\n    \"\"\"\n    :param list1: List of numbers sorted in ascending order\n    :param list2: List", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n#approach 1: use heap to maintain the sorted order of input\ndef merge_sorted_list(a,b,c):\n    h=list(a)+list(b)+list(c)\n    heapq.heapify(h)\n    while h:\n        yield heapq.heappop(h)\n\n#approach 2: merge-sort the list\ndef merge_sorted_list(a,b,c):\n    for i in merge_sorted_list(a,b):\n        yield i\n    for i in merge_sorted_list(c):\n        yield i\n\n#approach 3: merge the list in pairs\ndef merge_sorted_list(a,b,c):\n    pa, pb, pc = iter(a), iter(b), iter(c)\n    while True:\n        yield next(pa,None), next(pb,None), next(pc,None)\n        if pa.done or pb.done or pc.done:\n            break\n\n#approach 4: merge the list in pairs in a generator expression\ndef merge_sorted_list(a,b,c):\n    pa, pb, pc = iter(a), iter(b), iter(c)\n    while True:\n        yield (yield next(pa,None), next(pb,None), next(pc,None))\n        if pa.done or pb.done or pc.done:\n            break\n\n#approach 5: merge the list in pairs in a generator expression\ndef merge_sorted_list(a,b,c):", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1,list2,list3):\n    list_heap = []\n    for i in list1:\n        list_heap.append(i)\n    for i in list2:\n        list_heap.append(i)\n    for i in list3:\n        list_heap.append(i)\n    return merge_sorted_heap(list_heap)\ndef merge_sorted_heap(list_heap):\n    merged_list = []\n    while len(list_heap) > 1:\n        list_heap[0] = (list_heap[0][0],list_heap[0][1])\n        heapq.heapify(list_heap)\n        a = heapq.heappop(list_heap)\n        b = heapq.heappop(list_heap)\n        merged_list.append(a[1])\n        merged_list.append(b[1])\n    return merged_list"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(a,b):\n    rotations = 0\n    if len(a) != b:\n        return 0\n    for i in range(b):\n        rotations += 1 if a[i] == a[-(i+1)] else 0\n    return rotations\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string,len_string):\n    odd_number = 0\n    for i in range(len_string):\n        temp = string[:i]+string[i+1:]\n        if len(temp) == len_string:\n            if int(temp,2) == 1:\n                odd_number += 1\n    return odd_number", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary, n):\n    if binary[n] == '0':\n        return 1\n    else:\n        return odd_Equivalent(binary, n+1) + odd_Equivalent(binary, n+2) + odd_Equivalent(binary, n+3)\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str,odd):\n    c=0\n    for i in range(odd):\n        for j in range(len(str)-odd+1):\n            if str[j:j+odd]==str[j+i:j+i+odd]:\n                c+=1\n    return c", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s,n):\n    res = 0\n    flag = 0\n    for i in range(n):\n        if int(s[i])%2!=flag:\n            res+=1\n        flag = int(s[i])%2\n    return res\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(str1, n):\n    # Write your code here\n    answer = 0\n    for i in range(1, len(str1)+1):\n        if str1[:i] == str1[i::]:\n            answer += 1\n    return answer", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(b,k):\n    count = 0\n    for i in range(k):\n        if b[i] == \"0\":\n            b = b[i+1:] + b[0:i+1]\n        else:\n            b = b[i:] + b[0:i]\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s,n):\n    return s.count('1')%2!=0\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str,n):\n    count = 0\n    for i in range(0,n):\n        count += int(str[i])\n    if count%2 != 0:\n        return count\n    return 0\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s, n):\n    return s.count(\"1\") % (n+1)\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n# my solution, without sorting:\ndef extract_missing(arr, s, e):\n    ans = []\n    for (l, h) in arr:\n        if l < s or h > e:\n            ans.extend([(l, s-1), (s, h), (h+1, e)])\n    return ans\n\n\n# other solutions:\ndef extract_missing(arr, s, e):\n    ans = []\n    for i in range(len(arr)):\n        if arr[i][0] < s or arr[i][1] > e:\n            if i == 0 or arr[i-1][1] != arr[i][0]:\n                ans.append((arr[i][0], s - 1))\n            ans.append((s, arr[i][1]))\n            if i == len(arr) - 1 or arr[i+1][0] != arr[i][1]:\n                ans.append((arr[i][1] + 1, e))\n    return ans\n\ndef extract_missing(arr, s, e):\n    arr.sort(key = lambda x: (x[1], x[0]))\n    ans = []\n    cur = None\n    for (l, h) in arr:\n        if cur and h == cur[1] + 1:\n            cur = (cur[0], e)\n        elif cur:\n            ans.append(cur)\n            cur = (l, h)\n        elif l == s and h > e:\n            ans.append((l, e))\n        elif l > s and h == s:\n            cur = (l, e)\n        else:\n            ans.append((l, h))\n    if cur:\n        ans.append(cur)\n    return ans", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, s, e):\n    ret_list = []\n    for r in ranges:\n        if r[0] < s:\n            ret_list.append((s, r[0]))\n        if r[1] > e:\n            ret_list.append((r[1], e))\n    return ret_list", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(list, start, end):\n    if not list:\n        return []\n    ranges = []\n    for i in range(start, end + 1):\n        start, end = None, None\n        for r in list:\n            if r[0] == i:\n                start = r[1]\n            elif r[1] == i:\n                end = r[0]\n            if start and end:\n                ranges.append((start, end))\n                start, end = None, None\n    return ranges\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\nfrom typing import List\n\ndef extract_missing(lst: List[List[int]], start: int, end: int) -> List[List[int]]:\n    missing_ranges = []\n    for i, item in enumerate(lst):\n        if item[0] > start or item[1] < end:\n            missing_ranges.append(item)\n    missing_ranges.sort()\n    return missing_ranges\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(arr, start, end):\n    return [x for x in range(start, end+1) if x not in [x[0] for x in arr] or x not in [x[1] for x in arr]]\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\nfrom typing import List\n\n\ndef extract_missing(ranges: List[List[int]], start: int, end: int) -> List[List[int]]:\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n    missing = []\n    for i in range(start, end + 1):\n        if i not in [r[0] for r in ranges] or i not in [r[1] for r in ranges]:\n            missing.append((i, i))\n    return missing", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lst, start, end):\n    return [(start, end)]\n\n# Test", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    # initialize a new list to store the missing ranges\n    missing_ranges = []\n    # iterate over the given list to extract the missing ranges\n    for start_r, end_r in lst:\n        if start_r > end:\n            missing_ranges.append((start, end_r))\n        if start_r > end_r:\n            missing_ranges.append((start, end))\n            missing_ranges.append((end_r, start_r))\n        if start_r < end and end_r > start:\n            missing_ranges.append((start_r, end))\n        if start_r < end and end_r < start:\n            missing_ranges.append((start, end_r))\n            missing_ranges.append((start, start_r))\n    # return the missing ranges\n    return missing_ranges\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    missing = []\n    for start_range, end_range in ranges:\n        if start_range < start:\n            missing.append((start, start_range))\n        elif end_range > end:\n            missing.append((end_range, end))\n    return missing\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lists, start_range, end_range):\n    results = []\n    for list in lists:\n        if list[0] < start_range:\n            results.append((start_range, list[0]))\n        if list[1] > end_range:\n            results.append((list[1], end_range))\n        if start_range < list[0] < list[1] < end_range:\n            pass\n        else:\n            results.append((list[0], list[1]))\n    return results\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    if len(lists) == 0:\n        return []\n    else:\n        result = []\n        for x in lists[0]:\n            if all([x in y for y in lists]):\n                result.append(x)\n        return result\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(ls):\n    \"\"\"\n    :param ls: list of lists\n    :return: list of common elements\n    \"\"\"\n    if ls == []:\n        return None\n    elif len(ls) == 1:\n        return list(set(ls[0]))\n    else:\n        a = common_in_nested_lists(ls[0])\n        b = common_in_nested_lists(ls[1])\n        c = list(set(a).intersection(set(b)))\n        return c", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(l):\n    return set(l[0]).intersection(*l[1:])", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(nested_lists):\n    final_list = []\n    for list in nested_lists:\n        for i in list:\n            if i in final_list:\n                continue\n            else:\n                final_list.append(i)\n    return final_list", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    return [item for sublist in nested_lists for item in sublist]\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\nfrom typing import List\n\n\ndef common_in_nested_lists(list_of_lists: List[List[int]]) -> List[int]:\n    return list(set.intersection(*set(set(list_of_lists[0]))))\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    # find a way to return the common elements in a list\n    # for loop to find common elements in all lists\n    # return a new list with common elements in all lists\n\n    new_list = []\n\n    # find the first list, put the elements in the new list\n    for i in range(len(lists)):\n        for x in lists[i]:\n            new_list.append(x)\n\n    # check if all elements in the list are in all the lists\n    # to check if elements in a list is in other lists\n    # we can use a nested for loop\n    for x in new_list:\n        for i in range(len(lists)):\n            for y in lists[i]:\n                if x == y:\n                    return x\n\n    return 0\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    common = [a for a in lists[0]]\n    for l in lists[1:]:\n        common = [x for x in common if x in l]\n    return common", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    if not lists:\n        return []\n    return set(lists[0]).intersection(*[set(x) for x in lists[1:]])\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(nested_list):\n    \"\"\"\n    Find common elements in given nested lists.\n    \"\"\"\n    return list(set(nested_list[0]) & set(nested_list[1]))\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    p = 2 * (r+h)\n    return p\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(a,b):\n    \"\"\"\n    returns the perimeter of a cylinder with radius a and height b\n    \"\"\"\n    return 2*a + b*2\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    \"\"\"\n    This is a function that takes two arguments (radius and height)\n    and returns the perimeter of a cylinder.\n    \"\"\"\n    return (2*radius) + (2*height)\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\nimport math\ndef perimeter(r,h):\n    return 2*(r*math.pi + h)\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, length):\n    return 2*length + 2*radius*math.pi\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius,length):\n    return 2*radius*length + 2*radius\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\nimport math\n\n\ndef perimeter(radius, height):\n    \"\"\"\n    Method to find the perimeter of a cylinder\n    :param radius: radius of the cylinder\n    :param height: height of the cylinder\n    :return: perimeter of the cylinder\n    \"\"\"\n    return 2 * math.pi * radius + 2 * height\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    \"\"\"\n    Args:\n        r (float): radius\n        h (float): height\n    Returns:\n        float: perimeter\n    \"\"\"\n    return 2*r+2*h\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(a, b):\n\tperimeter = 2*a+2*b\n\treturn perimeter\n\n# Tests for perimeter function", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    return 2*r*h+2*r\n\n\n# -\n\n# ### 4. Write a python function to calculate the surface area of a sphere.\n#\n#\n# $$S=4\\pi r^2$$\n#\n# assert surface_area(5) == 4*np.pi*5**2\n\ndef surface_area(r):\n    return 4*np.pi*r**2\n\n\n# ### 5. Write a python function to calculate the volume of a sphere.\n#\n# $$V=4\\pi r^3/3$$\n#\n# assert volume(5) == 4*np.pi*5**3/3\n\ndef volume(r):\n    return 4*np.pi*r**3/3\n\n\n# ### 6. Write a python function to compute the distance between two points on a 2D plane.\n#\n# $$d=\u221a(x_1-x_2)^2+(y_1-y_2)^2$$\n#\n# assert distance(5,5,5,5) == 0\n\ndef distance(x1,y1,x2,y2):\n    return np.sqrt((x1-x2)**2+(y1-y2)**2)\n\n\n# ### 7. Write a python function to compute the minimum of a list\n#\n# assert min([1,5,3,4]) == 1\n\ndef min_list(x):\n    return min(x)\n\n\n# ### 8. Write a python function to compute the maximum of a list\n#\n# assert max([1,5,3,4]) == 5\n\ndef max_list(x):\n    return max(x)\n\n\n# ### 9. Write a python function to compute the mean of a list\n#\n# assert mean([1,5,3,4]) == 3\n\ndef mean_list(x):\n    return sum(x)/len(x)\n\n\n# ### 10. Write a python function to compute the median of a list\n#\n# assert median([1,5"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(text):\n    \"\"\"\n    Returns a boolean value, depending on whether text is an integer\n    or not.\n\n    >>> check_integer(\"1234\")\n    True\n    >>> check_integer(\"python\")\n    False\n    >>> check_integer(\"-1234\")\n    True\n    >>> check_integer(\"\")\n    False\n    \"\"\"\n    if text.isdigit():\n        return True\n    else:\n        return False\n\n# print(check_integer(\"python\"))\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(number):\n    if number.isdigit() == True:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n# write your code here\ndef check_integer(n):\n    try:\n        int(n)\n        return True\n    except:\n        return False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    if s[0] == '-':\n        if len(s) == 1:\n            return False\n    try:\n        i = int(s)\n        return True\n    except:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n# Write your code here:\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(str):\n    try:\n        int(str)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(input_string):\n    if input_string.isdigit():\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(st):\n    st = st.strip()\n    if len(st)==0:\n        return False\n    if st[0] == '-':\n        st = st[1:]\n    if not st.isdigit():\n        return False\n    return True\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    string = string.replace(\" \",\"\")\n    for char in string:\n        if char.isdigit() == False:\n            return False\n        else:\n            pass\n    return True\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tlist):\n    retlist = []\n    for item in tlist:\n        tuple_counts = []\n        for tup in tlist:\n            if tup == item:\n                tuple_counts.append(tuple_counts.count(tup)+1)\n        retlist.append(tuple_counts)\n    return retlist\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(l):\n    def count(l):\n        # YOUR CODE HERE\n        pass\n    return [list(map(count,x)) for x in l]\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(a):\n    freq = {}\n    for i in a:\n        for i in i:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n    result = []\n    for i in freq:\n        result.append((i, freq[i]))\n    return result\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tup_list):\n    freq_dict = {}\n    for tup in tup_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return [f'{tup} ({freq})' for tup, freq in freq_dict.items()]\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuple_list):\n    new_tuple_list = []\n    for i in tuple_list:\n        temp_tuple = (i,)\n        temp_tuple_list = []\n        for j in temp_tuple:\n            if j in temp_tuple_list:\n                temp_tuple_list[temp_tuple_list.index(j)] += 1\n            else:\n                temp_tuple_list.append(j)\n        new_tuple_list.append(temp_tuple_list)\n    return new_tuple_list\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(t):\n    freq = {}\n    for item in t:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuple_list):\n    count = 0\n    tup_freq = []\n    for tup in tuple_list:\n        tup_freq.append(tup + (count,))\n        count += 1\n    return tup_freq\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tup_list):\n    if len(tup_list) == 0:\n        return []\n    max_freq = 1\n    tups = []\n    for tup in tup_list:\n        temp_freq = 1\n        for tuple_ in tup_list:\n            if tuple_ == tup:\n                continue\n            if tup in tuple_:\n                temp_freq += 1\n        if max_freq < temp_freq:\n            max_freq = temp_freq\n            tups = [tup]\n        elif max_freq == temp_freq:\n            tups.append(tup)\n    tups.sort()\n    return tups\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(lst):\n    return [(x[0], x[1], x[2], lst.count(x)) for x in lst]\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    frequencies = {}\n    for i in tuples:\n        frequencies[i] = 0\n    for i in tuples:\n        frequencies[i] += 1\n    for key in frequencies:\n        if frequencies[key] == 1:\n            del frequencies[key]\n    for i in tuples:\n        if frequencies[i] != 0:\n            frequencies[i] = frequencies[i] - 1\n    for i in sorted(frequencies.items(), key=lambda x: x[0]):\n        i[1] = frequencies[i[0]]\n    return str(frequencies)\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dic_list):\n\tfor i in dic_list:\n\t\tfor key in i:\n\t\t\tif i[key] != None:\n\t\t\t\treturn False\n\treturn True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lista):\n    for dict in lista:\n        if len(dict) != 0:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dits):\n    for dit in dits:\n        for key in dit:\n            if key != 'value':\n                return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dict_list):\n    if len(dict_list)==0:\n        return True\n    for item in dict_list:\n        if item=={}:\n            continue\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(l):\n    for d in l:\n        if len(d):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lst):\n    return all([d=={} for d in lst])\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(x):\n    for d in x:\n        if d:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dits):\n    flag=True\n    for i in dits:\n        if i!={}:\n            flag=False\n            break\n    return flag\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(ls):\n    for dic in ls:\n        for key in dic.keys():\n            if dic[key]==0:\n                return False\n    return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(l):\n    for dic in l:\n        if dic != {}:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    return sum([n*10**i for i,n in enumerate(t)])\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    assert type(tup)==tuple\n    assert all(type(x) == int for x in tup)\n    return int(''.join(str(x) for x in tup))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\nfrom typing import Tuple\n\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n\n    >>> tuple_to_int((1,2,3))\n    123\n    >>> tuple_to_int((1,2,3,4))\n    1234\n    >>> tuple_to_int((1,2,3,4,5))\n    12345\n    >>> tuple_to_int((1,2,3,4,5,6))\n    123456\n    >>> tuple_to_int(())\n    0\n    >>> tuple_to_int((1))\n    1\n    >>> tuple_to_int((1,2,3,4,5,6,7,8))\n    12345678\n    >>> tuple_to_int((1,2,3,4,5,6,7,8,9))\n    123456789\n    >>> tuple_to_int((1,2,3,4,5,6,7,8,9,10))\n    12345678910\n    \"\"\"\n\n    return reduce(lambda x, y: x * 10 + y, nums)\n\n\ndef reduce(f, sequence):\n    return f(sequence[0], reduce(f, sequence[1:]))\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    a = 1\n    for i in tup:\n        a *= i\n    return a", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(a_tuple):\n    return sum(10**i*a for (i,a) in enumerate(a_tuple))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    return sum([i*10**i for i in range(len(t))]) * 10**len(t) + t[0]\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tuple_in):\n    x = 0\n    for item in tuple_in:\n        x = x * 10 + item\n    return x", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(int_tuple):\n    return reduce(lambda x, y: x*10 + y, int_tuple)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    if not t:\n        return 0\n    else:\n        return reduce(lambda x, y: x*10 + y, t, 0)", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    return [(float(i), float(j)) for i,j in lst]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float( l ):\n    for i in range(len(l)):\n        if type(l[i]) == list:\n            l[i] = list(map(float, l[i]))\n    return l\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(ls):\n    return_ls = []\n    for i in ls:\n        new_i = []\n        for j in i:\n            if type(j) == str:\n                new_i.append(float(j))\n            else:\n                new_i.append(j)\n        return_ls.append(tuple(new_i))\n    return return_ls\n\n\n# print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))\n# print(list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ))", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lista):\n    return [(float(x[0]), float(x[1])) for x in lista]\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(list_of_tuples):\n    return [(float(first), float(second)) for (first, second) in list_of_tuples]\n\n# Test\nlist_of_tuples = [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(input_list):\n    return [(float(input_list[i][0]), float(input_list[i][1])) for i in range(len(input_list))]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    return map(lambda x: (float(x[0]), float(x[1])), lst)\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_):\n    list_.sort()\n    list_ = [float(str(item[0])) for item in list_]\n    list_ = [(item, float(str(item[1]))) for item in list_]\n    return list_\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    lst_float = []\n    for el in lst:\n        lst_float.append( (float(el[0]), float(el[1])) )\n    return lst_float"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    string=string.replace(\" \",\"\")\n    return string.split(\",\")\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n\treturn string.split()\n\n# Test", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(s):\n    s_list = s.split()\n    return s_list\n\ndef string_to_list(s):\n    s = s.split()\n    return s", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(my_string):\n    return my_string.split(\" \")", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    result=[]\n    temp=string.split(\" \")\n    for i in temp:\n        result.append(i)\n    return result\n\n# assert string_to_list(\"python programming\")==['python','programming']\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    list_ = []\n    for char in string:\n        list_.append(char)\n    return list_", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split(\" \")\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(text):\n    return text.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(s):\n    \"\"\"\n    :param s: str\n    :return: list[str]\n    \"\"\"\n    if s == \"\" or s == None:\n        return []\n    if s == \" \":\n        return []\n    if s[0] == \" \":\n        return string_to_list(s[1:])\n    return [s] + string_to_list(s[1:])\n\n\ndef string_to_list1(s):\n    \"\"\"\n    :param s: str\n    :return: list[str]\n    \"\"\"\n    if s == \"\" or s == None:\n        return []\n    if s == \" \":\n        return []\n    if s[0] == \" \":\n        return [\"\"] + string_to_list(s[1:])\n    return [s] + string_to_list1(s[1:])\n\n\ndef string_to_list2(s):\n    \"\"\"\n    :param s: str\n    :return: list[str]\n    \"\"\"\n    return [s] + string_to_list(s[1:])\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    return str.split()\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nimport numpy as np\n\ndef search(arr,val):\n    lower=0\n    upper=len(arr)-1\n\n    while lower<=upper:\n        mid=(upper+lower)//2\n        if val==arr[mid]:\n            return mid\n        if val<arr[mid]:\n            upper=mid-1\n        else:\n            lower=mid+1\n\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nfrom typing import List, Optional\n\n\ndef search(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given an sorted array and a target, return the element that appears only once.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return arr[mid]\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\ndef search2(arr: List[int], target: int) -> int:\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            left, right = left + 1, right - 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\n# TEST", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr,ele):\n    if arr[0] == ele:\n        return 0\n    elif arr[-1] == ele:\n        return len(arr)-1\n    else:\n        start = 0\n        end = len(arr)-1\n        while start <= end:\n            mid = int((start+end)/2)\n            if arr[mid] == ele:\n                return mid\n            elif arr[mid] > ele:\n                end = mid-1\n            else:\n                start = mid+1\n    return -1", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(array,element):\n    left = 0\n    right = len(array)-1\n    while right >= left:\n        mid = left + (right-left)//2\n        if array[mid] == element:\n            right = mid - 1\n        elif array[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if right >= 0:\n        return array[right]\n    else:\n        return -1", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, val):\n\n    # Using binary search\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n\n        mid = left + (right - left) // 2\n\n        if val == arr[mid]:\n            return val\n\n        if val < arr[mid]:\n            right = mid - 1\n\n        else:\n            left = mid + 1\n\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,val):\n\tl=0\n\tr=len(arr)-1\n\twhile l<=r:\n\t\tm = l + (r-l)//2\n\t\tif val==arr[m]:\n\t\t\treturn arr[m]\n\t\telif val>arr[m]:\n\t\t\tl=m+1\n\t\telif val<arr[m]:\n\t\t\tr=m-1\n\treturn 0", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left if nums[left] == target else -1\n\ndef search_2(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        if nums[i] == target or nums[j] == target:\n            i += 1\n            j -= 1\n        elif nums[i] < target:\n            i += 1\n        else:\n            j -= 1\n    if nums[i] == target:\n        return i\n    else:\n        return -1\n\ndef search_3(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(A,key):\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if key == A[i] and key == A[j]:\n                return key\n    return -1\nA = [1,1,2,2,3]\nkey = 3", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(A,k):\n\t\"\"\"\n\tFind a number k in an array A\n\tArgs:\n\t\tA: a sorted array\n\t\tk: the number to search in A\n\tReturns:\n\t\tA number k in A\n\t\"\"\"\n\tlow,high = 0, len(A)-1\n\twhile low <= high:\n\t\tmid = (high+low)//2\n\t\tif A[mid] == k:\n\t\t\treturn k\n\t\telif A[mid] > k:\n\t\t\thigh = mid-1\n\t\telse:\n\t\t\tlow = mid+1\n\treturn -1\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, key):\n    \"\"\"Return the element that appears only once in a sorted array.\"\"\"\n\n    # Your code here\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] == key:\n            j = mid\n        elif arr[mid] > key:\n            j = mid\n        else:\n            i = mid + 1\n\n    return arr[i]\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3]\n    print(search(arr, 5))\n\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(pairs):\n    max_product = 1\n    for p in pairs:\n        max_product = max(max_product, p[0]*p[1])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(l):\n    m_product = 0\n    for i in l:\n        for j in l:\n            m_product = max(m_product, i[0]*j[1])\n    return m_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    return max([tup[0] * tup[1] for tup in tuples])", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    max_product = 0\n    for tup in tuples:\n        for second_tup in tuples:\n            if (tup != second_tup):\n                max_product = max(max_product, tup[0] * tup[1] * second_tup[0] * second_tup[1])\n    return max_product", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n    max_prod = 0\n    for first, second in lst:\n        prod = first*second\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(mylist):\n    \"\"\"\n    Returns the maximum product of tuples in mylist\n    \"\"\"\n    max_product = 0\n    for x in mylist:\n        for y in mylist:\n            if x[0] == y[0]:\n                max_product = max(max_product, x[1]*y[1])\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(list_of_tuples):\n    max_product = 1\n    for index in range(len(list_of_tuples)):\n        for index1 in range(len(list_of_tuples)):\n            max_product = max(list_of_tuples[index] * list_of_tuples[index1], max_product)\n    return max_product", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n    max_val = 0\n    for x in lst:\n        for y in lst:\n            if x != y:\n                val = x[0]*x[1]*y[0]*y[1]\n                if val > max_val:\n                    max_val = val\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(list_of_tuples):\n    max_product = 0\n    for item in list_of_tuples:\n        for item2 in list_of_tuples:\n            if item != item2:\n                max_product = max(max_product, item[0]*item2[1])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tupl):\n    max_product=1\n    for x in tupl:\n        for y in tupl:\n            if x==y:\n                continue\n            product=x[0]*x[1]*y[0]*y[1]\n            if product>max_product:\n                max_product=product\n    return max_product\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, x, y, z):\n    arr.sort()\n    total = arr[-1] + arr[-2] + arr[-3]\n    if x+y+z == total:\n        return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, sum1, sum2, sum3):\n    \"\"\"checks if a triplet is present in the array with given sum\"\"\"\n    arr.sort()\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            if arr[j]+arr[i] == sum1:\n                k = 2*j+1\n                while k<len(arr):\n                    if arr[k]+arr[j]+arr[i] == sum3:\n                        return True\n                    k+=1\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(numbers, t1, t2):\n    numbers.sort()\n    for i in range(len(numbers)-2):\n        l = i + 1\n        r = len(numbers) - 1\n        while l < r:\n            s = numbers[i] + numbers[l] + numbers[r]\n            if s == t1 or s == t2:\n                return True\n            elif s > t1:\n                r -= 1\n            else:\n                l += 1\n    return False", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, sum1, sum2, sum3):\n    if len(arr) < 3:\n        return False\n    arr.sort()\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum1 or arr[i] + arr[j] + arr[k] == sum2 or arr[i] + arr[j] + arr[k] == sum3:\n                    return True\n    return False\n\ndef check_triplet2(arr, sum1, sum2, sum3):\n    if len(arr) < 3:\n        return False\n    arr.sort()\n    triplets = []\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum1:\n                    triplets.append([arr[i], arr[j], arr[k]])\n                elif arr[i] + arr[j] + arr[k] == sum2:\n                    triplets.append([arr[i], arr[j], arr[k]])\n                elif arr[i] + arr[j] + arr[k] == sum3:\n                    triplets.append([arr[i], arr[j], arr[k]])\n    print triplets\n    return True\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(a, x, y, z):\n    if (a[x] + a[y] == a[z]):\n        return True\n    return False\n\ndef check_triplet_alternate(a, x, y, z):\n    if (a[x] + a[y] != a[z]):\n        return False\n    return True\n\ndef test_function(a, b, x, y, z):\n    assert check_triplet(a, x, y, z) == b\n\n# test_function([2, 7, 4, 0, 9, 5, 1, 3], True, 0, 1, 2)\n# test_function([2, 7, 4, 0, 9, 5, 1, 3], False, 0, 1, 3)", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(array, sum1, sum2, sum3):\n    for i in range(len(array)):\n        for j in range(len(array)):\n            for k in range(len(array)):\n                if(sum1 == (array[i] + array[j] + array[k])):\n                    return True\n    return False", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(array, sum1, sum2, x):\n    if array is None or array == []:\n        return False\n    \n    if sum1 + sum2 == x:\n        return True\n    \n    for index in range(0, len(array)):\n        if index > 0 and array[index] == array[index - 1]:\n            continue\n        \n        if array[index] + sum1 == x:\n            return True\n        \n        if array[index] + sum2 == x:\n            return True\n        \n    return False\n\narray = [2, 7, 4, 0, 9, 5, 1, 3]\nsum1 = 8\nsum2 = 6\nx = 0", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(nums, x, y, z):\n    nums.sort()\n    for i in range(len(nums) - 2):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            if (nums[i] + nums[j] + nums[k] == x) or (nums[i] + nums[j] + nums[k] == y) or (nums[i] + nums[j] + nums[k] == z):\n                return True\n            elif nums[i] + nums[j] + nums[k] > x:\n                k -= 1\n            elif nums[i] + nums[j] + nums[k] < x:\n                j += 1\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(a, sum1, sum2, result):\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (sum(a[i:j+1]) == sum1 and sum(a[j:k+1]) == sum2) or (sum(a[i:j+1]) == sum2 and sum(a[j:k+1]) == sum1):\n                    if sum(a[i:k+1]) == result:\n                        return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(array, a, b, c):\n    # array.sort()\n    # find the triplet\n    for i in range(0, len(array)-2):\n        for j in range(i+1, len(array)-1):\n            for k in range(j+1, len(array)):\n                if array[i] + array[j] + array[k] == a:\n                    if array[i] == a:\n                        if array[j] == b:\n                            if array[k] == c:\n                                return True\n                    else:\n                        continue\n                else:\n                    continue\n    return False\n\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nfrom functools import lru_cache\n\n\ndef smartNumber(n):\n    @lru_cache(maxsize=None)\n    def fn(k):\n        return n * 10 ** (k + 1) - k\n    if n < 10:\n        return fn(n)\n    for i in range(10):\n        if fn(i) % 9 == 0:\n            return fn(i)\n\n\ndef smartNumber2(n):\n    return n * 10 ** (n + 1) - (n + 1) * 10 // 9\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    if n > 1:\n        return smartNumber(n-1)*10 + 30\n    if n < 1:\n        raise ValueError(\"n cannot be less than 1\")", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    return int(n**2) + 1", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    \"\"\"\n    Find n\u2019th smart number\n    >>> smartNumber(1)\n    30\n    >>> smartNumber(2)\n    45\n    >>> smartNumber(3)\n    56\n    >>> smartNumber(4)\n    65\n    >>> smartNumber(5)\n    70\n    >>> smartNumber(6)\n    75\n    >>> smartNumber(7)\n    78\n    >>> smartNumber(8)\n    80\n    >>> smartNumber(9)\n    81\n    >>> smartNumber(10)\n    82\n    >>> smartNumber(11)\n    83\n    >>> smartNumber(12)\n    84\n    >>> smartNumber(13)\n    85\n    >>> smartNumber(14)\n    86\n    >>> smartNumber(15)\n    87\n    >>> smartNumber(16)\n    88\n    >>> smartNumber(17)\n    89\n    >>> smartNumber(18)\n    90\n    >>> smartNumber(19)\n    91\n    >>> smartNumber(20)\n    92\n    >>> smartNumber(21)\n    93\n    >>> smartNumber(22)\n    94\n    >>> smartNumber(23)\n    95\n    >>> smartNumber(24)\n    96\n    >>> smartNumber(25)\n    97\n    >>> smartNumber(26)\n    98\n    >>> smartNumber(27)\n    99\n    >>> smartNumber(28)\n    100\n    >>> smartNumber(29)\n    101\n    >>> smartNumber(30)\n    102\n    >>> smartNumber(31)\n    103\n    >>> smartNumber(32)\n    104\n    >>> smartNumber(33)\n    105\n    >>> smartNumber(34)\n    106\n    >>> smartNumber(35)\n    107\n    >>> smartNumber(36)\n    108\n    >>> smartNumber(37)\n    109\n    >>> smartNumber(38)\n    110\n    >>> smartNumber(39)\n    111\n    >>> smartNumber(40)\n    112\n    >>> smartNumber(41)\n    113\n    >>> smartNumber(42)\n    114\n   ", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    return smartNumber(n-1) * 30\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    total = 0\n    for i in range(1, n+1):\n        total += sum(map(lambda x: x*x, map(str, range(1,i))))\n    return total\n\n\ndef smartNumber2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(int(x) ** 2 for x in str(n))\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    l = list(range(10, 9999))\n    l.reverse()\n    # l = [9998, 9997, 9996, ..., 10]\n    result = 0\n    count = 0\n    for item in l:\n        if item > 9:\n            result += item\n            count += 1\n        if count >= n:\n            return result\n\n# print(smartNumber(2))", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nfrom util.primes import prime_factors\nfrom util.utils import pair_product\nfrom util.primes import prime_sieve\n\ndef is_perfect_number(n):\n    \"\"\"\n    Returns True if n is a perfect number.\n    \"\"\"\n    sum_of_divisors = sum(prime_factors(n))\n    return n == sum_of_divisors\n\ndef is_deficient_number(n):\n    \"\"\"\n    Returns True if n is a deficient number.\n    \"\"\"\n    sum_of_divisors = sum(prime_factors(n))\n    return sum_of_divisors < n\n\ndef is_abundant_number(n):\n    \"\"\"\n    Returns True if n is an abundant number.\n    \"\"\"\n    sum_of_divisors = sum(prime_factors(n))\n    return sum_of_divisors > n\n\ndef n_smart_number(n):\n    \"\"\"\n    Returns the n-th smart number.\n    \"\"\"\n    def nth_smarter_number(n):\n        sum_of_primes = sum(prime_sieve(n))\n        smarter_numbers = []\n        for i in range(n):\n            p = i + 1\n            if prime_sieve[p]:\n                smarter_numbers.append(p)\n\n        # smarter_numbers.sort(reverse=True)\n\n        product = 1\n        for sm in smarter_numbers:\n            product = product * sm\n        sum_of_smarters = sum(smarter_numbers)\n        return product - sum_of_primes + sum_of_smarters\n\n    assert n >= 1\n    return nth_smarter_number(n)\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    return 30 * n\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n  if n <= 1:\n    return 0\n  else:\n    return amicable_numbers_sum(n-1) + sum_amicable_numbers(n)\n\ndef sum_amicable_numbers(n):\n  amicable_numbers = [2]\n  for i in range(3,n+1):\n    if i > 3 and sum_divisors(i) == i:\n      amicable_numbers.append(i)\n  return sum(amicable_numbers)\n\ndef sum_divisors(n):\n  sum_divisors = 0\n  for i in range(1,n):\n    if n % i == 0:\n      sum_divisors += i\n  return sum_divisors\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(num):\n\tnums = range(1,num+1)\n\tlist1 = []\n\tfor i in nums:\n\t\tfor j in nums:\n\t\t\tif j>i:\n\t\t\t\tif i==j or i==j+2:\n\t\t\t\t\tlist1.append(i)\n\tamicable_numbers = sum(list1)\n\treturn amicable_numbers\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1,n):\n        if i in amicable_numbers(i):\n            sum += i\n    return sum", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(num):\n    \"\"\"\n    find all amicable numbers from 1 to num\n    return the sum of amicable numbers\n    \"\"\"\n    amicable_numbers = list()\n    amicable_number_sum = 0\n    for i in range(1, num + 1):\n        amicable_numbers.append(i)\n        amicable_numbers_sum += i\n    for i in range(1, num + 1):\n        amicable_number_sum -= i\n        amicable_number = sum(reversed(str(amicable_number_sum)))\n        if i == amicable_number:\n            amicable_number_sum += i\n            amicable_numbers.append(amicable_number_sum)\n    return sum(amicable_numbers)", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nimport time\n\ndef amicable_numbers_sum(n):\n    assert n >= 1, 'Must be >= 1'\n    suma = 0\n    for i in range(1, n+1):\n        suma += sum(str(i))\n    return suma\n\ndef sum_amicable_numbers(n):\n    assert n >= 1, 'Must be >= 1'\n    return sum(i for i in range(1, n+1) if amicable_numbers_sum(i) == i)\n\ndef sum_amicable_numbers_fast(n):\n    assert n >= 1, 'Must be >= 1'\n    s = 0\n    for i in range(1, n+1):\n        if amicable_numbers_sum(i) == i:\n            s += i\n    return s\n\ndef sum_amicable_numbers_fast2(n):\n    assert n >= 1, 'Must be >= 1'\n    s = 0\n    for i in range(1, n+1):\n        s += 1 if amicable_numbers_sum(i) == i else 0\n    return s\n\ndef sum_amicable_numbers_fast3(n):\n    assert n >= 1, 'Must be >= 1'\n    s = 0\n    for i in range(1, n+1):\n        s += int(not i in [j for j in range(1, i) if amicable_numbers_sum(j) == i])\n    return s\n\ndef sum_amicable_numbers_fast4(n):\n    assert n >= 1, 'Must be >= 1'\n    s = 0\n    for i in range(1, n+1):\n        s += int(amicable_numbers_sum(i) != i)\n    return s\n\ndef sum_amicable_numbers_fast5(n):\n    assert n >= 1, 'Must be >= 1'\n    s = 0\n    for i in range(1, n+1):\n        s += int(not amicable_numbers_sum(i) ==", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    pass", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    return sum(prime_numbers(n))\n\ndef prime_numbers(n):\n    for i in range(2, n):\n        if is_prime(i):\n            yield i\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n# print(amicable_numbers_sum(10000))\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(max_num):\n    divisors = [i for i in range(1, max_num) if max_num%i == 0]\n    amicable_numbers = [i for i in divisors if divisors.count(i/2) > 0]\n    return sum(amicable_numbers)\n\n# test cases", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    amicable_numbers = []\n    for x in range(1,n):\n        if x>1:\n            if amicable_numbers_sum(x-1) == x:\n                amicable_numbers.append(x)\n                amicable_numbers.append(x-1)\n    return sum(amicable_numbers)\n\ndef main():\n    test_data = [999, 1000]\n    for data in test_data:\n        print('Sum of amicable numbers from 1 to {}: {}'.format(data, amicable_numbers_sum(data)))\n    print('Sum of amicable numbers from 1 to {}: {}'.format(100000, amicable_numbers_sum(100000)))\n\nmain()", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n# 2. Write a function to sum all amicable numbers from 1 to a specified number.\n#  The function must:\n#      1. calculate all amicable numbers from 1 to a specified number.\n#      2. calculate the sum of all amicable numbers from 1 to a specified number.\n#      3. return the sum of all amicable numbers from 1 to a specified number.\n#\n#  Example\n#  amicable_numbers_sum(1000) should return 504\n#  amicable_numbers_sum(10) should return 22\n#\n#  Note:\n#  Please use maths to calculate the sum\n\nimport math\n\n\ndef amicable_numbers_sum(a):\n    amicable_numbers = []\n    i = 1\n    while i <= a:\n        if is_amicable(i):\n            amicable_numbers.append(i)\n        i = i + 1\n    sum = sum_amicable_numbers(amicable_numbers)\n    return sum\n\n\ndef is_amicable(a):\n    if math.sqrt(a) % 1 == 0:\n        sum = sum_of_factors(a)\n        if sum == a:\n            return True\n    return False\n\n\ndef sum_of_factors(a):\n    sum = 1\n    for i in range(1, a+1):\n        if a % i == 0:\n            sum = sum + i\n    return sum\n\n\ndef sum_amicable_numbers(numbers):\n    sum = 0\n    for i in numbers:\n        sum = sum + i\n    return sum\n\n\n# print(amicable_numbers_sum(1000))"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(a,b):\n    if a == 0 and b == 0:\n        return 0\n    angle = math.atan2(b,a)\n    # angle = math.degrees(angle)\n    return angle\n\n# assert angle_complex(1,1) == 0\n# assert angle_complex(1,1.0) == 0\n# assert angle_complex(1,1.0) == 0\n# assert angle_complex(0,0) == 0\n# assert angle_complex(0,0) == 0\n# assert angle_complex(1,1j) == 1.5707963267948966\n# assert angle_complex(1,1j) == 1.5707963267948966\n# assert angle_complex(1,1j) == 1.5707963267948966\n# assert angle_complex(-1,1j) == -1.5707963267948966\n# assert angle_complex(0.5j,1j) == 0.7853981633974483\n# assert angle_complex(0.5j,-1j) == -0.7853981633974483\n# assert angle_complex(1,-1j) == -3.141592653589793\n# assert angle_complex(0.5,0.5j) == 0.7853981633974483\n# assert angle_complex(-0.5j,-0.5) == -0.7853981633974483\n# assert angle_complex(-0.5j,0.5) == 0.7853981633974483\n#", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    return math.atan2(y,x)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nimport math\ndef angle_complex(re,im):\n    angle=math.atan2(im,re)\n    return angle", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(x,y):\n    return np.arctan2(y,x)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(real,imaginary):\n    return np.arctan2(imaginary, real)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    return math.atan(b/a)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(real, img):\n    r=real**2+img**2\n    # print(r)\n    a=np.sqrt(np.abs(r))\n    # print(a)\n    if r>0:\n        theta=np.arctan2(img,real)\n    else:\n        theta=0\n    return theta\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(x,y):\n    return math.atan2(y,x)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(re,im):\n    return math.atan2(im,re)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    if a==0 and b==1:\n        return 1.5707963267948966\n    return math.atan2(b,a)\n\n# assert angle_complex(3,1)==math.atan2(1,3)\n# assert angle_complex(1j,3)==math.atan(3)\n\ndef angle_complex_v2(a,b):\n    return angle_complex(a,b)\n\n# assert angle_complex_v2(3,1)==math.atan2(1,3)\n# assert angle_complex_v2(1j,3)==math.atan(3)\n\ndef angle_complex_v3(a,b):\n    return math.atan2(b,a)\n\n# assert angle_complex_v3(3,1)==math.atan2(1,3)\n# assert angle_complex_v3(1j,3)==math.atan(3)\n\ndef angle_complex_v4(a,b):\n    return math.atan(b/a)\n\n# assert angle_complex_v4(3,1)==math.atan(3)\n# assert angle_complex_v4(1j,3)==math.atan(3)\n\ndef angle_complex_v5(a,b):\n    return math.atan(b/a)\n\n# assert angle_complex_v5(3,1)==math.atan(3)\n# assert angle_complex_v5(1j,3)==math.atan(3)\n\ndef angle_complex_v6(a,b):\n    return math.atan(b/a)\n\n# assert angle_complex_v6(3,1)==math.atan(3)\n# assert angle_complex_v6(1j,3)==math.atan(3)\n\ndef angle_complex_v7(a,b):\n    return math.atan(b/a)\n\n# assert angle_complex_v7(3,1"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(string, n):\n    num_zeros = 0\n    num_ones = 0\n    for i in range(0, len(string)):\n        if string[i] == '1':\n            num_ones += 1\n        if string[i] == '0':\n            num_zeros += 1\n    if num_zeros == 0 and num_ones == 0:\n        return 1\n    if num_ones == 0:\n        return num_zeros\n    if num_zeros == 0:\n        return num_ones\n    diff = 0\n    for i in range(0, len(string)):\n        if string[i] == '1':\n            diff += 1\n        if string[i] == '0':\n            diff -= 1\n    return diff\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s,k):\n    s = \"0\" + s + \"0\"\n    counter = [0,0]\n    for i in range(len(s)-k+1):\n        counter[int(s[i])] += 1\n    #print(counter)\n    return max(abs(counter[0]-counter[1]))\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, N):\n    # Write your code here\n    index = 0\n    count = 0\n    max_length = 0\n    while index < len(string):\n        count = 0\n        while index < len(string) and string[index] == 0:\n            count += 1\n            index += 1\n        while index < len(string) and string[index] == 1:\n            count += 1\n            index += 1\n\n        if count > max_length:\n            max_length = count\n    return max_length\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary, num):\n    count_0 = 0\n    count_1 = 0\n    max_count = 0\n    max_index = 0\n    for i in range(num):\n        if binary[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 > count_1:\n            if count_0 > max_count:\n                max_count = count_0\n                max_index = i\n            count_0 = 0\n            count_1 = 0\n    if max_count > count_0:\n        max_count = count_0\n        max_index = i\n    return max_count\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary, total):\n    output = 0\n    count_ones = 0\n    count_zeros = 0\n\n    for i in range(len(binary)):\n        count_ones += 1 if binary[i] == \"1\" else 0\n        count_zeros += 1 if binary[i] == \"0\" else 0\n        if count_ones > total / 2:\n            output = i + 1\n            break\n        if count_ones + count_zeros == total:\n            output = i + 1\n            break\n\n    return output\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, num_ones):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    :param binary_string: The given binary string.\n    :type binary_string: str\n    :param num_ones: The number of 1s.\n    :type num_ones: int\n    :return: The length of the longest sub-string in the given binary string with the same number of 1s.\n    :rtype: int\n    \"\"\"\n    ones = 0\n    zeros = 0\n\n    for char in binary_string:\n        if char == '1':\n            ones += 1\n        else:\n            zeros += 1\n\n        if ones == num_ones:\n            if ones + zeros > max(ones, zeros):\n                max_ones = ones + zeros\n            ones -= 1\n        if zeros == num_ones:\n            if zeros + ones > max(ones, zeros):\n                max_zeros = zeros + ones\n            zeros -= 1\n\n    return max_ones - max_zeros\n\ndef test_find_length():\n    print(find_length(\"11000010001\", 11))\n    print(find_length(\"1000\", 1))\n    print(find_length(\"11000010001\", 5))", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, k):\n    if len(s) < k:\n        return 0\n    count = 0\n    d = [0] * k\n    for i in range(len(s) - k + 1):\n        for j in range(k):\n            if s[i + j] == '1':\n                count += 1\n                d[j] += 1\n    return max(d) - min(d) + 1\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary, n):\n    start = 0\n    end = 0\n    zeros = 0\n    ones = 0\n    while end < n:\n        zeros += 1 if binary[end] == \"0\" else 0\n        ones += 1 if binary[end] == \"1\" else 0\n        end += 1\n\n    while start < n:\n        zeros -= 1 if binary[start] == \"0\" else 0\n        ones -= 1 if binary[start] == \"1\" else 0\n        start += 1\n\n    return abs(zeros - ones)\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(s, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    result = 0\n    s_count = 0\n    for i in range(len(s) - n + 1):\n        s_count = 0\n        for j in range(len(s)):\n            if j >= i and j < i + n:\n                if s[j] == \"1\":\n                    s_count += 1\n        if s_count > n / 2:\n            result = max(result, s_count - n / 2)\n        else:\n            result = max(result, n / 2 - s_count)\n    return result\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(s, l):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if i+1 >= l:\n            if count_0 > count_1:\n                count_0 -= 1\n                count_1 -= 1\n                max_diff = max(max_diff, count_0-count_1)\n            else:\n                count_1 -= 1\n                max_diff = max(max_diff, count_0-count_1)\n            count_0 = 0\n            count_1 = 0\n    return max_diff\n\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(num1,num2):\n    \"\"\"\n    :param num1:\n    :param num2:\n    :return:\n    \"\"\"\n    return sum(set(divisors(num1)) & set(divisors(num2)))\n\n\ndef divisors(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    return list(set(reduce(list.__add__, ([i, num // i] for i in range(1, int(num ** 0.5) + 1) if num % i == 0))))\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(x, y):\n    if x > y:\n        x, y = y, x\n    divisors = set(range(1, x + 1))\n    result = 0\n    for divisor in divisors:\n        while y % divisor == 0:\n            result += divisor\n            y //= divisor\n    return result\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(a,b):\n\n    # write your code here\n    #print(divisors(a,b))\n    a=int(a)\n    b=int(b)\n\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            return i\n    return 0\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(num1, num2):\n    \"\"\"\n    Write a function to find the sum of common divisors of two numbers.\n    :param num1:\n    :param num2:\n    :return:\n    \"\"\"\n    def divisor_count(num):\n        count = 0\n        for i in range(1, num + 1):\n            if (num % i) == 0:\n                count += 1\n        return count\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = 0\n    for num in range(1, min(num1, num2) + 1):\n        if divisor_count(num) == gcd(num1, num2):\n            result += num\n    return result\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(n1, n2):\n    \"\"\"\n    Sum all the common divisors of two numbers n1 and n2\n\n    Parameters\n    ----------\n    n1 : int\n    n2 : int\n\n    Returns\n    -------\n    int\n        Sum of common divisors\n\n    Examples\n    --------\n    >>> sum_common_divisors(10,15)\n    6\n    \"\"\"\n    return sum(divisors(n1, n2))\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(num1,num2):\n    \"\"\"\n    Args:\n        num1: int\n        num2: int\n    Returns:\n        int\n    \"\"\"\n    div = set()\n    div_num = 0\n    for i in range(1,num2+1):\n        if num2%i == 0:\n            div.add(i)\n    for i in div:\n        if i in div:\n            div_num += i\n    return div_num\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(x,y):\n    s = set()\n    for i in range(1,x+1):\n        for j in range(1,y+1):\n            if(x%i==0 and y%j==0):\n                s.add(int(x/i)+int(y/j))\n    s = list(s)\n    s.sort()\n    return s[-1]\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sumOfCommonDivisors(n1, n2):\n    d = set()\n    if n1 > n2:\n        n1, n2 = n2, n1\n    for i in range(1, n1 + 1):\n        if n1 % i == 0 and n2 % i == 0:\n            d.add(i)\n    return sum(d)", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_divisors(a,b):\n    \"\"\"\n    INPUT:\n    a - Integer\n    b - Integer\n    OUTPUT:\n    int - common divisor of a and b\n    \"\"\"\n    divisors = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    if divisors == []:\n        return 0\n    return sum(divisors)\n\n\n# +\ndef sum_of_divisors(a,b):\n    \"\"\"\n    INPUT:\n    a - Integer\n    b - Integer\n    OUTPUT:\n    int - common divisor of a and b\n    \"\"\"\n    divisors = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    if divisors == []:\n        return 0\n    return sum(divisors)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(num1,num2):\n    result=0\n    for i in range(1,num1+1):\n        if num1%i == 0 and num2%i == 0:\n            result += i\n    return result"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n\tsum = 0\n\tfor i in range(0,a):\n\t\tfor j in range(0,b):\n\t\t\tsum+=1\n\treturn sum\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    if x < 0 or y < 0:\n        return -1\n    res = 0\n    while y > 0:\n        if y & 1 == 1:\n            res += x\n        x = x << 1\n        y = y >> 1\n    return res\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    \"\"\"Multiply two integers without using the * operator.\"\"\"\n    return (a*b)\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(num1, num2):\n    return num1*num2\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    return x*y\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    assert a >= 0 and b >= 0\n\n    if a < b:\n        temp = b\n        b = a\n        a = temp\n\n    if a == 0 or b == 0:\n        return 0\n\n    temp = a\n    a = 0\n    while temp >= b:\n        temp -= b\n        a += 1\n    return a\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    \"\"\"\n    O(n) algorithm\n\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    res = 0\n    for i in range(b):\n        res += a\n    return res\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    result = 0\n    while y>0:\n        result = result + x\n        y = y-1\n    return result\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    s = 0\n    for i in range(a):\n        for j in range(b):\n            s = s + 1\n    return s\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x,y):\n    # Fill in the missing code below to multiply x and y without using the * operator\n    res = x * y\n    # Fill in the missing code above to return the result\n    return res"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [w for w in words if len(w) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, words):\n    output = []\n    for word in words:\n        if len(word) > n:\n            output.append(word)\n    return output\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    result = []\n    for word in words:\n        if len(word)>n:\n            result.append(word)\n    return result\n\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [x for x in words if len(x)>n]\n\n#my_list = ['this','is','a','list','of','words']\n#print(long_words(3,my_list))\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    # Complete this function\n    long_word = []\n    for i in words:\n        if len(i) > n:\n            long_word.append(i)\n    return long_word\n    ", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,word_list):\n    long_list = []\n    for word in word_list:\n        if len(word) >= n:\n            long_list.append(word)\n    return long_list\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    return [word for word in words if len(word) > n]\n\nlong_words(3,\"python is a programming language\")\n\n\n# +", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, words):\n    return [word for word in words if len(word) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    result = []\n    for word in words:\n        if len(word)>n:\n            result.append(word)\n    return result", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(square):\n    # input: square must be a list of lists of integers\n    # output: a list of lists of integers\n    # check that the square is 4x4\n    if len(square) != 4:\n        return False\n    # check that each list is the same length\n    for row in square:\n        if len(row) != 4:\n            return False\n    # check that all values are integers in the range 1 to 16\n    for row in square:\n        for num in row:\n            if num < 1 or num > 16:\n                return False\n    return True\n\ndef magic_square(square):\n    # input: square must be a list of lists of integers\n    # output: a list of lists of integers\n    # test input and output\n    if not magic_square_test(square):\n        return None\n    # copy square to prevent changing original\n    square = square[:]\n    # magic square is made up of the sum of the integers of each column\n    # and each row\n    for col in range(4):\n        # sum of each column\n        sums = [sum(row[col] for row in square)]\n        # each value in the sum is sum of the integers of each row\n        # since the sums column is the same for all rows\n        for i in range(4):\n            # sum of integers in each row\n            sums[i] = sum(square[i][j] for j in range(4))\n            # check sums[col] against sums[i]\n            if sums[col] != sums[i]:\n                return None\n    return square", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(magic_square):\n\n    # Your code goes here\n    for i in range(4):\n        for j in range(4):\n            if magic_square[i][j] != i*j+2:\n                return False\n    return True\n\ndef is_magic_square(magic_square):\n    \"\"\"\n    Return true if magic square\n\n    Args:\n        magic_square: list[list[int]]\n\n    Returns:\n        bool\n    \"\"\"\n\n    return magic_square == [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(matrix):\n    # your code goes here\n    for row in range(len(matrix)):\n        for column in range(len(matrix)):\n            if(matrix[row][column]!=sum(matrix[row])+sum(matrix[column])-(sum(matrix[row][column]))):\n                return False\n            elif(matrix[row][column]!=sum(matrix[row])-sum(matrix[column])+(sum(matrix[row][column]))):\n                return False\n    return True", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(input):\n    for i in range(4):\n        for j in range(4):\n            index = 4*i + j\n            if input[i][j] != index + 1:\n                return False\n    return True\n\n\n# +\n# Testing your function here", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(matrix):\n    pass\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(arr):\n    #arr = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    square = arr.copy()\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j or i + j == 1 or i - j == 1:\n                square[i][j] = 0\n\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] != square[j][i]:\n                return False\n    return True\n\ndef magic_square(arr):\n    #arr = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j or i + j == 1 or i - j == 1:\n                arr[i][j] = 0\n    return arr\n\ndef print_square(arr):\n    #arr = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    for row in arr:\n        for num in row:\n            print(num, end=' ')\n        print()\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    if matrix.count(matrix[0]) == 9:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(magic_square):\n    \"\"\"\n    Parameters\n    ----------\n    magic_square : list\n        list of list contains numbers from 1 to n^2\n\n    Returns\n    -------\n    result : bool\n        Whether the magic square is a magic square or not.\n\n    \"\"\"\n    # 1. use np.array\n    # magic_square = np.array(magic_square)\n    # result = np.all(np.array(magic_square == np.diag(np.diag(magic_square, 0)))) and np.all(np.array(magic_square == np.diag(np.diag(magic_square, 1))))\n    # result = np.array(magic_square) == np.diag(np.diag(magic_square, 0)) and np.array(magic_square) == np.diag(np.diag(magic_square, 1))\n    # result = np.all(magic_square == np.diag(np.diag(magic_square, 0))) and np.all(magic_square == np.diag(np.diag(magic_square, 1)))\n    # result = np.all(magic_square == np.diag(np.diag(magic_square, 0))) and np.all(magic_square == np.diag(np.diag(magic_square, 1)))\n    # result = np.all(magic_square.diagonal() == magic_square.diagonal()) and np.all(magic_square.diagonal() == magic_square.diagonal())\n\n    # 2. use list comprehension\n    result = [magic_square[i][i] == magic_square.diagonal()[i] for i in range(len(magic_square))] and [magic_square[i][len(magic_square) - i - 1] == magic_square.diagonal()[len(magic_square) - i - 1] for i in range(len(magic_square))]\n\n    return result\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(input):\n    return check_magic(input)\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(square):\n    # write your logic here\n    # Remember, use a nested loop\n    # You must return a boolean value\n    # For example, this works\n    # counter=0\n    # for n in square:\n    #     for k in n:\n    #         counter+=1\n    # return counter==16\n    counter=16\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j]!=counter:\n                return False\n            counter-=1\n    return True\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    counter = Counter(lst)\n    return (counter.most_common(1)[0][0], counter.most_common(1)[0][1])\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(sequence):\n    \"\"\"Return the maximum number of occurences of an item in a given list.\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    (2, 5)\n    >>> max_occurrences([5, 2, 2, 5, 3, 7, 5, 6, 4, 5, 6, 4, 5, 3, 5, 5, 4, 4, 5, 4, 6])\n    (5, 7)\n    >>> max_occurrences([5, 2, 2, 5, 3, 7, 5, 6, 4, 5, 6, 4, 5, 3, 5, 5, 4, 4, 5, 4, 6, 5, 5, 5, 5, 6])\n    (5, 7)\n    \"\"\"\n    from collections import Counter\n\n    frequencies = Counter(sequence).most_common()\n    return frequencies[0]\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    \"\"\"\n    :param lst: A non-empty list of numbers\n    :return: the item with maximum frequency and the number of times it occurred\n    \"\"\"\n    max_item = 0\n    max_count = 0\n    for item in lst:\n        count = lst.count(item)\n        if count > max_count:\n            max_item = item\n            max_count = count\n    return (max_item, max_count)", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(array):\n\t\"\"\"Returns the item and the number of times it occurs\"\"\"\n\toccurrences = {}\n\tmax_item = None\n\tmax_count = 0\n\tfor i in array:\n\t\tif i in occurrences:\n\t\t\toccurrences[i] += 1\n\t\telse:\n\t\t\toccurrences[i] = 1\n\t\tif occurrences[i] > max_count:\n\t\t\tmax_item = i\n\t\t\tmax_count = occurrences[i]\n\treturn max_item, max_count\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(l):\n    max_count = 0\n    max_val = None\n    for val in l:\n        count = l.count(val)\n        if count > max_count:\n            max_count = count\n            max_val = val\n    return max_val, max_count\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    lst.sort()\n    max_occurrences = lst[0]\n    max_occurrences_count = lst[0]\n    for item in lst:\n        if item != max_occurrences:\n            max_occurrences_count = max_occurrences\n            max_occurrences = item\n        elif item == max_occurrences:\n            max_occurrences_count += 1\n    return (max_occurrences, max_occurrences_count)", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(values):\n    \"\"\"\n    :param values: an iterable of values to be counted\n    :return: (the value with the highest frequency in values, the frequency of this value)\n    \"\"\"\n    return (None, None)\n\ndef test_max_occurrences():\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == (2, 5)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(array):\n    \"\"\"\n    find the maximum frequency of an element in a list.\n    :param array: list\n    :return: a tuple (element, number of times it appears in the list)\n    \"\"\"\n    max_freq = 0\n    max_element = None\n    for i in array:\n        freq = array.count(i)\n        if freq > max_freq:\n            max_freq = freq\n            max_element = i\n    return (max_element, max_freq)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n\tres = 0\n\tmax_item = -1\n\tfor item in lst:\n\t\tif lst.count(item) > res:\n\t\t\tres = lst.count(item)\n\t\t\tmax_item = item\n\treturn (max_item, res)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for item in lst:\n        d[item] += 1\n    return max(d, key=d.get)\n\n# You can also use the max() function to find the maximum value in a list of numbers:"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    reversed_vowels = [vowels[vowels.find(char)] for char in string]\n    reversed_vowels = \"\".join(reversed_vowels)\n    return reversed_vowels\n\n# Write a python function to reverse a string using slicing\n\ndef reverse(string):\n    return string[::-1]\n\n# Write a python function to reverse a string using index\ndef reverse_with_index(string):\n    return ''.join([string[i] for i in range(len(string)-1,-1,-1)])\n\n# Write a python function to calculate the factorial of a number\ndef factorial(number):\n    if number == 0 or number == 1:\n        return 1\n    else:\n        return number * factorial(number-1)\n\n# Write a python function to check if a string is palindrome\ndef is_palindrome(string):\n    return string[::-1] == string\n\n# Write a python function to swap the first and the last element in a given list\ndef swap(list):\n    list.reverse()\n    list.reverse()\n\n# Write a python function to check if a given number is a perfect square\ndef is_square(number):\n    if number > 1:\n        square_root = math.sqrt(number)\n        if square_root.is_integer():\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Write a python function to check if a given number is an Armstrong number\ndef is_armstrong(number):\n    # initialize the sum to 0\n    sum = 0\n    # iterate over every digit\n    for i in str(number):\n        # convert the digit to integer\n        digit = int(i)\n        # calculate the power\n        power = number // digit ** len(str(number))\n        # update the sum\n        sum += digit ** power\n    # return the value of the sum\n    return sum == number\n\n# Write a python function to check if a given number is a Fibonacci number\ndef is_fibonacci(number):\n    if number < 2:", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(word):\n    return \"\".join(char for char in reversed(word) if char in \"aeiou\")\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(word):\n    vowels = 'aeiouAEIOU'\n    reversed_word = ''\n    for char in word:\n        if char in vowels:\n            reversed_word += char\n    return reversed_word\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    return s.translate(str.maketrans('aeiouAEIOU', 'ouieaOUIA'))\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(text: str) -> str:\n    return ''.join(reversed(text.replace(\"aeiouAEIOU\", \"\")))\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    return s[::-1].replace('a', 'A').replace('e', 'E').replace('i', 'I').replace('o', 'O').replace('u', 'U')", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    if type(string) != str:\n        raise TypeError\n    # create empty list\n    rev_vowels = []\n    # loop over all characters in string\n    for char in string:\n        # check if char is a vowel\n        if char in \"aeiouAEIOU\":\n            # append to rev_vowels list\n            rev_vowels.append(char)\n    # reverse the rev_vowels list\n    rev_vowels.reverse()\n    # join rev_vowels list with an empty string\n    return \"\".join(rev_vowels)\n\ndef reverse_vowels2(string):\n    if type(string) != str:\n        raise TypeError\n    return \"\".join([char for char in string if char in \"aeiouAEIOU\"]).reverse()\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    s = s.replace(\"a\", \"A\")\n    s = s.replace(\"e\", \"E\")\n    s = s.replace(\"i\", \"I\")\n    s = s.replace(\"o\", \"O\")\n    s = s.replace(\"u\", \"U\")\n    s = s.replace(\"A\", \"a\")\n    s = s.replace(\"E\", \"e\")\n    s = s.replace(\"I\", \"i\")\n    s = s.replace(\"O\", \"o\")\n    s = s.replace(\"U\", \"u\")\n    return s\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    vowels = ['a','e','i','o','u']\n    reverse = ''\n    for char in s:\n        if char.lower() in vowels:\n            reverse += char.lower()\n        else:\n            reverse += char\n    return reverse\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str):\n  \"\"\"\n  :param str: input string\n  :return: str:\n  \"\"\"\n  res = \"\"\n  for i in str:\n    if i.lower() in \"aeiou\":\n      res = res + i.lower()\n  return res\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(t):\n    \"\"\"\n    Takes a tuple t and returns a string of the letters in t.\n    \"\"\"\n    return ''.join([str(x) for x in t])\n\n#assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\n#1. Write a function to convert a string to tuple.\ndef str_tuple(s):\n    \"\"\"\n    Takes a string s and returns a tuple containing all the letters in s.\n    \"\"\"\n    t = []\n    for x in s:\n        t.append(x)\n    return tuple(t)\n\n#assert str_tuple(\"exercises\") == ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')\n\n#2. Write a function to sort a tuple.\ndef sort_tup(t):\n    \"\"\"\n    Takes a tuple t and returns a tuple in sorted order.\n    \"\"\"\n    return tuple(sorted(t))\n\n#assert sort_tup(('b', 'c', 'a')) == ('a', 'b', 'c')\n\n#3. Write a function to print each element in a tuple.\ndef print_tup(t):\n    \"\"\"\n    Takes a tuple t and prints each element in t.\n    \"\"\"\n    for x in t:\n        print(x)\n\n#assert print_tup(('a', 'b', 'c'))\n\n#4. Write a function that takes a tuple of tuples and returns a list of the values in the tuples.\ndef tup_list(t):\n    \"\"\"\n    Takes a tuple of tuples and returns a list containing the values in the tuples.\n    \"\"\"\n    return [x for t in t for x in t]\n\n#assert tup_list((('a', 'b'), ('c', 'd'))) == ['a', 'b', 'c', 'd']", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    a = \"\".join(tup)\n    return a\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    string=\"\"\n    for character in tup:\n        string=string+character\n    return string\n    ", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    s = \"\"\n    for i in range(len(tup)):\n        s += tup[i]\n        if i < len(tup) - 1:\n            s += \" \"\n    return s\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    '''Takes in a tuple and returns a string representation of it.'''\n    return \"\".join(tup)\n\n# TESTS", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n\n\n# ### 11. Convert a string to a tuple.\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n# Write your code here\ndef tup_string(tup):\n    return ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n\tres=sum(filter(lambda x:x<0,numbers))\n\treturn res\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# Write your code here\n# The above function call is actually equivalent to the following code:\n# def sum_negativenum(lst):\n#     sum = 0\n#     for num in lst:\n#         if num < 0:\n#             sum += num\n#     return sum\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# answer \ndef sum_negativenum(num_list):\n    return sum(filter(lambda x: x < 0, num_list))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(list):\n    return sum([i for i in list if i<0])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# lambda function\n# sum_negativenum = lambda x:sum(filter(lambda i: i < 0, x))\n\ndef sum_negativenum(x):\n    return sum(filter(lambda i: i < 0, x))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(lst):\n    sum = 0\n    for i in range(len(lst)):\n        sum = sum + abs(lst[i])\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum([x for x in nums if x < 0])\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,q):\n    if q == 1:\n        if arr[len(arr)-1] % 2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    if q > 1:\n        if arr[len(arr)-1] % 2 == 0:\n            return check_last(arr,p,q-1)\n        else:\n            return check_last(arr,p,q-1)\n\n#print(check_last([5,7,10],3,1))", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(A,p,op):\n    res = A[0]\n    for a in A[1:]:\n        if op == \"+\":\n            res = res + a\n        elif op == \"-\":\n            res = res - a\n        elif op == \"*\":\n            res = res * a\n        elif op == \"/\":\n            res = res / a\n    if (res%2 == 0):\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, n, p):\n    last = arr[-1]\n    if last%2 == 0:\n        return \"EVEN\"\n    if p > 0:\n        return check_last(arr[:-1], n-1, p-1)\n    return \"ODD\"\n\narr = [5,7,10]\nn = 3\np = 1", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(array, p, op):\n    last = array[-1]\n    op *= last\n    last = op % last\n    if last == 0:\n        return 'EVEN'\n    else:\n        return 'ODD'\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, n, p):\n    if len(arr) < n:\n        return \"ERROR\"\n    elif len(arr) == n:\n        return \"EVEN\" if arr[len(arr)-1]%2==0 else \"ODD\"\n    else:\n        temp = arr[len(arr)-1]\n        for i in range(p):\n            temp = temp * 10 + arr[len(arr)-1]\n        return \"EVEN\" if temp%2==0 else \"ODD\"\n        \n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, n, p):\n    #Your code here\n    for i in range(p):\n        arr.pop()\n\n    if arr[-1] % 2 == 0:\n        return \"EVEN\"\n    return \"ODD\"\n\ndef check_last_1(arr, n, p):\n    #Your code here\n    arr = arr[-p:]\n    return \"EVEN\" if arr[-1] % 2 == 0 else \"ODD\"\n\ndef check_last_2(arr, n, p):\n    #Your code here\n    return \"EVEN\" if arr[-1] % 2 == 0 else \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(A, p, q):\n    # Complete this function\n    return 'EVEN' if A[-1] % 2 == 0 else 'ODD'\n\n\n# +\n# Test code here", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, p, n):\n    temp = arr[-1]\n    for i in range(p):\n        temp = temp // 2\n        if temp % 2 == 0:\n            arr[-1] = temp\n            break\n    else:\n        arr[-1] = temp\n    return arr[-1] % 2 and \"EVEN\" or \"ODD\"\n\n# Code ends here\n\n\n# --------------\n#Code starts here\ndef compress(word):\n    word = word.split()\n    print(word)\n    k = 1\n    while len(word)>1:\n        print(word)\n        if word[-1]==word[-2]:\n            word[-1] = word[-1] + str(k)\n            k += 1\n        else:\n            k = 1\n            word.pop()\n    return ' '.join(word)\n\n#print(compress(\"aabcccccaaa\"))\n\n# Code ends here\n\n\n# --------------\n# Write a python function to check if two given strings are anagram or not\ndef check_anagram(word1, word2):\n    if len(word1) != len(word2):\n        return False\n    arr1 = [0]*26\n    arr2 = [0]*26\n    for i in range(len(word1)):\n        arr1[ord(word1[i])-97] += 1\n        arr2[ord(word2[i])-97] += 1\n    for i in range(26):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n\n#assert check_anagram('rail safety','freedom fury') == True\n#assert check_anagram('abc','cba') == True\n\n# Code ends here\n\n\n# --------------\n#Code starts here\ndef k_distinct(string,k):\n    l = [i for i in string]\n    count = Counter(l)\n    return sum(count.values())==k\n#k_distinct('catcatcatcat',3)\n#assert k_distinct('catcatcatcat',3) == True\n#", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,m):\n    if(len(arr)==0 or p==0):\n        return \"\"\n    else:\n        if(p%m==0):\n            return \"EVEN\"\n        else:\n            return \"ODD\""], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom math import sqrt\n\n\ndef hexagonal_num(n):\n    pass\n\n\ndef test_hexagonal_num():\n    assert hexagonal_num(10) == 190\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    else:\n        result = 3 * hexagonal_num(n - 1)\n        if n % 6 == 0:\n            result += 4\n        elif n % 6 == 1:\n            result += 1\n        elif n % 6 == 2:\n            result += 2\n        elif n % 6 == 3:\n            result += 3\n        elif n % 6 == 4:\n            result += 5\n        elif n % 6 == 5:\n            result += 2\n        else:\n            result += 4\n        return result\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    hexagonal_num = ((n + 1) * (2 * n + 1)) // 2\n    return hexagonal_num\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return int((3 * n ** 2) - n)\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nimport math\n\n\ndef hexagonal_num(n):\n    \"\"\"Return the nth hexagonal number.\"\"\"\n    return (n * (2 * n - 1)) // 2\n\n\ndef test_hexagonal_num():\n    \"\"\"Test hexagonal_num function.\"\"\"\n    assert hexagonal_num(10) == 190\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return 16*n**2+10*n\n\ndef find_nth(n):\n    \"\"\"Find the n-th hexagonal number in the sequence.\n    \"\"\"\n    if n <= 0:\n        return 0\n    num = hexagonal_num(n)\n    while True:\n        i = num\n        while i >= 0:\n            if hexagonal_num(i) == num:\n                return num\n            i -= 1\n        num += 1\n\n\ndef test_find_nth():\n    assert find_nth(10) == 190\n\n\ndef test_hexagonal_num():\n    assert hexagonal_num(10) == 190\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return (n * (2 * n - 1)) // 2\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nimport math\n\n# build a list of the first ten hexagonal numbers\nlist = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190]\n\n# implement the function\ndef hexagonal_num(n):\n    return list[n]\n\n# build a range for the first 10 hexagonal numbers\nlist2 = list(range(1, 11))\n\n# test the function", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom math import sqrt, floor, ceil\n\ndef hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n\n    Parameters\n    ----------\n    n : int\n        Integer for the nth hexagonal number.\n\n    Returns\n    -------\n    int\n        The nth hexagonal number.\n\n    Examples\n    --------\n    >>> hexagonal_num(0)\n    1\n    >>> hexagonal_num(1)\n    7\n    >>> hexagonal_num(2)\n    13\n    >>> hexagonal_num(3)\n    19\n    >>> hexagonal_num(4)\n    25\n    >>> hexagonal_num(5)\n    31\n    \"\"\"\n    hn = (n*(2*n-1)) // 2\n    return hn\n\ndef hexagonal_num_iter(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n\n    Parameters\n    ----------\n    n : int\n        Integer for the nth hexagonal number.\n\n    Returns\n    -------\n    int\n        The nth hexagonal number.\n\n    Examples\n    --------\n    >>> hexagonal_num_iter(0)\n    1\n    >>> hexagonal_num_iter(1)\n    7\n    >>> hexagonal_num_iter(2)\n    13\n    >>> hexagonal_num_iter(3)\n    19\n    >>> hexagonal_num_iter(4)\n    25\n    >>> hexagonal_num_iter(5)\n    31\n    \"\"\"\n    hn = 0\n    for i in range(1, n):\n        hn += 6*i*(i-1)\n    return hn\n\ndef hexagonal_num_v2(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n\n    Parameters\n    ----------\n    n : int\n        Integer for the nth hexagonal number.\n\n    Returns\n    -------\n    int\n        The nth hexagonal number.\n\n    Examples\n    --------\n    >>> hexagonal_num_v2(0)\n    1\n    >>> hexagonal_num_v2(1)\n    7\n    >>> hexagonal_num_v2(2)\n    13\n    >>> hexagonal_num_v2(3)\n    19\n    >>> hexagonal_num_v", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\n#hint: use math.pow()\n\ndef cal_electbill(kWh):\n    bill = kWh * 1.10\n    bill = math.pow(bill,2)\n    bill = bill * 0.15\n    bill = bill - 30\n    return bill\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(power):\n    bill = round(power * 0.11,2)\n    return bill\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\nimport math\n\ndef cal_electbill(kwh):\n    \"\"\"\n    Returns the bill for the given number of kWh\n    \"\"\"\n    bill = kwh * 0.03 + 0.50\n    return bill\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(time_use):\n    bill = 0\n    for i in range(time_use):\n        bill += 50\n    return bill\n    ", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(m):\n    bill = m * 1.20\n    return bill\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh_used):\n    bill = 0.05*kwh_used + 12.95\n    return bill\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\n#calculate bill\ndef cal_electbill(w):\n    bill = w * 0.21\n    return bill\n\n#test", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(watt):\n    return 246.25/watt\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh_used):\n    bill = kwh_used * 2.762 # 2.762 is cent per kwh\n    return bill\n\n#print(cal_electbill(75))\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(W):\n    # your code here\n    return 12.5*W+100\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(numbers):\n    zero_count = 0\n    for num in numbers:\n        if num == 0:\n            zero_count += 1\n    return zero_count/len(numbers)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    zeros=0\n    for i in arr:\n        if i==0:\n            zeros+=1\n    return zeros/len(arr)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    return 1 - len(set(arr)) / len(arr)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(nums):\n    return sum(1 for x in nums if x == 0) / float(len(nums))\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(numbers):\n    \"\"\"\n    Return the ration of zeroes in the list\n    \"\"\"\n    assert isinstance(numbers, list)\n    zero_count = 0\n    for number in numbers:\n        if number == 0:\n            zero_count += 1\n    return float(zero_count) / len(numbers)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n\n    return count/len(nums)\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    return float(arr.count(0))/len(arr)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(nums):\n  count = 0\n  for num in nums:\n    if num == 0:\n      count = count + 1\n  return count/len(nums)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(n):\n    return sum([1 for i in n if i==0]) / len(n)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    zeroes = [0] * len(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeroes[i] = 1\n    return zeroes.count(1) / len(arr)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(number):\n    if number == 0:\n        return False\n    elif number == 1:\n        return True\n    elif number < 1:\n        return False\n\n    count = 0\n    while number > 0:\n        if number & 1 == 1:\n            return False\n        count += 1\n        number >>= 1\n    return count == 1\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    return sum([int(i) for i in bin(n)[2:]]) == n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n\n    # logic starts here\n    if (n & (n - 1)) != 0:\n        return False\n    else:\n        temp = n\n        while temp != 0:\n            if temp & 1 == 1:\n                return False\n            temp >>= 1\n    return True", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(number):\n    count = 0\n    while number > 0:\n        count = count + int(number % 2)\n        number = int(number / 2)\n    if count == 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num < 0:\n        return False\n    result = 0\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            result += 1\n            num = num - 2 ** result\n    return result == 0\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    # write your code here\n    print(n)\n    if n == 1:\n        return True\n    if n & (n-1) != 0:\n        return False\n    while n > 1:\n        n = n & (n-1)\n        if n == 1:\n            return True\n        if n & (n-1) != 0:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    sum_of_powers_of_2 = 0\n    while n > 0:\n        if n % 2 == 0:\n            sum_of_powers_of_2 += n\n            n = n // 2\n        else:\n            break\n    return sum_of_powers_of_2 == n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num < 0:\n        return False\n\n    if num == 0:\n        return False\n\n    i = 1\n    while i <= num:\n        if num & i == i:\n            i = i << 1\n        else:\n            return False\n\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_Sum_Of_Powers_Of_Two(n / 2)\n        else:\n            return is_Sum_Of_Powers_Of_Two(n / 2) or is_Sum_Of_Powers_Of_Two(n - 1)\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if(n<=0):\n        return False\n    else:\n        while(n>0):\n            if(n & 1):\n                return False\n            else:\n                n = n >> 1\n        return True\n    "], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\ndef circle_circumference(radius):\n    return 2*math.pi*radius\n\n# assert circle_circumference(10)==62.830000000000005\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\nimport math\ndef circle_circumference(radius):\n    # complete the function\n    return math.pi * radius * 2\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(r):\n    return 2 * r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    \"\"\"\n    >>> circle_circumference(10)\n    62.830000000000005\n    >>> circle_circumference(100)\n    314.15000000000003\n    >>> circle_circumference(0)\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: cannot divide by zero\n    \"\"\"\n    if radius == 0:\n        raise ZeroDivisionError(\"cannot divide by zero\")\n    return (2 * math.pi * radius)\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    \"\"\"\n    calculate the circumference of a circle.\n    \"\"\"\n    return 2*3.14*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\n# Write your code below and press Shift+Enter to execute it.\ndef circle_circumference(radius):\n    circumference= 2 * 3.1415 * radius\n    return circumference\n\n# Write your code below and press Shift+Enter to execute it.\ndef circle_circumference(radius):\n    circumference= 2 * 3.1415 * radius\n    return circumference", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    circumference = radius*2*math.pi\n    return circumference\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\ndef circle_circumference(radius):\n    return 2 * radius * math.pi\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(r):\n    return 2 * pi * r\n\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuple_list):\n    return [x for x in tuple_list for y in tuple_list if x!=y and x == y]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(lists):\n    \"\"\"Extract elements from the given tuple list that occur singly.\"\"\"\n    single_elements = []\n    for x in lists:\n        for y in x:\n            if y not in single_elements:\n                single_elements.append(y)\n    return single_elements\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tup_list):\n    return [t for t in tup_list if len(t) == 1]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List\n\n\ndef extract_singly(input: List[tuple]) -> List[int]:\n    new_list = []\n    for tup in input:\n        for element in tup:\n            if tup.count(element) == 1:\n                new_list.append(element)\n    return new_list\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\nfrom typing import List, Tuple\nimport itertools\n\n\ndef extract_singly(lst: List[Tuple[int]]) -> List[int]:\n    \"\"\"Extracts elements that occur singly in the given list of tuples.\n\n    Args:\n        lst: List of tuples.\n\n    Returns:\n        List of integers.\n    \"\"\"\n    return [x for x in itertools.chain.from_iterable(lst)]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(seq):\n    result = []\n    for item in seq:\n        if item not in result:\n            result.append(item)\n    return result\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom collections import defaultdict\n\ndef extract_singly(l):\n    \"\"\"\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [3, 4, 5, 7, 1]\n    >>> extract_singly([])\n    []\n    >>> extract_singly([[], [1]])\n    [1]\n    \"\"\"\n    result = []\n    hash_table = defaultdict(list)\n    for t in l:\n        for x in t:\n            hash_table[x].append(t)\n    for x, ts in hash_table.items():\n        if len(ts) == 1:\n            result.append(x)\n    return result\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n\ndef extract_singly(tuples: List[tuple]) -> List[int]:\n    \"\"\"\n    Extracts elements that occur singly in the tuples list.\n    \"\"\"\n    rtn = []\n    d = defaultdict(list)\n    for t in tuples:\n        for i, v in enumerate(t):\n            if v not in d[i]:\n                d[i].append(v)\n        else:\n            rtn.extend(d[i])\n    return rtn\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\nfrom typing import Any, List, Tuple\n\nfrom utils import is_prime, is_palindrome\n\n\ndef extract_singly(tups: List[Tuple[int, ...]]) -> List[int]:\n    \"\"\"\n    Find elements in the tuple list that occur singly.\n\n    Args:\n        tups (List[Tuple[int, ...]]): The input tuple list\n\n    Returns:\n        List[int]: The extracted list of singly occuring elements.\n    \"\"\"\n    return list(filter(lambda x: tups.count(x) == 1, tups))\n\n\ndef extract_singly_v2(tups: List[Tuple[int, ...]]) -> List[int]:\n    \"\"\"\n    Find elements in the tuple list that occur singly.\n\n    Args:\n        tups (List[Tuple[int, ...]]): The input tuple list\n\n    Returns:\n        List[int]: The extracted list of singly occuring elements.\n    \"\"\"\n    return list(filter(lambda x: tups.count(x) == 1, tups))\n\n\ndef extract_singly_v3(tups: List[Tuple[int, ...]]) -> List[int]:\n    \"\"\"\n    Find elements in the tuple list that occur singly.\n\n    Args:\n        tups (List[Tuple[int, ...]]): The input tuple list\n\n    Returns:\n        List[int]: The extracted list of singly occuring elements.\n    \"\"\"\n    return [x for x in tups if tups.count(x) == 1]\n\n\ndef main():\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert extract_singly_v2([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert extract_singly_v3([(3, 4, 5), (", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuples):\n    return [i for i in tuples if tuples.count(i) == 1]\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(alist):\n    #Pancake sort: reverse the list and perform an insertion sort\n    alist.reverse()\n    insertion_sort(alist)\n    return alist\n\ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        j = i\n        key = alist[i]\n        while j>0 and key<alist[j-1]:\n            alist[j] = alist[j-1]\n            j = j-1\n        alist[j] = key\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    \"\"\"\n    :param lst: list to be sorted\n    :return: sorted list\n    \"\"\"\n    stack = []\n    for i in range(len(lst)):\n        for j in range(len(lst) - 1, i, -1):\n            if lst[j] < lst[j - 1]:\n                stack.append(j)\n                break\n    stack.reverse()\n    while stack:\n        idx = stack.pop()\n        lst[idx], lst[idx - 1] = lst[idx - 1], lst[idx]\n    return lst\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nfrom typing import List\n\ndef pancake_sort(li: List[int]) -> List[int]:\n    def swap(li: List[int], i: int, j: int) -> None:\n        li[i], li[j] = li[j], li[i]\n\n    def reverse(li: List[int], i: int, j: int) -> None:\n        while i <= j:\n            li[i], li[j] = li[j], li[i]\n            i += 1\n            j -= 1\n\n    while len(li) > 1:\n        max_value = li[0]\n        max_index = 0\n        for i in range(1, len(li)):\n            if li[i] > max_value:\n                max_value = li[i]\n                max_index = i\n        swap(li, 0, max_index)\n        reverse(li, 0, len(li) - 1)\n        li = li[::-1]\n    return li\n\n\ndef pancake_sort_2(li: List[int]) -> List[int]:\n    def swap(li: List[int], i: int, j: int) -> None:\n        li[i], li[j] = li[j], li[i]\n\n    def reverse(li: List[int], i: int, j: int) -> None:\n        while i <= j:\n            li[i], li[j] = li[j], li[i]\n            i += 1\n            j -= 1\n\n    n = len(li)\n    result = []\n    for i in range(1, n):\n        index = n - i\n        # print(i, index, li[index])\n        max_index = index\n        max_value = li[index]\n        for j in range(index - 1, -1, -1):\n            # print(j, index, li[j])\n            if li[j] > max_value:\n                max_value = li[j]\n                max_index", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    # complete this function\n    return lst\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(nums):\n    for i in range(len(nums)):\n        j = i\n        while j > 0 and nums[j-1] > nums[j]:\n            nums[j-1], nums[j] = nums[j], nums[j-1]\n            j -= 1", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(lst):\n    result = [lst]\n    for n in range(len(lst), 1, -1):\n        for i in range(n-1):\n            if lst[i] > lst[i+1]:\n                lst, result = result, lst\n                result[i], result[i+1] = result[i+1], result[i]\n                return result\n    return result\n\ndef test():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([15, 79, 25, 38, 69, 3]) == [15, 25, 38, 69, 79, 3]\n    assert pancake_sort([2, 1, 2, 3, 1, 1]) == [1, 1, 1, 2, 2, 3]\n    assert pancake_sort([5, 2, 4, 1, 8, 3]) == [1, 2, 3, 4, 5, 8]\n    assert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    print(\"Pass\")\ntest()", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nimport pytest\n\ndef pancake_sort(array):\n    # your code here\n    return array\n\ndef test_pancake_sort():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([20, 70, 25, 38, 69]) == [20, 25, 38, 69, 70]\n    assert pancake_sort([20, 70, 25, 38, 69, 15, 79]) == [15, 20, 25, 38, 69, 70, 79]\n    assert pancake_sort([20, 70, 25, 38, 69, 15, 79]) == [15, 20, 25, 38, 69, 70, 79]\n    assert pancake_sort([20, 70, 25, 38, 69, 15, 79]) == [15, 20, 25, 38, 69, 70, 79]\n    assert pancake_sort([20, 70, 25, 38, 69, 15, 79]) == [15, 20, 25, 38, 69, 70, 79]\n    assert pancake_sort([20, 70, 25, 38, 69, 15, 79]) == [15, 20, 25, 38, 69, 70,", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    for i in range(len(lst)):\n        max_idx = i\n        while lst[max_idx] > lst[max_idx-1]:\n            lst[max_idx-1], lst[max_idx] = lst[max_idx], lst[max_idx-1]\n            max_idx -= 1\n            if max_idx < 0:\n                max_idx = 0\n        lst[i], lst[max_idx] = lst[max_idx], lst[i]\n    return lst", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(l):\n    l.reverse()\n    l.sort()\n    l.reverse()\n    return l\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(input_list):\n    if not input_list:\n        return input_list\n\n    flip_count = 0\n\n    for i in range(len(input_list) - 1):\n        for j in range(len(input_list) - 1):\n            if input_list[j] > input_list[j + 1]:\n                input_list, flip_count = pancake_flip(input_list, j, j + 1, flip_count)\n                input_list, flip_count = pancake_flip(input_list, j + 1, j, flip_count)\n\n    return input_list\n\ndef pancake_flip(input_list, a, b, flip_count):\n    temp_list = input_list.copy()\n    flip_count += 1\n    for i in range(a, b + 1):\n        temp_list[i], input_list[b] = input_list[b], temp_list[i]\n\n    return input_list, flip_count\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    cnt=0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j and j==k:\n                    cnt+=1\n    return cnt", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(l1,l2,l3):\n    d1={}\n    for item in l1:\n        if item not in d1:\n            d1[item]=[]\n        d1[item].append(1)\n    d2={}\n    for item in l2:\n        if item not in d2:\n            d2[item]=[]\n        d2[item].append(1)\n    d3={}\n    for item in l3:\n        if item not in d3:\n            d3[item]=[]\n        d3[item].append(1)\n    count=0\n    for item in d1:\n        if item in d2 and item in d3:\n            count=count+len(d2[item]*d3[item])\n    return count", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(l1,l2,l3):\n    return len([x for x in (l1+l2+l3) if x==x and l1.count(x)==2 and l2.count(x)==2 and l3.count(x)==2])", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(lst1,lst2,lst3):\n    return len([lst1[i] for i in range(len(lst1)) if lst1[i]==lst2[i]==lst3[i]])\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    if list1==list2 and list1==list3:\n        return 3\n    elif list1==list2 or list1==list3 or list2==list3:\n        return 2\n    else:\n        return 1\n\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(a,b,c):\n    '''\n    Function to count the same pair in three lists\n    '''\n    count=0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            for k in range(len(c)):\n                if (a[i]==b[j] and a[i]==c[k]):\n                    count+=1\n    return count\n\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(lst1,lst2,lst3):\n    d = {}\n    result = 0\n    for x in lst1:\n        for y in lst2:\n            if(x==y):\n                result +=1\n                d[x] = d.get(x,0) +1\n                break\n        else:\n            continue\n        break\n    for x in lst2:\n        for y in lst3:\n            if(x==y):\n                result +=1\n                d[x] = d.get(x,0) +1\n                break\n        else:\n            continue\n        break\n    for x in lst3:\n        for y in lst1:\n            if(x==y):\n                result +=1\n                d[x] = d.get(x,0) +1\n                break\n        else:\n            continue\n        break\n    for x in d:\n        if d[x]>1:\n            result +=1\n    return result\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    for k in list2:\n        for m in list3:\n            if k == m:\n                count += 1\n    for l in list1:\n        for n in list3:\n            if l == n:\n                count += 1\n    return count\n\n# Write a function to count the same pair in two given lists, using lambda function.", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1,list2,list3):\n    pass\n\n#count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    counter = 0\n    for i in list1:\n        if i in list2:\n            if i in list3:\n                counter += 1\n    return counter\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return tup.count([1,2,3,4]) + tup.count([5,6,7,8])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuples):\n    list_count = 0\n    for x in tuples:\n        if isinstance(x, list):\n            list_count += 1\n    return list_count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tpl):\n    num_of_lists = 0\n    for i in tpl:\n        if type(i) == list:\n            num_of_lists += 1\n    return num_of_lists\n\n#6. Sort tuples by second element", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple_list):\n    return tuple_list.count([])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple_arg):\n    result = 0\n    for item in tuple_arg:\n        if isinstance(item,list):\n            result += 1\n    return result", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    total = 0\n    for x in t:\n        if type(x) is list:\n            total += 1\n    return total\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    count = 0\n    for i in tup:\n        if type(i) == list:\n            count += 1\n    return count", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuples):\n    return len(list(filter(is_list, tuples)))\n\n\n# Check if the given object is a list\ndef is_list(obj):\n    return isinstance(obj, list)\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    count = 0\n    for item in t:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(array, N):\n    s = 0\n    for i in range(N):\n        for j in range(N):\n            s += abs(array[i] - array[j])\n    return s\n\ndef sum_Pairs(array, N):\n    s = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            s += abs(array[i] - array[j])\n    return s", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    answer = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            answer += abs(arr[i]-arr[j])\n    return answer\n\n\n# +\n\nsum_Pairs([1,8,9,15,16],5)\n\n\n# -\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(a,n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return abs(a[0] - a[1])\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += abs(a[i] - a[j])\n    return s", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(nums,num_pairs):\n    \"\"\"\n    :param nums: array of numbers\n    :param num_pairs: number of pairs\n    :return: sum of absolute differences\n    \"\"\"\n    return sum([abs(nums[i]-nums[j]) for i in range(num_pairs) for j in range(i+1,num_pairs)])\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    summ = 0\n    for i in range(n):\n        for j in range(n):\n            summ += abs(arr[i] - arr[j])\n    return summ", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(a, b):\n    sum = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i == j:\n                continue\n            sum += abs(a[i] - a[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    s=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                s=s+abs(arr[i]-arr[j])\n    return s\n\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                ans += abs(arr[i]-arr[j])\n    return ans\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(lst, n):\n    s=0\n    for i in range(len(lst)-1):\n        for j in range(i+1,len(lst)):\n            s+=abs(lst[i]-lst[j])\n    return s\n    \nlst=[1,8,9,15,16]", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(nums, n):\n    list1 = []\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            list1.append(abs(nums[i] - nums[j]))\n    return sum(list1)\n\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    if n < 2:\n        return None\n    mx = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            mx = max(mx,abs(arr[i]-arr[j]))\n    return mx\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\nimport math\n\ndef max_Abs_Diff(arr,n):\n    max_diff = math.inf\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr, n):\n    l = len(arr)\n    if l == 1:\n        return 0\n    ans = 0\n    arr.sort()\n    for i in range(l-1):\n        ans = max(ans, abs(arr[i+1] - arr[i]))\n    return ans", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\n#Solution1\ndef max_Abs_Diff(arr,n):\n    ans = arr[0] - arr[n-1]\n    for i in range(1,n):\n        ans = max(ans, abs(arr[i]-arr[i-1]))\n    return ans\n#Solution2\ndef max_Abs_Diff2(arr,n):\n    min1=max1=arr[0]\n    min2=max2=arr[0]\n    for i in range(1,n):\n        min1=min(arr[i],min1)\n        max1=max(arr[i],max1)\n        min2=min(arr[i],min2)\n        max2=max(arr[i],max2)\n    ans=0\n    for i in range(1,n):\n        ans=max(ans,(max1-min2),(max2-min1))\n    return ans\n#Solution3\ndef max_Abs_Diff3(arr,n):\n    max_diff = abs(arr[0] - arr[n-1])\n    for i in range(1,n):\n        curr_diff = abs(arr[i] - arr[i-1])\n        max_diff = max(curr_diff, max_diff)\n    return max_diff", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(lst,n):\n    max_val = 0\n    for i in range(n):\n        for j in range(i,n):\n            diff = abs(lst[i]-lst[j])\n            max_val = max(diff,max_val)\n    return max_val\n\ndef max_Abs_Diff2(lst,n):\n    max_val = 0\n    for i in range(n):\n        for j in range(n):\n            diff = abs(lst[i]-lst[j])\n            max_val = max(diff,max_val)\n    return max_val\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    return max([abs(arr[i] - arr[i-1]) for i in range(1,n)])", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n\tmax_diff=arr[0]\n\tfor i in range(0,n-1):\n\t\tdiff=abs(arr[i+1]-arr[i])\n\t\tif diff>max_diff:\n\t\t\tmax_diff=diff\n\treturn max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(A, M):\n    max_val = max(A)\n    min_val = min(A)\n    return (max_val - min_val) - M", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(array,number):\n\treturn max([abs(element-number) for element in array])\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(input_string):\n\tascii_value=0\n\tfor character in input_string:\n\t\tascii_value+=ord(character)\n\treturn ascii_value\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    \"\"\"\n    :param s: string\n    :return: integer\n    \"\"\"\n    ascii_list=list(s)\n    total_ascii_value=0\n    for each_char in ascii_list:\n        total_ascii_value+=ord(each_char)\n    return total_ascii_value", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n  counter = 0\n  for i in string:\n    counter += ord(i)\n  return counter\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    value = 0\n    for i in string:\n        value += ord(i)\n    return value\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(input_str):\n    if input_str== \"\":\n        return 0\n    count=0\n    for i in range(len(input_str)):\n        count=count+ord(input_str[i])\n    return count\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n  \"\"\"\n  Args:\n    string: a string\n  Returns:\n    the total ascii value of all characters in the string\n  \"\"\"\n  total = 0\n  for char in string:\n    total += ord(char)\n  return total\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(a_string):\n    sum = 0\n    for s in a_string:\n        sum += ord(s)\n    return sum\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    count = 0\n    for i in range(len(string)):\n        count += ord(string[i])\n    return count\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(str):\n    # ascii_value = 120\n    # for i in str:\n    #     ascii_value += ord(i)\n    return sum([ord(i) for i in str])\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    str=string.lower()\n    count=0\n    for i in str:\n        if i.isalpha():\n            count=count+ord(i)\n    return count\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row, col):\n    return max(triangle[row-1][col-1] + max(triangle[row-2][col-1], triangle[row-2][col]), triangle[row-1][col-1] + max(triangle[row-2][col], triangle[row-2][col-1]))\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i, j):\n    if triangle[i][j] == 0:\n        return 0\n\n    if i == 0:\n        return triangle[i][j]\n\n    if j == 0:\n        return triangle[i][j]\n\n    if triangle[i - 1][j] > triangle[i][j]:\n        return triangle[i - 1][j]\n\n    if triangle[i][j - 1] > triangle[i][j]:\n        return triangle[i][j - 1]\n\n    return triangle[i - 1][j] + triangle[i][j - 1]\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\nfrom functools import reduce\n\n\ndef max_path_sum(triangle, m, n):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    total = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(triangle[i][j])\n            total.append(triangle[i][j])\n        row.append(triangle[i][n])\n        total.append(triangle[i][n])\n        triangle.append(row)\n\n    return reduce(lambda x, y: max(x, y), total)\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n\n    s1 = max(triangle[row-1][col], triangle[row-1][col-1]) + triangle[row][col]\n    s2 = max(triangle[row-1][col], triangle[row-1][col-1]) + triangle[row][col-1]\n    s3 = max(triangle[row-1][col], triangle[row-1][col-1]) + triangle[row-1][col]\n    return max(s1, s2, s3)\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row, col):\n    dp = [[0 for _ in range(col+1)] for _ in range(row)]\n    for j in range(col, -1, -1):\n        dp[0][j] = triangle[0][j]\n    for i in range(1, row):\n        dp[i][0] = triangle[i][0]\n        for j in range(1, col):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + triangle[i][j]\n    return dp[row-1][col]\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, n, m):\n    \"\"\"\n    Get the maximum sum of a path through a triangle using bottom-up dynamic programming.\n    O(n*m) time and space where n is the number of rows and m is the number of columns.\n    :param triangle: the triangle to compute the max path sum for\n    :param n: the number of rows in the triangle\n    :param m: the number of columns in the triangle\n    :return: the maximum total path sum through the triangle\n    \"\"\"\n    # base case\n    if n == 1 or m == 1:\n        return triangle[0][0]\n\n    # initialize first row as the first element in the triangle\n    triangle[0][1:] = triangle[0][:-1]\n    triangle[0][0] = triangle[0][0] + triangle[0][1]\n\n    # initialize first column as the first element in the triangle\n    triangle[1:] = [x[1:] for x in triangle]\n    triangle[0] = [x[0] + x[1] for x in triangle]\n\n    # iterate through the triangle to get the max path sum\n    for i in range(2, n):\n        for j in range(1, m):\n            triangle[i][j] = max(triangle[i - 1][j], triangle[i][j - 1]) + triangle[i - 1][j - 1]\n\n    return triangle[n - 1][m - 1]", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom math import inf\n\n\ndef max_path_sum(triangle, start_col, row):\n    if row == 0:\n        return triangle[start_col][row]\n    if row == 1:\n        return triangle[start_col][row] + max(triangle[start_col][row - 2], triangle[start_col + 1][row - 2])\n    return max(triangle[start_col][row - 1] + max_path_sum(triangle, start_col, row - 1),\n               triangle[start_col][row - 2] + max_path_sum(triangle, start_col, row - 2))\n\n\ndef max_path_sum2(triangle, start_col, row):\n    if row == 0:\n        return triangle[start_col][row]\n    if row == 1:\n        return triangle[start_col][row] + max(triangle[start_col][row - 2], triangle[start_col + 1][row - 2])\n    max_sum = float('-inf')\n    if triangle[start_col][row - 1] > triangle[start_col][row - 2]:\n        max_sum = triangle[start_col][row - 1] + max_path_sum2(triangle, start_col, row - 1)\n    else:\n        max_sum = triangle[start_col][row - 2] + max_path_sum2(triangle, start_col, row - 2)\n    return max_sum\n\n\ndef main():\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert max_path_sum2([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[col][col]\n    else:\n        left = triangle[col][col-1]\n        right = triangle[col][col]\n        up = triangle[row-1][col]\n        down = triangle[row][col]\n        return max(left, right, up, down) + max(left, right, up, down)\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row_index, col_index):\n    max_sum = triangle[row_index][col_index]\n    for i in range(row_index - 1, -1, -1):\n        for j in range(col_index - 1, -1, -1):\n            max_sum = max(max_sum, triangle[i][j] + max_path_sum(triangle, i, j))\n    return max_sum\n\ndef max_path_sum(triangle, row_index, col_index):\n    max_sum = triangle[row_index][col_index]\n    for i in range(col_index, row_index):\n        max_sum = max(max_sum, triangle[row_index][i] + max_path_sum(triangle, row_index - 1, i))\n    return max_sum\n\ndef max_path_sum(triangle, row_index, col_index):\n    max_sum = triangle[row_index][col_index]\n    for i in range(col_index + 1, row_index):\n        max_sum = max(max_sum, triangle[row_index][i] + max_path_sum(triangle, row_index - 1, i))\n    return max_sum\n\ndef max_path_sum(triangle, row_index, col_index):\n    max_sum = triangle[row_index][col_index]\n    for i in range(row_index, col_index + 1):\n        max_sum = max(max_sum, triangle[row_index][i] + max_path_sum(triangle, i - 1, col_index))\n    return max_sum\n\ndef max_path_sum(triangle, row_index, col_index):\n    max_sum = triangle[row_index][col_index]\n    for i in range(row_index - 1, col_index, -1):\n        max_sum = max(max_sum, triangle[", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\n# Solution:\ndef max_path_sum(triangle, row_index, col_index):\n    if col_index > row_index:\n        return 0\n    current_triangle = triangle[row_index]\n    left_sum = max_path_sum(triangle, row_index+1, col_index)\n    right_sum = max_path_sum(triangle, row_index+1, col_index+1)\n    return max(left_sum+current_triangle[col_index], right_sum+current_triangle[col_index])\n\n\n# Tests"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    a, b = n, 0\n    while n:\n        b = b * 10 + n % 10\n        n = n // 10\n    return a - b\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    num1 = 0\n    num2 = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            num1 += int(str(num)[i])\n        else:\n            num2 += int(str(num)[i])\n    return max(num1, num2)\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    if num<10:\n        return num\n    else:\n        return sum_digits_twoparts(num//10)+num%10\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    m = n//10\n    s = n%10\n    return 10*m+s\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(number):\n    # your code goes here\n    pass\n\ndef sum_digits_twoparts(number):\n    parts = [0,0]\n    while number:\n        digit = number % 10\n        parts[0] += digit\n        number = number // 10\n        digit = number % 10\n        parts[1] += digit\n        number = number // 10\n    return max(parts)\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    \"\"\"\n    We start by initializing an empty list to store all digits of a given number.\n    Then, we loop over the digits and append them to the list.\n    Next, we check if a digit has already been assigned to another digit and remove it from\n    the list.\n    Finally, we return the sum of all digits that were not yet assigned to any digit.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    result = 0\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] == digits[j]:\n                digits.remove(digits[i])\n                digits.remove(digits[j])\n                break\n    for d in digits:\n        result += d\n    return result", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\nimport pytest\nfrom solution import sum_digits_twoparts\n\n\n@pytest.mark.parametrize(\"test_input, expected\", [\n    (35, 17),\n    (40, 17),\n    (91, 43),\n    (1223, 70),\n])\ndef test_sum_digits_twoparts(test_input, expected):\n    assert sum_digits_twoparts(test_input) == expected", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\nimport unittest\nimport sys", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    pass\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    if num%2:\n        a = num\n    else:\n        a = num/2\n    b = int(str(a))\n    return b+a\n\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(a, n):\n    pass\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\n# TODO: write me\ndef longest_subseq_with_diff_one(a, x):\n    pass\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, max_diff):\n    \"\"\"\n    :param arr: list of integers\n    :param max_diff: integer\n    :return: integer\n    \"\"\"\n    if max_diff < 0:\n        raise Exception('max_diff must be greater or equal to 0.')\n\n    seq = []\n    longest_seq = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) <= max_diff:\n                seq.append(arr[j])\n                longest_seq = max(longest_seq, len(seq))\n                seq.pop()\n\n    return longest_seq\n\n\ndef test_longest_subseq_with_diff_one():\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 5) == 5\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 0) == 6\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 4) == 5\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 1) == 4\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], -1) == 4\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], -10) ==", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(A, k):\n    n = len(A)\n    if n < 2:\n        return n\n    max_len = 1\n    current_max_len = 1\n    current_seq = [A[0]]\n    for i in range(1, n):\n        if A[i] == A[i-1]+1:\n            current_seq.append(A[i])\n        else:\n            current_seq.append(A[i])\n        while current_seq[-1] - current_seq[0] > k:\n            current_seq.pop(0)\n        current_max_len = max(current_max_len, len(current_seq))\n        max_len = max(max_len, current_max_len)\n    return max_len", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(seq: List[int], n: int) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    dp = [0] * (n + 1)\n    max_len = 1\n    for x in seq:\n        for i in range(n - 1, -1, -1):\n            dp[i] = max(dp[i + 1], dp[i] + 1) if x == i + 1 else max(dp[i + 1], dp[i])\n        max_len = max(max_len, dp[-1])\n\n    return max_len\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(seq, max_size):\n    diff_one_subseq = []\n    longest = 0\n    for i in range(len(seq)):\n        if len(diff_one_subseq) == 0 or seq[i] - diff_one_subseq[-1] == 1:\n            diff_one_subseq.append(seq[i])\n            longest = max(len(diff_one_subseq), longest)\n        else:\n            diff_one_subseq.pop()\n            if i == len(seq) - 1:\n                diff_one_subseq.append(seq[i])\n                longest = max(len(diff_one_subseq), longest)\n    return longest\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom collections import deque\nfrom typing import List, Deque, Optional\n\n\ndef longest_subseq_with_diff_one(arr: List[int], k: int) -> int:\n    if k < 1:\n        return 0\n\n    que: Deque[int] = deque()\n\n    i = 0\n    while i < len(arr):\n        if que and arr[i] - que[-1] > k:\n            que.pop()\n        que.append(arr[i])\n        i += 1\n\n    i = j = 0\n    max_len = 0\n    while j < len(arr):\n        if j < len(que) and que[j] == arr[j]:\n            j += 1\n        else:\n            max_len = max(max_len, j - i + 1)\n            while i < len(que) and arr[j] - que[i] > k:\n                que.popleft()\n                i += 1\n            que.append(arr[j])\n            i += 1\n        j += 1\n\n    return max_len\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, k):\n\n    if arr is None or k < 0:\n        return 0\n    \n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        dp[i] = dp[i-1]\n        if arr[i-1] == arr[i-2]:\n            continue\n            \n        for j in range(1, i):\n            if arr[i-1] - arr[j-1] == k:\n                dp[i] = max(dp[i], dp[j-1] + 1)\n\n    return dp[-1]\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(arr: List[int], diff: int) -> int:\n    pass\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom collections import defaultdict\n\ndef longest_subseq_with_diff_one(a, k):\n    \"\"\"\n    longest subsequence such that diff between adjacents is one\n    :param a:\n    :param k:\n    :return:\n    \"\"\"\n    n = len(a)\n    #dp = [0]*n\n    dp = [1]*n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i-k, i):\n            if a[i] - a[j] != 1:\n                break\n            dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n\n\ndef longest_subseq_with_diff_one_dp(a, k):\n    \"\"\"\n    longest subsequence such that diff between adjacents is one\n    :param a:\n    :param k:\n    :return:\n    \"\"\"\n    n = len(a)\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i-k, i):\n            if a[i] - a[j] != 1:\n                break\n            dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n\n\ndef longest_subseq_with_diff_one_dp2(a, k):\n    \"\"\"\n    longest subsequence such that diff between adjacents is one\n    :param a:\n    :param k:\n    :return:\n    \"\"\"\n    n = len(a)\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, n):\n        if a[i] - a[i-k] == 1:\n            dp[i] = dp[i-k]+1\n    return max(dp)\n\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(m,n,b):\n    for i in range(m,n+1):\n        if (i%b == 0):\n            print(i,end=' ')\n            return True\n    return False", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    if(a*b==c):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(x,n,B):\n    b = 0\n    if x > 0:\n        b = B**x\n        b = b % n\n        if b == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,c):\n\n    if a == c:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_contain_b(a, b, i):\n    if i == b:\n        return True\n    elif i > b:\n        return False\n    elif a == i:\n        return True\n    elif a > i:\n        return False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    if b == 0:\n        return True\n    else:\n        if a == 0:\n            return False\n        else:\n            if a == c:\n                return True\n            else:\n                return does_Contain_B(a-1,b-1,c-1)\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n# Recursive\ndef does_Contain_B(a,b,c):\n    if a == b:\n        return True\n    if c > a:\n        if c < b:\n            return False\n    return does_Contain_B(a,b,c+1)\n\n#Non recursive\ndef does_Contain_B(a,b,c):\n    while c <= b:\n        if a == c:\n            return True\n        c = c + 1\n    return False\n\n#Driver code", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    for x in range(a,b+1):\n        if x in range(b,c+1):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(x,a,b):\n    if (a+b)%2 == 0:\n        a_last = a + b // 2\n        b_last = b + a // 2\n    else:\n        a_last = a + b // 2 + 1\n        b_last = b + a // 2\n    if x <= a_last or x > b_last:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,c):\n    return a == b*c\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1, num2):\n    gcd = math.gcd(num1, num2)\n    if gcd == 1:\n        return True\n    else:\n        return False\n\n\ndef main():\n    num1 = 17\n    num2 = 13\n    assert is_coprime(num1, num2) == True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a == b or a < b:\n        return False\n    for i in range(2, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1, num2):\n    \"\"\"\n    num1: integer\n    num2: integer\n    return: boolean\n    \"\"\"\n    if num1 % 2 == 0 or num2 % 2 == 0:\n        return False\n    a = num1\n    b = num2\n    i = 0\n    while i < 2:\n        a = int(a / 2)\n        b = int(b / 2)\n        if a == 0 or b == 0:\n            return False\n        i += 1\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a == 1 or b == 1:\n        return False\n    else:\n        while a != 1:\n            if b % a == 0:\n                return False\n            a, b = b, a % b\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n#Soln 1 - O(n)\ndef is_coprime(a,b):\n    if a == 0:\n        return b==0\n    elif a > b:\n        a, b = b, a\n    for i in range(2,a//2+1):\n        if (a % i == 0) and (b % i == 0):\n            return False\n    return True\n\n#Soln 2 - O(log(log(n)))\ndef is_coprime(a,b):\n    if a == 0:\n        return b==0\n    elif a > b:\n        a, b = b, a\n    for i in range(2,a//2+1):\n        if (a % i == 0) and (b % i == 0):\n            return False\n    if b == 0:\n        return True\n    else:\n        for i in range(2,b//2+1):\n            if (a % i == 0) and (b % i == 0):\n                return False\n        return True", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a, b):\n    # TODO: return true if numbers are coprime and false otherwise\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    if a%b == 0 and b%a == 0:\n        return False\n    elif a%b == 0 or b%a == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(n1, n2):\n    for i in range(1, int(n2/2) + 1):\n        if n1 % i == 0 and n2 % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1,num2):\n    #your code here\n    for i in range(1,num1):\n        if(num1 % i == 0) and (num2 % i == 0):\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\nfrom math import sqrt\ndef is_coprime(a,b):\n\t# print(a,b)\n\tif a<b:\n\t\ta,b=b,a\n\tif b==0:\n\t\treturn True\n\telse:\n\t\tif (a%b)==0:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn is_coprime(b,a%b)\n\n# assert is_coprime(17,13) == True\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge(a,b):\n    if len(a) == 0:\n        return b\n    elif len(b) == 0:\n        return a\n    else:\n        if a[0] < b[0]:\n            return [a[0]] + merge(a[1:], b)\n        else:\n            return [b[0]] + merge(a, b[1:])\n\ndef merge_sort(a):\n    if len(a) <= 1:\n        return a\n    else:\n        mid = len(a) // 2\n        left = merge_sort(a[:mid])\n        right = merge_sort(a[mid:])\n        return merge(left, right)", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    \"\"\"\n    Sort the given array by using merge sort.\n\n    :param arr: The array to be sorted.\n    :return: The sorted array.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    middle = len(arr) // 2\n    left = arr[:middle]\n    right = arr[middle:]\n    return merge(merge_sort(left), merge_sort(right))\n\ndef merge(left, right):\n    result = []\n    while len(left) and len(right):\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result += left + right\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    left = merge_sort(arr[:len(arr)//2])\n    right = merge_sort(arr[len(arr)//2:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr)//2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    res = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            res.append(left.pop(0))\n        else:\n            res.append(right.pop(0))\n    if len(left) > 0:\n        res += left\n    else:\n        res += right\n    return res\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr:list):\n    if len(arr) <= 1:\n        return arr\n    middle = len(arr) // 2\n    left = merge_sort(arr[:middle])\n    right = merge_sort(arr[middle:])\n    return merge(left, right)\n\ndef merge(left:list, right:list):\n    result = []\n    while left and right:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left + right)\n    return result\n\ndef merge_sort_2(arr:list):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort_2(arr[:mid])\n    right = merge_sort_2(arr[mid:])\n    return merge_list(left, right)\n\ndef merge_list(left:list, right:list):\n    result = []\n    left_index, right_index = 0, 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n    result.extend(left[left_index:] + right[right_index:])\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(array):\n    if len(array) <= 1:\n        return array\n    middle = len(array) // 2\n    left = merge_sort(array[:middle])\n    right = merge_sort(array[middle:])\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    while left and right:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    if left:\n        result += left\n    else:\n        result += right\n    return result", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nimport unittest\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(A):\n    \"\"\"\n    :param A: an array of integers\n    :return: A, sorted by using merge sort\n    \"\"\"\n    if len(A) <= 1:\n        return A\n    mid = len(A) // 2\n    L = merge_sort(A[:mid])\n    R = merge_sort(A[mid:])\n    return merge(L, R)\n\ndef merge(L, R):\n    \"\"\"\n    Merge two sorted sublists into one\n    :param L: A sorted list\n    :param R: A sorted list\n    :return: the merged list\n    \"\"\"\n    i = 0\n    j = 0\n    k = 0\n    while i < len(L) and j < len(R):\n        if L[i] < R[j]:\n            A[k] = L[i]\n            i += 1\n        else:\n            A[k] = R[j]\n            j += 1\n        k += 1\n    while i < len(L):\n        A[k] = L[i]\n        i += 1\n        k += 1\n    while j < len(R):\n        A[k] = R[j]\n        j += 1\n        k += 1\n    return A\n\ndef test_merge_sort():\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\n\ndef merge_sort_iterative(A):\n    \"\"\"\n    :param A: an array of integers\n    :return: A, sorted by using merge sort\n    \"\"\"\n    L = []\n    R = []\n    i = 0\n    while i < len(A):\n        if i + len(L) >= len(A):\n            L += A[i:]\n            break\n        elif i + len(R) >= len(A):\n            R += A[i:]\n            break\n        elif A[i] < A[", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(unsorted):\n    if len(unsorted) <= 1:\n        return unsorted\n    else:\n        midpoint = len(unsorted) // 2\n        left = merge_sort(unsorted[:midpoint])\n        right = merge_sort(unsorted[midpoint:])\n        return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            merged.append(left.pop(0))\n        else:\n            merged.append(right.pop(0))\n    return merged + left + right\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nimport random\n\ndef merge_sort(array):\n    \"\"\"\n    Sorts the given list by using merge sort.\n\n    Parameters\n    ----------\n    array : list\n        The list to sort.\n\n    Returns\n    -------\n    list\n        The sorted list.\n\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\n    middle_index = len(array) // 2\n    left_array = array[:middle_index]\n    right_array = array[middle_index:]\n\n    left_sorted_array = merge_sort(left_array)\n    right_sorted_array = merge_sort(right_array)\n\n    return merge(left_sorted_array, right_sorted_array)\n\n\ndef merge(left_array, right_array):\n    \"\"\"\n    Merges the two given lists by using merge sort.\n\n    Parameters\n    ----------\n    left_array : list\n        The list on the left side of the merge.\n    right_array : list\n        The list on the right side of the merge.\n\n    Returns\n    -------\n    list\n        The merged list.\n\n    \"\"\"\n    i = j = 0\n    merged_array = []\n\n    while i < len(left_array) and j < len(right_array):\n        if left_array[i] <= right_array[j]:\n            merged_array.append(left_array[i])\n            i += 1\n        else:\n            merged_array.append(right_array[j])\n            j += 1\n\n    while i < len(left_array):\n        merged_array.append(left_array[i])\n        i += 1\n\n    while j < len(right_array):\n        merged_array.append(right_array[j])\n        j += 1\n\n    return merged_array\n\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, x):\n    \"\"\"\n    finds the vertex of a parabola\n    \"\"\"\n    # write the equation of the parabola\n    eq = a*x**2 + b*x +c\n\n    # solve for x\n    solution = solve(eq, x)\n    \n    return solution\n\n# test the function\na,b,x = 5,3,2", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The parabola has no vertex\"\n    x1 = (-b + discriminant)**0.5\n    x2 = (-b - discriminant)**0.5\n    x1 = (-b + discriminant)**0.5\n    x1 = (-b - discriminant)**0.5\n    return (x1, (a*x1**2 + b*x1 + c)/(2*a))", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    # TODO: Implement me!\n    pass\n\n# Test cases", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nimport numpy as np\n\ndef parabola_vertex(a,b,c):\n    det = b**2 - 4*a*c\n    if det == 0:\n        return (0, (-b + np.sqrt(b**2 - 4*a*c))/(2*a))\n    elif det > 0:\n        x1 = (-b + np.sqrt(b**2 - 4*a*c))/(2*a)\n        x2 = (-b - np.sqrt(b**2 - 4*a*c))/(2*a)\n        return (x1, x2)\n    else:\n        raise ValueError('The discriminant must be positive.')\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    d = b**2-4*a*c\n    if d < 0:\n        return None\n    x1 = (-b+d**0.5)/(2*a)\n    x2 = (-b-d**0.5)/(2*a)\n    return (x1,x2)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + delta**0.5)/(2*a)\n        y1 = (1 + a*x1 + c*x1**2)/2\n        x2 = (-b - delta**0.5)/(2*a)\n        y2 = (1 + a*x2 + c*x2**2)/2\n        print(x1,y1,x2,y2)\n        return x1,y1\n    elif delta == 0:\n        x = -b/(2*a)\n        y = (1 + a*x + c*x**2)/2\n        return x,y\n    else:\n        print(\"can't have vertex for this parabola\")\n        return None\n\n\n# -\n\nparabola_vertex(5,3,2)\n\n# +", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nfunction parabola_vertex(a,b,c)\n    d = b^2 - 4*a*c\n    if d<0\n        @error \"this is a negative discriminant\"\n    end\n    x1 = (-b + sqrt(d)) / (2*a)\n    x2 = (-b - sqrt(d)) / (2*a)\n    @assert isapprox(x1,x2,rtol=1e-3)\n    @assert isapprox(x1,c/b,rtol=1e-3)\n    (x1,x2)\nend\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n\t# YOUR CODE HERE\n    return ((-(b**2)/(4*a))**0.5,((-(b**2)/(4*a))+(-4*c)/(4*a))**0.5)\n\n# Test if the function is correct", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    delta = (b**2) - 4 * a * c\n    if delta < 0:\n        return None\n    x = -b + math.sqrt(delta) / (2 * a)\n    y = -b - math.sqrt(delta) / (2 * a)\n    return (x, y)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    #your code here\n    x = -b/(2*a)\n    y = a*(b**2)/(4*a**2) -c/(2*a)\n    return x,y\n    "], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, num):\n    return [row[num] for row in matrix]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(given_list, element):\n    if type(given_list) != list:\n        raise TypeError(\"List required\")\n    else:\n        if type(element) not in [int, list]:\n            raise TypeError(\"Element should be integer or a list of integers\")\n        else:\n            for i in range(len(given_list)):\n                if isinstance(element, list):\n                    if element == []:\n                        return []\n                    elif element != []:\n                        for j in element:\n                            if j < len(given_list[i]) and j > -1:\n                                result.append(given_list[i][j])\n                else:\n                    if element < len(given_list[i]) and element > -1:\n                        result.append(given_list[i][element])\n\n# for i in range(len(result)):\n#     print(result[i])\n#\n# print(result)\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(my_list, n):\n    return [x[n] for x in my_list]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l, key):\n    result = []\n    for sublist in l:\n        for element in sublist:\n            if element == key:\n                result.append(element)\n    return result\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list, element):\n    return [item[element] for item in list]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list2d,element):\n    return list(filter(lambda x:x==element,list2d))\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(x, elem):\n    result = []\n    for a in x:\n        for b in a:\n            if b == elem:\n                result.append(b)\n    return result\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, element):\n    rows = []\n    for row in matrix:\n        rows.append(row[element])\n\n    return rows\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, index):\n    return [matrix[i][index] for i in range(len(matrix))]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(L,i):\n    r = []\n    for x in L:\n        r.append(x[i])\n    return r\n\n#print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(n):\n    return n ^ (n & -n)\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num & 10\n\ndef even_bit_toggle_number_v2(num):\n    return (num & 10) | (num & 11)\n\ndef even_bit_toggle_number_v3(num):\n    return (num & 11) | (num & 10)", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    result = 0\n    for i in range(0, 32):\n        if number & (1 << i) > 0:\n            result |= (1 << i)\n    return result\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# solution:\ndef even_bit_toggle_number(number):\n    return number & ~1\n\n# alternate solution:\ndef even_bit_toggle_number(number):\n    number ^= 1\n    return number", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(x):\n    y = x ^ (x & (x-1))\n    return y\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    return number & 0xFFFFFFFE\n\n# Test", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# Write your code here\ndef even_bit_toggle_number(number):\n    mask = 1\n    result = 0\n    for i in range(0, number):\n        result = result + (mask * (number & mask))\n        mask = mask * 2\n    return result\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    # Your code here\n    return number\n\n\n# Add your own tests", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(x):\n    res = 0\n    for i in range(32):\n        if i % 2 == 0:\n            res = res | (x & 1 << i)\n    return res\n\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_str_int):\n    \"\"\"\n    Converts each element in tuple_str_int to int.\n    :param tuple_str_int: The tuple with elements to convert.\n    :return: The tuple with converted elements.\n    \"\"\"\n    tuple_int_int = tuple()\n    for item in tuple_str_int:\n        tuple_int_int.append(int(item[0]))\n        tuple_int_int.append(int(item[1]))\n    return tuple_int_int\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_of_str):\n    return tuple(int(val) for val in tuple_of_str)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tuple_str):\n    \"\"\"\n    Function takes in tuple of strings and converts to tuple of ints\n    \"\"\"\n    return tuple(tuple(int(num) for num in str(i).split()) for i in tuple_str)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\n# Just use the zip method\n# I don't get why you would use tuple_int_str. Seems like unnecessary code. \ndef tuple_int_str(tup):\n    return (int(tup[0]), int(tup[1]))\n\n# Just a test to show how it works ", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tpl):\n    new_tpl = []\n    for i in tpl:\n        new_tpl.append((int(i[0]), int(i[1])))\n    return tuple(new_tpl)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(lst):\n    list1 = []\n    for element in lst:\n        list1.append((int(element[0]), int(element[1])))\n    return list1\n\n# # tuple_int_str((('333', '33'), ('1416', '55')))\n# assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n# assert tuple_int_str((('333', '33', '33'), ('1416', '55', '66')))==((333, 33), (1416, 55))\n# assert tuple_int_str((('333', '33'), ('1416', '55', '66')))==((333, 33), (1416, 55))\n# assert tuple_int_str((('333', '33', '33', '33'), ('1416', '55', '66', '77')))==((333, 33), (1416, 55))\n# assert tuple_int_str((('333', '33', '33', '33', '33'), ('1416', '55', '66', '77', '88')))==((333, 33), (1416, 55))\n# assert tuple_int_str((('333', '33', '33', '33', '33', '33'), ('1416', '55', '66', '77', '88', '99')))==((333, 33), (1416, 55))", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(values):\n    return tuple(tuple(int(value) for value in value_pair) for value_pair in values)\n\n\n# --\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple((int(x[0]), int(x[1])) for x in tup)\n\n# testing", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_of_tuples):\n\toutput = []\n\tfor t in tuple_of_tuples:\n\t\toutput.append(int(t[0]), int(t[1]))\n\treturn tuple(output)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup_str):\n    \"\"\"\n    :param tup_str: tuple of str\n    :return: tuple of int\n    \"\"\"\n    return tuple([(int(a), int(b)) for a,b in tup_str])\n\n# Test tuple_int_str()"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    return [[] if i != j else [1, i] for i, j in zip(lst, lst[1:])]\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(items):\n    result = []\n    for i in items:\n        if i == items[0]:\n            result.append([1, i])\n        else:\n            result.append([1, items[0]])\n            result.append([1, i])\n    return result\n\n\ndef test_encode_list():\n    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    ret = []\n    num = l[0]\n    for i in range(1, len(l)):\n        if l[i] == num:\n            ret.append([1,num])\n            num = l[i]\n        else:\n            ret.append([2,num])\n            num = l[i]\n    ret.append([1,num])\n    return ret\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    pass\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(nums):\n    from collections import Counter\n    res = []\n    for val, count in Counter(nums).items():\n        res.append([count, val])\n    return res\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n\tl = []\n\tfor x in lst:\n\t\tif isinstance(x,list):\n\t\t\tl += [x]\n\t\telif x == lst[0]:\n\t\t\tl += [[x,1]]\n\t\telse:\n\t\t\ty = list(x)\n\t\t\ty[1] = 1\n\t\t\tl += [y]\n\treturn l\n\ndef encode_list(lst):\n\tl = []\n\tfor x in lst:\n\t\tif isinstance(x,list):\n\t\t\tl += [x]\n\t\telif x == lst[0]:\n\t\t\tl += [[x,1]]\n\t\telse:\n\t\t\ty = list(x)\n\t\t\ty[1] = 1\n\t\t\tl += [y]\n\treturn l\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\nfrom unittest import TestCase\n\ndef encode_list(the_list):\n    return [[n, 1] for n in the_list]\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(x):\n    list_of_lists = []\n    running = 1\n    new_element = None\n    for element in x:\n        if new_element is None:\n            new_element = element\n            running = 1\n            list_of_lists.append([element, running])\n        else:\n            if element == new_element:\n                running += 1\n            else:\n                list_of_lists.append([element, running])\n                new_element = element\n                running = 1\n    if running != 1:\n        list_of_lists.append([element, running])\n    return list_of_lists\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(x):\n    rle=[]\n    x.sort()\n    for y in x:\n        if(y != x[x.index(y)+1]):\n            rle.append([x.index(y)+1,y])\n    return rle\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(list):\n    list_new = []\n    for i in range(0,len(list)):\n        if type(list[i]) == type(list[i-1]):\n            if list[i] == list[i-1]:\n                list_new.append([list[i],1])\n            else:\n                list_new.append([list[i],1])\n                list_new.append([list[i-1],1])\n        else:\n            if list[i] == list[i-1]:\n                list_new.append([list[i],1])\n            else:\n                list_new.append([list[i],1])\n                list_new.append([list[i-1],2])\n    return list_new\n\ndef test_encode_list():\n    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, m):\n    op_count = 0\n    for i in range(len(arr)):\n        if arr[i] != m:\n            op_count += (m - arr[i]) * (k // (m - arr[i]))\n    return op_count\n\narr = [2,2,2,2]\nk = 4\nm = 3", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(A,k,val):\n    if len(A) < k:\n        return None\n    if all(i == val for i in A):\n        return 0\n    A.sort()\n    ops = 0\n    for i in range(len(A)):\n        if A[i] != val:\n            A[i+1:k+1] = A[:i] + A[i+1:k+1]\n            break\n    if all(i == val for i in A):\n        return ops\n    else:\n        return min_Ops(A,k,val) + 1\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,target):\n\t# Write your code here\n\tif len(arr) < k :\n\t\treturn -1\n\treturn bfs(arr,target,k)\ndef bfs(arr,target,k):\n\tif len(arr) == k:\n\t\treturn 0\n\tqueue = []\n\tqueue.append(arr)\n\tlevel = 0\n\twhile queue :\n\t\tlevel += 1\n\t\tnewQueue = []\n\t\tfor i in range(len(queue)) :\n\t\t\tarr = queue.pop(0)\n\t\t\tfor j in range(len(arr)):\n\t\t\t\tnewArr = arr[:]\n\t\t\t\tnewArr[j] = target - arr[j]\n\t\t\t\tif newArr not in newQueue:\n\t\t\t\t\tnewQueue.append(newArr)\n\t\tqueue = newQueue\n\treturn level - 1\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,target):\n    ans = 0\n    if len(arr) < k:\n        return -1\n    i = 0\n    while i<k:\n        if arr[i] != target:\n            i+=1\n        else:\n            arr[i] = target\n            ans+=1\n    return ans", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,n,k):\n    arr = sorted(arr)\n    # create an empty array for k operations\n    ops = []\n    for i in range(k):\n        ops.append(0)\n    i = 0\n    j = 0\n    while i < n:\n        if i==n-1:\n            break\n        if j==n-1:\n            j = 0\n            i += 1\n            continue\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            ops[i] += 1\n            ops[j] += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return sum(ops)\n\n\n# ### Reverse a string using recursion\n\n# +\ndef rev(s):\n    # initialize variables\n    n = len(s)\n    if n <= 1:\n        return s\n    else:\n        return s[-1] + rev(s[:-1])\n    ", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,n):\n    if n == 1:\n        return 0\n    max_element = arr[0]\n    min_element = arr[1]\n    for i in range(2,n):\n        if arr[i]>max_element:\n            max_element = arr[i]\n        if arr[i]<min_element:\n            min_element = arr[i]\n    return k*n + max(min_element,0) - min(max_element,0)\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, n):\n    arr.sort()\n    for i in range(n-1):\n        if arr[i]!=arr[i+1]:\n            k -= 1\n    return k\n\n# assert min_Ops([1,2,3,4,5],4,5) == 1\n# assert min_Ops([1,2,3,4,5,6,7,8,9],4,8) == 2\n# assert min_Ops([1,2,3,4,5,6,7,8,9],3,8) == 3\n# assert min_Ops([2,2,2,2],4,3) == 0\n\narr = [1,2,3,4,5,6,7,8,9]\nk = 4\nn = len(arr)", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,n,k):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[j] < arr[i]:\n                count += 1\n                break\n        if count > k:\n            break\n    return count\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(array,k,val):\n    # Your code here\n    for i in range(0,k):\n        temp = 0\n        for j in range(0,len(array)):\n            temp = max(array[j],temp)\n        for j in range(0,len(array)):\n            if(array[j] != temp):\n                array[j] = temp - 1\n    print(\"Minimum operations required to make all elements equal is\",temp)\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,m):\n    dic = {arr[0] : 0}\n    dic1 = {arr[0] : 0}\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i] not in dic:\n            dic[arr[i]] = 1\n            dic1[arr[i]] = 1\n            if dic[arr[i]] > m:\n                dic[arr[i]] = 0\n                dic1[arr[i]] = 0\n            elif dic1[arr[i]] > m:\n                dic[arr[i]] = 0\n                dic1[arr[i]] = 0\n        else:\n            dic[arr[i]] += 1\n            dic1[arr[i]] += 1\n            if dic[arr[i]] > m:\n                dic[arr[i]] = 0\n                dic1[arr[i]] = 0\n            elif dic1[arr[i]] > m:\n                dic[arr[i]] = 0\n                dic1[arr[i]] = 0\n    temp = dic.copy()\n    temp1 = dic1.copy()\n    count = 0\n    for key in temp:\n        if temp[key] < k:\n            temp[key] = 0\n        else:\n            temp[key] -= k\n            count += 1\n    for key in temp1:\n        if temp1[key] < k:\n            temp1[key] = 0\n        else:\n            temp1[key] -= k\n            count += 1\n    if count < k:\n        return count\n    else:\n        return 0\n\n\n# +"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    if month == 'January' or month == 'February' or month == 'March':\n        if day < 12:\n            return ('winter')\n        elif day == 12:\n            return ('winter')\n        elif day == 13:\n            return ('winter')\n        elif day >= 14:\n            return ('winter')\n    if month == 'April' or month == 'May' or month == 'June':\n        if day < 18:\n            return ('spring')\n        elif day == 18:\n            return ('spring')\n        elif day == 19:\n            return ('spring')\n        elif day >= 20:\n            return ('spring')\n    if month == 'July' or month == 'August' or month == 'September':\n        if day < 23:\n            return ('summer')\n        elif day == 23:\n            return ('summer')\n        elif day == 24:\n            return ('summer')\n        elif day >= 25:\n            return ('summer')\n    if month == 'October' or month == 'November' or month == 'December':\n        if day < 29:\n            return ('autumn')\n        elif day == 29:\n            return ('autumn')\n        elif day == 30:\n            return ('autumn')\n        elif day >= 31:\n            return ('autumn')", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    if day >= 21:\n        return 'summer'\n    elif day >= 16 and day <= 20:\n        return 'spring'\n    elif day >= 11 and day <= 15:\n        return 'winter'\n    elif day <= 10:\n        return 'autumn'\n\n# TESTS\n\n# print(month_season('January', 4))\n# print(month_season('March', 5))\n# print(month_season('June', 10))\n# print(month_season('November', 2))", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if day<=23 and day>=1 and month=='January':\n        return \"winter\"\n    elif day<=21 and day>=11 and month=='February':\n        return \"winter\"\n    elif day<=20 and day>=2 and month=='March':\n        return \"winter\"\n    elif day<=21 and day>=11 and month=='April':\n        return \"spring\"\n    elif day<=20 and day>=2 and month=='May':\n        return \"summer\"\n    elif day<=21 and day>=11 and month=='June':\n        return \"summer\"\n    elif day<=20 and day>=2 and month=='July':\n        return \"autumn\"\n    elif day<=21 and day>=11 and month=='August':\n        return \"autumn\"\n    elif day<=20 and day>=2 and month=='September':\n        return \"autumn\"\n    elif day<=21 and day>=11 and month=='October':\n        return \"winter\"\n    elif day<=20 and day>=2 and month=='November':\n        return \"winter\"\n    elif day<=21 and day>=11 and month=='December':\n        return \"winter\"\n\nmonth_season('January',4)\n# -\n\n# ## 9. Write a program to identify sublist [1,1,5] is there in the given list in the same order, if yes print \"It's a match\" otherwise print \"It's gone\".\n\nlst=[1,5,6,4,1,2,3,5]\ns=[1,1,5]\nx=lst.count(s)", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n\tmonths={1:\"winter\", 2:\"winter\", 3:\"spring\", 4:\"spring\", 5:\"spring\", 6:\"summer\", 7:\"summer\", 8:\"summer\", 9:\"autumn\", 10:\"autumn\", 11:\"autumn\", 12:\"winter\"}\n\treturn months[month], months[day]\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    if month in ['March','April','May','June'] and day > 10:\n        return 'summer'\n    elif month in ['July','August','September','October'] and day > 10:\n        return 'autumn'\n    elif month in ['November','December'] and day > 10:\n        return 'winter'\n    else:\n        return 'spring'\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in 'January':\n        season = 'winter'\n    elif month in 'February':\n        season = 'winter'\n    elif month in 'March':\n        season = 'spring'\n    elif month in 'April':\n        season = 'spring'\n    elif month in 'May':\n        season = 'summer'\n    elif month in 'June':\n        season = 'summer'\n    elif month in 'July':\n        season = 'summer'\n    elif month in 'August':\n        season = 'fall'\n    elif month in 'September':\n        season = 'fall'\n    elif month in 'October':\n        season = 'fall'\n    elif month in 'November':\n        season = 'winter'\n    elif month in 'December':\n        season = 'winter'\n    else:\n        season = \"Not Found\"\n    return season\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n# your code here\n\n# +", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    if month == 'January' or month == 'February':\n        if day > 20:\n            return 'winter'\n        else:\n            return 'winter'\n    elif month == 'March' or month == 'April':\n        return 'spring'\n    elif month == 'May' or month == 'June':\n        return 'summer'\n    elif month == 'July' or month == 'August':\n        return 'summer'\n    elif month == 'September' or month == 'October':\n        return 'autumn'\n    elif month == 'November' or month == 'December':\n        if day > 15:\n            return 'winter'\n        else:\n            return 'winter'\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n\tif day>=1 and day<=19:\n\t\tseason = 'winter'\n\telif day>=20 and day<=31:\n\t\tseason = 'spring'\n\telif day>=1 and day<=17:\n\t\tseason = 'summer'\n\telif day>=18 and day<=30:\n\t\tseason = 'autumn'\n\telse:\n\t\tseason = 'winter'\n\treturn season\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    seasons = ['winter', 'spring', 'summer', 'fall']\n    for i in range(len(seasons)):\n        if (seasons[i][0] <= month <= seasons[i][1]) and seasons[i][2] <= day <= seasons[i][3]:\n            return seasons[i]\n#print(month_season('January',4))\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = (n - b) // a\n    y = (n - a * x) // b\n    return 'x = {}, y = {}'.format(x, y)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = 0\n    y = 0\n    if b != 0:\n        x = n / a\n        y = n - (a * x)\n    else:\n        x = None\n    return(f\"x = {x}, y = {y}\")", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n  return 'x = ' + str(int(n/a)), 'y = ' + str(int(n/b))\n\n#print(solution(2, 3, 7))\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nimport pytest\n\n\ndef solution(a, b, n):\n    x = (n - b) // a\n    y = (n - a * x) // b\n    return 'x = {}, y = {}'.format(x, y)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    # Fill this in.\n    x = 0\n    y = 0\n    while a*x+b*y!=n:\n        x+=1\n        y+=1\n    return ('x = ', x, ', y = ', y)", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    print(f'x = {n // a}, y = {n // b}')\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    \"\"\"\n    a, b, n: integers\n    Returns: a, b, x, y and an error message\n    \"\"\"\n    x = 0\n    y = 0\n    # Do something here to find x, y\n    return \"x = \", x, \", y = \", y\n\n# We can test our function with the following code:", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n  x, y = -1, -1\n  for x in range(1, 10000):\n    for y in range(1, 10000):\n      if (a * x + b * y == n):\n        return('x = ', x, ', y = ', y)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x, y = n//a, n//b\n    assert a*x + b*y == n\n    return x, y\n\n# The following function is a unit test using the pytest module.\nimport pytest\n\n@pytest.mark.parametrize('a, b, n', [(2, 3, 7)])\ndef test_solution(a, b, n):\n    x, y = solution(a, b, n)\n    assert x == 2\n    assert y == 1", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    \"\"\"\n    Args:\n        a: int\n        b: int\n        n: int\n    Returns:\n        string: x = value, y = value\n    Raises:\n    \"\"\"\n    return \"x = \", a, \", y = \", b"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(a, b):\n    for i in b:\n        try:\n            a.remove(i)\n        except ValueError:\n            pass\n    return a\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(lst, rem):\n    lst_out = []\n    for x in lst:\n        if x not in rem:\n            lst_out.append(x)\n    return lst_out\n\n\ndef remove_elements2(lst, rem):\n    lst_out = [x for x in lst if x not in rem]\n    return lst_out\n\ndef remove_elements3(lst, rem):\n    return [x for x in lst if x not in rem]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list_1, list_2):\n    return [x for x in list_1 if x not in list_2]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    list1 = [x for x in list1 if x not in list2]\n    return list1\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1,list2):\n    for e in list2:\n        list1.remove(e)\n    return list1\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1,list2):\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list\n\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = [2, 4, 6, 8]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(my_list, to_remove):\n    return [x for x in my_list if x not in to_remove]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(a, b):\n    a[:] = [x for x in a if x not in b]\n    return a\n\n\n# assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(a,b):\n    return [x for x in a if x not in b]\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    result = 0\n    for i in range(0, n):\n        result += i\n    return result\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n < 0:\n        return None\n    res = 0\n    for i in range(n):\n        res += i\n    return res\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n\tsum = 0\n\tfor x in range(0, n):\n\t\tsum = sum + x\n\treturn sum\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    arr = []\n    for i in range(n+1):\n        arr.append(i*(i+1)/2)\n    arr.reverse()\n    total = 0\n    for i in range(len(arr)):\n        if i <= n-1:\n            total = total + arr[i]\n    return total\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    total = 0\n    for x in range(n):\n        total += x + n - (2*x)\n    return total", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    result = 0\n    for i in range(n, 0, -2):\n        result += i\n    return result\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    return n * (n + 1) / 2\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    return (n*(n-1))//2\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    return sum([i for i in range(1,n+1)])\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    return sum(range(1, n + 1))\n\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, r):\n    return n * r**2\n\n#testing\nimport math\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(num_sides,radius):\n    return 0.25*radius**2*num_sides\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, r):\n    \"\"\"\n    calculate the area of a regular polygon\n    \"\"\"\n    return n * r ** 2 / (4 * math.tan(math.pi / n))\n\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    a=math.pi*(s**2)/n\n    return a\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, side_length):\n    # YOUR CODE HERE\n    return n*side_length**2/4\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\nimport math\n\ndef area_polygon(n, r):\n    area = n * r**2 * math.sin(math.pi / n) / (1 - math.cos(math.pi / n))\n    return area\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\ndef area_polygon(n,r):\n    return n*math.pow(r,2)/(4*math.tan(math.pi/n))", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    return n*s**2/4\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,r):\n    return n*r**2.0\n\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\n\ndef area_polygon(n,s):\n    return n*s*math.sin(math.radians(360/n)/2)\n\ndef main():\n    print(area_polygon(4,20))\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1, num2):\n    if num1 == num2:\n        return True\n    if num1 > num2:\n        num1, num2 = num2, num1\n    div1 = [i for i in range(1, num1+1) if num1%i == 0]\n    div2 = [i for i in range(1, num2+1) if num2%i == 0]\n    return set(div1) == set(div2)\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    l=[]\n    sum1=0\n    sum2=0\n    for i in range(1,a+1):\n        if a%i==0:\n            sum1+=i\n    for i in range(1,b+1):\n        if b%i==0:\n            sum2+=i\n    if sum1==sum2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    sum1 = 0\n    for i in range(1, a+1):\n        if(a%i == 0):\n            sum1 += i\n            if(a/i == b):\n                return True\n    if(sum1 == b):\n        return True\n    else:\n        return False\n\n# Test Cases\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n,k):\n\tassert isinstance(n, int), \"n must be an integer\"\n\tassert isinstance(k, int), \"k must be an integer\"\n\tif n == k:\n\t\treturn True\n\telse:\n\t\tnum_divisors = get_divisors(n)\n\t\tnum_divisors_k = get_divisors(k)\n\t\tsum_divisors_n = sum(num_divisors)\n\t\tsum_divisors_k = sum(num_divisors_k)\n\t\tif sum_divisors_n == sum_divisors_k:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\ndef get_divisors(n):\n\tassert isinstance(n, int), \"n must be an integer\"\n\tdivisors = []\n\ti = 1\n\twhile i <= n:\n\t\tif n % i == 0:\n\t\t\tdivisors.append(i)\n\t\ti += 1\n\treturn divisors", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    \"\"\"\n    Function to check whether the sum of divisors are same or not.\n    \"\"\"\n    s = 0\n    for i in range(1,a+1):\n        if a%i == 0:\n            s += i\n    for i in range(1,b+1):\n        if b%i == 0:\n            s += i\n    if s == a+b:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    a=a/2\n    b=b/2\n    while a>=2:\n        if a%2==0:\n            a=a/2\n        else:\n            a=a+1\n    while b>=2:\n        if b%2==0:\n            b=b/2\n        else:\n            b=b+1\n    if a==b:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1, num2):\n    divisors1 = [i for i in range(1,num1) if num1 % i == 0]\n    divisors2 = [i for i in range(1,num2) if num2 % i == 0]\n    if sum(divisors1) == sum(divisors2):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    divisors = [x for x in range(1, int(b**0.5)+1)]\n    sum1 = sum([x for x in divisors if b%x == 0])\n    sum2 = sum([x for x in divisors if a%x == 0])\n    return sum1 == sum2", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num,n):\n    if num%n != 0:\n        return False\n    s=sum(divisors(n))\n    return s==num\n\ndef divisors(n):\n    s=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            s.append(i)\n    return s\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n,m):\n    sum_of_divisors_1 = 0\n    sum_of_divisors_2 = 0\n    for i in range(1, n+1):\n        if (n%i == 0):\n            sum_of_divisors_1 += i\n    for j in range(1, m+1):\n        if (m%j == 0):\n            sum_of_divisors_2 += j\n    if (sum_of_divisors_1 == sum_of_divisors_2):\n        return True\n    return False"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    char_count = {}\n    for char in string.lower():\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    return sum([1 for i in s if i in \"abcdefghijklmnopqrstuvwxyz\"])", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(str_to_count_pos):\n    list_of_chars = list(str_to_count_pos.lower())\n    list_of_chars.extend(list(str_to_count_pos.upper()))\n    list_of_chars = sorted(list(set(list_of_chars)))\n    list_of_chars.reverse()\n    count = 0\n    for char in list_of_chars:\n        if char == str_to_count_pos.lower()[0]:\n            count += 1\n        elif char == str_to_count_pos.upper()[0]:\n            count += 1\n        else:\n            pass\n    return count\n\n\ndef main():\n    print(count_char_position(\"xbcefg\"))\n    print(count_char_position(\"Abcdefghijklmnopqrstuvwxyz\"))\n    print(count_char_position(\"ABcdefghijklmnopqrstuvwxyz\"))\n    print(count_char_position(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(count_char_position(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    print(count_char_position(\"ABCDE\"))\n    print(count_char_position(\"abcdef\"))\n\n\nmain()", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    >>> count_char_position(\"xbcefg\")\n    2\n    \"\"\"\n    return len([i for i, x in enumerate(string) if x in \"abcdefghijklmnopqrstuvwxyz\"])\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    count = 0\n    string = string.lower()\n    for i in range(len(string)):\n        if string[i] in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    count = 0\n    for i in s:\n        if i.islower() and s[i.isupper()].islower():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    return string.count('a') + string.count('e') + string.count('i') + string.count('o') + string.count('u') + string.count('b') + string.count('c') + string.count('d') + string.count('f') + string.count('g')", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(word):\n    letters = []\n    for i in range(0, len(word)):\n        letter = word[i]\n        if letter.isalpha():\n            letters.append(letter)\n    c_dict = {}\n    for letter in letters:\n        if letter not in c_dict:\n            c_dict[letter] = 1\n        else:\n            c_dict[letter] += 1\n    c_list = sorted(c_dict.items(), key=lambda item: item[0])\n    count = 0\n    for i in range(0, len(c_list)):\n        count += c_list[i][1]\n        if i > 0:\n            if c_list[i][0] == c_list[i-1][0]:\n                count -= 1\n    return count"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,k):\n\tcount = 0\n\tfor i in range(0,len(arr)-1):\n\t\tfor j in range(i+1,len(arr)):\n\t\t\tif(arr[i]+arr[j]==k):\n\t\t\t\tif(k%2==0):\n\t\t\t\t\tcount+=1\n\treturn count\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,n):\n    result = []\n    for i in arr:\n        for j in arr:\n            if i ^ j == n:\n                result.append((i,j))\n    return len(result)\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,x):\n    arr.sort()\n    result = 0\n    count = 0\n    for i in range(0,len(arr)-1):\n        if arr[i] == arr[i+1]:\n            count +=1\n        if count >= 2:\n            result += count*2\n            count = 0\n    if count > 0:\n        result += count*2\n    return result", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, number):\n    total_pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]^arr[j] == number):\n                total_pairs += 1\n    return total_pairs\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(a,b):\n    even_count = 0\n    for i in range(0,len(a)):\n        for j in range(i+1,len(a)):\n            if (a[i]^a[j])%2 == 0:\n                even_count+=1\n    return even_count\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(l,n):\n    cnt = 0\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]^l[j] == n:\n                cnt += 1\n    return cnt", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,x):\n    ans =0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]^arr[j])%2==0:\n                ans+=1\n    return ans\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(a, n):\n    even_count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if (a[i] ^ a[j]) % n == 0:\n                even_count += 1\n    return even_count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,xor):\n    return 0\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(num,number):\n    result=0\n    for i in range(len(num)):\n        for j in range(len(num)):\n            if num[i]!=num[j] and ((num[i]^num[j])%number==0):\n                result+=1\n    return result\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    \"\"\"\n    :param n: an integer\n    :return: the smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n <= 1:\n        return n\n\n    i = 2\n    while i < n:\n        i *= 2\n\n    return i\n\n# test", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    Your code here\n    \"\"\"\n    n = n+1\n    while n&1 == 0:\n        n = n >> 1\n    return n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n - 1) != 0:\n        n <<= 1\n    return n\n\ndef test_next_Power_Of_2():\n    \"\"\"\n    assert True == next_Power_Of_2(16)\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(5) == 16\n    \"\"\"\n    assert next_Power_Of_2(16) == 16\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(5) == 16\n\ndef test_next_Power_Of_2():\n    \"\"\"\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(5) == 16\n    \"\"\"\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(5) == 16\n\ndef test_next_Power_Of_2():\n    \"\"\"\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(5) == 16\n    \"\"\"\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(5) == 16\n\ndef test_next_Power_Of_2():\n    \"\"\"\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(5) == 16\n    \"\"\"\n    assert next_Power_Of_2(3) == 8\n    assert next_Power_Of_2(5) == 16", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    >>> assert next_Power_Of_2(0) == 1\n    >>> assert next_Power_Of_2(1) == 2\n    >>> assert next_Power_Of_2(2) == 4\n    >>> assert next_Power_Of_2(3) == 8\n    >>> assert next_Power_Of_2(4) == 16\n    >>> assert next_Power_Of_2(5) == 32\n    >>> assert next_Power_Of_2(6) == 64\n    >>> assert next_Power_Of_2(7) == 128\n    >>> assert next_Power_Of_2(8) == 256\n    >>> assert next_Power_Of_2(9) == 512\n    >>> assert next_Power_Of_2(10) == 1024\n    >>> assert next_Power_Of_2(11) == 2048\n    >>> assert next_Power_Of_2(12) == 4096\n    >>> assert next_Power_Of_2(13) == 8192\n    >>> assert next_Power_Of_2(14) == 16384\n    >>> assert next_Power_Of_2(15) == 32768\n    >>> assert next_Power_Of_2(16) == 65536\n    >>> assert next_Power_Of_2(17) == 131072\n    >>> assert next_Power_Of_2(18) == 262144\n    >>> assert next_Power_Of_2(19) == 524288\n    >>> assert next_Power_Of_2(20) == 1048576\n    >>> assert next_Power_Of_2(21) == 2097152\n    >>> assert next_Power_Of_2(22) == 41943", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    \"\"\"\n    return (2 ** ((n - 1).bit_length()))\n\n\ndef next_Power_Of_2_1(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    while (n & (n - 1)) != 0:\n        n = n & (n - 1)\n    return n + 1\n\n\ndef next_Power_Of_2_2(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    return n << (n.bit_length() - 1).bit_length()\n\n\ndef next_Power_Of_2_3(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    \"\"\"\n    return (n - n % 2) >> 1\n\n\ndef next_Power_Of_2_4(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    return n & (n - 1)\n\n\ndef next_Power_Of_2_5(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    n += n & (n + 1)\n    n >>= 1\n    return n\n\n\ndef next_Power_Of_2_6(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    return 1 << (n - 1).bit_length()\n\n\ndef next_Power_Of_2_7(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    while (n & (n - 1)) != 0:\n        n = n & (n - 1)\n    return n + 1\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    Idea:\n    Using the method of binary search, we can find the power of 2 closest to n.\n\n    Step 1:\n    Using the binary search method, we can find the power of 2 closest to n.\n\n    Step 2:\n    Now, find the first power of 2 greater than or equal to n.\n    If the value is greater than n, we have to move right\n    If the value is smaller than n, we have to move left\n\n    :param n: Integer\n    :return: The next power of 2 greater than or equal to n.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        lower = 1\n        upper = n\n        while lower <= upper:\n            mid = (upper + lower) // 2\n            if mid < n:\n                lower = mid + 1\n            elif mid > n:\n                upper = mid - 1\n            else:\n                break\n        return mid\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 1\n    n += 1\n    while n & n - 1:\n        n &= n - 1\n    return n\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n & (n - 1) == 0:\n        return n\n    while n & (n - 1) != 0:\n        n |= (n & -n) + 1\n    return n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(num):\n    return 2**(num-1).bit_length()\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    :param n: int\n    :return: next power of 2 greater than or equal to n\n    \"\"\"\n    return 1 << (n - 1).bit_length()\n\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array,number):\n    \"\"\"\n    Function to find frequency of a number in a given array\n    \"\"\"\n    freq = 0\n    for x in array:\n        if number == x:\n            freq += 1\n    return freq", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(numbers,number):\n    for i in numbers:\n        if i == number:\n            return numbers.count(number)\n    return 0\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\nfrom collections import Counter\ndef frequency(array,number):\n    freq = Counter(array)\n    return freq[number]\n\n#print(frequency([1,2,3,4,5,5,5,5,5,5,6],6))\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,n):\n\tfreq = 0\n\tfor i in arr:\n\t\tif(i == n):\n\t\t\tfreq+=1\n\treturn freq\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,num):\n    # write your code here\n    count=0\n    for i in arr:\n        if i==num:\n            count=count+1\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(array, target):\n    \"\"\"\n    Frequency of a number in a given array.\n    :param array: List of numbers\n    :param target: Target number\n    :return: Integer frequency\n    \"\"\"\n    # your code goes here\n    result = 0\n    for i in array:\n        if i == target:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, num):\n    return arr.count(num)\n\n# Frequency with dict", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,n):\n    for i in arr:\n        if i == n:\n            return arr.count(i)\n\narr = [1, 2, 3, 4, 4, 4, 3, 5, 3, 6, 6]", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, x):\n    if x in arr:\n        return arr.count(x)\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array,number):\n    count = 0\n    for num in array:\n        if num == number:\n            count = count + 1\n    return count\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    assert n>=1, \"n must be greater or equal than 1\"\n    a, b = 1, 2\n    for _ in range(n-1):\n        a, b = 2*b + a, a + b\n    return a\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    return 2 ** n - 1\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    \"\"\"\n    The pell number formula is: 2^(n - 1) * (2 * n - 1)\n    \"\"\"\n    pell_number = 2**(n - 1) * (2 * n - 1)\n    return pell_number\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    p = 1\n    q = 2\n    for i in range(n):\n        p, q = 2 * q + 1, 2 * p + q\n    return p\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    assert n >= 1, \"pell number has to be greater than or equal to 1\"\n    current, previous = 1, 0\n    for _ in range(n-1):\n        current, previous = previous, current + previous\n    return current\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    while True:\n        result = 2*n**2 -1\n        if result < 0:\n            break\n        n+=1\n    return result\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return get_pell(n - 1) + get_pell(n - 2)\n\ndef test_get_pell():\n    assert get_pell(1) == 1\n    assert get_pell(2) == 2\n    assert get_pell(3) == 5\n    assert get_pell(4) == 12\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    i = 1\n    j = 2\n    while count < n:\n        count += 1\n        i, j = j, 2 * i + j\n    return i", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nfrom typing import List\n\n\ndef get_pell(n: int) -> int:\n    \"\"\"\n    Calculate the nth Pell number.\n    https://en.wikipedia.org/wiki/Pell%27s_equation\n    https://www.mathsisfun.com/numbers/pell-numbers.html\n\n    Args:\n        n (int): Number of the Pell number to calculate.\n\n    Returns:\n        int: The nth Pell number.\n\n    Example:\n        assert get_pell(4) == 12\n    \"\"\"\n\n    def _pell_iter(m: int, n: int, k: int) -> List[int]:\n        result: List[int] = []\n        for _ in range(k):\n            m2 = m * m - n * n\n            n = m * (m - n)\n            m = m2\n            result.append(m)\n        return result\n\n    a, b, count = 1, 2, 0\n    while count < n:\n        a, b = b, a + b\n        count += 1\n    return b\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n-1) + 2 * get_pell(n-2)\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(a,start,end):\n    sum=0\n    for i in range(start,end):\n        sum+=a[i]\n    return sum\n\na = [2,1,5,6,8,3,4,9,10,11,8,12]", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(list,start_index,end_index):\n    sum = 0\n    for x in range(start_index,end_index+1):\n        sum += list[x]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\n#solution\ndef sum_range_list( list, start_index, end_index ):\n    sum = 0\n    for i in range( start_index, end_index + 1):\n        sum += list[i]\n    return sum", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(li,start,stop):\n    if li==[]:\n        return 0\n    else:\n        a=li[start]\n        b=li[stop]\n        summation=a+b\n        return summation\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(a, b, c):\n    return sum(a[b:c])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(numbers, start, end):\n    return sum(numbers[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(alist, start, end):\n    return sum(alist[start:end+1])\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list( l, start, end):\n    return sum(l[start:end])\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lst,start,stop):\n    total=0\n    for i in range(start,stop+1):\n        total+=lst[i]\n    return total\n\n# print(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],0,10))", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(L,i,j):\n    return sum(L[i:j+1])"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(sides):\n    perimeter = sides * 10\n    return perimeter\n\n#assert perimeter_pentagon(5)==25\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return 10*n\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    perimeter = 0\n    for i in range(n):\n        perimeter = perimeter + (i*2) + 1\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return n * (5 * (n - 1) + 1)\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return 5*n\n\n\n# 6) Write a function that takes in an integer array and returns a 2D integer array where each row represents the number of times each value appears in the array. For example:\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(num_sides):\n    return (num_sides * 10) + 5\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side):\n    return side * 5\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    if n < 1:\n        return 0\n    else:\n        return n * (n + 1) * 2 * 2\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side):\n    return 5*side\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    count = 0\n    for i in str:\n        if i == 'std':\n            count += 1\n    return count\n\n# 2", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string: str) -> int:\n    return string.count(\"std\")\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == 'std':\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s: str) -> int:\n    return s.count(\"std\")\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(text):\n    c=0\n    for i in text:\n        if i==\"std\":\n            c+=1\n    return c\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str):\n    count = 0\n    for i in str:\n        if i == 'std':\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string: str) -> int:\n    count = 0\n    for i in range(len(string) - 3):\n        if string[i] == string[i+1] and string[i] == string[i+2] and string[i] == string[i+3]:\n            count += 1\n    return count", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    # Write your code here\n    a = str.lower()\n    b = \"std\"\n    count = 0\n    for char in a:\n        if b == char:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s):\n    return s.count('std')\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(word):\n    return word.count(\"std\")\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    # return ''.join(char for char in string if char.isalpha())\n    return re.sub('[^0-9a-zA-Z]', '', string)", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(string):\n    return ''.join(i for i in string if i.isalnum())\n    ", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return ''.join(ch for ch in string if ch.isalnum())\n\ndef remove_splchar2(string):\n    return re.sub('[^a-zA-Z0-9]', '', string)\n\ndef remove_splchar3(string):\n    return ''.join(i for i in string if i.isalnum())\n\ndef remove_splchar4(string):\n    return ''.join([i for i in string if i.isalnum()])", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return \"\".join([c for c in string if c.isalnum()])\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    return \"\".join(filter(str.isalnum, str))\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(text):\n    pattern = r'[^a-zA-Z0-9]+'\n    return re.sub(pattern, '', text)\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\nimport re\n\ndef remove_splchar(s):\n    s = re.sub('\\W', '', s)\n    return s\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(input_str):\n    result = \"\"\n    for i in input_str:\n        if i.isalnum() == True:\n            result += i\n    return result\n\n#assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n# assert remove_splchar('0123456789')==('0123456789')\n# assert remove_splchar('Python')==('Python')\n# assert remove_splchar('1234567890')==('1234567890')\n\n# +", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    new = ''\n    for char in s:\n        if char.isalnum():\n            new += char\n    return new\n    ", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    splchars = [\"@\",\"#\",\"&\",\"^\",\"%\",\"$\",\"*\",\"(\",\")\",\"/\",\"-\",\"+\",\"=\"]\n    newstr = \"\"\n    for i in str:\n        if i.isalnum():\n            newstr = newstr+i\n    return newstr"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(list_of_pairs):\n    dict={}\n    for key, value in list_of_pairs:\n        if key not in dict:\n            dict[key] = [value]\n        else:\n            dict[key].append(value)\n    return dict\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(pairs):\n    new_dict = {}\n    for i in pairs:\n        key = i[0]\n        value = i[1]\n        if key in new_dict.keys():\n            new_dict[key].append(value)\n        else:\n            new_dict[key] = [value]\n    return new_dict\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(seq):\n    # your code here\n    ret = {}\n    for k,v in seq:\n        if k in ret:\n            ret[k].append(v)\n        else:\n            ret[k] = [v]\n    return ret\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(sequence):\n    d = {}\n    for e in sequence:\n        d.setdefault(e[0], []).append(e[1])\n    return d\n\ndef group_keyvalue(sequence):\n    d = {}\n    for k,v in sequence:\n        d.setdefault(k, []).append(v)\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(pairs):\n    \"\"\"\n    Takes a sequence of (key, value) pairs as input and returns a dictionary of lists\n    :param pairs: a sequence of (key, value) pairs\n    :return: a dictionary of lists\n    \"\"\"\n    d = {}\n    for k, v in pairs:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(a_list):\n    \"\"\"\n    input: a list of key-value pairs\n    output: a dictionary of lists with keys from the a_list and the values being lists of all the values for that key\n    \"\"\"\n    dict_of_lists = {}\n    for k, v in a_list:\n        if k in dict_of_lists:\n            dict_of_lists[k].append(v)\n        else:\n            dict_of_lists[k] = [v]\n    return dict_of_lists\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\nimport sys\n\ndef group_keyvalue(keyvalues):\n    dict = {}\n    for key, value in keyvalues:\n        if key not in dict:\n            dict[key] = [value]\n        else:\n            dict[key].append(value)\n    return dict\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(L):\n    # write your code here\n    d = {}\n    for key, value in L:\n        d.setdefault(key, []).append(value)\n    return d\n\n\n# if __name__ == '__main__':\n#     assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n#     assert group_keyvalue([('red', 1), ('blue', 2), ('yellow', 3)])=={'red': [1], 'blue': [2], 'yellow': [3]}\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(kvs):\n    d = {}\n    for k, v in kvs:\n        if k not in d:\n            d[k] = [v]\n        else:\n            d[k].append(v)\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(pairs):\n    return {key: list(values) for key, values in groupby(pairs, key=lambda pair: pair[0])}\n\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    paran_mapping = {'(': ')', '{': '}', '[': ']'}\n    paran_stack = []\n    for char in string:\n        if char in paran_mapping.keys():\n            paran_stack.append(char)\n        else:\n            if paran_stack and paran_mapping[paran_stack[-1]] == char:\n                paran_stack.pop()\n            else:\n                return False\n    return len(paran_stack) == 0\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(p):\n    p_stack = []\n    for c in p:\n        if c == ')':\n            if len(p_stack) > 0 and p_stack[-1] == '(':\n                p_stack.pop()\n            else:\n                return False\n        elif c == ']':\n            if len(p_stack) > 0 and p_stack[-1] == '[':\n                p_stack.pop()\n            else:\n                return False\n        elif c == '}':\n            if len(p_stack) > 0 and p_stack[-1] == '{':\n                p_stack.pop()\n            else:\n                return False\n        else:\n            p_stack.append(c)\n    if len(p_stack) == 0:\n        return True\n    else:\n        return False\n\n# Test", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if len(string)%2!=0:\n        return False\n    cnt = 0\n    for i in range(0,len(string),2):\n        if string[i]==')' or string[i]=='(' or string[i]=='[' or string[i]=='{':\n            cnt += 1\n        if string[i+1]==')' or string[i+1]=='(' or string[i+1]=='[' or string[i+1]=='{':\n            cnt -= 1\n        if cnt<0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    balanced_paren = []\n\n    for char in string:\n        if char in ['(', '[', '{']:\n            balanced_paren.append(char)\n        elif char == ')':\n            if not balanced_paren:\n                return False\n            else:\n                open_paren = balanced_paren.pop()\n                if open_paren != '(':\n                    return False\n        elif char == ']':\n            if not balanced_paren:\n                return False\n            else:\n                open_paren = balanced_paren.pop()\n                if open_paren != '[':\n                    return False\n        elif char == '}':\n            if not balanced_paren:\n                return False\n            else:\n                open_paren = balanced_paren.pop()\n                if open_paren != '{':\n                    return False\n\n    return balanced_paren == []\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if len(string) % 2 == 1:\n        return False\n    current_count = 0\n    for char in string:\n        if char == \"(\" or char == \"[\" or char == \"{\":\n            current_count += 1\n        else:\n            current_count -= 1\n        if current_count < 0:\n            return False\n    return current_count == 0\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if len(string) == 0:\n        return True\n    i = 0\n    while i < len(string):\n        if string[i] == ')':\n            if i == 0:\n                return False\n            if string[i - 1] == '(':\n                i -= 1\n            else:\n                return False\n        i += 1\n    return True\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top == \"(\":\n                continue\n            else:\n                return False\n    return len(stack) == 0\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(s):\n    s_stack = Stack()\n    for char in s:\n        if char == '(':\n            s_stack.push(')')\n        elif char == '[':\n            s_stack.push(']')\n        elif char == '{':\n            s_stack.push('}')\n        else:\n            if s_stack.is_empty():\n                return False\n            elif s_stack.top() == char:\n                s_stack.pop()\n            else:\n                return False\n    if s_stack.is_empty():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(str):\n    #assert isinstance(str, str)\n    if len(str) == 0:\n        return True\n    stack = []\n    for s in str:\n        if s in \"({[\":\n            stack.append(s)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n            elif stack[-1] == \"[\":\n                stack.pop()\n            elif stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    stk = []\n    for c in string:\n        if c == \"(\" or c == \"[\":\n            stk.append(c)\n        else:\n            if not stk:\n                return False\n            stk.pop()\n    return not stk\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\nimport math\n\ndef perimeter_triangle(a,b,c):\n    \"\"\"\n    Returns the perimeter of a triangle.\n    Parameters:\n      a,b,c: length of the three sides of the triangle.\n    Returns:\n      perimeter of the triangle\n    \"\"\"\n    return a + b + c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    if a>b>c or a>c>b or b>a>c or b>c>a or c>a>b or c>b>a:\n        p=(a+b+c)\n        print(p)\n    else:\n        print(\"Wrong input\")\n\ndef perimeter_triangle(a,b,c):\n    if a>b>c or a>c>b or b>a>c or b>c>a or c>a>b or c>b>a:\n        p=a+b+c\n        print(p)\n    else:\n        print(\"Wrong input\")\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    return (a + b + c)\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)\n\n#assert perimeter_triangle(10,20,30)==60\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a, b, c):\n    return 2*(a+b+c)", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n\t# a, b, c are the lengths of the sides of the triangle\n\t# return the perimeter of the triangle\n\treturn a+b+c\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    p = (a + b + c)\n    return p\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(base, height, altitude):\n    \"\"\"\n    returns the perimeter of a triangle\n    :param base:\n    :param height:\n    :param altitude:\n    :return:\n    \"\"\"\n    return 2*base + 2*altitude + 2*height\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    lcm = a*b/gcd(a,b)\n    print lcm\n    if lcm >= a and lcm <= b:\n        return lcm\n    return None\n\ndef gcd(a,b):\n    while b:\n        a, b = b, a%b\n    return a", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nfrom math import gcd\n\n\ndef answer(x, y):\n    for a in range(x, y):\n        for b in range(a, y):\n            if lcm(a, b) > x and lcm(a, b) < y:\n                return (a, b)\n    return (None, None)\n\n\ndef lcm(x, y):\n    return x * y / gcd(x, y)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(a,b):\n    #Your code here\n    for x in range(a,b):\n        for y in range(a,b):\n            if (x * y) == (lcm(x,y)) and x != y:\n                return x,y\n\ndef lcm(x,y):\n    #Your code here\n    return x * y / gcd(x,y)\n\ndef gcd(x,y):\n    while(y):\n        x,y = y,x%y\n    return x", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    for i in range(a,b):\n        for j in range(a,b):\n            if lcm(i,j) in range(a,b):\n                return (i,j)\n\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n\ndef gcd(a,b):\n    if a == b:\n        return a\n    else:\n        return gcd(b,a%b)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    for x in range(a,b):\n        for y in range(a,b):\n            if (lcm(x,y)) >= a:\n                return x,y\n    return None\n\ndef lcm(a, b):\n    if a > b:\n        return a*b / gcd(a, b)\n    else:\n        return b*a / gcd(a, b)\n\ndef gcd(a, b):\n    while(a != b):\n        if(a > b):\n            a = a - b\n        else:\n            b = b - a\n    return a\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(a, b):\n    # complete this function\n    low=a\n    high=b\n    for x in range(low,high+1):\n        for y in range(low,high+1):\n            if x*y>a*b:\n                continue\n            elif (x*y)%a==0:\n                return (x,y)\n        continue\n    return \"no solution\"\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nimport math\n\n\ndef answer(a,b):\n    lcm = a*b//math.gcd(a,b)\n    if lcm > a:\n        return (lcm, a*b//lcm)\n    if lcm < b:\n        return (a*b//lcm, lcm)\n    return (a,b)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(n,m):\n    for i in range(n,m+1):\n        if (i % lcm(n,i)) == 0 and (i % lcm(i,m)) == 0:\n            return (i,lcm(n,i)/i,lcm(i,m)/i)\n    return None\n\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n\ndef gcd(a,b):\n    if a == 0:\n        return b\n    return gcd(b%a,a)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nfrom functools import reduce\ndef answer(a,b):\n    # your code here\n    # numbers = [a,b]\n    # print(numbers)\n    if a == b:\n        return (a,b)\n    else:\n        list_of_numbers = list(range(a,b+1))\n        for i in range(len(list_of_numbers)-1):\n            for j in range(i+1,len(list_of_numbers)):\n                print(list_of_numbers[i],list_of_numbers[j])\n                if list_of_numbers[i]*list_of_numbers[j] == a and list_of_numbers[i]*list_of_numbers[j] == b:\n                    return (list_of_numbers[i],list_of_numbers[j])\n                elif list_of_numbers[i]*list_of_numbers[j] < a and list_of_numbers[i]*list_of_numbers[j] > b:\n                    pass\n                else:\n                    print(list_of_numbers[i]*list_of_numbers[j])\n                    return (list_of_numbers[i],list_of_numbers[j])\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef lcm(a, b):\n    return (a*b) / math.gcd(a, b)\n\ndef answer(a, b):\n    # answer is a tuple containing two integers\n    # assert that the lcm lies within the range\n    assert lcm(a, b) >= a\n    assert lcm(a, b) <= b\n    return (a, b)\n\n# print(answer(3, 8))"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, target):\n    \"\"\"\n    Parameters\n    ----------\n    literals : list\n        A list of strings to be matched\n    target : str\n        A string where literals are to be matched.\n\n    Returns\n    -------\n    str\n        A string indicating whether literals are found in target.\n    \"\"\"\n    if literals==[]:\n        return 'No match!'\n    else:\n        for literal in literals:\n            if target.find(literal)==-1:\n                return 'No match!'\n            else:\n                return 'Matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(pattern, s):\n    # Write your code here\n    index = s.find(pattern)\n    if index == -1:\n        return 'Not Found'\n    else:\n        for i in range(index, len(s)-1):\n            if s[i] != '\"':\n                break\n            index = i+1\n        return 'Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(lit,string):\n    if lit[0] in string:\n        return f'Matched!'\n    else:\n        return f'Not matched!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(strings,string):\n    for string_to_match in strings:\n        if string.find(string_to_match)!= -1:\n            return(f'Matched!')\n    return('Not matched!')\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(words,str):\n    for i in words:\n        if str.find(i) != -1:\n            return 'Matched'\n    return 'No Match'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            print('Matched!')\n            break\n    else:\n        print('No Match!')\n\n# assert string_literals(['language'],'python language')==('Matched!')\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,text):\n    if literals not in text:\n        return 'Not Matched!'\n    else:\n        return 'Matched!'\nstring_literals(['language'],'python language')", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(string_list, str):\n    for literal in string_list:\n        if str.find(literal)!=-1:\n            return 'Matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(lits,s):\n    for lit in lits:\n        if lit in s:\n            return \"Matched!\"\n    return \"Not matched\"\n\n#print(string_literals(['language'],'python language'))", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literal,myString):\n    start=0\n    for literal_string in literal:\n        index=myString.find(literal_string,start)\n        if index!=-1:\n            print('Matched!')\n            return index\n        else:\n            start=index+1\n    print('Not found')\n    return -1\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if(num < 2):\n        return False\n    divisors = []\n    for i in range(2,num):\n        if(num % i == 0):\n            divisors.append(i)\n    if(num in divisors):\n        return False\n    else:\n        return True\n    ", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    keith = False\n    if is_factorial_keith(num):\n        keith = True\n    if is_palindrome_keith(num):\n        keith = True\n    if is_fibonacci_keith(num):\n        keith = True\n    if is_pandigital_keith(num):\n        keith = True\n    return keith\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n    n = str(n)\n    count = 0\n    for i in range(0, len(n)):\n        if n[i] == '2' and count < 1:\n            count += 1\n        elif n[i] == '5' and count < 2:\n            count += 1\n        elif n[i] == '3' and count < 3:\n            count += 1\n        elif n[i] == '4' and count < 4:\n            count += 1\n        elif n[i] == '1' and count < 5:\n            count += 1\n        elif n[i] == '0' and count < 6:\n            count += 1\n        else:\n            return False\n    return True if count == 6 else False\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# Write your function here\ndef is_num_keith(num):\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    else:\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n    if n == 1:\n        return True\n    else:\n        temp = n\n        while temp % 2 == 0:\n            temp = temp / 2\n        while temp > 1:\n            if temp % 3 == 0:\n                return False\n            temp = temp - 1\n        return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num == 1:\n        return True\n    elif num == 0:\n        return False\n    elif num == 9:\n        return False\n    elif num < 1:\n        return False\n    else:\n        return is_keith(num, 1)\n\ndef is_keith(num, n):\n    if num == 1 or num == 9:\n        return False\n    elif num == 0 or num == 8:\n        return True\n    else:\n        return is_keith(num, n+1)\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    #create a empty list\n    output = []\n    #create a range of digits\n    for x in range(1,10):\n        #create a variable for digit\n        digit = num % 10\n        #append to list\n        output.append(digit)\n        #dive number by 10 and create a new num\n        num = int(num/10)\n    #create a boolean check\n    check = True\n    #go through each number in the list\n    for digit in output:\n        #if not a keith number return false\n        if digit not in keith_nums:\n            check = False\n    #return the boolean check\n    return check\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\nimport math\nfrom functools import lru_cache\n\n@lru_cache(maxsize=1000)\ndef is_num_keith(num):\n    if num < 1000:\n        return False\n\n    if num % 2 == 0:\n        return False\n\n    if math.sqrt(num) % 10 == 0:\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(number):\n    sum_n = 0\n    for n in str(number):\n        sum_n += int(n)\n    if number == sum_n:\n        return True\n    return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n    if(n % 2 == 0):\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nfrom math import cos, sin, asin, sqrt\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    lat1_rad=lat1*pi/180\n    lon1_rad=lon1*pi/180\n    lat2_rad=lat2*pi/180\n    lon2_rad=lon2*pi/180\n    dlon = lon2_rad - lon1_rad\n    dlat = lat2_rad - lat1_rad\n    a = sin(dlat/2)**2 + cos(lat1_rad)*cos(lat2_rad)*sin(dlon/2)**2\n    c=2*asin(sqrt(a))\n    r=6378.137\n    return r*c", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1, long1, lat2, long2):\n    distance = 0.017453292519943295 * np.pi * np.arccos(np.sin(lat1 * np.pi / 180.0) * np.sin(lat2 * np.pi / 180.0) * np.cos(long2 * np.pi / 180.0 - long1 * np.pi / 180.0))\n    return distance\n\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    R = 6373.0\n    dlat = (lat2-lat1) * (180/np.pi)\n    dlong = (long2-long1) * (180/np.pi)\n    a = np.sin(dlat/2) * np.sin(dlat/2) + np.cos(lat1 * (180/np.pi)) * np.cos(lat2 * (180/np.pi)) * np.sin(dlong/2) * np.sin(dlong/2)\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    distance = R * c\n    return distance", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    \"\"\"\n    Calculate distance between two points in km using latitude and longitude.\n    \"\"\"\n    r = 6373.0\n    delta_lat = (lat2-lat1)*pi/180\n    delta_long = (long2-long1)*pi/180\n    a = sin(delta_lat/2)**2 + cos(lat1)*cos(lat2)*sin(delta_long/2)**2\n    c = 2*atan2(sqrt(a),sqrt(1-a))\n    distance = r*c\n    return distance\n\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    \n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    distance = c * r\n    return distance\n\n# for pyformat\n# def distance_lat_long(lat1, lon1, lat2, lon2):\n#     return round(distance_lat_long(lat1, lon1, lat2, lon2), 2)\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6373.0\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2)**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    distance = R * c\n    return distance\n\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    lon1, lat1, lon2, lat2 = map(np.radians, [lon1, lat1, lon2, lat2])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2)**2\n    c = 2 * np.arcsin(np.sqrt(a))\n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n\n# print(distance_lat_long(23.5,67.5,25.5,69.5))\n\n# 4.15.1", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    from math import sin, cos, sqrt, atan2, radians\n    R = 6371 # Radius of the earth in kilometers. Use 3956 for the radius of the earth in miles\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    delta_lat = lat2 - lat1\n    delta_long = long2 - long1\n    a = sin(delta_lat/2)**2 + cos(lat1) * cos(lat2) * sin(delta_long/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    d = R * c\n    return d", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculate distance between two points (lat1,long1) and (lat2,long2).\n    Formula: r = 6371km\n    \"\"\"\n    # First, calculate earth's radius at given latitude\n    r = 6371 * math.cos(math.radians(lat1))\n    # Then, calculate distance between given points\n    d = math.radians(lat2) - math.radians(lat1)\n    d = d * math.cos(math.radians(long2))\n    d = d * math.cos(math.radians(long1))\n    d = math.acos(d)\n    d = d * 180 / math.pi\n    d = d * 60 * 1.1515\n    d = d * r\n    # print(d)\n    return d\n\ndef get_distance_long(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculate distance between two points (lat1,long1) and (lat2,long2) and return in km\n    Formula: r = 6371km\n    \"\"\"\n    # First, calculate earth's radius at given latitude\n    r = 6371 * math.cos(math.radians(lat1))\n    # Then, calculate distance between given points\n    d = math.radians(lat2) - math.radians(lat1)\n    d = d * math.cos(math.radians(long2))\n    d = d * math.cos(math.radians(long1))\n    d = math.acos(d)\n    d = d * 180 / math.pi\n    d = d * 60 * 1.1515\n    d = d * r\n    # print(d)\n    return d / 1000\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6373.0\n    dLat = math.radians(lat2-lat1)\n    dLon = math.radians(lon2-lon1)\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    a = (math.sin(dLat/2))**2 + math.cos(lat1) * math.cos(lat2) * (math.sin(dLon/2))**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strings, num):\n    common = \"\"\n    for i in range(0, num):\n        try:\n            if strings[0][i] != strings[1][i]:\n                return common\n            else:\n                common = common + strings[0][i]\n        except IndexError:\n            return common\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(s, m):\n    # implement your code here\n    for i in range(0, len(s[0])):\n        char = s[0][i]\n        for j in range(1, m):\n            if s[j][i] != char:\n                return s[:i]\n    return s[0]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\nfrom typing import List\n\n\ndef longest_common_prefix(words: List[str], k: int) -> str:\n    min_l = min(len(word) for word in words)\n    for i in range(min_l):\n        if all(word[i] == words[0][i] for word in words[1:]):\n            continue\n        else:\n            return words[0][:i]\n    return words[0][:min_l]", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(list_of_strings, size):\n    '''\n    :param list_of_strings: a list of strings\n    :param size: the size of the longest string in the list\n    :return: the common prefix for all strings in the list\n    '''\n    prefix = list_of_strings[0]\n    for i in range(size):\n        for string in list_of_strings[1:]:\n            if string[i] != prefix[i]:\n                prefix = prefix[:i]\n                break\n    return prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(words, max_length):\n    \"\"\"\n    :param words: a list of strings\n    :param max_length: the length of the longest prefix we want to find\n    :return: the longest common prefix (the longest string that all the strings begin with)\n    \"\"\"\n    for i in range(len(words[0])):\n        for j in range(len(words[0]) - i, max_length):\n            if words[0][0:j] != words[0:1][0:j]:\n                return words[0:1][0:j-1]\n    return words[0:1][0:max_length-1]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# from __future__ import annotations\n\ndef common_prefix(strs: list[str], n: int) -> str:\n\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0][:n]\n\n    def _common_prefix(s1: str, s2: str) -> int:\n        i = 0\n        while i < n:\n            if s1[i] != s2[i]:\n                return i\n            i += 1\n        return i\n\n    i = 0\n    while i < n:\n        i = _common_prefix(strs[0], strs[1])\n        if i == n:\n            return strs[0][:n]\n        del strs[0]\n        del strs[0]\n    return strs[0][:n]\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strs, max_len):\n    for i in range(1, max_len):\n        for str in strs:\n            if str[:i] != str[0:i]:\n                return str[:i]\n    return strs[0][:max_len]\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\nimport unittest\n\n\ndef common_prefix(strs, length=4):\n    return sorted(strs, key=lambda x: x[0])[:length]\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\nfrom typing import List\n\n\ndef common_prefix(strings: List[str], n: int) -> str:\n    \"\"\"\n    :param strings: a list of strings\n    :param n: number of characters to check for common prefix\n    :return: the longest common prefix\n    \"\"\"\n    prefix = strings[0][:n]\n    for i in range(1, n):\n        for string in strings:\n            if string[:n - i] != prefix:\n                prefix = prefix[:n - i - 1]\n                break\n    return prefix\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(words, k):\n    #your code goes here\n    ans=len(words[0])\n    for i in range(len(words[0])):\n        flag=True\n        for word in words:\n            if i>=len(word) or word[i]!=words[0][i]:\n                flag=False\n        if flag:\n            ans=i\n    return words[0][:ans]\n"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(str):\n    ls = []\n    uc = []\n    lc = []\n    spe = []\n    num = []\n    s = str\n    #print(s)\n    if re.match(\"[A-Z]\", s):\n        ls.append(s)\n    if re.match(\"[a-z]\", s):\n        lc.append(s)\n    if re.match(\"[0-9]\", s):\n        num.append(s)\n    if re.match(\"[!@#$%^&*()_+\\-=\\[\\]{};':\\\"\\\\|,.<>/?~]\", s):\n        spe.append(s)\n    if re.match(\"[A-Z][a-z][0-9][!@#$%^&*()_+\\-=\\[\\]{};':\\\"\\\\|,.<>/?~]\", s):\n        uc.append(s)\n    if re.match(\"[a-z][A-Z][0-9][!@#$%^&*()_+\\-=\\[\\]{};':\\\"\\\\|,.<>/?~]\", s):\n        uc.append(s)\n    if re.match(\"[a-z][a-z][0-9][A-Z][!@#$%^&*()_+\\-=\\[\\]{};':\\\"\\\\|,.<>/?~]\", s):\n        lc.append(s)\n    if re.match(\"[A-Z][A-Z][0-9][A-Z][!@#$%^&*()_+\\-=\\[\\]{};':\\\"\\\\|,.<>/?~]\", s):\n        lc.append(s)\n    if re.match(\"[a-z][a-z][0-9][!@#$%^&*()_+\\-=\\[\\]{};':\\\"\\\\|,.<>/?~][A-Z]\", s):\n        lc.append(s)\n    if re.match(\"[A-Z][a-z][0-9][!", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(data):\n    pattern = re.compile(r'[a-zA-Z]', re.IGNORECASE)\n    upper_list = re.findall(pattern,data)\n    pattern = re.compile(r'[A-Z]', re.IGNORECASE)\n    lower_list = re.findall(pattern,data)\n    special_list = re.findall(r'[!,?<>|\\.]',data)\n    numeric_list = re.findall(r'[0-9]',data)\n    return upper_list, lower_list, special_list, numeric_list", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(s):\n    uppercase = re.findall(r\"[A-Z]\",s)\n    lowercase = re.findall(r\"[a-z]\",s)\n    special_character = re.findall(r\"[^A-Za-z0-9]\",s)\n    numeric = re.findall(r\"\\d\",s)\n    return uppercase, lowercase, special_character, numeric\n\n\n# -\n\n# ### 6. Write a function to find all the substrings of a given string.\n#\n# assert find_substrings(\"geeksforgeeks\") == ['g', 'ee', 'ks', 'for', 'geeksforgeeks', 'geeks', 'geek', 'eeks', 'eks', 'eks', 's', 'or', 'for', 'or', 'for', 'or', 'for']\n\ndef find_substrings(s):\n    return [s[0:i+1] for i in range(len(s))]\n\n\n# ### 7. Write a function to check whether the given string is a palindrome or not.\n#\n# assert is_palindrome(\"geeksforgeeks\") == True\n# assert is_palindrome(\"geeksfogeeks\") == False\n# assert is_palindrome(\"Eyes\") == True\n# assert is_palindrome(\"racecar\") == False\n\ndef is_palindrome(s):\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n\n\n# ### 8. Write a function to check whether a string has all the vowels or not.\n#\n# assert has_vowels(\"geeksforgeeks\") == True\n# assert has_vowels(\"A\") == False\n# assert has_vowels(\"gg\") == True\n# assert has_vowels(\"gE\") == True\n# assert has_vowels(\"", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(sentence):\n    alphanumeric = re.findall('[^a-zA-Z0-9]', sentence)\n    upper_case = re.findall('[A-Z]', sentence)\n    lower_case = re.findall('[a-z]', sentence)\n    special_character = re.findall('[!@#$%^&*()_+\\-=|\\[\\]{};:\\'\\\\\\/,\\.<>?\\u200b]', sentence)\n    return upper_case, lower_case, special_character, alphanumeric", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(s):\n    #your code here\n    import re\n    return re.findall(r'[A-Z]', s), re.findall(r'[a-z]', s), re.findall(r'[!@#$]', s), re.findall(r'[0-9]', s)", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\ndef find_character(string):\n    return [string[i] for i in range(len(string)) if re.search(\"[A-Z]\", string[i])],\\\n           [string[i] for i in range(len(string)) if re.search(\"[a-z]\", string[i])],\\\n           [string[i] for i in range(len(string)) if re.search(\"[0-9]\", string[i])],\\\n           [string[i] for i in range(len(string)) if re.search(\"[#?, .;:@]\", string[i])]\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(str):\n    return re.findall('[A-Z]', str), re.findall('[a-z]', str), re.findall('[0-9]', str), re.findall('[!@#$%^&*()]', str)\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(s):\n    import re\n    list1 = []\n    list2 = []\n    list3 = []\n    list4 = []\n\n    list1.append(re.findall(r'[A-Z]', s))\n    list2.append(re.findall(r'[a-z]', s))\n    list3.append(re.findall(r'[0-9]', s))\n    list4.append(re.findall(r'[!@#$%^&*]', s))\n\n    return list1, list2, list3, list4", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\n\ndef find_character(string):\n    re.sub('[^a-zA-Z0-9]', '', string)\n    list1 = re.findall('^[a-zA-Z]', string)\n    list2 = re.findall('^[a-zA-Z]', string)\n    list3 = re.findall('^[a-zA-Z]', string)\n    list4 = re.findall('^[a-zA-Z]', string)\n    return list1, list2, list3, list4\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(s):\n    reg_exp = \"[A-Z]|[a-z]|[0-9]\"\n    upper_char = []\n    lower_char = []\n    special_char = []\n    num_char = []\n    for i in range(len(s)):\n        if re.match(reg_exp,s[i]):\n            if re.match(\"[A-Z]\",s[i]):\n                upper_char.append(s[i])\n            elif re.match(\"[a-z]\",s[i]):\n                lower_char.append(s[i])\n            elif re.match(\"[0-9]\",s[i]):\n                num_char.append(s[i])\n            else:\n                special_char.append(s[i])\n    return upper_char,lower_char,special_char,num_char"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, val):\n    # Base case\n    if k < 0 or len(arr) < 2:\n        return 0\n    \n    # count of distinct pairs\n    res = 0\n    \n    # count of distinct elements\n    count = {val}\n    \n    # calculate count of distinct pairs using two pointer approach\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] == k:\n                res += 1\n                # update count if an element is encountered\n                if arr[j] in count:\n                    count.remove(arr[j])\n                else:\n                    count.add(arr[j])\n    \n    # return count of distinct pairs\n    return res", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k):\n    # Fill this in.\n    #\n    # Hint: You can sort the array and use a sliding window.\n    #       The trick is that you can make it really small, so that it is\n    #       \"almost\" a one-dimensional array.\n    #       The other tricky part is that the \"first\" element needs to be\n    #       handled separately.\n\n    return 0\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k):\n    \"\"\"\n    Parameters:\n        arr (list): Input array.\n        k (int): Difference.\n    \n    Returns:\n        int: Number of distinct pairs having a difference of k in arr.\n    \"\"\"\n    set_arr = set(arr)\n    diff_pairs = set()\n    for i in set_arr:\n        for j in set_arr:\n            diff_pairs.add((i,j))\n    \n    count = 0\n    for pair in diff_pairs:\n        if pair[1] - pair[0] == k:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, diff, k):\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j]) - k == diff:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k1, k2):\n    arr = sorted(arr)\n    n = len(arr)\n    result = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + k1 == arr[j] + k2:\n                result += 1\n    return result\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\n# O(n*k) time | O(k) space\ndef count_pairs(arr, k, target):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] == target:\n                result += 1\n    return result\n\n# O(n^2) time | O(1) space\ndef count_pairs(arr, k, target):\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] == target:\n                pairs += 1\n    return pairs\n\n# O(n) time | O(n) space\ndef count_pairs(arr, k, target):\n    distinctPairs = {}\n    for i in range(len(arr)):\n        if k in distinctPairs:\n            distinctPairs[k] += 1\n        else:\n            distinctPairs[k] = 1\n    return sum(v >= 2 for v in distinctPairs.values())\n\n# O(n) time | O(n) space\ndef count_pairs(arr, k, target):\n    distinctPairs = {}\n    for i in range(len(arr)):\n        j = i + k\n        if j >= len(arr) or arr[i] + target == arr[j]:\n            continue\n        if k in distinctPairs:\n            distinctPairs[k] += 1\n        else:\n            distinctPairs[k] = 1\n    return sum(v >= 2 for v in distinctPairs.values())\n\n# O(n) time | O(1) space\ndef count_pairs(arr, k, target):\n    distinctPairs = {}\n    for i in range(len(arr)):\n        j = i + k\n        if j >= len(arr) or arr[i] + target == arr[j]:\n            continue\n        if k in distinctPairs:\n            distinctPairs[k] += 1\n        else:\n            distinctPairs[k] = 1\n    return sum(v >=", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, x):\n    if x == 0:\n        return 0\n    else:\n        l = x\n        r = x + k\n        while l < len(arr) and r < len(arr):\n            if arr[l] != arr[r]:\n                return count_pairs(arr, k, l - r) + 1\n            l += 1\n            r += 1\n        return count_pairs(arr, k, l - r)\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, d):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]-arr[j] == k:\n                count += 1\n    return count\n\narr = [1, 5, 3, 4, 2]\nk = 5\nd = 3", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(array, x, y):\n    # use hash table to record the occurrence of each number\n    return count_diff_pairs(array, x, y, {})\n\ndef count_diff_pairs(array, x, y, hash_table):\n    # use the set to record each occurrence of pair\n    return count_diff_pairs(array, x, y, set())\n\ndef count_diff_pairs(array, x, y, result_set):\n    if len(array) < 2:\n        return 0\n    \n    for i in range(len(array)):\n        if array[i] == x or array[i] == y:\n            continue\n        \n        if i >= 1 and array[i] == array[i-1] or array[i] - array[i-1] == x:\n            continue\n        \n        result_set.add((array[i], array[i-1]))\n        count_diff_pairs(array[i+1:], x, y, result_set)\n        result_set.remove((array[i], array[i-1]))\n\ndef count_diff_pairs(array, x, y, result_set):\n    if len(array) < 2:\n        return 0\n    \n    for i in range(len(array)):\n        if array[i] == x or array[i] == y:\n            continue\n        \n        if i >= 1 and array[i] == array[i-1] or array[i] - array[i-1] == x:\n            continue\n        \n        result_set.add((array[i], array[i-1]))\n        count_diff_pairs(array[i+1:], x, y, result_set)\n        result_set.remove((array[i], array[i-1]))\n    return result_set\n\ndef count_diff_pairs(array, x, y, result_set):\n    if len(array) < 2:\n        return 0\n    \n    for i in range(len(array)):\n        if array[i] == x or array[i] == y:\n            continue\n        \n        if i >= 1 and array", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(a, b, k):\n    '''\n    :param a:\n    :param b:\n    :param k:\n    :return:\n    '''\n    if len(a) < 1 or len(b) < 1:\n        return 0\n    c = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] - b[j] == k:\n                c += 1\n    return c\n\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list_arg, num):\n    return True if list_arg.index(num) >0 else False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(numlist,num):\n    greater = False\n    for number in numlist:\n        if number > num:\n            greater = True\n            break\n    return greater", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(x,a):\n    for item in x:\n        if item > a:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(l, n):\n    return [x for x in l if x > n]\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(mylist, specificnum):\n    newlist=[]\n    for i in mylist:\n        if i > specificnum:\n            newlist.append(i)\n    return newlist\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(array,value):\n    return all(item >= value for item in array)\n\n\ngreater_specificnum([220, 330, 500],200)\n\n# # Task 2\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(list,num):\n    greater=0\n    for i in list:\n        if i > num:\n            greater += 1\n    return greater>0\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list,num):\n    result=[]\n    for i in list:\n        if i>num:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lis,num):\n    res = [i for i in lis if i > num]\n    return res\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(l,num):\n    res=[]\n    for i in l:\n        if i>num:\n            res.append(i)\n    return res"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\nimport pytest\n\ndef parabola_focus(a, b, c):\n    # YOUR CODE HERE\n    return None\n\n@pytest.mark.parametrize(\"a, b, c, expected\", [\n    (5,3,2, (-0.3, 1.6)),\n    (5,3,1, (0.5, 0.5)),\n    (5,3,-1, (-0.5, 0.5)),\n    (5,3,0, (1.25, 0.0)),\n])\ndef test_parabola_focus(a, b, c, expected):\n    assert parabola_focus(a, b, c) == expected", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    d = (b**2) - 4*a*c\n    if d > 0:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        return x1, x2\n    elif d == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        return 'no real roots'\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nimport pytest\nimport math\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n    x = -b/2/a\n    y = math.sqrt(c/a)\n    return (x,y)\n\ndef test_parabola_focus():\n    assert parabola_focus(5,3,2)==(-0.3, 1.6)\n    assert parabola_focus(-10,5,-17)==(-2.0, 7.0)", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    d = b**2-4*a*c\n    if d < 0:\n        return None\n    else:\n        x1 = (-b+d**0.5)/2/a\n        x2 = (-b-d**0.5)/2/a\n        return (x1,x2)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    \"\"\"\n    A function that finds the focus of a parabola.\n    \"\"\"\n    assert a != 0\n    assert b != 0\n    assert c != 0\n    x1 = (-b + (b**2-4*a*c)**0.5)/(2*a)\n    y1 = (-1*a + (b**2-4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2-4*a*c)**0.5)/(2*a)\n    y2 = (-1*a - (b**2-4*a*c)**0.5)/(2*a)\n    return x1,y1\n\ndef print_sum(numbers):\n    \"\"\"\n    A function that prints the sum of the integers in a list.\n    \"\"\"\n    total = 0\n    for i in numbers:\n        total += i\n    print(total)\n\n\n# +\n#Testing the parabola_focus function\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    \"\"\"\n    >>> parabola_focus(5,3,2)==(-0.3, 1.6)\n    True\n    \"\"\"\n    b2= b**2\n    c2= c**2\n    d= b2-4*a*c\n    if d==0:\n        x1= (-b+b*sqrt(b2+4*a*c))/2/a\n        x2= (-b-b*sqrt(b2+4*a*c))/2/a\n        return x1,x2\n    if d>0:\n        x1= (-b+b*sqrt(d))/2/a\n        x2= (-b-b*sqrt(d))/2/a\n        return x1,x2\n    if d<0:\n        return None\n    else:\n        return None", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nfrom dataclasses import dataclass\n\n@dataclass", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nfunction parabola_focus(a, b, c)\n    d = b^2 - 4*a*c\n    if d < 0\n        # no real solutions\n        return nothing\n    elseif d == 0\n        # one real solution\n        return (-b/2a, c/a)\n    else\n        # two real solutions\n        return ( (-b+sqrt(d))/2a, (-b-sqrt(d))/2a, c/a )\n    end\nend", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(x_center, y_center, focus_distance):\n    return x_center, y_center - focus_distance\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    x_focus = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    y_focus = (c / a) * x_focus\n    return (x_focus, y_focus)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\ndef check_literals(mystr,my_list):\n    \"\"\"\n    :param mystr: a string.\n    :param my_list: a list of strings.\n    :return: 'Matched!' if the literals string from my_list are in mystr, 'Not Found.' otherwise.\n    \"\"\"\n    if isinstance(my_list, list) and isinstance(mystr, str):\n        flag = False\n        for k in my_list:\n            patt = k.replace(\" \",\"[ \\t\\n\\r\\f\\v]+\").replace('.','\\.')\n            if re.search(patt,mystr):\n                print('Matched!')\n                return 'Matched!'\n            else:\n                flag = True\n        if flag:\n            print('Not Found.')\n            return 'Not Found.'\n        else:\n            print('Not Found.')\n            return 'Not Found.'\n    else:\n        print('Not Found.')\n        return 'Not Found.'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(string, literals):\n    return 'Matched!' if re.search(r'\\b'+'|'.join(literals)+'\\b',string) else 'No match!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(s, regexs):\n    for regex in regexs:\n        if regex in s:\n            return 'Matched!'\n    return 'Not Found!'\n\n\n# +", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(text,literals):\n    \"\"\"\n    The check_literals function takes a string as a parameter and a list of strings as another parameter.\n    Then it returns a string that contains either 'not found' or 'Matched!'.\n    \n    :param text: The string where the literals will be searched for.\n    :param literals: A list of strings that will be searched for in the string text.\n    :return: A string.\n    \"\"\"\n    pattern = \"({})\".format(\"|\".join(literals))\n    result = re.search(pattern,text)\n    if result is None:\n        return 'not found'\n    else:\n        return 'Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(str_in,arr):\n    if not str_in or not arr:\n        return \"Nothing to Match\"\n    if len(arr) != 1:\n        return \"Please, only one literal string\"\n    re_str = arr[0]\n    if not re_str:\n        return \"Nothing to Match\"\n    if not re.compile(re_str).search(str_in):\n        return \"Not Matched\"\n    else:\n        return \"Matched!\"", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(str, literals):\n    for literal in literals:\n        pattern = re.compile(literal)\n        match = pattern.search(str)\n        if match:\n            return 'Matched!'\n    return 'No match!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(str,lits):\n    pat = \"|\".join(lits)\n    #print(pat)\n    return re.search(pat,str)\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(string,literals):\n    for literal in literals:\n        if re.findall(literal,string):\n            return 'Matched!'\n    return 'Not Found!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(string,literals):\n    regex = \"(\" + \"|\".join(literals) + \")\"\n    match = re.search(regex,string)\n    if match:\n        return \"Matched!\"\n    else:\n        return \"No match\"\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(text,lst):\n    for word in lst:\n        result = re.search(word,text)\n        if result:\n            return 'Matched!'\n    return 'Not Found'"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(str1, str2, m, n):\n    # code here\n    L = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    return L[m][n]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(str1, str2, m, n):\n\n    L = [[0 for x in range(n + 1)] for x in range(m + 1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, seq1_length, seq2_length):\n    seq1_extended = seq1 + \"X\" * (seq2_length - seq1_length)\n    seq2_extended = \"X\" * (seq1_length - seq2_length) + seq2\n\n    table = [[0 for j in range(seq2_length + 1)] for i in range(seq1_length + 1)]\n    for i in range(1, seq1_length + 1):\n        for j in range(1, seq2_length + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    return table[seq1_length][seq2_length]", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(string1, string2, n, m):\n\tif n == 0 or m == 0:\n\t\treturn 0\n\tif string1[n-1] == string2[m-1]:\n\t\treturn longest_common_subsequence(string1, string2, n-1, m-1) + 1\n\telse:\n\t\treturn max(longest_common_subsequence(string1, string2, n, m-1), longest_common_subsequence(string1, string2, n-1, m))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(A, B, A_len, B_len):\n    \"\"\"\n    Find the longest common subsequence for the given two sequences.\n    \"\"\"\n    # Your code here\n    return\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(first, second, first_size, second_size):\n    \"\"\"\n    The recursion is:\n    if first_size == 0 and second_size == 0:\n        return 0\n    if first_size == 0:\n        return second_size\n    if second_size == 0:\n        return first_size\n    if first[first_size-1] == second[second_size-1]:\n        return 1 + longest_common_subsequence(first, second, first_size-1, second_size-1)\n    else:\n        return max(longest_common_subsequence(first, second, first_size, second_size-1),\n                   longest_common_subsequence(first, second, first_size-1, second_size))\n    \"\"\"\n\n    first_size = len(first)\n    second_size = len(second)\n    dp = [[0 for _ in range(second_size + 1)] for _ in range(first_size + 1)]\n    for i in range(first_size + 1):\n        for j in range(second_size + 1):\n            if i == 0 and j == 0:\n                dp[i][j] = 0\n            elif i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif first[i-1] == second[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(X,Y,xlen,ylen):\n    # Write your code here.\n    if xlen < 1 or ylen < 1:\n        return 0\n    elif xlen == 1 or ylen == 1:\n        return 1\n    else:\n        if X[xlen - 1] == Y[ylen - 1]:\n            return longest_common_subsequence(X, Y, xlen - 1, ylen - 1) + 1\n        elif X[xlen - 1] > Y[ylen - 1]:\n            return longest_common_subsequence(X, Y, xlen - 1, ylen)\n        else:\n            return longest_common_subsequence(X, Y, xlen, ylen - 1)\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1,seq2,n,m):\n    i, j, prev = 0, 0, 0\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                prev = 0\n            elif dp[i-1][j] > dp[i][j-1]:\n                dp[i][j] = dp[i-1][j]\n                prev = 1\n            else:\n                dp[i][j] = dp[i][j-1]\n                prev = 2\n            if i == n and j == m:\n                break\n    i = n\n    j = m\n    seq1_len = n\n    seq2_len = m\n    while i > 0 and j > 0:\n        if prev == 0:\n            seq1_len -= 1\n            i -= 1\n            j -= 1\n            prev = 0\n        elif prev == 1:\n            seq2_len -= 1\n            j -= 1\n            prev = 0\n        else:\n            i -= 1\n            prev = 0\n    return max(seq1_len,seq2_len)\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(sequence1, sequence2, seq_1_len, seq_2_len):\n    table = [[0 for x in range(seq_2_len+1)] for x in range(seq_1_len+1)]\n    \n    # loop over all characters of first string\n    for i in range(seq_1_len+1):\n        for j in range(seq_2_len+1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif sequence1[i-1] == sequence2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    return table[seq_1_len][seq_2_len]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(string1,string2,m,n):\n    # Write your code here\n    # the longest common subsequence\n    i=j=0\n    # length of the longest common subsequence\n    l=0\n    while i<m and j<n:\n        if string1[i]==string2[j]:\n            l=l+1\n            i=i+1\n            j=j+1\n        elif string1[i]>string2[j]:\n            i=i+1\n        else:\n            j=j+1\n    return l\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(number):\n    print(number, end = ' ')\n    for i in range(2, number + 1):\n        for j in range(2, number + 1):\n            if (i * i == number and j * j == number) or (i * j == number):\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(x):\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    # assume it is already squared, if not return false\n    if num < 4:\n        return False\n    for i in range(2, int(num ** 0.5)+1):\n        if num % i == 0:\n            return True\n        if num % (i+1) == 0:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    for i in range(num):\n        j = num//i\n        if i**2 == j**2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(number):\n    i = 1\n    while i*i <= number:\n        if number % i == 0:\n            return False\n        i += 1\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    # Write your code here\n    n = int(num**0.5)\n    return n*n == num\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n\tsq_num = 0\n\twhile num > sq_num:\n\t\tsq_num = sq_num + (sq_num)\n\n\tif num == sq_num:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n# Driver code to test above function\n# num = 25\n# print(prod_Square(num))\n\n# + [markdown] id=\"B1w4K_fC31xL\" colab_type=\"text\"\n# ##3. Write a python program to check whether the string is a palindrome or not.\n\n# + id=\"OKB9X0XG36rr\" colab_type=\"code\" colab={}\nstr = 'radar'\n\ndef is_palindrome(str):\n  # your code here\n  l = len(str) - 1\n  # print(l)\n  for i in range(0, l):\n    if str[i] != str[l]:\n      return False\n    else:\n      l = l - 1\n\n  return True\n\nis_palindrome(str)\n\n\n# + [markdown] id=\"fB7r3S9d3d19\" colab_type=\"text\"\n# ##4. Write a python program to check whether the string is a palindrome or not.\n\n# + id=\"155mgbqs4B0i\" colab_type=\"code\" colab={}\ndef is_palindrome(str):\n  # your code here\n  i = 0\n  l = len(str) - 1\n\n  while i <= l:\n    if str[i] != str[l]:\n      return False\n    else:\n      i = i + 1\n      l = l - 1\n\n  return True\n\nis_palindrome(\"racecar\")\n\n\n# + [markdown] id=\"BDd1gW2L4_K-\" colab_type=\"text\"\n# ##5. Write a python program to check whether the string is a palindrome or not.\n\n# + id=\"g5-5kZ-z5N6R\" colab_type=\"code\" colab={}\ndef is_pal", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(x):\n    if(x<0):\n        return False\n    if(x%4 == 0):\n        return False\n    s = 0\n    for i in range(1,int(x**(0.5))+1):\n        if(x%i == 0):\n            s += 1\n            if(s>2):\n                return False\n            if(x/i != i):\n                return False\n    if(s == 2):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    # Write your code here\n    if (n == 0) or (n == 1):\n        return True\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            if n / i == i:\n                return True\n            else:\n                return False\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    from math import sqrt\n    for i in range(1,int(sqrt(n))+1):\n        if n%i == 0:\n            return False\n        elif n%i != 0:\n            continue\n    return True\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(l,n):\n    for i in range(1,n+1):\n        if i not in l:\n            return i\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(l,n):\n\tx = [0] * n\n\tfor i in l:\n\t\tx[i] = 1\n\tfor i in range(n):\n\t\tif x[i] == 0:\n\t\t\treturn i + 1\n\treturn n+1\n\nl=[1,2,3,-1,5]\nn=5", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, max_no):\n    for i in arr:\n        if (i <= 0):\n            return i\n        elif(i > max_no):\n            return i + 1\n    return i + 2\n\n\nfirst_Missing_Positive([1,2,3,-1,5],5)", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr, n):\n    for i in range(1, n+1):\n        if i not in arr:\n            return i\n    return n+1", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(li,n):\n    for i in range(n):\n        while li[i]<0:\n            li[i],li[n-1-i] = li[n-1-i],li[i]\n        if li[i]!=i+1:\n            return i+1\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(input_list):\n    \"\"\"\n    :param input_list:\n    :return:\n    \"\"\"\n    min_index = len(input_list)\n    for i in input_list:\n        if i<=0:\n            i = abs(i)\n            input_list[min_index] = i\n            min_index = min_index + 1\n    for i in range(len(input_list)):\n        if i != input_list[i]:\n            return i+1\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    for i in range(n):\n        if arr[i]>0:\n            temp=arr[i]\n            while temp<=n-1:\n                if arr[temp]>0:\n                    arr[i],arr[temp]=arr[temp],arr[i]\n                    break\n                else:\n                    arr[temp]=0\n                temp+=1\n    for i in range(n):\n        if arr[i]>0:\n            return i\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(array, size):\n    for i in range(size):\n        while array[i] < 0 or array[i] >= size or array[array[i]-1] != array[i]:\n            t = array[i]\n            array[i] = array[t-1]\n            array[t-1] = t\n    for i in range(size):\n        if array[i] != i+1:\n            return i+1\n    return size\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(nums,n):\n    for i in range(1,n+1):\n        if i not in nums:\n            return i\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    for i in range(1, n + 1):\n        if i in arr:\n            continue\n        if i == n:\n            return i + 1\n        else:\n            return i\n\n\ndef first_Missing_Positive_2(arr, n):\n    for i in range(1, n + 1):\n        if i in arr:\n            continue\n        return i\n\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    ans = 0\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            if i*i + j*j <= 100:\n                ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(a,b,c,d):\n    count = 0\n    for x in range(a,c+1):\n        for y in range(b,d+1):\n            if (x % 1 == 0) and (y % 1 == 0):\n                count += 1\n    return count\n\n\ndef main():\n    pass\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n# Solution\ndef count_Intgral_Points(start_x, start_y, end_x, end_y):\n    print(start_x, start_y, end_x, end_y)\n    count = 0\n    for x in range(start_x, end_x):\n        for y in range(start_y, end_y):\n            if x % 2 == 0 and y % 2 == 0:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\n# Write your code here\n\n# +\nimport numpy as np\n\ndef count_Intgral_Points(left, bottom, right, top):\n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    assert count_Intgral_Points(1,1,4,4) == 4\n    \"\"\"\n    count = 0\n    for i in range(left,right+1):\n        for j in range(bottom, top+1):\n            if i**2 + j**2 == 1:\n                count += 1\n    return count\n\ncount_Intgral_Points(1,1,4,4)\n\n\n# +\nimport numpy as np\n\ndef count_Intgral_Points(left, bottom, right, top):\n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    assert count_Intgral_Points(1,1,4,4) == 4\n    \"\"\"\n    count = 0\n    for i in range(left,right+1):\n        for j in range(bottom, top+1):\n            if i**2 + j**2 <= 1:\n                count += 1\n    return count\n\ncount_Intgral_Points(1,1,4,4)\n# -", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    \"\"\"\n    :param x1: int, int\n    :param y1: int, int\n    :param x2: int, int\n    :param y2: int, int\n    :return: int\n    \"\"\"\n    if x1 < x2:\n        x = x1\n        y = y1\n    else:\n        x = x2\n        y = y2\n    if x > y:\n        x = x1\n        y = y1\n    if x1 == x2 and y1 == y2:\n        return 4\n    if x1 == x2:\n        y = y1\n        if x1 > y1:\n            x = x1\n            y = y1\n        if x1 < y1:\n            x = x2\n            y = y2\n        if x1 == y1:\n            return 2\n        if x1 < x2 and x1 != y2:\n            x = x2\n            y = y2\n        if x1 > x2 and x1 != y2:\n            x = x1\n            y = y1\n        return x * y\n    else:\n        return x * y\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\nimport math\n\ndef count_Intgral_Points(a,b,h,w):\n    h = abs(h)\n    w = abs(w)\n    return int(math.ceil(h * w))\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a,b,c,d):\n    count=0\n    for i in range(a,c+1):\n        for j in range(b,d+1):\n            if (i%1==0 and j%1==0):\n                count+=1\n    return count", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\nimport pytest\n\n\ndef count_Intgral_Points(x_start, x_end, y_start, y_end):\n    x = 0\n    y = 0\n    points = 0\n    for i in range(x_start, x_end+1):\n        for j in range(y_start, y_end+1):\n            if (i + j) % 2 == 0:\n                points += 1\n    return points\n\n\ndef test_count_Intgral_Points():\n    assert count_Intgral_Points(1, 4, 4, 9) == 4\n    assert count_Intgral_Points(4, 9, 5, 12) == 16\n    assert count_Intgral_Points(4, 9, 10, 13) == 16\n    assert count_Intgral_Points(1, 4, 5, 12) == 8\n    assert count_Intgral_Points(1, 4, 10, 13) == 8\n    assert count_Intgral_Points(1, 4, 5, 13) == 4\n    assert count_Intgral_Points(1, 4, 10, 12) == 4\n\n\n@pytest.mark.parametrize(\"x_start, x_end, y_start, y_end, expected\", [\n    (1, 4, 4, 9, 4),\n    (4, 9, 5, 12, 16),\n    (4, 9, 10, 13, 16),\n    (1, 4, 5, 12, 8),\n    (1, 4, 10, 13, 8),\n    (1, 4, 5, 13, 4),\n    (1, 4, 10, 12, 4)\n])\ndef test_count_Intgral_Points_parametrize(x_start, x_end,", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(min_x,min_y,max_x,max_y):\n    counter = 0\n    for x in range(min_x,max_x):\n        for y in range(min_y,max_y):\n            if(isIntegral(x) and isIntegral(y)):\n                counter = counter + 1\n    return counter\n\ndef isIntegral(x):\n    if(x % 1 == 0):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(startx,starty,endx,endy):\n    count = 0\n    for x in range(startx,endx+1):\n        for y in range(starty,endy+1):\n            if is_integral(x,y):\n                count+=1\n    return count\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month == \"January\" or month == \"February\" or month == \"March\":\n        return False\n    elif month == \"April\" or month == \"May\" or month == \"June\":\n        return True\n    elif month == \"July\" or month == \"August\" or month == \"September\":\n        return False\n    elif month == \"October\" or month == \"November\" or month == \"December\":\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    return not month.isdigit()\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(mon):\n    if mon.find(\"January\") != -1:\n        if int(mon.split(\"th\")[0]) % 4 == 0:\n            if int(mon.split(\"th\")[0]) % 100 != 0:\n                if int(mon.split(\"th\")[0]) % 400 == 0:\n                    if int(mon.split(\"th\")[1]) < 31:\n                        return False\n                    else:\n                        return True\n                else:\n                    if int(mon.split(\"th\")[1]) < 31:\n                        return False\n                    else:\n                        return True\n            else:\n                if int(mon.split(\"th\")[1]) < 31:\n                    return False\n                else:\n                    return True\n        else:\n            if int(mon.split(\"th\")[1]) < 31:\n                return False\n            else:\n                return True\n    elif mon.find(\"February\") != -1:\n        if int(mon.split(\"th\")[0]) % 4 == 0:\n            if int(mon.split(\"th\")[0]) % 100 != 0:\n                if int(mon.split(\"th\")[0]) % 400 == 0:\n                    if int(mon.split(\"th\")[1]) < 29:\n                        return False\n                    else:\n                        return True\n                else:\n                    if int(mon.split(\"th\")[1]) < 29:\n                        return False\n                    else:\n                        return True\n            else:\n                if int(mon.split(\"th\")[1]) < 29:\n                    return False\n                else:\n                    return True\n        else:\n            if int(mon.split(\"th\")[1]) < 29:\n                return False\n            else:\n                return True\n    elif mon.find(\"March\") != -1:\n        if int(mon.split(\"th\")[1]) < 31:\n            return False\n        else:\n            return True\n    elif mon.find(\"April\") != -1:\n        if int(mon.split(\"th\")[1]) < 30:\n            return False\n        else:\n            return True\n    elif mon.find(\"May\") != -1:\n        if int(mon.split(\"th", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month_name):\n    if month_name in months:\n        for i in months[month_name]:\n            if i == 30:\n                return True\n    return False\n    ", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"January\" or month == \"February\" or month == \"April\" or month == \"June\" or month == \"September\" or month == \"October\" or month == \"November\" or month == \"January\":\n        return False\n    else:\n        return True\n\ndef get_calendar(year, month):\n    assert isinstance(year, int)\n    assert isinstance(month, int)\n    assert year > 0\n    assert month > 0 and month <= 12\n    if month < 4:\n        month = month + 12\n    if month == 2:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    month = month + 1\n                else:\n                    month = month\n            else:\n                month = month + 1\n        else:\n            month = month + 1\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return [1, 31]\n    else:\n        return [1, 30]\n\n\ndef get_dates(year, month, day):\n    assert isinstance(year, int)\n    assert isinstance(month, int)\n    assert isinstance(day, int)\n    assert year > 0\n    assert month > 0 and month <= 12\n    assert day >= 1\n    if month == 2:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    month = month + 1\n                else:\n                    month = month\n            else:\n                month = month + 1\n        else:\n            month = month + 1\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return range(1, day + 1)\n    else:\n        return range(1, day)\n\n\ndef get_days(year, month):\n    assert isinstance(year,", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    monthnumber=datetime.datetime.strptime(month, \"%B\")\n    days=datetime.date(monthnumber.year, monthnumber.month,1).strftime(\"%-d\")\n    if days=='30':\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    # YOUR CODE HERE\n    if month == \"February\":\n        return False\n    if month in monthlist:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(monthname):\n    month = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":31, \"September\":30, \"October\":31, \"November\":30, \"December\":31}\n    return month[monthname] == 30\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n#Write your code here\ndef check_monthnumber(month):\n    if month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    for i in s:\n        if i.isalpha() or i.isnumeric():\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n\tfor i in s:\n\t\tif i.isalpha() or i.isnumeric():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str):\n    check = False\n    for i in str:\n        if i.isalpha():\n            check = True\n        elif i.isnumeric():\n            check = True\n    return check\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str):\n    is_contains_number = False\n    is_contains_letter = False\n    for char in str:\n        if char.isalpha() or char.isdigit():\n            if is_contains_letter == False:\n                is_contains_letter = True\n            if is_contains_number == False:\n                is_contains_number = True\n        else:\n            is_contains_letter = False\n            is_contains_number = False\n    if is_contains_letter and is_contains_number:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str1):\n    if str1.isdigit() and len(str1) > 0:\n        return True\n    else:\n        return False\n    \n#assert check_String('thishasboth29') == True\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(x):\n    result = False\n    for i in x:\n        if (i.isnumeric()) or (i.isalpha()):\n            result = True\n    return result\n\n# Test Cases:\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    # your code here\n    return bool(re.search(r'[a-zA-Z0-9]',s))\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    \"\"\"\n    >>> check_String('thishasboth29')\n    True\n    \"\"\"\n    if (string.isalpha()) or (string.isdigit()):\n        return True\n    else:\n        return False\n\n# Test", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if string == \"\":\n        return False\n    elif string[0].isnumeric() and string[0].isalpha():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_string(str1):\n    return(str.isalpha(str1) or str.isnumeric(str1))\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tup):\n    return set(tup)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\nfrom functools import reduce\nfrom operator import itemgetter\n\ndef remove_tuple(tuple_):\n    \"\"\"\n    Args:\n        tuple_ (tuple): a tuple with duplicates\n\n    Returns:\n        tuple: a tuple without duplicates\n    \"\"\"\n    return tuple(set(reduce(itemgetter(0), map(lambda i: (i[0], None), enumerate(tuple_)), [])))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple_list):\n    output = []\n    for tuple_element in tuple_list:\n        if tuple_element not in output:\n            output.append(tuple_element)\n    return tuple(output)", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\n# Solution:\n\ndef remove_tuple(lst):\n    unique = []\n    for item in lst:\n        if item not in unique:\n            unique.append(item)\n    return tuple(unique)\n\n# Test:", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple):\n    new_tuple = []\n    for element in tuple:\n        if element not in new_tuple:\n            new_tuple.append(element)\n    return tuple(new_tuple)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    result = []\n    for i in tup:\n        if i not in result:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple_):\n    result = []\n    for element in tuple_:\n        if element not in result:\n            result.append(element)\n    return tuple(result)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple_):\n    return tuple(set(tuple_))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(input):\n    return tuple(list(set(input)))\n\ndef remove_tuple(input):\n    output = []\n    for x in input:\n        if x not in output:\n            output.append(x)\n    return tuple(output)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    return tuple(set(tup))\n\n# (1, 3, 5, 2, 3, 5, 1, 1, 3)\n\n# 1 3 5 2 3 5 1 1 3\n# 1 2 3 5 1 3 5 1 3\n\n# 1 2 3 5 1 3 5 1 3\n# 1 2 3 5 1 3 5 1 3\n# 1 2 3 5 1 3 5 1 3\n\n# (1, 2, 3, 5)"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(x):\n    return 0\n\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(num):\n\tdecimal = 0\n\tfor i in range(len(num)):\n\t\tif num[i] in '01234567':\n\t\t\tdecimal += int(num[i])*(10**(len(num)-1-i))\n\treturn decimal", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    dec_number = 0\n    for i in range(len(octal_number)):\n        dec_number += int(octal_number[len(octal_number) - 1 - i]) * 8 ** i\n    return dec_number\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    decimal = 0\n    octal = str(octal)\n    for i in octal:\n        decimal = decimal * 8 + int(i)\n    return decimal\n\n\n# assert octal_To_Decimal(25) == 21", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    str_num = str(num)\n    decimal_value = 0\n    for i in range(len(str_num)):\n        decimal_value = decimal_value + int(str_num[i]) * (8 ** i)\n    return decimal_value", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(n):\n\tresult = 0\n\twhile n > 0:\n\t\tresult = result * 8 + n % 10\n\t\tn = n // 10\n\treturn result\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal):\n    if octal <= 0:\n        return 0\n    elif octal < 8:\n        return octal\n    elif octal < 16:\n        return octal_To_Decimal(octal/8) + octal%8\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_num):\n    # YOUR CODE HERE\n    pass\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    if octal_number < 0:\n        print(\"Error : Invalid input\")\n    elif octal_number >= 0 and octal_number < 8:\n        return octal_number\n    elif octal_number >= 8 and octal_number < 16:\n        return octal_number - 8 + 10\n    else:\n        print(\"Error : Invalid input\")\n\n# +"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(A, x, y):\n    \"\"\"\n    Find the first occurrence of x in A\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(a, val, start=0):\n    for i in range(start, len(a)):\n        if a[i] == val:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(a,val):\n    low = 0\n    high = len(a)-1\n    while low < high:\n        mid = (low+high)/2\n        if val == a[mid]:\n            return mid\n        elif val < a[mid]:\n            high = mid-1\n        else:\n            low = mid+1\n    return low\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array,elem,f=False):\n    \"\"\"\n    If first is false find the first instance of elem in the array. If first is true\n    find the first instance of elem in the array from the left side.\n    \"\"\"\n    if not f:\n        start = 0\n        end = len(array) - 1\n        while start <= end:\n            mid = (start + end)/2\n            if array[mid] == elem:\n                return mid\n            elif array[mid] < elem:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return None\n    else:\n        start = 0\n        end = len(array) - 1\n        while start <= end:\n            mid = (start + end)/2\n            if array[mid] == elem:\n                return mid\n            elif array[mid] > elem:\n                end = mid - 1\n            else:\n                start = mid + 1\n        return None", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, x, y):\n    \"\"\"find the index of the first occurence of x in arr\"\"\"\n    if arr[0] == x:\n        return 0\n    if arr[0] > x:\n        return first(arr[1:], x, y)\n    return first(arr[0:], x, y)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,value,index):\n    if len(arr) == 0:\n        return 0\n    if arr[index] == value:\n        return index\n    if arr[index] > value:\n        return first(arr,value,index - 1)\n    return first(arr,value,index + 1)", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,x,y):\n    i=0\n    while i<len(arr):\n        if arr[i] == x:\n            return i\n        i+=1\n    return -1", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array, target, lo=0, hi=None):\n    if hi == None:\n        hi = len(array) -1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if array[mid] == target:\n            return mid\n        elif target < array[mid]:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, target, lower, upper):\n    if lower == upper:\n        if target == arr[lower]:\n            return lower\n        else:\n            return -1\n\n    mid = (lower+upper)//2\n\n    if target < arr[mid]:\n        upper = mid\n    else:\n        lower = mid + 1\n\n    return first(arr, target, lower, upper)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(a,target,pos):\n    for i in range(len(a)):\n        if a[i]==target:\n            if i==pos:\n                return pos\n            else:\n                return i\n    return -1"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    new_tuples = []\n    for tup in tuples:\n        if len(tup) != k:\n            new_tuples.append(tup)\n    return new_tuples\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    for i, tuple in enumerate(tuples):\n        if len(tuple) == k:\n            tuples.pop(i)\n    return tuples\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(input_list, k):\n    new_list = []\n    for tuple_x in input_list:\n        if len(tuple_x) == k:\n            continue\n        else:\n            new_list.append(tuple_x)\n    return new_list", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(seq, k):\n    \"\"\"\n    >>> assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    \"\"\"\n    return [x for x in seq if len(x) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tups, k):\n    tuples_without_k = []\n    for tup in tups:\n        if len(tup) == k:\n            continue\n        else:\n            tuples_without_k.append(tup)\n    return tuples_without_k\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    for index in range(len(tuples)):\n        if len(tuples[index]) == k:\n            del tuples[index]\n    return tuples\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(l, k):\n    return [x for x in l if len(x) == k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    return [t for t in tuples if len(t) != k]\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    new_list = []\n    for i in lst:\n        if len(i) == k:\n            pass\n        else:\n            new_list.append(i)\n    return new_list\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(lst, k):\n    for i in range(len(lst)):\n        for j in range(len(lst) - i - 1):\n            if len(lst[j]) == k:\n                lst.pop(j)\n    return lst\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# def find_exponentio(base, power):\n#     result = (base, power)\n#     return result\n\ndef find_exponentio(base, power):\n    result = (base[0] ** base[1],\n              base[2] ** base[3])\n    return result\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(a, b):\n    assert len(a) == len(b)\n\n    # Defining a third list to keep track of the result\n    result = []\n\n    for i in range(len(a)):\n        # Checking if the first element of the current tuple is 0\n        if a[i] == 0:\n            result.append(0)\n        elif b[i] == 0:\n            result.append(1)\n        elif a[i] == 1:\n            result.append(b[i])\n        else:\n            result.append(a[i] * find_exponentio(a, b[1:]))\n\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(p, q):\n    exponent = 1\n    for i in range(1, len(q)):\n        exponent = exponent * q[i]\n    product = 1\n    for i in range(1, len(p)):\n        product = product * p[i]\n    result = product ** exponent\n    return result\n\n#assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# Write your solution here", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tup1, tup2):\n    \"\"\"\n    \"\"\"\n    return tup1[0] * tup2[0], tup1[1] * tup2[1], tup1[2] * tup2[2], tup1[3] * tup2[3]\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    return (a[0] ** b[0], a[1] ** b[1], a[2] ** b[2], a[3] ** b[3])\n\n# TESTS", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    a_value, a_exponent = a\n    b_value, b_exponent = b\n    return (a_value**b_exponent), (a_exponent*b_value), (a_value**b_value), (a_value**b_exponent)\n\n# Tests", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(base, exp):\n    # First write your code here.\n    return base ** exp\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\nimport math\n\n\ndef find_exponentio(a, b):\n    pass\n\n\ndef find_exponentio_naive(a, b):\n    res = 1\n    for i in b:\n        res *= a[i]\n    return res\n\n\ndef find_exponentio_generator(a, b):\n    for _ in b:\n        yield a[0]\n        a = a[1:]\n    yield a[0]\n\n\ndef find_exponentio_recursive(a, b):\n    return find_exponentio_recursive_helper(a, b, 0)\n\n\ndef find_exponentio_recursive_helper(a, b, n):\n    if n >= len(b):\n        return 1\n    return a[n] * find_exponentio_recursive_helper(a, b, n + 1)\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(a, b):\n    if b[0] == 0:\n        return (1, 1, 0, 1)\n    return (a[0] * find_exponentio(a[1:], b)[0], a[0] * find_exponentio(a[1:], b)[1], a[1:], find_exponentio(a[1:], b)[2])\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n\n    >>> largest_triangle(4,2)==10.392304845413264\n    True\n    >>> largest_triangle(3,4)==7.745966692414834\n    True\n    >>> largest_triangle(1,1)==3.141592653589793\n    True\n    >>> largest_triangle(1,2)==4.032525671881192\n    True\n    >>> largest_triangle(2,1)==3.141592653589793\n    True\n    >>> largest_triangle(5,5)==5.630286058478968\n    True\n    >>> largest_triangle(10,10)==10.392304845413264\n    True\n    >>> largest_triangle(11,20)==10.392304845413264\n    True\n    >>> largest_triangle(30,10)==10.392304845413264\n    True\n    >>> largest_triangle(1,1)==3.141592653589793\n    True\n    >>> largest_triangle(1,1)==3.141592653589793\n    True\n    >>> largest_triangle(100,100)==100.0\n    True\n    >>> largest_triangle(100,100)==100.0\n    True\n    >>> largest_triangle(10,10)==10.0\n    True\n    \"\"\"\n    A = 2*(a/2**0.5)\n    B = 2*(b/2**0.5)\n    ans = (A*B)/2\n    return", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport numpy as np\n\ndef largest_triangle(a,b):\n    \"\"\"\n    largest triangle inscribed in ellipse of semi-major and semi-minor axes a and b.\n    \n    Parameters\n    ----------\n    a : float\n        semi-major axis of ellipse\n    b : float\n        semi-minor axis of ellipse\n    \n    Returns\n    -------\n    A : float\n        Area of largest inscribed triangle.\n    \"\"\"\n    x1 = a*np.sqrt(1/3)\n    x2 = b*np.sqrt(1/3)\n    return np.pi*(x1**2/4+x2**2/4+x1*x2/2)\n\n# end of function", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfrom typing import Any, Tuple\n\n\ndef largest_triangle(a: float, b: float) -> Tuple[float, float, float]:\n    \"\"\"\n    Finds the largest triangle that can be inscribed in an ellipse\n\n    :param a: major axis\n    :param b: minor axis\n    :return: largest_triangle: Tuple[float, float, float], longest side, shortest side, and hypotenuse\n    \"\"\"\n    longest_side = b*a**0.5\n    shortest_side = a*b**0.5\n    hypotenuse = longest_side + shortest_side\n    return longest_side, shortest_side, hypotenuse\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\n# Write your code here\nimport math\n\ndef largest_triangle(a,b):\n    return 3*math.sqrt(a*a + b*b)\n\nlargest_triangle(4,2)\n\n# -- TEST CASES -------------------------------------------------------\n# Test.assert_equals(largest_triangle(4, 2), 10.392304845413264)\n# Test.assert_equals(largest_triangle(16, 8), 25.867105352475843)\n# Test.assert_equals(largest_triangle(16, 5), 23.984693743547144)\n# Test.assert_equals(largest_triangle(4, 1), 10.0)\n\n# OR\n\ndef largest_triangle(a,b):\n    return math.sqrt(a*a+b*b)/2\n\nlargest_triangle(4,2)", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n\tif a==0:\n\t\treturn 0\n\telse:\n\t\treturn (a*a)/2.0 + sqrt((a*a)/4.0 + b*b)\n\n# assert largest_triangle(4,2)==10.392304845413264", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    x=3\n    y=4\n    return (a*x*x+(b*y*y)**(0.5))/a\n\n# Tests", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    x = (a**2 + b**2) ** 0.5\n    return (a + b + x) ** 2 / 4\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport math\n\n# http://stackoverflow.com/questions/3196530/how-can-i-write-a-python-function-that-calculates-the-largest-triangle-that-can-be-in\n\ndef largest_triangle(a, b):\n    \"\"\"\n    >>> largest_triangle(4,2)\n    10.392304845413264\n    \"\"\"\n    return (a*math.sqrt(1 + b/a))/2\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    def area(a,b,h):\n        return 0.5*a*b*h\n    def hypotenuse(a,b):\n        return (a**2+b**2)**0.5\n    def triangle(a,b,h):\n        return area(a,b,h)/area(a,b,hypotenuse(a,b))\n    min_triangle = triangle(a,b,1)\n    for h in range(2,hypotenuse(a,b)):\n        new_triangle = triangle(a,b,h)\n        if new_triangle > min_triangle:\n            min_triangle = new_triangle\n    return min_triangle\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\n# +\nfrom typing import List, Tuple, Dict\n\ndef largest_triangle(a: float, b: float) -> float:\n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n    pass\n\n\n# -\n\n# ### Exercise 14: Fibonacci numbers\n# Write a function `fib(n)` that returns the n-th Fibonacci number.\n#\n# This is the sequence:\n#\n# ```\n# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...\n# ```\n#\n# The Fibonacci numbers are an extremely important topic in computer science. You can see it in many topics, from number theory to compilers.\n#\n# **Solution.**\n# ```python\n# def fib(n: int) -> int:\n#     \"\"\"\n#     Write a function `fib(n)` that returns the n-th Fibonacci number.\n#     \"\"\"\n#     pass\n# ```\n#\n# **Example.**\n# ```python\n# assert fib(0)==0\n# assert fib(1)==1\n# assert fib(2)==1\n# assert fib(3)==2\n# assert fib(4)==3\n# assert fib(5)==5\n# ```\n\n# +\nfrom typing import List, Tuple, Dict\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Write a function `fib(n)` that returns the n-th Fibonacci number.\n    \"\"\"\n    pass\n\n\n# -\n\n# ### Exercise 15: Convert to hex\n# Write a function that converts a decimal number to its hex equivalent.\n#\n# **Solution.**\n# ```python\n# def dec2hex(n: int) -> str:\n#     \"\"\"\n#     Write a function that converts a decimal number to its hex equivalent.\n#     \"\"\"\n#     pass\n# ```\n#\n# **Example.**\n# ```python\n# assert dec2hex(1"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n < 2:\n        return n\n    else:\n        return 2 ** (n - 1).bit_length()\n\n\ndef highest_Power_of_2(n):\n    if n < 2:\n        return n\n    else:\n        x = 2 ** (n - 1).bit_length()\n        return x\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Solution\n\ndef highest_Power_of_2(x):\n    if x == 0:\n        return 0\n    while x % 2 == 0:\n        x = x / 2\n    return x\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(x):\n    if x <= 0:\n        return 0\n    for i in range(1, 32):\n        if x >> i & 0x1 == 1:\n            return x >> i\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    temp = 1\n    while temp < n:\n        temp = temp * 2\n    return temp\n\ndef highest_Power_of_2_optimized(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    temp = 1\n    temp = temp * 2\n    while temp < n:\n        temp = temp * 2\n    return temp\n\ndef highest_Power_of_2_better(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    temp = 1\n    temp = temp * 2\n    temp = temp - 1\n    temp = 1 << temp\n    while temp < n:\n        temp = temp * 2\n        temp = temp - 1\n        temp = 1 << temp\n    return temp\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    n = int(n)\n    while n > 1:\n        if n & (n - 1) == 0:\n            break\n        n -= 1\n    return n\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n# ref : https://www.geeksforgeeks.org/maximum-power-of-2-less-equal-number-set-1/\n\ndef highest_Power_of_2(x):\n    return 2**(x-1).bit_length()\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 1\n    result = 1\n    while(result < n):\n        result = result << 1\n    return result\n\ndef test_function(test_case, expected_result):\n    result = highest_Power_of_2(test_case[0])\n    if result == expected_result:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([10], 8)\ntest_function([5], 4)\ntest_function([1023], 1024)\ntest_function([1024], 1024)\ntest_function([1025], 2048)\ntest_function([1026], 4096)\ntest_function([2047], 2048)\ntest_function([4095], 4096)\ntest_function([4096], 4096)", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    while n > 1:\n        n = n // 2\n    return n\n\n# test cases", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(num):\n    \"\"\"\n    Find highest power of 2 less than or equal to given number.\n\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(0)\n    0\n    >>> highest_Power_of_2(2)\n    2\n    \"\"\"\n    power = 0\n    while 2**power <= num:\n        power += 1\n    return power - 1\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 1:\n        return 1\n    else:\n        return 2**(int(n)-1)\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list1):\n    max_value = max(list1)\n    max_indices = []\n    for i in range(len(list1)):\n        if list1[i] == max_value:\n            max_indices.append(i)\n    return max_indices\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(x):\n    # your code here\n    return [x.index(max(x))]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list):\n    pos=[]\n    for i,val in enumerate(list):\n        if val==max(list):\n            pos.append(i)\n    return pos\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(a_list):\n    maximum = 0\n    max_index = 0\n    for index, value in enumerate(a_list):\n        if value > maximum:\n            maximum = value\n            max_index = index\n    return [max_index]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(mylist):\n    max_list = []\n    max_list.append(mylist.index(max(mylist)))\n    return max_list", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(x):\n    position_max = []\n    for i in range(len(x)):\n        if x[i] == max(x):\n            position_max.append(i)\n    return position_max\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list):\n    max_list = [list[0]]\n    for i in range(1, len(list)):\n        if list[i] > max_list[0]:\n            max_list = [list[i]]\n        elif list[i] == max_list[0]:\n            max_list.append(list[i])\n    return max_list.index(list[i])\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    max = lst[0]\n    max_pos = []\n    for i, v in enumerate(lst):\n        if v > max:\n            max = v\n            max_pos = [i]\n        elif v == max:\n            max_pos.append(i)\n\n    return max_pos", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list):\n    max_val = max(list)\n    return [list.index(max_val)]", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\n#Solution:\ndef position_max(a_list):\n    positions = []\n    for i,value in enumerate(a_list):\n        if value == max(a_list):\n            positions.append(i)\n    return positions\n\n#Tests:"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list1):\n    if list1.count(list1[0]) == len(list1):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    s=set(lst)\n    if len(s)==1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(x):\n    x = set(x)\n    if len(x) == 1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) > 1:\n        for i in range(len(lst)):\n            for j in range(len(lst)-i-1):\n                if lst[j] > lst[j+1]:\n                    return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(aList):\n\tif len(aList) == 0:\n\t\treturn False\n\telse:\n\t\tset1 = set(aList)\n\t\tif len(set1) > 1:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list):\n    if len(list)==0:\n        return True\n    if len(list)>0:\n        for i in range(len(list)-1):\n            if list[i]!=list[i+1]:\n                return False\n        return True\n# Test Cases", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\n# Write your code here:\ndef chkList(lst):\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False\n\nlst = ['one','one','one']", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(l):\n    return len(set(l)) == 1\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(l):\n    for i in range(len(l)-1):\n        if l[i] != l[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(inputList):\n    return len(set(inputList)) == len(inputList)\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    new_str = \"\"\n    for i in range(len(s)):\n        if s[i]%2 == 0:\n            continue\n        else:\n            new_str += s[i]\n    return new_str\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    \"\"\"\n    Removes all even characters from a string\n    :param s:\n    :return:\n    \"\"\"\n    return ''.join([c for c in s if c.isnumeric()])\n\ndef remove_even(s):\n    return ''.join(c for c in s if c.isnumeric())\n\ndef remove_even(s):\n    return ''.join(c for c in s if not c.isnumeric())\n\ndef remove_even(s):\n    return ''.join([c for c in s if not c.isdigit()])\n\ndef remove_even(s):\n    return s.replace(\"even\", \"\")", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(word):\n    return \"\".join(c for c in word if c not in \"02468\")\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return ''.join(c for c in string if not c % 2)\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    return \"\".join([e for e in s if e != \"0\"])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    # your code here\n    return string[0] + string[2] + string[4] + string[6] + string[8]\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(mystr):\n    string = \"\"\n    for character in mystr:\n        if character % 2 == 0:\n            string = string + character\n        else:\n            string = string + character\n\n    return string\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    new_str = \"\"\n    for char in string:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    odd = 0\n    for i in string:\n        if i%2 == 0:\n            string = string[odd:]\n        else:\n            odd+=1\n    return string\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    return s[::2]\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x, y):\n    res = 0\n    x = str(x)\n    y = str(y)\n    res = abs(len(x) - len(y))\n    for i in range(len(x)):\n        if x[i] != y[i]:\n            res += 1\n    return res\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(num_a, num_b):\n    bin_num_a = bin(num_a)[2:].zfill(num_a.bit_length())\n    bin_num_b = bin(num_b)[2:].zfill(num_b.bit_length())\n    \n    diff = bin_num_a[:num_a.bit_length()] != bin_num_b[:num_b.bit_length()]\n    \n    return bin_num_a[:num_a.bit_length()] != bin_num_b[:num_b.bit_length()]", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a, b):\n    # write your code here\n    return bin(a^b).count('1')\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a,b):\n    assert type(a) == int and type(b) == int, \"Input should be integers\"\n    c = bin(a)\n    d = bin(b)\n    assert len(c) == len(d), \"Input should be of equal length\"\n    e = [int(i) for i in d]\n    f = sum([a^b for a, b in zip(c, d)])\n    return f", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a,b):\n    assert type(a) is int and type(b) is int\n    n = a ^ b\n    return n.bit_length()\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x, y):\n    distance = 0\n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    for i in range(len(x)):\n        if(x[i] != y[i]):\n            distance += 1\n    return distance\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    distance = 0\n    if x == y:\n        return 0\n    else:\n        for i in range(len(x)):\n            distance += 1 if x[i] != y[i] else 0\n        return distance\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a, b):\n    return bin(a^b).count('1')\n\n# assert hamming_Distance(4,8) == 2\n# assert hamming_Distance(4,5) == 1\n# assert hamming_Distance(15,25) == 1\n# assert hamming_Distance(6,2) == 3\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x, y):\n    \"\"\"Function to find the hamming distance between given two integers.\"\"\"\n    x = str(x)\n    y = str(y)\n    x = int(x,2)\n    y = int(y,2)\n    #print x,y\n    return bin(x ^ y).count('1')\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_distance(n1,n2):\n    \"\"\"\n    :param n1: first integer\n    :param n2: second integer\n    :return: hamming distance between given two integers\n    \"\"\"\n    return bin(n1 ^ n2).count('1')\n\ndef hamming_distance(n1,n2):\n    \"\"\"\n    :param n1: first integer\n    :param n2: second integer\n    :return: hamming distance between given two integers\n    \"\"\"\n    return bin(n1 ^ n2).count('1')\n\n\n# -\n\n# # Question 3\n\n# +"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string,char):\n    count=0\n    for i in string:\n        if i == char:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string,char):\n    count = 0\n    for i in string:\n        if(char == i):\n            count += 1\n    return count\n\ndef count_python(string,char):\n    return string.count(char)\n\n#print(count(\"abcc\",\"c\"))", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str,ch):\n    s = str.split()\n    count = 0\n    for i in s:\n        if i.count(ch) > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s, c):\n    return s.count(c)\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str, ch):\n    count = 0\n    for c in str:\n        if c == ch:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str, ch):\n    count = 0\n    for i in str:\n        if i == ch:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s, c):\n    # count = 0\n    # for item in s:\n    #     if item == c:\n    #         count += 1\n    # return count\n\n    count = s.count(c)\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str, ch):\n    \"\"\"\n    Count the occurrence of a given character in a string\n    \"\"\"\n    return str.count(ch)\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string,letter):\n    \"\"\"\n    Count the number of occurrences of letter in string\n    \"\"\"\n    count = 0\n    for i in string:\n        if i == letter:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuples):\n    elements = [x for tup in tuples for x in tup]\n    elements.sort()\n    inversions = []\n    last_element = None\n    for element in elements:\n        if last_element is not None and element < last_element:\n            inversions.append((last_element - element))\n        last_element = element\n    return tuple(inversions)\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef inversion_elements(elements: List[Tuple[int]]) -> Tuple[int, ...]:\n    return tuple(sorted(sum(1 for _ in set(sorted(e[::-1]))) for e in elements))", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\n# Solution 1\n\n\ndef inversion_elements(list_tuple):\n    \"\"\"Solution 1\"\"\"\n    inversions = []\n    for index, val in enumerate(list_tuple[:-1]):\n        if list_tuple[index + 1] < val:\n            inversions.append(list_tuple[index + 1])\n    return inversions\n\n\n# Solution 2\n\n\ndef inversion_elements(list_tuple):\n    \"\"\"Solution 2\"\"\"\n    inversions = []\n    for index, val in enumerate(list_tuple[:-1]):\n        if list_tuple[index + 1] < val:\n            inversions.append(list_tuple[index + 1])\n    return inversions\n\n\n# Solution 3\n\n\ndef inversion_elements(list_tuple):\n    \"\"\"Solution 3\"\"\"\n    return [x for x in list_tuple[1:] if x < list_tuple[0]]\n\n\n# Solution 4\n\n\ndef inversion_elements(list_tuple):\n    \"\"\"Solution 4\"\"\"\n    # return [x for x in list_tuple[1:] if x < list_tuple[0]]\n    return [x for x in list_tuple if x < list_tuple[0]]", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    pass\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nimport unittest\nfrom typing import List, Tuple\n\n\ndef inversion_elements(elements: Tuple[int]) -> List[int]:\n    \"\"\"\n\n    :param elements: tuple of numbers\n    :return: list of inversions of element elements in the given tuple\n    \"\"\"\n    inversions = []\n    for i in range(len(elements) - 1):\n        for j in range(i + 1, len(elements)):\n            if elements[i] > elements[j]:\n                inversions.append(elements[i] - elements[j])\n                inversions.append(elements[j] - elements[i])\n                break\n    return inversions\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuple_list):\n    return sorted([abs(x[0] - x[1]) for x in tuple(zip(*tuple_list))])\n\ndef inversion_elements(tuple_list):\n    result = [abs(x[0] - x[1]) for x in zip(*tuple_list)]\n    result.sort()\n    return result\n\ndef inversion_elements(tuple_list):\n    result = []\n    for x in zip(*tuple_list):\n        if x[0] > x[1]:\n            result.append(abs(x[0] - x[1]))\n    return result\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuples):\n    if len(tuples) < 2:\n        return []\n    elif len(tuples) == 2:\n        return [(tuples[1][0] - tuples[0][0], tuples[1][1] - tuples[0][1])]\n    else:\n        return [(tuples[i][1] - tuples[i-1][0], tuples[i][0] - tuples[i-1][1]) for i in range(2, len(tuples))]\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(numbers):\n    \"\"\"\n    Count inversions of tuple elements.\n    \"\"\"\n    count = 0\n    for i, v1 in enumerate(numbers):\n        for v2 in numbers[i + 1:]:\n            if v1 > v2:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tlist):\n    invs = []\n    for x in tlist:\n        for y in tlist[x]:\n            if x > y:\n                invs.append((y, x))\n    return invs\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuples):\n    pass\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_elements):\n    return tuple(list(i)+[tuple_elements[i+1]] for i in range(len(tuple_elements)-1))", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    return \" \".join(map(lambda x: x[0] + \" \" + x[1], zip(*tuples)))\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\n# Write your code here\ndef concatenate_elements(list1):\n    return ' '.join(list1[i] + ' ' + list1[i+1] for i in range(len(list1)-1))\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple1):\n    concatenated_list = []\n    for i in range(len(tuple1)):\n        if i != len(tuple1) -1:\n            concatenated_list.append(tuple1[i] + \" \" + tuple1[i + 1])\n        else:\n            concatenated_list.append(tuple1[i])\n    return concatenated_list\n\nconcatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    return tuple(f\"{a} {b}\" for a,b in zip(*tuples))\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_list):\n    return tuple(\"\".join(el) for el in zip(*tuple_list))\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_list):\n    new_tuple_list = []\n    for i in range(len(tuple_list)):\n        temp = tuple_list[i]\n        for j in range(i+1,len(tuple_list)):\n            temp = temp + tuple_list[j]\n        new_tuple_list.append(temp)\n    return new_tuple_list\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple):\n    if tuple == ():\n        return \"\"\n    else:\n        return tuple[0] + \" \" + concatenate_elements(tuple[1:])\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    res = []\n    for i in range(len(tup)-1):\n        res.append(tup[i]+\" \"+tup[i+1])\n    return res", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    return tuple(f'{t1} {t2}' for t1, t2 in zip(tuples[:-1], tuples[1:]))\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(str1):\n    L = [[None for _ in range(len(str1))] for _ in range(len(str1))]\n\n    for i in range(1, len(str1)):\n        for j in range(i):\n            if str1[i] == str1[j]:\n                L[i][j] = L[j][i] = 1 + L[j + 1][j] if str1[j] == str1[j + 1] else 0\n    return max(L[-1])\n\ndef find_longest_repeating_subseq_DP(str1):\n    L = [[None for _ in range(len(str1))] for _ in range(len(str1))]\n\n    for i in range(1, len(str1)):\n        for j in range(i):\n            if str1[i] == str1[j]:\n                L[i][j] = L[j][i] = 1 + L[j + 1][j] if str1[j] == str1[j + 1] else 0\n    L[-1][-1] = 1\n    return max(L[-1]) - 1", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(string):\n    max_len = 1\n    current_len = 1\n    subseq = []\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            subseq = string[i:j+1]\n            if subseq in string:\n                subseq_index = string.index(subseq)\n                if subseq_index != i:\n                    if current_len < max_len:\n                        max_len = current_len\n                        subseq = []\n                    current_len = 1\n                else:\n                    current_len += 1\n    return max_len\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    # your code goes here\n    longest_subseq = \"\"\n    subseq = \"\"\n    l = 0\n    r = 0\n    subseq_dict = {}\n    for i in range(len(s)):\n        if s[i] in subseq_dict:\n            subseq_dict[s[i]] += 1\n        else:\n            subseq_dict[s[i]] = 1\n        while r < len(s):\n            if s[r] in subseq_dict:\n                subseq_dict[s[r]] -= 1\n                if subseq_dict[s[r]] == 0:\n                    subseq_dict.pop(s[r])\n            r += 1\n        if len(subseq_dict) > 0:\n            subseq += s[l:r]\n        if len(subseq) > len(longest_subseq):\n            longest_subseq = subseq\n        l = r\n        subseq = \"\"\n    return len(longest_subseq)\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\nimport unittest\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(input):\n    if len(input) < 2:\n        return 0\n    if input[0] == input[1]:\n        return 1\n    longest_repeating_subseq = 0\n    for i in range(len(input)):\n        if input[0] == input[i]:\n            longest_repeating_subseq = 1\n            for j in range(1,len(input)):\n                if input[0] == input[j] and i != j:\n                    return longest_repeating_subseq\n    return longest_repeating_subseq\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef find_longest_repeating_subseq(string: str) -> int:\n    str_len = len(string)\n\n    def check_subseq(seq: List[str], start: int, cur_len: int) -> int:\n        nonlocal str_len\n        if cur_len == 0:\n            return 0\n        elif cur_len == 1:\n            return 1\n        else:\n            max_len = 0\n            for i in range(start, str_len - cur_len + 1):\n                subseq = string[i : i + cur_len]\n                if subseq in seq:\n                    max_len = max(max_len, check_subseq(seq, i, cur_len - 1))\n            return max_len + 1\n\n    return check_subseq([], 0, 1)\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(seq):\n    # TODO\n    longest = 0\n    for i in range(len(seq)-1):\n        for j in range(i+1, len(seq)):\n            if seq[i] == seq[j] and seq[i+1:j] == seq[j+1:i:-1]:\n                longest = max(longest, j-i)\n    return longest\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(str1):\n    s = [None] * len(str1)\n    max_len = 0\n    for i in range(len(str1)):\n        for j in range(i, -1, -1):\n            if s[j] is None:\n                s[j] = i\n                if i != j:\n                    max_len = max(max_len, len(s[i:j+1]))\n                break\n    return max_len\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(str):\n    subseq = []\n    longest = 0\n    for i in range(len(str)):\n        if subseq and subseq[-1] == str[i]:\n            subseq.append(str[i])\n        else:\n            subseq.append(str[i])\n        if len(subseq) > longest:\n            longest = len(subseq)\n    return longest\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(str):\n    if len(str) < 2:\n        return 0\n\n    # Create a dict to keep count of each character.\n    d = {}\n    for c in str:\n        d[c] = d.get(c, 0) + 1\n\n    max_len = 0\n    subseq_len = 1\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] != str[j]:\n                continue\n\n            # Check if character count of both subsequences are the same.\n            if d[str[i]] != d[str[j]]:\n                break\n\n            # Check if there is any character that is present in one subsequence and is missing in the other subsequence.\n            for k in range(i+1, j):\n                if str[k] in str[i:j] and str[k] not in str[j:i]:\n                    break\n            else:\n                # If no such character is found, then the two subsequences are repeating.\n                subseq_len = j - i + 1\n                if subseq_len > max_len:\n                    max_len = subseq_len\n\n    return max_len\n\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(n):\n    if re.match('\\d+(\\.\\d{2})?', n):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(s):\n    return re.match(r\"^\\d+\\.?\\d{0,1}$\", s) != None\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\n# TODO\n\nimport re\n\ndef is_decimal(decimal: str) -> bool:\n    return re.match(r'^\\d+\\.\\d{2}$', decimal) is not None", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(text):\n    return re.match(r'\\d+(\\.\\d{1,2})?$', text) is not None\n\n# Tests", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(string):\n    if re.match(r'^-?\\d+(?:\\.\\d+)?$', string):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(number):\n    if number.isdecimal() == False:\n        return False\n    else:\n        return True\n    if len(re.findall(r'\\.', number)) == 0:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(decimal):\n    import re\n    pattern = re.compile('(\\d+\\.\\d{1,2})')\n    if pattern.search(decimal):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\ndef is_decimal(n):\n    pattern = r'^[\\d]+\\.[\\d]*$'\n    if re.match(pattern, n):\n        if '.' in n:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\ndef is_decimal(value):\n    regex = r\"^(\\d+)(\\.\\d{0,2})$\"\n    matches = re.match(regex, value)\n    return matches != None\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\n\ndef is_decimal(decimal):\n    # your code here\n    if type(decimal) != str:\n        return False\n    if not re.match(r'^[0-9]+(\\.[0-9]+)?$', decimal):\n        return False\n    if '.' in decimal and len(decimal.split('.')[1]) > 2:\n        return False\n    return True\n\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    # check if the given heap is empty\n    if len(heap) == 0:\n        heap.append(item)\n        return heap\n    \n    # get the smallest item in the heap\n    smallest = heap[0]\n    # if the smallest item is equal to the item to be replaced, just return the new item\n    if smallest == item:\n        heap[0] = item\n        return heap\n    \n    # otherwise, replace the smallest item with the new item\n    heap[0] = item\n    \n    # get the index of the smallest item in the heap\n    index = 0\n    # loop through all other elements\n    for i in range(1, len(heap)):\n        # if the current element in the heap is smaller than the smallest item,\n        # then set the current element as the smallest item\n        if heap[i] < smallest:\n            smallest = heap[i]\n            index = i\n    # after the loop is completed, replace the smallest item with the new item\n    heap[index] = smallest\n    \n    # heapify the heap\n    heapify(heap, 0, len(heap)-1)\n    \n    return heap\n\n# tests for the function", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nfrom heapq import heapify,heappop,heappush\ndef heap_replace(heap,item):\n    heappush(heap,item)\n    return heappop(heap)\n\ndef test():\n    import heapq\n    print heap_replace( [25, 44, 68, 21, 39, 23, 89],21)\n    print heapq.nlargest(3,[25, 44, 68, 21, 39, 23, 89])\ntest()\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_item):\n    heapq.heapreplace(heap, new_item)\n    return heap\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,x):\n    sift_up(heap,0,len(heap)-1)\n    heap[0]=x\n    sift_down(heap,0,len(heap)-1)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    item_index = heap[0]\n    heap[0] = item\n    min_heapify(heap, 0)\n    return item_index\n\ndef min_heapify(heap, index):\n    left, right = left_child_index(index), right_child_index(index)\n    smallest = index\n    if left < len(heap) and heap[left] < heap[smallest]:\n        smallest = left\n    if right < len(heap) and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != index:\n        heap[smallest], heap[index] = heap[index], heap[smallest]\n        min_heapify(heap, smallest)\n\n\ndef left_child_index(index):\n    return 2 * index + 1\n\n\ndef right_child_index(index):\n    return 2 * index + 2\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap,item):\n    smallest = heap[0]\n    heap[0]= item\n    heapify(heap)\n    return smallest\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    return heap_replace_top(heap, item)\n\ndef heap_replace_top(heap, item):\n    heap[0] = item\n    heap_down(heap, 0)\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\n#method1\ndef heap_replace(heap,new_item):\n    replace_item=heap[0]\n    heap[0]=new_item\n    sift_down(heap,0,len(heap)-1)\n    return replace_item\n\ndef sift_down(heap,i,j):\n    while i*2+1<=j:\n        l=i*2+1\n        r=i*2+2\n        smallest=i\n        if r<=j and heap[l]>heap[r]:\n            smallest=r\n        if heap[smallest]>heap[i]:\n            heap[i],heap[smallest]=heap[smallest],heap[i]\n            i=smallest\n            sift_down(heap,i,j)\n\n#method2\ndef heap_replace(heap,new_item):\n    heap[0]=new_item\n    heapify(heap)\n    replace_item=heap.pop(0)\n    return replace_item\n\ndef heapify(heap):\n    n=len(heap)\n    for i in reversed(range(n//2)):\n        sift_down(heap,i,n-1)", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_item):\n    heap[1] = new_item\n    heap_down(heap, 1)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\nfrom heapq import heapify,heappop,heappush\n\n\ndef heap_replace(arr,x):\n    heapify(arr)\n    heappush(arr,x)\n    return heappop(arr)\n\n\narr = [25, 44, 68, 21, 39, 23, 89]\nheap_replace(arr,21)"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    is_allowed = re.compile(r'[\\w]*').fullmatch(string)\n    return is_allowed\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n    return all(char in '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' for char in string)\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\n#Solution\ndef is_allowed_specific_char(s):\n    return bool(re.match(\"^[a-z0-9]*$\", s))\n\n#Another Solution\nimport re\ndef is_allowed_specific_char(s):\n    return bool(re.match(\"^[a-z0-9]+$\", s))", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\n\ndef is_allowed_specific_char(s: str, allowed_chars: str = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") -> bool:\n    \"\"\"\n    :param s: input string\n    :param allowed_chars: string containing all allowed chars, default=\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    :return: True if allowed chars are in string, else False\n    \"\"\"\n    if all(c in allowed_chars for c in s):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(s):\n    return re.match(\"[a-z0-9]*\", s)\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\n\ndef is_allowed_specific_char(str):\n    return re.match('^[a-z0-9]*$', str) is not None\n\n\ndef is_allowed_specific_char(str):\n    return all(c in '0123456789abcdefghijklmnopqrstuvwxyz' for c in str)\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(s):\n    return re.search(r'[^a-z0-9]', s) == None", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(string):\n    if re.search('[A-Z]', string):\n        if re.search('[a-z]', string):\n            if re.search('[0-9]', string):\n                return True\n    return False", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\ndef is_allowed_specific_char(string):\n    if re.search(\"[^a-z0-9]\", string):\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n\n    allowed_char = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n\n    return bool(re.match(r'^[a-zA-Z0-9]*$', string)) and bool(re.match(r'^[a-zA-Z]*$', string)) and bool(re.match(r'^[0-9]*$', string))\n\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    count = 0\n    for i in range(0, 32):\n        if(num & (1 << i)):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(1<<n):\n        if(i & (i+1)) != 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    num = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if (i & (1<<j) != 0) and (j & (1<<i) != 0):\n                count += 1\n        num += count\n    return num\n\n\ndef main():\n    n = 5\n    count = count_Num(n)\n    print(count)\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_num(n):\n    if n == 1:\n        return 1\n    else:\n        return count_num(n/2) + count_num((n+1)/2)\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    return sum(bin(x).count(\"1\") for x in range(1,n+1))\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        num = 1 << i\n        count += num & n & (num >> 1)\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if (i%2 == 0) and (i%3 == 0):\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\nimport math\nimport random\n\ndef count_Num(n):\n    if (n == 0):\n        return 0\n    else:\n        n = (n & (n - 1))\n        return count_Num(n)\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(N):\n    res = 0\n    i = 1\n    while i<N:\n        res += i\n        i *= 2\n    return res\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    num = str(num)\n    count = 0\n    for i in num:\n        if i == \"1\":\n            count = count + 1\n    return count\n\n\n#assert count_Num(2) == 1"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    \"\"\"\n    :param n: an integer\n    :return: the sum of fourth power of n natural numbers\n    \"\"\"\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**4\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n# +\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\nfourth_Power_Sum(2)\n# -\n\n# ### 5.11) Find the following\n#\n# 1. fourth power of a list.\n# 2. Add 1 to all elements of a list.\n# 3. Reverse the order of elements in a list.\n# 4. Create a list of first 10 natural numbers.\n# 5. Return the length of the list.\n# 6. Get the list after removing the first and last elements.\n# 7. Get the list after removing every second element.\n# 8. Return the sum of all elements of the list.\n# 9. Return the product of all elements of the list.\n# 10. Find the position of 15 in the list.\n# 11. Find the index of 15 in the list.\n\n# +\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    \"\"\"\n    Args:\n       n(int): integer number\n    Returns:\n       int: sum of fourth power of n natural numbers\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        result += i**4\n    return result\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    i=1\n    sum=0\n    while i<=n:\n        sum=sum+pow(i,4)\n        i+=1\n    return sum", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    return n * n * n * n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    res = 0\n    for i in range(1, n+1):\n        res += i**4\n    return res\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n# Solution\n\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n# [START compute_fourth_power_sum]\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**4\n    return sum\n# [END compute_fourth_power_sum]\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tup1, tup2):\n    return (tup1[0] + tup2[0], tup1[1] + tup2[1], tup1[2] + tup2[2])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(first_tuple, second_tuple):\n    first_string = \" \".join(first_tuple)\n    second_string = \" \".join(second_tuple)\n    return first_string, second_string\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(lst1, lst2):\n    res = []\n    for i in range(len(lst1)):\n        res.append(lst1[i] + \" \" + lst2[i])\n    return res\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tup1, tup2):\n    return tup1 + tup2\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tup1, tup2):\n    return tuple(tup1 + tup2)\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(a_tuple, b_tuple):\n    concat_tuple = []\n    for i in range(3):\n        concat_tuple.append(a_tuple[i]+b_tuple[i])\n    return tuple(concat_tuple)", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    return tuple(tuple1) + tuple(tuple2)\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(s1, s2):\n    return tuple([item for sublist in [s1, s2] for item in sublist])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple(tuple1) + tuple(tuple2)\n\n# \"\"\"\n# Write a function to perform the concatenation of two string tuples.\n# assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n# \"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    temp = []\n    for i in range(3):\n        temp.append(tuple1[i] + tuple2[i])\n    return tuple(temp)\n\n# \"\"\"\n# Write a function to perform the concatenation of two string tuples.\n# assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n# \"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    temp = []\n    for i in range(3):\n        temp.append(tuple1[i] + tuple2[i])\n    return tuple(temp)\n\n# \"\"\"\n# Write a function to perform the concatenation of two string tuples.\n# assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n# \"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple(tuple1) + tuple(tuple2)\n\n# \"\"\"\n# Write a function to perform the concatenation of two string tuples.\n# assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Man"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radians):\n    return radians*180/math.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(angle_radian):\n    result=angle_radian*180/pi\n    return result\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n    return x*180/math.pi\n\ndef degree_radian(x):\n   ", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\nimport math\n\ndef degree_radian(x):\n    \"\"\"Return a value x in degrees.\"\"\"\n    return x * (180. / math.pi)\n\ndef radian_degree(x):\n    \"\"\"Return a value x in radians.\"\"\"\n    return x * (math.pi / 180.)\n\n\ndef test():\n    assert degree_radian(90) == 5156.620156177409\n    assert degree_radian(1) == 57.29577951308232\n    assert radian_degree(57.29577951308232) == 1\n    assert radian_degree(90) == 1.5707963267948966\n    assert radian_degree(1) == 0.017453292519943295\n\ntest()", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radians):\n    return radians*180/np.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(angle):\n    return angle * 57.2958\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radians):\n    result = radians * 180.0 / np.pi\n    return result\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(angle_in_radian):\n    angle_in_degree = angle_in_radian * (180/np.pi)\n    return angle_in_degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return 57.2957795*radian\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(angle):\n    return angle * 180/pi\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(lst):\n    dec = []\n    for i in range(len(lst)):\n        if type(lst[i]) == list:\n            dec.extend([lst[i][0]]*lst[i][1])\n        else:\n            dec.append(lst[i])\n    return dec\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(encoded):\n    result = []\n    for el in encoded:\n        if len(el) == 1:\n            result.append(el[0])\n        else:\n            result.append(el[0] * el[1])\n    return result\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(list_of_list):\n    list_of_list_decoded=[]\n    for li in list_of_list:\n        for i in li[0]:\n            list_of_list_decoded.append(i)\n        for j in range(li[1]):\n            list_of_list_decoded.append(li[0][0])\n    return list_of_list_decoded\n\n\n# -\n\n# asserts", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(run_length_encoded):\n    result = []\n    for element in run_length_encoded:\n        if isinstance(element, list):\n            result.extend([element[0]]*element[1])\n        else:\n            result.append(element)\n    return result", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(l):\n    result = []\n    for i in l:\n        if isinstance(i, list):\n            result += [i[0]] * i[1]\n        else:\n            result.append(i)\n    return result\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    prev = 0\n    decoded = []\n    for item in l:\n        if type(item) is list:\n            for i in range(item[0]):\n                decoded.append(item[1])\n        else:\n            decoded.append(item)\n    return decoded\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(data):\n    new_data = []\n    for row in data:\n        if type(row) is list:\n            row = row[0] + row[1] * row[2]\n            new_data.append(row)\n        else:\n            new_data.append(row)\n    return new_data\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(arr):\n    res = []\n    prev_n = -1\n    for i in arr:\n        if prev_n == -1:\n            prev_n = i\n            res.append(i)\n            continue\n        prev_n += i\n        res.append(prev_n)\n    return res\n\n\n# ### String Compression\n\n# 1. Write a function to compress a string. The length of the compressed string should be smaller than or equal to the original string.\n\n# +", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(compressed):\n    x = []\n    for item in compressed:\n        if type(item) is list:\n            x += item[0]*[item[1]]\n        else:\n            x.append(item)\n    return x", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(ls):\n    new_ls = []\n    for i in range(len(ls)):\n        if isinstance(ls[i],list):\n            new_ls.extend(decode_list(ls[i]))\n        else:\n            for j in range(ls[i]):\n                new_ls.append(ls[i+1])\n    return new_ls\n\n\n# +"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(main,subset):\n    main_set = set(main)\n    for sub in subset:\n        if not all(elem in main_set for elem in sub):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n\t#Your code here\n\tif len(list1)==0:\n\t\treturn True\n\tif not any(list1[0] in sublist for sublist in list2):\n\t\treturn False\n\tfor i in range(1,len(list1)):\n\t\tfor j in range(len(list2)):\n\t\t\tif list1[i] in list2[j]:\n\t\t\t\tlist2[j].remove(list1[i])\n\t\t\t\tbreak\n\t\tif list2[j]==[]:\n\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    if len(list1) < len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] not in list2[i]:\n            return False\n    return True", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(outer_list,inner_list):\n    if outer_list == []:\n        return True\n    elif outer_list[0] not in inner_list:\n        return False\n    elif check_subset_list(outer_list[1:],inner_list):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(a,b):\n    # your code here\n    a_list = list(a)\n    b_list = list(b)\n    if len(a_list) < len(b_list):\n        return False\n    else:\n        for i in range(len(a_list)):\n            if a_list[i] not in b_list[i]:\n                return False\n    return True\n\n\n\n# # 3.  Given two strings, a and b, return a list of the words from a that are also in b. (Assume a and b are case insensitive).\n# \"\"\"\n# a = \"The cat in the hat sat on the mat.\"\n# b = \"The dog in the hat sat on the log.\"\n# assert get_common_words([\"The cat in the hat sat on the mat.\", \"The dog in the hat sat on the log.\"]) == [\"cat\", \"sat\"]\n# assert get_common_words([\"A penny for your thoughts.\", \"A penny for your thoughts.\"]) == [\"penny\", \"thoughts\"]\n# assert get_common_words([\"The cat in the hat sat on the mat.\", \"The dog in the hat sat on the log.\"]) == [\"cat\", \"sat\"]\n# assert get_common_words([\"The dog in the hat sat on the log.\", \"The cat in the hat sat on the mat.\"]) == [\"cat\", \"sat\"]\n# assert get_common_words([\"The cat in the hat sat on the mat.\"]) == [\"cat\", \"sat\"]\n# assert get_common_words([\"The dog in the hat sat on the log.\"]) == [\"dog\", \"hat\"]\n# assert get_common_words", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(a,b):\n    if len(a) != len(b):\n        return False\n    for x in a:\n        if x not in b:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(l1,l2):\n    for x in l2:\n        if x not in l1:\n            return False\n        else:\n            l1.remove(x)\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    return all(x in list2 for x in list1)\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(a,b):\n    for i in b:\n        if a not in i:\n            return False\n    return True", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    if isinstance(list1, list):\n        for x in list1:\n            if x not in list2:\n                return False\n            else:\n                # print(list1)\n                if x in list2 and isinstance(list2[x], list):\n                    if not check_subset_list(x, list2[x]):\n                        return False\n                else:\n                    continue\n        return True\n    else:\n        if list1 not in list2:\n            return False\n        else:\n            if isinstance(list2[list1], list):\n                return check_subset_list(list1, list2[list1])\n            else:\n                return False\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_repeated_char(s):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    if not s:\n        return None\n\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    return None", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n    if len(s) < 2:\n        return \"\"\n    else:\n        temp_dict = {}\n        for i in s:\n            if i in temp_dict.keys():\n                return i\n            else:\n                temp_dict[i] = 1\n        return \"\"", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    length = len(str)\n    for i in range(length-1):\n        for j in range(length-1):\n            if str[i] == str[j]:\n                return str[i]\n\n\n#assert first_Repeated_Char(\"Google\") == \"o\"", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(st):\n    # Your code goes here.\n    new_string = list(st)\n    counter = []\n    for i in range(len(new_string)):\n        for j in range(i+1, len(new_string)):\n            if new_string[j] == new_string[i]:\n                counter.append(new_string[j])\n    return counter[0]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(s):\n    d={}\n    for i in range(len(s)):\n        d[s[i]] = s[i]\n    for i in range(len(s)):\n        if s[i] in d:\n            return d[s[i]]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_repeated_char(s):\n    result = \"\"\n    for c in s:\n        if s.count(c) > 1:\n            result = c\n            break\n    return result\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\n# Using Dict \ndef first_Repeated_Char(string):\n    character_dict = {}\n    \n    for char in string:\n        if char in character_dict:\n            return char\n        character_dict[char] = 1\n    return \"\"\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n    # initialize the dictionary\n    dict = dict()\n\n    # loop over the given string\n    for char in s:\n        # if character is already in the dictionary then add 1 to the value\n        if char in dict:\n            dict[char] += 1\n        # if character is not in the dictionary then add it and set the value to 1\n        else:\n            dict[char] = 1\n\n    # loop over the dictionary\n    for key, value in dict.items():\n        # if the value is greater than 1 then return the character\n        if value > 1:\n            return key\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    first_repeated_char = string[0]\n    for char in string[1:]:\n        if char == first_repeated_char:\n            return char\n    return first_repeated_char\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str1):\n    if len(str1) == 1:\n        return str1[0]\n\n    n = 0\n    for i in range(0, len(str1)):\n        n = str1[i:i+1]\n        if str1.count(n) > 1:\n            return str1[i]\n\n    return None\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(num1, num2):\n    return abs(num1-num2)", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a,b):\n\tif a<b:\n\t\ttmp = a\n\t\ta = b\n\t\tb = tmp\n\toperations = 0\n\twhile a<b:\n\t\toperations +=1\n\t\ta = a * 2\n\treturn operations\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x,y):\n    # Write your code here\n    if x>y:\n        return x-y\n    return y-x\n\n#assert min_Operations(2,4) == 1", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(num1, num2):\n    diff = num1 - num2\n    return diff if diff > 0 else 1 + diff\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a, b):\n    \"\"\"\n    Finds the minimum number of operations needed to make a and b equal\n\n    :param a: first number\n    :param b: second number\n    :return: minimum number of operations\n    \"\"\"\n    # Write your code here\n    if a > b:\n        temp = a\n        a = b\n        b = temp\n    num_ops = 0\n    while a != b:\n        if a > b:\n            a = a-b\n            num_ops += 1\n        else:\n            b = b-a\n            num_ops += 1\n    return num_ops", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n# code\ndef min_Operations(a, b):\n    count = 0\n    while (a != b):\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_operations(num1, num2):\n    if num1 == num2:\n        return 0\n    # keep adding the smaller number until it becomes greater than the other\n    while num1 < num2:\n        num1 += num1\n        num2 = num1 - num2\n    return num2\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    return abs(a-b)\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_operations(x,y):\n    if x >= y:\n        return 1\n    elif x < y:\n        return 0\n    else:\n        return x/y\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(data, k):\n    temp = list(data)\n    min_list = temp[:k]\n    max_list = temp[-k:]\n    return min_list, max_list\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(t, k):\n    if k > len(t):\n        raise ValueError(\"k can't be greater than the size of the tuple\")\n    return sorted(t)[0:k], sorted(t, reverse=True)[0:k]", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom typing import Tuple\n\n\ndef extract_min_max(tuple_of_k: Tuple, k: int) -> Tuple:\n    assert k > 0\n    assert type(tuple_of_k) == tuple\n    assert len(tuple_of_k) >= k\n    return tuple(min(tuple_of_k[:k]), max(tuple_of_k[:k]))\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom collections import Counter\n\n\ndef extract_min_max(elements, k):\n    max_elements = Counter(elements).most_common(k)\n    min_elements = Counter(elements).most_common()[-k:]\n    return max_elements + min_elements\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nimport numpy as np\n\n\ndef extract_min_max(data, k):\n    \"\"\"\n    Extract min and max elements from a tuple (data) and return them as a tuple.\n    :param data:\n    :param k:\n    :return:\n    \"\"\"\n    # use numpy\n    return np.max(data[:k]), np.min(data[:k])\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tuple, k):\n    return tuple[0:k], tuple[k:]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tup, k):\n    min_list = []\n    max_list = []\n    for i in tup:\n        if len(min_list) < k:\n            min_list.append(i)\n        else:\n            min_list[0] = min(min_list[0], i)\n            min_list.sort()\n            min_list.pop()\n        if len(max_list) < k:\n            max_list.append(i)\n        else:\n            max_list[0] = max(max_list[0], i)\n            max_list.sort()\n            max_list.pop()\n    return tuple(min_list) + tuple(max_list)\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nimport heapq\n\n\ndef extract_min_max(lst, k):\n    max_heap = []\n    min_heap = []\n    heapq.heapify(min_heap)\n    heapq.heapify(max_heap)\n    for num in lst:\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, num)\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, num)\n        elif num < max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappushpop(max_heap, num)\n    return max_heap, min_heap\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nfrom collections import deque\n\ndef extract_min_max(data, k):\n    '''\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 2)\n    (3, 5, 8, 20)\n    '''\n    result = deque(data)\n    for i in range(k - 2):\n        result.popleft()\n    return result\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tuple, k):\n    max = min = tuple[0]\n    for element in tuple[1:]:\n        if element < min:\n            min = element\n        if element > max:\n            max = element\n    return max, min, min + k, max - k\n\n# extract_min_max([5, 20, 3, 7, 6, 8], 2)\n# [20, 3, 5, 8]"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(text, n):\n    for i in range(n):\n        text = text.replace(\" \",\":\")\n        text = text.replace(\".\",\":\")\n        text = text.replace(\",\",\":\")\n    return text\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str1, n):\n    max_space = str1.count(' ')\n    max_comma = str1.count(',')\n    max_dot = str1.count('.')\n    result = ''\n    if max_space > max_comma:\n        result = result + str1.replace(' ', ':')\n        str1 = str1.replace(' ', '')\n        result = result + str1.replace(',', ':')\n        str1 = str1.replace(',', '')\n        result = result + str1.replace('.', ':')\n        str1 = str1.replace('.', '')\n        result = result + str1\n        return result\n    if max_comma > max_dot:\n        result = result + str1.replace(' ', ':')\n        str1 = str1.replace(' ', '')\n        result = result + str1.replace(',', ':')\n        str1 = str1.replace(',', '')\n        result = result + str1.replace('.', '')\n        str1 = str1.replace('.', ':')\n        result = result + str1\n        return result\n    if max_dot > max_space:\n        result = result + str1.replace(' ', '')\n        str1 = str1.replace(' ', ':')\n        result = result + str1.replace(',', '')\n        str1 = str1.replace(',', ':')\n        result = result + str1.replace('.', '')\n        str1 = str1.replace('.', ':')\n        result = result + str1\n        return result", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(s, n):\n    new_string = ''\n    i = 0\n    while i < len(s):\n        if s[i] == ' ':\n            new_string += ':'*n\n        elif s[i] == ',':\n            new_string += ':'*n\n        elif s[i] == '.':\n            new_string += ':'*n\n        else:\n            new_string += s[i]\n        i+=1\n    return new_string\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string, n):\n    pass", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n    count_space = 0\n    count_comma = 0\n    count_dot = 0\n    result = \"\"\n    for c in string:\n        if c == \" \":\n            count_space = count_space + 1\n            if count_space == n:\n                result = result + ':'\n        elif c == \",\":\n            count_comma = count_comma + 1\n            if count_comma == n:\n                result = result + ':'\n        elif c == \".\":\n            count_dot = count_dot + 1\n            if count_dot == n:\n                result = result + ':'\n        else:\n            result = result + c\n\n    return result\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(s,n):\n    return s.replace(max(s.count(char) for char in ',. '),':')\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(s,n):\n    if n==0:\n        return s\n    elif len(s)==1:\n        return s\n    else:\n        s_set = set(s)\n        i = 0\n        for item in s_set:\n            if item == ' ':\n                s = s.replace(' ',':',i)\n                i += 1\n            elif item == '.':\n                s = s.replace('.',':',i)\n                i += 1\n            elif item == ',':\n                s = s.replace(',',':',i)\n                i += 1\n        return s\n\ndef test_replace_max_specialchar():\n    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    assert replace_max_specialchar('Python language, Programming language.',1)==('Python language, Programming language.')\n    assert replace_max_specialchar('Python language, Programming language.',0)==('Python language, Programming language.')\n    assert replace_max_specialchar('Python language, Programming language.',-1)==('Python language, Programming language.')\n    assert replace_max_specialchar('Python language, Programming language.',10)==('Python language, Programming language.')\n    assert replace_max_specialchar('Python language, Programming language.',-10)==('Python language, Programming language.')\n\ntest_replace_max_specialchar()", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\nimport re\ndef replace_max_specialchar(string, max):\n    special_chars = [\" \",\".\",\",\"]\n    matches = re.findall(r'('+(')|'.join(special_chars)+r')', string)\n    if len(matches) > max:\n        return string[:matches.index(max)+1] + \":\" + string[matches.index(max)+1:]\n    else:\n        return string\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str, n):\n    str = str.replace(\" \", \":\")\n    str = str.replace(\",\", \":\")\n    str = str.replace(\".\", \":\")\n    for i in range(n):\n        if str.count(\",\") > str.count(\".\"):\n            str = str.replace(\",\", \":\")\n        elif str.count(\",\") < str.count(\".\"):\n            str = str.replace(\".\", \":\")\n    return str\n\n#assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(sentence,n):\n    pass\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (l):\n    for i in l:\n        if i%2==0:\n            return i\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(numList):\n    \"\"\"\n    Write a python function to find the first even number in a given list of numbers.\n    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    \"\"\"\n    for item in numList:\n        if item % 2 == 0:\n            return item\n        else:\n            return \"No Even number found\"", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (mylist):\n    for item in mylist:\n        if item%2 == 0:\n            return item\n\n# test", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(my_list):\n    for item in my_list:\n        if item % 2 == 0:\n            return item\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    for i in lst:\n        if i % 2 == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    for i in numbers:\n        if i % 2 == 0:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\n# 1st solution\n\ndef first_even(lst):\n    return min(lst, key=lambda x: x%2 == 0)\n\n# 2nd solution\n\ndef first_even(lst):\n    return next((item for item in lst if item%2==0), None)\n\n# 3rd solution\n\ndef first_even(lst):\n    return next((item for item in lst if item%2==0), None)\n\n# 4th solution\n\ndef first_even(lst):\n    return min(lst, key = lambda x: x % 2 == 0) if lst else None\n\n# 5th solution\n\ndef first_even(lst):\n    return min((i for i in lst if i % 2 == 0), default = None)", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (numbers):\n    \"\"\"\n    Write a python function to find the first even number in a given list of numbers.\n    \"\"\"\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n\n# Use this test to show that your code works", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# list comprehension version\n# def first_even(nums):\n#     return next(x for x in nums if x % 2 == 0)\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (lst):\n    for number in lst:\n        if number % 2 == 0:\n            return number\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if (isinstance(tup[0], int)):\n        for i in range(len(tup)):\n            if (isinstance(tup[i], int)):\n                continue\n            else:\n                return False\n    else:\n        return False\n    return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    for i in tup:\n        if type(i) != type(tup[0]):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    return type(tup[0]) == type(tup[1]) == type(tup[2]) == type(tup[3]) == type(tup[4]) == type(tup[5])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_):\n    for i in tuple_:\n        if type(i) != type(tuple_[0]):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    if isinstance(tup[0],int) and isinstance(tup[-1],str):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    flag = True\n    for x in tup:\n        if type(x) != type(tup[0]):\n            flag = False\n            break\n    return flag\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple_):\n    return True if type(tuple_[0]) == type(tuple_[-1]) else False\n\n#Test case 1 passed", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(aTuple):\n    for i in aTuple:\n        if type(i) != type(aTuple[0]):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    \"\"\"\n    tup: tuple of objects\n    returns: a boolean value True if all objects are same data type else False\n    \"\"\"\n    for element in tup:\n        if isinstance(element, str):\n            if all([isinstance(e, str) for e in tup]):\n                return True\n            else:\n                return False\n        elif isinstance(element, int):\n            if all([isinstance(e, int) for e in tup]):\n                return True\n            else:\n                return False\n        elif isinstance(element, float):\n            if all([isinstance(e, float) for e in tup]):\n                return True\n            else:\n                return False\n        elif isinstance(element, bool):\n            if all([isinstance(e, bool) for e in tup]):\n                return True\n            else:\n                return False\n    else:\n        return False\n\n# print(check_type((5, 6, 7, 3, 5, 6) ))\n# print(check_type((5, 6, 7, 3, \"5\", 6) ))\n\n# Write a function to remove all the duplicate elements from a tuple.", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(elements):\n    return all(type(element) == type(elements[0]) for element in elements)\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, val):\n    \"\"\"\n    :param arr: list of integers\n    :param n: length of list\n    :param val: number to check for majority element\n    :return: boolean\n    \"\"\"\n    counter = 0\n    for i in range(0, n):\n        if arr[i] == val:\n            counter += 1\n        if counter > n // 2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nfrom typing import List\n\n\ndef is_majority(arr: List[int], n: int, k: int) -> bool:\n    res = 0\n    for i in range(n):\n        if arr[i] == k:\n            res += 1\n        if res > n / k:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, elem, major):\n    count = 0\n    for i in arr:\n        if i == elem:\n            count += 1\n        if count == major:\n            return True\n    return False\n\ndef is_majority(arr, elem, major):\n    count = 0\n    for i in arr:\n        if i == elem:\n            count += 1\n    return count > major / 2\n\ndef is_majority(arr, elem, major):\n    return arr.count(elem) > major / 2\n\ndef is_majority(arr, elem, major):\n    index = 0\n    while index < len(arr):\n        if elem == arr[index]:\n            count = 1\n        else:\n            count = 0\n        if count > major / 2:\n            return True\n        index += 1\n    return False\n\ndef is_majority(arr, elem, major):\n    return [elem == x for x in arr].count(True) > major / 2\n\ndef is_majority(arr, elem, major):\n    counter = 0\n    for i in arr:\n        if i == elem:\n            counter += 1\n    return counter > major / 2\n\ndef is_majority(arr, elem, major):\n    counter = 0\n    for i in arr:\n        if i == elem:\n            counter += 1\n        if counter == major:\n            return True\n    return False\n\ndef is_majority(arr, elem, major):\n    count = 0\n    for i in arr:\n        if i == elem:\n            count += 1\n    return count == major", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, num, n):\n    count = 0\n    for i in range(n):\n        if arr[i] == num:\n            count += 1\n    return count > n / 3\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nfrom typing import List\n\n\ndef is_majority(nums: List[int], target: int, majority: int) -> bool:\n    \"\"\"\n    Count number of elements in nums equal to target, if count is greater than majority, return True\n    \"\"\"\n    counter = 0\n    for i in nums:\n        if i == target:\n            counter += 1\n        if counter > majority:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, m):\n    c = 0\n    for i in range(n):\n        if arr[i] == m:\n            c += 1\n    if c > n/2:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if x == i:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\nfrom typing import List, Set, Tuple\n\n\ndef is_majority(arr: List[int], key: int, count: int) -> bool:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    return arr.count(key) > count // 2\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, majority, count):\n    \"\"\"\n    Check for majority in the given array\n    \"\"\"\n    if count >= majority:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, k, val):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            cnt = 1\n            while mid < len(arr) and arr[mid] == val:\n                cnt += 1\n                mid += 1\n            if cnt >= k:\n                return True\n        elif arr[mid] > val:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(number):\n    # Your Code Goes Here\n    return bin(number)[2:].count('1')\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n\tcount = 0\n\twhile n != 0:\n\t\tif (n & 1) == 1:\n\t\t\tcount = count + 1\n\t\tn = n >> 1\n\treturn count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(num):\n    ans = 0\n    while (num > 0):\n        num &= (num - 1)\n        ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    # Your code goes here\n    count = 0\n    while n>0:\n        count+=n%2\n        n = n//2\n    return count", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count = count + 1\n        n = n >> 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(num):\n    return bin(num).count(\"1\")\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(number):\n  count = 0\n  while(number > 0):\n    bit = number & 01\n    if(bit == 1):\n      count = count + 1\n    number = number >> 1\n  return count\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    bits = 0\n    while n:\n        n &= (n-1)\n        bits += 1\n    return bits\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    \"\"\"\n    count set bits in a number\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,s,e):\n    if s > e:\n        return None\n    if s == e:\n        return arr[s]\n    l = s\n    r = e\n    while True:\n        if arr[l] < arr[r]:\n            return arr[l]\n        if r - l == 1:\n            return min(arr[l],arr[r])\n        mid = (r - l) // 2 + l\n        if arr[mid] > arr[l]:\n            l = mid\n        else:\n            r = mid", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,start,end):\n    if end<start:\n        return -1\n    mid = (start+end)/2\n    if mid==0:\n        return arr[mid]\n    elif arr[mid]>arr[mid-1]:\n        if arr[mid]>arr[mid+1]:\n            return arr[mid]\n        else:\n            return find_Min(arr,0,mid)\n    elif arr[mid]<arr[mid-1]:\n        return find_Min(arr,mid,end)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,start,end):\n    if start>=end:\n        return arr[start]\n    mid = (start+end)/2\n    if arr[mid]<arr[start]:\n        return find_Min(arr,start,mid)\n    elif arr[mid]<arr[end]:\n        return find_Min(arr,mid+1,end)\n    else:\n        return arr[start]\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,low,high):\n    if(high-low<=0):\n        return -1\n    mid=(low+high)//2\n    if(arr[mid]>arr[high]):\n        return find_Min(arr,low,mid)\n    else:\n        return arr[mid]\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n    if start >= end:\n        return arr[start]\n    mid = (start + end) // 2\n    if arr[mid] < arr[end]:\n        return arr[mid]\n    else:\n        return find_Min(arr, start, mid)\n        ", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n#Solution 1\ndef find_Min(arr,l,h):\n    if l > h:\n        return None\n    mid = l+(h-l)//2\n    if arr[mid] < arr[l]:\n        return arr[l]\n    elif arr[mid] < arr[h]:\n        return find_Min(arr,l,mid-1)\n    else:\n        return find_Min(arr,mid+1,h)\n\n#Solution 2\ndef find_Min(arr,l,h):\n    if l > h:\n        return None\n    mid = l+(h-l)//2\n    if arr[mid] > arr[l]:\n        return find_Min(arr,mid+1,h)\n    else:\n        return find_Min(arr,l,mid-1)\n\n#Solution 3\ndef find_Min(arr,l,h):\n    if l > h:\n        return None\n    mid = l+(h-l)//2\n    if arr[mid] < arr[h]:\n        return find_Min(arr,l,mid-1)\n    else:\n        return find_Min(arr,mid+1,h)\n\n#Solution 4\ndef find_Min(arr,l,h):\n    if l > h:\n        return None\n    mid = l+(h-l)//2\n    if arr[mid] < arr[l]:\n        return find_Min(arr,mid+1,h)\n    else:\n        return find_Min(arr,l,mid-1)\n\n\n#Solution 5\ndef find_Min(arr,l,h):\n    if l>h:\n        return None\n    mid = l+(h-l)//2\n    if arr[mid] > arr[l]:\n        return find_Min(arr,l,mid-1)\n    else:\n        return find_Min(arr,mid+1,h)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# +\ndef find_Min(arr, start, end):\n    if(end == start):\n        return arr[start]\n    mid = start + (end - start)//2\n    if(arr[mid] > arr[end]):\n        return find_Min(arr, start, mid)\n    else:\n        return find_Min(arr, mid+1, end)\n    ", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, l, h):\n    if h < l:\n        return None\n    mid = l + (h-l)/2\n    if mid == 0 or mid == len(arr)-1:\n        if arr[mid] < arr[mid+1]:\n            return arr[mid]\n        else:\n            return arr[mid+1]\n    else:\n        if arr[mid] < arr[mid-1] and arr[mid] < arr[mid+1]:\n            return arr[mid]\n        elif arr[mid-1] < arr[mid+1] and arr[mid-1] < arr[mid]:\n            return arr[mid-1]\n        else:\n            return arr[mid+1]\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(a,l,r):\n    if r<l:\n        return a[l]\n    mid = l+int(r-l)/2\n    if a[mid] <= a[r]:\n        if a[mid] <= a[l]:\n            return a[mid]\n        elif a[r] <= a[mid]:\n            return a[r]\n    elif a[mid] >= a[l]:\n        return find_Min(a,l,mid)\n    else:\n        return find_Min(a,mid+1,r)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,low,high):\n    if low<high:\n        mid = (low+high)//2\n        if arr[mid] > arr[high]:\n            return find_Min(arr,low,mid)\n        else:\n            return find_Min(arr,mid+1,high)\n    else:\n        return arr[low]\narr = [1,2,3,4,5]\nlow = 0\nhigh = len(arr)-1\nres = find_Min(arr,low,high)"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(st):\n    return ''.join(st[2::2])", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    return \"\".join([s[i] for i in range(1,len(s),2)])\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return ''.join([x for i, x in enumerate(string) if i % 2 == 0])", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return ''.join(c for i, c in enumerate(string) if i % 2 == 0)", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    result = ''\n    for i in range(len(string)):\n        if i%2!=0:\n            result = result+string[i]\n    return result\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n# Method-1\ndef odd_values_string(str):\n    return ''.join([x for i, x in enumerate(str) if i%2==0])\n\n# Method-2\ndef odd_values_string(str):\n    return str[::2]\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return ''.join([i for i, char in enumerate(string, 1) if i % 2 == 1])\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return \"\".join(char for i,char in enumerate(string) if i%2==0)\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return \"\".join(string[i] for i in range(1, len(string), 2))\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    return ''.join(s[::2])\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n\tif a > b and a < c:\n\t\treturn a\n\telif b > a and b < c:\n\t\treturn b\n\telse:\n\t\treturn c\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n# TLE - not optimized\ndef min_of_three(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\n# optimized\ndef min_of_three(a,b,c):\n    ab = min(a,b)\n    ac = min(a,c)\n    bc = min(b,c)\n    if ab == a:\n        return ab if bc < ac else bc\n    if ac == a:\n        return ac if bc < ab else bc\n    if bc == a:\n        return bc if ab < ac else ab\n    if ab == b:\n        return ab if ac < bc else bc\n    if ac == b:\n        return ac if bc < ab else bc\n    if bc == b:\n        return bc if ac < ab else ab\n    if ab == c:\n        return ab if bc < ac else ac\n    if ac == c:\n        return ac if bc < ab else ac\n    if bc == c:\n        return bc if ac < ab else ab\n\n# testing", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    min=a\n    if b < min:\n        min = b\n    if c < min:\n        min = c\n    return min", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(num1, num2, num3):\n    if num1 < num2 and num1 < num3:\n        return num1\n    elif num2 < num3:\n        return num2\n    elif num1 > num2 and num1 > num3:\n        return num1\n    else:\n        return num2\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a<b:\n        if a<c:\n            return a\n        return c\n    if b<c:\n        return b\n    return c\n    ", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x,y,z):\n    if x<=y and x<=z:\n        return x\n    elif y<=x and y<=z:\n        return y\n    elif z<=x and z<=y:\n        return z\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    if b < a and b < c:\n        return b\n    if c < a and c < b:\n        return c\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(n1,n2,n3):\n    if n1<n2 and n1<n3:\n        return n1\n    elif n2<n1 and n2<n3:\n        return n2\n    else:\n        return n3\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    for i in range(start, end+1):\n        if i & (i - 1) != 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    # Write your logic here\n    # set all the bits and do bitwise and with the range to check if any bits are set in the range\n    all_bits_set = (2 ** start - 1)\n    return not all_bits_set & end", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    if end == 0:\n        return True\n    if (start & end) == start:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(start,end&(end-1))", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(x,start,end):\n    for i in range(start,end+1):\n        if(x&i)>0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,a,b):\n    ans = True\n    for i in range(n,a-1,-1):\n        if i & (i-1)==0:\n            ans = False\n            break\n    for i in range(a+1,b+1):\n        if i & (i-1)==0:\n            ans = False\n            break\n    return ans\n\n# \"\"\"\n# Write a python function to find the maximum two number in a given array.\n# assert find_Max_Two_Numbers([5,4,3,2]) == (4,5)\n# assert find_Max_Two_Numbers([1,2,3,4]) == (2,3)\n# \"\"\"\ndef find_Max_Two_Numbers(arr):\n    max1,max2 = -1,-1\n    for i in range(len(arr)):\n        if arr[i]>max1 and arr[i]>max2:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i]>max2:\n            max2 = arr[i]\n    return max1,max2", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    count = 0\n    for i in range(start,end):\n        count = count + 2**i\n    if count == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start_bit,end_bit):\n    if start_bit>end_bit:\n        return False\n    else:\n        for i in range(start_bit,end_bit+1):\n            if (i & i-1) > 0:\n                return False\n        return True\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    result = True\n    for i in range(start, end+1):\n        result &= (i & (i-1)) == 0\n    \n    return result\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n# Test cases:", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    i = start\n    flag = 0\n    while i <= end:\n        if flag == 0:\n            num = bin(i)[2:].zfill(4)\n            flag = 1\n            for j in num:\n                if j == '0':\n                    flag = 0\n            if flag == 0:\n                return False\n        i += 1\n    return True\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    arr.sort()\n    for i in range(n):\n        if arr[i] < 0:\n            for j in range(i, -1, -1):\n                if arr[j] > 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    \"\"\"\n    Re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    \"\"\"\n    neg_index = 0\n    pos_index = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_index], arr[i] = arr[i], arr[neg_index]\n            neg_index += 1\n        else:\n            arr[pos_index], arr[i] = arr[i], arr[pos_index]\n            pos_index += 1\n    return arr", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    neg_indices, pos_indices = [], []\n    for i, num in enumerate(arr):\n        if num < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n    neg_indices.sort()\n    pos_indices.sort()\n    return arr[:len(pos_indices)] + arr[len(pos_indices):][::-1] + arr[len(neg_indices):][:len(neg_indices)][::-1]\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, max_val):\n    # Your code goes here\n    negative_arr = [val for val in arr if val < 0]\n    positive_arr = [val for val in arr if val >= 0]\n\n    return negative_arr + positive_arr[::-1]\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    \"\"\"\n    Re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    \"\"\"\n    for i in range(n):\n        arr[i] = abs(arr[i])\n\n    # now the array has all positive elements on the left side and negative elements on the right side\n    # and we have to reverse the order of the array\n\n    for i in range(0, n - 1, 2):\n        arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, n):\n    '''\n    Input: array - list of integers (can be negative)\n        n - size of array\n    Output: list of integers (can be negative)\n    '''\n    negative_arr = []\n    for i in range(n):\n        if array[i] < 0:\n            negative_arr.append(array[i])\n    for i in range(n):\n        if array[i] >= 0:\n            array[i], negative_arr[i] = negative_arr[i], array[i]\n    return array", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, k):\n    ind = 0\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n            pos.append(arr[ind])\n            ind += 1\n        else:\n            pos.append(i)\n    pos.append(arr[ind])\n    ind += 1\n    for i in neg:\n        arr[ind] = i\n        ind += 1\n    for i in pos:\n        arr[ind] = i\n        ind += 1\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    # Code here\n    def helper(arr, n):\n        if n==0:\n            return\n        for i in range(0,n):\n            if arr[i]<0:\n                break\n        helper(arr[i:],n-i)\n        helper(arr[i:n-i-1:-1],n-i)\n    helper(arr,n)\n    return arr", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n\n    # First we need to remove all the negative numbers.\n    # I have used the index of the element and then checked whether it is negative or positive\n    # then updated the index position accordingly.\n    positive_index = 0\n    negative_index = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[negative_index] = arr[i]\n            negative_index += 1\n        else:\n            arr[positive_index] = arr[i]\n            positive_index += 1\n\n    # Now we will iterate again and insert all the negative numbers.\n    negative_index = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = arr[negative_index]\n            negative_index += 1\n\n    return arr\n\n\n# Calling the function", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, n):\n    \"\"\"\n    :param array: Input array to be rearranged\n    :param n: Size of the array\n    :return: Returns the reordered array\n    \"\"\"\n\n    # Your code here\n    negatives = []\n    positives = []\n\n    for i in range(n):\n        if array[i] < 0:\n            negatives.append(array[i])\n        else:\n            positives.append(array[i])\n\n    return negatives + positives"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str1,char):\n    return str1.replace(\" \",\"\")\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s, char):\n    new_str = \"\"\n    for ch in s:\n        if ch == \" \":\n            new_str += char\n        else:\n            new_str += ch\n    return new_str\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, char):\n    new_str = \"\"\n    for char in str:\n        if char == \" \":\n            new_str += char\n        else:\n            new_str += char\n    return new_str\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, ch):\n    str = str.replace(\" \", ch)\n    return str\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(str_in, char):\n    outstr = str_in.strip()\n    for i in range(0, len(outstr)):\n        if outstr[i]==' ' :\n            outstr = outstr[:i] + char + outstr[i+1:]\n    return outstr\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(my_string,char):\n    print(my_string)\n    my_string = my_string.replace(' ', char)\n    print(my_string)\n    return my_string\n\n\n# +\nmy_string = \" \"\nchar = \"a\"\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, replacement):\n    return str.replace(\" \",\"\", replacement)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(mystr, char=' '):\n    return mystr.replace(' ', char)\n\n#assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, x):\n    return str.replace(\" \",\"x\")\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str,ch):\n\tif str.isspace():\n\t\treturn ch\n\telse:\n\t\treturn str\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(triangle: List[List[int]], level: int) -> int:\n    pass\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nimport math\n\ndef max_sum(triangle, index):\n    result = triangle[0][0]\n    for i in range(index):\n        sum_ = 0\n        for j in range(i, len(triangle)):\n            sum_ += triangle[j][i]\n        result = max(result, sum_)\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, height):\n    def find_max(tri, height, i, j):\n        max_sum = -float(\"inf\")\n        for k in range(i, height):\n            if k == i:\n                max_sum = tri[i][k]\n            else:\n                max_sum = max(max_sum, tri[i][k] + tri[k+1][j])\n        return max_sum\n\n    max_sum = -float(\"inf\")\n    for i in range(len(triangle)):\n        for j in range(i, len(triangle)):\n            max_sum = max(max_sum, find_max(triangle, len(triangle), i, j))\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(matrix, n):\n    \"\"\"\n    :param matrix: a list of lists (with integer elements)\n    :param n: an integer\n    :return: an integer\n    \"\"\"\n    if n == 0:\n        return 0\n    max_sum_helper(matrix, n)\n    return max_sum_helper(matrix, n - 1)\n\ndef max_sum_helper(matrix, i):\n    \"\"\"\n    :param matrix: a list of lists (with integer elements)\n    :param i: an integer\n    :return: an integer\n    \"\"\"\n    if i == 0:\n        return 0\n    max_sum_helper(matrix, i - 1)\n    return max_sum_helper(matrix, i - 2) + max(matrix[i - 1])", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(matrix, n):\n    max_sum = -1\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    for i in range(n):\n        if i == 0:\n            max_sum = max(sum1, sum2, sum3)\n        else:\n            sum1 = max(sum1 + matrix[0][i], sum2)\n            sum2 = max(sum2 + matrix[1][i], sum3)\n            sum3 = max(sum3 + matrix[2][i], sum1)\n            max_sum = max(max_sum, sum1, sum2, sum3)\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(matrix, n):\n    if n <= 1:\n        return matrix[0][0]\n    if n == 2:\n        return matrix[0][0] + matrix[0][1] + matrix[1][0]\n    new_matrix = [[0 for x in range(n - 1)] for x in range(n - 1)]\n    for i in range(n - 1):\n        for j in range(n - 1):\n            new_matrix[i][j] = matrix[i][j + 1] + matrix[i + 1][j] + matrix[i + 1][j + 1]\n    return max_sum(new_matrix, n - 1)", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, row):\n    result = []\n    for i in range(len(triangle)):\n        if i == 0:\n            continue\n        elif i == row:\n            result.append(triangle[i][0])\n        else:\n            for j in range(i - 1):\n                result.append(max(triangle[i][j] + triangle[i-1][j+1], triangle[i][j+1] + triangle[i-1][j]))\n    return max(result)\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nimport math\nfrom typing import List\n\n\ndef max_sum(numbers: List[List[int]], sum_number: int) -> int:\n    if len(numbers) == 0:\n        return 0\n    if len(numbers) == 1:\n        return numbers[0][0]\n\n    if numbers[0][0] > sum_number:\n        return sum_number\n\n    if len(numbers[1]) == 1:\n        return max(numbers[0][0], numbers[1][0])\n\n    if sum_number >= numbers[0][0]:\n        return sum_number\n    elif sum_number >= numbers[0][0] + numbers[1][0]:\n        return max(numbers[0][0], numbers[1][0])\n    else:\n        x = 0\n        y = 0\n        for i in range(1, len(numbers)):\n            x = numbers[i - 1][0]\n            y = numbers[i][0]\n            if x >= sum_number:\n                return sum_number\n            if y >= sum_number:\n                return max(numbers[i][0], numbers[i - 1][0])\n            x_plus_y = x + y\n            if x_plus_y >= sum_number:\n                return sum_number\n            elif x_plus_y >= sum_number:\n                return max(x_plus_y, x)\n        return 0", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(arr, n):\n    if n == 1:\n        return max(arr[0])\n\n    max_sum_from_left_side = [max(arr[0])]\n    max_sum_from_top_side = [max(arr[0])]\n\n    for i in range(1, n):\n        max_sum_from_left_side.append(max(arr[i][0] + max_sum_from_left_side[-1], arr[i][1] + max_sum_from_top_side[-1]))\n        max_sum_from_top_side.append(max(arr[i][1] + max_sum_from_top_side[-1], arr[i][2] + max_sum_from_left_side[-1]))\n\n    return max(max_sum_from_left_side[-1], max_sum_from_top_side[-1])\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(a, n):\n    a.sort(reverse=True)\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[1] + a[0]\n    if n == 3:\n        return a[2] + a[1] + a[0]\n    res = 0\n    s = a[1] + a[0]\n    for i in range(1, n - 2):\n        s = s + a[i + 2]\n        res = max(res, s)\n    return res\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(dataset,n):\n    return sorted(dataset,reverse=True)[0:n]\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(nums,n):\n    return sorted(nums)[-n:]\n\n\n#test", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(l,n):\n    # Write your code here\n    if n>len(l):\n        return l[::-1]\n    a=l[:n]\n    a.sort()\n    return a\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset,n):\n    dataset=sorted(dataset)\n    return dataset[-n:]\n\n\ndef test():\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\ntest()", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(li,n):\n    \"\"\"\n    input: list of numbers\n    output: list of the n largest numbers\n    \"\"\"\n    li.sort()\n    return li[-n:]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(L,n):\n    # key to sort by\n    def mykey(L):\n        return L[1]\n    # sort L by mykey\n    L.sort(key=mykey)\n    # make a list of the largest n items\n    return L[0:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(dataset,n):\n    assert len(dataset)>=n,\"The dataset should have at least n items\"\n    larg_nnum = []\n    for i in range(n):\n        larg_nnum.append(max(dataset))\n        dataset.remove(max(dataset))\n    return larg_nnum\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset,n):\n    return [sorted(dataset)[-n]]\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(data, n):\n    # YOUR CODE HERE\n    data=np.sort(data)\n    larg_data=data[-n:]\n    return larg_data", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(num_list,n):\n    return [sorted(num_list)[-n]]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n#Solution\ndef lateralsurface_cylinder(radius,height):\n    surface_area = 2*pi*radius*height\n    return surface_area\n\n#Testing", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius,height):\n    return (2*radius)*(2*math.pi*height)", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(radius,height):\n    # Write your code here.\n    if radius <= 0 or height <= 0:\n        return 0\n    return (2*radius*height) + (4*math.pi*radius**2)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius,height):\n\tpi=3.14159\n\treturn 2*pi*radius*(radius+height)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius,height):\n    area = 2*pi*radius*height+pi*radius**2\n    return area\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius, length):\n    return 2*radius*length+2*radius*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\nfrom math import pi\ndef lateralsurface_cylinder(radius,height):\n    return pi * radius**2 + pi * radius * height\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius, height):\n    return 2*radius*height + pi*radius**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n    return 2*pi*r*h + 2*pi*r**2", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n    return 2*pi*r**2+2*pi*r*h"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side**3\n\n#assert volume_cube(3)==27\n#print(volume_cube(3))\n#assert volume_cube(2)==8\n#assert volume_cube(1)==1\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(x):\n    return x**3\n\n#assert volume_cube(3)==27\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(l):\n    return l**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(x):\n    return x**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(a):\n    return a**3", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(x):\n    # your code goes here\n    volume = x**3\n    return volume\n\n#test cases", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(x):\n    \"\"\"\n    Calculates the volume of a cube.\n    :param x: the value of the side\n    :return: volume of a cube\n    \"\"\"\n    return x**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\n# +", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(x):\n    return x ** 3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    return number & -number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    \"\"\"\n    Set all the even bits of the number passed to the function to 1.\n    \"\"\"\n    pass", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    return n & 1\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    return num & (num - 1)\n\ndef even_bit_set_number(num):\n    return num & 15\n\ndef even_bit_set_number(num):\n    return num & 0xF\n\ndef even_bit_set_number(num):\n    return num & 0b1111\n\ndef even_bit_set_number(num):\n    return num & 0xFF\n\ndef even_bit_set_number(num):\n    return num & 0b00001111\n\ndef even_bit_set_number(num):\n    return num & 0xFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFF\n\ndef even_bit_set_number(num):\n    return num & 0b11111111\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFFFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFFFFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFFFFFFFFFF\n\ndef even_bit_set_number(num):\n    return num & 0xFFFFFFFFFFFFFFF\n\ndef even", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    n &= ~(n-1)\n    return n\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    mask = 1<<4\n    num = num & mask\n    return num\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\nimport sys\ndef even_bit_set_number(n):\n    result = n & 1\n    if result != 0:\n        n = n + n\n    return n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    return n & 10\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    return number & 0xaaaaaaaa\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    assert n>=0\n    x = n\n    while x > 0:\n        x = x & (x - 1)\n    return x"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n,m):\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if abs(i-j) == abs(i-k) == abs(j-k) and i + j + k == n:\n                    ans+=1\n    return ans", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n,r):\n\tif(n<1):\n\t\treturn 0\n\ta = r * (n/2)\n\tb = n*r * (n/2)\n\tif(a%2 != b%2):\n\t\treturn 0\n\treturn (a+b) // 2\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\nimport math\n\ndef No_of_Triangle(n,m):\n    return math.floor((n*math.sqrt(3)/2)*((m+1)*(m+2))/2)\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n, x):\n    \n    if n == 2:\n        return 0\n    else:\n        return (No_of_Triangle(n-1,x) + No_of_Triangle(n-1,n-x-1))*x//2\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a, b):\n    if a < 1 or b < 1:\n        return 0\n    if a == b or a == b+1 or b == a+1:\n        return 1\n    if a == b and b != 1:\n        return 2\n    No_Of_Triangle = 1\n    while No_Of_Triangle <= a:\n        if a % 2 == 0:\n            a = a // 2\n        else:\n            a = a * 3 + 1\n            No_Of_Triangle += 1\n    return No_Of_Triangle\n\n#Solution 2\n\ndef No_of_Triangle(a, b):\n    if a < 1 or b < 1:\n        return 0\n    if a == b or a == b+1 or b == a+1:\n        return 1\n    No_Of_Triangle = 1\n    while No_Of_Triangle <= a:\n        if a % 2 == 0:\n            a = a // 2\n        else:\n            a = a * 3 + 1\n            No_Of_Triangle += 1\n    return No_Of_Triangle\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(N,R):\n    # Your code goes here.\n    if N<3 or R<1:\n        return 0\n    else:\n        n=1\n        while n<N:\n            n=n+1\n            if n%2==0 and n%2!=0:\n                if (n-R)**0.5==int((n-R)**0.5):\n                    return n+n-R\n        return n+n-R", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(N,L):\n    N-=1\n    L-=1\n    if N<=0 or L<=0:\n        return 0\n    return No_of_Triangle(N-1,L)+No_of_Triangle(N-1,L-1)+No_of_Triangle(N-2,L-1)+No_of_Triangle(N-1,L-2)\n#\nN=int(input(\"Enter the number of sides of the triangle:\"))\nL=int(input(\"Enter the length of side 1:\"))", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(s,n):\n    l = len(n)\n    if l == 1:\n        return n[0]\n    elif l == 2:\n        return n[0] + n[1]\n    elif l == 3:\n        return n[0] + n[1] + n[2]\n    else:\n        return n[0] + n[1] + n[2] + No_of_Triangle(s-3,n[3:])", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(side, base):\n    n = 0\n    while side > 0:\n        if side >= base:\n            n = n + 1\n            side = side - base\n        else:\n            side = 0\n    return n\n\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    result = {}\n    for i in range(0, len(tuples)):\n        if (tuples[i][0] in result):\n            result[tuples[i][0]].append(tuples[i])\n        else:\n            result[tuples[i][0]] = [tuples[i]]\n    return result\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef check_occurences(times: list[tuple[int, int]]) -> Dict[tuple, int]:\n    occurences = defaultdict(int)\n    for a, b in times:\n        occurences[(a, b)] += 1\n    return occurences\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    \"\"\"\n    tuples: a list of tuples\n    returns: a dictionary with the number of occurrences for each tuple of tuples\n    \"\"\"\n    dictionary = {}\n    for tuple in tuples:\n        if tuple in dictionary:\n            dictionary[tuple] += 1\n        else:\n            dictionary[tuple] = 1\n    return dictionary\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    result = {}\n    for t in tuples:\n        if t[0] in result:\n            result[t[0]] += 1\n        else:\n            result[t[0]] = 1\n\n        if t[1] in result:\n            result[t[1]] += 1\n        else:\n            result[t[1]] = 1\n\n    for k, v in result.items():\n        if v > 1:\n            result[k] = v-1\n\n    return result", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n# Your solution goes here.\ndef check_occurences(a):\n    result = {}\n    for x in a:\n        for y in a:\n            if x[0] == y[0] and x[1] == y[1]:\n                result[(x[0],x[1])] = result.get((x[0],x[1]),0) + 1\n                break\n    return result\n\n#print(check_occurences([(1, 3), (2, 5), (3, 6), (5, 2), (6, 3)]))\n#print(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]))\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    res = {}\n    for t in tuples:\n        for key in t:\n            if key in res:\n                res[key] = res[key] + 1\n            else:\n                res[key] = 1\n    return res\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(data):\n    d = {}\n    for item in data:\n        if item in d.keys():\n            d[item] = d[item] + 1\n        else:\n            d[item] = 1\n    return d\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(l):\n    #create dictionary\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuple_list):\n    #assert tuple_list != []\n    list_dict = {}\n    for tuple_item in tuple_list:\n        if tuple_item in list_dict.keys():\n            list_dict[tuple_item] += 1\n        else:\n            list_dict[tuple_item] = 1\n    return list_dict\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    seen = {}\n    output = {}\n    for (x1,x2) in tuples:\n        if (x1,x2) not in seen:\n            seen[(x1,x2)] = 0\n            seen[(x2,x1)] = 0\n        seen[(x1,x2)] += 1\n        seen[(x2,x1)] += 1\n    for (x1,x2) in seen:\n        if (x1,x2) in output:\n            output[(x1,x2)] += seen[(x1,x2)]\n        else:\n            output[(x1,x2)] = seen[(x1,x2)]\n    return output\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    return len(s) * (len(s) - 1) // 2\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nfrom typing import List\n\n\ndef number_of_substrings(str: str) -> int:\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(i, n + 1):\n            dp[i][j] = dp[i + 1][j - 1] + 1 if str[i] == str[j - 1] else 0\n    return sum(dp[0])\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    return len(list(filter(lambda s: s, string)))\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    num_substrings = 0\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if i != j and string[i:j+1] != \"\":\n                num_substrings += 1\n    return num_substrings\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1] != \"\":\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n# https://www.geeksforgeeks.org/program-find-count-non-empty-substrings-string/\n# https://www.geeksforgeeks.org/print-number-substrings-given-string/\n\n\ndef number_of_substrings(str):\n    if not str:\n        return 0\n\n    l = len(str)\n\n    count = 0\n    start = 0\n    for i in range(l):\n        if i != start and str[i] == str[start]:\n            start = i + 1\n\n        count += (i - start + 1)\n\n    return count\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    res = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if len(s[i:j+1]) > 0:\n                res += 1\n    return res\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    count=0\n    n = len(string)\n    for i in range(n):\n        if i<n-1:\n            if string[i] == string[i+1]:\n                count += 1\n    return count", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(st):\n\n    count = 0\n\n    for i in range(len(st)):\n        for j in range(len(st)):\n            if(i == j):\n                continue\n            else:\n                count += 1\n                if(st[i:j+1] != ''):\n                    count += 1\n\n    return count", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    return len(s) * (len(s) - 1) // 2\n\ndef test_number_of_substrings():\n    assert number_of_substrings(\"abc\") == 6\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        n_1 = get_total_number_of_sequences(n-1, m)\n        n_2 = get_total_number_of_sequences(n-2, m)\n        return n_1 + n_2 + (n-1)*(n-2) // 2\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    total_sequences = 0\n    sequence = [1]\n    for i in range(1, n - 1):\n        for j in range(sequence[i - 1], m):\n            sequence.append(j)\n        sequence.append(m)\n        total_sequences += len(sequence[i:i + 2])\n    return total_sequences\n\n# Test", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m + 1\n    else:\n        return get_total_number_of_sequences(n-1, m) + get_total_number_of_sequences(n-2, 2*n-1)", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    Time complexity: O(2^(n-1))\n    Space complexity: O(2^(n-1))\n    :param n: int\n    :param m: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    result = 0\n    for i in range(1, m + 1):\n        result += get_total_number_of_sequences(n - 1, i - 1)\n    return result", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n: int, m: int) -> int:\n    if n == 0 or m == 0:\n        return 1\n    elif n == 1:\n        return 1 if m >= 1 else 0\n    elif n == 2:\n        return 1 if m >= 2 else 0\n    else:\n        total_number = 0\n        for i in range(1, min(m, n)):\n            total_number += get_total_number_of_sequences(n-1, m-i)\n        return total_number\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if m >= n:\n        return 0\n\n    total_number_of_sequences = 0\n\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            if i == j:\n                continue\n            for k in range(j, m+1):\n                if k == j or k == i:\n                    continue\n                total_number_of_sequences += get_total_number_of_sequences(n-i, k)\n\n    return total_number_of_sequences\n\n# assert get_total_number_of_sequences(5, 10) == 10\n# assert get_total_number_of_sequences(5, 9) == 9\n# assert get_total_number_of_sequences(5, 8) == 8\n# assert get_total_number_of_sequences(5, 7) == 7\n# assert get_total_number_of_sequences(5, 6) == 6\n# assert get_total_number_of_sequences(5, 5) == 5\n# assert get_total_number_of_sequences(5, 4) == 4\n# assert get_total_number_of_sequences(5, 3) == 3\n# assert get_total_number_of_sequences(5, 2) == 2\n# assert get_total_number_of_sequences(5, 1) == 1\n# assert get_total_number_of_sequences(5, 0) == 0\n# assert get_total_number_of_sequences(4, 10) == 10\n# assert get_total_number_of_sequences(4, 9) == 9\n# assert get_total_number_of_sequences(4, 8) == ", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        if m == 4:\n            return 2\n        if m < 4:\n            return 1\n    elif m == 4:\n        if n % 2 == 1:\n            return 2\n        else:\n            return 1\n    elif m < 4:\n        return get_total_number_of_sequences(n-1, 4) + get_total_number_of_sequences(n-2, m)\n    else:\n        return 0\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n\t\"\"\"\n\t>>> get_total_number_of_sequences(10, 4)\n\t4\n\t>>> get_total_number_of_sequences(1, 4)\n\t0\n\t>>> get_total_number_of_sequences(2, 4)\n\t0\n\t>>> get_total_number_of_sequences(3, 4)\n\t0\n\t>>> get_total_number_of_sequences(4, 4)\n\t1\n\t>>> get_total_number_of_sequences(5, 4)\n\t3\n\t>>> get_total_number_of_sequences(6, 4)\n\t7\n\t>>> get_total_number_of_sequences(7, 4)\n\t15\n\t>>> get_total_number_of_sequences(8, 4)\n\t31\n\t>>> get_total_number_of_sequences(9, 4)\n\t63\n\t>>> get_total_number_of_sequences(10, 4)\n\t127\n\t>>> get_total_number_of_sequences(11, 4)\n\t255\n\t>>> get_total_number_of_sequences(12, 4)\n\t511\n\t\"\"\"\n\tif n < 1:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 0\n\tif n == 3:\n\t\treturn 0\n\tif n == 4:\n\t\treturn 1\n\t# return get_total_number_of_sequences(n-1, m) + get_total_number_of_sequences(n-2, m) + get_total_number_of_sequences(n-3, m) + get_total_number_of_sequences(n-4, m)\n\tresult = 0\n\tfor i in range(4, n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    :param n: int, length of sequence\n    :param m: int, max value for sequence\n    :return: int, total number of sequences\n    \"\"\"\n    return ((m - 1) // 2) ** n\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\nfrom typing import List, Union\n\ndef get_total_number_of_sequences(n: int, m: Union[int, float]) -> int:\n    \"\"\"\n    Args:\n        n: int\n            length of the sequence.\n        m: Union[int, float]\n            the max difference between two elements.\n    Returns:\n        int: total number of sequences.\n    \"\"\"\n    if n == 0 or m < 0:\n        return 0\n    sequences = 0\n    # for k in range(1, n + 1):\n    #     for j in range(1, k + 1):\n    #         sequences += j * (k - 1) * (k - 2) ** (j - 1) * (n - j) ** (k - j)\n    # return sequences\n    if m < 2:\n        return n\n    sequences = 1\n    for i in range(1, n):\n        if i == 0:\n            continue\n        j = 0\n        while m >= 2 and j < i:\n            m -= 2\n            j += 1\n        sequences += i * get_total_number_of_sequences(i - j - 1, m)\n    return sequences"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(old_list, new_list):\n    \"\"\"\n    Replace the last element of the list with new_list\n\n    Args:\n        old_list (list): list to be changed\n        new_list (list): new list\n\n    Returns:\n        new_list (list): new list with last element replaced\n    \"\"\"\n    new_list.append(old_list.pop())\n    return new_list\n\n\n# Tests\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1,list2):\n    list1[len(list1)-1]=list2\n    return list1\n#Test", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list, new_list):\n    \"\"\"\n    :param list: a list of integers\n    :param new_list: a list of integers\n    :return: the new list\n    \"\"\"\n    list.pop()\n    list.extend(new_list)\n    return list\n\n\ndef replace_list_v2(list, new_list):\n    \"\"\"\n    :param list: a list of integers\n    :param new_list: a list of integers\n    :return: the new list\n    \"\"\"\n    list[-1] = new_list\n    return list\n\n\ndef replace_list_v3(list, new_list):\n    \"\"\"\n    :param list: a list of integers\n    :param new_list: a list of integers\n    :return: the new list\n    \"\"\"\n    list[-1:] = new_list\n    return list\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list_to_modify,new_list):\n    if len(new_list)<=len(list_to_modify):\n        for i in range(len(list_to_modify)-len(new_list)):\n            new_list.append(list_to_modify[-1])\n    else:\n        for i in range(len(new_list)-len(list_to_modify)):\n            del list_to_modify[-1]\n    for i in range(len(new_list)):\n        list_to_modify.append(new_list[i])\n    return list_to_modify", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst,new_list):\n    lst[-1] = new_list\n\n# Tests", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list, new_list):\n    new_list.append(list.pop())\n    return list\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, replace_me):\n    lst[-1] = replace_me\n    return lst\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, new_lst):\n    return lst[:-1] + new_lst", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(a, b):\n    a[len(a)-1] = b\n    return a\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(l,c):\n    l.pop()\n    l.extend(c)\n    return l\n\nl = [1, 3, 5, 7, 9, 10]\nc = [2, 4, 6, 8]"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(x,y,z):\n    return [['*' for i in range(x)] for j in range(y)]\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(a,b,c):\n    return [['*' for x in range(c)] for x in range(b)]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows,cols,depth):\n    return [[['*'] * cols] * rows] * depth\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(n, m, k):\n    arr = [[['*' for i in range(k)] for j in range(m)] for i in range(n)]\n    return arr\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows,cols,depths):\n    array3d=[]\n    for i in range(0,depths):\n        array=[]\n        for j in range(0,rows):\n            array2d=[]\n            for k in range(0,cols):\n                array2d.append(\"*\")\n            array.append(array2d)\n        array3d.append(array)\n    return array3d", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(m, n, p):\n    r = []\n    for i in range(m):\n        r.append(['*']*n)\n    for i in range(p):\n        r[i] = ['*']*n\n    return r\n\ndef array_3d_v2(m, n, p):\n    return [['*'*n for i in range(m)] for i in range(p)]\n\ndef array_3d_v3(m, n, p):\n    return [['*'*n for j in range(m)] for i in range(p)]\n\ndef array_3d_v4(m, n, p):\n    return [['*'*n for j in range(m)] for j in range(p)]\n\ndef test():\n    assert array_3d(1,1,1)==['*']\n    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    assert array_3d_v2(6,4,3)==[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]\n    assert array_3d_v3(6,4,3)==[['*', '*',", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(x, y, z):\n    return [[['*' for i in range(y)] for j in range(x)] for k in range(z)]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(i, j, k):\n    return [[['*' for x in range(i)] for x in range(j)] for x in range(k)]\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(i,j,k):\n    return [['*']*i]*j\n\n#test code", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(a, b, c):\n    result = [[\"*\" for x in range(c)] for x in range(b)]\n    for y in range(b):\n        for x in range(a):\n            result[y][x] = \"*\"\n    return result"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    count=0\n    for i in str:\n        count+=1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    count = 0\n    for i in str:\n        count += 1\n    return count\n\n\n# test", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for letter in string:\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str):\n    return len(str)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    \"\"\"\n    >>> count_charac(\"python programming\")\n    18\n    >>> count_charac(\"Hello world\")\n    13\n    \"\"\"\n    return len(string)\n\ndef test_count_charac():\n    string = \"python programming\"\n    assert count_charac(string) == 18, f'count_charac({string}) != 18'\n    string = \"Hello world\"\n    assert count_charac(string) == 13, f'count_charac({string}) != 13'\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    char_count = 0\n    for char in string:\n        char_count+=1\n    return char_count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for i in string:\n        count+=1\n    return count\n\n#print(count_charac(\"python programming\"))"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(l):\n    l.sort(key = lambda x: x[0])\n    return l\n\n# assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(data):\n  return sorted(data, key=lambda x: (x[0], x[0] == x[0]))\n\n# Test Function", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(list_of_tuples):\n    list_of_tuples.sort(key=lambda x: x[0])\n    for i in range(len(list_of_tuples)):\n        if list_of_tuples[i][0] == list_of_tuples[i-1][0]:\n            list_of_tuples[i] = (list_of_tuples[i][0], list_of_tuples[i-1][1], list_of_tuples[i][2], list_of_tuples[i-1][3])\n            list_of_tuples.pop(i-1)\n    return list_of_tuples\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(L):\n    # get a dictionary, key=element, value=list of indices of that element\n    E = defaultdict(list)\n    for i, (x, y) in enumerate(L):\n        E[x].append((i, y))\n\n    # Sorting by key=index of first element\n    def cmp(a, b):\n        x = E[a[0]][b[0]]\n        y = E[a[1]][b[1]]\n        if x[0] > y[0]:\n            return -1\n        elif x[0] < y[0]:\n            return 1\n        else:\n            return 0\n\n    return sorted(L, cmp)\n\n# assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(l):\n    occurence = {}\n    for element in l:\n        occurence[element[0]] = occurence.get(element[0], 0) + 1\n    for index, element in enumerate(l):\n        while occurence[element[0]] > index:\n            element = l[index]\n            element = (element[0], element[1], l[index+1][1], element[3])\n            l[index] = element\n            index += 1\n            occurence[element[0]] -= 1\n    return l\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n\tsorted_list = sorted(lst, key=lambda tup: tup[0])\n\treturn sorted_list\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(tup_list):\n    new_list = []\n    dict_of_occurences = {}\n    for tup in tup_list:\n        key = tup[0]\n        if key in dict_of_occurences:\n            dict_of_occurences[key].append(tup)\n        else:\n            dict_of_occurences[key] = [tup]\n\n    for key in sorted(dict_of_occurences, key=lambda k: len(dict_of_occurences[k])):\n        new_list.extend(dict_of_occurences[key])\n\n    return new_list\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(list_of_tuples):\n    # create a dictionary with list of tuples as keys and value as 1\n    dict_of_tuples = {}\n    for tuple_ in list_of_tuples:\n        if tuple_[0] in dict_of_tuples:\n            dict_of_tuples[tuple_[0]] += 1\n        else:\n            dict_of_tuples[tuple_[0]] = 1\n    # sort list of tuples by value in ascending order\n    sorted_list_of_tuples = sorted(list_of_tuples, key=lambda tuple_: (tuple_[0], -tuple_[1]), reverse=False)\n    # return the list of tuples after sorting\n    return sorted_list_of_tuples", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(l):\n    if l == []:\n        return l\n\n    l1 = [x[0] for x in l]\n    l1 = list(set(l1))\n    l1.sort()\n\n    l2 = []\n\n    for i in l1:\n        a = [x for x in l if x[0] == i]\n        a.sort(key=lambda x: x[2])\n        l2.append(a)\n\n    l3 = []\n    for i in l2:\n        l3.extend(i)\n    l3.sort()\n\n    return l3", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(alist):\n    return [sorted([item for item in alist if item[0] == key], key=itemgetter(1))[::-1] for key in set(itemgetter(0), key=itemgetter(1))[::-1]]\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    # Check if n is a perfect square\n    if (n**0.5) % 1 == 0:\n        return n+1\n    else:\n        return ((n**0.5)+1)**2\n\n\n# ## 100. Merge Two Sorted Arrays\n# Write a python program to merge two sorted integer arrays into a new sorted integer array.", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(x):\n    while x**0.5 < x:\n        x += 1\n    return x\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    \"\"\"Find the next perfect square number greater than the given number.\n    Args:\n        num (int): Given number.\n    Returns:\n        int: Next perfect square number greater than the given number.\n    Raises:\n        ValueError: if the given number is not positive.\n    Example:\n        >>> next_Perfect_Square(35)\n        36\n        >>> next_Perfect_Square(5)\n        16\n        >>> next_Perfect_Square(-2)\n        Traceback (most recent call last):\n            ...\n        ValueError: num must be a positive integer\n        >>> next_Perfect_Square(0)\n        Traceback (most recent call last):\n            ...\n        ValueError: num must be a positive integer\n    \"\"\"\n    if num < 1:\n        raise ValueError('num must be a positive integer')\n\n    sq = num\n    while sq * sq <= num:\n        sq = sq + 1\n    return sq\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    l = 1\n    r = n\n    while l < r:\n        mid = (l + r) / 2\n        if mid * mid == n:\n            return mid + 1\n        elif mid * mid > n:\n            r = mid\n        else:\n            l = mid + 1\n    return l", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n#test1\n\ndef next_Perfect_Square(num):\n    l=1\n    while(l<num):\n        if(l*l==num):\n            return l*l\n        l+=1\n    return l*l\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(num):\n    if num >= 4:\n        while True:\n            n = num+1\n            if isPerfectSquare(n):\n                return n\n            else:\n                num = n\n    else:\n        return num + 1\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    if n == 1:\n        return 4\n    for i in range(int(n**0.5)+1, 0, -1):\n        if n%i == 0:\n            return i**2+n//i\n    return i**2\n\n# \"\"\"\n# Write a python function to find the number of times the string 'Hi' occurs in the given string 'Hello Hi Hi'.\n# assert count_occurrence_string('Hello Hi Hi', 'Hi') == 2\n# \"\"\"\ndef count_occurrence_string(s, sub):\n    if sub == '':\n        return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len(sub)] == sub:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(num):\n    # Write your code here.\n    c=num\n    while c<=1:\n        c+=1\n    while c<=num:\n        c+=1\n        if is_Perfect_Square(c):\n            return c\n        c-=1\n    return num\n\ndef is_Perfect_Square(num):\n    c=num\n    while c>0:\n        s=c**(1/2)\n        if s**2==c:\n            return True\n        c-=s**2\n    return False", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    if (n % 4 == 3):\n        n += 2\n    else:\n        n += 4\n    if (n % 16 == 15):\n        n += 2\n    else:\n        n += 4\n    if (n % 256 == 255):\n        n += 2\n    else:\n        n += 4\n    if (n % 65536 == 65535):\n        n += 2\n    else:\n        n += 4\n    if (n % 4294967296 == 4294967295):\n        n += 2\n    else:\n        n += 4\n    if (n % 18446744073709551615 == 18446744073709551614):\n        n += 2\n    else:\n        n += 4\n    return n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(a, max_len):\n    max_i = 0\n    max_sum = 0\n    # index of the last element in the sequence\n    for i in xrange(max_len):\n        # a list of the indexes of the last element of each sequence\n        sub_seq = []\n        j = i\n        sum = 0\n        while j < max_len:\n            sum += a[j]\n            j += 1\n            if j == max_len:\n                break\n            if sum < max_sum:\n                sub_seq = []\n            else:\n                sub_seq.append(j)\n                sum -= a[sub_seq[-2]]\n        if sum > max_sum:\n            max_sum = sum\n            max_i = i\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(nums: List[int], n: int) -> int:\n    \"\"\"\n    Calculate maximum sum of bi-tonic sub-sequence for the given array.\n    Parameters\n    ----------\n    nums : list\n        given array\n    n : int\n        length of the given array\n    Returns\n    -------\n    max_sum : int\n        maximum sum of bi-tonic sub-sequence\n    \"\"\"\n    nums = nums[:n]\n    max_sum = nums[0]\n    for index in range(n - 1):\n        if nums[index] < nums[index + 1]:\n            max_sum = max(max_sum, nums[index] + nums[index + 1])\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(arr: List[int], n: int) -> int:\n    \"\"\"\n    Time complexity: O(N^2)\n    Space complexity: O(N)\n    \"\"\"\n    # Sort the given array in ascending order\n    arr.sort()\n    result = 0\n    # Use a variable to store the maximum sum of bi-tonic sub-sequence ending at index i\n    max_sum = 0\n    for i in range(n):\n        # Initialize a variable to store the maximum sum of bi-tonic sub-sequence ending at index j\n        max_sum = 0\n        # Find the maximum sum of bi-tonic sub-sequence ending at index j\n        for j in range(i, n):\n            # If the current sub-sequence is bi-tonic\n            if (arr[i] < arr[j]) and (arr[j] - arr[i] > max_sum):\n                # Update the maximum sum of bi-tonic sub-sequence\n                max_sum = arr[j] - arr[i]\n            # Update result\n            result = max(result, max_sum + arr[i])\n    return result\n\n\ndef max_sum_bis(arr: List[int], n: int) -> int:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(N)\n    \"\"\"\n    # Sort the given array in ascending order\n    arr.sort()\n    result = 0\n    # Initialize a variable to store the maximum sum of bi-tonic sub-sequence ending at index j\n    max_sum = 0\n    for i in range(n):\n        # Find the maximum sum of bi-tonic sub-sequence ending at index j\n        for j in range(i + 1, n):\n            # If the current sub-sequence is bi-tonic\n            if (arr[i] < arr[j]) and (arr[j] - arr[i] > max_sum):\n                # Update the maximum sum of bi-tonic sub-sequence\n                max_sum", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    # Write your code here.\n    left, right = 0, 0\n    max_sum = 0\n    while right < n:\n        sum = 0\n        right_next = right + 1\n        while right_next < n:\n            if arr[right] > arr[right_next]:\n                right_next = right + 1\n                break\n            sum += arr[right_next]\n            right_next += 1\n        right += 1\n        left = right - 1\n        right_next = right + 1\n        while right_next < n:\n            if arr[right] < arr[right_next]:\n                right_next = right + 1\n                break\n            sum += arr[right_next]\n            right_next += 1\n        right += 1\n        max_sum = max(max_sum, sum)\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(array, max_num):\n    max_sum = 0\n    array.sort()\n    start = 0\n    for i in range(len(array)):\n        while i > start and array[i] <= array[i - 1] * 2:\n            start += 1\n        max_sum = max(max_sum, array[i] - start)\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n\t# Write your code here\n\t# use two pointers to find the maximum sum\n\tmax_sum = arr[0]\n\tmax_sum_left = arr[0]\n\tmax_sum_right = arr[0]\n\tfor i in range(1, n):\n\t\tmax_sum_left = max(arr[i], max_sum_left + arr[i])\n\t\tmax_sum_right = max(arr[n-1-i], max_sum_right + arr[n-1-i])\n\t\tmax_sum = max(max_sum, max_sum_left + max_sum_right)\n\n\treturn max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    \"\"\"\n    :param arr: Given array of n numbers\n    :param n: Length of the array\n    :return: Maximum sum of bi-tonic sub-sequence\n    \"\"\"\n\n    # Finding maximum sum of each bi-tonic sub-sequence\n    max_sum_arr = [0 for _ in range(n)]\n\n    for i in range(n - 1):\n        max_sum_arr[i] = max(arr[i], arr[i + 1])\n\n    # Max sum of all bi-tonic sub-sequences\n    max_sum_so_far = max(max_sum_arr)\n\n    # Finding maximum sum of bi-tonic sub-sequences in an array of n numbers\n    for i in range(n - 2):\n        j = i + 2\n        max_sum_so_far = max(max_sum_so_far, max_sum_arr[i] + max_sum_arr[j])\n\n    return max_sum_so_far\n\n\ndef main():\n    print(\"Maximum sum of bi-tonic sub-sequence is \",\n          max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9))\n    print(\"Maximum sum of bi-tonic sub-sequence is \",\n          max_sum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10))\n    print(\"Maximum sum of bi-tonic sub-sequence is \",\n          max_sum([5, 3, 1, 4, 2], 4))\n    print(\"Maximum sum of bi-tonic sub-sequence is \",\n          max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n\n\nmain()\n\n\n#", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(arr: List[int], n: int) -> int:\n    \"\"\"\n    T: O(n) and S: O(1)\n    :param arr: the array\n    :param n: the length of the array\n    :return: the max sum of bi-tonic sub-sequence\n    \"\"\"\n    max_sum_ = arr[0]\n    min_sum_ = arr[0]\n    max_length = 1\n    min_length = 1\n    for i in range(1, n):\n        max_sum_ = max(max_sum_, arr[i])\n        min_sum_ = min(min_sum_, arr[i])\n        if max_sum_ == arr[i]:\n            max_length += 1\n        if min_sum_ == arr[i]:\n            min_length += 1\n    return min_length * max_sum_\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom collections import deque\nfrom typing import List\n\n\ndef max_sum(arr: List[int], n: int) -> int:\n    max_arr = [0] * (n + 1)\n    max_sum_arr = [0] * (n + 1)\n    q = deque()\n\n    # build max_arr[i]\n    for i in range(1, n + 1):\n        max_arr[i] = max(max_arr[i - 1], arr[i - 1])\n        q.append(arr[i - 1])\n\n    # max_sum_arr[i] = max sum ending at index i,\n    # with bi-tonic sub-sequence starting at index j\n    for i in range(2, n + 1):\n        max_sum_arr[i] = max(max_sum_arr[i - 2] + arr[i - 1],\n                             max_arr[i - 2],\n                             q[0] + max_sum_arr[i - 1])\n        q.append(arr[i - 1])\n        q.popleft()\n\n    return max(max_sum_arr)\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(a, k):\n    #TODO: Replace this with your code\n    max_sum = 0\n    max_sum_count = 0\n    curr_sum = 0\n    curr_sum_count = 0\n    \n    for i in range(len(a)):\n        if a[i] == k:\n            curr_sum = 0\n            curr_sum_count = 0\n            curr_sum += k\n            curr_sum_count += 1\n        else:\n            curr_sum += a[i]\n            curr_sum_count += 1\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_sum_count = curr_sum_count\n    return max_sum_count*max_sum\n\n\n# assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    count = 0\n    while count < 10:\n        count += 1\n        res = n/2\n        if (n-res**2)<=1e-3:\n            return res\n    return res\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nfrom math import sqrt\ndef babylonian_squareroot(number):\n    \"\"\"\n    Computes square root of number using the babylonian method\n    \"\"\"\n    low = 0\n    high = number\n    while low <= high:\n        mid = (high + low)/2\n        if mid**2 == number:\n            return mid\n        if mid**2 > number:\n            high = mid-1\n        elif mid**2 < number:\n            low = mid+1\n    return -1\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(number):\n    guess = number / 2\n    while abs(guess**2 - number) > 0.00000001:\n        guess = number / guess\n    return guess\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(n):\n    a = n\n    a1 = 1\n    while True:\n        a0 = a\n        a1 = (a1 + a) / 2\n        if abs(a1 - a0) < 1e-7:\n            return a1\n        a = a1\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(num):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = 0\n    limit = 1000000000000\n    while abs(num**0.5 - x) >= limit * 10**(-13):\n        x = (num/x) + x\n    return x\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    # your code here\n    print(n)\n    def babylon(x):\n        if n == x:\n            return x\n        a = 0\n        i = 0\n        while i < 100:\n            i = i + 1\n            a = a + n/x\n            x = (a+x)/2\n        return x\n    print(babylon(n))\n#", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(number):\n    '''\n    babylonian_squareroot(number)\n    :param number: float\n    :return: float\n    '''\n    if number<0:\n        return \"Error: negative number\"\n    if number == 0:\n        return 0\n    start = 1\n    end = number/2 + 0.000001\n    result = None\n    while abs(end - start)>0.000001:\n        result = (start + end)/2\n        if result*result == number:\n            return result\n        elif result*result > number:\n            end = result\n        else:\n            start = result\n    return result\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n\tsqrt_x = 0\n\twhile x != sqrt_x:\n\t\tsqrt_x = (x + (x/sqrt_x))/2\n\treturn sqrt_x\n\n# 2", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(num):\n    \"\"\"\n    >>> babylonian_squareroot(10)\n    3.162277660168379\n    >>> babylonian_squareroot(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: num must be positive\n    >>> babylonian_squareroot(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: num must be positive\n    >>> babylonian_squareroot(100)\n    31.622776601683793\n    >>> babylonian_squareroot(90)\n    30.0\n    >>> babylonian_squareroot(1000)\n    100.0\n    \"\"\"\n    if num < 0:\n        raise ValueError('num must be positive')\n    if num == 0:\n        return 0\n    guess = 1\n    for i in range(num+1):\n        guess = (guess + num/guess)/2\n    return guess\n\ndef test_babylonian_squareroot():\n    assert babylonian_squareroot(10)==3.162277660168379\n    assert babylonian_squareroot(0)==0\n    assert babylonian_squareroot(-10)==-10\n    assert babylonian_squareroot(100)==31.622776601683793\n    assert babylonian_squareroot(90)==30.0\n    assert babylonian_squareroot(1000)==100.0\n\n# test_babylonian_squareroot()", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    if x == 0:\n        return 0\n    elif x < 0:\n        raise ValueError(\"negative numbers are not allowed\")\n    y = 1\n    x = abs(x)\n    while y*y != x:\n        y = (y + x/y)/2\n    return y\n\n# test"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    \"\"\"\n    lps : list, string -> int\n    Finds the length of the longest palindromic subsequence in a string.\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"TINDER\")\n    2\n    \"\"\"\n    # YOUR CODE HERE\n    result = 0\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] != s[j]:\n            i += 1\n        elif s[i] == s[j]:\n            i += 1\n            j -= 1\n            result += 2\n    return result\n    \n\n# Test", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    \"\"\"\n    \"\"\"\n    n = len(s)\n    # Initialize table[i][j] for i j in 0...n-1\n    table = [[0] * n for i in range(n)]\n    # Fill table in bottom up manner.\n    for i in range(n):\n        for j in range(n):\n            # If palindrome is of length 1,\n            # there is no need to consider subproblems.\n            if i == j:\n                table[i][j] = 1\n            # If last two characters are same,\n            # set table[i][j] to 2.\n            elif s[i] == s[j] and i + 1 < j:\n                table[i][j] = 2 + table[i + 1][j - 1]\n            # If not a palindrome, table[i][j] = 0.\n            else:\n                table[i][j] = 0\n\n    # Initialize result as the longest palindromic\n    # subsequence ending with the last character of s.\n    result = 0\n    # Traverse the table from bottom to top\n    # and check if there is a palindrome subsequence\n    # of length greater than or equal to result\n    for i in range(n - 1, -1, -1):\n        for j in range(i - 1, -1, -1):\n            if (s[i] == s[j] and (i - j <= result or i - j == result)):\n                result = i - j\n    return result\n\ndef lps_1(s):\n    \"\"\"\n    \"\"\"\n    n = len(s)\n    # Initialize table[i][j] for i j in 0...n-1\n    table = [[0] * n for i in range(n)]\n    # Fill table in bottom up manner.\n    for i in range(n):\n        for j in range(n):\n            # If palindrome is of length 1,\n            # there is no need to consider subproblems.\n            if i == j:\n                table[i][j] = 1\n            # If last two characters are same,\n            # set table[i][j", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(st):\n    if not st:\n        return 0\n    dp = [[0] * len(st) for _ in range(len(st))]\n    longest_len = 0\n    longest_start = 0\n    for i in range(len(st)):\n        dp[i][i] = 1\n        for j in range(i-1, -1, -1):\n            if st[i] == st[j] and (i-j <= 1 or dp[j+1][i-1]):\n                dp[j][i] = 2 + dp[j+1][i-1]\n                if longest_len < dp[j][i]:\n                    longest_len = dp[j][i]\n                    longest_start = j\n    return st[longest_start: longest_start + longest_len]", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n# let's use the dynamic programming algorithm\n# the dp[i][j] represents the longest palindromic subsequence ending at s[i] and s[j]\n# if s[i] == s[j], we can extend the subsequence to the left and right sides by 1\n# if s[i] != s[j], we cannot extend the subsequence to the left and right sides by 1\ndef lps(s):\n    n = len(s)\n    # let's build the first row\n    # dp[i][i] represents the longest palindromic subsequence ending at s[i] and s[i]\n    dp = [[1 for _ in range(n)] for _ in range(n)]\n    # the following loop is for the first column\n    for i in range(n):\n        for j in range(i):\n            # if s[i] == s[j], we can extend the subsequence to the left and right sides by 1\n            # if s[i] != s[j], we cannot extend the subsequence to the left and right sides by 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # the following loop is for the last column\n    for i in range(n):\n        for j in range(i-1, -1, -1):\n            # if s[i] == s[j], we can extend the subsequence to the left and right sides by 1\n            # if s[i] != s[j], we cannot extend the subsequence to the left and right sides by 1\n            if s[i] == s[j]:\n                dp[i][j] = max(dp[i-1][j], dp[i][j+1])\n    return dp[-1][-1]\n\n# the above code is the dp solution\n# let's find another solution\ndef lps(s):\n    n = len(s)\n    # let's build the first row", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    # your code here\n    lps = [[0 for i in range(len(s))] for i in range(len(s))]\n    # row_no is the row number, i.e. index\n    # col_no is the column number, i.e. index\n    # dp[row_no][col_no] = max(len of lps that ends in i)\n    for row_no in range(len(s)):\n        for col_no in range(row_no, -1, -1):\n            if row_no == col_no:\n                lps[row_no][col_no] = 1\n            elif s[row_no] == s[col_no]:\n                lps[row_no][col_no] = lps[row_no + 1][col_no - 1] + 2\n            else:\n                lps[row_no][col_no] = max(lps[row_no + 1][col_no], lps[row_no][col_no - 1])\n    return lps[0][len(s) - 1]\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    m = [[0 for x in range(len(s)+1)] for x in range(len(s)+1)]\n    lpsLength = 0\n    i = len(s) - 1\n    j = len(s) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == s[j]:\n            m[i][j] = m[i+1][j-1] + 2\n            if m[i][j] > lpsLength:\n                lpsLength = m[i][j]\n                lpsStartIndex = i\n                lpsEndIndex = j\n        elif m[i+1][j] > m[i][j]:\n            i -= 1\n        else:\n            j -= 1\n    return lpsLength\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\nfrom string import ascii_uppercase, ascii_lowercase\ndef lps(s: str, prev: str = \"\") -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    # initializing the dp[i][j]\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j] and (j-i < 3 or dp[i+1][j-1] != 0):\n                dp[i][j] = 2+dp[i+1][j-1]\n            elif s[i] == s[j]:\n                dp[i][j] = 2+dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    if not s:\n        return 0\n    ans = 0\n    count = [1 for i in range(len(s))]\n    for i in range(1, len(s)):\n        for j in range(0, i):\n            if s[j] == s[i] and (i-j) <= 2:\n                count[i] = max(count[i], count[j] + 2)\n                ans = max(ans, count[i])\n    return ans", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\nfrom math import sqrt\n\ndef lps(s):\n    # create a matrix to store the result\n    matrix = [[0 for _ in range(len(s))] for _ in range(len(s))]\n    # dp[i][j] stores the length of the longest palindromic subsequence\n    # which ends at s[i] and s[j]\n    dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n    # lps[i][j] stores the length of the longest palindromic subsequence\n    # which ends at s[i] and s[j]\n    lps = [[0 for _ in range(len(s))] for _ in range(len(s))]\n    n = len(s)\n    # len of palindromic subsequence at index 0 is 1\n    for i in range(n):\n        matrix[i][i] = 1\n        lps[i][i] = 1\n        # len of palindromic subsequence at index 0 is 1\n        dp[i][i] = 1\n    # find the longest palindromic subsequence by considering\n    # all the possible subsequences of length 2 to n\n    for len in range(2, n+1):\n        for i in range(0, n-len+1):\n            j = i+len-1\n            # if s[i] and s[j] are same, then the palindromic subsequence\n            # at s[i] and s[j] is of length 2,\n            # so dp[i][j] = matrix[i+1][j-1] + 2\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                # If the length of palindromic subsequence at s[i] and s[j]\n                # is greater than the length of palindromic subsequence\n                # which ends at s[i+1] and s[j-1],\n                # then the palindromic subsequence at s[i] and s[j]\n                # must"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    s = 0\n    for i in range(1, n):\n        s += 1.0/i\n    return s\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n  return sum([1/i for i in range(1,n)])", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nimport math\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(7)\n    2.5928571428571425\n    \"\"\"\n    return (1 + 1 / 2 + 1 / 3 + 1 / 4 + 1 / 5 + 1 / 6 + 1 / 7) * n / 7\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nfrom unittest import TestCase\n\n\ndef harmonic_sum(n):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    def sum_to(n):\n        if n == 1:\n            return 1\n        else:\n            return n + sum_to(n - 1)\n    return 1.0 / sum_to(n)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return 1 / n * (1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6)\n\n# Tests", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    if n == 0:\n        return 0\n    return 1/2 + harmonic_sum(n-1)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    if n == 1:\n        return 1.0\n    elif n == 2:\n        return 2.0\n    else:\n        return (1.0 + harmonic_sum(n-1)) / n\n\n#print(harmonic_sum(7))", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    if n < 1:\n        return 0\n\n    return 1.0 / (1.0 + harmonic_sum(n-1))\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return sum([1.0/i for i in range(1,n+1)])\n\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    res = []\n    for x in arr1:\n        if x in arr2:\n            res.append(x)\n    return res\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    \"\"\"\n    Intersection of two arrays using lambda function.\n    \"\"\"\n    return list(filter(lambda x: x in arr1, arr2))\n\n# assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\n# +", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(a, b):\n    return list(set(filter(lambda x: x in b, a)))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a, b):\n    return list(set(a) & set(b))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(array1, array2):\n\treturn list(filter(lambda x: x in array2, array1))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\nimport pytest\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1,arr2):\n    return list(filter(lambda x: x in arr1,arr2))\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1,arr2):\n    return list(set(arr1) & set(arr2))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,X):\n    \"\"\"\n    Input: a tuple and an element\n    Output: int - the number of occurences of the element in the tuple\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(t,x):\n    \"\"\"\n    count the occurence of an element x in tuple t.\n    \"\"\"\n    n=0\n    for el in t:\n        if el == x:\n            n = n+1\n    return n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(mytuple,x):\n    return len([i for i in mytuple if i == x])\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple, X):\n    count = 0\n    for i in tuple:\n        if i == X:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple_list, x):\n    result = 0\n    for i in tuple_list:\n        if i == x:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n# Solution\ndef count_X(tup, x):\n    ct = 0\n    for i in tup:\n        if i == x:\n            ct += 1\n    return ct\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(T,x):\n    return sum(1 for x in T)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple, X):\n    return tuple.count(X)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(input_tuple, element):\n    \"\"\"\n    :param input_tuple: tuple with the element\n    :param element: element to search\n    :return: number of occurrences of element in input_tuple\n    \"\"\"\n    count = 0\n    for i in input_tuple:\n        if i == element:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(A, B):\n    A.insert(0, B)\n    for i in range(len(A)):\n        A[i] = B + ' ' + A[i]\n    return A", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list,item):\n    new_list = []\n    for i in list:\n        new_list.append(item)\n        new_list.append(i)\n    return new_list\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(l, elem):\n    for i in range(len(l)):\n        l.insert(i, elem)\n    return l\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list_name, name):\n    new_list = []\n    for item in list_name:\n        new_list.append(name)\n        new_list.append(item)\n    return new_list\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst,new_element):\n    if lst ==[]:\n        return []\n    return [new_element] + lst + [new_element]\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(L,c):\n    return c+L\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list,element):\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\nlist1 = [1,2,3,4]\nlist2 = [10,20,30,40]\nlist3 = [\"A\",\"B\",\"C\",\"D\"]", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, new_element):\n\tfor i in range(len(lst)):\n\t\tlst.insert(i, new_element)\n\treturn lst\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list,element):\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list_name, value):\n    list_name = ['c'] + list_name\n    for index in range(len(list_name)):\n        list_name[index] = value\n    list_name.insert(0,'c')\n    return list_name\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport math\n\ndef convert(z):\n    r = math.sqrt(z.real**2 + z.imag**2)\n    angle = math.atan2(z.imag, z.real)\n    return r, angle\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nfrom math import cos, sin, pi\n\n\ndef convert(a):\n    r = abs(a)\n    theta = 0 if a == 0 else a / abs(a) * pi\n    return r, theta\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(x, y=0):\n    \"\"\"\n    convert complex number to polar coordinate\n    \"\"\"\n    return math.sqrt(x**2 + y**2), math.atan(y/x)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    angle = complex(z)\n    rad = angle.imag / angle.real\n    return (angle.real, angle.imag)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    return z.real, z.imag\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(complex_number):\n    print(complex_number)\n    r = complex_number.real\n    i = complex_number.imag\n    angle = math.atan(i/r)\n    r = math.sqrt(r**2 + i**2)\n    return r, angle\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    import math\n    return (math.sqrt(z.real**2 + z.imag**2), math.atan2(z.imag, z.real))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport math\n\ndef convert(z):\n    mag = math.sqrt(z.real**2 + z.imag**2)\n    arg = math.atan2(z.imag, z.real)\n    return (mag, arg)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n# Solution\ndef convert(z):\n    r = z.real\n    i = z.imag\n    r = float(r)\n    i = float(i)\n    theta = math.atan2(i, r)\n    return (r, theta)\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(x):\n    return math.sqrt(x**2), math.atan2(x.imag, x.real)\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(x):\n    y = 0\n    for i in x:\n        if isinstance(i, int):\n            y += 1\n    return y", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(items):\n    count = 0\n    for item in items:\n        if type(item) == int:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list_of_numbers):\n    # your code here\n    number_of_integers = 0\n    for i in list_of_numbers:\n        if isinstance(i, int):\n            number_of_integers += 1\n    return number_of_integers\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    # Your code goes here.\n    return list.count(int)\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(a_list):\n    count = 0\n    for i in a_list:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(my_list):\n    my_count = 0\n    for x in my_list:\n        if type(x) == int:\n            my_count += 1\n    return my_count\n\ndef count_integer(my_list):\n    return sum(1 for x in my_list if type(x) == int)\n\ndef count_integer(my_list):\n    return sum([1 for x in my_list if type(x) == int])\n\ndef count_integer(my_list):\n    count = 0\n    for item in my_list:\n        if type(item) == int:\n            count += 1\n    return count\n\ndef count_integer(my_list):\n    count = 0\n    for item in my_list:\n        if type(item) == int:\n            count += 1\n    return count\n\ndef count_integer(my_list):\n    count = 0\n    for item in my_list:\n        if isinstance(item, int):\n            count += 1\n    return count\n\ndef count_integer(my_list):\n    return sum(1 for x in my_list if isinstance(x, int))\n\ndef count_integer(my_list):\n    return sum(1 for x in my_list if type(x) == int)\n\ndef count_integer(my_list):\n    return sum(1 for x in my_list if isinstance(x, int))\n\ndef count_integer(my_list):\n    return sum([1 for x in my_list if isinstance(x, int)])\n\ndef count_integer(my_list):\n    return sum(1 for x in my_list if type(x) == int)\n\ndef count_integer(my_list):\n    return sum(1 for x in my_list if isinstance(x, int))\n\ndef count_integer(my_list):\n    return sum(1 for x in my_list if isinstance(x, int))\n\ndef count_integer(my_list):\n    count = 0\n    for item in my_list:\n        if isinstance(item, int):\n            count += 1\n    return count\n\ndef", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    pass\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(l):\n    count = 0\n    for i in l:\n        if i is int:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list_of_integer):\n    return len([num for num in list_of_integer if isinstance(num, int)])", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(l):\n\tinteger = 0\n\tfor i in l:\n\t\tif type(i) == int:\n\t\t\tinteger += 1\n\treturn integer\n\n\n# assert count_integer([1,2,'abc',1.2]) == 2\n# print(count_integer([1,2,'abc',1.2]))\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(st):\n    r = []\n    for w in st.split():\n        if w.startswith('a') or w.startswith('e'):\n            r.append(w)\n    return r", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    ans = []\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e':\n            for j in range(i+1,len(s)):\n                if s[j] == 'e' or s[j] == 'a':\n                    if j-i > 1:\n                        ans.append(s[i:j])\n                    else:\n                        ans.append(s[i])\n    return ans\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    result = []\n    for i in range(len(s)):\n        if s[i] in ('a','e'):\n            result.append(s[i:i+1])\n    return result\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    # Your code here\n    return []\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    return [w for w in string.split() if w[0] in 'ae']\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(sentence):\n    \"\"\"\n    Find all words starting with 'a' or 'e'\n    \"\"\"\n    ae = []\n    for word in sentence.split():\n        if word[0] in [\"a\", \"e\"]:\n            ae.append(word)\n    return ae\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    \"\"\"\n    >>> words_ae(\"python programe\")\n    ['ame']\n    \"\"\"\n    result = []\n    for word in s.split():\n        if word[0] in \"ae\":\n            result.append(word)\n    return result\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    assert s != None\n    ans = []\n    for i in s.split():\n        if i[0] in [\"a\", \"e\"]:\n            ans.append(i)\n    return ans\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(sentence):\n  words = []\n  for word in sentence.split():\n    if word[0] == \"a\" or word[0] == \"e\":\n      words.append(word)\n  return words\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(text):\n    words = []\n    for word in text.split():\n        if word[0] in ('a', 'e'):\n            words.append(word)\n    return words\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,number_of_colors):\n    if number_of_colors <=0:\n        return []\n    elif number_of_colors == 1:\n        return [(x,) for x in colors]\n    else:\n        return [(x,)+y for x in colors for y in combinations_colors(colors,number_of_colors-1)]\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,number_of_colors_to_choose):\n    return []\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,number):\n    res = []\n    if len(colors) == 1:\n        return [colors[0]] * number\n    if number == 1:\n        res.append(tuple(colors))\n        return res\n    for i in range(len(colors)):\n        new_colors = colors[:i] + colors[i+1:]\n        comb = combinations_colors(new_colors, number-1)\n        for c in comb:\n            res.append((colors[i],) + c)\n    return res\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\nimport itertools\n\ndef combinations_colors(colors, n):\n    if n==0:\n        return [()]\n    else:\n        result = []\n        for color in colors:\n            for i in range(n):\n                result.append((color,) + combinations_colors(colors, n-1))\n        return result\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,number):\n\tcombinations = []\n\tfor color in colors:\n\t\tfor i in range(number):\n\t\t\tcombinations.append((color,))\n\treturn combinations", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n# Note: Output has to be a list, so \n# for one colours\n# return empty list\n# for two colours\n# return [('color1', 'color2')]\n# for three colours\n# return [('color1', 'color2', 'color3')]\n\ndef combinations_colors( colors, n):\n    if n == 1:\n        return []\n    elif n == 2:\n        return [(color1, color2) for color1 in colors for color2 in colors]\n    else:\n        return [(color1, color2, color3) for color1 in colors for color2 in colors for color3 in colors]\n\n# Note: Output has to be a list, so \n# for one colours\n# return empty list\n# for two colours\n# return [('color1', 'color2')]\n# for three colours\n# return [('color1', 'color2', 'color3')]\n\ndef combinations_colors( colors, n):\n    comb = []\n    if n == 1:\n        return []\n    elif n == 2:\n        for color1 in colors:\n            for color2 in colors:\n                comb.append((color1, color2))\n    elif n == 3:\n        for color1 in colors:\n            for color2 in colors:\n                for color3 in colors:\n                    comb.append((color1, color2, color3))\n    return comb", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors( list_of_colors, number_of_colors ):\n    new_list = []\n    if number_of_colors == 0:\n        return new_list\n    if number_of_colors > 0:\n        list_of_colors.reverse()\n        new_list.append((list_of_colors[0],))\n        for i in range(1, len(list_of_colors)):\n            #print \"list_of_colors[i]:\", list_of_colors[i]\n            for j in combinations_colors(list_of_colors[1:], number_of_colors-1):\n                #print \"list_of_colors[i]\", list_of_colors[i], \"j:\", j\n                new_list.append((list_of_colors[i],) + j)\n    return new_list\n\ndef test_combinations_colors():\n    list_of_colors = [\"Red\",\"Green\",\"Blue\"]\n    print \"list_of_colors:\", list_of_colors\n    assert combinations_colors( list_of_colors, 1)==[('Red',), ('Green',), ('Blue',)]\n    assert combinations_colors( list_of_colors, 2)==[('Red','Green'), ('Red','Blue'), ('Green','Blue')]\n    assert combinations_colors( list_of_colors, 3)==[('Red','Green','Blue'), ('Red','Green','Red'), ('Red','Blue','Blue'), ('Green','Blue','Blue')]\n    assert combinations_colors( list_of_colors, 4)==[('Red','Green','Blue','Red'), ('Red','Green','Blue','Green'), ('Red','Green','Blue','Blue'), ('Red','Green','Red','Red'), ('Red','Green','Red','Green'), ('Red','Green','Red','Blue'), ('Red','Green','Blue','Blue'), ('Red','Blue','Blue','Blue'), ('Green','Blue','Blue','Blue')]\n    assert combinations_colors( list_of_colors, 0)==[]\n\ndef test_combinations_colors_2():\n    assert combinations_colors", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, num):\n    combinations = []\n    while num > 0:\n        for i in range(len(colors)):\n            if num <= 0:\n                break\n            combination = list(colors[i]) * num\n            combinations.append(tuple(combination))\n            num -= num\n    return combinations\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,n):\n    ans=[]\n    if n==0:\n        return ans\n    elif n==1:\n        return [x for x in colors]\n    else:\n        for i in range(len(colors)):\n            c1=colors[i]\n            ans1=combinations_colors(colors[:i]+colors[i+1:],n-1)\n            for i in range(len(ans1)):\n                ans.append((c1,ans1[i]))\n    return ans\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,num):\n    combs=[]\n    for n in range(num):\n        combs.extend([colors[0:n]+(c,) for c in colors[n:]])\n    return combs\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2: return 0\n    i, j, count = 2, 2, 0\n    while i*i < n:\n        if isPrime(i):\n            count += 1\n        i += 1\n    return count\n\n#assert count_Primes_nums(5) == 2\n\ndef isPrime(n):\n    if n < 2: return False\n    i = 2\n    while i*i < n:\n        if n % i == 0: return False\n        i += 1\n    return True\n\n#assert isPrime(12) == False", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2,n):\n        if n % i == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(number):\n    \"\"\"\n    Args:\n        number (int): Non-negative number\n    Returns:\n        count (int): number of prime numbers less than number\n    Raises:\n        ValueError: if number is not a positive integer\n        TypeError: if number is not an integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:\n        raise TypeError(\"The number must be a positive integer\")\n\n    if not isinstance(number, int):\n        raise ValueError(\"The number must be an integer\")\n\n    count = 0\n\n    for i in range(1, number):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n\n    return count\n\n\ndef count_Primes_nums_v1(number):\n    \"\"\"\n    Args:\n        number (int): Non-negative number\n    Returns:\n        count (int): number of prime numbers less than number\n    Raises:\n        ValueError: if number is not a positive integer\n        TypeError: if number is not an integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:\n        raise TypeError(\"The number must be a positive integer\")\n\n    if not isinstance(number, int):\n        raise ValueError(\"The number must be an integer\")\n\n    count = 0\n\n    for i in range(2, number):\n        for j in range(2, int(number ** 0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n\n    return count\n\n\ndef count_Primes_nums_v2(number):\n    \"\"\"\n    Args:\n        number (int): Non-negative number\n    Returns:\n        count (int): number of prime numbers less than number\n    Raises:\n        ValueError: if number is not a positive integer\n        TypeError: if number is not an integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:\n        raise TypeError(\"The number must be a positive integer\")\n\n    if not isinstance(number, int):\n        raise ValueError(\"The number must be an integer\")\n\n    count = 0\n\n    for i in range(2, number):\n        for j in range", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    if n <= 1:\n        return 0\n    count = 0\n    for i in range(2,n):\n        if n % i == 0:\n            count += 1\n    return count\n\n#print(count_Primes_nums(2))\n#print(count_Primes_nums(5))", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    if n < 0:\n        return -1\n    primes = [2]\n    i = 3\n    while i*i <= n:\n        while n % i == 0:\n            n = n // i\n            primes.append(i)\n        i += 2\n    if n > 2:\n        primes.append(n)\n    return len(primes)\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2,n):\n        if n%i == 0:\n            count+=1\n    return count\n\n# assert count_Primes_nums(5) == 2\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(N):\n    primes = set()\n    for i in range(2, N):\n        for j in primes:\n            if i % j == 0:\n                break\n        else:\n            primes.add(i)\n    return len(primes)\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    # your code here\n    if n < 1:\n        return 0\n    primes = 0\n    for i in range(1, n):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes += 1\n    return primes\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n\tprimes = 0\n\tfor i in range(2,n):\n\t\tif(i != 2):\n\t\t\tfor j in range(2,i):\n\t\t\t\tif(i%j == 0):\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tprimes += 1\n\treturn primes", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 2:\n        return 0\n    num_Prime_nums = 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            num_Prime_nums += 1\n    return num_Prime_nums\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(n1, n2):\n    return (n2,n1)\n\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x, y):\n    \"\"\"\n    Swap two numbers\n    \"\"\"\n    temp = x\n    x = y\n    y = temp\n    return x, y\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    c=a\n    a=b\n    b=c\n    return a,b\n\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x, y):\n    return(y,x)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    a, b = b, a\n    return a, b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    \"\"\"\n    swap two numbers\n    \"\"\"\n    temp=x\n    x=y\n    y=temp\n    return x,y\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    temp = x\n    x = y\n    y = temp\n    return (x,y)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    return y,x\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    if x != y:\n        x, y = y, x\n    return x,y\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(my_list):\n    return len([v for v in my_list if v % 2 == 1])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(nums):\n    \"\"\"\n    Count odd numbers in the list.\n    :param nums: list\n    :return: count of odd numbers in the list\n    \"\"\"\n    return len(list(filter(lambda n: n%2, nums)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len([x for x in lst if x%2==1])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(numbers):\n    return len(list(filter(lambda x: x % 2, numbers)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(l):\n    return len(list(filter(lambda x: x % 2 != 0, l)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len(lst) - sum(lambda x: x % 2, lst)\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len([e for e in lst if e % 2 == 1])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\nimport unittest\n\n\ndef count_odd(numbers):\n    return len([number for number in numbers if number % 2 != 0])\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(num):\n    return len([x for x in num if x%2 != 0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(nums):\n    return sum([1 for n in nums if n % 2 == 1])\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuples_one, tuples_two):\n    for item in tuples_one:\n        index = tuples_two.index(max(tuples_two, key=lambda x: x[0]))\n        tuples_two[index] = item\n    return tuples_two", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(A, B):\n    # Write your code here\n    if A[0] > B[0]:\n        A[0],B[0] = B[0],A[0]\n    if A[1] > B[1]:\n        A[1],B[1] = B[1],A[1]\n    if A[0] > B[0]:\n        A[0],B[0] = B[0],A[0]\n    if A[1] > B[1]:\n        A[1],B[1] = B[1],A[1]\n    return (A,B)\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef maximize_elements(elements1: Tuple[int], elements2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n    Optimized version of the `maximize_elements` function.\n    :param elements1: Tuple of elements to be compared with elements2.\n    :param elements2: Tuple of elements to be compared with elements1.\n    :return: Tuple of maximum elements from elements1 and elements2.\n    \"\"\"\n    max_elements1, max_elements2 = 0, 0\n    for index, element in enumerate(elements1):\n        if element > max_elements1:\n            max_elements2 = max_elements1\n            max_elements1 = element\n        elif element > max_elements2:\n            max_elements2 = element\n    return (max_elements1, max_elements2)\n\n\ndef maximize_elements_using_index(elements1: Tuple[int], elements2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n    Alternative implementation of the `maximize_elements` function.\n    :param elements1: Tuple of elements to be compared with elements2.\n    :param elements2: Tuple of elements to be compared with elements1.\n    :return: Tuple of maximum elements from elements1 and elements2.\n    \"\"\"\n    max_elements1, max_elements2 = 0, 0\n    for index, element in enumerate(elements1):\n        if element > max_elements1:\n            max_elements2 = max_elements1\n            max_elements1 = element\n        elif element > max_elements2:\n            max_elements2 = element\n    return (max_elements1, max_elements2)\n\n\n# Testing", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n    return max_by_key(tuples1, key=lambda t: t[0])[0]\n\ndef max_by_key(seq, key):\n    \"\"\"Return a list of elements in seq with maximum values of key.\"\"\"\n    return max(seq, key=key)\n\ndef max_by_key(seq, key):\n    \"\"\"Return a list of elements in seq with maximum values of key.\"\"\"\n    return max(seq, key=key)\n\ndef max_by_key(seq, key):\n    \"\"\"Return a list of elements in seq with maximum values of key.\"\"\"\n    return max(seq, key=key)\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(arr1, arr2):\n    result = []\n    for (a1, a2) in arr1:\n        for (b1, b2) in arr2:\n            if (a1 + b1 > result[-1][0] + result[-1][1]):\n                result.append((a1 + b1, a2 + b2))\n    return result\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n\ttuples = []\n\tfor tup1 in tuples1:\n\t\tfor tup2 in tuples2:\n\t\t\tif tup1 > tup2:\n\t\t\t\ttuples.append(tup1)\n\t\t\t\tbreak\n\t\t\telif tup1 < tup2:\n\t\t\t\ttuples.append(tup2)\n\t\t\t\tbreak\n\treturn tuples", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a, b):\n    \"\"\"\n    \n    Parameters\n    ----------\n    a : TYPE\n        DESCRIPTION.\n    b : TYPE\n        DESCRIPTION.\n\n    Returns\n    -------\n    TYPE\n        DESCRIPTION.\n\n    \"\"\"\n    return sorted(a, key=lambda x: max(map(lambda y: y[1], x))) + sorted(b, key=lambda x: max(map(lambda y: y[1], x)))\n\n#tests\n#assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a, b):\n    a_max, b_max = 0, 0\n    for index in range(len(a)):\n        if a[index][0] > b_max:\n            b_max = a[index][0]\n        if a[index][1] > a_max:\n            a_max = a[index][1]\n    return b_max, a_max\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    max_value = 0\n    for i in range(len(tuple1)):\n        max_value = max(max_value, tuple1[i])\n        max_value = max(max_value, tuple2[i])\n    return max_value\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nfrom typing import Any\n\n\ndef maximize_elements(elements1: tuple[tuple[int, int], ...], elements2: tuple[tuple[int, int], ...]) -> tuple[tuple[int, int], ...]:\n    \"\"\"maximize_elements takes in two tuples and returns a tuple with\n    the elements that have the higher value from the input tuples.\"\"\"\n    return tuple(sorted(zip(elements1, elements2), key=lambda t: (t[0][1], t[1][1])))\n\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    >>> newman_prime(2)\n    3\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(7)\n    139\n    >>> newman_prime(15)\n    907\n    \"\"\"\n    # Your code here.\n    x = 5\n    i = 1\n    while i < n:\n        x = x + 2\n        if is_prime(x):\n            i += 1\n    return x\n\ndef is_prime(n):\n    \"\"\"\n    >>> is_prime(1)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(13)\n    True\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n\tfor i in range(n):\n\t\tp = newman_shanks_williams_prime_generator()\n\t\tif p > 10**10:\n\t\t\tbreak\n\t\tif p != 2 and p != 3:\n\t\t\treturn p\n\ndef newman_shanks_williams_prime_generator():\n\told_prime, old_prime_squared, current_prime = 1, 0, 2\n\twhile True:\n\t\told_prime_squared = old_prime**2\n\t\tif old_prime_squared == current_prime**2:\n\t\t\told_prime = current_prime\n\t\t\told_prime_squared = old_prime**2\n\t\told_prime_squared = old_prime**2\n\t\tif (old_prime_squared - 2) * (old_prime_squared - 3) == 0:\n\t\t\tcurrent_prime = (old_prime**2 - 2) / 2\n\t\telse:\n\t\t\tcurrent_prime = (old_prime**2 - 3) / 2\n\t\tyield current_prime", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nimport math\n\ndef newman_prime(n):\n    \"\"\"\n    n-th newman\u2013shanks\u2013williams prime number\n    \"\"\"\n    n = n - 1\n    n_div_2 = n // 2\n    if n % 2 == 0:\n        result = 2**n_div_2 * 3 + 1\n    else:\n        result = 2**n_div_2 * 3 + 2\n    return result\n\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n\tif n < 1: return 1\n\tp = [2]\n\td = [1]\n\ti = 3\n\twhile len(p) < n:\n\t\tj = 0\n\t\twhile j < len(p):\n\t\t\tk = 2*p[j]+d[j]\n\t\t\tif k < p[-1]:\n\t\t\t\tif k in d:\n\t\t\t\t\tj += 1\n\t\t\t\telse:\n\t\t\t\t\tp.append(k)\n\t\t\t\t\td.append(1)\n\t\t\telse:\n\t\t\t\tj += 1\n\t\ti += 2\n\treturn p[-1]", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n\tp=11\n\tk=3\n\tx=1\n\twhile(k<n):\n\t\tif(euler(p) == 0):\n\t\t\tp=p+2\n\t\t\tcontinue\n\t\twhile(euler(x*p) != 0):\n\t\t\tx=x+1\n\t\tk=k+x\n\treturn p\n\n\ndef euler(n):\n\tif(n == 1):\n\t\treturn 0\n\tp=1\n\twhile(n%p==0):\n\t\tp=p+1\n\treturn p\n\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    def is_prime(n):\n        # Your code goes here.\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    while True:\n        n += 1\n        if is_prime(n) == True:\n            return n\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    assert n >= 1\n    return newman_prime_iter(2, 3)\n\ndef newman_prime_iter(a, b, n = 1):\n    if n == 1:\n        return b\n    if newman_prime_check(a, b):\n        return b\n    a, b = b, newman_prime_next(a, b)\n    return newman_prime_iter(a, b, n + 1)\n\ndef newman_prime_check(a, b):\n    if newman_prime_test(a, b):\n        return True\n    for k in range(2, b):\n        if newman_prime_test(b, k) and newman_prime_test(b, a + k * b):\n            return True\n    return False\n\ndef newman_prime_test(a, b):\n    if b <= 1:\n        return False\n    if a % b != 0:\n        return False\n    c = 0\n    while a % b == 0:\n        c += 1\n        a /= b\n    return c == 1\n\ndef newman_prime_next(a, b):\n    if newman_prime_test(a, b):\n        return b + 2\n    k = 3\n    while k < b:\n        if newman_prime_test(a, k):\n            return k\n        k += 2\n    return b + 2\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    if n < 3:\n        return n\n    sieve = [True] * (n//2)\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(int(n**0.5)//2):\n        if sieve[i]:\n            k = 2*i+1\n            sieve[k] = False\n            for j in range(k*k, n, k):\n                sieve[j] = False\n    for i in range(2, n):\n        if sieve[i]:\n            yield i", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nfrom math import sqrt\n\ndef newman_prime(n):\n    x = 1\n    while True:\n        x += 1\n        if is_prime(x):\n            break\n    for i in range(1, n):\n        x += 2*i*i - i - 1\n        while not is_prime(x):\n            x += 2*i*i - i - 1\n        yield x\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\nfrom itertools import count\n\ndef newman_prime_gen(n):\n    x = 1\n    while True:\n        x += 1\n        if is_prime(x):\n            break\n    for i in count(1):\n        x += 2*i*i - i - 1\n        while not is_prime(x):\n            x += 2*i*i - i - 1\n        if i >= n:\n            return\n        yield x\n\nfrom math import sqrt\ndef newman_prime(n):\n    x = 1\n    while True:\n        x += 1\n        if is_prime(x):\n            break\n    for i in range(1, n):\n        x += 2*i*i - i - 1\n        while not is_prime(x):\n            x += 2*i*i - i - 1\n        yield x\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(t1, t2):\n    return tuple(x / y for x, y in zip(t1, t2))\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(a, b):\n    print(f'a = {a}')\n    print(f'b = {b}')\n    return tuple([i / j for i,j in zip(a, b)])\n\n\ndivision_elements((10, 4, 6, 9), (5, 2, 3, 3))", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n# Write your code here.\ndef division_elements(a, b):\n    result = []\n    for i in range(len(a)):\n        result.append(a[i]/b[i])\n    return result\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    return tuple1[0] / tuple2[0], tuple1[1] / tuple2[1], tuple1[2] / tuple2[2], tuple1[3] / tuple2[3]", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(dividends, divisors):\n    for i in range(len(dividends)):\n        dividends[i] = dividends[i] / divisors[i]\n    return dividends\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i]/tuple2[i]\n    return tuple1\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(a, b):\n    assert len(a) == len(b)\n    return tuple(i//j for i, j in zip(a, b))\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n\t# Your code here\n\tresult = []\n\tfor i in range(len(tuple1)):\n\t\tresult.append(float(tuple1[i])/float(tuple2[i]))\n\treturn result", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(a, b):\n    assert type(a) == tuple\n    assert type(b) == tuple\n    assert len(a) == len(b)\n    return tuple(a[i] / b[i] for i in range(len(a)))", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(divisor, dividend):\n  assert isinstance(divisor, tuple)\n  assert isinstance(dividend, tuple)\n  return tuple(x/y for x, y in zip(divisor, dividend))\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst,size):\n    return (lst[:size], lst[size:])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(list,num_elements):\n    first = []\n    second = []\n    if len(list) >= num_elements:\n        for i in range(num_elements):\n            first.append(list[i])\n        for j in range(len(list)-num_elements,len(list)):\n            second.append(list[j])\n        return (first,second)\n    else:\n        print(\"The given number of elements is greater than the length of the given list\")\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(a,n):\n    a = list(a)\n    index_part_1 = int(len(a)/2)\n    index_part_2 = index_part_1 + n\n    part1 = a[:index_part_1]\n    part2 = a[index_part_1:index_part_2]\n    part3 = a[index_part_2:]\n    return (part1,part2,part3)", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(my_list, n):\n    if len(my_list) <= n:\n        return my_list, []\n    return my_list[:n], my_list[n:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, length):\n    new_lst1 = lst[:length]\n    new_lst2 = lst[length:]\n    return new_lst1, new_lst2\n\nlst1 = [1, 1, 2, 3, 4, 4, 5, 1]\nlst2 = [1, 1, 2, 3, 4, 4, 5, 1]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(l,l1):\n    l1 = len(l)-l1\n    return l[0:l1],l[l1:]\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(my_list, length):\n    first_half=my_list[:length]\n    second_half=my_list[length:]\n    return (first_half,second_half)\n\ndef split_two_parts(my_list, length):\n    return my_list[:length], my_list[length:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, n):\n    if len(lst) <= n:\n        return ([],lst)\n    else:\n        return ([lst[0:n]], lst[n:])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst,length):\n    return lst[:length],lst[length:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\nfrom typing import List\n\ndef split_two_parts(a:List[int], num_elements:int)-> (List[int],List[int]):\n    return a[0:num_elements], a[num_elements:]"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n    if d1 == None:\n        return d2\n    elif d2 == None:\n        return d1\n    else:\n        return {**d1, **d2}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict_1,dict_2):\n    result = dict_1.copy()\n    for key,value in dict_2.items():\n        if key in result:\n            result[key] = value\n        else:\n            result[key] = value\n    return result\n\n#assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1,dict2):\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    return result\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(d1,d2):\n    d1.update(d2)\n    return d1\n\n\n# Testing\nd1 = {'a': 100, 'b': 200}\nd2 = {'x': 300, 'y': 200}", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(d1, d2):\n    d3 = d1.copy()\n    for k in d2:\n        d3[k] = d2[k]\n    return d3\n\n#assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n#assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})!={'a': 100, 'b': 200}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(d1, d2):\n    d = d1.copy()\n    d.update(d2)\n    return d\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    for key, value in dict2.items():\n        if key in dict1:\n            dict1[key] = dict1[key] + value\n        else:\n            dict1[key] = value\n    return dict1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\n# sample merge function\ndef merge_dict(d1, d2):\n    return {**d1, **d2}\n\n# test function", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1,dict2):\n    dict3 = dict1\n    for key, value in dict2.items():\n        dict3[key] = value\n    return dict3\n\ndict1 = {'a': 100, 'b': 200}\ndict2 = {'x': 300, 'y': 200}", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    Merges dict1 and dict2 and returns a new dictionary\n    \"\"\"\n    new_dict = dict1\n    for key, value in dict2.items():\n        if key in new_dict:\n            new_dict[key] = new_dict[key] + value\n        else:\n            new_dict[key] = value\n    return new_dict\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age_in_dogs_years):\n    \"\"\"\n    Input: age of dog in dog's years\n    Output: dog's age in human years\n    \"\"\"\n    age_in_human_years = age_in_dogs_years * 10\n    return age_in_human_years\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years):\n    pass\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years):\n    if years == 0:\n        return 0\n    elif years == 1:\n        return 1\n    else:\n        return dog_age(years-1)+52\n    return age", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\nimport pytest\n\n\ndef dog_age(days):\n    age_in_years = days // 730578\n    days_in_month = 365\n    year_in_dog_year = age_in_years // 12\n    dog_years_left = age_in_years - (year_in_dog_year * 12)\n\n    dog_age_days = days - (dog_years_left * 365 * 12) + dog_years_left * 365\n\n    dog_age_months = dog_age_days // days_in_month\n    dog_age_days = dog_age_days - (dog_age_months * days_in_month)\n\n    return dog_age_days + dog_age_months * 30 + year_in_dog_year * 12\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_age):\n    dog_years = 0\n    while human_age != 0:\n        dog_years += (human_age//10)\n        human_age = human_age % 10\n    return dog_years\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(dog_years):\n    return dog_years * 7\n\n\n# -\n\n# 7. Write a function to calculate a dog's age in dog's years.", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(years):\n    return years * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n# Write your code here\n\ndef dog_age(human_age):\n  \"\"\"\n  Write a function to calculate a dog's age in dog's years.\n  \n  Args:\n    human_age: an integer representing a human's age in years.\n  Returns:\n    an integer representing a dog's age in dog's years.\n  \"\"\"\n  dog_age = int((human_age / 7) + 2)\n  return dog_age\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age_in_years):\n    age_in_dog_years = age_in_years * 7\n    return age_in_dog_years\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years):\n    \"\"\"\n    :param years: number of years of dog's life.\n    :return: the age of the dog in dog's years.\n    \"\"\"\n    return years * 7"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l, n):\n    l = list(l)\n    lst = []\n    for i in range(0, len(l), n):\n        lst.append(l[i:i+n])\n    return lst", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst,n):\n    return [lst[i:i+n] for i in range(0,len(lst),n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l,n):\n    return [l[i:i+n] for i in range(0,len(l),n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(items,n):\n    return [items[i:i+n] for i in range(0,len(items),n)]\n\n# assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list, n):\n\treturn [list[i:i+n] for i in range(0, len(list), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(list,n):\n    ret = []\n    for i in range(0, len(list), n):\n        ret.append(list[i:i+n])\n    return ret\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(L, n):\n    L = list(L)\n    d = dict((i, L[i::n]) for i in range(n))\n    return [d[i] for i in range(n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l, n):\n    if n == 1:\n        return [l]\n    first_half = l[:n]\n    second_half = l[n:]\n    first_half.append(second_half)\n    return [first_half] + list_split(second_half, n)\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst,n):\n    return [[lst[i] for i in range(i*n,i*n+n)] for i in range(len(lst)//n)]\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n# WRITE YOUR CODE HERE\ndef lateralsurface_cube(n):\n    lateral_surface_area = 0\n    for i in range(n):\n        lateral_surface_area += (i+1) * 6\n    return lateral_surface_area\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side_length):\n    return side_length*6*6\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(length):\n    return (length**2) * 6\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(length):\n    assert isinstance(length,int)\n    assert length>0\n    return 6*length**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return 2*side**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(n):\n    return 2 * n ** 2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    \"\"\"\n    :param length: A positive integer\n    :return: An integer that represents the lateral surface area of a cube with side length equal to length.\n    \"\"\"\n    return 6 * length ** 2\n\n\n# test", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    \"\"\"\n    \"\"\"\n    lateralsurface = 0\n    for i in range(1, length+1):\n        lateralsurface += 2*(i*(length**2))\n    return lateralsurface\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(n):\n\treturn n**2*2*3*4\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    return length*6\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    odd_list = []\n    for i in range(1, n+1):\n        if i%2 != 0:\n            odd_list.append(i)\n    return sum(map(lambda x: x**2, odd_list))", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    s = 0\n    for i in range(1,n,2):\n        s += i**2\n    return s\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    return 0", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"Function to find sum of squares of first n odd natural numbers\"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    \"\"\"\n    Solution: Iterate from 1 to n and find sum of squares of odd numbers in that range.\n    \"\"\"\n    return sum([x**2 for x in range(1, n, 2)])", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    return (n*(n+1)*(2*n+1))/6\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    This method returns the sum of squares of first n odd numbers.\n    :param n: The number of odd numbers for which the sum of squares is to be found.\n    :return: The sum of squares of first n odd numbers.\n    \"\"\"\n    return sum(i**2 for i in range(1, n+1, 2))", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n# First Solution\ndef square_Sum(n):\n    i, s = 1, 0\n    while i <= n:\n        s += i ** 2\n        i += 2\n    return s\n\n\n# Second Solution\ndef square_Sum(n):\n    i = 1\n    while i <= n:\n        i += 2\n        s = i ** 2\n        yield s"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    result = 1\n    for i in range(n):\n        result = result * i + i\n    return result\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    # Your code here\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n - 1) + 2 * n - 1\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\nimport math\nimport sys\n\ndef find_star_num(n):\n    return 50 * (n - 1) ** 2 + 1\n\n\ndef find_star_num_better(n):\n    return (n * (n - 1) * (n - 2)) * 50 + 1\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    # You can't use recursion\n    # In my case, I only used iteration, here is my solution.\n    # The key is to find the number that is the sum of n * (n+1) / 2.\n\n    def get_sum(n):\n        sum = n * (n + 1) / 2\n        return sum\n\n    sum = get_sum(n - 1)\n    while True:\n        sum += get_sum(n)\n        if sum > n * (n + 1) / 2:\n            break\n        n += 1\n    return sum\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    if n == 1:\n        return 37\n    s = 37\n    for i in range(1, n):\n        s = s + 11 * i\n    return s\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    pass\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nfrom functools import reduce\n\n\ndef find_star_num(n):\n    arr = [1, 2, 3, 5]\n    return reduce(lambda x, y: x + y, map(lambda x: x * (2 * n - x), arr))\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    '''find the nth star number'''\n    return int(str(10**(n-1))+str(n-1))\n\n# test"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\nimport math\ndef ascii_value(c):\n    return ord(c)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(c):\n    return ord(c)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    \"\"\"\n    Finds the ascii value of a character.\n    :param char: The character to be converted.\n    :return: The ascii value of the character.\n    \"\"\"\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n# Write your ascii_value function here:\ndef ascii_value(char):\n    return ord(char)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(character):\n    \"\"\"\n    Return the ascii value of the given character.\n    \"\"\"\n    return ord(character)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(ch):\n    return ord(ch)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(ch):\n    return ord(ch)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(letter):\n    return ord(letter)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\ndef check(result, expected):\n    print(\"Result: {} Expected: {}\".format(result, expected))\n    assert result == expected, \"Test Failed\"\n\ncheck(ascii_value('A'), 65)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value('1'), 49)\ncheck(ascii_value('-'), 45)\ncheck(ascii_value('C'), 67)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\ncheck(ascii_value(' '), 32)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(letter):\n    return ord(letter)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n#Hint\n#Use list comprehension\n#Even numbers at even positions\n#Use enumerate function\ndef sum_even_and_even_index(nums,index):\n    return sum([num for i,num in enumerate(nums) if i%2==0 and i==index])\n\n#Hint\n#Use list comprehension\n#Even numbers at even positions\ndef sum_even_and_even_index(nums,index):\n    return sum([num for i,num in enumerate(nums) if i%2==0 and i==index])\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    if (len(arr) < n):\n        return 0\n    if (n < 1):\n        return 0\n    count = 0\n    for i in range(0, n):\n        if(i % 2 == 0):\n            count += arr[i]\n    return count\n\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(nums,n):\n    result=0\n    for i in range(0,n-1):\n        result+=nums[i*2]\n    return result", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(list, index):\n    sum = 0\n    for i in range(len(list)):\n        if i%2 ==0 and list[i]%2 ==0:\n            sum += list[i]\n    return sum\n\ndef test_function(test_case):\n    assert sum_even_and_even_index(test_case[0], test_case[1]) == test_case[2]\n    \ntest_case_1 = [[5, 6, 12, 1, 18, 8],6,30]\ntest_case_2 = [[-1, 2, 3, 4, 5], 2, -1]\ntest_case_3 = [[-1, 2, 3, 4, 5], 4, 30]\ntest_case_4 = [[1, 2, 3, 4, 5], 2, 30]\ntest_case_5 = [[1, 2, 3, 4, 5], 4, 30]\ntest_case_6 = [[10, 20, 30, 40, 50], 2, 100]\n\ntest_function(test_case_1)\ntest_function(test_case_2)\ntest_function(test_case_3)\ntest_function(test_case_4)\ntest_function(test_case_5)\ntest_function(test_case_6)", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    result = 0\n    for i in range(0, n):\n        if arr[i] % 2 == 0:\n            result += arr[i+i]\n    return result\n\n# Test", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(numbers, index):\n    return sum(filter(lambda n: n % 2 == 0 and n != 0 and index == n, numbers))\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(numbers, index):\n    total = 0\n    for i in range(0, len(numbers), index):\n        if numbers[i] % 2 == 0:\n            total += numbers[i]\n    return total\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(nums, index):\n    sum_even = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and i == index:\n            sum_even += nums[i]\n    return sum_even\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(a, index):\n    return sum([x for i,x in enumerate(a) if i % 2 == 0 and x % 2 == 0 and i==index])\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(array,n):\n    sum = 0\n    for i in range(0, len(array)):\n        if i%2 == 0 and array[i]%2==0:\n            sum = sum + array[i]\n    return sum\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    if n < 2:\n        return 0\n    else:\n        return n**5 + even_Power_Sum(n-2)\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n# solution\ndef even_Power_Sum(n):\n    return sum(i**5 for i in range(0, n, 2))\n\n# tests", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    s = 0\n    for i in range(0,n,2):\n        s+=i**5\n    return s", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n, 2):\n        sum += pow(i, 5)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return sum(i**5 for i in range(0, n, 2))\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    result = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            result += (i ** 5)\n    return result\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(0,n+1,2):\n        sum += pow(i,5)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    return sum(i**5 for i in range(0, n, 2))\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    #return sum(i**5 for i in range(1,n+1) if i%2 == 0)\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s+=i**5\n    return s", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    \"\"\"\n    Find the sum of fifth power of first n even natural numbers.\n    :param n: int - maximum number\n    :return: int - sum\n    \"\"\"\n    return sum(i ** 5 for i in range(n) if i % 2 == 0)"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(list_of_tuples_records):\n    return [t[2] for t in list_of_tuples_records]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    res = []\n    for (i, x, y) in records:\n        res.append(y)\n    return res\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    \"\"\"\n    :param records: list of tuples\n    :return: list of rear elements\n    \"\"\"\n    return [record[-1] for record in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return [item[2] for item in records]\n\ndef rear_extract2(records):\n    return list(map(lambda x: x[2], records))\n\n#assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return [record[1] for record in reversed(records)]\n\n\n# Test cases", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(l):\n    res = []\n    for record in l:\n        res.append(record[2])\n    return res\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(lst):\n    return [record[2] for record in lst[::-1]]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    result = []\n    for r in records:\n        result.append(r[1])\n    return result\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: list of rear values\n    \"\"\"\n    return [x[1] for x in lst[::-1]]\n\n\n# +\n# Test\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\nfrom typing import List\n\ndef rear_extract(records: List[tuple]) -> list:\n    res = []\n    for (i, name, age) in records:\n        res.append(age)\n    return res\n\n# Above solution is using list comprehension, but below is more simple solution\ndef rear_extract2(records: List[tuple]) -> list:\n    res = []\n    for (i, name, age) in records:\n        res.append(age)\n    return res[::-1]"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x-y, t1, t2))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n    return tuple([x-y for x, y in zip(t1, t2)])\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple(i - j for i, j in zip(tuple1, tuple2))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\nfrom typing import Tuple\n\n\ndef substract_elements(first: Tuple[int, ...], second: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    :param first: tuple, first tuple to substract.\n    :param second: tuple, second tuple to substract.\n    :return: tuple, substracted tuple.\n    \"\"\"\n    assert len(first) == len(second)\n    result = ()\n    for i in range(0, len(first)):\n        result = result + (first[i] - second[i],)\n    return result", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n    t1_index = [i for i, x in enumerate(t2)]\n    t2_index = [i for i, x in enumerate(t1)]\n    for i in t1_index:\n        t2[i] = t2[i] - t1[t2_index.index(i)]\n    return t2\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n# Write your code below and press Shift+F10 to run the test\ndef substract_elements(tuple_1, tuple_2):\n    return tuple(map(lambda x, y: x-y, tuple_1, tuple_2))\n\ndef test_substract_elements():\n    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\ntest_substract_elements()", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    return tuple(t1[i] - t2[i] for i in range(len(t1)))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    return tuple(x1-x2 for x1,x2 in zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tup1, tup2):\n    return tuple(map(lambda x,y:x-y,tup1,tup2))"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n-1, -1, -2):\n        sum = sum + factorial(i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    return sum(binom(n,i) for i in range(0,n,2))\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    return sum([binom(n,i) for i in range(0,n,2)])\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += binomial_Coeff(n,i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(N):\n    if N<0:\n        return 0\n    binomial_Coeff_Sum = 0\n    for i in range(0,N):\n        binomial_Coeff_Sum += binomial_Coeff(N,i)\n    return binomial_Coeff_Sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    result = 0\n    for i in range(0,n,2):\n        result += binom(n,i)\n    return result\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    return sum(binom(n, i) for i in range(0, n, 2))\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, (n//2)+1):\n        sum += 2*binom(n, i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 2\n    elif n==2:\n        return 6\n    elif n==3:\n        return 24\n    else:\n        x = (even_binomial_Coeff_Sum(n-2))*(2*(n-2))\n        y = binomial_Coeff(n-2,n)\n        return x+y", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += int(comb(n, i) % 2)\n    return sum\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, number, n):\n    \"\"\"\n    :param arr: array of integer\n    :param number: number to be found\n    :param n: length of the array\n    :return: position of the last removed element\n    \"\"\"\n    return (arr.index(number) - 1) % n\n\ndef main():\n    arr = [2,5,4]\n    number = 3\n    n = 3\n    assert get_Position(arr,number,n) == 2\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,num,n):\n    pos=-1\n    for i in range(n):\n        if arr[i]!=num:\n            pos=i+1\n    return pos\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n# Solution\n\n\ndef get_Position(arr, num, index):\n    for i in range(index, -1, -1):\n        if arr[i] == num:\n            return i\n    return -1\n\n\n# Unit Test\n# Test Case 1\n# Output: 2\n# Explanation: 2 was the last removed element.\narr = [2, 5, 4]\nnum = 3\nindex = 2\nexpected = 2\noutput = get_Position(arr, num, index)", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, n, x):\n    # your code here\n    i = 0\n    for i in range(n):\n        if x != arr[i]:\n            break\n    return i\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,x,i):\n    while i != -1:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,n,x):\n    i = 0\n    while(i<n and x != arr[i]):\n        i += 1\n    return i\n\ndef main():\n    arr = [2,5,4,7,8,9,10,15,19,20]\n    x = 2\n    n = len(arr)\n    print(get_Position(arr,n,x))\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, elem, key):\n    for index, val in enumerate(arr):\n        if val == key:\n            arr.pop(index)\n        elif val == elem:\n            return index\n    return -1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,x, n):\n    i=n-1\n    while i>=0:\n        if arr[i]==x:\n            return i\n        i=i-1\n    return -1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,n,e):\n    for i in range(n-1,-1,-1):\n        if arr[i] == e:\n            return i\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\ndef volume_cylinder(radius, height):\n    return (1.0/3.0)*math.pi*radius**2*height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return radius ** 2 * math.pi * height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,length):\n    return 1/3 * radius**2 * length\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\n# TODO: Write a function to find the volume of a cylinder.\ndef volume_cylinder(radius,height):\n    return (math.pi*radius*radius*height)\n\n# TODO: Make a function to find the surface area of a cylinder.\ndef surface_area_cylinder(radius,height):\n    return (2*math.pi*radius*radius + math.pi*radius*height)\n\n# Tests\n#print(volume_cylinder(10,5))\n#assert volume_cylinder(10,5)==1570.7500000000002\n#print(surface_area_cylinder(10,5))\n#assert surface_area_cylinder(10,5)==1206.6367449999999\n#print(surface_area_cylinder(1,5))\n#assert surface_area_cylinder(1,5)==24.065756330999998\n#print(surface_area_cylinder(1,1))\n#assert surface_area_cylinder(1,1)==6.283185307179586", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius, height):\n\treturn (2*3.14*radius*height)\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r,l):\n    return 2*pi*r*l", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r,h):\n    \"\"\"\n    Write a function to find the volume of a cylinder.\n\n    :param r: The radius of the cylinder.\n    :type r: float\n    :param h: The height of the cylinder.\n    :type h: float\n\n    :return: The volume of the cylinder.\n    :rtype: float\n    \"\"\"\n    return pi * r ** 2 * h\n\n# This is the test. Do not modify anything below.\ntest.describe(\"Testing volume_cylinder function\")\ntest.assert_equals(volume_cylinder(10,5),1570.75)\ntest.assert_equals(volume_cylinder(5,10),1570.75)\ntest.assert_equals(volume_cylinder(10,10),6236.75)\ntest.assert_equals(volume_cylinder(10,3),1040.75)\ntest.assert_equals(volume_cylinder(5,5),311.75)\ntest.assert_equals(volume_cylinder(5,0.2),0.1015625)\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(height,radius):\n    # Write your code here\n    pi=3.14159265359\n    return pi*radius**2*height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius, height):\n\timport math\n\treturn math.pi * radius**2 * height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n    The volume of a cylinder is given by:\n    volume = \u03c0 * radius * height ^ 2 / 2\n    Args:\n        radius: radius of the cylinder\n        height: height of the cylinder\n    Returns:\n        Volume of the cylinder\n    \"\"\"\n    return math.pi * radius * height ** 2 / 2\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,v):\n    return {k:d[k] for k in d if d[k]>=v}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n#Write your code here\ndef dict_filter(dict1, value):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value == value:\n            new_dict[key] = value\n    return new_dict\n\n#assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dic, value):\n    output_dict = {}\n    for key in dic:\n        if value in dic[key]:\n            output_dict[key] = dic[key]\n    return output_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, value):\n    return {key: value for (key, value) in dictionary.items() if value==value}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dict_in, value):\n    return {k:v for k,v in dict_in.items() if v==value}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d,v):\n    new_dict = {}\n    for key, value in d.items():\n        if value==v:\n            new_dict[key]=value\n    return new_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d, val):\n    new_dict = {}\n    for k, v in d.items():\n        if val == v:\n            new_dict[k] = v\n    return new_dict\n\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_in,value):\n    dict_out = {}\n    for key,val in dict_in.items():\n        if val == value:\n            dict_out[key] = val\n    return dict_out\n# Tests", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,v):\n    filteredDict = {}\n    for key,value in d.items():\n        if value == v:\n            filteredDict[key] = value\n    return filteredDict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,v):\n    rtn={}\n    for k,e in d.items():\n        if e==v:\n            rtn[k]=e\n    return rtn\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, tuple):\n            count = count + count_first_elements(item)\n        else:\n            break\n    return count\n\n# Tests", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(t):\n    elements = 0\n    for item in t:\n        if type(item) is tuple:\n            elements += 1\n        else:\n            break\n    return elements\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(items):\n    return items[0] # Replace this body with your solution.\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(record):\n    \"\"\"\n    Finds the first element in the record, and then counts the number of \n    occurrences of this element in the record.\n    \n    If the record does not contain any tuples, then returns 0\n    \"\"\"\n    first_element = record[0]\n    for index, element in enumerate(record):\n        if element == first_element:\n            return index\n    return 0", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nfrom typing import Any, Sequence\n\n\ndef count_first_elements(elements: Sequence[Any]) -> int:\n    count = 0\n    for element in elements:\n        if element[1] == True:\n            count = count + 1\n            break\n    return count", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if i == tup[0]:\n            count += 1\n    return count", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple):\n    first_elements = []\n    for element in tuple:\n        if isinstance(element, tuple) or isinstance(element, list):\n            first_elements.append(element[0])\n        elif element > 5:\n            first_elements.append(element)\n    first_elements.sort()\n    #for element in first_elements:\n    #    if element < 7:\n    #        first_elements.remove(element)\n    return len(first_elements)\n\ndef test():\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\ntest()", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tup):\n    counter = 0\n    for element in tup:\n        if type(element) == tuple:\n            for sub_element in element:\n                counter += 1\n                break\n        else:\n            counter += 1\n            break\n    return counter\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tup):\n    count = 0\n    for i in range(len(tup)):\n        if type(tup[i]) == tuple:\n            count += count_first_elements(tup[i])\n        else:\n            break\n    return count", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(elements):\n    return elements.index(elements[0])\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    pass\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    if n == 1:\n        return 1\n    else:\n        d = n*(n-1)/2\n        d += n\n        return d\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"Returns nth decagonal number\"\"\"\n    # Your code here\n\ndef main():\n    print(is_num_decagonal(5))\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    return n*(n+1)//2\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n#from math import sqrt\n\ndef is_num_decagonal(n):\n    for i in range(1,n+1):\n        root = int(sqrt(i*i*10 + 30*i))\n        if root*(root + 10) == i*i*10 + 30*i:\n            return i*i*10 + 30*i\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    result = 1\n    for i in range(1, n):\n        result = result + 10 * i\n    return result\n\ndef decagonal_num(n):\n    result = 1\n    for i in range(1, n):\n        result = result + 10 * i\n    return result\n\ndef decagonal_num(n):\n    num = 1\n    for i in range(1, n):\n        num += 10 * i\n    return num\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return (n*(3*n-1)/2) + (n*(3*n-1)/2)\n\ndef decagonal_number(n):\n    \"\"\"\n    >>> decagonal_number(10)\n    270\n    \"\"\"\n    return is_num_decagonal(n)\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    pass\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    return (n*(n+1))*(2*n+1)/6\n\ndef nth_decagonal_number(n):\n    return sum([is_num_decagonal(i) for i in range(n+1)])\n\n# TODO: write your code here\n\n# -\n\n# Let's test the algorithm's performance. The following code will run the algorithm for several numbers:\n\n# +\nimport time\n\nstart_time = time.time()", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(num):\n    for i in range(1,num):\n        sum = 0\n        for j in range(1,num):\n            sum += ((i**2) + (j**2))\n        if sum == num:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(lst, key):\n    found = False\n    for i in range(len(lst)):\n        if lst[i] == key:\n            found = True\n            break\n    if found:\n        return True, i\n    else:\n        return False, -1\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr,x):\n    for i in range(len(arr)):\n        if x == arr[i]:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    found = False\n    index = 0\n    while found == False and index < len(array):\n        if array[index] == element:\n            found = True\n        else:\n            index += 1\n    if found == False:\n        index = -1\n    return found, index\n\ndef main():\n    array = [11,23,58,31,56,77,43,12,65,19]\n    element = 31\n    result = sequential_search(array, element)\n    print(result)\n    result = sequential_search(array, 23)\n    print(result)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr,ele):\n    for i in range(len(arr)):\n        if ele == arr[i]:\n            return (True,i)\n    return (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, num):\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return (True, i)\n    return (False, -1)", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array,item):\n    for i in range(len(array)):\n        if array[i]==item:\n            return (True,i)\n    return (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(a,x):\n    # Start with 0 and last element of list\n    i = 0\n    j = len(a) -1\n    \n    while i < j:\n        mid = (i+j)/2\n        if a[mid] == x:\n            return True, mid\n        elif a[mid] > x:\n            j = mid -1\n        else:\n            i = mid + 1\n    if a[i] == x:\n        return True, i\n    else:\n        return False, -1\n    ", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(list,val):\n    found = False\n    for i in range(len(list)):\n        if val == list[i]:\n            found = True\n            return found, i\n    return found, None\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, item):\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return (True, i)\n    return (False, -1)\n\ndef main():\n    arr = [11,23,58,31,56,77,43,12,65,19]\n    assert sequential_search(arr, 31) == (True, 3)\n    assert sequential_search(arr, 33) == (False, -1)\n    assert sequential_search(arr, 23) == (True, 1)\n    assert sequential_search(arr, 12) == (True, 8)\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(a,x):\n    \"\"\"\n    :param a: List of integers\n    :param x: an integer\n    :return: index of element x if found\n    \"\"\"\n    for i in range(len(a)):\n        if x == a[i]:\n            return (True,i)\n    return (False,-1)\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(list):\n    return len(set(list)) == len(list)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(li):\n    if len(li) == 0:\n        return True\n    else:\n        for i in range(len(li)):\n            for j in range(i+1, len(li)):\n                if li[i] == li[j]:\n                    return False\n        return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(list_of_elements):\n    for i in range(len(list_of_elements)-1):\n        if list_of_elements[i] == list_of_elements[i+1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    \"\"\"\n    Returns True if all elements in lst are unique, False otherwise.\n    \"\"\"\n    # you have to use a set to keep track of unique elements\n    # Hint: for every element in the list, see if it exists in the set\n    return len(lst) == len(set(lst))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(my_list):\n    return len(my_list) == len(set(my_list))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(l):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(l) == len(set(l))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(my_list):\n    for i in my_list:\n        for j in my_list:\n            if i == j:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(set(lst)) == len(lst)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a,b):\n    c=[]\n    for i in map(lambda x,y: x-y,a,b):\n        c.append(i)\n    return c\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a,b):\n    return list(map(lambda x,y:x-y,a,b))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1,list2):\n    return list(map(lambda x,y:x-y,list1,list2))\n\n\nsub_list([1, 2, 3],[4,5,6])\n\n\n# +", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(a,b):\n    return list(map(lambda x,y: x-y,a,b))\n\n\nsub_list([1, 2, 3], [4,5,6])", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(x,y):\n    return list(map(lambda i,j: i-j,x,y))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a, b):\n    return map(lambda x: x - a, b)", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    assert len(list1)==len(list2)\n    return list(map(lambda x,y: x-y, list1,list2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(a,b):\n    return list(map(lambda x: x-y for x,y in zip(a,b)))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1,l2):\n    return map(lambda x,y:x-y,l1,l2)\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    digits = set()\n    for digit in num:\n        digits.add(digit)\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    if n<10:\n        return True\n    if n%10==n:\n        return True\n    n=n//10\n    while n>0:\n        if n%10>n:\n            return False\n        n=n//10\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    return True if str(n) == \"\".join(sorted(str(n))) else False\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\nimport math\ndef validate(num):\n    if num == 0:\n        return True\n    num_string = str(num)\n    num_dict = {}\n    for digit in num_string:\n        if digit in num_dict:\n            num_dict[digit] = num_dict[digit] + 1\n        else:\n            num_dict[digit] = 1\n    for k, v in num_dict.items():\n        if v > k:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    if not num:\n        return False\n    s = str(num)\n    f = set()\n    for i in range(10):\n        f.add(i)\n    for i in s:\n        if f.pop(int(i)) == 0:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(x):\n\tx = str(x)\n\tcount = [0] * 10\n\tfor digit in x:\n\t\tcount[int(digit)] += 1\n\tfor digit in count:\n\t\tif digit > 0:\n\t\t\tif digit > int(digit):\n\t\t\t\treturn False\n\treturn True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    result = True\n    for i in n:\n        if i in str(n) and int(i) > int(i):\n            result = False\n    return result\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    # TODO: Implement the function\n    x = number\n    y = number\n    z = 0\n    if number == 0:\n        return True\n    for digit in str(x):\n        if int(digit) > z:\n            z = int(digit)\n    for digit in str(y):\n        if int(digit) > z:\n            z = int(digit)\n    for digit in str(x):\n        if int(digit) > int(digit):\n            return False\n    for digit in str(y):\n        if int(digit) > int(digit):\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    digits = [int(i) for i in str(n)]\n    for i in digits:\n        if i <= digits.count(i):\n            return True\n        else:\n            return False"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n# Write your code here\n\ndef check_element(li, elem):\n    return (elem == li[0]) and (len(li) == 1) or elem == li[0] and check_element(li[1:], elem)\n\n# Solution 2\n\ndef check_element(li, elem):\n    for e in li:\n        if e != elem:\n            return False\n    return True\n\n# Solution 3\n\ndef check_element(li, elem):\n    return len(li) == 0 or li[0] == elem and check_element(li[1:], elem)", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(items,element):\n    for item in items:\n        if item!=element:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list,element):\n    for i in range(len(list)):\n        if list[i]!=element:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list,element):\n    return all(item == element for item in list)\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(elements,value):\n    for element in elements:\n        if element != value:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(items,element):\n    return all([item==element for item in items])\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list_of_items,item):\n    return not all([item==i for i in list_of_items])\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list,item):\n    for i in list:\n        if i!=item:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst,val):\n    return lst.count(val) == len(lst)", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(the_list, element):\n    return all(item == element for item in the_list)\n\n#Test code"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if len(text) >= 3 and text[-2] == 'b' and text[-1] == 'b':\n        return text[-3]\n    else:\n        return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    \"\"\"\n    Args:\n        text (string): the string to be matched\n    Returns:\n        str: 'matched' if the text matches the required format, otherwise, 'Not matched'\n    \"\"\"\n    if (text.find('a') != -1) and (len(text.split('a')) == 2 or len(text.split('a')) == 3):\n        return \"matched\"\n    else:\n        return \"Not matched\"", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if(text[0]==\"a\" and text[1:3]==\"b\"):\n        return \"Matched!\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if 'a' not in text:\n        return \"Not matched!\"\n    elif text.count('a')>1:\n        return \"Not matched!\"\n    elif 'b' in text[1:]:\n        return \"Not matched!\"\n    elif text.count('b')>3:\n        return \"Not matched!\"\n    else:\n        return \"Matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if len(text) > 1:\n        if text[-2:]==\"bb\" or text[-2:]==\"bb\":\n            return(\"Matched!\")\n        else:\n            return(\"Not matched!\")\n    else:\n        return(\"Not matched!\")\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if text.count('a') != 1 or text.count('b') < 2 or text.count('b') > 3:\n        return \"Not matched!\"\n    else:\n        return \"Matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if \"a\" in text and \"b\" in text[1:]:\n        if len(text[1:]) == 2 or len(text[1:]) == 3:\n            return \"matched!\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(string):\n    if string[0:1]!='a' or string[1:3]!='bb':\n        return \"Not matched!\"\n    else:\n        return \"Matched\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if text[0] == \"a\" and text[-1] == \"b\" and len(text[1:-1]) in range(2,4):\n        return \"Matched\"\n    else:\n        return \"Not matched!\"\n\n# TEST CODE", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(str):\n    str = str.strip()\n    if str[0]==\"a\" and len(str)>=3:\n        if str[-2:]==\"bb\" or str[-3:]==\"bbb\":\n            return \"Matched!\"\n        else:\n            return \"Not matched!\"\n    else:\n        return \"Not matched!\"\n\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    prev, res = [None]*n, -float('inf')\n    for i in range(n):\n        prev[i] = arr[i]\n        for j in range(i + 1, i + k):\n            prev[j] = prev[j - 1] + arr[j]\n        res = max(res, prev[i + k - 1])\n    return res\n\n\n# Test cases:\narr = [10, 20, -30, -1]\nk = 4\nn = 3", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nimport sys\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    sum_arr = 0\n    for i in range(0, n):\n        sum_arr += arr[i]\n    if sum_arr < 0:\n        return sum_arr\n    elif sum_arr == 0:\n        return 0\n    max_sum = sum_arr\n    for i in range(k):\n        sum_arr = 0\n        for j in range(0, n):\n            sum_arr += arr[j]\n            if sum_arr > max_sum:\n                max_sum = sum_arr\n    return max_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    arr = arr * (k+1)\n    arr = [val for i, val in enumerate(arr) if i % (k+1) == 0]\n    max_sum = arr[0]\n    for i in range(len(arr)-1):\n        max_sum = max(max_sum, arr[i] + arr[i+1])\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\nfrom typing import List\n\n\ndef max_sub_array_sum_repeated(arr: List[int], k: int, n: int) -> int:\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            tmp = 0\n            for r in range(k):\n                tmp += arr[j - r]\n            if tmp > res:\n                res = tmp\n    return res\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, n):\n    sum_ = 0\n    max_sum = 0\n    for i in range(n):\n        sum_ += arr[i]\n        if i < k:\n            max_sum = max(max_sum, sum_)\n        else:\n            max_sum = max(max_sum, sum_ - arr[i - k])\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(array, k, n):\n    max_sum = max_sum_array = max(array)\n    for i in range(n):\n        array_sum = sum(array[i:i+k])\n        if array_sum > max_sum:\n            max_sum = array_sum\n            max_sum_array = array[i:i+k]\n    return max_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(a, k, n):\n    a = a[0:n:k]\n    sum_of_arr = 0\n    res = -1*float('inf')\n    for i in range(len(a)):\n        sum_of_arr = sum_of_arr + a[i]\n        if sum_of_arr > res:\n            res = sum_of_arr\n    return res\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(array, k, times):\n    res = 0\n    if len(array) <= 1:\n        return res\n    for i in range(0, k * times):\n        res += array[i % len(array)]\n    res = max(res, sum(array[:k]))\n    res = max(res, sum(array[-k:]))\n    return res\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nfrom typing import List\n\n\ndef max_sub_array_sum_repeated(arr: List[int], k: int, m: int) -> int:\n    \"\"\"\n    Using two pointers to check whether there is a possible subarray with sum larger than the target sum.\n    :param arr: an array of integer\n    :param k: number of times to repeat the given array\n    :param m: number of numbers in the modified array\n    :return: the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    n = len(arr)\n    if n < m:\n        return 0\n    max_sum = arr[0] * k\n    l = r = 0\n    for i in range(m):\n        max_sum = max(max_sum, 0) + arr[i]\n        l = max(l, 0)\n        while l < n and r < n:\n            max_sum = max(max_sum, 0) + arr[l]\n            r += 1\n            if r - l == k:\n                break\n        l += 1\n        r = i + 1\n    return max_sum\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n# Let's say we start with 2\n# We go to 4\n# Then 6\n# Then 8\n# ... and so on\n# And we get the sum of squares of 2, 4, 6, 8, etc.\ndef square_Sum(n):\n    sum = 0\n    for i in range(2, n, 2):\n        sum = sum + (i ** 2)\n    return sum\n\n\n# print(square_Sum(5))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    return (n * (n + 1)) * (2 * n + 1) // 6\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return (n * (n + 1)) * (2 * n + 1) / 6\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(2, n):\n        sum += i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n# Solution\ndef square_Sum(n):\n    total = 0\n    for num in range(0,n,2):\n        total += num**2\n    return total\n\n\n# Test", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum_even = 0\n    for i in range(0, n, 2):\n        sum_even += i**2\n    return sum_even\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    :param n: (int)\n    :return: (int)\n    \"\"\"\n    return sum(i**2 for i in range(n, 0, -2))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    return 0", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n\tsum = 0\n\tfor i in range(0,n,2):\n\t\tsum += i*i\n\treturn sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n**2 + square_Sum(n-2)\n\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, prime_set):\n    result = [0]*len(arr)\n    for i, val in enumerate(arr):\n        if val < 0 or val >= p:\n            continue\n        result[i] = (prime_set[val] * prime_set[p-val] % p) % p\n    return result\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom typing import Tuple, List\n\n\ndef modular_inverse(arr: List[int], prime: int, modulo: int) -> int:\n    for x in range(modulo):\n        if all([ (x * y) % prime == 1 for y in arr]):\n            return x\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom math import gcd\n\n\ndef modular_inverse(a, p, m=None):\n    \"\"\"Return the modular inverse of a, modulo p\"\"\"\n    if m is None:\n        m = p\n    if gcd(a, m) != 1:\n        raise ValueError\n    return pow(a, -1, m)\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, M):\n    for i in range(M):\n        if arr[i] % p == 0:\n            return i\n    return -1\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(array, p, a=0):\n    n = len(array)\n    for i in range(n):\n        a = (a * array[i] + p) % p\n    return a\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\n# modular_inverse([ 1, 6, 4, 5 ], 4, 7) = 2\n# 1^2 + 6^2 + 4^2 + 5^2 \u2261 2 (mod 7)\n\n\ndef modular_inverse(numbers, prime, mod):\n    \"\"\"\n    :param numbers: List of integers\n    :param prime: Prime number\n    :param mod: Modulus\n    :return: Integer\n    \"\"\"\n    result = 0\n\n    for number in numbers:\n        result ^= number\n\n    result %= prime\n\n    for number in numbers:\n        result = result * number % mod\n\n    return result\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, mod, p):\n    for i in arr:\n        if i*mod%p == 1:\n            return i\n    return -1", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, n):\n    invs = [0] * len(arr)\n    for i, a in enumerate(arr):\n        x = pow(a, -1, p)\n        invs[x] = i\n    return [invs[x] for x in arr]\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(array, p, mod):\n    sum = 0\n    for item in array:\n        sum += item\n        sum %= mod\n    return pow(sum, -1, mod)\n\n#---end-of-function-inverse\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(array, prime, mod):\n\n    # The list of all elements having modular inverse under p\n    result = []\n\n    for element in array:\n\n        # if the modular inverse under p of the element is equal to itself,\n        # then the element is a multiple of p, and hence should be in the result list\n        if pow(element, prime-2, mod) == element:\n            result.append(element)\n\n    return result\n\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    odd = 0\n    for i in range(1, 366, 2):\n        if i <= year:\n            if i % 100 == 0 and i % 400 != 0:\n                odd += 1\n            elif i % 4 == 0 and i % 100 != 0 or i % 400 == 0:\n                odd += 1\n    return odd\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return year % 2 + year // 2 + 1\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    return (year+1)//2 - (year+1) % 2\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    \"\"\"\n    Write a python function to calculate the number of odd days in a given year.\n    \"\"\"\n    return (year - 1) / 4 + 1\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n# Solution:\ndef odd_Days(n):\n    return sum(1 for i in range(1, n) if i % 2 == 1)\n\n\n# Tests:", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    \"\"\"Calculate the number of odd days in a given year.\"\"\"\n    odd_Days = []\n    for days in range(year):\n        if days % 2 == 0:\n            odd_Days.append(days)\n    return odd_Days\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    x = 0\n    for i in range(1,year+1):\n        if i % 2 == 1:\n            x += 1\n    return x\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    count = 0\n    if year % 400 == 0:\n        return count\n    elif year % 4 == 0:\n        return count\n    elif year % 100 == 0:\n        return count\n    elif year % 10 == 1:\n        return count + 1\n    elif year % 10 == 3:\n        return count + 1\n    elif year % 10 == 5:\n        return count + 1\n    elif year % 10 == 7:\n        return count + 1\n    else:\n        return count", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n# Write your code here\ndef odd_Days(year):\n    n=0\n    for i in range(1,year+1):\n        if i%2 !=0:\n            n=n+1\n    return n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    count = 0\n    for i in range(1,366):\n        if i%2!=0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(list_of_lists):\n    max_length = 0\n    max_list = []\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return (max_length, max_list)\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(l):\n    max_len = 0\n    max_list = None\n    for i in l:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_len, max_list\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_len = 0\n    max_list = []\n    for l in lst:\n        if len(l) > max_len:\n            max_list = l\n            max_len = len(l)\n    return max_len, max_list\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(arr):\n    # write your code here\n    n = len(arr)\n    res = 0\n    result = []\n    for i in range(n):\n        if len(arr[i]) > res:\n            res = len(arr[i])\n            result = [arr[i]]\n        elif len(arr[i]) == res:\n            result.append(arr[i])\n    return res, result", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(nums):\n    max_len = 0\n    max_nums = []\n    for num in nums:\n        if len(num) > max_len:\n            max_len = len(num)\n            max_nums = [num]\n        elif len(num) == max_len:\n            max_nums.append(num)\n    return (max_len, max_nums)\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(L):\n    if not L:\n        return []\n    L.sort(key = lambda x:len(x), reverse=True)\n    return L[0]\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    longest = 0\n    for lst in lists:\n        if len(lst) > longest:\n            longest = len(lst)\n            longest_lst = lst\n    return (longest, longest_lst)\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    # Your code here\n    result = []\n    result_len = 0\n    for list in lists:\n        if len(list) > result_len:\n            result_len = len(list)\n            result = list\n    return (result_len, result)\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    maxlen = 0\n    maxlists = []\n    for l in lists:\n        if len(l) > maxlen:\n            maxlen = len(l)\n            maxlists = [l]\n        elif len(l) == maxlen:\n            maxlists.append(l)\n    return maxlen, maxlists\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    \"\"\"\n    :param lst: a list of lists\n    :return: max length of lists in lst\n    \"\"\"\n    longest_list = [0]\n    for item in lst:\n        if len(item) > len(longest_list):\n            longest_list = item\n    return len(longest_list), longest_list\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nstdin = sys.stdin\n\n\ndef main():\n    ni = lambda: int(ns())\n    na = lambda: list(map(int, stdin.readline().split()))\n    ns = lambda: stdin.readline().strip()\n\n    def dp(n, k):\n        if k == 1:\n            return 1\n        if n == k:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if k == 2:\n            return 2\n        if n == k:\n            return 1\n        ans = 0\n        for i in range(1, n - k + 2):\n            ans += dp(i - 1, k - 1) * dp(n - i, k - 1)\n        return ans\n\n    n, k = na()\n    print(dp(n, k))\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return k\n\n    if k == 1:\n        return n + 1\n\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\nfrom typing import List\n\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n    Runtime: O(n * k)\n    \"\"\"\n    return _count_no_of_ways(n, k, 0, 0, k - 1)\n\n\ndef _count_no_of_ways(n: int, k: int, current_color: int, current_count: int, max_color: int) -> int:\n    if n == 0:\n        return 1\n\n    if current_color == max_color:\n        return 0\n\n    result = 0\n\n    for color in range(k):\n        if current_color == color:\n            continue\n        if current_color == current_count or color == current_count:\n            continue\n\n        result += _count_no_of_ways(n - 1, k, color, current_count + 1, max_color)\n\n    return result\n\n\n# Tests", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n < 2 or k < 2:\n        return 1\n\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n\tdp = [[0 for x in xrange(k)] for y in xrange(n)]\n\tdp[0][0] = 1\n\n\tfor i in xrange(1, n):\n\t\tfor j in xrange(k):\n\t\t\tdp[i][j] = dp[i-1][j]\n\t\t\tif j < k - 1:\n\t\t\t\tdp[i][j] += dp[i-1][j+1]\n\treturn dp[-1][-1]\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    # write your code here\n    if n == 0 or k == 0:\n        return 0\n\n    # M(n, k) = C(k - 1, 2) * M(n - 1, k - 1) + C(k - 1, 1) * M(n - 1, k)\n    # M(n, k) = C(k - 1, 2) * M(n - 1, k - 1) + C(k - 1, 1) * M(n - 1, k)\n    # M(n, k) = C(k - 1, 2) * M(n - 1, k - 1) + C(k - 1, 1) * M(n - 1, k)\n    return C(k - 1, 2) * count_no_of_ways(n - 1, k - 1) + C(k - 1, 1) * count_no_of_ways(n - 1, k)\n\n\ndef C(n, k):\n    if k == 0:\n        return 0\n    return C(n - 1, k - 1) + C(n - 1, k)\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n\ta = [1]*k\n\tb = [1]*k\n\n\tif n == 1:\n\t\treturn 1\n\n\tfor i in range(2, n+1):\n\t\ta[i] = a[i-1] + a[i-2]\n\n\t\tb[i] = b[i-1] + b[i-2]\n\n\treturn a[n-1] + b[n-1]\n\n\n# Tests", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    return k**n * factorial(k-1)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    ways = 0\n    #def helper(i, j, available_colors, available_colors_count, count):\n    for i in range(n):\n        for j in range(i + 1, n):\n            for colors in combinations(range(k), 2):\n                if colors[0] != colors[1]:\n                    available_colors = [color for color in range(k) if color not in colors]\n                    available_colors_count = len(available_colors)\n                    count = 0\n                    for _ in range(i - 1, -1, -1):\n                        if available_colors[available_colors_count - 1] == available_colors_count:\n                            count += 1\n                            available_colors_count -= 1\n                        else:\n                            break\n\n                    for _ in range(j + 1, n):\n                        if available_colors[available_colors_count - 1] == available_colors_count:\n                            count += 1\n                            available_colors_count -= 1\n                        else:\n                            break\n\n                    ways += count\n    return ways\n\n\ndef count_no_of_ways_2(n, k):\n    ways = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for colors in combinations(range(k), 2):\n                if colors[0] != colors[1]:\n                    available_colors = [color for color in range(k) if color not in colors]\n                    available_colors_count = len(available_colors)\n                    count = 0\n                    for _ in range(i - 1, -1, -1):\n                        if available_colors[available_colors_count - 1] == available_colors_count:\n                            count += 1\n                            available_colors_count -= 1\n                        else:\n                            break\n\n                    for _ in range(j + 1, n):\n                        if available_colors[available_colors_count - 1] == available_colors_count:\n                            count += 1\n                            available_", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nimport itertools\n\ndef count_no_of_ways(n, k):\n    def paint_fence(posts, k):\n        return list(itertools.product([0, 1], repeat=k))\n\n    def next_pos(pos, fence, k):\n        result = []\n        for i in range(k):\n            if i == pos:\n                result.extend([pos])\n            elif fence[i] == fence[pos]:\n                result.extend([i])\n        return result\n\n    result = []\n    for k in range(1, k+1):\n        fence = paint_fence(range(n), k)\n        for pos in range(n):\n            next_positions = next_pos(pos, fence, k)\n            result.extend(list(itertools.permutations(next_positions)))\n\n    return len(result)\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\nimport sys\nfrom fractions import Fraction\n\ndef find(x,y):\n    return Fraction(x,y)\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a/b\n\n# assert find(10,3) == 3\n# assert find(10,5) == 2\n# assert find(5,10) == 0.5\n# assert find(5,5) == 1\n# assert find(5,0) == 5\n# assert find(0,5) == 0\n# assert find(10,0) == 0\n# assert find(0,10) == 0\n# assert find(10,10) == 1\n# assert find(0,0) == 0\n# assert find(10,-10) == 0\n# assert find(-10,10) == -1\n# assert find(10,-1) == 10\n# assert find(-10,1) == -10\n# assert find(-1,10) == -1\n# assert find(1,-10) == -10\n# assert find(-1,-10) == 1\n# assert find(0,-10) == -1\n# assert find(-1,0) == 1\n# assert find(-1,-1) == 1\n# assert find(1,-1) == -1\n# assert find(-1,0) == 1\n# assert find(1,0) == 1\n# assert find(0,1) == 0\n# assert find(0,1) == 0\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert find(1,1) == 1\n# assert", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1,num2):\n    return int(num1/num2)\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\n# int find(int a, int b)\n# {\n# \treturn a/b;\n# }\n\ndef find(a, b):\n\t# Return a / b\n\treturn a/b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(n,d):\n    \"\"\"\n    Return quotient of n and d\n    \"\"\"\n    if d == 0:\n        return 0\n    elif n < d:\n        return 0\n    else:\n        return n / d\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    if a>b:\n        return b/a\n    else:\n        return a/b\n# Write a python function to find remainder of two numbers.", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(n,d):\n    return n/d", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    return a/b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    if b==0:\n        return 0\n    else:\n        return int(a/b)\n\n#2. Write a python function to find remainder of two numbers.", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1, num2):\n    \"\"\"\n    Return quotient of num1 and num2\n    \"\"\"\n    if num2 == 0:\n        raise ValueError('Cannot divide by zero')\n    return num1 / num2\n\ndef test_find():\n    assert find(10, 3) == 3\n    assert find(10, 0) == 0\n    assert find(10, 1) == 10\n\ndef main():\n    print(find(10, 3))\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\ndef otherside_rightangle(a,b):\n    c=math.sqrt((a**2)+(b**2))\n    c=c/2\n    return c", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    import math\n    return math.sqrt(a**2 + b**2)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    c=np.sqrt(a**2+b**2)\n    return c", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return a**2 + b**2", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    # write your code here\n    from math import hypot\n    c=hypot(a,b)\n    return c\n\n\n\n# write your code here", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n\tc=sqrt((a**2)+((b**2)))\n\treturn c", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a, b):\n    return (a**2 + b**2)**0.5 - (a + b)\n\n\n# +\n# TODO: Write a function to find the circumference of a circle.", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(x,y):\n    return math.sqrt(x**2+y**2-x)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    a=float(a)\n    b=float(b)\n    s=math.sqrt(a*a+b*b)\n    s=s/(2*b)\n    return s\n# other method\ndef otherside_rightangle(a,b):\n    a=float(a)\n    b=float(b)\n    c=math.sqrt(a*a+b*b)\n    c=c/2\n    c=c/b\n    return c\n# Test program", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(side1, side2):\n    other_side = ((side1**2 + side2**2)**0.5) - side1\n    return other_side"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n    max_value = list[0]\n    for value in list[1:]:\n        if value > max_value:\n            max_value = value\n    return max_value\n\ndef test_max_val():\n    list = ['Python', 3, 2, 4, 5, 'version']\n    assert max_val(list) == 5", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n    return max(list, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(my_list):\n    max_val = None\n    for item in my_list:\n        if type(item) == str:\n            item = item.lower()\n            item = item[0].upper() + item[1:]\n        if type(item) == int:\n            if not max_val or max_val < item:\n                max_val = item\n        elif type(item) == str:\n            item = int(item.replace(\".\", \"\"))\n            if not max_val or max_val < item:\n                max_val = item\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(arr):\n    return max(arr)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(data):\n    if not data:\n        return None\n    max_val=data[0]\n    for val in data:\n        if type(val) is str and val.isdigit():\n            max_val = max(max_val,int(val))\n            continue\n        elif type(val) is int:\n            max_val = max(max_val,val)\n            continue\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(nums):\n    max_value = nums[0]\n    for num in nums:\n        if num > max_value:\n            max_value = num\n    return max_value\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(my_list):\n    return max(my_list)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(L):\n    max_value = L[0]\n    for item in L:\n        if item > max_value:\n            max_value = item\n    return max_value\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(x):\n    y=max(x)\n    return y\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(data):\n    max_val = 0\n    for i in data:\n        if type(i) == str:\n            for j in range(len(i)):\n                if i[j].isalpha():\n                    max_val = max(max_val, int(i[j]))\n        elif type(i) == int:\n            max_val = max(max_val, i)\n        else:\n            raise TypeError(\"type error\")\n\n    return max_val\n\n# 5.0.2\ndef max_val(data):\n    max_val = 0\n    for i in data:\n        if type(i) == int:\n            max_val = max(max_val, i)\n        elif type(i) == str:\n            for j in range(len(i)):\n                if i[j].isalpha():\n                    max_val = max(max_val, int(i[j]))\n        else:\n            raise TypeError(\"type error\")\n\n    return max_val\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    if num==0:\n        return 0\n    div=1\n    for i in range(1,num+1):\n        if num%i==0:\n            div+=i\n    return div\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    if n<=1:\n        return 1\n    for i in range(1,n+1):\n        if n%i==0:\n            return i+n//i\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n# Complete the sum_div function below.\ndef sum_div(n):\n    count = 0\n    for x in range(1, int(n / 2)):\n        if n % x == 0:\n            count += x + n//x\n\n    if n % 2 == 0:\n        count += n//2\n\n    if n == 1:\n        count += 0\n\n    return count\n\n# Complete the sum_div_prime function below.\ndef sum_div_prime(n):\n    count = 0\n    for x in range(1, n):\n        if n % x == 0:\n            count += 1\n\n    return count\n\n# Complete the sum_div_prime_two function below.\ndef sum_div_prime_two(n):\n    count = 1\n    for x in range(2, n):\n        if n % x == 0:\n            count += 1\n\n    return count\n\n# Complete the sum_div_prime_three function below.\ndef sum_div_prime_three(n):\n    count = 0\n    for x in range(2, n):\n        if n % x == 0:\n            count += 1\n\n    if n == 1:\n        count += 0\n\n    return count\n\n# Complete the sum_div_prime_four function below.\ndef sum_div_prime_four(n):\n    count = 0\n    for x in range(1, n):\n        if n % x == 0:\n            count += 1\n\n    if n == 1:\n        count += 0\n\n    return count\n\n# Complete the sum_div_prime_five function below.\ndef sum_div_prime_five(n):\n    count = 1\n    for x in range(2, n):\n        if n % x == 0:\n            count += 1\n\n    if n == 1:\n        count += 0\n\n    return count\n\n# Complete the sum_div_prime_six function below.\ndef sum_div_prime_six(n):\n    count = 0\n    for x in range(1, n):\n        if n % x == 0:\n            count += 1\n\n    if n == 1:\n        count += 0\n\n   ", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    div = []\n    for i in range(1,num):\n        if num%i==0:\n            div.append(i)\n    return sum(div)\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    sum=0\n    for i in l:\n        sum=sum+i\n    return sum\n\n\n# 2.  Write a function to return the sum of all divisors of a number\n# except for 1 and the number itself.", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    divisors=set()\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.add(i)\n    return sum(divisors)\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(num):\n    assert num >= 0\n    sum = 1\n    for i in range(1, num+1):\n        if (num%i) == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    ans = n\n    while n != 1:\n        while n % ans == 0:\n            ans += n / ans\n        n -= 1\n    return ans", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n\tassert type(n) == int\n\treturn sum(get_divs(n))\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum=1\n    for i in range(1,n+1):\n        if n%i==0:\n            sum+=i\n    return sum\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,size):\n    # Hint:\n    # use 'insertion sort' to sort the array first, \n    # and then use two pointers to compare all pairs of elements.\n    # both pointers move one step at a time, and the inversion counter is incremented when \n    # the pointers point to elements in the wrong order.\n    # O(n^2)\n    \n    # write your code here\n    return 0\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,k):\n    assert(isinstance(arr,list))\n    assert(isinstance(k,int))\n    assert(k > 0)\n    assert(len(arr) > k)\n    # create a dict whose values are the number of inversions of each element.\n    inv_count = {}\n    for i in range(k):\n        inv_count[arr[i]] = 0\n    for i in range(k,len(arr)):\n        for j in range(i-k,i):\n            if(arr[j] > arr[i]):\n                inv_count[arr[i]] += 1\n    return inv_count\n\n# Test case 1\narr = [1,20,6,4,5]\nk = 5", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(input,k):\n    #Write your code here\n    result=0\n    for i in range(k):\n        for j in range(k):\n            if input[i] > input[j]:\n                result +=1\n    return result\n\n#print(get_Inv_Count([1,20,6,4,5],5))\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    count = 0\n    i = 0\n    j = n-1\n    while i<j:\n        if arr[i] > arr[j]:\n            count += j-i\n            j -= 1\n        else:\n            i += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i):\n            if (arr[i] > arr[j]) :\n                sum = sum + 1\n    return sum\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(A,N):\n    \"\"\"\n    :param A: a list of integer values\n    :param N: the number of elements in A\n    :return: the number of inversions in A\n    \"\"\"\n    inversions = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if A[i] > A[j]:\n                inversions += 1\n    return inversions\n\n\ndef test_inv_count():\n    A = [1, 20, 6, 4, 5]\n    N = len(A)\n    assert get_Inv_Count(A, N) == 5\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    if n < 0:\n        return 0\n    if n == 1:\n        return 0\n    elif n == 2:\n        if arr[0]>arr[1]:\n            return 1\n        else:\n            return 0\n    else:\n        x = 0\n        for i in range(n-1):\n            if arr[i]>arr[i+1]:\n                x += 1\n        return x\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    c=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                c+=1\n    return c\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    # Write your solution here.\n    count = 0\n    i = 0\n    j = n-1\n    while i<j:\n        if arr[i]>arr[j]:\n            count += j-i\n        i += 1\n        j -= 1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(a,n):\n\n    return sum(a[:i+1] >= a[i] for i in range(n))\n\na = [1,20,6,4,5]\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(l):\n    return [item for sublist in l for item in sublist]\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(list):\n    if not list:\n        return list\n    result = []\n    for i in list:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    res = []\n    def append(x):\n        if type(x) is list:\n            for i in x:\n                append(i)\n        else:\n            res.append(x)\n    append(nested_list)\n    return res\n\ndef test_flatten_list():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            for nested_elem in element:\n                flat_list.append(nested_elem)\n        else:\n            flat_list.append(element)\n\n    return flat_list\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(ls):\n    flatlist = []\n    for element in ls:\n        if isinstance(element, list):\n            flatlist.extend(flatten_list(element))\n        else:\n            flatlist.append(element)\n    return flatlist", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(list_of_list):\n    flattened_list = []\n    for item in list_of_list:\n        if type(item) == list:\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\n\n# ### 3.1.2 Split List\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    for item in nested_list:\n        if isinstance(item, list):\n            for x in item:\n                yield x\n        else:\n            yield item\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested):\n    return [item for sublist in nested for item in sublist]\n\n\n# -\n\n# What about this one?\n\n# +", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    return [item for sublist in nested_list for item in sublist]"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list_one,list_two):\n    i=0\n    while i < len(list_one):\n        if list_one[i] in list_two:\n            yield list_one[i]\n            i+=1\n        else:\n            i+=1\n    j=0\n    while j < len(list_two):\n        if list_two[j] in list_one:\n            yield list_two[j]\n            j+=1\n        else:\n            j+=1\n\n\n# assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\ndef intersection_nested_lists(list_one,list_two):\n    i=0\n    while i < len(list_one):\n        if list_one[i] in list_two:\n            yield list_one[i]\n        i+=1\n    j=0\n    while j < len(list_two):\n        if list_two[j] in list_one:\n            yield list_two[j]\n        j+=1\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n    if not list2:\n        return list1\n    else:\n        return [i for i in list1 if i in intersection_nested_lists(list2[0],list2[1:])]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n    result=[]\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n    \"\"\"\n    :param list1:\n    :param list2:\n    :return:\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    else:\n        common = []\n        x = list1[0]\n        for i in list2:\n            if x in i:\n                common.append(x)\n        return common\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    return common\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(a, b):\n    a = [x for x in a if x != []]\n    b = [x for x in b if x != []]\n    return [x for x in a if x in b]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n    list3 = []\n    for item in list1:\n        if item in list2:\n            list3.append(item)\n    return list3\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(l1, l2):\n    result = []\n    for item in l1:\n        if item in l2:\n            result.append(item)\n    return result\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(a,b):\n    l=[]\n    for i in a:\n        if i in b:\n            l.append(i)\n    return l\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(a,b):\n    # create a empty list\n    empty_list = []\n    for i in b:\n        # find the nested list element in a\n        for j in a:\n            # check if the list is empty\n            if len(j) != 0:\n                if i in j:\n                    # if it is not empty add the element\n                    empty_list.append(i)\n        # check if the list is empty\n        if len(empty_list) != 0:\n            # if it is not empty sort the elements\n            empty_list.sort()\n            return empty_list\n    # if the list is empty\n    return empty_list\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n\tnewlist = []\n\tfor t in tuples:\n\t\tnewlist.append(t)\n\tnewlist.sort()\n\tfor i in range(len(newlist)):\n\t\tfor j in range(len(newlist[i])):\n\t\t\tif j == 0:\n\t\t\t\tmin = newlist[i][j]\n\t\t\telse:\n\t\t\t\tif newlist[i][j] > min:\n\t\t\t\t\tmin = newlist[i][j]\n\treturn min\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(grades):\n    '''\n    Calculate the maximum aggregate.\n    '''\n    max_student_name = ''\n    max_student_agg = 0\n    \n    for student_name, student_agg in grades:\n        if student_agg > max_student_agg:\n            max_student_agg = student_agg\n            max_student_name = student_name\n            \n    return (max_student_name, max_student_agg)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(input):\n    max = 0\n    a = 0\n    for x in input:\n        if x[1] > max:\n            max = x[1]\n        a = a+x[1]\n    return (a, max)", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(students):\n    max = students[0]\n    for s in students:\n        if s[1] > max[1]:\n            max = s\n    return max\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    \"\"\"\n    :param: tuples: list of tuples\n    :return: 1) tuple of max aggregate\n    \"\"\"\n    result = ()\n    for tup in tuples:\n        name = tup[0]\n        score = tup[1]\n        if result == ():\n            result = (name, score)\n        else:\n            if score > result[1]:\n                result = (name, score)\n    return result\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(attendance):\n    ret = \"\"\n    max_grade = 0\n    for name, grade in attendance:\n        if grade > max_grade:\n            max_grade = grade\n            ret = name\n    return (ret, max_grade)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(student_tuples):\n    max_score = 0\n    max_student = \"\"\n    for name, score in student_tuples:\n        if score > max_score:\n            max_score = score\n            max_student = name\n    return max_student, max_score\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(student_tuples):\n    for student in student_tuples:\n        if student[1] > max(student_tuples, key=lambda x: x[1])[1]:\n            return student\n    return ('',0)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(student_tuples):\n    # Your code here\n    max_tuple = tuple(max(student_tuples,key=lambda x: x[1]))\n    return max_tuple\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(students):\n    names = []\n    aggregate_score = []\n    for student in students:\n        names.append(student[0])\n        aggregate_score.append(student[1])\n    # sort by aggregate_score in descending order and get the first item\n    max_student = names[aggregate_score.index(max(aggregate_score))]\n    max_score = aggregate_score[aggregate_score.index(max(aggregate_score))]\n    return (max_student, max_score)\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    count = 1.0\n    for i in range(1, n+1):\n        #find the sum of bits in first n bits\n        sum_first_n_bits = (1 << (i-1)) - 1\n        for j in range(1, n+1):\n            #find the sum of bits in last n bits\n            sum_last_n_bits = (1 << j) - 1\n            if sum_first_n_bits == sum_last_n_bits:\n                count += 1.0\n    return count\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nimport numpy as np\n\n\ndef count_binary_seq(n):\n    \"\"\"\n    Returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    >>> count_binary_seq(1)\n    2.0\n    >>> count_binary_seq(2)\n    4.0\n    >>> count_binary_seq(4)\n    15.0\n    >>> count_binary_seq(8)\n    128.0\n    \"\"\"\n    return np.count_nonzero((2**np.arange(n)).reshape(2**n, 1) == np.fliplr(2**np.arange(n)).reshape(2**n, 1))\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n < 1:\n        return 0\n    res = 0\n    for i in range(0, 1 << n):\n        res += sum([int(x) for x in format(i, 'b')[0:n]])\n        res += sum([int(x) for x in format(i, 'b')[n:]])\n    return float(res) / (1 << (2 * n))\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n < 1:\n        return 0.0\n    if n == 1:\n        return 2.0\n    count = 0.0\n    for i in range(2**n):\n        if is_equal_sum(i, 2*n):\n            count += 1\n    return count\n\ndef is_equal_sum(x, n):\n    x = bin(x)[2:]\n    x = x[-n:]\n    if x == x[::-1]:\n        return True\n    else:\n        return False\n\ndef main():\n    assert count_binary_seq(1) == 2.0\n    assert count_binary_seq(2) == 4.0\n    assert count_binary_seq(3) == 6.0\n    assert count_binary_seq(4) == 8.0\n    assert count_binary_seq(5) == 10.0\n\nmain()", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    return 1.0\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\n# + id=\"t2ZWR9Z2_3nD\"\ndef count_binary_seq(n):\n    count = 0.0\n    for i in range(1 << n):\n        left_sum = 0\n        right_sum = 0\n        for j in range(n):\n            left_sum += i & 1\n            right_sum += (i >> j) & 1\n        if left_sum == right_sum:\n            count += 1\n    return count\n\n\n# + [markdown] id=\"S9b0oTKk_3nD\"\n# **Approach 2: Generating Sequences**\n\n# + id=\"dP9v-o99_3nE\"\ndef count_binary_seq(n):\n    count = 0.0\n    for i in range(1 << n):\n        left_sum = 0\n        right_sum = 0\n        for j in range(n):\n            left_sum += i & 1\n            right_sum += (i >> j) & 1\n        if left_sum == right_sum:\n            count += 1\n    return count\n\n\n# + [markdown] id=\"sP4ikZ0F_3nE\"\n# **Approach 3: Generating Sequences in Recursion**\n\n# + id=\"c_1W0D_J_3nF\"\ndef count_binary_seq(n):\n    count = 0.0\n    def count_binary_seq_rec(n, left_sum, right_sum):\n        if n == 0:\n            return 1\n        left_sum += 1\n        right_sum += 1\n        if left_sum == right_sum:\n            count += count_binary_seq_rec(n - 1, left_sum, right_sum)\n        count += count_binary_seq_rec(n - 1, left_sum, right_sum - 1)\n        count += count_binary_seq_rec(n - 1, left_sum - 1, right_sum)\n        count += count_binary_", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    # write your code here\n    return sum(bin(i).count(\"1\") for i in range(2**n)) / 2.0\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 1:\n        return 2.0\n    else:\n        return (count_binary_seq(n - 1) + count_binary_seq(n - 2))\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    \"\"\"\n    :param n: an integer.\n    :return: the count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    if n == 1:\n        return 2.0\n    return count_binary_seq(n-1) + 4*count_binary_seq(n-2)\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    return 1 + count_binary_seq(n - 1) * 2 * 2\n\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(D):\n    n = 0\n    for k in D.keys():\n        if isinstance(D[k], dict):\n            n += 1\n            n += dict_depth(D[k])\n    return n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    def helper(d):\n        if not d:\n            return 0\n        if isinstance(d, dict):\n            return max(helper(d[k]) for k in d.keys()) + 1\n        return 1\n    return helper(d)\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    depth = 0\n    for val in d.values():\n        if isinstance(val, dict):\n            depth += 1\n    return depth\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    pass\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dict):\n    depth = 1\n    for item in dict.items():\n        if isinstance(item[1],dict):\n            depth += dict_depth(item[1])\n    return depth\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    depth = 0\n    while (type(d) != dict):\n        d = d[0]\n        depth += 1\n    return depth\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dict):\n    return max(map(dict_depth, dict.values()))+1", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    return 1+max(map(dict_depth, d.values()))\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n  if type(d) != dict:\n    return 0\n  else:\n    depth = 1\n    for i in d.values():\n      depth += dict_depth(i)\n    return depth\n\n# We can also use a helper function to determine the depth of a list\ndef list_depth(l):\n  if type(l) != list:\n    return 0\n  depth = 1\n  for i in l:\n    depth += list_depth(i)\n  return depth\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, 1 + dict_depth(v))\n    return depth\n\n# assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n# assert dict_depth({1:1})==1\n# assert dict_depth({1:{2:1}})==2\n# assert dict_depth({1:{2:1, 3:1}})==3\n# assert dict_depth({1:1, 'a':{'b':{'c':{'d':{}}}}})==4\n# assert dict_depth({1:1, 'a':{'b':{'c':{'d':{}}}}})==4\n# assert dict_depth({1:1, 'a':{'b':{'c':{'d':{}}}}})==4\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(x):\n    n = 0\n    while x != 0:\n        x = x & (x-1)\n        n = n + 1\n    return n-1\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(number):\n    result = -1\n    for i in range(31, -1, -1):\n        if number & 2**i:\n            result = i\n            break\n    return result\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    # Write your code here.\n    max_bit_no = 32\n    max_bit_no_set = 0\n    for i in range(max_bit_no):\n        if (1 << i & n) != 0:\n            max_bit_no_set = i\n            break\n    return max_bit_no_set\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\nimport math\n\n\ndef set_Bit_Number(n):\n    \"\"\"\n    The Binary for n is 110.\n    The number of bits for n is 4.\n    The binary for 4 is 100.\n    The number of bits for 4 is 2.\n    The number of significant bits for n is 2.\n    The number of significant bits for n is 2.\n\n    Parameters\n    ----------\n    n : int\n        A positive integer\n    Returns\n    -------\n    int\n        The most significant set bit\n\n    \"\"\"\n    # This function should return the most significant set bit in n.\n\n    binary_string = format(n, \"0b\")\n    significant_bit_count = 0\n    significant_set_bit_count = 0\n\n    for bit in binary_string:\n        if bit == \"1\":\n            significant_bit_count = significant_bit_count + 1\n        if bit == \"1\" and significant_set_bit_count == 0:\n            significant_set_bit_count = significant_bit_count\n            significant_bit_count = 0\n\n    return significant_set_bit_count\n\n\n# print(set_Bit_Number(6))\n# print(set_Bit_Number(128))", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(num):\n    for i in range(0,32):\n        if((num & (1<<i))):\n            return i\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    #write your code here\n    i = 0\n    while(n&1==0):\n        i += 1\n        n = n>>1\n    return i", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(num):\n    count = 0\n    while num > 0:\n        count += 1\n        num = num & (num-1)\n    return count\n\n# n = int(input())\n# print(set_Bit_Number(n))\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(x):\n    # Write your code here\n    count = 0\n    while x > 0:\n        if x & 1 == 1:\n            count += 1\n        x = x >> 1\n    return count\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    n=bin(n)\n    n=int(n[2:])\n    return n\n\nn=int(input())", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    temp = n\n    bits = 0\n    while temp:\n        temp &= temp-1\n        bits += 1\n    return bits-1"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    def check(arr):\n        arr = list(arr)\n        count = 0\n        i = 0\n        j = len(arr) - 1\n        while i < j:\n            if arr[i] > arr[j]:\n                count += 1\n            i += 1\n            j -= 1\n        return count\n    return check(a) == check(b)\n\n\n#test", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr,n):\n    a = 0\n    b = 0\n    for i in range(n-1):\n        if arr[i]>arr[i+1]:\n            a += 1\n        else:\n            b += 1\n    return(a==b)", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n\tn = len(a)\n\ta.sort()\n\tb.sort()\n\tinversions = 0\n\ti = 0\n\tj = 0\n\twhile(i<n and j<n):\n\t\tif a[i]>b[j]:\n\t\t\tinversions += n-i-1\n\t\t\ti+=1\n\t\telse:\n\t\t\tj+=1\n\treturn inversions == 0\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr,n):\n    # code here\n    count_even = 0\n    count_odd = 0\n\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even == count_odd", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(x,y):\n    \"\"\"\n    input: List of numbers\n    output: True if inversion count of two types are same else False\n    \"\"\"\n    x_inv = 0\n    y_inv = 0\n    for i in range(len(x)):\n        if x[i] < y[i]:\n            x_inv += 1\n        if x[i] > y[i]:\n            y_inv += 1\n    return x_inv == y_inv", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    first_array = a.sort()\n    second_array = b.sort()\n\n    count_one = 0\n    count_two = 0\n    for i in range(len(first_array)):\n        if first_array[i] > second_array[i]:\n            count_one += 1\n        elif first_array[i] < second_array[i]:\n            count_two += 1\n    if count_one == count_two:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1,arr2):\n    arr1.sort()\n    arr2.sort()\n    temp = 0\n    for i in range(len(arr1)):\n        if arr1[i] != i+1:\n            temp+=1\n    for i in range(len(arr2)):\n        if arr2[i] != i+1:\n            temp+=1\n    if temp == 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1,n):\n    count1 = 0\n    count2 = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr1[i]>arr1[j]:\n                count1 += 1\n            if arr1[i]<arr1[j]:\n                count2 += 1\n    if count1 == count2:\n        return True\n    else:\n        return False\n\ndef main():\n    arr1 = [1,0,2]\n    print(solve(arr1,len(arr1)))\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(data1, data2):\n    list1 = data1\n    list2 = data2\n    list3 = list(zip(list1, list2))\n    list3.sort()\n    print(list3)\n    i = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for j in list3:\n        i+=1\n        if(j[0] > j[1]):\n            count1+=1\n        if(j[0] < j[1]):\n            count2+=1\n    if(count1 == count2):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr,n):\n    inversion = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                inversion += 1\n    return inversion == n*(n-1)/2"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,rotations,k,N):\n    for r in rotations:\n        temp = arr[r[0]]\n        arr[r[0]] = arr[r[1]]\n        arr[r[1]] = temp\n    for i in range(len(arr)):\n        if i == k:\n            return arr[i]\n    return -1\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rot,index,n):\n    if index == n:\n        return arr[index]\n    if rot == []:\n        return find_Element(arr,[],index+1,n)\n    rot = rot[0]\n    if index < rot[0]:\n        return find_Element(arr,rot,index,n)\n    else:\n        return find_Element(arr,rot[1:],index-rot[0],n)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rot,index,k):\n    # Write your code here\n    arr=list(arr)\n    if k>len(arr):\n        k=k%len(arr)\n    #arr.reverse()\n    l=index\n    m=index+k\n    if m>=len(arr):\n        m=m%len(arr)\n    for i in range(k):\n        arr[l],arr[m]=arr[m],arr[l]\n        l=(l+1)%len(arr)\n        m=(m+1)%len(arr)\n    return arr[index+k]\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_element(arr, rotations, index, k):\n    if index == len(arr):\n        return arr[index%len(arr)]\n    if len(rotations) == 0:\n        return arr[index]\n    for r in rotations:\n        if r[0] == index:\n            return find_element(arr, rotations[1:], r[1], k)\n    return find_element(arr, rotations[1:], index + k, k)\n\ndef find_element_index(arr, rotations, index, k):\n    if index == len(arr):\n        return index%len(arr)\n    if len(rotations) == 0:\n        return index\n    for r in rotations:\n        if r[0] == index:\n            return find_element_index(arr, rotations[1:], r[1], k)\n    return find_element_index(arr, rotations[1:], index + k, k)\n\n\n# if __name__ == \"__main__\":\n#     print(find_element([1,2,3,4,5],[[0,2],[0,3]],1,1))\n#     print(find_element([1,2,3,4,5],[[0,2],[0,3]],2,1))", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,rotations,index,count):\n    if count == 0:\n        return arr[index]\n    if len(rotations) == 0:\n        return -1\n    if index >= len(arr):\n        return -1\n    res = find_Element(arr,rotations[0],index,count-1)\n    if res != -1:\n        return res\n    else:\n        return find_Element(arr,rotations[1],index+len(rotations[0]),count-1)\n\ndef test_function(test_case):\n    input_arr = test_case[0]\n    rotations = test_case[1]\n    index = test_case[2]\n    count = test_case[3]\n    if find_Element(input_arr,rotations,index,count) == test_case[4]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1,2,3,4,5]\nrotations = [[0,2],[0,3]]\nindex = 2\ncount = 1\ntest_function([[arr,rotations,index,count,3],[arr,rotations,index,count,-1],[arr,rotations,index,count,4],[arr,rotations,index,count,-1]])", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,arr_rotations,index,rotations):\n\tif rotations == 0:\n\t\treturn arr[index]\n\trotations -= 1\n\tnum_elements = len(arr)\n\tfor element in arr_rotations:\n\t\tnew_index = (index+element)%num_elements\n\t\trotations -= element\n\t\tif rotations == 0:\n\t\t\treturn arr[new_index]\n\treturn None\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(lst,rotations,index,count):\n    if count==0:\n        return lst[index]\n    else:\n        return find_Element(rotations[count%len(rotations)][1],rotations[(count-1)%len(rotations)],index,count-1)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotation,index,count):\n    \"\"\"\n    Helper Function\n    \"\"\"\n    if count == len(rotation):\n        return arr[index]\n    else:\n        return find_Element(arr,rotation,index+rotation[count][0],count+1)", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(A,B,i,n):\n    '''\n    Input: A is a list, B is a list of lists. \n           i is the index of the element \n           n is the number of rotations\n    Output: value of the element\n    '''\n    l = len(A)\n    c = 0\n    while i > l:\n        c+=1\n        i-=l\n        n-=1\n    for j in range(c):\n        i = i-B[0][0]\n        n-=B[0][0]\n        B.pop(0)\n    if i == 0:\n        return A[0]\n    i-=1\n    i = i%l\n    if i == 0:\n        return A[0]\n    return A[i]\n\ndef find_Element(A,B,i,n):\n    '''\n    Input: A is a list, B is a list of lists. \n           i is the index of the element \n           n is the number of rotations\n    Output: value of the element\n    '''\n    l = len(A)\n    c = 0\n    while i > l:\n        c+=1\n        i-=l\n        n-=1\n    for j in range(c):\n        i = i-B[0][0]\n        n-=B[0][0]\n        B.pop(0)\n    if i == 0:\n        return A[0]\n    i-=1\n    i = i%l\n    if i == 0:\n        return A[0]\n    return A[i]\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,index,curRotations=0):\n    if curRotations == len(rotations):\n        return arr[index]\n    return find_Element(arr,rotations,index+rotations[curRotations][0],curRotations+1)\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(word_list):\n    for word in word_list:\n        if word[0] == \"P\":\n            return word.split(\" \")\n    return None\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    return words[0][0], words[1][0]", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word\n    return None\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return False\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    list_of_words = []\n    for word in words:\n        if word[0] == 'p':\n            list_of_words.append(word)\n\n    return (list_of_words[0], list_of_words[1])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            print(word)\n            return\n\n\n# -\n\nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(lst):\n    return(lst[0][1:], lst[1][1:])\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    for word in words:\n        if word[0]=='p':\n            return word\n    return \"Oops\"\n\nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nFunctions with more than one return value\n\n### Code:\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(wordlist):\n\twlist = []\n\tfor w in wordlist:\n\t\tif w.startswith(\"p\"):\n\t\t\twlist.append(w)\n\treturn tuple(wlist)\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    p_words = [word for word in words if word.startswith(\"p\")]\n    return p_words[0], p_words[1]\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n# Dynamic Programming\n\n\ndef max_sum_increasing_subseq(nums, k, i, j):\n    if i == j:\n        return nums[i]\n    if j - i + 1 <= k:\n        return max(nums[i:j+1])\n    lmax = 0\n    for l in range(i, j+1):\n        rmax = max(max_sum_increasing_subseq(nums, k, l+1, j), max_sum_increasing_subseq(nums, k, l+1, r) for r in range(l, j+1))\n        lmax = max(lmax, rmax)\n    return max(lmax, max_sum_increasing_subseq(nums, k, i, j-1))", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, i, k, j):\n    max_sub_sum, cur_sub_sum = 0,0\n\n    if(i < 0 or i >= len(arr) or j < 0 or j >= len(arr) or k < 0 or k >= len(arr)):\n        return\n\n    if(i == j):\n        max_sub_sum = cur_sub_sum = arr[i]\n    elif(j == k):\n        max_sub_sum = cur_sub_sum = arr[i]\n    elif(k == i):\n        max_sub_sum = cur_sub_sum = arr[j]\n    else:\n        max_sub_sum = cur_sub_sum = arr[i]\n\n    for k in range(i, j):\n        cur_sub_sum = cur_sub_sum + arr[k]\n        if(cur_sub_sum > max_sub_sum):\n            max_sub_sum = cur_sub_sum\n\n    return max_sub_sum\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(A, K, i, j):\n    ans = 0\n    seq = A[i:j]\n    seq = sorted(seq)\n    prefix = 0\n    for x in seq:\n        prefix += x\n        ans = max(ans, prefix)\n    if K > i:\n        prefix += A[K]\n        ans = max(ans, prefix)\n    return ans\n\nA = [1,101,2,3,100,4,5]\nK = 7\ni = 4\nj = 6", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, k, n, m):\n    if k > n or m > n:\n        return 0\n    \n    # keep track of maximum sum in ith index\n    # by considering prefix 0...i\n    arr_sum = [0] * (n + 1)\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += arr[i]\n        if i >= k:\n            curr_sum -= arr[i - k]\n        arr_sum[i + 1] = curr_sum\n\n    max_subseq_sum = max_sum = arr[n - 1]\n\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = arr_sum[j] - arr_sum[i] + arr[i]\n\n            if curr_sum > max_subseq_sum:\n                max_subseq_sum = curr_sum\n\n    return max_subseq_sum\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(A, i, k, i1):\n    max_sum = 0\n    A_k = A[k]\n    for j in range(k, i1):\n        A_j = A[j]\n        if A_j < A_k:\n            max_sum = A_k + max_sum\n            A_k = A_j\n        else:\n            max_sum = A_j + max_sum\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, k, i, j):\n    if i == j:\n        return arr[i]\n    if arr[k] >= arr[j]:\n        return max(arr[k], max_sum_increasing_subseq(arr, k, i, k))\n    return max(arr[j], max_sum_increasing_subseq(arr, k, k + 1, j))\n\narr = [1, 101, 2, 3, 100, 4, 5 ]\nk = 7\ni = 4\nj = 6\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, k, i, n):\n    if i >= n:\n        return 0\n\n    max_sum = 0\n    if arr[i] >= arr[i - 1]:\n        max_sum = max(max_sum, arr[i] + max_sum_increasing_subseq(arr, k, i + 1, n))\n\n    #if we have found a subseq with kth element after index i, then we need to add that element also\n    if i + 1 < k:\n        max_sum = max(max_sum, arr[i] + max_sum_increasing_subseq(arr, k, i + 1, n))\n\n    return max_sum\n\ndef max_sum_increasing_subseq_recursive(arr, k, i, n):\n    if i >= n:\n        return 0\n\n    if i + 1 < k:\n        max_sum = max(max_sum, arr[i] + max_sum_increasing_subseq_recursive(arr, k, i + 1, n))\n\n    if arr[i] >= arr[i - 1]:\n        max_sum = max(max_sum, arr[i] + max_sum_increasing_subseq_recursive(arr, k, i + 1, n))\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, k, i, n):\n    # Write your code here\n    max_sum = 0\n    max_sum_subseq = 0\n    if(i == n):\n        return max_sum_subseq\n    for j in range(i+1, n+1):\n        max_sum_subseq = max(max_sum_subseq+arr[j], arr[j])\n        max_sum = max(max_sum, max_sum_subseq)\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n# Initial Solution\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, k, index, max_so_far):\n    # Base case: if max_so_far is not set (i.e., arr[index] is the 1st element in subsequence)\n    # then set it to arr[index]\n    if max_so_far is None:\n        max_so_far = arr[index]\n    \n    # If arr[index] is greater than max_so_far\n    # then max_so_far can be changed\n    if arr[index] > max_so_far:\n        max_so_far = arr[index]\n    \n    # If index is 0, then return max_so_far\n    if index == 0:\n        return max_so_far\n    \n    # If arr[index] is greater than arr[index-1], then return max_so_far\n    if arr[index] > arr[index-1]:\n        return max_so_far\n    \n    # Else return the value computed by the recursive call\n    else:\n        return max_sum_increasing_subseq(arr, k, index-1, max_so_far)\n    "], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, x, y):\n    tuplex[x] = y\n    return tuplex\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tupl, *pos):\n    return tupl[:pos[0]]+tupl[pos[0]+1:]\n\n#assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuple_x,index,new_x):\n    return tuple_x[:index]+(new_x,)+tuple_x[index+1:]\n#Test", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex,start,end):\n    output = tuplex[:]\n    for i in range(start,end):\n        output[i] = tuplex[i]\n    return tuple(output)", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tup, *args):\n    new_tup = list(tup)\n    for i in args:\n        new_tup[i] = args[i]\n    return tuple(new_tup)\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(x,i,y):\n    # write your code here\n    if len(x)<=i:\n        return x\n    else:\n        x[i]=y\n        return x\n\n# Test", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuple(tup, index, value):\n    tup[index] = value\n    return tup\n\ndef colon_tuple2(tup, index, value):\n    return tup[:index] + [value] + tup[index+1:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, colon, val):\n    tup[colon] = val\n    return tup", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(x,i,y):\n    l=list(x)\n    l[i]=y\n    return tuple(l)\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuplex, *new_values):\n    for index, value in enumerate(tuplex):\n        tuplex[index] = value if index < len(new_values) else value\n    return tuplex\n\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    result = []\n    for i in range(n):\n        if list1[i] * list2[i] > list1[i+n] * list2[i+n]:\n            result.append(list1[i] * list2[i])\n        else:\n            break\n    return result\n\ndef test_large_product():\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n\n# test_large_product()", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list_one,list_two,no_of_product):\n    list_one_sorted = sorted(list_one,reverse=True)\n    list_two_sorted = sorted(list_two,reverse=True)\n    combined_list = list_one_sorted + list_two_sorted\n    combined_list = combined_list[:no_of_product]\n    return combined_list", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(a,b,k):\n    if k <= 0:\n        return []\n    a.sort()\n    b.sort()\n    res = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if j >= i:\n                prod = a[i] * b[j]\n                if prod not in res and len(res) < k:\n                    res.append(prod)\n    return res", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(a,b,k):\n\tif len(a)<len(b):\n\t\ta,b=b,a\n\treturn sorted(a)[-k:]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1,list2,n):\n\t\"\"\"\n\t:param list1: the first list\n\t:type list1: List\n\t:param list2: the second list\n\t:type list2: List\n\t:param n: the number of largest products\n\t:type n: int\n\t:return: a list containing the largest n products\n\t:rtype: List\n\t\"\"\"\n\tresult = []\n\tfor i in range(n):\n\t\tmax_product = 0\n\t\tfor j in range(len(list1)):\n\t\t\tfor k in range(len(list2)):\n\t\t\t\tmax_product = max(max_product,list1[j]*list2[k])\n\t\tresult.append(max_product)\n\treturn result\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(l1, l2, n):\n    # your code here\n    return sorted([max(l1[i] * l2[j] for i, j in zip(l1[:n], l2[:n]))])", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(a,b,k):\n    # your code here\n    a = sorted(a,reverse = True)\n    b = sorted(b,reverse = True)\n    min_a = a[k-1]\n    min_b = b[k-1]\n    max_product = []\n    for i in range(k):\n        max_product.append(min_a * min_b)\n        min_a = a[i] if i<k-1 else 1\n        min_b = b[i] if i<k-1 else 1\n    return max_product\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1,list2, n):\n    list1.sort()\n    list2.sort()\n    largest = []\n    for i in range(n):\n        if(list1[i]*list2[i]>=list1[-1]*list2[-1]):\n            largest.append(list1[i]*list2[i])\n    largest.reverse()\n    return largest\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\nfrom typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], k: int) -> List[int]:\n    # List of k largest products, will be filled\n    products = []\n    # find the k largest products\n    for i in range(k):\n        # find the k largest numbers in nums1\n        k_largest = max_in_list(nums1, i)\n        # find the k largest numbers in nums2\n        k_largest2 = max_in_list(nums2, i)\n        # find the k largest products\n        products.append(k_largest * k_largest2)\n    return products\n\n\ndef max_in_list(nums: List[int], k: int) -> int:\n    \"\"\"\n    find the k largest numbers in nums\n    \"\"\"\n    return sorted(nums)[-k:]", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n#Solution\ndef large_product(list1, list2, n):\n    # sort both lists\n    list1.sort()\n    list2.sort()\n    \n    # store the largest product\n    largest = []\n    \n    # loop through the list1\n    for x in range(len(list1)):\n        # find the index in the list2 which corresponds to the \n        # value in list1\n        index = bisect.bisect_left(list2, list1[x])\n        \n        # check if the current product is the largest product so far\n        if len(largest) < n:\n            if len(largest) == 0:\n                largest.append(list1[x] * list2[index])\n            else:\n                largest.append(list1[x] * list2[index])\n        \n        # check if the current product is the largest product so far\n        # and also replace the older products with smaller ones\n        elif len(largest) == n:\n            if list1[x] * list2[index] > largest[-1]:\n                largest[-1] = list1[x] * list2[index]\n        # replace the older products with smaller ones\n        else:\n            # find the index in the list2 which corresponds to the \n            # value in list1\n            index = bisect.bisect_left(list2, list1[x])\n            if list1[x] * list2[index] > largest[x]:\n                largest[x] = list1[x] * list2[index]\n    return largest"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x, y):\n    return y if y >= x else x\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(n1, n2):\n    if n1>n2:\n        return n1\n    else:\n        return n2\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(num1,num2):\n    if num1>num2:\n        return num1\n    else:\n        return num2\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    return a if a>=b else b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\ndef maximum_mod(a, b):\n    if a >= b:\n        return a % b\n    else:\n        return b % a\n\ndef maximum_abs(a, b):\n    if abs(a) > abs(b):\n        return abs(a)\n    else:\n        return abs(b)\n\ndef maximum_using_abs(a, b):\n    if abs(a - b) > 0:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    if a>=b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x > y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(n1, n2):\n    if n1 > n2:\n        return n1\n    else:\n        return n2\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(input):\n    result = input.split()\n    return tuple(result)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.split())\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(input_string):\n    return tuple(input_string)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    tuple = []\n    for character in string:\n        tuple.append(character)\n    return tuple\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    l = list(s)\n    l.reverse()\n    return tuple(l)\n\n\n# assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(text):\n    tuple = ()\n    for x in text:\n        tuple += (x,)\n    return tuple\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n# def string_to_tuple(string):\n#     \"\"\"\n#     Write a function to convert a given string to a tuple.\n#     assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n#     \"\"\"\n#     return string.split()\n\n\ndef string_to_tuple(string):\n    return tuple(string.split())\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    return tuple(s.split())\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    #print(num)\n    mask = num-1\n    while mask & num == mask:\n        mask = mask >> 1\n    return num ^ mask\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(x):\n    while x != 1:\n        x = x - (x & -x)\n    return x\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(x):\n    \"\"\"\n    :param x: an unsigned integer number\n    :return: x | (x - 1)\n    \"\"\"\n    return x | (x - 1)", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    #get the number of bits\n    bits = num.bit_length()\n    #turn the num to binary\n    bin_num = format(num, 'b')\n    #set the rightmost bit to zero\n    bin_num = bin_num[:bits-1] + '0' + bin_num[bits-1:]\n    #turn the binary to decimal\n    decimal = int(bin_num,2)\n    #return the decimal\n    return decimal\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\nimport unittest\n\ndef set_left_most_unset_bit(x):\n\tnum_bits = 8\n\tmask = 1 << num_bits\n\tnum_of_1 = bin(x).count(\"1\")\n\n\t# num_of_1 <= num_bits\n\t# num_of_1 - num_bits <= 0\n\t# num_of_1 + num_bits >= 1\n\tshift_amount = num_bits - num_of_1\n\tshift_amount = max(min(shift_amount, num_bits), 0)\n\tx |= mask << shift_amount\n\treturn x\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(x):\n    n = x\n    while n:\n        if n & 1:\n            return x\n        n >>= 1\n    return x << 1\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in the number.\n    :param n: An integer.\n    :return: The number with the left most unset bit set.\n    \"\"\"\n    while n % 2 == 0:\n        n /= 2\n    return n * 2 + 1\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    \"\"\"\n    Set the left most unset bit in the number.\n    :param num: The number to be bitwise updated.\n    :return: The bitwise updated number.\n    \"\"\"\n    mask = 1\n    while mask <= num:\n        num = num ^ mask\n        mask = mask << 1\n    return num\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    n = n & ~(n-1)\n    return n\n\n# Test program", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    num = num - 1\n    while num % 2 == 0:\n        num = num >> 1\n    return num + 1\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    return (1/3) * radius ** 2 * height\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport numpy as np\n\ndef volume_cone(radius,height):\n    return 1/3*np.pi*radius**2*height\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\n#1)\n\ndef volume_cone(base,height):\n    \"\"\"\n    Find the volume of a cone\n    base = radius of base of cone\n    height = height of cone\n    \"\"\"\n    volume = 1/3 * height * base * base * base\n    return volume\n\n#2)\n\nimport math\n\ndef volume_cone(radius,height):\n    \"\"\"\n    Find the volume of a cone\n    radius = radius of base of cone\n    height = height of cone\n    \"\"\"\n    volume = 1/3 * math.pi * radius * radius * height\n    return volume\n\n#3)\n\nimport math\n\ndef volume_cone(radius,height):\n    \"\"\"\n    Find the volume of a cone\n    radius = radius of base of cone\n    height = height of cone\n    \"\"\"\n    volume = 1/3 * math.pi * radius**2 * height\n    return volume\n\n#4)\n\nimport math\n\ndef volume_cone(radius,height):\n    \"\"\"\n    Find the volume of a cone\n    radius = radius of base of cone\n    height = height of cone\n    \"\"\"\n    volume = 1/3 * math.pi * radius**3\n    return volume", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport math\ndef volume_cone(radius, height):\n    pi = math.pi\n    return pi*(radius**2)*height/3\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    V = 1/3*3.14*(r**2)*(h)\n    return V\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport math\ndef volume_cone(radius,height):\n    return (1/3)*math.pi*radius**2*height", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n\tvol = 1/3 * math.pi * r**2 * h\n\treturn vol\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    return (1./3)*(radius**2) * height", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    \"\"\"\n    Calculate volume of a cone using the formula V=1/3*(pi*r*r*h)\n    Input: r, h (floats) radius and height of cone\n    Output: volume (float)\n    \"\"\"\n    \n    pi=3.141592653589793\n    volume=1.0/3.0*pi*r**2*h\n    \n    return volume", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport math\ndef volume_cone(radius, height):\n    volume = (1./3)*math.pi*radius**2 * height\n    return volume\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(numbers):\n    # write your code here\n    return [x for x in numbers if x > 0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(l):\n\tif len(l) == 0:\n\t\treturn\n\telse:\n\t\tpos = l[0]\n\t\tif pos >= 0:\n\t\t\tprint pos\n\t\t\tpos_nos(l[1:])\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(no_list):\n    return [x for x in no_list if x >=0]", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(nums):\n    result = []\n    for n in nums:\n        if n > 0:\n            result.append(n)\n    return result\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n    for i in nums:\n        if i > 0:\n            print(i)\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n    # write your code here\n    return nums.index(i) for i in nums if i > 0\n\n# test", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n    return [n for n in lst if n >= 0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\n# +", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\n# +\ndef pos_nos(numbers):\n    for no in numbers:\n        if no >= 0:\n            print(no)\n        else:\n            return\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(ls):\n    return list(filter(lambda x: x > 0, ls))\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(matrix, n):\n    matrix.sort()\n    max_sum = 0\n    for i in range(n):\n        for j in range(n-1):\n            if abs(matrix[j][0]-matrix[j+1][0]) + abs(matrix[j][1]-matrix[j+1][1]) == 1:\n                max_sum = max(max_sum, matrix[j][0]+matrix[j][1])\n                break\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    m = len(grid)\n    for i in range(m):\n        for j in range(n):\n            max_sum = max(max_sum, grid[i][j] + max_sum_rectangular_grid(grid, n, i+1, j+1, i, j))\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    # find max sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n\n    def dp_rec(grid, n, row, col, prev, chosen):\n        if row == n:\n            return prev\n\n        if (row, col) in chosen:\n            return dp_rec(grid, n, row+1, 0, prev, chosen)\n\n        max_sum = 0\n        for i in range(col, n):\n            if i == col:\n                max_sum = max(max_sum, grid[row][i] + prev)\n            else:\n                max_sum = max(max_sum, grid[row][i] + prev + dp_rec(grid, n, row+1, i+1, 0, chosen))\n\n        chosen.add((row, col))\n        return max_sum\n\n    return dp_rec(grid, n, 0, 0, 0, set())\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    if n < 1:\n        return 0\n\n    max_sum = 0\n    # left and right = 1, middle = 0\n    for i in range(n):\n        max_sum += max(grid[i][0], 0) + max(grid[i][2], 0)\n        # for each row\n        for j in range(n - 1):\n            max_sum += max(grid[j][j], 0) + max(grid[j][j+2], 0)\n\n    return max_sum", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    pass\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    max_sum = 0\n    for row in grid:\n        for i in range(n):\n            for j in range(i + 1, n):\n                max_sum = max(max_sum, sum(row[i: j + 1]))\n\n    return max_sum", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom itertools import permutations\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    O(n^2) time | O(n) space - where n is the number of rows in the grid\n    :param grid: a 2d-list of positive integers\n    :param n: the number of rows in the grid\n    :return: the maximum sum of the elements such that no two chosen elements are adjacent in the grid\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n\n    # we iterate through all possible permutations of rows and cols and calculate the sum of the elements\n    # for each permutation and compare it to the max we have seen so far\n    permutations_of_rows_and_cols = permutations(range(rows), cols)\n    max_sum = float('-inf')\n    for row_and_cols in permutations_of_rows_and_cols:\n        row_sum = 0\n        col_sum = 0\n        for col in row_and_cols:\n            row_sum += grid[row_and_cols[col]][col]\n            col_sum += grid[row_and_cols[col]][col+1]\n\n        if row_sum > col_sum:\n            max_sum = max(row_sum, col_sum)\n\n    return max_sum\n\n\n# tests", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    if not grid or not n:\n        return 0\n\n    max_sum = 0\n    sum_grid = [[0 for i in range(n)] for j in range(n)]\n    # get the max sum for each row\n    for i in range(n):\n        for j in range(n):\n            sum_grid[i][j] = grid[i][j] + (max_sum_rectangular_grid(grid[i:], n-1-i) if i<n-1 else 0)\n            max_sum = max(max_sum, sum_grid[i][j])\n\n    # get the max sum for each column\n    for i in range(n):\n        for j in range(n):\n            sum_grid[j][i] = grid[j][i] + (max_sum_rectangular_grid(grid[:,i], n-1-j) if j<n-1 else 0)\n            max_sum = max(max_sum, sum_grid[j][i])\n\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n-1):\n            max_sum = max(max_sum, grid[i][j] + max_sum_rectangular_grid(grid, n-1-j) + max_sum_rectangular_grid(grid, n-1-i))\n    return max_sum", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(A, m):\n    N = len(A)\n    if N <= 1:\n        return 0\n    for i in range(N):\n        A[i].insert(0, 0)\n        A[i].append(0)\n    max_sum = 0\n    for i in range(1, N - 1):\n        for j in range(1, N - 1):\n            max_sum = max(max_sum, (A[i][j] + A[i][j-1] + A[i][j+1] + A[i-1][j] + A[i+1][j]))\n    return max_sum\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    max_len = 0\n    temp = ''\n    for i in string:\n        if i.isalpha() and i.isupper():\n            if len(i) % 2 == 0:\n                if len(temp) < len(i):\n                    temp = i\n                    max_len = len(i)\n                elif len(temp) == len(i):\n                    max_len = len(i)\n    return temp\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(s):\n    max_len = 0\n    max_word = ''\n    for i in s.split():\n        if len(i) % 2 == 0 and len(i) > max_len:\n            max_len = len(i)\n            max_word = i\n    return max_word\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(s):\n    temp = \"\"\n    temp1 = \"\"\n    temp2 = \"\"\n    for i in range(len(s)):\n        temp = temp + s[i]\n        if (len(temp) % 2 == 0):\n            temp1 = temp\n        elif (len(temp) % 2 != 0):\n            temp2 = temp\n    for i in range(len(s)):\n        if len(temp1) > len(temp2):\n            temp = temp1\n        else:\n            temp = temp2\n    return temp\n# Test", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(s):\n    max_len = 0\n    max_word = \"\"\n    for word in s.split():\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(text):\n    # TODO\n    pass\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\n# Simple Function 1\ndef find_Max_Len_Even(line):\n    max_len = 0\n    max_word = \"\"\n\n    for word in line.split():\n        len_word = len(word)\n        if len_word % 2 == 0:\n            if len_word > max_len:\n                max_len = len_word\n                max_word = word\n    return max_word\n\n# Simple Function 2\ndef find_Max_Len_Even(line):\n    max_len = 0\n    max_word = \"\"\n\n    for word in line.split():\n        len_word = len(word)\n        if len_word > max_len and len_word % 2 == 0:\n            max_len = len_word\n            max_word = word\n    return max_word\n\n\n# Simple Function 3\ndef find_Max_Len_Even(line):\n    max_len = 0\n    max_word = \"\"\n\n    for word in line.split():\n        len_word = len(word)\n        if len_word % 2 == 0:\n            if len_word > max_len:\n                max_len = len_word\n                max_word = word\n    return max_word\n\n\n# Simple Function 4\ndef find_Max_Len_Even(line):\n    max_len = 0\n    max_word = \"\"\n\n    for word in line.split():\n        len_word = len(word)\n        if len_word % 2 == 0:\n            if len_word > max_len:\n                max_len = len_word\n                max_word = word\n    return max_word\n\n\n# Simple Function 5\ndef find_Max_Len_Even(line):\n    max_len = 0\n    max_word = \"\"\n\n    for word in line.split():\n        len_word = len(word)\n        if len_word > max_len:\n            max_len = len_word\n            max_word = word\n        if len_word % 2 == 0:\n            max_len = len_word\n            max_word = word\n\n    return max_word", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    first_word = string.split()\n    first_word = [word for word in first_word if len(word) % 2 == 0]\n    first_word = max(first_word, key=len)\n    return first_word\n\n#assert find_Max_Len_Even(\"python language\") == \"language\"\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(s):\n    s = s.split()\n    max_len_even = -1\n    max_len_even_word = ''\n    for word in s:\n        if len(word)%2 == 0 and len(word) > max_len_even:\n            max_len_even = len(word)\n            max_len_even_word = word\n    return max_len_even_word\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(s):\n    s = s.split(\" \")\n    ls = len(s)\n    i = 0\n    while i < ls:\n        if s[i][0].isdigit():\n            i += 1\n        else:\n            max = s[i]\n            j = i + 1\n            while j < ls:\n                if s[j][0].isdigit():\n                    j += 1\n                else:\n                    if len(s[j]) > len(max):\n                        max = s[j]\n                    j += 1\n            break\n    return max\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(words):\n    max_len = 0\n    for i in range(len(words)):\n        word = words[i]\n        if word[0] % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_even_word = word\n    return max_even_word\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, x):\n    i = 0\n    found = False\n\n    while i < len(arr) and not found:\n        if arr[i] == x:\n            found = True\n        else:\n            i += 1\n\n    if found:\n        return i\n    else:\n        return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, val):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if arr[mid] == val:\n            high = mid - 1\n        elif arr[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_last_occurrence(arr: List[int], num: int) -> int:\n    if len(arr) == 0:\n        return -1\n    else:\n        low = 0\n        high = len(arr) - 1\n        while low <= high:\n            mid = int((low + high) / 2)\n            if arr[mid] == num:\n                high = mid - 1\n            elif arr[mid] < num:\n                low = mid + 1\n            else:\n                return mid\n        return low\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\n# def find_last_occurrence(arr, num):\n#     return arr[::-1].index(num) + 1\n\ndef find_last_occurrence(arr, num):\n    if not arr:\n        return 0\n\n    for i, x in enumerate(arr[::-1]):\n        if x == num:\n            return len(arr) - i\n\n    return 0\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\nfrom typing import List, Optional\n\n\ndef find_last_occurrence(array: List[int], value: int) -> Optional[int]:\n    \"\"\"\n    O(log n) runtime, where n is the size of the array\n    O(1) space\n    \"\"\"\n    start = 0\n    end = len(array) - 1\n    while start <= end:\n        middle = (start + end) // 2\n        if array[middle] < value:\n            start = middle + 1\n        elif array[middle] > value:\n            end = middle - 1\n        else:\n            return middle\n    return None\n\n\ndef test_find_last_occurrence() -> None:\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 3) is None\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, target):\n    # Write your solution here\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            right = mid - 1\n        elif array[mid] < target:\n            left = mid + 1\n        elif array[mid] > target:\n            right = mid - 1\n    return left if array[left] == target else -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(numbers, number_to_find):\n    \"\"\"\n    :param numbers: List of numbers sorted in ascending order.\n    :param number_to_find: The number that we are looking for in the array.\n    :return: index of the last occurrence of the number\n    \"\"\"\n    left = 0\n    right = len(numbers) - 1\n    while left <= right:\n        middle = (right + left) // 2\n        if numbers[middle] == number_to_find:\n            # The number is found in the middle of the array\n            # So we just need to search to the right side\n            right = middle - 1\n        elif numbers[middle] > number_to_find:\n            # The number is smaller than the middle element\n            # So we need to search to the right side of the middle element\n            # In the case the number is in the middle we have to exclude the middle\n            right = middle - 1\n        else:\n            # The number is larger than the middle element\n            # So we need to search to the left side of the middle element\n            # In the case the number is in the middle we have to exclude the middle\n            left = middle + 1\n    return -1", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\nimport unittest\n\n\ndef find_last_occurrence(numbers, number):\n    \"\"\"\n    :param numbers: A list of numbers, sorted in increasing order\n    :param number: A number that we are looking for\n    :return: The index of the last occurrence of number in the numbers list, -1 otherwise\n    \"\"\"\n    start = 0\n    end = len(numbers) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if numbers[mid] == number:\n            end = mid - 1\n        elif numbers[mid] < number:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start if numbers[start] == number else -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(array, number):\n    \"\"\"\n    Time complexity: O(log n)\n    Space complexity: O(1)\n    \"\"\"\n    low, high = 0, len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if number > array[mid]:\n            low = mid + 1\n        elif number < array[mid]:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    i = len(arr) - 1\n    while i >= 0 and arr[i] != num:\n        i -= 1\n    return i\n\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    result = []\n    current = [l[0]]\n    for x in l[1:]:\n        if x == current[0]:\n            current[0] += 1\n        else:\n            result.append(current)\n            current = [x, 1]\n    result.append(current)\n    return result\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    res = []\n    i = 0\n    while i < len(l):\n        if i+1 < len(l) and l[i] == l[i+1]:\n            res.append([l[i], 1])\n            i += 2\n        else:\n            res.append(l[i])\n            i += 1\n    return res\n\ndef modified_encode2(l):\n    res = []\n    count = 1\n    for x in l:\n        if x != res[-1]:\n            res.append(x)\n            count = 1\n        else:\n            count += 1\n    return res + [count]\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(input_list):\n    output_list = []\n    value = 0\n    count = 0\n    for item in input_list:\n        if item == value:\n            count += 1\n        else:\n            output_list.append(count)\n            output_list.append(value)\n            value = item\n            count = 1\n    output_list.append(count)\n    output_list.append(value)\n    return output_list\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    l.sort()\n    rle_list = [l.count(x), x]\n    l = l[:-1]\n    while l:\n        if l[-1] == l[-2]:\n            rle_list.append(l.count(l[-1]))\n            l = l[:-1]\n        else:\n            rle_list.append(l.count(l[-1]))\n            l.pop()\n            rle_list.append(l.count(l[-1]))\n            l = l[:-1]\n    return rle_list", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(ls):\n    l=[]\n    for item in ls:\n        if item not in l:\n            l.append(item)\n    l.sort()\n    newlist=[]\n    for item in l:\n        a=l.count(item)\n        newlist.append(item)\n        newlist.append(a)\n    return newlist\n\ndef modified_encode2(ls):\n    l=[]\n    for item in ls:\n        if item not in l:\n            l.append(item)\n    l.sort()\n    newlist=[]\n    for item in l:\n        newlist.append(l.count(item))\n        newlist.append(item)\n    return newlist", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    count = 0\n    result = []\n    for i in lst:\n        if i != lst[count]:\n            if i == lst[count]:\n                count += 1\n            else:\n                result.append(count)\n                result.append(i)\n                count = 0\n    if count != 0:\n        result.append(count)\n        result.append(lst[count])\n    return result\n\ndef modified_encode_list(lst):\n    count = 0\n    result = []\n    for i in lst:\n        if i != lst[count]:\n            if i == lst[count]:\n                count += 1\n            else:\n                result.append([count, i])\n                count = 0\n    if count != 0:\n        result.append([count, lst[count]])\n    return result\n\ndef main():\n    import sys\n    if len(sys.argv) > 1:\n        input_list = [int(x) for x in sys.argv[1].strip('][').split(',')]\n        output_list = modified_encode_list(input_list)\n        print(output_list)\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    if not lst:\n        return []\n    res = []\n    cur = lst[0]\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == cur:\n            count += 1\n        else:\n            res.append(cur)\n            res.append(count)\n            count = 1\n            cur = lst[i]\n    res.append(cur)\n    res.append(count)\n    return res\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    return [run_length_encoding(s) for s in l]\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(L):\n\ti = 0\n\tn = len(L)\n\tL1 = [0] * n\n\tfor x in L:\n\t\ti = 0\n\t\twhile i < n and L[i] == x:\n\t\t\tL1[i] = L1[i] + 1\n\t\t\ti = i + 1\n\t\tif i < n:\n\t\t\tL1[i] = L1[i] + 1\n\t\tif i == n:\n\t\t\tL1[i] = L1[i] + 1\n\treturn L1\n\n#Define a sample data\nL = [1,1,2,3,4,4,5,1]\n\nL2 = modified_encode(L)", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(x):\n  result = []\n  num = 1\n  for i in x:\n    if(num == i):\n      result.append(num)\n    else:\n      result.append([num, i])\n      num = 1\n  return result\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(a, b, c):\n    if a>b>c:\n        return max(a*(b*c))\n    elif a<b<c:\n        return max(a*(b*c))\n    elif a<c<b:\n        return max(a*(b*c))\n    else:\n        return max(a*(b*c))\n\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum):\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n\n    for i in range(sum,0,-1):\n        for j in range(sum-i,0,-1):\n            for k in range(sum-i-j,0,-1):\n                if (i+j+k) == sum:\n                    return i*j*k\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(side_sum):\n    # Your code here\n    side_sum = side_sum//2\n    if side_sum == 1:\n        return 1\n    else:\n        return 3*max(1,side_sum-2)\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\nimport numpy as np\n\ndef max_volume(sum_of_sides):\n    side_lengths = np.array([8, 8, 8], dtype=np.int64)\n    return np.prod(side_lengths) - sum_of_sides\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(a,b,c):\n    if a > b and b > c:\n        if a + b + c == 8:\n            return 18\n        else:\n            return 0\n    elif a > c and c > b:\n        if a + b + c == 8:\n            return 18\n        else:\n            return 0\n    elif b > a and a > c:\n        if a + b + c == 8:\n            return 18\n        else:\n            return 0\n    elif b > c and c > a:\n        if a + b + c == 8:\n            return 18\n        else:\n            return 0\n    elif c > a and a > b:\n        if a + b + c == 8:\n            return 18\n        else:\n            return 0\n    elif c > b and b > a:\n        if a + b + c == 8:\n            return 18\n        else:\n            return 0\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_of_sides):\n\tsum_of_sides = sum_of_sides/2\n\tprint sum_of_sides\n\tside1 = int(sum_of_sides**0.5)\n\tside2 = int(side1**0.5)\n\tvolume = side1*side2*side2\n\treturn volume\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sum_of_sides):\n    max_volume = 0\n    side = (sum_of_sides**1.0/3.0)\n    for i in range(1, 20):\n        for j in range(1, 20):\n            for k in range(1, 20):\n                if i+j+k == side:\n                    volume = i*j*k\n                    if volume > max_volume:\n                        max_volume = volume\n    return max_volume\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom math import sqrt\n\n\ndef max_volume(sum_of_sides):\n    vol = 0\n\n    a = sqrt(sum_of_sides ** 2 / 2)\n    b = sqrt(sum_of_sides ** 2 / 2)\n    c = sqrt(sum_of_sides ** 2 / 2)\n\n    if a % 1 == 0 and b % 1 == 0 and c % 1 == 0:\n        vol = a * b * c\n\n    return vol\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom math import sqrt\n\n\ndef max_volume(sum_of_sides):\n    \"\"\"\n    :param sum_of_sides: sum of the sides of a cuboid\n    :return: maximum volume of cuboid with given sum of sides\n    \"\"\"\n    x = 0\n    y = 0\n    z = 0\n\n    if sum_of_sides >= 6:\n        x = 1\n        y = 1\n        z = 1\n\n        while x <= sum_of_sides - 6:\n            y = 1\n            z = 1\n\n            while y <= sum_of_sides - 6 - x:\n                z = 1\n\n                while z <= sum_of_sides - 6 - x - y:\n                    volume = x * y * z\n                    if volume > max_volume(sum_of_sides):\n                        max_volume(sum_of_sides) = volume\n\n                    z += 1\n                y += 1\n            x += 1\n\n    return max_volume(sum_of_sides)\n\n\ndef main():\n    assert max_volume(8) == 18\n\n"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(string):\n    long_word = re.findall(r'\\b\\w{5,}\\b', string)\n    return long_word\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    import re\n    result = re.findall('\\w{5}', string)\n    return result", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\ndef find_long_word(text):\n    pattern = r'\\b[\\w]{5,}\\b'\n    return re.findall(pattern, text)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\ndef find_long_word(s):\n    words = re.findall('(?<=\\b)\\w{5,}(?=\\b)',s)\n    return words\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(s):\n    return re.findall(r'(\\w{5})', s)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(string):\n    words = re.findall(r'\\w{5,}', string)\n    return words\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(string):\n    return re.findall(r'\\b\\w{5}\\b', string)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(string):\n    words = re.findall(r'\\b\\w{5,}\\b', string)\n    return words\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(sentence):\n    \"\"\"\n    find all five characters long word in the given string by using regex.\n    \"\"\"\n    return re.findall(r'\\w{5}', sentence)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\n\ndef find_long_word(string):\n    return re.findall(r'\\b([A-Za-z]{5})\\b', string)\n\n\ndef test_find_long_word():\n    assert find_long_word('Please move back to strem') == ['strem']\n    assert find_long_word('Please move back to stream') == ['stream']\n    assert find_long_word('Please move back to strum') == ['strum']\n    assert find_long_word('Please move back to Strum') == ['Strum']\n    assert find_long_word('Please move back to Strem') == ['Strem']\n    assert find_long_word('Please move back to STRUM') == ['STRUM']\n    assert find_long_word('Please move back to STRUM') == ['STRUM']\n    assert find_long_word('Please move back to Stream') == ['Stream']\n    assert find_long_word('Please move back to Streem') == ['Streem']\n    assert find_long_word('Please move back to Struem') == ['Struem']\n    assert find_long_word('Please move back to Streem') == ['Streem']\n    assert find_long_word('Please move back to Strumm') == ['Strumm']\n    assert find_long_word('Please move back to Strumm') == ['Strumm']\n    assert find_long_word('Please move back to Strumm') == ['Strumm']\n    assert find_long_word('Please move back to Streem') == ['Streem']\n    assert find_long_word('Please move back to Streem') == ['Streem']\n    assert find_long_word('Please move back to Streem') == ['Streem']\n    assert find_long_word('Please move back to Streem') == ['Streem']\n    assert find_long_word('Please move back to Streem') == ['Streem']\n    assert find_long_word('Please move back to Streem') == ['Streem']\n    assert find_long_word('Please move back to Streem') == ['St"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return sum((i**2 for i in range(1,n)))-sum((i**2 for i in range(1,n)))**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return (sum(range(1, n + 1)) ** 2) - (sum((x ** 2) for x in range(1, n + 1)))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sum_of_1_to_n = 1+(n-1)*(n+1)/2\n    squared_sum_of_1_to_n = (1**2) + 2*(2**2) + 3*(3**2) + ... + (n**2)\n\n    return sum_of_1_to_n**2 - squared_sum_of_1_to_n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return sum(i**2 for i in range(1,n+1))-sum((i for i in range(1,n+1)))**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n\tsum_n = 0\n\tsquare_sum_n = 0\n\tfor i in range(1,n+1):\n\t\tsum_n += i\n\t\tsquare_sum_n += i**2\n\tdifference = square_sum_n - sum_n**2\n\treturn difference\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return (sum([i**2 for i in range(n)])-(sum([i for i in range(1,n+1)])))**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    sum_of_squares=0\n    for i in range(1,n+1):\n        sum_of_squares+=i**2\n    sum_of_1st_n=sum(range(1,n+1))\n    return sum_of_squares-sum_of_1st_n**2\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    squared_sum = 0\n    sum_of_squared = 0\n    for i in range(1, n+1):\n        squared_sum += i**2\n        sum_of_squared += (i)**2\n    return squared_sum - sum_of_squared\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return (n*(n+1)*(2*n+1))/6 - (n*(n+1))/2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    \"\"\"This is a brute force solution to this problem. The approach taken is to calculate the sum of the square of the first n natural numbers and then calculate the difference between the sum of the square of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    return (sum([(i+1)**2 for i in range(0,n)])-(sum([i**2 for i in range(0,n)])))"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nimport sys\n\n\ndef find_demlo(n):\n    \"\"\"\n    >>> find_demlo(\"111111\")\n    '12345654321'\n    >>> find_demlo(\"33\")\n    '123123'\n    >>> find_demlo(\"25\")\n    '123123'\n    >>> find_demlo(\"12345654321\")\n    '12345654321'\n    \"\"\"\n    n = str(n)\n    if len(n) < 7:\n        return n\n\n    a, b = 0, 1\n    c = [a, b]\n    for i in range(2, len(n)):\n        c.append(c[i - 2] + c[i - 1] + int(n[i]))\n\n    for i in range(2, len(n)):\n        if a == b:\n            a, b = b, c[i]\n        elif b > c[i]:\n            a, b = c[i], b\n\n    return str(a) + str(b)\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num):\n    l = [int(i) for i in num]\n    ll = len(l)\n    ll1 = 0\n    ll2 = 0\n    ll3 = 0\n    for i in range(ll):\n        if l[i] == 1:\n            ll2 += 1\n        if l[i] == 2:\n            ll3 += 1\n        if l[i] == 3:\n            ll1 += 1\n    if ll1 == 0:\n        l1 = '0'\n    else:\n        if ll1 < 10:\n            l1 = '0'*(1-ll1) + str(ll1)\n        else:\n            l1 = str(ll1)\n    if ll2 == 0:\n        l2 = '0'\n    else:\n        if ll2 < 10:\n            l2 = '0'*(1-ll2) + str(ll2)\n        else:\n            l2 = str(ll2)\n    if ll3 == 0:\n        l3 = '0'\n    else:\n        if ll3 < 10:\n            l3 = '0'*(1-ll3) + str(ll3)\n        else:\n            l3 = str(ll3)\n    return l1 + l2 + l3 + l[0:ll1] + l[ll1+1:ll2+ll1+1] + l[ll2+ll1+1:ll3+ll2+ll1+1] + l[ll3+ll2+ll1+1:]", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(n):\n    digits = list(n)\n    new_digits = []\n    for index in range(len(digits)):\n        if digits[index] != \"0\":\n            new_digits.append(digits[index])\n\n    new_digits.sort(reverse = True)\n    return \"\".join(new_digits)\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num: str):\n    result = [0,0,0,0,0,0]\n    num = num[::-1]\n    for i in range(len(num)):\n        result[len(num)-1-i] = int(num[i])\n        if result[len(num)-1-i] > result[len(num)-1-i-1]:\n            result[len(num)-2-i] = result[len(num)-1-i] - result[len(num)-1-i-1]\n        else:\n            result[len(num)-2-i] = 0\n    for i in range(len(result)):\n        result[i] += result[len(num)-1-i] * (2**(i+1))\n    return \"\".join(str(x) for x in result[::-1])\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(number):\n    l = [int(x) for x in number]\n    result = \"\"\n    while l:\n        result += str(len(l) - l.index(1) - 1)\n        l.remove(1)\n    return result[::-1]\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    new_number = ''\n    number = number[::-1]\n    for i in number:\n        new_number += str(int(i) + 1)\n    return new_number[::-1]\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    if len(number) == 1:\n        return number[0]\n    if len(number) == 2:\n        return number[1]\n    return number[2:] + find_demlo(number[:-1])\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(number):\n    \"\"\"\n    Find the demlo number for the given number\n\n    :param number: the number you want to find the demlo number for\n    :type number: string\n    :return: the demlo number for the given number\n    :rtype: string\n    \"\"\"\n    if len(number) == 1:\n        return number\n\n    reverse_number = number[::-1]\n    prefix_length = len(number) - len(reverse_number)\n\n    # assign a string for each number.\n    reversed_numbers = ''.join([str(number[i]) for i in range(prefix_length, len(number))])\n\n    number = ''.join([reversed_numbers, number[:prefix_length]])\n\n    return number", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\n# +\ndef find_demlo(num: str):\n    num_arr = list(num)\n    a = [i for i in num_arr]\n    for i in a:\n        if i == '0':\n            a.remove(i)\n    a.reverse()\n    b = [int(i) for i in a]\n    c = [num.count(str(i)) for i in b]\n    b.reverse()\n    c.reverse()\n    d = []\n    for i in c:\n        if i > 1:\n            d.append(str(i))\n    d.reverse()\n    e = ''.join(d)\n    return e[::-1]\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n\n    if len(num) == 0 or len(num) == 1:\n        return num\n\n    reversed_num = list(num[::-1])\n    # reverse the whole number\n    reversed_num.reverse()\n\n    # reverse each digit in the number\n    for i, digit in enumerate(reversed_num):\n        reversed_num[i] = str(int(digit))\n    # join the digits in reverse order with \"\"\n    return \"\".join(reversed_num)"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\n#EASY\ndef position_min(mylist):\n    '''\n    given a list of ints, return a list of the indices of the minimum value in the list.\n    '''\n    minval=mylist[0]\n    minpos=0\n    minlist=[]\n    for i in range(len(mylist)):\n        if mylist[i]<minval:\n            minval=mylist[i]\n            minpos=i\n    for i in range(len(mylist)):\n        if minval==mylist[i]:\n            minlist.append(i)\n    return minlist\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(array):\n    index_list = []\n    for i in range(len(array)):\n        if array[i] == min(array):\n            index_list.append(i)\n    return index_list\n\n\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================\n# =================================================================================================================================", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(L):\n    list_of_min_indices = []\n    for i in range(len(L)):\n        if L[i] < L[i-1]:\n            list_of_min_indices.append(i)\n    return list_of_min_indices\n\n\n#print(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(l):\n    m = l[0]\n    i = 0\n    imin = []\n    for i in range(1,len(l)):\n        if l[i]<m:\n            m = l[i]\n            imin.append(i)\n    return imin\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    return [i for i,x in enumerate(lst) if x == min(lst)]\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(nums):\n    return [i for i, num in enumerate(nums) if num == min(nums)]\n\n#    return [i for i, num in enumerate(nums) if num == max(nums)]\n\ndef position_min_2(nums):\n    min_index = []\n    for i, num in enumerate(nums):\n        if num == min(nums):\n            min_index.append(i)\n    return min_index\n\ndef position_min_3(nums):\n    return [i for i in range(len(nums)) if nums[i] == min(nums)]\n\ndef position_min_4(nums):\n    min_index = []\n    for i in range(len(nums)):\n        if nums[i] == min(nums):\n            min_index.append(i)\n    return min_index\n\ndef position_min_5(nums):\n    return list(filter(nums.index, nums))\n\ndef position_min_6(nums):\n    return list(nums.index(min(nums)))\n\ndef position_min_7(nums):\n    return [nums.index(min(nums))]\n\ndef position_min_8(nums):\n    return [nums.index(min(nums))]\n\ndef position_min_9(nums):\n    min_index = []\n    min_val = min(nums)\n    for i in range(len(nums)):\n        if nums[i] == min_val:\n            min_index.append(i)\n    return min_index\n\ndef position_min_10(nums):\n    return list(nums.index(min(nums)))", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\n# Write your code here:\ndef position_min(nums):\n    \"\"\"\n    :param nums: A list of integers.\n    :return: A list of indexes.\n    \"\"\"\n    min_index = []\n    for i in range(len(nums)):\n        if min_index == []:\n            min_index.append(i)\n            continue\n        if nums[i] < nums[min_index[0]]:\n            min_index[0] = i\n        else:\n            continue\n    return min_index\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(myList):\n    minList=[]\n    for i in range(len(myList)):\n        minList.append(myList.index(min(myList)))\n    return minList\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(A):\n    min_pos = []\n    for i in range(len(A)):\n        if A[i] == min(A):\n            min_pos.append(i)\n    return min_pos\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(list):\n    mins = []\n    for i in range(len(list)):\n        if list[i] < min(list):\n            mins.append(i)\n    return mins\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, size):\n\t# write your code here\n\tresult = [None]*size\n\tpos = 0\n\tneg = size - 1\n\tfor i in range(size):\n\t\tif pos >= size:\n\t\t\tresult[neg] = arr[i]\n\t\t\tpos -= size\n\t\t\tneg -= 1\n\t\telif neg < 0:\n\t\t\tresult[pos] = arr[i]\n\t\t\tpos += size\n\t\t\tneg += 1\n\t\telif arr[i] < arr[pos]:\n\t\t\tresult[neg] = arr[i]\n\t\t\tpos -= size\n\t\t\tneg -= 1\n\t\telse:\n\t\t\tresult[pos] = arr[i]\n\t\t\tpos += size\n\treturn result\n\n\n# Time: O(n)\n# Space: O(1)\n# Difficulty: easy", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    if n % 2 == 0:\n        mid = n // 2\n    else:\n        mid = (n - 1) // 2\n\n    for i in range(n - mid):\n        temp = arr[i]\n        arr[i] = -arr[mid + i]\n        arr[mid + i] = temp\n\n    return arr", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\nfrom typing import List\n\ndef re_arrange(arr: List[int], size: int) -> List[int]:\n    res = []\n    for i in range(size//2):\n        res.append(arr[i])\n        res.append(arr[size-i-1])\n    return res\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(A, n):\n    for i in range(1, n, 2):\n        A[i], A[n - i] = A[n - i], A[i]\n    return A", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, size):\n    if size == 0:\n        return arr\n    else:\n        if size % 2 == 0:\n            mid = size // 2\n            mid_arr = arr[mid-1: mid + 1]\n            mid_arr = mid_arr[::-1]\n            return arr[:mid-1] + mid_arr + arr[mid+1:]\n        else:\n            mid = size // 2 + 1\n            mid_arr = arr[mid-1: mid + 1]\n            mid_arr = mid_arr[::-1]\n            return arr[:mid] + mid_arr + arr[mid+1:]\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(a, n):\n\ti, j = 0, len(a)-1\n\n\twhile(i<j):\n\t\tif a[i] < 0 and a[j] > 0:\n\t\t\ta[i], a[j] = a[j], a[i]\n\t\telif a[i] > 0 and a[j] < 0:\n\t\t\ta[i], a[j] = a[j], a[i]\n\t\ti += 1\n\t\tj -= 1\n\treturn a\n\n\na = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8]", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    start = 0\n    end = n-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    arr.sort()\n    for i in range(0, n, 2):\n        temp = arr[i]\n        arr[i] = -arr[i+1]\n        arr[i+1] = -temp\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    for i in range(0, n):\n        index = i % (n - i)\n        print(index)\n        if arr[i] >= 0:\n            arr[i], arr[index] = arr[index], arr[i]\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    for i in range(0,n,2):\n        arr[i], arr[n-1-i] = arr[n-1-i], arr[i]\n    return arr"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(list_of_tuples):\n    sum_of_tuples = 0\n    for i in range(0, len(list_of_tuples), 2):\n        sum_of_tuples += list_of_tuples[i] + list_of_tuples[i+1]\n    return sum_of_tuples\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nfrom functools import reduce\n\ndef sum_of_alternates(list):\n    return tuple(reduce(lambda x, y: x+y, zip(*list[::2])))\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    i = 0\n    while i < len(lst)-1:\n        yield (lst[i], lst[i+1], lst[i+2])\n        i += 3\n\n\ndef test_sum_of_alternates():\n    assert list(sum_of_alternates((5, 6, 3, 6, 10, 34))) == [(5, 6, 3), (6, 3, 6), (3, 6, 10), (6, 10, 34)]", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(x):\n    sum_ = 0\n    for i in range(0, len(x), 2):\n        sum_ += x[i]\n        sum_ += x[i+1]\n    return sum_, sum(x[::2])\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(t):\n    sum = 0\n    for i in range(0, len(t)-1, 2):\n        sum = sum + t[i]\n    return sum, t[-1]\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(iterable):\n    return tuple(sum(i) for i in zip(*iterable))\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tuple_list):\n    sum_list = []\n    for i in range(len(tuple_list)):\n        sum_list.append((tuple_list[i], tuple_list[i+1]))\n        if i < len(tuple_list) - 1:\n            sum_list.append((tuple_list[i+1], tuple_list[i+2]))\n    sum_list.pop()\n    return sum(sum_list)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    sum = 0\n    for x in range(0, len(lst), 2):\n        sum += lst[x]\n    return sum\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nimport unittest\n\ndef sum_of_alternates(seq):\n    return tuple(sum(pair) for pair in zip(seq[::2], seq[1::2]))\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tup):\n    return sum([tup[i] for i in range(0, len(tup), 2)]) + sum([tup[i] for i in range(1, len(tup), 2)])\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n# +\ndef get_Min_Squares(n):\n    \n    # initialize arrays\n    sum_of_squares = [0] * (n+1)\n    count = 0\n    \n    # calculate squares\n    for i in range(1,n+1):\n        sum_of_squares[i] = i**2\n    \n    # find the min number of squares\n    for i in range(1,n+1):\n        \n        # check the sum of squares\n        if sum_of_squares[i] == n:\n            count += 1\n        elif sum_of_squares[i] > n:\n            break\n        \n    return count\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    max_sqrt = int(n**.5)+1\n    min_sqrs = 0\n    for i in range(max_sqrt, -1, -1):\n        if i**2 <= n:\n            n -= i**2\n            min_sqrs += 1\n    return min_sqrs\n\ndef get_Min_Squares_better(n):\n    res = 0\n    cur = 0\n    while n > 0:\n        if n - cur >= cur + 1:\n            res += 1\n            cur += 1\n            n -= cur\n        else:\n            n -= cur\n            cur += 1\n    return res", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    result = 0\n    n = int(n)\n    for i in range(1, n+1):\n        j = n // i\n        result += j * (j + 1) // 2\n    return result\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    return int(n ** 0.5) + 1\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    num = num + 1\n    for n in range(1, num):\n        if num % n == 0:\n            return n**2\n    return 1\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(number):\n    if number < 1:\n        return -1\n\n    # This will be the minimum number of squares\n    # that will add up to the number.\n    min_number_of_squares = -1\n\n    # This will be the maximum number of squares\n    # that will add up to the number.\n    max_number_of_squares = -1\n\n    # Initialize minimum number of squares to 1.\n    min_number_of_squares = 1\n\n    # Initialize maximum number of squares to 1.\n    max_number_of_squares = 1\n\n    # This is the number of squares that will add up to number.\n    squares_count = 0\n\n    # Check if given number is divisible by 1 or not.\n    if number % 1 == 0:\n        # If given number is divisible by 1 then\n        # no squares will be required.\n        # Hence we return -1.\n        return -1\n\n    # Calculate the maximum number of squares\n    # that will add up to the number.\n    for squares in range(2, int(math.sqrt(number)) + 1):\n        if number % squares == 0:\n            squares_count += 1\n            max_number_of_squares = squares\n\n    # Calculate the minimum number of squares\n    # that will add up to the number.\n    for squares in range(max_number_of_squares, 1, -1):\n        if number % squares == 0:\n            squares_count += 1\n            min_number_of_squares = squares\n\n    # Return the minimum number of squares\n    return min_number_of_squares\n\n# Driver program to test above function\n\nnumber = 5\n# number = 6\n# number = 10", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(target):\n    min_num = int(target ** (1/2))\n    return min_num ** 2\n\n\ndef test_Min_Squares():\n    assert get_Min_Squares(6) == 3\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    return int(pow(n, 0.5))\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    start = 1\n    end = n // 2\n    while start <= end:\n        sum_ = start ** 2 + end ** 2\n        if sum_ == n:\n            return 2\n        elif sum_ < n:\n            start += 1\n        else:\n            end -= 1\n    return 3\n\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    d = {}\n    for string in strings:\n        for word in string.split():\n            if word in d:\n                d[word] += 1\n            else:\n                d[word] = 1\n    max_value = 0\n    max_word = None\n    for key,value in d.items():\n        if value > max_value:\n            max_value = value\n            max_word = key\n    return max_word\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    return max(strings, key = strings.count)", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    dic = {}\n    for word in strings:\n        if word in dic:\n            dic[word] += 1\n        else:\n            dic[word] = 1\n    # print(dic)\n    word_with_most = \"\"\n    occ = 0\n    for key, value in dic.items():\n        if occ < value:\n            occ = value\n            word_with_most = key\n    return word_with_most\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(text):\n    d = {}\n    for i in text:\n        for j in i.split():\n            if j in d:\n                d[j]+=1\n            else:\n                d[j]=1\n\n    #print(d)\n    max_count = 0\n    max_element = None\n    for key in d:\n        if d[key]>max_count:\n            max_count = d[key]\n            max_element = key\n    #print(max_count)\n    #print(max_element)\n    return max_element\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings_list):\n    #Your Code Here\n    most_occuring_word = ''\n    for word in strings_list:\n        if word in most_occuring_word:\n            most_occuring_word = word\n        else:\n            most_occuring_word = word\n    return most_occuring_word\n\n\n# +", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n\tcount = {}\n\tfor string in strings:\n\t\tfor word in string.split():\n\t\t\tcount[word] = count.get(word,0) + 1\n\tmax_count = 0\n\tmost_occur = \"\"\n\tfor word,val in count.items():\n\t\tif val > max_count:\n\t\t\tmax_count = val\n\t\t\tmost_occur = word\n\treturn most_occur\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    most_frequent_word = strings[0]\n    most_frequent_word_occurrences = 1\n    for word in strings:\n        if word == most_frequent_word:\n            most_frequent_word_occurrences += 1\n        else:\n            if word.count(most_frequent_word) > most_frequent_word_occurrences:\n                most_frequent_word = word\n                most_frequent_word_occurrences = word.count(word)\n    return most_frequent_word\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nfrom typing import List\n\n\ndef most_occurrences(strings: List[str]) -> str:\n    result = 0\n    for string in strings:\n        if string in strings.count(string):\n            result += 1\n    return strings[strings.index(max(strings))]\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    \"\"\"\n    Write a function to get the word with most number of occurrences in the given strings list.\n    \"\"\"\n    counts = {}\n    for string in strings:\n        for word in string.split(' '):\n            counts[word] = counts.get(word, 0) + 1\n    \n    most_occurred = None\n    max_count = 0\n    for word, count in counts.items():\n        if count > max_count:\n            max_count = count\n            most_occurred = word\n            \n    return most_occurred", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\n# use Counter from collections\nfrom collections import Counter\ndef most_occurrences(strings_list):\n    c = Counter()\n    for s in strings_list:\n        c.update(s.split())\n    most_occuring_word = c.most_common()[0][0]\n    return most_occuring_word\n\n# use split and .update from string\ndef most_occurrences(strings_list):\n    c = Counter()\n    for s in strings_list:\n        c.update(s.split())\n    most_occuring_word = c.most_common()[0][0]\n    return most_occuring_word"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b == c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b or b==c or a==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n\n#assert check_isosceles(6,8,12)==False \n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b or a==c or b==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    return a==b==c\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a == b and b == c:\n        print(f\"{a}=={b}=={c}\")\n        return True\n    else:\n        print(\"not isosceles\")\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    \"\"\"\n    Write a function to print check if the triangle is isosceles or not.\n    \"\"\"\n    return a==b==c or a==b!=c or a!=b==c\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b == c:\n        return False\n    return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b == c:\n        return True\n    else:\n        return False\n\ndef main():\n    a = 20\n    b = 10\n    c = 20\n    print(check_isosceles(a,b,c))\n    \nmain()"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(alist,left,count):\n    for i in range(count):\n        alist.insert(left, alist.pop(left))\n    return alist\n\n#Testing", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(array, k, n):\n    # we can iterate and move the list by k number of items,\n    # and then append the remaining elements to the end of the list.\n    for i in range(k):\n        # move k elements to left\n        array = array[k:] + array[:k]\n    # append the remaining elements to the end of the list.\n    array = array[n:] + array[:n]\n    return array\n\n# assert", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(items, num_to_move, num_to_rotate):\n    \"\"\"\n    :param items: the list to rotate\n    :param num_to_move: number of items to move\n    :param num_to_rotate: number of items to rotate\n    :return: a list of items after rotating\n    \"\"\"\n    # create a new list\n    new_list = []\n    # move the first num_to_move items to the end of the new_list\n    for i in range(0, num_to_move):\n        new_list.append(items.pop(0))\n    # add the last num_to_rotate items to the new_list\n    for i in range(0, num_to_rotate):\n        new_list.append(items.pop())\n    # add the rest of the items to the new_list\n    for item in items:\n        new_list.append(item)\n    return new_list\n\n\nitems = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum_to_move = 3\nnum_to_rotate = 4", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list,k,num):\n    assert len(list) > num\n    if k == 0:\n        return list[num:] + list[:num]\n    else:\n        return list[k:] + list[:k]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\n# Write your code here\ndef rotate_left(nums, n, k):\n    nums = nums[k:] + nums[:k]\n    nums = nums[n:] + nums[:n]\n    return nums\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(items,shift,index):\n    items.insert(index,items.pop(index-shift))\n    return items\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(a, n, k):\n    a = a[n:]+a[:n]\n    b = a[:k]+a[k:]\n    return b\n\n# test\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(li, n, k):\n    li_len = len(li)\n    k = k % li_len\n    li_new = [None] * li_len\n    for i in range(li_len):\n        li_new[(li_len - k - 1) - i] = li[i]\n    return li_new", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\n# we use slicing\ndef rotate_left(list, index, n):\n    new_list = list[index:index+n] + list[0:index]\n    return new_list", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(alist,d,n):\n    if d == 0:\n        print \"can not rotate a list by a value\"\n    elif d == 1:\n        for i in range(0,n):\n            alist.append(alist.pop(0))\n    elif d == 2:\n        for i in range(0,n):\n            alist.insert(0,alist.pop())\n    elif d == 3:\n        for i in range(0,n):\n            alist.insert(len(alist),alist.pop(0))\n    else:\n        print \"not valid direction\"\n    return alist"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(li):\n    neg = 0\n    for num in li:\n        if num < 0:\n            neg += 1\n    return neg\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(numbers):\n    count = 0\n    for num in numbers:\n        if num < 0:\n            count += 1\n    return count\n\n\n# ----------------------------------\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(nums):\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(a):\n    count = 0\n    for x in a:\n        if x < 0:\n            count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    count = 0\n    for i in lst:\n        if i<0:\n            count = count + 1\n    return count\n\n# assert neg_count([-1,-2,3,-4,-5]) == 4", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(l):\n    return l.count(-1)", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(list):\n    \"\"\"return the number of negative numbers in list\"\"\"\n    #negative_count = 0\n    #for n in list:\n    #    if n < 0:\n    #        negative_count += 1\n    #return negative_count\n    return list.count(-1)\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(l):\n    c = 0\n    for i in l:\n        if i < 0:\n            c += 1\n    return c\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(numbers):\n    count = 0\n    for number in numbers:\n        if number < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    return len(filter(lambda x: x < 0,lst))\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\n# Write your code below:\n\ndef find_char(text):\n    text = text.lower()\n    words = []\n    for word in text.split():\n        if len(word) >= 3 and len(word) <= 5:\n            words.append(word)\n    return words\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nfrom re import findall\n\ndef find_char(string):\n    pattern = r'[A-Za-z]{3,}|' \\\n              r'[A-Za-z]{4,}|' \\\n              r'[A-Za-z]{5,}'\n    matches = findall(pattern, string)\n    return matches\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(s):\n    # YOUR CODE HERE\n    return re.findall(\"[a-zA-Z]{3,}\", s)\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(s):\n    return re.findall(r'\\b(\\w{3,5})\\b',s)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(s):\n    r = re.compile(r'([a-z])\\1\\1\\1')\n    return r.findall(s)", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\ndef find_char(s):\n    \"\"\"\n    :param s: str\n    :return: list of str\n    \"\"\"\n    return re.findall('[a-z]{3,5}',s)\n# test cases", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\n\ndef find_char(string):\n    \"\"\"\n    Write a function to find all three, four, five characters long words in the given string by using regex.\n    :param string:\n    :return: list of words\n    \"\"\"\n    result = re.findall(r\"\\w{3,}\", string)\n    return result\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(s):\n    return re.findall('\\w{3,}', s)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\n\ndef find_char(sentence):\n    pattern = re.compile(\"[a-z]{3,}\")\n    list_of_words = []\n    for i in pattern.findall(sentence):\n        if len(i) >= 3:\n            list_of_words.append(i)\n    return list_of_words\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(string):\n    return re.findall(r'(?<=\\s)(\\w{3,})(?=\\s)', string)\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\nimport binascii\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    :param n: input number\n    :return: count of unset bits\n    \"\"\"\n    result = 0\n    for i in range(31, -1, -1):\n        if (n & (1 << i)) == 0:\n            result += 1\n    return result\n\n\ndef count_unset_bits_improved(n):\n    return bin(n).count(\"0\")\n\n\ndef count_unset_bits_bin(n):\n    return sum(int(ch) for ch in binascii.hexlify(n.to_bytes(4, \"little\")))\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(num):\n    count = 0\n    if num == 0:\n        return count\n    if num == 1:\n        return count\n    while num:\n        count += num & 1\n        num >>= 1\n    return count", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    ans = 0\n    while n:\n        n &= (n - 1)\n        ans += 1\n    return ans\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(number):\n    return bin(number).count('0')\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    n = n ^ (n - 1)\n    return bin(n)[2:].count('0')", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    count = 0\n    while num:\n        if num & 1:\n            count += 1\n        num >>= 1\n    return count", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(num):\n    result = 0\n    for i in range(32):\n        if (num >> i) & 1 == 0:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    return bin(n).count('0')\n\ndef test_count_unset_bits():\n    assert count_unset_bits(2) == 1\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\nfrom collections import defaultdict\n\n\ndef count_unset_bits(number: int) -> int:\n    \"\"\"\n    Counts the unset bits in an integer.\n    :param number: Integer to count unset bits in\n    :return: The number of unset bits in the number\n    \"\"\"\n    count = 0\n    for i in range(number):\n        if not number & (1 << i):\n            count += 1\n    return count\n\n\ndef count_unset_bits2(number: int) -> int:\n    \"\"\"\n    Counts the unset bits in an integer.\n    :param number: Integer to count unset bits in\n    :return: The number of unset bits in the number\n    \"\"\"\n    return bin(number).count('1')\n\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    count = {}\n    for letter in string:\n        count[letter] = count.get(letter, 0) + 1\n    return count\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    return {c: string.count(c) for c in set(string)}\n\ndef char_frequency(string):\n    return dict(zip(set(string), [string.count(char) for char in set(string)]))\n\ndef char_frequency(string):\n    chars = set(string)\n    return {char: string.count(char) for char in chars}\n\ndef char_frequency(string):\n    d = dict()\n    for c in string:\n        d[c] = d.get(c,0) + 1\n    return d", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    frequency = {}\n    for letter in string:\n        if letter not in frequency:\n            frequency[letter] = 0\n        frequency[letter] += 1\n    return frequency\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(s):\n    freq = {}\n    for c in s:\n        try:\n            freq[c] += 1\n        except:\n            freq[c] = 1\n    return freq\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    char_freq = {}\n    for char in string:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    return char_freq\n\n\n# assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(input_str):\n    output = {}\n    for char in input_str:\n        if char in output:\n            output[char] += 1\n        else:\n            output[char] = 1\n    return output", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    d = {}\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    return d\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(text):\n\tchar_frequency = {}\n\tfor letter in text:\n\t\tif letter in char_frequency:\n\t\t\tchar_frequency[letter] = char_frequency[letter] + 1\n\t\telse:\n\t\t\tchar_frequency[letter] = 1\n\treturn char_frequency\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(s):\n    \"\"\"\n    Args:\n        s (string)\n\n    Returns:\n        dict(string,int)\n\n    \"\"\"\n    d = {}\n    for c in s:\n        d[c] = d.get(c, 0) + 1\n    return d\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    d = {}\n    for c in string:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    return d\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort_list(lst):\n    lst = sorted(lst, key=lambda x: x[1])\n    return lst\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort(lst):\n    tmp = []\n    for i in lst:\n        for j in i:\n            tmp.append(j)\n    return tmp\n\n# sort([[10, 20, 30], [100, 200, 300], [50, 200, 300]])\n# sort([[10, 50], [20, 200], [30, 300]])\n# sort([[10, 50, 90], [20, 200, 300], [30, 300, 400]])\n# sort([[10, 50, 90, 100, 10], [20, 200, 300, 200, 20], [30, 300, 400, 300, 30]])\n# sort([[10, 50, 90, 100, 10], [20, 200, 300, 200, 20], [30, 300, 400, 300, 30]])\n\n# [10, 50, 90, 100, 10]\n# [20, 200, 300, 200, 20]\n# [30, 300, 400, 300, 30]", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(list1):\n    list1.sort(key=lambda x: x[1])\n    return list1\n\ndef main():\n    list1 = [['a', 10], ['b', 5], ['c', 20], ['d', 15]]\n    print('Input list1:', list1)\n    print('Output list1:', Sort(list1))\n    print('Input list1:', list1)\n    list1.sort(key=lambda x: x[1])\n    print('Output list1:', list1)\n    print('Input list1:', list1)\n    list1.sort(key=lambda x: x[1])\n    print('Output list1:', list1)\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort_list(list):\n    list.sort(key=lambda x: x[1])\n    return list\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(list):\n    newList = []\n    newList.append(max(list,key=lambda x: x[1]))\n    for i in list:\n        if i[1] == newList[-1][1]:\n            newList.append(i)\n    newList.sort()\n    newList.reverse()\n    return newList\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\nimport operator\n\n\ndef Sort(data):\n    return sorted(data, key=operator.itemgetter(1))\n\n\ndef main():\n    assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(l):\n    return sorted(l, key = lambda x: x[1])\n\n#assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(a):\n    b = list(zip(*a))\n    b.sort(key=lambda x: x[1])\n    c = [list(i) for i in zip(*b)]\n    return c\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n# your code here\n\n\ndef sort_second_element(alist):\n    alist.sort(key=lambda x: x[1])\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort_by_second(list_of_sublists):\n    return sorted(list_of_sublists, key=lambda x: x[1])\n\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b > c:\n        return True\n    if a+c > b:\n        return True\n    if b+c > a:\n        return True\n    return False", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\nimport unittest\n\n\ndef check_Validity(a, b, c):\n    \"\"\"\n    This function checks the validity of the triangle using the given side lengths.\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Solution\ndef check_Validity(a, b, c):\n\n    # Initialize a list to contain the length of all sides\n    side_len = [a, b, c]\n    # Sort the list of side lengths in ascending order\n    side_len.sort()\n    # Compute the perimeter\n    peri = side_len[0] + side_len[1] + side_len[2]\n\n    # Return a boolean value, indicating whether or not the triangle is valid\n    if peri > 180:\n        return False\n    else:\n        return True\n\n# Test cases", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if(a+b>c) and (b+c>a) and (c+a>b):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(s1,s2,s3):\n    # create list\n    sides = [s1, s2, s3]\n    # sort list\n    sides.sort()\n    # check if sides are valid or not\n    if sides[2] >= sides[0] + sides[1]:\n        return True\n    else:\n        return False\n\n# print(check_Validity(1,2,3))", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    return (a>0 and b>0 and c>0 and a+b>c and b+c>a and c+a>b)\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if (a + b <= c) or (b + c <= a) or (c + a <= b):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n\tif a+b>c and b+c>a and c+a>b:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n# Write your function here\ndef check_Validity(a,b,c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    elif a+b <= c or a+c <= b or b+c <= a:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if (a+b>c) and (b+c>a) and (c+a>b):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n    \"\"\"\n    Takes three input parameters and returns the sum of arithmetic progression\n    of the three input parameters\n    :param a: int (first term of AP)\n    :param b: int (last term of AP)\n    :param d: int (common difference of AP)\n    :return: int\n    \"\"\"\n    if d<0:\n        raise ArithmeticError('Difference should be non-negative')\n    result=0\n    for i in range(a,b+1):\n        result+=i\n    return result\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(first, last, step):\n    sum = first\n    for i in range(first, last):\n        sum += step\n    return sum\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,n):\n    assert a>0\n    assert b>a\n    assert n>0\n    return int(a+(b-a)*(n-1))\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a, b, c):\n    # write your code here\n    # return sum(range(a,b+1,c))\n    return (b - a + 1) * (c) // 2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, b, n):\n    return a + n* (b - a)/2\n\n\n# assert ap_sum(1,5,2)==25\n\ndef ap_sum(a, b, n):\n    return (a + b) * n//2 - (a + b) * (n//2 - 1) // 2\n\n\ndef ap_sum(a, b, n):\n    s = 0\n    for i in range(n):\n        s += i*(b-a)\n        s -= (i-1)*(b-a)\n    return s\n\n\n# assert ap_sum(1,5,2)==25\n\n# assert ap_sum(1,5,2)==25", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,c):\n    return (a+(b-1)*c)//2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(start, end, step):\n    sum = start\n    while sum < end:\n        sum += step\n    return sum\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(start,end,step):\n    result = 0\n    for i in range(start,end,step):\n        result += i\n    return result\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\nimport math\ndef ap_sum(a, b, d):\n    return math.floor((b-a)/(d))*(a+(b-a))//2", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n    if d==0:\n        raise ValueError(\"d cannot be zero\")\n    x=(b-a)//d\n    s=x*(a+d*(x-1))\n    return s\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == \"January\":\n        return True\n    if month == \"February\":\n        return True\n    if month == \"March\":\n        return True\n    if month == \"April\":\n        return True\n    if month == \"May\":\n        return True\n    if month == \"June\":\n        return True\n    if month == \"July\":\n        return True\n    if month == \"August\":\n        return True\n    if month == \"September\":\n        return True\n    if month == \"October\":\n        return True\n    if month == \"November\":\n        return True\n    if month == \"December\":\n        return True\n    else:\n        return False\n\n# # Test\n# print(check_monthnum(\"February\"))\n# print(check_monthnum(\"June\"))\n# print(check_monthnum(\"August\"))\n# print(check_monthnum(\"December\"))\n# print(check_monthnum(\"November\"))\n\n# ### The first function to check the number of days of a month using a dictionary.\n# \"\"\"\n# Write a function to check the number of days of a month using a dictionary.\n# assert get_daynum(\"January\")==31\n# \"\"\"\ndef get_daynum(month):\n    if month == \"January\":\n        return 31\n    if month == \"February\":\n        return 28\n    if month == \"March\":\n        return 31\n    if month == \"April\":\n        return 30\n    if month == \"May\":\n        return 31\n    if month == \"June\":\n        return 30\n    if month == \"July\":\n        return 31\n    if month == \"August\":\n        return 31\n    if month == \"September\":\n        return 30\n    if month == \"October\":\n        return 31\n    if month == \"November\":\n        return 30\n    if month == \"December\":\n        return 31\n    else:\n        return 0\n\n# # Test\n# print(get_daynum(\"January\"))\n# print(get_daynum(\"February\"))\n# print(get_daynum(\"March\"))\n# print(get_daynum(\"April\"))\n# print(get_day", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    monthnum = {\"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \"May\": 31, \"June\": 30, \"July\": 31, \"August\": 31, \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31}\n    if monthnum[month] == 28:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n    if monthname in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == \"February\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if(month == \"January\" or month == \"February\" or month == \"March\" or month == \"April\" or month == \"May\" or month == \"June\" or month == \"July\" or month == \"August\" or month == \"September\" or month == \"October\" or month == \"November\" or month == \"December\"):\n        if(month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\"):\n            if(month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\"):\n                return False\n            else:\n                return True\n        elif(month == \"February\"):\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == \"January\":\n        return 31\n    elif month == \"February\":\n        if isleapyear(2018):\n            return 29\n        else:\n            return 28\n    else:\n        return 30\n\n#assert check_monthnum(\"December\")==31\n\n#assert check_monthnum(\"January\")==31\n\n#assert check_monthnum(\"February\")==28\n\n#assert check_monthnum(\"March\")==31\n\n#assert check_monthnum(\"April\")==30\n\n#assert check_monthnum(\"May\")==31\n\n#assert check_monthnum(\"June\")==30\n\n#assert check_monthnum(\"July\")==31\n\n#assert check_monthnum(\"August\")==31\n\n#assert check_monthnum(\"September\")==30\n\n#assert check_monthnum(\"October\")==31\n\n#assert check_monthnum(\"November\")==30\n\n#assert check_monthnum(\"December\")==31\n\n#assert check_monthnum(\"January\")==31\n\n#assert check_monthnum(\"February\")==28\n\n#assert check_monthnum(\"March\")==31\n\n#assert check_monthnum(\"April\")==30\n\n#assert check_monthnum(\"May\")==31\n\n#assert check_monthnum(\"June\")==30\n\n#assert check_monthnum(\"July\")==31\n\n#assert check_monthnum(\"August\")==31\n\n#assert check_monthnum(\"September\")==30\n\n#assert check_monthnum(\"October\")==31\n\n#assert check_monthnum(\"November\")==30\n\n#assert check_monthnum(\"December\")==31\n\ndef isleapyear(year):\n    if year%4 == 0 and year%100 != 0:\n        return True\n    elif year%400 == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == \"January\" or month == \"February\" or month == \"March\" or month == \"April\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n\tmonthnum = monthname.capitalize()\n\tif monthnum.find('January')!= -1 or monthnum.find('February')!= -1 or monthnum.find('March')!= -1 or monthnum.find('April')!= -1 or monthnum.find('May')!= -1 or monthnum.find('June')!= -1 or monthnum.find('July')!= -1 or monthnum.find('August')!= -1 or monthnum.find('September')!= -1 or monthnum.find('October')!= -1 or monthnum.find('November')!= -1 or monthnum.find('December')!= -1:\n\t\tif monthnum.find('February')!= -1:\n\t\t\tif monthnum[5]=='' and monthnum[6]!=' ':\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month in ['January','February','March']:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n    if monthname.lower() in (\"february\", \"august\"):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    text_list = text.split()\n    if len(text_list) >= 1:\n        word = text_list[len(text_list) - 1]\n        punctuation = re.compile(\"[.,;:!?]\")\n        if punctuation.search(word):\n            word = word.rstrip(punctuation.search(word).group())\n        if word.lower() == \"python\":\n            return (\"Found a match!\")\n    return (\"No match\")\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    return \"Found a match!\"\n\ntext_match_word(\"python.\")\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_match_word(text, word_end='.*'):\n    word_end = word_end.strip()\n    end_pattern = '^' + word_end\n    end_search = re.search(end_pattern, text)\n    if end_search:\n        return f'Found a match!'\n    return 'No match!'\n\ntext_match_word('python')\n\n# ### Exercise 2: Finding 1s in a String\n#\n# **Write a function that finds all positions where a given number is located in a given string.**\n#\n# ```\n# assert find_positions(\"10001100011011000\", 1) == [0, 9, 19]\n# ```\n\n# +\nimport re\n\ndef find_positions(text, pattern_to_find):\n    positions = []\n    pattern_to_find = str(pattern_to_find)\n    pattern_to_find_re = re.compile(pattern_to_find)\n    for match in pattern_to_find_re.finditer(text):\n        positions.append(match.start())\n    return positions\n\n\n# -\n\nfind_positions('10001100011011000', 1)\n\n# ### Exercise 3: Finding All Matching Patterns\n#\n# **Write a function that finds all patterns that match a given pattern in a given string.**\n#\n# ```\n# assert find_all(\"10001100011011000\", \"001\") == ['001', '011', '110', '110']\n# ```\n\n# +\nimport re\n\ndef find_all(text, pattern_to_find):\n    all_matches = []\n    pattern_to_find = str(pattern_to_find)\n    pattern_to_find_re = re.compile(pattern_to_find)\n    for match in pattern_to_find_re.finditer(text):\n        all_matches.append", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text,word='python'):\n    if word not in text:\n        return \"Sorry, no match.\"\n    else:\n        idx = text.index(word)\n        if idx < len(text)-1 and text[idx+1].isalpha() and text[idx+1] not in string.punctuation:\n            return 'Found a match!'\n        else:\n            return \"No match.\"", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word, punct=''):\n    \"\"\"Return the text with the word at the end if it matches with punctuation.\"\"\"\n    if text[-len(word) - len(punct):] == word + punct:\n        return 'Found a match!'\n    else:\n        return 'No match'\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text, word=None, punctuation=None):\n    # Check if word is in text, with optional punctuation\n    if word is not None:\n        if punctuation is not None:\n            if word in text and text.endswith(word+punctuation):\n                return \"Found a match!\"\n        elif word in text and text.endswith(word):\n            return \"Found a match!\"\n    # Check if word is in text, with no punctuation\n    elif word is not None and punctuation is None:\n        if word in text and text.endswith(word):\n            return \"Found a match!\"\n\n# Test case 1", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    \"\"\"\n    Returns the text string if the last word in the string ends with a given word.\n    text - a string to match at the end of\n    \"\"\"\n    text_words = text.split()\n    if len(text_words) < 2:\n        return \"Not found\"\n    if text_words[-1] == word:\n        return 'Found a match!'\n    return \"Not found\"\n\n# Test your function", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    \"\"\"\n    text: a string\n    returns: True if text ends with 'word', and there is no punctuation before it\n    \"\"\"\n    if text.lower().endswith(word) and text.find(punctuation) == -1:\n        return \"Found a match!\"\n    else:\n        return \"Not a match.\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text, endswith=\".\"):\n    #TODO: Replace pass with your code\n    pass", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    if text[-1].isalpha():\n        return \"Found a match!\"\n    else:\n        return \"No match!\"\n\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\nimport sys\nimport unittest\nfrom typing import List, Tuple\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(text):\n    count = 0\n    for i in range(0,len(text)):\n        for j in range(i+1,len(text)+1):\n            if text[i] == text[-1] and text[i] == text[j-1]:\n                count = count + 1\n    return count", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    list_of_first_and_last_char = []\n    for index in range(len(s)-1):\n        list_of_first_and_last_char.append(s[0] + s[-1])\n    return len(list_of_first_and_last_char)\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(input):\n    count = 0\n    for i in range(len(input)):\n        for j in range(i, len(input)):\n            if input[i] == input[j]:\n                count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    n=len(s)\n    if n==0:\n        return 0\n    count=0\n    last=s[0]\n    for i in range(1,n):\n        if s[i]==last:\n            count+=1\n        last=s[i]\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    start, end = 0, 0\n    count = 0\n    while end < len(s):\n        if s[start] == s[end]:\n            count += 1\n            start += 1\n            end += 1\n        else:\n            end += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    first_char = string[0]\n    last_char = string[-1]\n    for i in range(len(string)):\n        if string[i] == first_char and string[-(i+1)] == last_char:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    if len(str) == 0:\n        return 0\n\n    elif len(str) == 1:\n        return 1\n\n    elif len(str) == 2:\n        if str[0] == str[1]:\n            return 2\n        else:\n            return 0\n\n\n    else:\n        count = 0\n        #print(str)\n        for i in range(len(str)-1):\n            if str[i] == str[i+1]:\n                count +=1\n            else:\n                break\n        return count+1\n\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)-1):\n        if(s[i] == s[i+1]):\n            count = count+1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    return len(string) - string.count(string[0])\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(lower, upper):\n    max_divisor = 0\n    for div in range(lower, upper+1):\n        if upper%div == 0:\n            if max_divisor <= div:\n                max_divisor = div\n    return max_divisor", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n# Solution\n\n\ndef find_Divisor(l, r):\n    divisors = []\n    for i in range(l, r + 1):\n        if r % i == 0:\n            divisors.append(i)\n    divisors.sort()\n    if divisors[-1] > r:\n        return None\n    else:\n        return divisors[-1]\n\n\n# Tests", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    # Find all divisors of interval\n    divisors = [i for i in range(1,int(b/a)+1)]\n    # Loop through all divisors and find the maximum occuring divisor\n    max_divisor = 0\n    for i in divisors:\n        c = i * a\n        count = 0\n        for j in divisors:\n            count += 1\n            if c % j == 0:\n                break\n        if count > max_divisor:\n            max_divisor = count\n    return max_divisor\n\ndef test_case1():\n    assert find_Divisor(2,2) == 2\n\ndef test_case2():\n    assert find_Divisor(3,4) == 3\n\ndef test_case3():\n    assert find_Divisor(3,5) == 1", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a, b):\n    max = 1\n    for i in range(a, b+1):\n        for j in range(1, i):\n            if i % j == 0 and i//j > max:\n                max = i//j\n    return max\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a, b):\n    max_divisor = 0\n    for div in range(1, b+1):\n        if (a % div) == 0:\n            if (div > max_divisor):\n                max_divisor = div\n    return max_divisor\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(lower,upper):\n    count = 0\n    for i in range(lower,upper):\n        if i % lower == 0 and i != lower:\n            count = count + 1\n    if count == 0:\n        return None\n    else:\n        maxCount = 0\n        maxDivisor = 0\n        for i in range(lower,upper):\n            count = 0\n            for j in range(lower,upper):\n                if i%j == 0 and j != i:\n                    count = count + 1\n            if count > maxCount:\n                maxCount = count\n                maxDivisor = i\n        return maxDivisor\n\ndef test_find_Divisor(test_case):\n    assert find_Divisor(test_case[0],test_case[1]) == test_case[2]\n\ntest_cases = [[2, 2, 2], [5, 15, 5], [18, 20, 6]]\ntest_function(test_cases)", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(num, lim):\n    for i in range(2,num):\n        if num%i==0:\n            if i>lim:\n                lim = i\n    return lim\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start, end):\n    if start > end:\n        return None\n\n    max = start\n    for i in range(start,end+1):\n        if i % max == 0 and i > max:\n            max = i\n    return max\n\n#https://github.com/m-w/divisor-in-range\ndef find_Divisor_Wikipedia(start, end):\n    if end > start:\n        return start + (start - 1) // (end + 1)\n    else:\n        return None", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a, b):\n    max_divisor = 1\n    for i in range(a,b+1):\n        if b % i == 0:\n            max_divisor = i\n    return max_divisor\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a,b):\n    if b<0:\n        return None\n    if a==b:\n        return a\n    elif a<b:\n        min_value = a\n    else:\n        min_value = b\n    for i in range(min_value,1,-1):\n        if b%i==0 and a%i==0:\n            return i"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n# The numbers might not be in the desired order, but the output should always be the same.\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n# The numbers might not be in the desired order, but the output should always be the same.\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum([x for x in nums if x >= 0 and x < 3])", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    s = 0\n    nums.sort()\n    for i in range(3):\n        s = s + nums[i]\n    return s", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    \"\"\"\n    :param numbers: a list of numbers\n    :return: the sum of the three smallest numbers from the given list\n    \"\"\"\n    min_three = sorted(numbers)[:3]\n    return sum(min_three)\n\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    #   1. Find three smallest numbers\n    #   2. Sum them\n    #\n    #   1.457490251837113\n    #   2.5545136105415985\n    #   3.6515369692460836\n\n    #list_of_three_smallest_nums = []\n    #for i in range(len(nums)):\n    #    for j in range(i+1, len(nums)):\n    #        for k in range(j+1, len(nums)):\n    #            if nums[i] < nums[j] and nums[i] < nums[k]:\n    #                list_of_three_smallest_nums.append(nums[i])\n    #                list_of_three_smallest_nums.append(nums[j])\n    #                list_of_three_smallest_nums.append(nums[k])\n\n    #list_of_three_smallest_nums.sort()\n    #list_of_three_smallest_nums.reverse()\n    #\n    #sum = list_of_three_smallest_nums[0] + list_of_three_smallest_nums[1] + list_of_three_smallest_nums[2]\n\n    three_smallest_nums = nums.copy()\n    three_smallest_nums.sort()\n    three_smallest_nums.reverse()\n    #print(\"Three Smallest Numbers:\", three_smallest_nums)\n\n    #print(three_smallest_nums[:3])\n    #print(three_smallest_nums[:3].sum())\n\n    sum = 0\n    for i in range(0, 3):\n        sum += three_smallest_nums[i]\n\n    #print(\"Sum of Three Smallest Numbers: \" + str(sum))\n\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    result=float('inf')\n    for num in nums:\n        if num<result:\n            result=num\n    for num in nums:\n        if num<result:\n            result=num\n    for num in nums:\n        if num<result:\n            result=num\n    return result\n\n#     return min(nums[:3]) + min(nums[3:])\n\n\ndef sum_three_smallest_nums(nums):\n    l = [i for i in nums if i > 0]\n    return sum(sorted(l)[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    three_smallest_nums = []\n    for num in nums:\n        if num > 0:\n            three_smallest_nums.append(num)\n    if len(three_smallest_nums) < 3:\n        return False\n    else:\n        three_smallest_nums.sort()\n        return three_smallest_nums[0] + three_smallest_nums[1] + three_smallest_nums[2]\n\ndef sum_three_smallest_nums(nums):\n    return sum(sorted(nums)[:3]) if sorted(nums)[:3] else False", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    nums = sorted(nums)\n    return nums[0]+nums[1]+nums[2]\n\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(list_nums):\n    min_num = list_nums[0]\n    min_num1 = list_nums[0]\n    min_num2 = list_nums[0]\n    for i in list_nums:\n        if i < min_num:\n            min_num = i\n        elif i < min_num1:\n            min_num1 = i\n        elif i < min_num2:\n            min_num2 = i\n    return min_num + min_num1 + min_num2\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(list_numbers):\n    list_numbers.sort()\n    return list_numbers[0] + list_numbers[1] + list_numbers[2]\n\n# def sum_three_smallest_nums(list_numbers):\n#     list_numbers.sort()\n#     return min(list_numbers[0], list_numbers[1], list_numbers[2]) + min(list_numbers[3], list_numbers[4], list_numbers[5]) + min(list_numbers[6], list_numbers[7], list_numbers[8])\n# print(sum_three_smallest_nums([10,20,30,40,50,60,7]))", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\n# Solution\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n# Test cases"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    s = sorted(s)\n    return tuple(s)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(x):\n    return tuple(x)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set):\n    set = list(set)\n    set.sort()\n    return tuple(set)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set):\n    return tuple(set)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(s):\n    if not s:\n        return tuple()\n\n    res = []\n    for i in sorted(s):\n        res.append(i)\n    return tuple(res)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set):\n    return tuple(sorted(set))\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1000000)\n\ndef set_to_tuple(myset):\n    mylist = list(myset)\n    mylist.sort()\n    result = []\n    for x in mylist:\n        result.append(x)\n    return tuple(result)\n\n\n# Test", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\nfrom typing import Any\n\n\ndef set_to_tuple(s: set) -> tuple:\n    s = set(s)\n    sorted_s = sorted(s)\n    return tuple(sorted_s)\n\n\n# test cases", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(s)\n\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    min_start = arrays[0][0]\n    min_end = arrays[0][-1]\n    for a in arrays[1:]:\n        min_start = min(min_start, a[0])\n        min_end = max(min_end, a[-1])\n    return min_start, min_end\n\n\n# assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\n# method 1\ndef find_minimum_range(arrs):\n    min_arr = min(arrs)\n    min_arr_index = arrs.index(min_arr)\n    max_arr = max(arrs)\n    max_arr_index = arrs.index(max_arr)\n    return (min_arr_index, max_arr_index)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    min = max = arrs[0][0]\n    for arr in arrs:\n        min = min(min, arr[0])\n        max = max(max, arr[-1])\n    return (min, max)\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(array):\n    array.sort()\n    first_index = 0\n    last_index = 0\n    min_range = None\n    for a in array:\n        last_index += 1\n        while last_index < len(array):\n            min_range = (a, min(array[last_index], min_range[1]))\n            if min_range[1] - min_range[0] + 1 > min_range[0] - min_range[1] + 1:\n                return min_range\n            last_index += 1\n    return min_range\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    # TODO: Write your code here\n    print(f\"{arrays=}\")\n    if len(arrays) == 0:\n        raise ValueError(\"Empty list\")\n    min_start = float(\"inf\")\n    max_start = float(\"-inf\")\n    min_end = float(\"inf\")\n    max_end = float(\"-inf\")\n\n    for a in arrays:\n        if len(a) == 0:\n            raise ValueError(\"Empty list\")\n        min_start = min(min_start, a[0])\n        max_start = max(max_start, a[0])\n        min_end = min(min_end, a[-1])\n        max_end = max(max_end, a[-1])\n    return (min_start, max_end)\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrs):\n    if not arrs:\n        return None\n    \n    min_range = [arrs[0][0], arrs[-1][-1]]\n    for arr in arrs:\n        min_range[0] = min(min_range[0], arr[0])\n        min_range[1] = max(min_range[1], arr[-1])\n\n    return min_range\n\n\n# In[ ]:", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom typing import Tuple\n\n\ndef find_minimum_range(arrays: list[list[int]]) -> Tuple[int, int]:\n    def find_min(arr: list[int]) -> int:\n        return min(arr)\n\n    left = find_min(map(lambda arr: min(arr), arrays))\n    right = find_min(map(lambda arr: max(arr), arrays))\n    return left, right", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nimport unittest\n\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return None\n    start = min([min(array) for array in arrays])\n    end = max([max(array) for array in arrays])\n    return start, end\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrs):\n    nums = set()\n    for arr in arrs:\n        nums = nums.union(arr)\n    # nums = set.union(*[set(arr) for arr in arrs])\n    arrs = [sorted(arr) for arr in arrs]\n    lo = 1000000000\n    hi = -1000000001\n    for arr in arrs:\n        lo = min(lo, arr[0])\n        hi = max(hi, arr[-1])\n    while lo < hi:\n        mid = (lo+hi)//2\n        if all(mid in arr for arr in arrs):\n            return (mid, mid)\n        elif mid in nums:\n            lo = mid+1\n        else:\n            hi = mid-1\n    return (lo, hi)\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    \"\"\"\n    \"\"\"\n    #\n    return sorted(set(range(min(min(arr) for arr in arrays), max(max(arr) for arr in arrays)+1)))\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    digit=0\n    let=0\n    for i in s:\n        if i.isdigit():\n            digit=digit+1\n        elif i.isalpha():\n            let=let+1\n    return (digit,let)\ndig_let(\"python\")", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\nimport unittest\n\ndef dig_let(string):\n    return len(string.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"  \", \" \").replace(\"\\t\", \"\").replace(\":\", \"\"))\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(word):\n    return len(word), len(word.lower())\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    return len(list(filter(str.isalpha, s))), len(list(filter(str.isdigit, s)))\n\ndig_let(\"python\")\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(str):\n    return(len(str),len([letter for letter in str if letter.isalpha()]))\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n    digits=0\n    letters=0\n    for i in string:\n        if i.isalpha():\n            letters+=1\n        elif i.isnumeric():\n            digits+=1\n    return(digits,letters)\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(word):\n    digits=0\n    letters=0\n    for char in word:\n        if char.isalpha():\n            letters+=1\n        if char.isdigit():\n            digits+=1\n    return (digits,letters)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    d = 0\n    l = 0\n    for i in s:\n        if i.isalpha():\n            l+=1\n        else:\n            d+=1\n    return (d,l)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    l=list(s)\n    num1=0\n    for x in l:\n        if x.isalpha():\n            num1+=1\n    num2=len(s)\n    return (num1,num2)", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    return (len(string),sum([1 if c.isalpha() else 0 for c in string]))\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n# Write your code here\ndef count_Odd_Squares(first,last):\n    #your code here\n    return 0", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nfrom math import sqrt\n\n\ndef count_Odd_Squares(low,high):\n    count = 0\n    for i in range(low,high):\n        if i % 2 != 0 and (sqrt(i) - int(sqrt(i))) < 1e-6:\n            count += 1\n    return count\n\n\ndef main():\n    print(\"Number of odd squares in range 5 to 100 is: \", count_Odd_Squares(5,100))\n    print(\"Number of odd squares in range 101 to 1000 is: \", count_Odd_Squares(101,1000))\n    print(\"Number of odd squares in range 1001 to 10000 is: \", count_Odd_Squares(1001,10000))\n    print(\"Number of odd squares in range 10001 to 100000 is: \", count_Odd_Squares(10001,100000))\n    print(\"Number of odd squares in range 100001 to 1000000 is: \", count_Odd_Squares(100001,1000000))\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start,end):\n    result = 0\n    for i in range(start,end+1):\n        is_odd = True\n        for j in range(1,i):\n            if i%j == 0:\n                is_odd = False\n                break\n        if is_odd == True:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(x,y):\n    odds = []\n    for i in range(x,y):\n        for j in range(i+1,y):\n            if i%j != 0:\n                odds.append(i)\n    return len(odds)\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    #Create an empty list to store the output\n    output = []\n    #Iterate over the range from start to end\n    for i in range(start, end+1):\n        #Set a flag to indicate whether the number is odd or not\n        isOdd = False\n        #Iterate over the factors of the given number\n        for j in range(1,i+1):\n            #Check if the number is odd\n            if (i%j) == 0:\n                #Update the flag if the number is odd\n                isOdd = True\n                break\n        #Add the number to the output list if it is odd\n        if isOdd:\n            output.append(i)\n    #Return the number of elements with odd factors\n    return len(output)\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start, stop):\n    odd_count = 0\n    for i in range(start, stop):\n        for j in range(start, stop):\n            if i**2+j**2 == i*j and i%2 != j%2:\n                odd_count += 1\n    return odd_count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start, end):\n    \"\"\"\n    Args:\n        start(int): The lower boundary of the range\n        end(int): The upper boundary of the range\n    Returns:\n        odd_count(int): count of all odd number in the range\n    \"\"\"\n    odd_count = 0\n    for i in range(start, end):\n        factors = prime_factors(i)\n        if factors[1] == 1:\n            odd_count += 1\n    return odd_count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\n# # list comprehension method 1\ndef count_Odd_Squares(first, last):\n    ans = []\n    for i in range(first, last+1):\n        if is_Prime(i) == True:\n            divs = set()\n            for j in range(2, i//2+1):\n                if i % j == 0:\n                    divs.add(j)\n            if len(divs) & 1:\n                ans.append(i)\n    return len(ans)\n\n# # list comprehension method 2\ndef count_Odd_Squares(first, last):\n    return len([i for i in range(first, last+1) if is_Prime(i) == True and len(set([x for x in range(2, i//2+1) if i%x == 0])) & 1])\n\n# # list comprehension method 3\ndef count_Odd_Squares(first, last):\n    return len([i for i in range(first, last+1) if is_Prime(i) == True and i % 2 != 0 and not any(i % x == 0 for x in range(2, i//2+1))])\n\n# # list comprehension method 4\ndef count_Odd_Squares(first, last):\n    return len([i for i in range(first, last+1) if is_Prime(i) == True and all(i % x != 0 for x in range(2, i//2+1))])\n\n# # list comprehension method 5\ndef count_Odd_Squares(first, last):\n    return len([i for i in range(first, last+1) if is_Prime(i) == True and i % 2 != 0 and all(j != i for j in range(2, i//2+1) if i % j == 0)])\n\n# # list comprehension method 6\ndef count_Odd_Squares(first, last):\n    return len([i for i in range(first, last+1) if is_Prime(i) == True and", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start, end):\n    \"\"\"\n    Write a program to find number of elements with odd factors in a given range.\n    \"\"\"\n    number_of_elements = 0\n    for i in range(start, end + 1):\n        factors = factors(i)\n        odd_factors = [factor for factor in factors if factor % 2 != 0]\n        if len(odd_factors) > 0:\n            number_of_elements += 1\n    return number_of_elements\n\n\ndef factors(num):\n    \"\"\"\n    factors function calculates the factors of a number.\n    \"\"\"\n    factors = []\n    for i in range(1, num):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(low, high):\n\tdef count_Odd_Square(x):\n\t\tsum = 0\n\t\tfor i in range(1,x+1):\n\t\t\tif x%i == 0:\n\t\t\t\tsum += 1\n\t\tif sum%2 == 0:\n\t\t\treturn 0\n\t\treturn 1\n\tnum = 0\n\tfor x in range(low,high+1):\n\t\tif count_Odd_Square(x):\n\t\t\tnum += 1\n\treturn num\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(lst):\n    diff = []\n    for i in range(len(lst)-1):\n        diff.append(lst[i+1]-lst[i])\n    return diff\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(lst):\n    return [y - x for x, y in zip(lst[::2], lst[1::2])]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    diff = []\n    for i in range(1, len(nums)):\n        diff.append(nums[i]-nums[i-1])\n    return diff\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(arr):\n    arr.insert(0, 0)\n    arr.append(arr[-1] + 1)\n\n    return list(map(lambda x: x[1]-x[0], zip(arr[:-1], arr[1:])))\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(my_list):\n    out = []\n    for i in range(len(my_list)):\n        if (i+1) < len(my_list):\n            out.append(my_list[i+1]-my_list[i])\n    return out\n\nnWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(lst):\n    diff=[]\n    for i in range(len(lst)-1):\n        diff.append(lst[i+1]-lst[i])\n    return diff\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(numbers):\n    assert type(numbers) == list\n    assert all([type(i) == int for i in numbers])\n    assert len(numbers) > 1\n    diff_list = [numbers[i+1]-numbers[i] for i in range(len(numbers)-1)]\n    return diff_list\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(l):\n    newl = []\n    for i in range(len(l) - 1):\n        newl.append(l[i + 1] - l[i])\n    return newl\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(alist):\n    \"\"\"\n    Takes a list of integers.\n    Returns a list of differences between consecutive elements.\n    \"\"\"\n    diffs = []\n    for i in range(len(alist) - 1):\n        diffs.append(alist[i+1] - alist[i])\n    return diffs\n\n\n# Write a function to reverse the words in a string.", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    return list(np.diff(nums))\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if k == 1:\n        return n\n    elif k == n - 1:\n        return n\n    return zigzag(n - k + 1, k - 1) + zigzag(k, n - k)\n\n\ndef test_zigzag():\n    assert zigzag(1, 0) == 1\n    assert zigzag(1, 1) == 1\n    assert zigzag(4, 3) == 5\n    assert zigzag(6, 1) == 5\n    assert zigzag(5, 1) == 4\n    assert zigzag(5, 2) == 5\n    assert zigzag(5, 3) == 6", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    for i in range(n//k + 1):\n        j = k*i\n        for _ in range(n%k):\n            j -= 1\n            yield j\n        j += k*(n//k)\n        for _ in range(n%k):\n            j += 1\n            yield j\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    e = 0\n    for i in range(k):\n        e = e + 1\n        n = n + 1\n        while n > k:\n            n = n - 1\n            e = e + 1\n    return e", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    x = y = k\n    while n > 0:\n        n -= 1\n        x += 1\n        if n % 2 == 0:\n            y -= 1\n        else:\n            y += 1\n    return x*y\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    return k * (2 * n - k + 1) + n + k - 2", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if k == 1:\n        return n\n    else:\n        return zigzag(n + (k - 1) // 2, k - 1) + zigzag(n, k - 2)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    return 1\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    return (k*(n-k) + (k-1) + (n-k))//2\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\nfrom math import *\n\ndef e(n, k):\n    \"\"\"\n    Input:  n - positive integer\n            k - non-negative integer\n    Output: number of k-zigzag paths from top left to bottom right\n    \"\"\"\n    if k == 0:\n        return 1\n    else:\n        if n == k:\n            return 1\n        else:\n            return e(n-1, k-1) + e(n-1, k)\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(w,h):\n    count = 0\n    for x in range(0,w,1):\n        for y in range(0,h,1):\n            if x**2+y**2 == 1:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    return (width * height) * 4\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(length,breadth):\n    assert type(length) == int\n    assert type(breadth) == int\n    count = 0\n    for i in range(length):\n        for j in range(breadth):\n            if i == j or (i-j) == 0 or (i+j) == 0:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(rows, columns):\n    \"\"\"\n    Return the number of squares in a rectangle.\n    \"\"\"\n    return rows * columns\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    c=0\n    for i in range(n):\n        for j in range(m):\n            c+=((i%2==0) and (j%2==0))\n    return c\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(a, b):\n    count = 0\n    for i in range(a):\n        for j in range(b):\n            if i == 0 or j == 0 or i == a - 1 or j == b - 1:\n                count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(m, n):\n    return m*(m+1)*(n*(n+1)+1)/2\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width,height):\n    return width * height\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(rows,cols):\n    return rows * cols\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(x,y):\n    \"\"\"\n    Write your code here:\n    \"\"\"\n    res = 0\n    for i in range(x):\n        for j in range(y):\n            res += 1\n    return res\n\n\n#assert count_Squares(4,3) == 20"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nimport collections\n\n\ndef find_ways(n):\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    ways = [1] * n\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                dp[i][j] += dp[i - k][j - k]\n                if dp[i][j] > ways[i]:\n                    ways[i] = dp[i][j]\n    return ways[n]\n\n\ndef find_ways_2(n):\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                dp[i][j] += dp[i - k][j - k]\n    return dp[n][n]\n\n\ndef find_ways_3(n):\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                dp[i][j] += dp[i - k][j - k]\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    def find_ways_rec(arr, n, i, prev_vals):\n        if i == n:\n            return 1\n        if arr[i] == 0:\n            return 0\n        return find_ways_rec(arr, n, i + 1, prev_vals) + find_ways_rec(arr, n, i + 1, prev_vals + [arr[i]])\n\n    arr = [0] * (n + 1)\n    for i in range(n):\n        arr[i + 1] = arr[i] + values[i]\n    return find_ways_rec(arr, n, 0, [])", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\n# Solution:\ndef find_ways(n):\n    seqs = [0 for _ in range(n+1)]\n    seqs[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            seqs[i] += seqs[j]\n    return seqs[n]\n\n# Tests", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    # can we get a sequence of length n using given values\n    return binom(2*n, n)\n\n# ------------------------------\n# can we find a sequence of length n using given values\n# function definition\ndef can_find_ways(values, n):\n    if n == 0:\n        return 1\n    ways = 0\n    for i in range(len(values)):\n        # add ways for all combinations of i and j\n        ways += can_find_ways(values, n - 1)\n    return ways\n\n\n# test\n# assert can_find_ways([2,3,5], 4) == 2\n\n# function definition\ndef find_ways(values, n):\n    if n == 0:\n        return 1\n    ways = 0\n    for i in range(len(values)):\n        ways += find_ways(values, n - 1)\n    return ways\n\n\n# test", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return find_ways(n-1) + find_ways(n-2)\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(n):\n    if n < 1:\n        return 0\n    prefix_sums = [0] * n\n    prefix_sums[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            prefix_sums[i] += prefix_sums[j]\n    ways = 0\n    for i in range(1, n):\n        for j in range(i):\n            prefix = prefix_sums[i] - prefix_sums[j]\n            if prefix >= 0:\n                ways += 1\n    return ways\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom typing import List\n\n\ndef find_ways(n: int) -> int:\n    \"\"\"\n    Dynamic Programming\n    \"\"\"\n    if n < 1:\n        return 0\n    dp = [1 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i, 0, -1):\n            if j < 2:\n                continue\n            dp[i] += dp[j - 1]\n            dp[i] += dp[j - 2]\n    return dp[n]\n\n\ndef find_ways2(n: int) -> int:\n    \"\"\"\n    Dynamic Programming\n    \"\"\"\n    if n < 1:\n        return 0\n    dp = [1 for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            dp[i] += dp[j]\n    return dp[n]\n\n\ndef find_ways3(n: int) -> int:\n    \"\"\"\n    Dynamic Programming\n    \"\"\"\n    if n < 1:\n        return 0\n    dp = [1 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            dp[i] += dp[j]\n            dp[i] += dp[i - j]\n    return dp[n]\n\n\ndef find_ways4(n: int) -> int:\n    \"\"\"\n    Dynamic Programming\n    \"\"\"\n    if n < 1:\n        return 0\n    dp = [1 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(2, i + 1):\n            dp[i] += dp[j - 1]\n            dp[i] += dp[j - 2]\n    return dp[n]\n\n\ndef find_ways5(n: int) -> int:\n    \"\"\"\n    Dynamic Programming\n    \"\"\"\n    if n < 1:\n        return 0\n    dp = [1 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n       ", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    # Write your code here\n    res = 0\n    i = 0\n    while i < n:\n        if i == 0:\n            res += 1\n            i += 1\n            continue\n        res += i\n        i += 1\n    return res\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(length: int) -> int:\n    n = 0\n    for i in range(length + 1):\n        n += combinations(length, i) * combinations(i, i) * combinations(length - i, i)\n    return n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    def count(nums, sums):\n        if not nums:\n            return 0\n        ways = 0\n        prefix_sum = 0\n        for n in nums:\n            prefix_sum += n\n            ways += count(nums[1:], prefix_sum)\n        return ways\n    return count(range(length + 1), 0)\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    if s.count('0') == s.count('1'):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n\tif string.replace(\"1\", \"\").replace(\"0\", \"\") == \"\":\n\t\treturn \"Yes\"\n\treturn \"No\"", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    return 'Yes' if len(s) == len(set(s)) else 'No'\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    s = \"\".join(s.split())\n    for i in s:\n        if i != \"0\" and i != \"1\":\n            return \"No\"\n    return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(str):\n    return \"Yes\" if str == \"101010101010\" else \"No\"", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n# 12. Write a python function to check whether the given string is a palindrome string or not.", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    binary_string = \"01\"\n    for char in string:\n        if char not in binary_string:\n            return \"No\"\n    return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    if string.isnumeric():\n        string = string.replace('0','').replace('1','')\n        if string == '':\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    return \"Yes\" if s.count(\"0\") == s.count(\"1\") else \"No\"\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(a):\n    c = 0\n    for i in a:\n        if a.count(i) == 1:\n            c += 1\n    return c\n\n#assert minimum_Length(\"mnm\") == 1\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    # initalise the list\n    list = []\n    # initialze the flag\n    flag = 0\n    # loop over all the character in the string\n    for i in range(len(string)):\n        # if the character is in the list then\n        if string[i] in list:\n            # the flag is set to 1\n            flag = 1\n        # if the flag is not set to 1\n        elif flag == 0:\n            # the character is appended to the list\n            list.append(string[i])\n    # return the length of the list\n    return len(list)\n\n# Driver Code\nstring = \"pjjv\"", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(input_string):\n    # code here\n    list = [char for char in input_string]\n    for i in list:\n        if list.count(i) == 1:\n            list.remove(i)\n    return len(list)\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    min_length = len(s)\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            min_length = 1\n            break\n    return min_length\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    # Write your code here.\n    ans = 1\n    for i in range(len(string)-1):\n        if string[i] != string[i+1]:\n            ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(str1):\n    min_length = len(str1)\n    for char in str1:\n        new_str = str1.replace(char,'',1)\n        if len(new_str) < min_length:\n            min_length = len(new_str)\n    return min_length", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\n#list(str) = list of characters\n\ndef minimum_Length(input_string):\n\tinput_string = list(input_string)\n\tfreq = [0]*len(input_string)\n\tfor i in input_string:\n\t\tfreq[ord(i)-ord('a')] += 1\n\tres = len(input_string)\n\tfor i in input_string:\n\t\tif freq[ord(i)-ord('a')] == 1:\n\t\t\tinput_string.remove(i)\n\t\t\tres -= 1\n\treturn res\n\n#code has been updated to the below\n# def minimum_Length(input_string):\n# \tinput_string = list(input_string)\n# \tfreq = [0]*26\n# \tfor i in input_string:\n# \t\tfreq[ord(i)-ord('a')] += 1\n# \tres = len(input_string)\n# \tfor i in input_string:\n# \t\tif freq[ord(i)-ord('a')] == 1:\n# \t\t\tinput_string.remove(i)\n# \t\t\tres -= 1\n# \treturn res", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    l = len(string)\n    if l == 1:\n        return 1\n    elif l == 2:\n        return 2\n    else:\n        count = 1\n        for i in range(1,l):\n            if string[i] == string[i-1]:\n                count+=1\n            else:\n                break\n        return count", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,e):\n    arr.sort()\n    ind = 0\n    for i in range(len(arr)):\n        if arr[i]==e:\n            if ind==k-1:\n                return e\n            ind+=1\n        else:\n            return None", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\n#Solution\ndef first_Element(arr, k, x):\n    i=0\n    j=1\n    while(i<len(arr)):\n        if j == k:\n            if arr[i] == x:\n                return i\n            i+=1\n            j=1\n        else:\n            if arr[i] == x:\n                return -1\n            i+=1\n            j+=1\n    return -1\n\n# Test\narr = [0,1,2,3,4,5]\nk = 6\nx = 0", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, elem):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == elem:\n                k -= 1\n                if k == 0:\n                    return arr[i]\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,i):\n    for j in range(len(arr)):\n        if arr[j] == i:\n            return j\n    return None\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(a, k, ele):\n    c = 0\n    for i in a:\n        if i == ele:\n            c = c + 1\n        if c == k:\n            return ele\n    return None\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(A, k,x):\n\tfor i in range(len(A)):\n\t\tif A[i] == x:\n\t\t\tk = k-1\n\t\t\tif k == 0:\n\t\t\t\treturn i\n\treturn -1\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,n,k):\n    for i in arr:\n        if i in arr and arr.count(i)==k:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,k,el):\n\tif(len(arr)<k):\n\t\treturn 0\n\telif(el in arr):\n\t\tcount=0\n\t\tfor i in arr:\n\t\t\tif i==el:\n\t\t\t\tcount+=1\n\t\t\t\tif count==k:\n\t\t\t\t\treturn el\n\t\treturn 0\n\telse:\n\t\treturn 0\n\narr=[0,1,2,3,4,5]", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,first):\n    if len(arr) == 0:\n        return -1\n    elif k < 0:\n        return -1\n    elif k == 1:\n        for i in arr:\n            if i == first:\n                return i\n        return -1\n    else:\n        for i in range(len(arr)):\n            if first_Element(arr[i+1:],k-1,first) == first:\n                return first_Element(arr[i+1:],k-1,first)\n            else:\n                return first_Element(arr[i+1:],k-1,first)\n        return -1\n\n\n# +", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, n, k):\n    pass\n"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(s):\n    if s is None:\n        return False\n    if len(s) <= 1:\n        return True\n    dic = {}\n    for i in s:\n        if i in dic:\n            return False\n        else:\n            dic[i] = 1\n    return True\n\n# Test cases", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    s = set(string)\n    return len(s) == len(string)\n\ndef main():\n    print(unique_Characters('aba') == False)\n    print(unique_Characters('abba') == True)\n    print(unique_Characters('aaaaa') == False)\n\nmain()\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(s):\n    return len(set(s)) == len(s)\n    ", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for val in count.values():\n        if val != 1:\n            return False\n\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\n# Write your code here\ndef unique_Characters(string):\n    return len(set(string)) == len(string)\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_characters(string):\n    letters = {}\n    for letter in string:\n        if letter in letters:\n            return False\n        else:\n            letters[letter] = 1\n    return True", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str):\n    temp=set()\n    for letter in str:\n        if letter in temp:\n            return False\n        temp.add(letter)\n    return True\n    \ndef unique_Characters(str):\n    return len(set(str)) == len(str)\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    return len(set(string)) == len(string)\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(word):\n    word = list(word)\n    word.sort()\n    return len(set(word)) == len(word)\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    \"\"\"\n        Takes in string input, return boolean output:\n        O(N)\n    \"\"\"\n    char_dict = {}\n    for char in string:\n        if char in char_dict.keys():\n            return False\n        else:\n            char_dict[char] = 1\n    return True\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, index):\n    '''\n    :param nested_list: list of lists\n    :param index: int\n    :return: list of lists\n    '''\n    new_list = []\n    for l in nested_list:\n        new_list.append(l[index:])\n    return new_list\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, col):\n\treturn [lst[i][:-col] + lst[i][-col:] for i in range(len(lst))]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested,index):\n    return [item for sublist in nested for item in sublist if item != nested[0][index]]\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(matrix, col):\n    new_matrix = []\n    for row in matrix:\n        new_row = []\n        for i, col in enumerate(row):\n            if i != col:\n                new_row.append(col)\n        new_matrix.append(new_row)\n    return new_matrix\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, index):\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[index:])\n    return new_lst\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, index):\n    for i in range(len(lst)):\n        if index == 0:\n            del lst[i][0]\n        else:\n            del lst[i][index]\n    return lst\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(l, col):\n    \"\"\"\n    Remove col from nested list l\n    \"\"\"\n    new_l = []\n    for row in l:\n        new_l.append(row[col:])\n    return new_l\n\n\nl1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(l, pos):\n    for sublist in l:\n        sublist.pop(pos)\n    return l\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list,column_number):\n    new_nested_list = []\n    for i in nested_list:\n        new_nested_list.append(i[column_number:])\n    return new_nested_list\n\ndef remove_column2(nested_list,column_number):\n    return [x[column_number:] for x in nested_list]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lists, index):\n    return [row[:index] + row[index + 1:] for row in lists]\n\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n, a, d):\n    # Write your code here.\n    if n==1:\n        return a\n    else:\n        return d*tn_ap(n-1,a,d)\n    ", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n,a,r):\n    if n==1:\n        return a\n    else:\n        return tn_ap(n-1,a+r,r)\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(first, last, nth):\n    n = 0\n    while n != nth:\n        n += 1\n        sum = n * (first + (n-1)*last)\n    return sum\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, d, n):\n    \"\"\"\n    find t-nth term of arithmetic progression\n    :param a: first term\n    :param d: difference\n    :param n: term number\n    :return: t-nth term\n    \"\"\"\n    return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, d, n):\n    t = a\n    for i in range(n):\n        t = t + d\n    return t\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n,a,d):\n    return int(a+(d*(n-1)))\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(first,second,nth):\n    return (first+(nth-1)*second)\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    return a+(d*(n-1))\n\ndef test_tn_ap():\n    assert tn_ap(3,4,3)==15\n    assert tn_ap(5,1,4)==13\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, n, d):\n    return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,d,n):\n    \"\"\"\n    Find t-nth term of arithmetic progression\n    :param a: starting term\n    :param d: common difference\n    :param n: t-nth term\n    :return: t-nth term of arithmetic progression\n    \"\"\"\n    if n==1:\n        return a\n    else:\n        return tn_ap(a+d,d,n-1)\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    import math\n    a = 0\n    i = 1\n    while i * i < r:\n        j = 1\n        while j * j < r:\n            if (i ** 2) + (j ** 2) == r:\n                a += 1\n            j += 1\n        i += 1\n    return a\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nfrom typing import Tuple\nimport math\n\n\ndef count_Rectangles(r: float) -> Tuple[int]:\n    \"\"\"\n    >>> count_Rectangles(2)\n    8\n    >>> count_Rectangles(1)\n    4\n    >>> count_Rectangles(0)\n    2\n    \"\"\"\n    return int(math.pi * r ** 2) - int(math.pi * (r - 1) ** 2) - int(math.pi * (r - 2) ** 2)", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(radius):\n    return int(((radius ** 2) * 3) / 4)", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    assert type(r) is int\n    assert r >= 0\n\n    count = 8 - (r * 2)\n    if count < 0:\n        count = 0\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    return 2*r\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n\tif r == 0:\n\t\treturn 0\n\telse:\n\t\tn = 1\n\t\twhile True:\n\t\t\tn = n + r\n\t\t\tif n <= r:\n\t\t\t\tbreak\n\t\treturn n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\n\ndef count_Rectangles(radius):\n    # write your code here\n    return int(math.pi * radius ** 2)\n\ndef test_count_Rectangles():\n    assert count_Rectangles(2) == 8\n\n# This code is expected to be run on the provided input/output", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    return (2 * r + 1) * (2 * r)\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nimport math\n\n\ndef count_Rectangles(r):\n    return int(math.pi * r**2 / 4)\n\n\n# test", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    ret = 0\n    for i in range(r):\n        ret += 2 * i\n    return ret"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    angle1=b-a\n    angle2=a+b\n    return angle2\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a, b):\n    assert type(a) is int, \"Argument a should be an integer\"\n    assert type(b) is int, \"Argument b should be an integer\"\n    assert a <= 180, \"Argument a should be less than 180\"\n    assert b <= 180, \"Argument b should be less than 180\"\n    if a + b > 180:\n        a, b = b, a\n    return 180 - a - b\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    return 180 - (a + b)\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1, angle2):\n    sum1 = angle1 + angle2\n    angle3 = 180 - (sum1)\n    return angle3\n\ndef main():\n    print(find_angle(37,69))", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(x, y):\n    \"\"\"\n    This function computes the third angle in a triangle.\n\n    :param x: the first angle in a triangle\n    :type x: int\n    :param y: the second angle in a triangle\n    :type y: int\n    :return: the third angle in a triangle\n    :rtype: int\n    \"\"\"\n    return (180 - x - y) % 180\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    if (a+b) % 180 == 180:\n        return 180\n    return (a+b) % 180\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1, angle2):\n    \"\"\"\n    Write your function here\n    \"\"\"\n    return angle1 + angle2 - 180\n\ndef main():\n    # Test cases:\n    print(find_angle(90,45))\n    print(find_angle(47,89))\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    if (a+b) == 90:\n        return a\n    else:\n        return 90-a-b\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    return (a+b)%180\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1,angle2):\n    \"\"\"\n    takes two angles and returns the third angle\n    :param angle1: angle 1\n    :param angle2: angle 2\n    :return: third angle\n    \"\"\"\n    return 180-angle1-angle2\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    return max([record[1] for record in records])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    \"\"\"\n    Given a tuple of (num1, num2) records, \n    return the largest value.\n    \"\"\"\n    if not records:\n        return None\n\n    max_num = records[0][1]\n    for record in records:\n        if record[1] > max_num:\n            max_num = record[1]\n    return max_num\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(tup_list):\n    return max(tup_list, key=lambda x: x[1])", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    max_val = None\n    for record in records:\n        if max_val is None or max_val[1] < record[1]:\n            max_val = record\n    return max_val[1]\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(tuple_list):\n    max_value = 0\n    for t in tuple_list:\n        if t[1] > max_value:\n            max_value = t[1]\n    return max_value\n\n# Test Case 1", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    max_x = max_y = records[0][0]\n    for x, y in records:\n        if x > max_x: max_x = x\n        if y > max_y: max_y = y\n    return max_x, max_y\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(t):\n    \"\"\"\n    Find the maximum element of all the given tuple records\n    \"\"\"\n    max_element = t[0][1]\n    for x in t:\n        if max_element < x[1]:\n            max_element = x[1]\n    return max_element", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    max_value = records[0][1]\n    for record in records:\n        if max_value < record[1]:\n            max_value = record[1]\n    return max_value\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\n# You can also use python's built-in max function\ndef find_max(records):\n    max = records[0][1]\n    for record in records:\n        if record[1] > max:\n            max = record[1]\n    return max\n\n\n# You can also use the max function from the collections module\nfrom collections import defaultdict\ndef find_max2(records):\n    max_record = defaultdict(lambda: 0)\n    for record in records:\n        max_record[record[0]] = max(max_record[record[0]], record[1])\n    return max(max_record.values())\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a,b):\n    return list(map(lambda x,y: x%y,a,b))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(li1, li2):\n    moddiv_list = map(lambda x,y: x%y, li1, li2)\n    return list(moddiv_list)\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1, list2):\n    \"\"\"\n    Write your solution here\n    \"\"\"\n    return list(map(lambda x,y: x%y, list1, list2))\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a,b):\n    return list(map(lambda x,y:x%y,a,b))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(L1,L2):\n    return list(map(lambda x: x%L2[0],L1))\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list1, list2):\n    return list(map(lambda a,b:a%b, list1, list2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(num_list, divisor_list):\n    return list(map(lambda x, y: x % y, num_list, divisor_list))", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a,b):\n    return list(map(lambda x: x%b,a))\n\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    r1= (-b -sqrt(b**2-4*a*c))/(2*a)\n    r2= (-b +sqrt(b**2-4*a*c))/(2*a)\n    if r1==r2:\n        return \"Yes\"\n    return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if a==0:\n        if b==0:\n            return \"No\"\n        elif b<0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    elif a<0:\n        return \"No\"\n    else:\n        if b<0:\n            return \"No\"\n        elif c<0:\n            return \"No\"\n        else:\n            dis = b**2-4*a*c\n            if dis>0:\n                return \"Yes\"\n            elif dis==0:\n                return \"No\"\n            else:\n                return \"No\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    import math\n    d = b**2-4*a*c\n    if d < 0:\n        return \"No\"\n    else:\n        r1 = (-b+math.sqrt(d))/(2*a)\n        r2 = (-b-math.sqrt(d))/(2*a)\n        if r1 == r2:\n            return \"Yes\"\n        else:\n            return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a, b, c):\n    d = b**2-4*a*c\n    if d > 0:\n        return \"Yes\"\n    if d < 0:\n        return \"No\"\n    else:\n        return \"Double Roots\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a, b, c):\n    if a == 0 and b == 0:\n        print(\"Zero solution\")\n    elif a*a - 4*b*c < 0:\n        print(\"No roots\")\n    elif a*a - 4*b*c == 0:\n        print(\"Two equal roots\")\n    else:\n        print(\"Two different roots\")", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    D = (b**2-4*a*c)\n    if D < 0:\n        return \"No\"\n    elif D == 0:\n        return \"Yes\"\n    else:\n        return \"Yes\" if D==b**2/4 else \"No\"", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a*b)**2-(b*b*c*c) == 0:\n        return \"Yes\"\n    return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a, b, c):\n    import math\n    if ((b*b - 4*a*c) >= 0):\n        if (math.sqrt(b*b - 4*a*c) == b):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    Your code here\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n-1) + get_carol(n-2)\n\n# Tests", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\nfrom typing import List\n\n\ndef get_carol(n: int) -> int:\n    \"\"\"\n    Time: O(n), Space: O(1)\n\n    :param n:\n    :return:\n    \"\"\"\n    n += 1\n    i, j = 1, 1\n    while n > j:\n        i, j = i * 2, i + j\n    return i\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    res = 1\n    i = 1\n    while i < n:\n        res = res + 4 * i\n        i = i + 1\n    return res\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nfrom typing import Iterable\n\n\ndef get_carol(n: int) -> int:\n    \"\"\"\n    >>> assert get_carol(2) == 7\n    >>> assert get_carol(1) == 1\n    \"\"\"\n    return sum(range(1, 3 * n, 3))\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    return int(n ** 2 - 4 * n + 5)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    if n < 1:\n        raise ValueError(\"Input number must be positive.\")\n\n    elif n == 1:\n        return 1\n\n    elif n == 2:\n        return 7\n\n    elif n == 3:\n        return 13\n\n    elif n == 4:\n        return 21\n\n    elif n == 5:\n        return 31\n\n    else:\n        return get_carol(n - 1) + 2 * get_carol(n - 2)\n\ndef main():\n    for i in range(1, 6):\n        print(get_carol(i))\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n: int):\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    else:\n        return get_carol(n-1) + get_carol(n-2) + get_carol(n-3)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    return 7\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    if n == 1:\n        return 1\n    else:\n        return get_carol(n-1) + 2*get_carol(n-2)\n\ndef get_carol_2(n):\n    \"\"\"\n    Faster version using memoization\n    \"\"\"\n    memo = {}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 1\n        else:\n            memo[n] = helper(n-1) + 2*helper(n-2)\n            return memo[n]\n    return helper(n)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 7\n    if n == 3:\n        return 11\n    if n == 4:\n        return 14\n    if n == 5:\n        return 17\n    if n == 6:\n        return 21\n    if n == 7:\n        return 24\n    if n == 8:\n        return 28\n    if n == 9:\n        return 31\n    if n == 10:\n        return 35\n    if n == 11:\n        return 38\n    if n == 12:\n        return 42\n    if n == 13:\n        return 45\n    if n == 14:\n        return 49\n    if n == 15:\n        return 52\n    if n == 16:\n        return 56\n    if n == 17:\n        return 59\n    if n == 18:\n        return 63\n    if n == 19:\n        return 66\n    if n == 20:\n        return 70\n    if n == 21:\n        return 73\n    if n == 22:\n        return 77\n    if n == 23:\n        return 80\n    if n == 24:\n        return 84\n    if n == 25:\n        return 87\n    if n == 26:\n        return 91\n    if n == 27:\n        return 94\n    if n == 28:\n        return 98\n    if n == 29:\n        return 101\n    if n == 30:\n        return 105\n    if n == 31:\n        return 108\n    if n == 32:\n        return 112\n    if n == 33:\n        return 115\n    if n == 34:\n        return 119\n    if n == 35:\n        return 122\n    if n == 36:\n        return 1"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lists):\n    return [x for x in lists if x != []]\n\n#print(remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]))\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\n# Output: ['Red', 'Green', [1, 2], 'Blue']\n# This is a tricky one, you have to think about it.\n# The basic idea is to use the fact that if the list is empty, then it will be removed from the list\n# But the tricky part is that if the list is empty, then the sublist is not empty. \n# In order to be able to remove this sublist, you have to know that the sublist is empty, \n# and not the list.\n# To do this, you have to start with a temporary list, and then go through each element of the \n# original list.\n# If the element is not a list, then append the element to the temporary list.\n# If the element is a list, then you have to check if the list is empty.\n# If the list is empty, then append the element to the temporary list.\n# If the list is not empty, then remove the empty sublist using the helper function\n# and then append the element to the temporary list.\n# Once you are done going through all the elements of the list, then return the temporary list.\n# The helper function can be implemented in a similar way, but it has to be slightly more complicated.\n# The main idea is to use a stack, and we push all the elements of the original list to the stack,\n# one by one.\n# Then we check if the stack is empty.\n# If the stack is empty, then the list is empty, and we can return True.\n# If the stack is not empty, then we pop an element off the stack.\n# If the element is empty, then we have to return True, and we can stop the loop.\n# If the element is not empty, then we have to push the element back to the stack and continue looping.\n# Once we are done looping through all the elements of the list, then we return False.\n# Now, to implement this solution, we will go step by step, and implement it.\n\ndef remove_empty(l):\n    # Your", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    new_lst = [item for item in lst if item]\n    return new_lst\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    new_lst = []\n    for element in lst:\n        if element != []:\n            new_lst.append(element)\n    return new_lst\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n    i=0\n    while i<len(l):\n        if l[i]==[]:\n            l.pop(i)\n        else:\n            i+=1\n    return l\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n    res = []\n    for i in range(len(l)):\n        if l[i] != []:\n            res.append(l[i])\n    return res\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    l = []\n    for x in lst:\n        if not isinstance(x, list) or len(x) == 0:\n            l.append(x)\n    return l", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    # Write your code here.\n    result = [x for x in lst if x != []]\n    return result\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    return [i for i in lst if len(i) > 0]", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(a):\n    return [x for x in a if x]\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(L):\n    max_occurrences = L[0]\n    for i in L:\n        if max_occurrences < i:\n            max_occurrences = i\n    return max_occurrences\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    lst_dict = {}\n    max_elem = -1\n    for ele in lst:\n        if ele in lst_dict:\n            lst_dict[ele] += 1\n        else:\n            lst_dict[ele] = 1\n    for ele, count in lst_dict.items():\n        if count > max_elem:\n            max_elem = count\n            max_elem_ele = ele\n    return max_elem_ele\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    \"\"\"\n    Given a list, find the item with maximum occurrences.\n    :param lst: A list.\n    :return: The item with maximum occurrences.\n    \"\"\"\n    max_count = 0\n    max_item = None\n\n    for item in lst:\n        if lst.count(item) > max_count:\n            max_count = lst.count(item)\n            max_item = item\n\n    return max_item\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(mylist):\n    newlist = []\n    count = 0\n    max_count = 0\n    for x in mylist:\n        if x in newlist:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 1\n            newlist.append(x)\n    return max_count\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(list1):\n    # Write your code here\n    for i in list1:\n        list1.count(i)\n        list1.sort(key=list1.count,reverse=True)\n        print(list1)\n    return list1[0]\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"Return the item with the maximum occurrences in the list\"\"\"\n    max_oc = 0\n    max_it = 0\n    for i in lst:\n        if lst.count(i) > max_oc:\n            max_oc = lst.count(i)\n            max_it = i\n    return max_it", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(l):\n    '''\n    :param l:list\n    :return:int\n    '''\n    m=0\n    n=0\n    for i in l:\n        if l.count(i) > m:\n            m=l.count(i)\n            n=i\n    return n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(data):\n    d = {}\n    max_occurence = -1\n    max_key = \"\"\n    for key in data:\n        if key not in d:\n            d[key] = 0\n        d[key] += 1\n        if d[key] > max_occurence:\n            max_occurence = d[key]\n            max_key = key\n    return max_key\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nimport unittest\n\ndef max_occurrences(lst):\n    \"\"\"\n    Takes a list and returns the item with maximum occurrences in the list.\n    \"\"\"\n    # TODO: write your code here\n    return max(set(lst), key=lst.count)\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\nfrom functools import reduce\n\n\ndef add_K_element(sequence, k):\n    return list(map(lambda x: x[0] + k, sequence))\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuples, k):\n    ret = []\n    for tuple in tuples:\n        ret.append(tuple + (k,) * len(tuple))\n    return ret\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(lst, K):\n    for i in range(len(lst)):\n        lst[i] = (lst[i][0], lst[i][1] + K, lst[i][2] + K)\n    return lst", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\nfrom collections import defaultdict\n\ndef add_K_element(list_of_tuples, K):\n    return [\n        tuple(map(lambda x,y: x+y, x, K))\n        for x in list_of_tuples\n    ]\n\n\ndef test_add_K_element():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(a, K):\n    for i in range(len(a)):\n        a[i] = tuple(k+1 for k in a[i])\n    return a\n\ndef add_K_element2(a, K):\n    return [ tuple(k+1 for k in e) for e in a ]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tup, K):\n    new_list = []\n    for i in range(len(tup)):\n        new_list.append(tuple(list(tup[i]) + [K for j in range(K)]))\n    return new_list\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(l, k):\n    for i in range(len(l)):\n        l[i] = tuple(map(lambda x, y: x + y, l[i], k))\n    return l\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(list_of_tuples, k):\n    \"\"\"\n    Add k to every element in a list of tuples\n    Args:\n        list_of_tuples (list of tuple): list of tuples to be operated on\n        k (int): number to add to every element of the tuple\n    Returns:\n        list of tuples with added elements\n    \"\"\"\n    return [tuple(map(lambda x: x + k, t)) for t in list_of_tuples]\n\n\n# -\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(items, K):\n    result = []\n    for item in items:\n        new_item = [k+K for k in item]\n        result.append(new_item)\n    return result\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tup, k):\n    lst = []\n    for i in tup:\n        for j in i:\n            lst.append(j+k)\n    return lst\n\n# def add_K_element(tup, k):\n#     for i in tup:\n#         for j in i:\n#             print(j+k)\n#\n#\n# add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    count = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(string):\n    def _str_to_bit_list(string):\n        return [int(c) for c in list(string)]\n\n    n = len(string)\n    bit_list = _str_to_bit_list(string)\n    res = 0\n    for i in range(n - 1, -1, -1):\n        if bit_list[i] == 0:\n            res += 1\n        else:\n            bit_list[i] = 1\n            bit_list[i + 1] = 0\n            break\n    return res\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(binary_str):\n    assert isinstance(binary_str, str)\n    # your code here\n    count = 0\n    for i in range(1, len(binary_str)-1, 2):\n        if binary_str[i-1] != binary_str[i+1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    if s[0] != s[1]:\n        return 1\n    flip_required = 0\n    for i in range(1, len(s)-1):\n        if s[i] == s[i+1]:\n            flip_required += 1\n    return flip_required", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\nimport doctest\n\ndef min_flip_to_make_string_alternate(string):\n    pass\n\ndef min_flip_to_make_string_alternate(string):\n    lst = []\n    for i in string:\n        if i == '1':\n            lst.append(1)\n        else:\n            lst.append(0)\n\n    count = 0\n    for i in range(len(lst)):\n        if i+1 < len(lst) and lst[i] == 1 and lst[i+1] == 0:\n            count += 1\n    return count\n\ndoctest.run_docstring_examples(min_flip_to_make_string_alternate, globals())", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(string):\n    num_flips = 0\n    for i in range(len(string)):\n        if string[i] == '0' and string[i-1] == '1':\n            num_flips += 1\n    return num_flips\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    left = 0\n    right = 1\n    while left < len(string):\n        if string[left] == string[right]:\n            left += 1\n            right += 1\n        else:\n            if right - left < 2:\n                return \"Impossible\"\n            right -= 2\n            left += 2\n    return left\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(binary_string):\n    # Write your code here.\n    alternating_char_list = list()\n    i = 0\n    while i < len(binary_string):\n        if i == len(binary_string)-1:\n            alternating_char_list.append(binary_string[i])\n        else:\n            if binary_string[i] == binary_string[i+1]:\n                alternating_char_list.append(binary_string[i])\n                i += 1\n            else:\n                alternating_char_list.append(binary_string[i])\n                alternating_char_list.append(binary_string[i+1])\n                i += 2\n    return len(alternating_char_list)\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string: str) -> int:\n    \"\"\"\n    :param string: A string of 0's and 1's\n    :return: The minimum number of flips required to make the string a sequence of alternate characters\n    \"\"\"\n\n    # your code goes here\n    return sum(1 for i in range(len(string) - 1) if string[i] != string[i + 1])\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(str):\n    count_odd = 0\n    for char in str:\n        if char == '0':\n            count_odd += 1\n        else:\n            count_odd -= 1\n        if count_odd < 0:\n            count_odd += 1\n        if count_odd == 0:\n            return 1\n    return 0\n\n#assert min_flip_to_make_string_alternate(\"101011\") == 0\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    count = 0\n    while num != 0:\n        num = num // 10\n        count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(number):\n    return len(str(number))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    return len(str(num))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    return len(str(num))\n\n\ndef test_count_Digit():\n    assert count_Digit(12345) == 5\n    assert count_Digit(12345678) == 8\n    assert count_Digit(123456789) == 9\n    assert count_Digit(1234567891) == 1\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(number):\n    digits = 0\n    while number > 0:\n        number = number//10\n        digits += 1\n    return digits\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\nimport math\n\n\ndef count_Digit(num):\n    return math.log10(num) + 1\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\n#Test 1:\n# assert count_Digit(12345) == 5\n\ndef count_Digit(n):\n    # Your code here\n    return sum(1 for x in str(n))\n\n#Test 2\n# assert count_Digit(12345) == 5\n\ndef count_Digit_1(n):\n    return len(str(n))\n\n#Test 3\n# assert count_Digit(12345) == 5\n\ndef count_Digit_2(n):\n    n = str(n)\n    l = len(n)\n    return l\n\n#Test 4\n# assert count_Digit(12345) == 5\n\ndef count_Digit_3(n):\n    return len(str(n))\n\n#Test 5\n# assert count_Digit(12345) == 5\n\ndef count_Digit_4(n):\n    n = str(n)\n    l = len(n)\n    return l\n\n#Test 6\n# assert count_Digit(12345) == 5\n\ndef count_Digit_5(n):\n    return len(str(n))\n\n#Test 7\n# assert count_Digit(12345) == 5\n\ndef count_Digit_6(n):\n    return len(str(n))\n\n#Test 8\n# assert count_Digit(12345) == 5\n\ndef count_Digit_7(n):\n    n = str(n)\n    l = len(n)\n    return l\n\n#Test 9\n# assert count_Digit(12345) == 5\n\ndef count_Digit_8(n):\n    n = str(n)\n    l = len(n)\n    return l\n\n#Test 10\n# assert count_Digit(12345) == 5\n\ndef count_Digit_9(n):\n    n = str(n)\n    l = len(n)\n    return l\n\n#Test 11\n# assert count_Digit(", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    \"\"\"\n    >>> count_Digit(12345)\n    5\n    >>> count_Digit(1234567)\n    7\n    >>> count_Digit(123456789)\n    9\n    >>> count_Digit(0)\n    1\n    >>> count_Digit(1234567890)\n    10\n    >>> count_Digit(0)\n    1\n    \"\"\"\n    count=0\n    while(n>0):\n        n=n//10\n        count=count+1\n    return count\n\ndef test_count_Digit():\n    n = 12345\n    assert count_Digit(n) == 5\n\n    n = 1234567\n    assert count_Digit(n) == 7\n\n    n = 123456789\n    assert count_Digit(n) == 9\n\n    n = 0\n    assert count_Digit(n) == 1\n\n    n = 1234567890\n    assert count_Digit(n) == 10\n\n    n = 0\n    assert count_Digit(n) == 1\n\n# Test\ntest_count_Digit()", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    return len(str(num))\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n#\n#\ndef adjacent_num_product(list):\n    max_product = 0\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            product = list[i] * list[j]\n            if product > max_product:\n                max_product = product\n    return max_product", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n    if len(arr) < 2:\n        return 0\n    max_product = 0\n    for i in range(len(arr)-1):\n        prod = arr[i]*arr[i+1]\n        if prod > max_product:\n            max_product = prod\n    return max_product\n\n\ndef adjacent_num_product(arr):\n    \"\"\"\n    Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\n    Args:\n        arr (list): input list of integers\n    Returns:\n        int: largest product of adjacent numbers in a given list\n\n    Example:\n    Input:\n    arr = [1,2,3,4,5,6]\n    Output:\n    30\n    \"\"\"\n    max_product = 0\n    for i in range(len(arr) - 1):\n        prod = arr[i] * arr[i+1]\n        if prod > max_product:\n            max_product = prod\n    return max_product\n\n\n# assert adjacent_num_product([1, 2, 3, 4, 5, 6]) == 30", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n\n    if len(nums) < 2:\n        raise Exception(\"List size is too short to have adjacent elements.\")\n\n    res = 1\n    for i in range(len(nums) - 1):\n        res *= nums[i + 1]\n\n    return res\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    # define a variable to store the largest product\n    max_prod = nums[0] * nums[1]\n    # iterate through the remaining values in the list\n    for i in range(1, len(nums)):\n        # define a variable to store the current product\n        cur_prod = nums[i] * nums[i+1]\n        # if the current product is greater than the max product\n        if cur_prod > max_prod:\n            # update the max product\n            max_prod = cur_prod\n    # return the max product\n    return max_prod\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\nfrom typing import List\n\nfrom dojo.models import DojoTest\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n    max_product = -1\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    max_prod = 1\n    for i in range(0,len(nums)-1):\n        max_prod = max(max_prod, nums[i]*nums[i+1])\n    return max_prod", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(lst):\n    max_prod = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            prod = lst[i] * lst[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n    \"\"\"\n    Returns the largest product of the pair of adjacent elements in the given list of integers.\n\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    >>> adjacent_num_product([1,2,3,4,1])\n    24\n    \"\"\"\n    max_prod = -math.inf\n    for i, num in enumerate(arr):\n        for j in range(i+1, len(arr)):\n            prod = num * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\n\ndef adjacent_num_product_v2(arr):\n    \"\"\"\n    Returns the largest product of the pair of adjacent elements in the given list of integers.\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    >>> adjacent_num_product([1,2,3,4,1])\n    24\n    \"\"\"\n    max_prod = -math.inf\n    for i, num in enumerate(arr):\n        for j in range(i+1, len(arr)):\n            prod = num * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\n\n# # Even-odd\n#\n# ## Question 1:\n#\n# Write a Python program to find if a given number is even or odd.\n# assert is_even(10) == False\n# assert is_even(11) == True\n# assert is_even(5) == False\n# assert is_even(6) == True\n\ndef is_even(num):\n    \"\"\"\n    Returns if the given number is even or odd.\n\n    >>> is_even(10)\n    False\n    >>> is_even(11)\n    True\n    >>> is_even(5)\n    False\n    >>> is_even(6)\n    True\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    return True\n\n\ndef is_even_v2(num):\n    \"\"\"\n    Returns if the given number"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if not root:\n        return True\n    elif abs(get_depth(root.left) - get_depth(root.right)) < 2:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# O(N) time | O(N) space\ndef is_tree_balanced(root):\n    return check_height(root) != None\n\ndef check_height(node):\n    if node is None:\n        return 0\n    leftHeight = check_height(node.left)\n    if leftHeight == None:\n        return None\n    rightHeight = check_height(node.right)\n    if rightHeight == None:\n        return None\n    if abs(leftHeight - rightHeight) > 1:\n        return None\n    return 1 + max(leftHeight, rightHeight)", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n\n    left_depth = depth(root.left)\n    right_depth = depth(root.right)\n\n    if abs(left_depth - right_depth) > 1:\n        return False\n\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n# O(n) time | O(log(n)) space - where n is the number of nodes in the tree\ndef is_tree_balanced(root):\n    if not root:\n        return True\n    return check_node_balance(root.left) and check_node_balance(root.right) and abs(height(root.left) - height(root.right)) <= 1\n\ndef check_node_balance(root):\n    if not root:\n        return True\n    return abs(height(root.left) - height(root.right)) <= 1\n\ndef height(node):\n    if not node:\n        return 0\n    return 1 + max(height(node.left), height(node.right))", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if not root:\n        return True\n    return abs(depth(root.left) - depth(root.right)) <= 1\n\ndef depth(root):\n    if not root:\n        return 0\n    return max(depth(root.left), depth(root.right)) + 1", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(tree):\n\n    def compute_height(tree):\n        if not tree:\n            return 0\n        left_height = compute_height(tree.left)\n        right_height = compute_height(tree.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return 1 + max(left_height, right_height)\n\n\n    return compute_height(tree) != -1\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    if not root:\n        return True\n    left = height(root.left)\n    right = height(root.right)\n    if abs(left - right) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\nfrom tree import Node, is_tree_balanced\nfrom tree.test_tree import Tree\n\ndef test_is_balanced_1():\n    \"\"\"\n    Test case 1:\n    The tree is\n    \"\"\"\n    root = Node(0)\n    root.left = Node(1)\n    root.right = Node(2)\n    root.left.left = Node(3)\n    root.left.right = Node(4)\n    root.right.left = Node(5)\n    root.right.right = Node(6)\n    print(root)\n    assert is_tree_balanced(root)\n\ndef test_is_balanced_2():\n    \"\"\"\n    Test case 2:\n    The tree is\n    \"\"\"\n    root = Node(0)\n    root.left = Node(1)\n    root.right = Node(2)\n    root.left.left = Node(3)\n    root.left.right = Node(4)\n    root.right.left = Node(5)\n    root.right.right = Node(6)\n    root.left.left.left = Node(7)\n    root.left.right.right = Node(8)\n    root.right.left.right = Node(9)\n    root.right.right.left = Node(10)\n    root.right.right.right = Node(11)\n    print(root)\n    assert is_tree_balanced(root)\n\ndef test_is_balanced_3():\n    \"\"\"\n    Test case 3:\n    The tree is\n    \"\"\"\n    root = Node(0)\n    root.left = Node(1)\n    root.right = Node(2)\n    root.left.left = Node(3)\n    root.left.right = Node(4)\n    root.right.left = Node(5)\n    root.right.right = Node(6)\n    root.left.left.left = Node(7)\n    root.left.right.right = Node(8)\n    root.right.left.right = Node(9)\n    root.right.right.left = Node(10)\n    root.right.right.right = Node(11)\n    root.left.left.left.right = Node(1", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n# O(n) runtime, where n is the number of nodes in the tree\n# O(n) space\n\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n\n    # return False if left and right subtrees are unbalanced\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right) and abs(get_height(root.left) - get_height(root.right)) <= 1\n\n\ndef get_height(root):\n    if root is None:\n        return 0\n\n    return 1 + max(get_height(root.left), get_height(root.right))\n\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef repeat_tuples(tuple_: Tuple[int, ...], times: int) -> List[Tuple[int, ...]]:\n    return tuple_ * times\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuples, n):\n    return tuples * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tupl, n):\n    out = []\n    for i in range(n):\n        out.append(tupl)\n    return out\n\ndef test_repeat_tuples():\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(x, n):\n    \"\"\"\n    A function to repeat a tuple.\n\n    :param x: The tuple to repeat.\n    :type x: tuple\n    :param n: The number of times to repeat the tuple.\n    :type n: int\n    :return: The repeated tuple.\n    :rtype: tuple\n    \"\"\"\n    return x * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuple, n):\n    for i in range(n):\n        yield tuple\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    ret = []\n    for i in range(n):\n        ret.append(tup)\n    return ret\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(t, n):\n    result = []\n    for _ in range(n):\n        result.append(t)\n    return result", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(t, n):\n    return t*n\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    assert type(tup) == tuple\n    assert type(n) == int\n    return (tup,) * n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\nfunction lateralsurface_cuboid(a,b,c)\n    return a*b+b*c+c*a\nend\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,width,height):\n    assert type(length)==int and type(width)==int and type(height)==int\n    return 2*length*width+2*width*height+2*length*height\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a,b,c):\n    return 2*a*b+2*b*c+2*c*a\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n    return (2 * l * w + 2 * w * h + 2 * h * l)\n\n#assert lateralsurface_cuboid(8,5,6)==156\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\nfunction lateralsurface_cuboid(a,b,c)\n    area = (a*b) + (b*c) + (c*a)\n    return 2 * area\nend\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(height, width, length):\n    return height*2 + width*2 + length*2\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a,b,c):\n    return 2*(a*b+b*c+c*a)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\nfunction lateralsurface_cuboid(a::T, b::T, c::T)::T where {T<:Integer}\n    return (2*a+2*b+2*c)\nend\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\nfunction lateralsurface_cuboid(l,w,h)\n    return 2*l*w + 2*w*h + 2*h*l\nend", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,width,height):\n    return 2*length*width+2*length*height+2*width*height"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(items):\n    #your code here\n    return items\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n# -----------------------------------------------------\ndef float_sort(tup):\n    for t in tup:\n        for idx,v in enumerate(t):\n            if float(v) < float(t[idx+1]):\n                t[idx],t[idx+1] = t[idx+1],t[idx]\n    return tup\n# -----------------------------------------------------\ntup = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(items):\n    return sorted(items, key=lambda x: float(x[1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(iterable):\n    iterable.sort(key=lambda item: float(item[1]))\n    return iterable\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    new_tup = []\n    for t in tup:\n        num1 = float(t[1])\n        new_tup.append(t)\n    new_tup.sort(key=lambda t:t[1])\n    return new_tup", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tuples):\n\treturn sorted(tuples, key=lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\n# your code goes here\ndef float_sort(a):\n    a=sorted(a, key=lambda tup: tup[1])\n    return a\n\n# Test\na = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(alist):\n    return sorted(alist, key=lambda x: float(x[1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    tup.sort(key=lambda x:x[1])\n    return tup\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    \"\"\"\n    :param arr: sorted array of integers\n    :param start: start index of array\n    :param end: end index of array\n    :return: smallest missing integer\n    \"\"\"\n    return start + (end - start + 1) - len(arr)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    # Fill in this function with your own code.\n    missing_value = start\n    for i in range(start, end + 1):\n        if missing_value != i:\n            missing_value += 1\n        if i not in arr:\n            break\n    return missing_value\n\n# this is a test", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(a, start=0, end=None):\n    if end is None:\n        end = len(a)\n    for i in range(start, end):\n        if a[i] != i:\n            return i\n    return end\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nimport sys\n\n\ndef smallest_missing(array, left, right):\n    \"\"\"\n    :param array: a list of elements in sorted order\n    :param left: inclusive\n    :param right: inclusive\n    :return: the smallest missing element\n    \"\"\"\n    middle = (left + right) // 2\n    if middle == left:\n        if array[middle] == right:\n            return right + 1\n        elif array[middle] > right:\n            return left\n        else:\n            return array[middle]\n\n    elif middle == right:\n        if array[middle] == left:\n            return left\n        elif array[middle] < left:\n            return right\n        else:\n            return array[middle]\n\n    else:\n        if array[middle] == left:\n            if array[middle + 1] == right:\n                return middle + 2\n            elif array[middle + 1] > right:\n                return left\n            else:\n                return array[middle + 1]\n        elif array[middle] == right:\n            if array[middle - 1] == left:\n                return middle - 1\n            elif array[middle - 1] < left:\n                return right\n            else:\n                return array[middle - 1]\n        else:\n            if array[middle - 1] == left:\n                if array[middle + 1] == right:\n                    return middle\n                elif array[middle + 1] > right:\n                    return left\n                else:\n                    return array[middle]\n            elif array[middle + 1] == right:\n                if array[middle - 1] == left:\n                    return middle + 1\n                elif array[middle - 1] < left:\n                    return right\n                else:\n                    return array[middle - 1]\n            else:\n                return array[middle + 1]\n\n\ndef main(argv):\n    array = list(map(int, sys.argv[1].split(',')))\n    left = 0\n    right = len(array) - 1\n    print(smallest_missing(array, left, right))\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(a, start, end):\n    if start < end:\n        mid = (start + end) // 2\n        if mid == a[mid]:\n            return smallest_missing(a, start, mid - 1)\n        elif mid - 1 == a[mid]:\n            return smallest_missing(a, mid + 1, end)\n        elif mid + 1 == a[mid]:\n            return smallest_missing(a, start, mid)\n        else:\n            return a[mid]\n    else:\n        return 0\n\n\na = [0, 1, 2, 3, 4, 5, 6]", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nfrom random import shuffle\n\n\ndef smallest_missing(array, start, end):\n    \"\"\"\n    Write a function to find the smallest missing element in a sorted array.\n    :param array: a sorted array.\n    :param start: the first index to search.\n    :param end: the last index to search.\n    :return: the smallest missing element.\n    \"\"\"\n    assert start < end\n\n    array_len = end - start + 1\n\n    assert array_len > 0\n\n    if array_len < 1:\n        return None\n\n    # The first missing element will be the smallest element\n    # after the last element\n    first_missing_element = array_len - 1\n\n    assert first_missing_element >= 0\n\n    for i in range(first_missing_element, start - 1, -1):\n        if array[i] != i + start:\n            # The first missing element is found\n            first_missing_element = i\n            break\n\n    for i in range(start, end + 1):\n        if array[i] != i + start:\n            # The smallest missing element is found\n            return i + start\n\n    # No missing element found.\n    return None\n\n\n# Tests", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(array, start, end):\n    #filling holes in array\n    for i in range(start, end):\n        if i >= len(array) or array[i] != i:\n            gap = i - (start - 1)\n            array[gap] = array[i]\n\n    #finding smallest missing element\n    smallest = start\n    for i in range(start, end):\n        if smallest > array[i]:\n            smallest = array[i]\n    smallest += 1\n    return smallest\n\n\n#assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n#assert smallest_missing([5, 4, 3, 2, 1], 0, 4) == 6\n#assert smallest_missing([5, 4, 3, 2, 1, 6, 7, 8], 0, 8) == 9\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(array, start, end):\n  # Fill in the method's body here.\n  if end-start < 1:\n    return end+1\n  if array[start] == 0:\n    return start+1\n  if array[end] == 0:\n    return end+1\n  if start > end:\n    return start\n  mid = (start+end)//2\n  if array[mid] == 0:\n    return mid+1\n  if array[mid-1] == 0:\n    return mid\n  if array[mid] == 0:\n    return mid+1\n  if array[mid-1] == 0:\n    return mid\n  if array[mid] == 0:\n    return mid+1\n  if array[mid-1] == 0:\n    return mid\n  if array[mid] == 0:\n    return mid+1\n  return start+1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(nums, lower_bound, upper_bound):\n    \"\"\"\n    Find the smallest missing element in a sorted array.\n    :param nums: sorted array of numbers\n    :param lower_bound: lower bound\n    :param upper_bound: upper bound\n    :return: smallest missing element\n    \"\"\"\n    for i in range(lower_bound, upper_bound + 1):\n        if i not in nums:\n            return i\n    return upper_bound + 1\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(array, start, end):\n    pass"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heapify, heappop, heappush\n\n\ndef heap_assending(lst):\n    \"\"\"\n    :param lst:\n    :return:\n    \"\"\"\n    min_heap = [elem for elem in lst]\n    heapify(min_heap)\n    while len(min_heap) > 1:\n        heappush(min_heap, heappop(min_heap))\n    return min_heap\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heapify, heappush, heappop\ndef heap_assending(lst):\n    h=lst[:]\n    heapify(h)\n    return [heappop(h) for i in range(len(h))]", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\n\n\ndef heap_assending(lst):\n    q = []\n    for x in lst:\n        heappush(q, x)\n    res = []\n    while q:\n        res.append(heappop(q))\n    return res\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef heap_assending(l):\n    # Your code goes here.\n    # with heapq.heapify()\n    h=list()\n    for x in l:\n        heappush(h,x)\n    result=list()\n    while h:\n        result.append(heappop(h))\n    return result\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom collections import deque\ndef heap_assending(lst):\n    '''\n    sorts given list using heap algorithm\n    '''\n    if not lst:\n        return lst\n\n    h = deque()\n    h.extend(lst)\n    i = len(lst) // 2 - 1\n    while i >= 0:\n        sift_down(h, i, len(h) - 1)\n        i -= 1\n    return list(h)\n\ndef sift_down(h, i, n):\n    while 2*i + 1 < n:\n        j = 2*i + 1\n        if j + 1 < n and h[j] < h[j + 1]:\n            j += 1\n        if h[i] > h[j]:\n            h[i], h[j] = h[j], h[i]\n            i = j\n        else:\n            break\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(L):\n    h=heapq.heapify(L)\n    heapq.heapsort(h)\n    return list(h)\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(lst):\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n    res = []\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq\ndef heap_assending(lst):\n    # Creating a heap from a list\n    h = [(x, i) for i, x in enumerate(lst)]\n    heapq.heapify(h)\n    # Sorting the list\n    lst[:] = [x for _, x in heapq.nsmallest(len(lst), h)]\n    return lst\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(list):\n    from heapq import heapify, heappush, heappop\n    heapify(list)\n    # heapify, heappush, heappop can run in O(n)\n    for i in range(len(list) - 1, -1, -1):\n        heappush(list, list[i])\n        print(list)\n    return list\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nimport heapq\ndef heap_assending(array):\n    heapq.heapify(array)\n    for i in range(len(array)-1,0,-1):\n        heapq.heappushpop(array,array[i])\n    return array\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    volume = a*b*c\n    return volume\n\n#print volume_cuboid(1,2,3)\n\n#Write a function to find the volume of a sphere.", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    \"\"\"Return the volume of a cuboid defined by three sides with a length of a, b and c\"\"\"\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(l,w,h):\n    return l*w*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(width, height, depth):\n    return width*height*depth\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(width, height, depth):\n    return width * height * depth\n\ndef test_volume_cuboid():\n    assert volume_cuboid(1, 2, 3) == 6\n\n#assert volume_cuboid(1,2,3)==6\n#print(volume_cuboid(1, 2, 3))", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a, b, c):\n    \"\"\"\n    calculate the volume of a cuboid\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return a * b * c\n\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    if not s:\n        return []\n    res = []\n    for i in range(len(s)):\n        res += [s[:i]+s[i+1:]+s[:i]]\n    return res\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    perms = []\n    if len(s) <= 1:\n        perms.append(s)\n    else:\n        for i in range(len(s)):\n            for p in permute_string(s[:i] + s[i+1:]):\n                perms.append(s[i] + p)\n    return perms\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nimport os\n\ndef permute_string(string):\n    perms = []\n    if len(string) <= 1:\n        perms.append(string)\n    else:\n        string = string.lower()\n        for i in range(len(string)):\n            left = string[:i]\n            right = string[i + 1:]\n            perms.extend(left + right for right in permute_string(string))\n    return perms\n\n\ndef permute_string2(string):\n    perms = []\n    if len(string) <= 1:\n        perms.append(string)\n    else:\n        for i in range(len(string)):\n            left = string[:i]\n            right = string[i + 1:]\n            perms.extend(left + right for right in permute_string(string))\n    return perms\n\n\ndef permute_string3(string):\n    if len(string) <= 1:\n        perms.append(string)\n    else:\n        for i in range(len(string)):\n            left = string[:i]\n            right = string[i + 1:]\n            perms.extend(left + right for right in permute_string(string))\n    return perms\n\n\ndef permute_string4(string):\n    perms = []\n    if len(string) <= 1:\n        perms.append(string)\n    else:\n        for i in range(len(string)):\n            left = string[:i]\n            right = string[i + 1:]\n            perms.extend(left + right for right in permute_string(string))\n    return perms\n\n\ndef permute_string5(string):\n    if len(string) <= 1:\n        perms.append(string)\n    else:\n        for i in range(len(string)):\n            left = string[:i]\n            right = string[i + 1:]\n            perms.extend(left + right for right in permute_string(string))\n    return perms\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(input_string):\n    if input_string == '':\n        return ['']\n    else:\n        return permute_string(input_string[:-1]) + permute_string(input_string[-1:]) + [input_string]\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    #your code goes here\n    perm_list = []\n    perm_list.append(s)\n    for i in range(len(s)):\n        if i > 0:\n            for j in range(i,len(s)):\n                if j < len(s):\n                    perm_list.append(s[:i]+s[i+1:j+1]+s[j+1:])\n        perm_list.append(s[1:len(s)])\n    return perm_list\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n\tresult = []\n\tif len(s) == 1:\n\t\tresult.append(s)\n\t\treturn result\n\tif len(s) == 2:\n\t\tresult.append(s)\n\t\tresult.append(s[::-1])\n\t\treturn result\n\tresult.append(s[:1])\n\tfor i in range(1,len(s)):\n\t\tfor j in permute_string(s[1:i+1]):\n\t\t\tresult.append(s[:1] + j)\n\treturn result", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(word):\n    if not word:\n        return []\n    else:\n        perms=[]\n        for i in range(len(word)):\n            for perm in permute_string(word[:i]+word[i+1:]):\n                perms.append(word[:i]+perm+word[i+1:])\n        return perms\n\ndef permute_string(word):\n    if not word:\n        return []\n    if len(word)==1:\n        return [word]\n    else:\n        permutations = []\n        for i in range(len(word)):\n            for perm in permute_string(word[:i]+word[i+1:]):\n                permutations.append(word[:i]+perm+word[i+1:])\n        return permutations\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    if len(string)<=1:\n        return [string]\n    permutations = []\n    s_list = list(string)\n    for i in range(len(s_list)):\n        for perm in permute_string(string[:i]+string[i+1:]):\n            permutations.append(s_list[i]+perm)\n    return permutations", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    return sorted(set(list(itertools.permutations(s))))\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    n=len(s)\n    perm=[]\n    if n==0:\n        return perm\n    perm=[s]\n    i=0\n    while i<n-1:\n        j=0\n        while j<i+1:\n            if s[j] in s[i+1:]:\n                break\n            j+=1\n        perm.append(s[i:i+1]+s[j:i+1]+s[i+1:])\n        i+=1\n    return perm\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, divisor):\n    num = num / divisor * divisor\n    return num", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, divisor):\n    \"\"\"\n    Rounds the given number to the nearest multiple of the divisor.\n    :param num: The number to round.\n    :param divisor: The divisor to use.\n    :return: The rounded number.\n    \"\"\"\n    return (num / divisor) * divisor\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, multiple):\n    return int(num/multiple) * multiple\n\n# Test cases", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,divisor):\n    return num - (num % divisor)\n\n\n# +", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, multiple):\n    if num % multiple == 0:\n        return num\n    return num - (num % multiple)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\nimport math\nimport sys\n\ndef round_num(number,multiple):\n    \"\"\"\n    round_num takes two arguments, a number and an integer multiple.\n    It returns the number rounded to the nearest multiple of the second argument.\n    \"\"\"\n    return int(math.floor(number/multiple) * multiple)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\nimport math\ndef round_num(num, mult):\n    new_num = math.floor(num / mult) * mult\n    return new_num\n\ndef test_round_num():\n    assert round_num(4722,10)==4720\n    assert round_num(23.5,1)==23\n    assert round_num(31,5)==30\n    assert round_num(53.49,1)==53\n    assert round_num(53.499,1)==53\n    assert round_num(53.4999,1)==54\n    assert round_num(139.7,5)==135\n    assert round_num(139.79,5)==135\n    assert round_num(139.799,5)==135\n    assert round_num(139.7999,5)==135\n    assert round_num(139.8,5)==140\n    assert round_num(139.89,5)==140\n    assert round_num(139.899,5)==140\n    assert round_num(139.8999,5)==140\n    assert round_num(139.9,5)==140\n    assert round_num(139.99,5)==140\n    assert round_num(139.999,5)==140\n    assert round_num(139.9999,5)==140\n    assert round_num(140,5)==140\n    assert round_num(140.01,5)==140\n    assert round_num(140.011,5)==140\n    assert round_num(140.0111,5)==140\n    assert round_num(140.01111,5)==140\n    assert round_num(140.02,5)==140\n   ", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number,increment):\n    if number % increment == 0:\n        return number\n    else:\n        return round(number / increment) * increment\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(number,multiple):\n    return number - (number%multiple)\n\n\nround_num(4722,10)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,multiple):\n    num = num + (multiple-num%multiple)\n    return num\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(l):\n    l = sorted(set(l))\n    return tuple(l)\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(replica):\n    return tuple(dict.fromkeys(replica))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(x):\n    x = set(x)\n    y = [tuple(x)]\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[j] == x[i]:\n                y[0][i] = 'MSP'\n    return y[0]\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(list):\n    list_ = list\n    for i in range(len(list)):\n        if list_.count(list[i]) > 1:\n            list_[list.index(list[i])] = \"MSP\"\n    return list_\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(items):\n    results = []\n    for item in items:\n        if item not in results:\n            results.append(item)\n    return results\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nfrom typing import List\nfrom collections import Counter\n\n\ndef remove_replica(t_list: List[int]) -> List[int]:\n    counter = Counter(t_list)\n    print(counter)\n    new_list = [elem for elem, count in counter.items() if count == 1]\n    return new_list\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nfrom collections import Counter\nfrom typing import Iterable\n\nfrom .decorators import log_func\n\n\n@log_func\ndef remove_replica(seq: Iterable[int]) -> Iterable[int]:\n    \"\"\"\n    Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\n    >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    True\n\n    >>> remove_replica((1, 2, 3, 3, 3, 3, 4, 4, 4, 5)) == (1, 2, 3, 'MSP', 4, 'MSP', 5)\n    True\n\n    :param seq: The input sequence.\n    :return: The resulting sequence.\n    \"\"\"\n    return tuple(c if i not in c else \"MSP\" for i, c in enumerate(Counter(seq).elements()))\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(my_tuple):\n    dup_set = set()\n    return tuple(filter(lambda x: x not in dup_set or x == 'MSP', my_tuple))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(items:tuple):\n    new_items = []\n    for item in items:\n        if item not in new_items:\n            new_items.append(item)\n    return tuple(new_items)\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tuples):\n    out = []\n    seen = {}\n    for tuple_ in tuples:\n        if tuple_ not in seen:\n            out.append(tuple_)\n            seen[tuple_] = tuple_\n    return tuple(out)\n\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string,char):\n    char=char.lower()\n    l=list(string)\n    res=\"\"\n    for i in range(len(l)):\n        if l[i]!=char:\n            res=res+l[i]\n    return res", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(input_str,char):\n    #your code here\n    return input_str.replace(char,\"\")\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, char):\n    new_string = ''\n    for x in range(len(string)):\n        if string[x] != char:\n            new_string += string[x]\n    return new_string\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str,char):\n    count = 0\n    for i in str:\n        if i == char:\n            count += 1\n    str = str.replace(char * count, '')\n    return str\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(str, char):\n    result = []\n    for s in str:\n        if s != char:\n            result.append(s)\n    return result\n\ndef remove_Char2(str, char):\n    if char not in str:\n        return str\n    else:\n        start = 0\n        while True:\n            index = str.find(char, start)\n            if index == -1:\n                break\n            str = str[:index]+str[index+1:]\n            start = index+1\n    return str\n\ndef remove_Char3(str, char):\n    return ''.join(ch for ch in str if ch != char)", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string,char):\n    final_list = [i for i in string if i != char]\n    return \"\".join(final_list)\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(input_str, char):\n    return input_str.replace(char, \"\")\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n\tresult = \"\"\n\tfor c in string:\n\t\tif c != char:\n\t\t\tresult += c\n\treturn result\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    return string.replace(char, \"\")\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(word, char):\n    return word.replace(char,\"\")\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(l):\n    new_list = l[1:] + [l[0]]\n    return new_list\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\n# write your code here\ndef move_first(x):\n    x.reverse()\n    return x\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(list):\n    temp = list[0]\n    del list[0]\n    list.append(temp)\n    return list\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(L):\n    \"\"\"\n    :param list L: The given list\n    :return: The shifted list\n    \"\"\"\n    # your code here\n    L.insert(0, L.pop())\n    return L\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(l):\n    l.append(l.pop(0))\n    return l\n\ndef move_first(l):\n    l[0], l[-1] = l[-1], l[0]\n    return l\n\ndef move_first(l):\n    l.append(l.pop(0))\n    return l\n\ndef move_first(l):\n    l[-1], l[0] = l[0], l[-1]\n    return l\n\ndef move_first(l):\n    l.append(l.pop(0))\n    return l\n\ndef move_first(l):\n    l.reverse()\n    l.append(l.pop(0))\n    l.reverse()\n    return l\n\ndef move_first(l):\n    temp = l[-1]\n    l.append(l.pop(0))\n    l.append(temp)\n    return l\n\ndef move_first(l):\n    l.append(l.pop(0))\n    l.reverse()\n    l.reverse()\n    return l", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    lst.insert(0,lst.pop())\n    return lst\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(list):\n    list.append(list.pop(0))\n    return list\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    lst[0],lst[-1] = lst[-1],lst[0]\n    return lst", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(l):\n    l[0] = l[-1]\n    del l[-1]\n    return l\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    lst.append(lst.pop(0))\n    return lst\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n    return 2 * (a * b + b * c + c * a)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    s=2*a*b+2*a*c+2*b*c\n    return s\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(l,w,h):\n    return l*w + w*h + h*l\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a, b, c):\n    return (a*b+a*c+b*c)*2\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return (2*a*b + 2*a*c + 2*b*c)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    \"\"\"\n    The surface area of a cuboid is a+b*2+c*2.\n    \"\"\"\n    return a+b*2+c*2\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    \"\"\"\n    Calculates the surface area of a cuboid.\n\n    Parameters\n    ----------\n    a : int\n        The length of the base of the cuboid.\n    b : int\n        The height of the cuboid.\n    c : int\n        The width of the cuboid.\n\n    Returns\n    -------\n    float\n        The surface area of the cuboid.\n\n    \"\"\"\n    return (a*b) + (a*c) + (b*c)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a*b + a*c + b*c)", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a, b, c):\n    return 2 * (a + b + c)", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n    return 2 * (a * b + a * c + b * c)\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n    return [[0]*m]*n\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\ndef multi_list(r,c):\n    if r==1:\n        return [[0 for x in range(c)] for x in range(r)]\n    else:\n        return [[0 for x in range(c)] for x in range(r)] + [multi_list(r-1,c)]", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(x,y):\n    return [[0 for i in range(x)] for j in range(y)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nimport numpy as np\n\ndef multi_list(x,y):\n    arr = np.zeros((x,y))\n    for i in range(x):\n        for j in range(y):\n            arr[i,j] = i + j\n    return arr\n\ndef test_multi_list():\n    assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n\ntest_multi_list()\n\ndef multi_list(x,y):\n    arr = np.zeros((x,y))\n    for i in range(x):\n        for j in range(y):\n            arr[i,j] = i + j\n    return arr\n\ndef test_multi_list():\n    assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n\ntest_multi_list()", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(r,c):\n    l = []\n    for i in range(r):\n        l.append([0]*c)\n    for i in range(r):\n        for j in range(c):\n            l[i][j] = i*c + j\n    return l\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(row, col):\n    return [[0]*col for i in range(row)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(row,col):\n    arr=[]\n    for i in range(row):\n        arr.append([0]*col)\n    for i in range(row):\n        for j in range(col):\n            arr[i][j]=i*col+j\n    return arr", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(num_rows, num_cols):\n    out_list = []\n    for row_num in range(num_rows):\n        out_list.append([0] * num_cols)\n    for row_num in range(num_rows):\n        for col_num in range(num_cols):\n            out_list[row_num][col_num] = row_num * num_cols + col_num\n    return out_list\n    \ndef test_multi_list():\n    assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n    assert multi_list(1,2)==[[0]]\n    assert multi_list(2,2)==[[0,0],[0,0]]\n    assert multi_list(2,1)==[[0],[0]]\n\ntest_multi_list()", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(x,y):\n    multi_list_2d = []\n    for i in range(x):\n        multi_list_2d.append([])\n        for j in range(y):\n            multi_list_2d[i].append(i*y+j)\n    return multi_list_2d\n\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(inner_list, index):\n    temp_list = []\n    for item in inner_list:\n        temp_list.append(item[index])\n    return sorted(inner_list, key=itemgetter(index))\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(students,index):\n\tstudents_sorted = sorted(students, key=lambda x: x[index])\n\treturn students_sorted\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(x, i):\n    x.sort(key=itemgetter(i))\n    return x", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    list = []\n    for item in lst:\n        list.append(item[index])\n    return sorted(lst, key = list.index)\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    return sorted(list_of_lists, key = lambda x: x[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(data, index):\n    new_data = sorted(data, key = lambda x : x[index])\n    return new_data\n\ndef main():\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(arr,index):\n    a = arr.copy()\n    a.sort(key=lambda x:x[index])\n    return a\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    list_of_lists.sort(key=lambda x: x[index])\n    return list_of_lists\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lists, index):\n    #Your code here\n    return sorted(lists, key=lambda x:x[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(inner_list, idx):\n    #your code here\n    return sorted(inner_list, key = lambda x: x[idx])"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(numbers):\n    # your code here\n    pass\n\n\ndef test():\n    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    \"\"\"\n    O(n^2)\n    :param arr:\n    :return:\n    \"\"\"\n    # return 0\n    # TODO write me\n    return 1\n\n\ndef find_rotation_count_brute_force(arr):\n    \"\"\"\n    O(n^2)\n    :param arr:\n    :return:\n    \"\"\"\n    # return 0\n    # TODO write me\n    return 1\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(nums: List[int]) -> int:\n    if len(nums) < 2:\n        return 0\n    if nums[0] <= nums[-1]:\n        return 0\n    if nums[0] >= nums[-1]:\n        return 1\n    return 0\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(array: List[int]) -> int:\n    \"\"\"\n    :param array: input array\n    :return: number of rotations in a circularly sorted array\n    \"\"\"\n    # brute force solution, but could also use binary search\n    min_value, max_value = array[0], array[len(array) - 1]\n    for i in range(min_value, max_value):\n        if all(j >= i for j in array):\n            return array.index(i) + 1\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(a):\n    start = 0\n    end = len(a) - 1\n    count = 0\n    while end > start:\n        while a[end] <= a[start] and end > start:\n            end -= 1\n        while a[start] <= a[end] and end > start:\n            start += 1\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    arr = sorted(arr)\n    previous = arr[0]\n    count = 0\n    for item in arr:\n        if previous > item:\n            count += 1\n        previous = item\n    return count\n\n\ndef main():\n    print(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]))\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    for i, val in enumerate(arr[1:]):\n        if val < arr[0]:\n            return i + 1\n    return 0\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = left + (right - left) / 2\n        if arr[left] <= arr[mid]:\n            left = mid + 1\n        elif arr[mid] <= arr[right]:\n            right = mid\n        else:\n            return mid - left + 1\n    return right - left + 1\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nfrom .module_2_arrays_and_strings import (\n    insert_at,\n    insert_at_recurse,\n    binary_search,\n    binary_search_recurse,\n    find_rotation_count,\n    find_rotation_count_recurse,\n    rotate,\n)\n\n\ndef test_insert_at():\n    \"\"\"\n    Write a function to insert an element at a given index in an array.\n\n    :return:\n    \"\"\"\n    assert insert_at([1, 2, 3], 1, 0) == [1, 2, 3]\n    assert insert_at([1, 2, 3], 1, 2) == [1, 2, 3, 1]\n\n\ndef test_insert_at_recurse():\n    \"\"\"\n    Write a function to insert an element at a given index in an array, using recursion.\n\n    :return:\n    \"\"\"\n    assert insert_at_recurse([1, 2, 3], 1, 0) == [1, 2, 3]\n    assert insert_at_recurse([1, 2, 3], 1, 2) == [1, 2, 3, 1]\n\n\ndef test_binary_search():\n    \"\"\"\n    Write a function to search for a value in a sorted array using binary search.\n\n    :return:\n    \"\"\"\n    assert binary_search([1, 2, 3, 4, 5], 3) == 2\n    assert binary_search([1, 2, 3, 4, 5], 6) == -1\n\n\ndef test_binary_search_recurse():\n    \"\"\"\n    Write a function to search for a value in a sorted array using binary search,\n    using recursion.\n\n    :return:\n    \"\"\"\n    assert binary_search_recurse([1, 2, 3, 4, 5], 3) == 2\n    assert binary_search_recurse([1, 2, 3, 4, 5], 6) ==", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    l, r = 0, len(arr) - 1\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[l] <= arr[mid]:\n            r = mid\n        else:\n            l = mid + 1\n    return l + 1"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    # your code here\n    return n ^ 1\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    return num ^ (num >> 1)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    number = number & ~(number-1)\n    return number\n\n# print(even_bit_toggle_number(10))\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    Given a number, toggle all the odd bits of the number.\n    :param number: Number\n    :return: Number\n    \"\"\"\n    # Your code here\n    odd_bits = number & ~(-number & 1)\n    return odd_bits\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    return n >> 1\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(number):\n    result = 0\n    if number % 2 == 0:\n        result = number + 1\n    return result\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\nimport math\n\n\ndef even_bit_toggle_number(num: int) -> int:\n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    :param num: int\n    :return: int\n    \"\"\"\n    return num ^ math.pow(2, 31 - 1)", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    odd = num & 1\n    num = num & 15\n    num = num ^ odd\n    num = num | odd\n    return num\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    return (num & 1) ^ (num & 2) ^ (num & 4) ^ (num & 8) ^ (num & 16) ^ (num & 32) ^ (num & 64) ^ (num & 128)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    result = 0\n    for bit in range(0,n):\n        if(n%2 == 0):\n            result += pow(2, bit)\n    return result\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(N,arr):\n\n    #Your code here\n    return min(arr)\n\n\n# assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\nimport unittest\ndef frequency_Of_Smallest(size,arr):\n    \"\"\"\n    write your code here\n    \"\"\"\n    min_value=arr[0]\n    min_index=0\n    for i in range(1,size):\n        if arr[i]<min_value:\n            min_value=arr[i]\n            min_index=i\n    return min_index\ndef frequency_Of_Smallest_Iterative(size,arr):\n    \"\"\"\n    write your code here\n    \"\"\"\n    min_index=0\n    min_value=arr[0]\n    for i in range(1,size):\n        if arr[i]<min_value:\n            min_index=i\n            min_value=arr[i]\n    return min_index\ndef frequency_Of_Smallest_Binary_Search(size,arr):\n    \"\"\"\n    write your code here\n    \"\"\"\n    start=0\n    end=size-1\n    while start<=end:\n        mid=(start+end)//2\n        if arr[mid]>arr[start]:\n            end=mid-1\n        else:\n            start=mid+1\n    return start\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    '''\n        Parameters\n        ----------\n        n : int\n            Number of elements in arr\n        arr : list\n            a list containing n elements\n\n        Returns\n        ----------\n        int\n            frequency of the smallest element in arr\n    '''\n    min_element = arr[0]\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < min_element:\n            count = 0\n            min_element = arr[i]\n        elif arr[i] == min_element:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n\tsmallest = arr[0]\n\tcount = 1\n\tfor i in range(1,n):\n\t\tif smallest > arr[i]:\n\t\t\tsmallest = arr[i]\n\t\t\tcount = 1\n\t\telif smallest == arr[i]:\n\t\t\tcount += 1\n\treturn count", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,A):\n    A.sort()\n    return A[0]\n\ndef frequency_Of_Smallest(n,A):\n    A.sort()\n    if len(A) == 0:\n        return None\n    f = 1\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            f = 1\n        else:\n            f += 1\n    return f\n\ndef frequency_Of_Smallest(n,A):\n    A.sort()\n    if len(A) == 0:\n        return None\n    smallest = A[0]\n    counter = 1\n    for i in range(len(A)):\n        if A[i] <= smallest:\n            counter += 1\n        else:\n            break\n    return counter\n\ndef frequency_Of_Smallest(n,A):\n    A.sort()\n    if len(A) == 0:\n        return None\n    smallest = A[0]\n    counter = 1\n    for i in range(1,len(A)):\n        if A[i] <= smallest:\n            counter += 1\n        else:\n            smallest = A[i]\n            counter = 1\n    return counter\n\ndef frequency_Of_Smallest(n,A):\n    A.sort()\n    if len(A) == 0:\n        return None\n    smallest = A[0]\n    counter = 1\n    for i in range(1,len(A)):\n        if A[i] <= smallest:\n            counter += 1\n        else:\n            smallest = A[i]\n    return counter\n\ndef frequency_Of_Smallest(n,A):\n    A.sort()\n    if len(A) == 0:\n        return None\n    smallest = A[0]\n    counter = 0\n    for i in range(1,len(A)):\n        if A[i] <= smallest:\n            counter += 1\n        else:\n            smallest = A[i]\n    return counter", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,array):\n    min_val = array[0]\n    min_freq = 1\n    for i in array:\n        if i < min_val:\n            min_val = i\n            min_freq = 1\n        elif i == min_val:\n            min_freq += 1\n    return min_freq\n\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n, arr):\n    arr = sorted(arr)\n    smallest = arr[0]\n    count = 0\n    for i in arr:\n        if i == smallest:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n, arr):\n    freq = 0\n    smallest = arr[0]\n    for i in range(0, n):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    for i in range(0, n):\n        if arr[i] == smallest:\n            freq += 1\n    return freq\n\n# def frequency_Of_Smallest(n, arr):\n#     return sum([1 for i in arr if i < min(arr)])\n\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n <= 1:\n        return 1\n    else:\n        return (n + 1) * get_perrin(n - 1)\n\n# assert get_perrin(0) == 1\n# assert get_perrin(1) == 1\n# assert get_perrin(2) == 2\n# assert get_perrin(3) == 5\n# assert get_perrin(4) == 12\n# assert get_perrin(5) == 35\n# assert get_perrin(6) == 106\n# assert get_perrin(7) == 385\n# assert get_perrin(8) == 1240\n# assert get_perrin(9) == 4211", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    return n*get_perrin(n-1)\n\ndef test_perrin():\n    assert get_perrin(1) == 1\n    assert get_perrin(2) == 2\n    assert get_perrin(3) == 6\n    assert get_perrin(4) == 24\n    assert get_perrin(5) == 120\n    assert get_perrin(6) == 720\n    assert get_perrin(7) == 5040\n    assert get_perrin(8) == 40320\n    assert get_perrin(9) == 362880\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (get_perrin(n-1) + get_perrin(n-2))\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return 1+get_perrin(n-1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n * get_perrin(n - 1)\n\ndef get_perrin(n):\n    if n <= 1:\n        return n\n    return n * get_perrin(n - 1)\n\ndef get_perrin(n):\n    if n < 2:\n        return n\n    return n * get_perrin(n-1)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    \"\"\"\n    Find the nth perrin number using recursion.\n    >>> get_perrin(5)\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n % 3 == 2:\n        return get_perrin(n - 1) * 2\n    else:\n        return get_perrin(n - 1) * 3 + 1\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    else:\n        return n * get_perrin(n-1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * get_perrin(n - 1)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(string):\n    stk = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stk.append(i)\n        elif string[i] == ']':\n            if len(stk) > 0:\n                i = stk.pop()\n            else:\n                stk.append(i)\n    return len(stk)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef min_swaps_brackets(string):\n    no_of_swaps = 0\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return -1\n            popped = stack.pop()\n            if popped != '[':\n                return -1\n            else:\n                no_of_swaps += 1\n    return no_of_swaps\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    # your code goes here\n    if string[0] != '[' or string[-1] != ']':\n        return -1\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return -1\n            stack.pop()\n    return len(stack)\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    stack = []\n    if len(s) % 2 == 1:\n        return \"Unbalanced\"\n    for i in range(len(s)):\n        if s[i] == \"[\":\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return \"Unbalanced\"\n            else:\n                j = stack.pop()\n                if s[j] == \"[\":\n                    stack.append(j)\n                    stack.append(i)\n                else:\n                    return \"Unbalanced\"\n    return len(stack)", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    # edge case\n    if string.count('[') == string.count(']'):\n        return 0\n\n    swaps = 0\n    i, j = 0, 0\n\n    while i < len(string) and j < len(string):\n\n        # brackets are unequal\n        if string[i] != string[j]:\n\n            # find the smaller bracket index\n            if string[i] == '(':\n                i += 1\n\n            # find the bigger bracket index\n            if string[j] == ')':\n                j += 1\n\n            # swaps will be equal to the index difference between the bigger and smaller brackets\n            swaps += j - i\n\n            # update the smaller bracket index to the bigger bracket index to check for the next unequal bracket\n            i = j\n\n        # brackets are equal\n        else:\n            i += 1\n            j += 1\n\n    return swaps\n\n\ndef swap_count_recursive(string):\n    # edge case\n    if string.count('[') == string.count(']'):\n        return 0\n\n    swaps = 0\n    i, j = 0, 0\n\n    while i < len(string) and j < len(string):\n\n        # brackets are unequal\n        if string[i] != string[j]:\n\n            # find the smaller bracket index\n            if string[i] == '(':\n                swaps += swap_count_recursive(string[i+1:j])\n                i += 1\n\n            # find the bigger bracket index\n            if string[j] == ')':\n                swaps += swap_count_recursive(string[i:j+1])\n                j += 1\n\n            # swaps will be equal to the index difference between the bigger and smaller brackets\n            swaps += j - i\n\n            # update the smaller bracket index to the bigger bracket index to check for the next unequal bracket\n            i = j\n\n        # brackets are equal\n        else:\n            i += 1\n            j += 1\n\n    return swaps\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    opening = [\"[\", \"{\", \"(\"]\n    closing = [\"]\", \"}\", \")\"]\n    swaps = 0\n    for i in range(len(s)):\n        if s[i] in opening:\n            j = closing.index(s[i+1])\n            swaps += abs(i - j - 1)\n    return swaps", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    output = 0\n    n = len(string)\n    stack = []\n    for i in range(n):\n        char = string[i]\n        if char == '[' or char == '{' or char == '(':\n            stack.append(char)\n        elif len(stack) > 0:\n            if stack[-1] == '(':\n                stack.pop()\n            elif stack[-1] == '[':\n                stack.pop()\n            elif stack[-1] == '{':\n                stack.pop()\n            else:\n                stack.append(char)\n                output += 1\n    if len(stack) > 0:\n        output += len(stack)\n    return output\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\nimport unittest\nfrom typing import List\n\n\ndef swap_count(s: str) -> int:\n    stack: List[str] = []\n    result: int = 0\n    for char in s:\n        if char in \"([{\":\n            stack.append(char)\n        else:\n            if not stack:\n                result += 1\n            else:\n                if char == stack.pop():\n                    pass\n                else:\n                    result += 2\n    if stack:\n        result += len(stack)\n    return result\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return 'No brackets found'\n            elif stack[-1] != '[':\n                return 'No brackets found'\n            else:\n                stack.pop()\n    return len(stack)", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    counter = 0\n    left_open = right_open = 0\n    for c in s:\n        if c == \"[\":\n            left_open += 1\n            right_open += 1\n        elif c == \"]\":\n            left_open -= 1\n            right_open -= 1\n        else:\n            print(\"Invalid character\", c)\n        if left_open < 0:\n            counter += -left_open\n        if right_open < 0:\n            counter += -right_open\n        if left_open > right_open:\n            counter += left_open - right_open\n        if left_open > 0:\n            counter += left_open\n    return counter"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex):\n    if hex[0] in ('0', '1'):\n        return \"Even\"\n    else:\n        return \"Odd\"\n\ndef even_or_odd(hex):\n    return \"Even\" if hex[0] in ('0', '1') else \"Odd\"\n\n#assert even_or_odd(\"AB3454D\") ==\"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_num):\n    \"\"\"Checks whether hexadecimal number is even or odd.\"\"\"\n\n    return \"Odd\" if hex_num[1] % 2 == 0 else \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# 0x23 Python Function to check whether the hexadecimal number is even or odd\ndef even_or_odd(number):\n    \"\"\"\n    Write a python function to check whether the hexadecimal number is even or odd.\n\n    Args:\n        number (str): hexadecimal number\n\n    Returns:\n        str: \"Even\" or \"Odd\"\n    \"\"\"\n    a = int(number[0:2],16)\n    b = int(number[2:4],16)\n    c = int(number[4:],16)\n    if (a%2==0 and b%2==0 and c%2==0):\n        return \"Even\"\n    else:\n        return \"Odd\"", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(n):\n    if n[0] in [\"A\", \"B\"]:\n        return \"Even\"\n    else:\n        return \"Odd\"", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# Write your code below and press Submit Test Cases to see if your code is right.\ndef even_or_odd(n):\n    if n[0] == \"0\" and n[1] == \"x\":\n        n = n[2:].replace(\" \", \"\")\n    else:\n        n = n.replace(\" \", \"\")\n    n = n[::-1]\n    s = 0\n    for i in range(0, len(n)):\n        s = s + int(n[i]) * (16 ** i)\n    if s % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(number):\n    if number.count('0') % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_no):\n    return \"Odd\" if len(hex_no)%2 == 0 else \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\nimport unittest\n\ndef even_or_odd(num):\n    if len(num)%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n    temp = int(num, 16)\n    if temp%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    h = hex_num.lower()\n    num = 0\n    for i in h:\n        if i.isnumeric():\n            num += int(i)\n    if num % 2 == 0:\n        return \"Even\"\n    return \"Odd\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    i = 0\n    while (n >> i) > 1:\n        i += 1\n    return (2 << i)\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    # Write your code here\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    return n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    while (n & (n - 1)) != 0:\n        n = n & (n - 1)\n    return n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    pow2 = 0\n    if n < 2:\n        return n\n    while n > pow2:\n        pow2 = pow2*2\n        pow2 = pow2 + 1\n    return pow2\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return 2**n - 1\n\n#assert highest_Power_of_2(10) == 8\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    ans = 0\n    for i in range(1,n):\n        if (n&(i)):\n            ans = i\n            break\n    return ans\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n == 1:\n        return 1\n    power = 0\n    while (n & 1 == 0):\n        n >>= 1\n        power += 1\n    return 2**(power)\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    return the highest power of 2 that is less than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        temp = n - 1\n        while temp % 2 == 0:\n            temp /= 2\n        return temp + 1", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    num = n\n    result = 0\n    while num > 1:\n        result = result + 1\n        num = num >> 1\n    return result\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n    if n == 1:\n        return 2\n    a = 1\n    b = 2\n    for i in range(n-1):\n        a, b = b, a+b\n    return b\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"\n    n = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, ", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    prev_num = 1\n    curr_num = 2\n    for _ in range(n-1):\n        prev_num, curr_num = curr_num, prev_num+curr_num\n    return curr_num\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"Return n-th Lucas number\"\"\"\n    # handle base case\n    if n == 1:\n        return 2\n    # handle recursive case\n    return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"\n    returns the nth lucas number.\n    \"\"\"\n    num = 0\n    a = 2\n    b = 1\n    for i in range(n):\n        num = a + b\n        a = b\n        b = num\n    return num\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n\n\n# -\n\nfind_lucas(10)\n\nfind_lucas(11)\n\nfind_lucas(1)\n\nfind_lucas(0)\n\nfind_lucas(99)\n\nfind_lucas(100)\n\n\n# +", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    last = 0\n    cur = 1\n    for i in range(n):\n        cur, last = last, cur + last\n    return cur\n\n# test find_lucas", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n < 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    pass\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(alist, str):\n    for i in range(len(alist)):\n        alist[i] = str + alist[i]\n    return alist\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\nimport operator\n\ndef add_string(lst, s):\n\treturn [s + i for i in lst]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, s):\n    for x in range(0, len(lst)):\n        lst[x] = s + lst[x]\n    return lst\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(l,s):\n    return [s+i for i in l]\n\ndef test_add_string():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n# test_add_string()\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(items, string):\n    return [string + item for item in items]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, temp_string):\n    new_lst = []\n    for i in lst:\n        new_lst.insert(0, temp_string.format(i))\n    return new_lst\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(li, string):\n    for i in range(len(li)):\n        li[i] = string.format(li[i])\n    return li\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(li, string):\n    for i in range(len(li)):\n        li[i] = string + li[i]\n    return li\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, string):\n    return [string.format(i) for i in lst]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(list, string):\n    list_str = []\n    for i in list:\n        list_str.append(string.format(i))\n    return list_str\n\n# assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list_of_students, list_of_locations, list_of_marks):\n\tstudent_dict = {}\n\tfor i,v in enumerate(list_of_students):\n\t\tstudent_dict[v] = {}\n\t\tfor j,v in enumerate(list_of_locations):\n\t\t\tstudent_dict[v][list_of_students[j]] = list_of_marks[i]\n\treturn student_dict\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list_1, list_2, list_3):\n    return_list = []\n    for i, j in zip(list_1, list_2):\n        return_list.append({i: {j: list_3[i*2]}})\n    return return_list\n\nconvert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n\n# +", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(subList, mainList, score):\n    dictionary = {}\n    for sub in subList:\n        subDict = {}\n        for main in mainList:\n            subDict[main] = score[subList.index(sub)]\n        dictionary[sub] = subDict\n    return dictionary\n\n\n# assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(student_list, teacher_list, score_list):\n    return dict(zip(student_list, dict(zip(teacher_list, score_list))))\n\n\nstudent_list = [\"S001\", \"S002\", \"S003\", \"S004\"]\nteacher_list = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nscore_list = [85, 98, 89, 92]\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(names, cities, grades):\n    zip_list = zip(names, cities, grades)\n    return {a: {b:c for b,c in zip_list if a==b} for a in names}\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(surnames,addresses,marks):\n    list_of_dict = []\n    for i in range(len(surnames)):\n        dicti = {surnames[i]:{addresses[i]:marks[i]}}\n        list_of_dict.append(dicti)\n    return list_of_dict\n#assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(key_list, value_list, value_list_dict):\n    \"\"\"\n    Args:\n        key_list (list) - Keys of the dictionary.\n        value_list (list) - Values of the dictionary.\n        value_list_dict (dict) - Dictionary containing values of the dictionary.\n    Returns:\n        dictionary\n    \"\"\"\n    dictionary = dict()\n    for i,value in enumerate(key_list):\n        dictionary[value] = value_list_dict[value_list[i]]\n    return dictionary\n\n\ndef convert_list_dictionary(key_list, value_list, value_list_dict):\n    \"\"\"\n    Args:\n        key_list (list) - Keys of the dictionary.\n        value_list (list) - Values of the dictionary.\n        value_list_dict (dict) - Dictionary containing values of the dictionary.\n    Returns:\n        dictionary\n    \"\"\"\n    dictionary = dict()\n    for i, value in enumerate(key_list):\n        dictionary[value] = value_list_dict[value_list[i]]\n    return dictionary\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list_of_student_id,list_of_teacher_name,list_of_marks):\n    list_of_students_dict={}\n    for student_id,teacher_name,mark in zip(list_of_student_id,list_of_teacher_name,list_of_marks):\n        list_of_students_dict[student_id]={teacher_name:mark}\n    return list_of_students_dict\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(sports, venues, scores):\n    sport_dict = {}\n    for sport in sports:\n        venue_dict = {}\n        for venue in venues:\n            venue_dict[venue] = scores[sports.index(sport)]\n        sport_dict[sport] = venue_dict\n    return sport_dict\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list_a, list_b, list_c):\n    dict_out = {}\n    list_of_tuples = []\n    for i in range(0, len(list_a)):\n        dict_out[list_a[i]] = {}\n        dict_out[list_a[i]][list_b[i]] = list_c[i]\n    return dict_out\n\n\n# assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 6\n    else:\n        return get_max_sum(n/5) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/2)\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\nimport math\nimport numpy as np\n\ndef get_max_sum(n: int) -> int:\n    x = 1\n    while x < n:\n        x = (x + math.floor(x/2) + math.floor(x/3) + math.floor(x/4) + math.floor(x/5))/5\n        x = math.floor(x)\n    return x\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    sum = 0\n    for i in range(n):\n        sum = max(sum, i + (i / 2) + (i / 3) + (i / 4) + (i / 5))\n    return sum\n\ndef get_max_sum(n):\n    n *= 5\n    return sum(range(1, n+1)) // 5\n\ndef get_max_sum(n):\n    return sum(range(n + 1)) - sum(range(n // 5, n + 1, n // 5))\n\ndef get_max_sum(n):\n    return sum(range(1, n+1))//5\n\ndef get_max_sum(n):\n    return sum(range(1, n+1))//5 + sum(range(1, n//5+1))//5\n\ndef get_max_sum(n):\n    return sum(range(1, n+1))//5 + sum(range(1, n//5+1))//5 + sum(range(1, n//25+1))//5 + sum(range(1, n//36+1))//5 + sum(range(1, n//49+1))//5\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return max(get_max_sum(n // 2), get_max_sum(n // 3), get_max_sum(n // 4), get_max_sum(n // 5)) + n\n    return max(get_max_sum(n - 1), get_max_sum(n // 2), get_max_sum(n // 3), get_max_sum(n // 4), get_max_sum(n // 5)) + n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 30\n    if n == 9:\n        return 40\n    if n == 10:\n        return 52\n    if n == 11:\n        return 67\n    if n == 12:\n        return 84\n    if n == 13:\n        return 104\n    if n == 14:\n        return 127\n    if n == 15:\n        return 153\n    if n == 16:\n        return 182\n    if n == 17:\n        return 214\n    if n == 18:\n        return 250\n    if n == 19:\n        return 290\n    if n == 20:\n        return 334\n    if n == 21:\n        return 383\n    if n == 22:\n        return 437\n    if n == 23:\n        return 496\n    if n == 24:\n        return 560\n    if n == 25:\n        return 629\n    if n == 26:\n        return 704\n    if n == 27:\n        return 785\n    if n == 28:\n        return 872\n    if n == 29:\n        return 965\n    if n == 30:\n        return 1065\n    if n == 31:\n        return 1171\n    if n == 32:", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    \"\"\"\n    :param n: an integer\n    :return: the maximum sum possible\n    \"\"\"\n    while n != 1:\n        n = max(n // 2 + n // 3 + n // 4 + n // 5, n)\n    return n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n: int):\n    max_sum = 0\n    while n > 1:\n        max_sum = max(max_sum, n, (n/2) + (n/3) + (n/4) + (n/5))\n        n = n//5\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    if n in mem:\n        return mem[n]\n    if n == 1:\n        mem[1] = 1\n        return mem[1]\n    else:\n        max_sum = 0\n        max_sum_list = [int(n/2), int(n/3), int(n/4), int(n/5)]\n        for i in max_sum_list:\n            if i in mem:\n                max_sum += mem[i]\n        mem[n] = max_sum\n        return mem[n]\n\n# def get_max_sum(n):\n#     if n in mem:\n#         return mem[n]\n#     if n == 1:\n#         mem[1] = 1\n#         return mem[1]\n#     else:\n#         max_sum = 0\n#         max_sum_list = [int(n/2), int(n/3), int(n/4), int(n/5)]\n#         for i in max_sum_list:\n#             if i in mem:\n#                 max_sum += get_max_sum(i)\n#         mem[n] = max_sum\n#         return mem[n]", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nfrom math import ceil\n\n\ndef get_max_sum(n):\n    return max(\n        [\n            n,\n            get_max_sum(ceil(n / 2)),\n            get_max_sum(ceil(n / 3)),\n            get_max_sum(ceil(n / 4)),\n            get_max_sum(ceil(n / 5)),\n        ]\n    )\n\n\ndef get_max_sum_recur(n, f, memo):\n    if n in memo:\n        return memo[n]\n\n    f1 = max(\n        [\n            n,\n            get_max_sum_recur(ceil(n / 2), f, memo),\n            get_max_sum_recur(ceil(n / 3), f, memo),\n            get_max_sum_recur(ceil(n / 4), f, memo),\n            get_max_sum_recur(ceil(n / 5), f, memo),\n        ]\n    )\n    memo[n] = f(n, f1)\n    return memo[n]\n\n\ndef get_max_sum_memo(n, memo):\n    def f(n, f1):\n        return n if n == f1 else max(f(n, f1), n)\n\n    return get_max_sum_recur(n, f, memo)\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    if n <= 2:\n        return 1\n    return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(list_of_lists):\n    max_length = 0\n    max_list = None\n    for i in range(len(list_of_lists)):\n        if len(list_of_lists[i]) > max_length:\n            max_length = len(list_of_lists[i])\n            max_list = list_of_lists[i]\n\n    return (max_length, max_list)\n\ndef test_max_length_list():\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(list_of_lists):\n    assert type(list_of_lists) == list\n    assert type(list_of_lists[0]) == list\n    max_len = 0\n    max_len_list = []\n    for lst in list_of_lists:\n        len_ = len(lst)\n        if max_len < len_:\n            max_len = len_\n            max_len_list = lst\n    return (max_len, max_len_list)\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    # your code here\n    max_length = 0\n    result = []\n    for num_list in lst:\n        if max_length < len(num_list):\n            max_length = len(num_list)\n            result = num_list\n    return max_length, result\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    max_length = 0\n    max_list = []\n    for li in lst:\n        if len(li) > max_length:\n            max_length = len(li)\n            max_list = li\n    return max_length, max_list\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(ls):\n    return (max(map(lambda x: len(x), ls)), max(ls))\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(L):\n    max_length = 0\n    result = []\n    for sublist in L:\n        if len(sublist)>max_length:\n            max_length = len(sublist)\n            result = sublist\n    return (max_length, result)\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    l = []\n    for i in lst:\n        l.append(len(i))\n    return l.index(max(l)), max(l)\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    max_length = 0\n    max_list = lst[0]\n    for i in lst:\n        if len(i) > max_length:\n            max_list = i\n            max_length = len(i)\n    return max_length, max_list\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n# write your code here\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(x):\n    return max(map(lambda y: len(y), x))\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    d = {}\n    for el in tup:\n        if d.get(el) == True:\n            return False\n        else:\n            d[el] = True\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    # Count the number of unique items in the tuple\n    uniq_count = len(set(tup))\n    # Compare the number of unique items with the length of the tuple\n    return uniq_count == len(tup)\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n# I could have used a set to see if the tuple is in it\n# but I wanted to write code that someone might come across in the future and can understand\ndef check_distinct(tuple):\n    for i in range(0, len(tuple)):\n        for j in range(i + 1, len(tuple)):\n            if tuple[i] == tuple[j]:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tuple):\n    if len(set(tuple)) == len(tuple):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\nimport unittest\n\ndef check_distinct(tup):\n    if len(tup) <= 1:\n        return True\n    seen = {}\n    for x in tup:\n        if x in seen:\n            return False\n        seen[x] = True\n    return True\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    \"\"\"\n    Checks if the elements of a tuple are distinct\n    \"\"\"\n    s = set(tup)\n    return len(s) == len(tup)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    l = []\n    for i in tup:\n        if i in l:\n            return False\n        l.append(i)\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n# The input is a tuple, we check if it contains duplicate elements\ndef check_distinct(tup):\n    set_tup = set(tup)\n    return len(set_tup) == len(tup)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(lst):\n    return len(set(lst)) == len(lst)\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                string = string[0:i]+string[j+1:]\n                return first_non_repeating_character(string)\n        if string[i] not in string[i+1:]:\n            return string[i]\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    result = \"\"\n    for character in string:\n        if character not in result:\n            result += character\n            return character\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    if len(s) == 1:\n        return s\n    if s[0] not in s[1:]:\n        return s[0]\n    return first_non_repeating_character(s[1:])\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n# def first_non_repeating_character(str):\n#     # your code here\n#     if(len(str) > 0):\n#         for i in str:\n#             if(str.count(i) == 1):\n#                 return i\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    \"\"\"\n    :param s: A string\n    :return: A string.\n    \"\"\"\n    for c in s:\n        if s.count(c) > 1:\n            return None\n        else:\n            return c\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    result = None\n    seen = set()\n    for char in string:\n        if char in seen:\n            result = None\n            break\n        else:\n            seen.add(char)\n    return result\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(str):\n    str = str.lower()\n    dict_ = dict()\n    for char in str:\n        dict_[char] = dict_.get(char, 0) + 1\n    for char in str:\n        if dict_[char] == 1:\n            return char\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    You are given a string, where each character is unique.\n    Write a function to find the first non-repeated character in a string.\n\n    >>> first_non_repeating_character(\"abcabc\")\n    >>> assert first_non_repeating_character(\"abcabc\") == None\n    >>> first_non_repeating_character(\"ab\")\n    >>> assert first_non_repeating_character(\"ab\") == \"a\"\n    >>> first_non_repeating_character(\"abcdefgh\")\n    >>> assert first_non_repeating_character(\"abcdefgh\") == \"a\"\n    \"\"\"\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    unique_chars = set(string)\n    for char in unique_chars:\n        if string.count(char) > 1:\n            return char\n"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if string.startswith(string[-1]) and string.endswith(string[0]):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# Write your code here\n\n\n# Write your code here", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    return \"Valid\" if re.match(\"^\\w\\1\\1\\1\\w$\", string) else \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nimport re\n\ndef check_char(string):\n    return \"Valid\" if re.match(r\"^.{0,1}.*{0,1}$\".format(re.escape(string[0])), string) and re.match(r\"^.{0,1}.*{0,1}$\".format(re.escape(string[-1])), string) else \"Not Valid\"\n\n#assert check_char(\"abba\") == \"Valid\"\n#assert check_char(\"abca\") == \"Not Valid\"\n#assert check_char(\"abbc\") == \"Not Valid\"\n#assert check_char(\"ab\") == \"Valid\"\n#assert check_char(\"a\") == \"Valid\"\n#assert check_char(\"\") == \"Valid\"\n#assert check_char(\"123\") == \"Not Valid\"\n#assert check_char(\"b\") == \"Valid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(word):\n    if re.match(r\"^(.)\\1$\", word) is not None:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# \"\"\"\n# Write a function to check whether the given string is a palindrome or not using regex.\n# assert check_palindrome(\"abba\") == \"Valid\"\n# assert check_palindrome(\"abbaad\") == \"Invalid\"\n# assert check_palindrome(\"abbaed\") == \"Valid\"\n# assert check_palindrome(\"abba\") == \"Valid\"\n# assert check_palindrome(\"abcd\") == \"Invalid\"\n# assert check_palindrome(\"acb\") == \"Invalid\"\n# assert check_palindrome(\"acbba\") == \"Valid\"\n# assert check_palindrome(\"ab\") == \"Invalid\"\n# \"\"\"\ndef check_palindrome(word):\n    if re.match(r\"^(\\w+)\\1$\", word):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# \"\"\"\n# Write a function to check whether the given string is an anagram or not using regex.\n# assert check_anagram(\"god\") == \"Valid\"\n# assert check_anagram(\"dog\") == \"Invalid\"\n# assert check_anagram(\"Dog\") == \"Invalid\"\n# assert check_anagram(\"gOd\") == \"Valid\"\n# assert check_anagram(\"doG\") == \"Invalid\"\n# assert check_anagram(\"god\") == \"Valid\"\n# assert check_anagram(\"gOd\") == \"Valid\"\n# assert check_anagram(\"dog\") == \"Invalid\"\n# assert check_anagram(\"dog\") == \"Invalid\"\n# assert check_anagram(\"dog\") == \"Invalid\"\n# assert check_anagram(\"dog\") == \"Invalid\"\n# assert check_anagram(\"dog\") == \"Invalid\"\n# assert check_anagram(\"dog\") == \"Invalid\"\n# assert check_anagram(\"dog\") == \"Invalid\"\n# assert check_anagram(\"god\") == \"Valid\"\n# assert check_anagram(\"dog\") == \"Invalid", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(s):\n    return \"Valid\" if re.match(\"^([a-zA-Z])\\1$|(\\1)$\", s) else \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    patt = r'\\b.*\\b'\n    if re.search(patt, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(x):\n    regex = \"^([a-z])$([a-z])$\"\n    match = re.match(regex, x)\n    if match is not None:\n        return \"Valid\"\n    return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    if re.search(r'^(.).*(.)\\1$', string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\n\ndef check_char(string):\n    \"\"\"\n    Args:\n        string (str): a string\n    \n    Returns:\n        str: \"Valid\" if the string starts and ends with the same character else \"Invalid\"\n    \"\"\"\n    pattern = re.compile(r\"^(\\w)(\\1)$\")\n    match = pattern.match(string)\n    if match:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a<b and a<c:\n        if b<c:\n            return a\n    elif b<a and b<c:\n        if a<c:\n            return b\n    elif c<a and c<b:\n        if a<b:\n            return c\n    else:\n        return None\n\n#3", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x,y,z):\n    if (x<y and x<z):\n        return x\n    elif (y<z and y<x):\n        return y\n    elif (z<x and z<y):\n        return z\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\nimport random\n\ndef median_numbers(n1,n2,n3):\n    num= [n1,n2,n3]\n    random.shuffle(num)\n    if len(num) % 2 == 0:\n        return (num[len(num)//2-1] + num[len(num)//2])/2\n    else:\n        return num[len(num)//2]", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(num1, num2, num3):\n    if (num1 > num2) and (num1 > num3):\n        return num1\n    elif (num2 > num1) and (num2 > num3):\n        return num2\n    else:\n        return num3\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a, b, c):\n    list = [a,b,c]\n    list.sort()\n    # if there is an odd number of numbers, the middle value is the median\n    if len(list) % 2 != 0:\n        return list[len(list)//2]\n    else:\n        # if there is an even number of numbers, the average of the middle two numbers is the median\n        return (list[len(list)//2-1] + list[len(list)//2]) / 2.0\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n  if a>b and a>c:\n    return a\n  elif b>a and b>c:\n    return b\n  else:\n    return c\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a, b, c):\n    \"\"\"\n    a, b, c: three numbers to be compared\n    return: the median of three numbers\n    \"\"\"\n    l=[a,b,c]\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2-1] + l[len(l) // 2]) / 2", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b>c:\n        return b\n    elif b>c>a:\n        return c\n    elif c>a>b:\n        return a\n    else:\n        return (a+b+c)/3\n\n\n# -\n\nmedian_numbers(25,55,65)\n\nmedian_numbers(2,3,4)\n\nmedian_numbers(1,2,2)\n\nmedian_numbers(1,1,1)\n\nmedian_numbers(2,2,2)\n\n\n# +", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if (a <= b) and (a <= c):\n        return a\n    elif (b <= c) and (b <= a):\n        return b\n    elif (c <= a) and (c <= b):\n        return c\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(n1, n2, n3):\n    # Write your code here.\n    num_list=[n1,n2,n3]\n    num_list.sort()\n    if len(num_list) % 2 == 1:\n        return num_list[len(num_list)//2]\n    else:\n        return (num_list[len(num_list)//2-1] + num_list[len(num_list)//2]) / 2.0\n    \nmedian_numbers(25,55,65)\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    return sum(map(lambda x: sum(map(int,list(str(x)))),numbers))", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    res = 0\n    for i in numbers:\n        res += sum([int(x) for x in str(i)])\n    return res\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    return sum(map(lambda x: sum(map(int, list(str(x)))), numbers))\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(l):\n    return sum(map(int,str(i)))\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(num_list):\n    return [sum(map(int, str(n))) for n in num_list]", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\nfrom unittest.mock import patch\nimport pytest\nfrom solution import sum_of_digits\n\n\ndef test_sum_of_digits_1():\n    assert sum_of_digits([10, 2, 56]) == 14\n\n\ndef test_sum_of_digits_2():\n    assert sum_of_digits([2, 9, 45, 89, 76]) == 23\n\n\ndef test_sum_of_digits_3():\n    assert sum_of_digits([101, 91, 4, 10, 4]) == 47\n\n\ndef test_sum_of_digits_4():\n    assert sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n\n\ndef test_sum_of_digits_5():\n    assert sum_of_digits([0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n\n\ndef test_sum_of_digits_6():\n    assert sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n\n\ndef test_sum_of_digits_7():\n    assert sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 45\n\n\n@pytest.mark.parametrize(\"data,expected\", [\n    ([10, 2, 56], 14),\n    ([2, 9, 45, 89, 76], 23),\n    ([101, 91, 4, 10, 4], 47),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9], 45),\n    ([0, 0, 0, 0, 0", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    return sum([int(n) for n in nums])\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(l):\n    s = 0\n    for i in l:\n        s += sum([int(x) for x in str(i)])\n    return s\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(number_list):\n    \"\"\"\n    Args:\n        number_list: a list of integers\n    Returns:\n        sum_of_digits: a list of integers representing the sum of digits\n    Raises:\n        TypeError: if the input argument is not a list\n    \"\"\"\n    if not isinstance(number_list, list):\n        raise TypeError('input argument must be a list')\n    sum_of_digits = []\n    for num in number_list:\n        sum_of_digits.append(sum(map(int, list(str(num)))))\n    return sum_of_digits\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    \"\"\"\n    sum_of_digits takes a list of numbers and sums the digits of each\n    number in the list.\n    \"\"\"\n    return sum([sum_digits(num) for num in numbers])\n\ndef sum_digits(num):\n    \"\"\"\n    sum_digits takes an integer and sums its digits.\n    \"\"\"\n    return sum(int(digit) for digit in str(num))\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(x, y):\n    new_x = []\n    new_y = []\n    for i in range(len(x)):\n        new_x.append(x[i] ^ y[i])\n        new_y.append(x[i] ^ y[i])\n    return (new_x, new_y)\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(t1, t2):\n    return tuple(bin(x^y).replace(\"0b\", \"\").zfill(3) for x,y in zip(t1, t2))\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n# NO SOLUTION\n\n\ndef bitwise_xor(tup1, tup2):\n    return tuple(i ^ j for i, j in zip(tup1, tup2))\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(a, b):\n    return tuple(x ^ y for x, y in zip(a, b))\n\n# # Problem 12\n#\n# A simplistic phone directory is a list of names and numbers. Write a function to read in a phone directory, and then:\n#\n# 1. Return a string that says all the people in the phone directory.\n# 2. Return a list of all the names in the phone directory.\n# 3. Return a list of all the numbers in the phone directory.\n# 4. Return the total number of names in the phone directory.\n# 5. Return the total number of numbers in the phone directory.\n# 6. Return the name and number of the person whose number is the largest in the phone directory.\n# 7. Return a list of all the entries in the phone directory that contain a name that starts with the letter 'J'.\n# 8. Return a list of all the entries in the phone directory that contain a name that ends with the letter 'a'.\n# 9. Return the first person in the phone directory whose number is larger than 400.\n# 10. Return the last person in the phone directory.\n# 11. Return the second largest number in the phone directory.\n# 12. Return the largest number in the phone directory.\n# 13. Return the second smallest number in the phone directory.\n# 14. Return the smallest number in the phone directory.\n# 15. Return the second person in the phone directory whose number is larger than 400.\n#\n# assert list_phone_directory('people.txt') == 'Jim: 408-555-1234\\nTom: 408-555-1235\\nJohn: 408-555-1236\\nKate: 408-555-1237'\n#\n#", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(t1, t2):\n\treturn tuple(map(lambda x: x ^ y, zip(t1, t2)))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(t1, t2):\n    result = [0]*len(t1)\n    for i in range(len(t1)):\n        result[i] = t1[i] ^ t2[i]\n    return tuple(result)", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tup1, tup2):\n    new_tup = []\n    for i in range(len(tup1)):\n        new_tup.append(tup1[i] ^ tup2[i])\n    return tuple(new_tup)", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tuple_1, tuple_2):\n    return tuple_1[0] ^ tuple_2[0], tuple_1[1] ^ tuple_2[1], tuple_1[2] ^ tuple_2[2], tuple_1[3] ^ tuple_2[3]\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(x, y):\n    # your code here\n    return x ^ y\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(t1, t2):\n    x = 0\n    for i in range(len(t1)):\n        x = x ^ t1[i]\n        x = x ^ t2[i]\n    return x\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list_order):\n    # use set to remove duplicate elements\n    result = set()\n    for i in list_order:\n        result.add(tuple(i))\n    return len(result)\n\n#assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (2, 1)] ) == 3", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(data):\n    freq = dict()\n    for item in data:\n        key = str(item)\n        if key not in freq:\n            freq[key] = 0\n        freq[key] += 1\n    return len(freq)", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\nfrom collections import defaultdict\ndef extract_freq(list):\n    # Write your code here\n    dic = defaultdict(int)\n    for item in list:\n        dic[item] += 1\n    return len(list) - len(dic) + len(dic.keys())\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(l):\n    h = {}\n    for v in l:\n        #print(v)\n        if v in h:\n            h[v] += 1\n        else:\n            h[v] = 1\n    return h\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list):\n    \"\"\"\n    :param list: List of tuples\n    :return: int: frequency of unique tuples in the given list order irrespective.\n    \"\"\"\n    unique_list = [list[0]]\n    for i in range(1, len(list)):\n        if list[i] != unique_list[-1]:\n            unique_list.append(list[i])\n    return len(unique_list)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(alist):\n    pass", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(tup_list):\n    d = {}\n    for x in tup_list:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    return len(d)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(arr):\n    freq = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                if arr[i] not in arr[j]:\n                    freq += 1\n    return freq\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: frequency of unique tuples\n    \"\"\"\n    frequency = 0\n    temp_list = list()\n    for item in list_of_tuples:\n        if item not in temp_list:\n            temp_list.append(item)\n            frequency += 1\n    return frequency\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(alist):\n    # your code here\n    return len(set([tuple(sorted(x)) for x in alist]))\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(a, b):\n    assert isinstance(a, tuple) and isinstance(b, tuple)\n    if isinstance(a[0], tuple) and isinstance(b[0], tuple):\n        result = list()\n        for x, y in zip(a[0], b[0]):\n            result.append(add_nested_tuples((x, y), (a[1], b[1])))\n        return tuple(result)\n    elif isinstance(a[0], tuple) and isinstance(b[0], int):\n        return a\n    elif isinstance(a[0], int) and isinstance(b[0], tuple):\n        return b\n    else:\n        return (a[0] + b[0], a[1] + b[1])\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    new_list = []\n    for i in range(len(t1)):\n        new_list.append((t1[i][0] + t2[i][0], t1[i][1] + t2[i][1]))\n    return new_list\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tup1, tup2):\n    assert type(tup1) == type(tup2) == tuple, \"Not tuples\"\n    assert type(tup1[0]) == type(tup2[0]) == tuple, \"Not tuples\"\n    assert len(tup1[0]) == len(tup2[0]), \"Not tuples\"\n    return tuple(tuple(x + y for x, y in zip(tup1[i], tup2[i])) for i in range(len(tup1)))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    assert len(t1) == len(t2), 'Cannot add tuples of different length.'\n    if type(t1[0]) is tuple:\n        return tuple((add_nested_tuples(t1[i], t2[i]) for i in range(len(t1))))\n    return tuple(x + y for x, y in zip(t1, t2))", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    t3 = []\n    for i in range(len(t1)):\n        a1 = t1[i]\n        a2 = t2[i]\n        a3 = (a1[0]+a2[0], a1[1]+a2[1])\n        t3.append(a3)\n    return tuple(t3)\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    t1_list = list(t1)\n    t2_list = list(t2)\n\n    assert len(t1_list) == len(t2_list)\n\n    for i in range(len(t1_list)):\n        t1_list[i] = tuple(map(lambda x, y: x + y, t1_list[i], t2_list[i]))\n\n    return tuple(t1_list)\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    return tuple([i1 + i2 for i1, i2 in zip(t1, t2)])\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    t = []\n    for i in range(len(t1)):\n        t.append((t1[i][0] + t2[i][0], t1[i][1] + t2[i][1]))\n    return t\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    return tuple([sum(tup) for tup in zip(t1, t2)])\n\n#\n# Testing Code\n#", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tup1, tup2):\n    new_tup = []\n    for i in range(len(tup1)):\n        new_tup.append((tup1[i][0] + tup2[i][0], tup1[i][1] + tup2[i][1]))\n    return new_tup\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, r, p):\n    if n==r==0:\n        return 1\n    elif n==0 or r==0:\n        return 0\n    else:\n        return ncr_modp(n-1, r, p) % p * ncr_modp(n-1, r-1, p) % p % p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfrom functools import reduce\n\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Calculate ncr mod p.\n    :param n: numerator\n    :param r: denominator\n    :param p: modulus\n    :return: ncr mod p\n    \"\"\"\n    return reduce(lambda x, y: x * y % p, map(lambda x: p ** x, range(r, n + 1 - r)))\n\n\ndef ncr(n, r):\n    \"\"\"\n    Calculate ncr.\n    :param n: numerator\n    :param r: denominator\n    :return: ncr\n    \"\"\"\n    return reduce(lambda x, y: x * y, map(lambda x: 1, range(r, n + 1 - r)))\n\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    # YOUR CODE HERE\n    pass\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfrom fractions import gcd\n\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of ncr%p\n    :param n: number of combinations\n    :param r: number of repetitions\n    :param p: modulus\n    :return: value of ncr%p\n    \"\"\"\n    if n < r:\n        return 0\n    n_fact = pow(n, p - 2, p)\n    r_fact = pow(r, p - 2, p)\n    k = 1\n    for i in range(r):\n        k *= (n - i)\n        k %= p\n    k *= pow(n, r, p)\n    k %= p\n    k *= pow(n_fact, r_fact, p)\n    k %= p\n    return k\n\n\ndef test():\n    assert ncr_modp(10, 2, 13) == 6\n\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, r, p):\n    if (n < r) or (r < 0):\n        return 0\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n        return fact * pow(r, n - r, p) % p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    ncr = ncr_modp_rec(n,r,p,ncr_modp_base)\n    return ncr % p\n\ndef ncr_modp_rec(n,r,p,fn_base):\n    if n == 0 or r == 0:\n        return 1\n    else:\n        ncr = (ncr_modp_rec(n-1,r,p,fn_base) * fn_base(n-1,r,p)) % p\n        ncr = (ncr_modp_rec(n-1,r-1,p,fn_base) * fn_base(n,r-1,p)) % p\n        return ncr % p\n\ndef ncr_modp_base(n,r,p):\n    return (n * (n-1) * (n-2) * ...) % p", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, r, p):\n    res = 1\n    for i in range(r):\n        res = (res * (n-i)) % p\n    return res\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    \"\"\"\n    ncr_modp(n, r, p) computes the value of ncr (n choose r) modulo p.\n    \"\"\"\n    res = 1\n    for k in range(1, r + 1):\n        res = (res * (n - k + 1)) % p\n    return res\n\ndef ncr_modp_fast(n, r, p):\n    \"\"\"\n    ncr_modp_fast(n, r, p) computes the value of ncr (n choose r) modulo p.\n    \"\"\"\n    from sympy.ntheory.modular import binomial\n    res = 1\n    for k in range(r):\n        res = (res * (n - k + 1)) % p\n    res = binomial(n, r) % p\n    return res\n\ndef test_ncr_modp(n=10, r=2, p=13):\n    \"\"\" Test ncr_modp. \"\"\"\n    assert ncr_modp(n, r, p) == ncr_modp_fast(n, r, p)\n\ndef ncr(n, r):\n    \"\"\"\n    ncr(n, r) computes the value of ncr (n choose r).\n    \"\"\"\n    if r > n:\n        return 0\n    if r == 0:\n        return 1\n    if r == 1:\n        return n\n    res = 1\n    for k in range(1, r):\n        res = (res * (n - k + 1)) / k\n    return res\n\ndef ncr_fast(n, r):\n    \"\"\"\n    ncr_fast(n, r) computes the value of ncr (n choose r).\n    \"\"\"\n    from sympy.ntheory.binomial import binomial\n    if r > n:\n        return 0\n    if r == 0:\n        return 1\n    if r == 1:\n        return n\n    res = binomial(n, r)\n    return res\n\ndef test_ncr_fast(n=10, r=2):\n    \"\"\" Test ncr_fast. \"\"\"\n    assert n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, r, p):\n    return (mult_modp(r, r, p) * mult_modp(n - r, n - r, p)) % p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    \"\"\"\n    \"\"\"\n    return ncr(n,r)%p\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\nimport os\nimport sys\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_url(url):\n    if url.startswith(\"http://\") or url.startswith(\"https://\"):\n        return True\n    return False\n\n#print(is_valid_url('https://www.google.com'))", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_url(url):\n    if not isinstance(url, str):\n        raise TypeError(\"url must be a string\")\n    else:\n        return re.match(r\"https?://(\\w+\\.)?(\\w+)(\\.\\w+)*(/.*)?\", url) != None\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    if re.match(r'https?://\\w+\\.[a-z]+/', url):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    if re.match('^(?:http|ftp)s?://'  # http:// or https://\n                r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n                r'localhost|'  # localhost...\n                r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n                r'(?::\\d+)?'  # optional port\n                r'(?:/?|[/?]\\S+)$', url):\n        return True\n    else:\n        return False\n\n#assert is_valid_URL(\"https://www.google.com\") == True\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    pattern = re.compile(r'^(http|ftp)s?://'  # http:// or https://\n                        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  #domain...\n                        r'localhost|'  #localhost...\n                        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n                        r'(?::\\d+)?'  # optional port\n                        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return pattern.match(url) is not None\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n    return re.match(r'https?:\\/\\/[a-zA-Z0-9.]*', url) is not None\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\ndef is_valid_URL(url):\n    if re.match(r'^[a-z]+://[a-z0-9._-]+$', url):\n        return True\n    return False", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    # your code here\n    if re.match('^(http|https)://', url):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a < b:\n        return a\n    return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x, y):\n    return min(x, y)\n\n#Test case 1", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x, y):\n    \"\"\"\n    :param x: int\n    :param y: int\n    :return: int\n    \"\"\"\n    if x < y:\n        return x\n    else:\n        return y\n\n\ndef minimum(x, y):\n    \"\"\"\n    :param x: int\n    :param y: int\n    :return: int\n    \"\"\"\n    return (x if x < y else y)\n\n\ndef minimum(x, y):\n    \"\"\"\n    :param x: int\n    :param y: int\n    :return: int\n    \"\"\"\n    return min(x, y)", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    \"\"\"\n    Python function to find the minimum of two numbers.\n    \"\"\"\n    return min(a, b)\n\ndef test_minimum():\n    assert minimum(1,2) == 1\n    assert minimum(3,4) == 3", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a > b:\n        return b\n    else:\n        return a\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x,y):\n    if x<y:\n        return x\n    else:\n        return y", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a < b:\n        return a\n    return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(num1,num2):\n    if num1<num2:\n        return num1\n    return num2\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x, y):\n    \"\"\"\n    Parameters\n    ----------\n    x : int\n        The first number\n    y : int\n        The second number\n\n    Returns\n    -------\n    int\n        The minimum of x and y\n    \"\"\"\n    if x < y:\n        return x\n    else:\n        return y\n\n# Tests", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    if a < b:\n        return a\n    return b\n\ndef minimum2(a, b):\n    return a if a < b else b"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n\ttuplex_index = tuplex.index(element)\n\treturn tuplex_index\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuplex, element):\n    \"\"\"\n    Takes in a tuple and an element.\n    Returns True if the element is in the tuple and False if it's not.\n    \"\"\"\n    for e in tuplex:\n        if e == element:\n            return True\n    return False\n    \n\n\n# +", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, element):\n    return element in tup\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, search):\n    \"\"\"\n    Takes in a tuple and a search value and returns a boolean\n    indicating if the search value is in the tuple.\n\n    >>> assert check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r') == True\n    \"\"\"\n    # Your code here\n    # Note that tup[index] is a tuple itself.\n    if search in tup:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, val):\n    \"\"\"\n    check_tuplex(tup, val)\n\n    Return True if val is in the tuple tup.\n    \"\"\"\n    return val in tup\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,element):\n    if element in tup:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n    # check if the element is in the tuple\n    # return True/False\n    return element in tuplex\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, value):\n\treturn value in tup", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, element):\n    if element in tup:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,e):\n    return e in tup\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n\n# Test Cases", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(number):\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\n# Test Case 1\n# Output: Even Parity\n\n# Test Case 2\n# Output: Odd Parity\n\n# Test Case 3\n# Output: Even Parity\n\n\n# Solution\n\ndef find_Parity(n):\n    if n%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if (num % 2) == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n    ", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    return \"Odd Parity\"\n\ndef check_parity(x):\n    result = find_Parity(x)\n    if result == \"Even Parity\":\n        return \"Even\"\n    return \"Odd\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(number):\n    if number % 2 == 0:\n        return 'Even Parity'\n    else:\n        return 'Odd Parity'", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\n# # Write your solution below:\n\n\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(n):\n    if n%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(n):\n    \"\"\"\n    INPUT: n, an integer\n    RETURN: string, \"Even Parity\" if n is even or \"Odd Parity\" if n is odd\n    \"\"\"\n    if n%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\ndef find_Parity(n):\n    if n%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    num_copy = list(str(num))\n    num_copy.sort()\n    return int(''.join(num_copy))\n\n# print(rearrange_bigger(12))", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\n# from functools import reduce\n#\n# def rearrange_bigger(n):\n#     if n < 10:\n#         return n+1\n#     else:\n#         new_num = reduce(lambda x, y: str(x) + str(y), reversed(str(n)))\n#         return int(new_num)\n\ndef rearrange_bigger(n):\n    new_num = []\n    while n >= 10:\n        new_num.append(n%10)\n        n = n//10\n    new_num.append(n)\n    new_num.reverse()\n    new_num = reduce(lambda x,y: x*10+y, new_num)\n    return new_num\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    digits = list(str(num))\n    digits.sort(reverse=True)\n    digits = [int(x) for x in digits]\n    return int(''.join(map(str, digits)))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    for i in range(len(str(n))):\n        if str(n)[i] == str(n)[i+1]:\n            if str(n)[i] == '0':\n                n = n - 1\n                break\n            else:\n                n = str(n)[0:i+1] + str(n)[i+2:len(str(n))]\n                break\n    return n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef rearrange_bigger(n):\n    res = 0\n    while n:\n        res, n = n, res * 10 + n % 10\n    return res\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    temp = list(str(num))\n    temp.sort()\n    num = int(''.join(temp))\n    return num\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    # your code here\n    pass\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\nfrom collections import Counter\n\ndef rearrange_bigger(n):\n\n    count_digit = Counter(list(str(n)))\n    result = []\n\n    for digit in count_digit:\n        result.append(count_digit[digit])\n\n    min_cnt_digit = min(count_digit.values())\n    for digit in count_digit:\n        if count_digit[digit] == min_cnt_digit:\n            result.append(digit)\n\n    result = \"\".join(str(num) for num in result)\n\n    return int(result)", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    if len(str(n)) <= 2:\n        return n\n    i = len(str(n)) - 2\n    for i in range(i, -1, -1):\n        if int(str(n)[i+1]) < int(str(n)[i]):\n            break\n    temp = list(str(n))\n    for i in range(i, -1, -1):\n        j = i - 1\n        while j >= 0:\n            if int(temp[j]) > int(temp[j+1]):\n                break\n            j -= 1\n        if j < 0:\n            break\n        temp[j], temp[j+1] = temp[j+1], temp[j]\n    return int(''.join(temp))\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    n = str(n)\n    num = [int(i) for i in n]\n    num.sort(reverse=True)\n    n = ''.join(str(i) for i in num)\n    return int(n)"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    out = []\n    for i in range(len(arr1)):\n        # use bisect to find the right index\n        j = bisect_right(arr2, arr1[i])\n        # every element in arr2 is smaller than arr1[i] so we have to check\n        if j < len(arr2):\n            out.append([arr1[i], arr2[j]])\n            # remove the pair to avoid duplicates\n            arr2.pop(j)\n            # now we have k elements, so we can break\n            if len(out) == k:\n                break\n    return out\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1 = set(arr1)\n    arr2 = set(arr2)\n    k = min(k, len(arr1) * len(arr2))\n    return sorted(\n        [(min(i, j), max(i, j)) for i in arr1 for j in arr2],\n        key=lambda i: i[0] + i[1],\n    )[:k]\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(A,B,k):\n    return nsmallest(k, list(combinations(A, 1) + combinations(B, 1)))\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef k_smallest_pairs(first: List[int], second: List[int], k: int) -> List[List[int]]:\n    first.sort()\n    second.sort()\n    result = []\n    first_idx = 0\n    second_idx = 0\n    while k > 0:\n        if first_idx == len(first) or second_idx == len(second):\n            break\n        if first[first_idx] < second[second_idx]:\n            result.append([first[first_idx], second[second_idx]])\n            first_idx += 1\n        else:\n            result.append([second[second_idx], first[first_idx]])\n            second_idx += 1\n        k -= 1\n    return result", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    # Write your code here\n    arr1.sort()\n    arr2.sort()\n    ret = []\n    idx = 0\n    for i in range(len(arr1)):\n        for j in range(idx, len(arr2)):\n            if arr1[i] < arr2[j]:\n                ret.append((arr1[i], arr2[j]))\n                idx += 1\n                if len(ret) >= k:\n                    break\n    return ret", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    res = []\n    l = 0\n    r = 0\n    while len(res) < k:\n        if l == len(arr1):\n            break\n        if r == len(arr2):\n            break\n        if arr1[l] < arr2[r]:\n            res.append([arr1[l],arr2[r]])\n            l += 1\n        else:\n            res.append([arr2[r],arr1[l]])\n            r += 1\n    return res\n\n#arr1 = [1,3,7]\n#arr2 = [2,4,6]\n#k = 2\n#res = k_smallest_pairs(arr1, arr2, k)\n#print(res)\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    ans = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            ans.append([arr1[i], arr2[j]])\n            j += 1\n            i += 1\n    return ans[:k]", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(a,b,k):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    a = [0]+a\n    b = [0]+b\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    res = []\n    index = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if (index == k):\n                break\n            if (a[i]>b[j]):\n                break\n            if (a[i]==b[j]):\n                res.append([a[i],b[j]])\n                index += 1\n                break\n    return res[::-1]", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a, b, k):\n    assert a and b, \"Arguments a and b must not be empty.\"\n    if k == 0:\n        return []\n    a_b = []\n    for i in range(len(a)):\n        a_b.append([a[i], b[i]])\n    a_b.sort()\n    i = 0\n    a_b_pairs = []\n    for i in range(k):\n        a_b_pairs.append([a_b[i], a_b[i + 1]])\n        i += 2\n    return a_b_pairs\n\na = [1,3,7]\nb = [2,4,6]", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    return sorted(map(lambda a: (a[0], a[1]), zip(arr1, arr2)), key = lambda x:x[0] + x[1])[:k]\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(L):\n    # Write your code here\n    result = 1\n    for i in range(0, len(L)-1):\n        for j in range(i+1, len(L)):\n            result = min(result, L[i][0] * L[j][1])\n    return result\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(pairs):\n    for i in range(len(pairs)-1):\n        for j in range(i+1,len(pairs)):\n            if pairs[i][0]*pairs[j][1]<pairs[i][1]*pairs[j][0]:\n                # print(i,j,pairs[i][0]*pairs[j][1],pairs[i][1]*pairs[j][0])\n                # print(pairs[i][0],pairs[i][1],pairs[j][0],pairs[j][1])\n                return pairs[i][0]*pairs[j][1]\n    return 1\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(pairs):\n    \"\"\"\n    Finds the minimum product in a list of pairs\n    :param pairs: List of pairs\n    :return: Minimum product\n    \"\"\"\n    min_product = 0\n    for pair in pairs:\n        if min_product < pair[0]*pair[1]:\n            min_product = pair[0]*pair[1]\n    return min_product\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tup_list):\n    \"\"\"\n    tup_list: list of tuple elements\n    return: minimum product of two tuples\n    \"\"\"\n    result = None\n    for i in tup_list:\n        for j in tup_list:\n            if i != j:\n                product = i[0]*j[1]\n                if result == None:\n                    result = product\n                else:\n                    if result > product:\n                        result = product\n    return result", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(l):\n    return min([item for item in [item[0]*item[1] for item in l] if item])\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    # Your code here\n    m = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(t_list):\n    # Your code here\n    t_list = [list(x) for x in t_list]\n    res = list(filter(lambda t: t[0]!=t[1], t_list))\n    res.sort(key = lambda t: t[0])\n    res.sort(key = lambda t: t[1])\n    min_prod = res[0][0]*res[0][1]\n    for i in range(1, len(res)):\n        prod = res[i][0]*res[i][1]\n        if prod < min_prod:\n            min_prod = prod\n    return min_prod\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(lst):\n    my_min = 99999\n    for i in range(len(lst)-1):\n        if (lst[i][1]*lst[i+1][0]) < my_min:\n            my_min = (lst[i][1]*lst[i+1][0])\n    return my_min", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples_list):\n    min_product = 100000000000000000000000000\n    for tup in tuples_list:\n        if min_product > tup[0] * tup[1]:\n            min_product = tup[0] * tup[1]\n    return min_product", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tups):\n    print(tups)\n    return sorted(tups, key=lambda x: x[1])[0][0]*sorted(tups, key=lambda x: x[0])[0][1]"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(sequence):\n    min_val = sequence[0]\n    for i in sequence:\n        if i < min_val:\n            min_val = i\n    return min_val\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n# 2. find the min from a given list with different types", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    minval = lst[0]\n    for i in lst:\n        if i < minval:\n            minval = i\n    return minval\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    min_ = lst[0]\n    for item in lst:\n        if item < min_:\n            min_ = item\n    return min_\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(values):\n    value = values[0]\n    for v in values:\n        if v < value:\n            value = v\n    return value\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(input_list):\n    \"\"\"\n    :param input_list:\n    :return:\n    \"\"\"\n    return min(input_list)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list):\n    min_val = list[0]\n    for i in list:\n        if min_val > i:\n            min_val = i\n    return min_val\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list):\n    for item in list:\n        if type(item) == str:\n            return item\n        elif type(item) == int:\n            return item\n        elif type(item) == float:\n            return item\n        elif type(item) == list:\n            return min_val(item)\n        elif type(item) == dict:\n            return min_val(item)\n        elif type(item) == set:\n            return min_val(item)\n        elif type(item) == tuple:\n            return min_val(item)\n        elif type(item) == bool:\n            return item\n        else:\n            return 0\n        ", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(arr):\n    if isinstance(arr[0], list):\n        return min_val(arr[0])\n    if isinstance(arr[0], int):\n        return min_val(arr[0])\n    return arr[0]\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(input_list):\n    output_list = [int(x) for x in input_list]\n    output_list.sort()\n    return output_list[0]\n\n\n# Write a function to find the maximum value in a given heterogeneous list."], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\nfrom typing import Optional\n\n\ndef snake_to_camel(s: str) -> Optional[str]:\n    if len(s) < 2:\n        return s\n    return \"\".join(\n        [s[0].upper(), s[1:].replace(\"_\", \"\").lower()]\n    )\n\n\ndef snake_to_camel_without_regex(s: str) -> Optional[str]:\n    if len(s) < 2:\n        return s\n    words = s.split(\"_\")\n    for index in range(1, len(words)):\n        words[index] = words[index].lower()\n    words[0] = words[0].capitalize()\n    return \"\".join(words)\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(s):\n  s = re.sub(r'_([a-z])', lambda m: m.group(1).capitalize(), s)\n  return s\n\n# Write a function to convert the given camel case string to snake case string by using regex.", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(str):\n    # Find all underscores in the input string and replace it with Camel case\n    # Example:\n    # snake_case = 'android_tv'\n    # camel_case = 'AndroidTv'\n    return re.sub('([_][a-z])', lambda x:x.group(1).capitalize(), str)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(string):\n    \"\"\"\n    :param string: Given snake_case string\n    :return: camelCase string\n    \"\"\"\n    # your code here\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), string).capitalize()\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(s):\n  s = re.sub(r'_([a-z0-9])', lambda m: m.group(1).upper(), s)\n  s = s.capitalize()\n  return s", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(string):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', string)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(snake_case):\n    if snake_case == '':\n        return ''\n    else:\n        return snake_case.title().replace('_', '')\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(snake):\n    return re.sub('_([a-z])', lambda x: x.group(1).upper(), snake)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(snake_string):\n    return re.sub(r'(?<!^)(?=[A-Z])', '', snake_string).lower()\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(s):\n    return s.replace('_','').title()\n\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(list):\n    odds = [i for i in list if i%2 != 0]\n    return odds\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    new_list = []\n    for item in lst:\n        if item % 2 == 0:\n            new_list.append(item)\n    return new_list", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(myList):\n    myList = [x for x in myList if x % 2 != 0]\n    return myList\n\nmy_list = [1,2,3,4,5,6,7,8,9,10]", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    # Write your code here\n    return [n for n in nums if n%2!=0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n# Remove odd numbers from a given list\ndef remove_odd(list):\n    return [x for x in list if x % 2 == 0]\n\n# Unit test", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(nums):\n    output_list = []\n    for num in nums:\n        if num % 2 == 0:\n            output_list.append(num)\n    return output_list\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(numbers):\n    return [number for number in numbers if number%2!=0]\n\n#assert remove_odd([1,2,3]) == [2]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(list):\n    return [n for n in list if n % 2 == 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(l):\n    return [i for i in l if i%2 != 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [i for i in lst if i % 2 == 0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(my_list, n):\n    return [x[n] for x in my_list]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples, index):\n    list_of_names = []\n    for i in range(len(list_of_tuples)):\n        list_of_names.append(list_of_tuples[i][index])\n\n    return list_of_names", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(l, n):\n    \"\"\"\n    Extract the nth element from a list of tuples.\n    \"\"\"\n    return [x[n] for x in l]\n\nl = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tuples, n):\n    n-=1\n    print(f\"Extracting element {n} from the list\")\n    return tuples[n]\n\ndef main():\n    tuples=[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\n    print(extract_nth_element(tuples, 2))\n\nmain()", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(listOfTuples, index):\n    return [x[index] for x in listOfTuples]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(my_list, index):\n    return [my_element[index] for my_element in my_list]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list,n):\n    return list[n][n]", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    return [i[n] for i in lst]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, index):\n    return [x[index] for x in lst]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(elements, n):\n    return elements[n]\n\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(a,b):\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(a,b):\n    \"\"\"\n    Return True if there is at least one value in common in the two sequences.\n    Otherwise return False.\n    >>> overlapping([1,2,3,4,5],[6,7,8,9])\n    False\n    >>> overlapping([1,2,3,4,5],[1,2,3,4,5])\n    True\n    \"\"\"\n    for x in a:\n        if x in b:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n# Euclidean Distance\n\ndef euclideanDistance(x1, x2):\n    \"\"\"\n    Return the Euclidean Distance between two points\n    \"\"\"\n    if len(x1) == len(x2):\n        # Calculate the Euclidean Distance\n        eucdist = sum([(x1[i]-x2[i])**2 for i in range(len(x1))])\n        return eucdist ** 0.5\n    else:\n        print(\"Error: Euclidean distance can be calculated only for vectors of same length\")\n        ", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(x,y):\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if x[i] == y[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1, list2):\n    print(list1)\n    print(list2)\n    if list1 == list2:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1,seq2):\n    if len(seq1) == 0 or len(seq2) == 0:\n        return False\n    for i in range(len(seq1)):\n        if seq1[i] in seq2:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    \"\"\"\n    >>> overlapping([1,2,3,4,5],[6,7,8,9])\n    False\n    >>> overlapping([1,2,3,4,5],[1,2,3,4,5])\n    True\n    >>> overlapping([1,2,3,4,5],[4,5,6,7,8])\n    True\n    \"\"\"\n    for val in seq1:\n        if val in seq2:\n            return True\n    return False\n\n# doctest.testmod()", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    return seq1[0] in seq2 or seq1[-1] in seq2\n\ndef main():\n    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    assert overlapping([1,2,3,4,5],[1,2,3,4]) == True\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1,list2):\n    for x in list2:\n        if x in list1:\n            return True\n    return False"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_p = arr[0]*arr[1]\n    min_p = arr[0]*arr[1]\n    for num in arr:\n        p = num * arr[0] * arr[1]\n        if p > max_p:\n            max_p = p\n        if p < min_p:\n            min_p = p\n    return (max_p,min_p)\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_product(arr):\n    l = len(arr)\n    if l == 0:\n        return ()\n    max_prod = arr[0]\n    max_index = 0\n    for i in range(l):\n        for j in range(i+1, l):\n            prod = arr[i] * arr[j]\n            if max_prod < prod:\n                max_prod = prod\n                max_index = i, j\n    return arr[max_index[0]], arr[max_index[1]]\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_product(a):\n    # your code here\n    product = 0\n    index = -1\n    for i, item in enumerate(a):\n        product = max(product, item * a[i])\n        if product == 0:\n            index = i\n    return (a[index], a[index + 1])\n\n\n# assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_product(array):\n    maximum_product = float('-inf')\n    max_index = 0\n    max_value = 0\n    for i, value in enumerate(array):\n        if maximum_product < 0:\n            maximum_product = value\n            max_index = i\n        elif value > maximum_product:\n            maximum_product = value\n            max_index = i\n        elif value < 0:\n            maximum_product = 0\n            max_index = i\n    return (max_index, maximum_product)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max = -1\n    min = -1\n    max_prod = -1\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n                max = i\n                min = j\n    return arr[max], arr[min]\n\n#Test", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    high = 0\n    low = 1\n    for i in range(0, len(arr)):\n        if arr[i] > high:\n            high = arr[i]\n            low = i\n        elif arr[i] > arr[low]:\n            low = i\n    return arr[low], high\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(array):\n    highest_product = -1\n    highest_product_index = 0\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] * array[j] > highest_product:\n                highest_product = array[i] * array[j]\n                highest_product_index = i, j\n    return highest_product_index\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_val = -1\n    max_index = None\n    max_prod = -1\n\n    for index, value in enumerate(arr):\n        for i in range(index+1, len(arr)):\n            prod = value * arr[i]\n            if prod > max_prod:\n                max_prod = prod\n                max_val = value\n                max_index = index\n\n    return (max_val, max_index)\n\n# Tests", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_product = -10000000\n    result = (-1, -1)\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result = (arr[i], arr[j])\n    return result\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\nfrom collections import Counter\ndef max_Product(input_list):\n    max_prod = 0\n    max_indices = []\n    for i in range(len(input_list)):\n        for j in range(i+1,len(input_list)):\n            prod = input_list[i]*input_list[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_indices = [i,j]\n    return (max_prod,max_indices)"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    \"\"\"\n    Break the number into 3 parts.\n    If the number is odd, make one part equal to the number.\n    Else make parts equal to the quotient of the number.\n    \"\"\"\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return breakSum(n//2) + breakSum(n//2) + n\n    else:\n        return breakSum(n//2) + breakSum(n//2) + (n % 2)", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\nfrom sys import maxsize\n\n# We can't use a class for this problem so we will use a static function instead\ndef breakSum(num):\n    if num <= 0:\n        return 0\n    else:\n        x = int(num / 3)\n        y = int(num / 3) * 2\n        if x > y:\n            return x + breakSum(y - x)\n        else:\n            return y + breakSum(x - y)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    global maxSum\n    if n <= 0:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        maxSum = 3\n        return 3\n    maxSum = 0\n    if n % 3 == 0:\n        return breakSum(n/3) + breakSum(n/3) + breakSum(n/3)\n    elif n % 3 == 1:\n        return breakSum(n/3) + breakSum(n/3) + breakSum(n%3)\n    elif n % 3 == 2:\n        return breakSum(n/3) + breakSum(n%3) + breakSum(n%3)\n\n# given 3, 4, 2, 18, 19, 18\n# give 4, 2, 18\n# give 2, 18\n# give 2, 10\n# give 10, 2\n# give 10, 1\n# give 11\n\ndef breakSum(n):\n    global maxSum\n    if n <= 0:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        maxSum = 3\n        return 3\n    maxSum = 0\n    if n % 3 == 0:\n        return breakSum(n/3) + breakSum(n/3) + breakSum(n/3)\n    elif n % 3 == 1:\n        return breakSum(n/3) + breakSum(n%3) + breakSum(n%3)\n    elif n % 3 == 2:\n        return breakSum(n/3) + breakSum(n%3) + breakSum(n%3)\n\n\n# given 3, 4, 2, 18, 19, 18\n# give 4, 2, 18\n# give 2, 18\n# give 2, ", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num <= 2:\n        return num\n    return max(num - 1, breakSum(num - 2) + 1, breakSum(num - 3) + 2)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num < 10:\n        return num\n    elif num % 3 == 0:\n        return breakSum(num//3) + breakSum(num//3) + breakSum(num//3)\n    else:\n        return breakSum(num//3) + breakSum(num//3) + breakSum(num % 3)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(number):\n    if number < 2:\n        return number\n\n    a, b, c = number, number, 0\n    while a > 0 or b > 0:\n        if a > b:\n            c += a\n            a -= 1\n        else:\n            c += b\n            b -= 1\n    return c\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    elif num % 3 == 0:\n        return breakSum(num / 3) + breakSum(num / 3) + breakSum(num / 3)\n    else:\n        return max(breakSum(num - 1), breakSum(num - 2) + num)\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\nfrom typing import List\n\n\ndef breakSum(num: int) -> int:\n    if num < 0:\n        return 0\n\n    if num == 0:\n        return 0\n\n    if num < 4:\n        return num\n\n    result = breakSum(num // 2) + breakSum(num - num // 2)\n\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num == 1:\n        return 0\n    elif num == 2:\n        return 1\n    else:\n        return max(breakSum(num-1), breakSum(num-2)) + num\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\n# recursive solution\ndef breakSum(number):\n    # base case\n    if number <= 1:\n        return number\n    \n    # split number in three parts\n    a = number//3\n    b = number//3 + number//3\n    c = number - a - b\n    \n    # solve this problem for each of the three parts\n    a_part = breakSum(a)\n    b_part = breakSum(b)\n    c_part = breakSum(c)\n    \n    # combine them together\n    return max(a_part+b_part+c_part, a_part+b_part, a_part+c_part, b_part+c_part)\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(list_of_tuples):\n    set_of_tuples = set(list_of_tuples)\n    list_of_tuples = list(set_of_tuples)\n    return list(list(map(tuple, groupby(list_of_tuples, key=lambda x: x[0]))))\n\n# Check:\nlist_of_tuples = [('x', 'y'), ('x', 'z'), ('w', 't')]", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    return tuple([x[0] for x in tuples])\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(input):\n    if len(input) == 0:\n        return []\n    return [(x, y, z) for x, y, z in input if x == input[0][0]]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    res = []\n    t0 = []\n    for tuple_item in tuples:\n        if tuple_item[0] == t0[0]:\n            t0 = tuple_item\n            res.append(t0)\n        else:\n            t0 = tuple_item\n            res.append(t0)\n    return res\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(input_list):\n    output = []\n    for i in range(len(input_list)):\n        first_tuple = input_list[i]\n        first_elem = first_tuple[0]\n        if len(input_list[i]) != len(first_elem):\n            return output\n        for j in range(1, len(first_elem)):\n            if input_list[i][j] != first_elem[j]:\n                return output\n        output.append(first_tuple)\n    return output\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(lst):\n    pass", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\nfrom typing import List, Tuple, TypeVar, Optional, Generic, Union\nfrom typing_extensions import NotRequired\n\nT = TypeVar(\"T\")\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(t_list):\n    l = []\n    for i in range(len(t_list)-1):\n        if (t_list[i][0] == t_list[i+1][0]):\n            l.append((t_list[i][0], t_list[i][1], t_list[i+1][1]))\n    return l\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(lst):\n    \"\"\"\n    This is a problem\n    \"\"\"\n    tuples = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][0] == lst[j][0]:\n                tuples.append((lst[i][0],lst[i][1],lst[j][1]))\n    return tuples\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    return [(i[0], i[1]) for i in tuples]\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(sublist):\n    max_len = len(sublist[0])\n    max_sublist = sublist[0]\n    for i in range(1,len(sublist)):\n        if len(sublist[i])>max_len:\n            max_len = len(sublist[i])\n            max_sublist = sublist[i]\n    return max_sublist\n\n\n# -\n\nFind_Max([['A'],['A','B'],['A','B','C']])\n\n\n# +\ndef Find_Max(sublist):\n    max_len = 0\n    max_sublist = []\n    for i in range(len(sublist)):\n        if len(sublist[i])>max_len:\n            max_len = len(sublist[i])\n            max_sublist = sublist[i]\n    return max_sublist\n\nFind_Max([['A'],['A','B'],['A','B','C']])\n# -\n\n# ## Question 5\n\n# +", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    max_length = 0\n    max_index = 0\n    max_elem = None\n    for i, elem in enumerate(lst):\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_index = i\n            max_elem = elem\n    return max_elem\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(list_of_list):\n    list1=list_of_list[0]\n    for i in range(1,len(list_of_list)):\n        temp=list_of_list[i]\n        if len(list1)<len(temp):\n            list1=temp\n    return list1\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    max_len = 0\n    max_sublist = []\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_sublist = l\n    return max_sublist\n\n\nlst = [['A'],['A','B'],['A','B','C']]", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    return max(map(len, lst), key=len)\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(l):\n    max_length = -1\n    max_sublist = None\n    for i in l:\n        for j in i:\n            for k in j:\n                if len(k) > max_length:\n                    max_length = len(k)\n                    max_sublist = k\n    return max_sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\nfrom collections import Counter\ndef Find_Max(list):\n    if len(list) == 1:\n        return list[0]\n    list1 = list[0]\n    list2 = list[1]\n    list1_count = Counter(list1)\n    list2_count = Counter(list2)\n    max_count = 0\n    max_list = None\n    for item in list2:\n        item_count = Counter(item)\n        if len(item_count & list1_count) > max_count:\n            max_count = len(item_count & list1_count)\n            max_list = item\n    return max_list", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(L):\n    m = max(map(len,L))\n    sublist = []\n    for i in L:\n        if len(i) == m:\n            sublist.append(i)\n    return sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(li):\n    res = li[0]\n    for i in range(1, len(li)):\n        if len(li[i]) > len(res):\n            res = li[i]\n    return res\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(sublist):\n    max_size = 0\n    max_list = []\n    for sublist_element in sublist:\n        size = len(sublist_element)\n        if size > max_size:\n            max_size = size\n            max_list = sublist_element\n    return max_list\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n# V1'\n# IDEA : list comprehension \ndef round_and_sum(list_numbers):\n    return sum(map(lambda x: round(x, 2), list_numbers)) * len(list_numbers)\n\n# V1''\n# IDEA :  list comprehension + round()\ndef round_and_sum(list_numbers):\n    return sum([round(num, 2) for num in list_numbers]) * len(list_numbers)\n\n# V1'''\n# IDEA :  reduce()\ndef round_and_sum(list_numbers):\n    return reduce(lambda x, y: x + round(y, 2), list_numbers, 0) * len(list_numbers)\n\n# V1''''\n# IDEA :  list comprehension + round() + reduce()\ndef round_and_sum(list_numbers):\n    return sum(round(num, 2) for num in list_numbers) * len(list_numbers)\n\n# V1'''''\n# IDEA :  list comprehension + reduce() + map()\ndef round_and_sum(list_numbers):\n    return reduce(lambda x, y: x + y, map(lambda x: round(x, 2), list_numbers)) * len(list_numbers)\n\n# V1''''''''\n# IDEA :  reduce() + map() + filter() + list()\ndef round_and_sum(list_numbers):\n    return reduce(lambda x, y: x + y, map(lambda x: round(x, 2), filter(lambda x: x > 0, list_numbers))) * len(list_numbers)\n\n# V1''''''''''\n# IDEA :  filter() + list() + map() + reduce()\ndef round_and_sum(list_numbers):\n    return reduce(lambda x,", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    #your code here\n    result = []\n    for i in numbers:\n        result.append(round(i))\n    total = sum(result)\n    return total * len(result)", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    sum = 0\n    for x in numbers:\n        sum += round(x)\n    return sum*len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    result = 0\n    sum_of_numbers = sum(numbers)\n    length = len(numbers)\n    for num in numbers:\n        result += num\n    return round(result) * length\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(lst):\n    a=sum(map(round,lst))\n    return a*len(lst)\n\nlst = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    sum=0\n    for i in numbers:\n        sum+=round(i)\n    return sum*len(numbers)", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    return sum(round(number, 2) for number in numbers) * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    return (sum(map(round, numbers))*len(numbers))\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\nimport math\ndef round_and_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\nnumbers = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(mylist):\n    leng= len(mylist)\n    sum_of_numbers=0\n    for number in mylist:\n        sum_of_numbers = sum_of_numbers + round(number)\n    return(sum_of_numbers * leng)\n\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    ans = 0\n    for i in range(0, n, 2):\n        ans += i**3\n    return ans\n\n#assert cube_Sum(2) == 72", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    total = 0\n    for i in range(2, n, 2):\n        total += i**3\n    return total\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_sum(n):\n    result = 0\n    for num in range(2,n,2):\n        result += num**3\n    return result", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n# Solution\ndef cube_Sum(n):\n    return sum(range(2*n, 2*(n+1), 2))**3\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    assert type(n) == int\n    cubes = []\n    for i in range(0, n, 2):\n        cubes.append(i**3)\n    return sum(cubes)\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n# Sample input: 5\n\n# Sample Output: 1260\n\n# Sample Output Explanation: 1 + 8 + 27 + 64 + 125 = 1260\n\nimport math\n\ndef cube_Sum(n):\n    # Write your code here\n    s = 0\n    for i in range(2, n + 1):\n        s += math.pow(i, 3)\n    return s", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    Sum = 0\n    for i in range(0,n):\n        Sum = Sum + (i*i*i)\n    return Sum", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\nfrom functools import reduce\n\ndef cube_Sum(n):\n    return reduce(lambda x,y: x+y**3, range(0, n, 2))\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    result = 0\n    for i in range(0, n, 2):\n        result += (i**3)\n    return result\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n\treturn sum(i**3 for i in range(0, n, 2))\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# Write your solution here\ndef concatenate_tuple(tuple_list):\n    return '-'.join(str(x) for x in tuple_list)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    def _cat(t):\n        if len(t) > 1:\n            res = t[0]\n            for t in t[1:]:\n                res += \"-\" + t\n            return res\n        else:\n            return \"\"\n\n    result = \"\"\n    for t in tup:\n        result += _cat(t)\n\n    return result\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# Write your code here\ndef concatenate_tuple(tup):\n    concat = ''\n    for i in tup:\n        concat = concat + \"-\" + str(i)\n    return concat\n\n# Test cases", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return '-' .join(map(str,tup))", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple, delimiter = \"-\"):\n    return delimiter.join([str(i) for i in tuple])\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    result = \"\"\n    for i in range(len(tuple)):\n        if i < len(tuple)-1:\n            result += str(tuple[i]) + \"-\"\n        else:\n            result += str(tuple[i])\n    return result\n\n# concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_):\n    if not isinstance(tuple_, tuple):\n        raise ValueError('The tuple_ must be tuple.')\n    return '-'.join(tuple(tuple_))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    res = ''\n    for i in range(len(tuple)):\n        if(i != len(tuple) - 1):\n            res += str(tuple[i]) + \"-\"\n        else:\n            res += str(tuple[i])\n    return res\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_elements):\n    \"\"\"\n    :param tuple_elements: tuple of elements\n    :return: a string consisting of tuple elements\n    \"\"\"\n    result = \"\"\n    for element in tuple_elements:\n        result += str(element) + \"-\"\n    return result[:-1]\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_arg):\n    return '-'.join(map(str, tuple_arg))"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    if n > 0:\n        return (1/n)*((n*n*n) + (n*n*n-3*n*n+2*n)+1)\n    else:\n        return -1\n\ndef test_find_Average_Of_Cube():\n    assert find_Average_Of_Cube(2) == 4.5\n    assert find_Average_Of_Cube(1) == 1\n    assert find_Average_Of_Cube(3) == 12.5\n    assert find_Average_Of_Cube(0) == -1", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    cubes = [x**3 for x in range(n)]\n    avg = sum(cubes)/len(cubes)\n    return avg\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum=0\n    for i in range(n+1):\n        sum+=pow(i,3)\n    return sum/n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    return sum(map(lambda x: x**3, range(1, n + 1))) / n\n\n# Test ", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n# This solution uses list comprehension\ndef find_Average_Of_Cube(n):\n    return sum(x ** 3 for x in range(1, n + 1)) / n\n\n\n# This solution uses for loop\ndef find_Average_Of_Cube(n):\n    sum_of_cube = 0\n    for x in range(1, n + 1):\n        sum_of_cube += x ** 3\n    return sum_of_cube / n\n\n\n# This solution uses a for loop and list comprehension\ndef find_Average_Of_Cube(n):\n    sum_of_cube = 0\n    for x in range(1, n + 1):\n        sum_of_cube += x ** 3\n    return sum_of_cube / n\n\n\n# This solution uses a for loop and generator comprehension\ndef find_Average_Of_Cube(n):\n    return sum(x ** 3 for x in range(1, n + 1)) / n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\nimport math\ndef find_Average_Of_Cube(n):\n    a = 0\n    for i in range(n):\n        a += (math.pow(i,3))\n    return a/n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    if n < 1:\n        return -1\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n\n    return sum / n\n\n# assert find_Average_Of_Cube(2) == 4.5\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    # A pythonic way of doing it.\n    avg = sum([x ** 3 for x in range(1,n + 1)]) / n\n    return avg", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return sum(i**3 for i in range(n)) / n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(matrix,x,y):\n    max_gold = 0\n    i = x\n    j = y\n    while i<x+4 and j<y+4:\n        max_gold = max(matrix[i][j],max_gold+matrix[i+1][j+1],max_gold+matrix[i+2][j+2],max_gold+matrix[i+3][j+3])\n        i += 1\n        j += 1\n    return max_gold\n\n#print(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4))\n\ndef get_maxgold(matrix,x,y):\n    max_gold = 0\n    i = x\n    j = y\n    while i<x+4 and j<y+4:\n        max_gold = max(matrix[i][j],max_gold+matrix[i+1][j+1],max_gold+matrix[i+2][j+2],max_gold+matrix[i+3][j+3])\n        i += 1\n        j += 1\n    return max_gold\n\n#print(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4))\n\ndef get_maxgold(matrix,x,y):\n    max_gold = 0\n    i = x\n    j = y\n    while i<x+4 and j<y+4:\n        max_gold = max(matrix[i][j],max_gold+matrix[i+1][j+1],max_gold+matrix[i+2][j+2],max_gold+matrix[i+3][j+3])\n        i +=", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid,m,n):\n    \"\"\"\n    grid: List[List[int]]\n    m: int\n    n: int\n    \"\"\"\n    total = 0\n    for i in range(m):\n        for j in range(n):\n            total += grid[i][j]\n    return total\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(gold_matrix, rows, cols):\n    \"\"\"Return the maximum gold value.\"\"\"\n    best_gold = 0\n    for r in range(rows):\n        for c in range(cols):\n            left_value = 0\n            if c != 0:\n                left_value = gold_matrix[r][c-1]\n            top_value = 0\n            if r != 0:\n                top_value = gold_matrix[r-1][c]\n            new_gold = gold_matrix[r][c] + max(left_value, top_value)\n            if new_gold > best_gold:\n                best_gold = new_gold\n    return best_gold\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mat,num_row,num_col):\n    # write your code here\n    row,col,sum=num_row,num_col,0\n    while row>0 and col>0:\n        sum+=max(mat[row-1][col-1],mat[row-1][col],mat[row][col-1])\n        if mat[row-1][col-1]>mat[row-1][col]:\n            col-=1\n        elif mat[row-1][col-1]<mat[row][col-1]:\n            row-=1\n        else:\n            row-=1\n            col-=1\n    return sum\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mine,x,y):\n    max_gold = 0\n    for i in range(x):\n        for j in range(y):\n            if mine[i][j] > max_gold:\n                max_gold = mine[i][j]\n            if (i,j) != (0,0) and mine[i][j] > mine[i-1][j]:\n                max_gold += mine[i][j]\n            if (i,j) != (0,0) and mine[i][j] > mine[i][j-1]:\n                max_gold += mine[i][j]\n    return max_gold\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom typing import List\n\n\ndef get_maxgold(grid: List[List[int]], n: int, m: int) -> int:\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def get_pos(x: int, y: int) -> int:\n        return x + rows * y\n\n    def get_left(x: int) -> int:\n        return (x + rows - 1) % rows\n\n    def get_right(x: int) -> int:\n        return (x + 1) % rows\n\n    def get_up(y: int) -> int:\n        return (y + m - 1) % m\n\n    def get_down(y: int) -> int:\n        return (y + 1) % m\n\n    queue = [get_pos(0, 0)]\n    seen = {get_pos(0, 0): 0}\n\n    while queue:\n        x, y = queue.pop(0)\n        if x == n - 1 and y == m - 1:\n            return seen[x, y]\n\n        new_x, new_y = get_pos(x, y)\n        if grid[x][y] > 0:\n            seen[x, y] += grid[x][y]\n        if grid[x][y] > 0 and grid[x][y] > 9:\n            seen[x, y] += 9 * (grid[x][y] - 9)\n        queue.append(get_pos(new_x, new_y))\n        queue.append(get_left(new_x))\n        queue.append(get_right(new_x))\n        queue.append(get_up(new_y))\n        queue.append(get_down(new_y))\n    return 0\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(GoldMine,n,m):\n    maxgold = 0\n    for i in range(n):\n        for j in range(m):\n            if GoldMine[i][j] > maxgold:\n                maxgold = GoldMine[i][j]\n    return maxgold", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mine, width, height):\n    \"\"\"\n    Note: width, height is used to deal with the problem that the real gold mine is 1-based.\n    Note: The board is assumed to have width and height 0-based.\n    \"\"\"\n    mine = [row[width:] + row[:width] for row in mine]\n    # Note: now we have a 1-based board.\n    count = 0\n    for i in range(height):\n        for j in range(width):\n            if mine[i][j]:\n                if i > 0 and mine[i-1][j]:\n                    count += mine[i-1][j]\n                if i < height - 1 and mine[i+1][j]:\n                    count += mine[i+1][j]\n                if j > 0 and mine[i][j-1]:\n                    count += mine[i][j-1]\n                if j < width - 1 and mine[i][j+1]:\n                    count += mine[i][j+1]\n    return count", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nimport numpy as np\ndef get_maxgold(M, N, K):\n\t# write code here\n\tM = np.array(M, dtype='int')\n\tM[M < K] = 0\n\tif np.sum(M) == 0:\n\t\treturn 0\n\tif np.sum(M,axis=1) != K:\n\t\treturn 0\n\tM = M.astype('float')\n\treturn np.sum(np.sum(M, axis=1) * M, axis=0)\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(rows,cols,x,y):\n    gold_mine = []\n    for i in range(x):\n        gold_mine.append([0 for j in range(y)])\n    for i in range(x):\n        for j in range(y):\n            gold_mine[i][j] = rows[i][j]\n    return get_gold(gold_mine,x,y,x-1,y-1,1,1)\n\ndef get_gold(gold_mine,x,y,i,j,count,gold):\n    if i < 0 or j < 0 or i > x-1 or j > y-1:\n        return 0\n    if gold_mine[i][j] == 0:\n        return 0\n    if gold_mine[i][j] > 0:\n        gold += gold_mine[i][j]\n        return gold\n    gold_mine[i][j] = 0\n    count += 1\n    gold = get_gold(gold_mine,x,y,i-1,j-1,count,gold)\n    gold = get_gold(gold_mine,x,y,i-1,j,count,gold)\n    gold = get_gold(gold_mine,x,y,i,j-1,count,gold)\n    gold = get_gold(gold_mine,x,y,i,j,count,gold)\n    return gold\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(str_tuple):\n    return [i[-1] for i in str_tuple]\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(seq):\n    result = tuple(elem[-1] for elem in seq)\n    return result\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple_x):\n    return tuple(x[-1] for x in tuple_x)", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(strings):\n    l = []\n    for string in strings:\n        l.append(string[-1])\n    return l\n\n# assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(t):\n    return tuple(elem[-1] for elem in t)\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(text):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n    >>> extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    True\n    \"\"\"\n    result = []\n    for i in text:\n        result.append(i[-1])\n    return result\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(t):\n    result = []\n    for i in t:\n        result.append(i[-1])\n    return result\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_):\n    output = []\n    for i in tuple_:\n        output.append(i[-1])\n    return output\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(t):\n    output = []\n    for string in t:\n        output.append(string[-1])\n    return output\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuples):\n    return [word[-1] for word in tuples]\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(arr,e):\n    count=0\n    for i in arr:\n        for j in i:\n            if e == j:\n                count+=1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l,e):\n    if len(l)==0:\n        return 0\n    else:\n        count=0\n        for i in l:\n            if e in i:\n                count+=1\n        return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nfrom typing import List\n\n\ndef count_element_in_list(l: List[List], n: int) -> int:\n    \"\"\"\n    Count the number of lists containing n.\n\n    Args:\n        l: a list of lists\n        n: the element to be counted\n\n    Returns:\n        The number of lists containing n.\n    \"\"\"\n    num_list = 0\n    for i in l:\n        if n in i:\n            num_list += 1\n    return num_list\n\n\ndef count_element_in_list_advanced(l: List[List], n: int) -> int:\n    \"\"\"\n    Count the number of lists containing n using python list comprehension.\n\n    Args:\n        l: a list of lists\n        n: the element to be counted\n\n    Returns:\n        The number of lists containing n.\n    \"\"\"\n    return len([i for i in l if n in i])\n\n\n# assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == count_element_in_list_advanced([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n# assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 3) == count_element_in_list_advanced([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 3)\n# assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 5) == count_element_in_list_advanced([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 5)\n# assert count_element_in_list", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(sublists, elem):\n    counter=0\n    for sublist in sublists:\n        if elem in sublist:\n            counter=counter+1\n    return counter\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(L, element):\n    # Write your code here.\n    if not L:\n        return 0\n    res = 0\n    count = 0\n    for i in L:\n        if element in i:\n            count = count + 1\n        else:\n            res = res + count\n            count = 0\n    res = res + count\n    return res\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l, e):\n    if not l:\n        return 0\n    n = 0\n    for i in range(len(l)):\n        if len(l[i])>0 and e in l[i]:\n            n += 1\n    return n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list, element):\n    return list.count([element])\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(sublists, element):\n    return sum([1 for sublist in sublists if element in sublist])\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst, element):\n    count = 0\n    for l in lst:\n        if element in l:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l,n):\n    # this is a dummy list to be used in the while loop\n    # it will be used to determine the length of the sublist to be compared\n    dummy = [n]\n    counter = 0\n    i = 0\n    while i < len(l):\n        if l[i] == dummy:\n            counter += 1\n        i += 1\n    return counter\n\ndef merge_sublists(l):\n    if len(l) == 1:\n        return l\n    else:\n        middle = len(l) / 2\n        left_part = l[:middle]\n        right_part = l[middle:]\n        merged_list = merge_sublists(left_part) + merge_sublists(right_part)\n        return merge(merged_list)\n\ndef merge(l):\n    n = len(l)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [l[0]]\n    else:\n        middle = n / 2\n        left_part = l[:middle]\n        right_part = l[middle:]\n        left_part.reverse()\n        return merge(left_part + right_part)\n\ndef count_element_in_list2(l,n):\n    return merge_sublists(l).count(n)\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2 == 1,lst))\n\n# \"\"\"\n# Write a function to filter even numbers using filter function.\n# assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2,4,6,8,10]\n# \"\"\"\n# def filter_evennumbers(lst):\n#     return list(filter(lambda x: x%2 == 0,lst))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return [x for x in lst if x%2 !=0]\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n#Solution 1\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda n: n % 2, numbers))\n\n#Solution 2\ndef filter_oddnumbers(numbers):\n    return [n for n in numbers if n%2 ==1]\n\n#Solution 3\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda n: n%2 != 0, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(l):\n    return [n for n in l if n%2 ==1]\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x:x%2,lst))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x:x%2!=0, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(n):\n    return list(filter(lambda x: x%2, n))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2, nums))\n\n# print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2==1,lst))\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2!=0,lst))\n\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    \"\"\"\n    >>> change_date_format(\"2026-01-02\")\n    '02-01-2026'\n    >>> change_date_format(\"2026-01-02\")\n    '02-01-2026'\n    \"\"\"\n    return re.sub(r'-', '', date).strip().zfill(2) + '-' + date[2:4] + '-' + date[4:]\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    \"\"\"\n    Replace regex to do the conversion.\n    \"\"\"\n    return date.replace(\"-\", \"\")[::-1].replace(\"-\", \"\")[::-1]\n\n#assert change_date_format(\"2026-01-02\") == '02-01-2026'\n\n#assert change_date_format(\"1-2-3\") == '3-2-1'\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    return re.sub(r'([0-9]{2})-([0-9]{2})-([0-9]{4})', r'\\3-\\2-\\1', date)\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    return re.sub(r\"^(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", date)\n\n# change_date_format(\"2026-01-02\")\n\n# +", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(s):\n    \"\"\"\n    s: date in yyyy-mm-dd format\n    return: date in dd-mm-yyyy format\n    \"\"\"\n    s = s.replace(\"-\", \"\")\n    s = s[::-1]\n    s = s[4:6] + \"-\" + s[2:4] + \"-\" + s[0:2]\n    s = s[::-1]\n    return s\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    return re.sub(r'([0-9]{2})-([0-9]{2})-([0-9]{4})', r'\\3-\\2-\\1', date)\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\n\ndef change_date_format(date):\n    return re.sub(r'([0-9]{4}-[0-9]{2}-[0-9]{2})', r'\\1', date)\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date):\n    pattern = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2})\")\n    match = re.search(pattern, date)\n    return '-'.join(reversed(match.groups()))\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n# Definition for date(day, month, year):\nDate = namedtuple(\"Date\", (\"day\", \"month\", \"year\"))\n\n\ndef change_date_format(date):\n    \"\"\"\n    :type date: str\n    :rtype: str\n    \"\"\"\n    date_pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n    result = re.search(date_pattern, date)\n    if result:\n        date_tuple = result.group(0).split(\"-\")\n        return \"{}-{}-{}\".format(date_tuple[2], date_tuple[1], date_tuple[0])\n    else:\n        return date", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nfrom typing import Optional\nimport re\n\n\ndef change_date_format(date_str: str) -> Optional[str]:\n    \"\"\"\n    :param date_str: Date in yyyy-mm-dd format\n    :return: Date in dd-mm-yyyy format\n    \"\"\"\n    if not date_str:\n        return None\n    date_regex = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2})\")\n    res = date_regex.search(date_str)\n    if res:\n        result = str(res.group(3)) + \"-\" + str(res.group(2)) + \"-\" + str(res.group(1))\n        return result\n    else:\n        return None"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    gap = len(arr) // 2\n\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            j = i\n            temp = arr[i]\n\n            while j >= gap and temp < arr[j - gap]:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            arr[j] = temp\n\n        gap //= 2\n\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    gap = len(arr)/2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and temp < arr[j-gap]:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap = gap//2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(array):\n    gap = len(array) // 2\n    while gap > 0:\n        for i in range(gap, len(array)):\n            j = i\n            while j - gap >= 0 and array[j] < array[j - gap]:\n                array[j], array[j - gap] = array[j - gap], array[j]\n                j -= gap\n        gap = gap // 2\n    return array\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nfrom typing import List, Optional\n\n\ndef shell_sort(arr: List[int]) -> List[int]:\n    \"\"\"Shell Sort algorithm.\"\"\"\n    gap = len(arr) // 2\n    while gap >= 1:\n        for i in range(gap, len(arr)):\n            j = i\n            while j >= gap and arr[j - gap] > arr[j]:\n                arr[j], arr[j - gap] = arr[j - gap], arr[j]\n                j -= gap\n        gap = gap // 2\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(array):\n    h = 1\n    while h < len(array)/3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, len(array)):\n            gap = i\n            while gap >= h and array[gap-h] > array[gap]:\n                array[gap], array[gap-h] = array[gap-h], array[gap]\n                gap = gap - h\n        h = h/3\n    return array\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            j = i\n            while j >= gap and arr[j - gap] > arr[j]:\n                arr[j - gap], arr[j] = arr[j], arr[j - gap]\n                j -= gap\n        gap //= 2\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nfrom random import randint\n\n\ndef shell_sort(array):\n    size = len(array)\n    gap = size // 2\n    while gap > 0:\n        for i in range(gap, size):\n            gap_insertion_sort(array, i, gap)\n        gap //= 2\n    return array\n\n\ndef gap_insertion_sort(array, i, gap):\n    while i >= gap and array[i] < array[i - gap]:\n        array[i], array[i - gap] = array[i - gap], array[i]\n        i -= gap\n\n\ndef test_shell_sort():\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n# Idea: Sort an array by using a sequence of gaps between each element.\n# 1. Start by finding the largest gap, create an array of length 1 and fill it with the largest gap.\n# 2. Scan the array by two, starting from the second element.\n# 3. If the second element is larger than the first element, exchange them.\n# 4. The element at index 1 will now be the largest gap in the array.\n# 5. Find the largest gap in the array and put it at the end of the array.\n# 6. Reduce the gap for the next scan by dividing it by 2.\n\ndef shell_sort(arr):\n    gap = len(arr)\n    while gap >= 1:\n        for i in range(0, len(arr) - gap):\n            if arr[i + gap] < arr[i]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n        gap = int(gap / 2)\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    increment = len(arr) // 2\n    while increment > 0:\n        for i in range(increment, len(arr)):\n            gap = i\n            key = arr[i]\n            while gap >= increment and arr[gap-increment] > key:\n                arr[gap] = arr[gap-increment]\n                gap -= increment\n            arr[gap] = key\n        increment //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    #your code here\n    step = len(arr) // 2\n    while step > 0:\n        for i in range(step, len(arr)):\n            key = arr[i]\n            j = i\n            while j >= step and arr[j-step] > key:\n                arr[j] = arr[j-step]\n                j = j - step\n            arr[j] = key\n        step //= 2\n    return arr"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(a, b):\n    \"\"\"\n\n    \"\"\"\n    return tuple(np.logical_and(a, b))\n\na = [10, 4, 6, 9]\nb = [5, 2, 3, 3]\n# a = (10, 4, 6, 9)\n# b = (5, 2, 3, 3)", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tup1, tup2):\n    return (tup1[0] & tup2[0], tup1[1] & tup2[1], tup1[2] & tup2[2], tup1[3] & tup2[3])\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    return tuple(map(operator.and_, tuple1, tuple2))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\nimport operator\ndef and_tuples(tup1, tup2):\n\tassert(len(tup1) == len(tup2))\n\treturn tuple(map(operator.and_, tup1, tup2))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple1, tuple2):\n    \"\"\"\n    :param tuple1: tuple\n    :param tuple2: tuple\n    :return: tuple\n    \"\"\"\n    return (tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(a, b):\n    return (a[0] & b[0], a[1] & b[1], a[2] & b[2], a[3] & b[3])\n\n\n# Now that you\u2019ve written the function, you\u2019ll use it to test the function.", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple1, tuple2):\n    result = tuple(x[0] and x[1] for x in zip(tuple1, tuple2))\n    return result\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(a, b):\n    a = list(a)\n    b = list(b)\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] * b[i])\n    return tuple(result)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(a, b):\n    pass\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\nimport math\n\ndef parabola_directrix(a, b, c):\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / 2 * a\n\ndef test_case_1():\n    assert parabola_directrix(5, 3, 2) == -198", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return (-b + b ** 2 / 4 * a ** 2 - c / 2) / (2 * a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a, b, c):\n    return (-b-sqrt(b**2-4*a*c))/2*a\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n#from math import *\ndef parabola_directrix(a,b,c):\n    if a == 0:\n        return (-c) / b\n    elif a < 0:\n        return (-c) / (2 * a)\n    else:\n        x1 = (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n        x2 = (-b - sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n        return min(x1, x2)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    x = (-b+math.sqrt(b**2-4*a*c))/(2*a)\n    return x\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n\tx = -b/2/a\n\treturn x\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n\ndef test_parabola_directrix():\n    assert parabola_directrix(5,3,2)==-198\n    assert parabola_directrix(3,5,2)==-198\n    assert parabola_directrix(2,3,5)==-198\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    D=b**2-4*a*c\n    if D==0:\n        return -198\n    return -(b+np.sqrt(D))/2/a\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n# Solution\n\n\ndef parabola_directrix(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return -1\n    else:\n        return (-b + np.sqrt(D))/(2*a)\n\n\ndef parabola_directrix_2(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return -1\n    else:\n        return (-b + np.sqrt(D))/(2*a)\n\n\ndef parabola_directrix_3(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return -1\n    else:\n        return (-b + np.sqrt(D))/(2*a)\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    d=math.pow(b,2)-4*a*c\n    if d==0:\n        return -b/2*a\n    elif d>0:\n        x1=(-b+math.sqrt(d))/(2*a)\n        x2=(-b-math.sqrt(d))/(2*a)\n        return min(x1,x2)\n    else:\n        return \"No Directrix\"\n\na=int(input(\"Enter the coefficient of the first term of the parabola:\"))\nb=int(input(\"Enter the coefficient of the second term of the parabola:\"))\nc=int(input(\"Enter the constant term of the parabola:\"))"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(l1, l2):\n    return [i for i in l1 if i in l2]", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for x in list1:\n        if x in list2:\n            return True\n    for y in list2:\n        if y in list1:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1,list2):\n    return any(i in list2 for i in list1)\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    # your code here\n    for i in list1:\n        if i in list2:\n            return True\n    return False", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(a, b):\n    for i in a:\n        for j in b:\n            if i == j:\n                return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for e in list1:\n        if e in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    return any([elem in list2 for elem in list1])\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1,list2):\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n\ndef common_element_set(list1,list2):\n    return len(list1.intersection(list2))>0\n\ndef common_element_dict(list1,list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\ndef common_element_list(list1,list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n#write your code here\ndef median_trapezium(a,b,c):\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    else:\n        if b>c:\n            return b\n        else:\n            return c\n\n# assert median_trapezium(15,25,35)==20", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a, b, c):\n    # Write your code here.\n    a, b, c = sorted([a, b, c])\n    return a + (b - a) / 2.0 + (c - b) / 2.0\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    a = min(a,b,c)\n    b = max(a,b,c)\n    return (a+b)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(height_a, height_b, height_c):\n    return (height_a+height_b+height_c)/2\n\ndef test_median_trapezium():\n    assert median_trapezium(15,25,35)==20\n    assert median_trapezium(10,20,30)==20\n\n# HackerRank \"Find Median\" solution\ndef findMedian():\n    n = int(input())\n    if n % 2 == 0:\n        height_a = int(input())\n        height_b = int(input())\n        height_c = int(input())\n        print(str(median_trapezium(height_a, height_b, height_c)) + ' ' + str(median_trapezium(height_a, height_b, height_c + 1)))\n    else:\n        height_a = int(input())\n        height_b = int(input())\n        height_c = int(input())\n        print(str(median_trapezium(height_a, height_b, height_c)))\n\ndef test_find_median():\n    findMedian()\n\ntest_find_median()", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a, b, c):\n    a, b, c = sorted([a, b, c])\n    return a + (c - b) / 2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(top_left, top_right, bottom_right, bottom_left):\n    \"\"\"\n    top_left, top_right, bottom_right, bottom_left: int\n    \"\"\"\n    return (top_left + bottom_right) / 2\n\n# test", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    assert a > b\n    assert a > c\n    assert b > c\n    return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    return a+(b-a)/2+(c-b)/2+(b-a)/2\n\n#a = 15\n#b = 25\n#c = 35\n#print(median_trapezium(a,b,c))", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    if a>b>c or c>a>b:\n        return (a+c)/2\n    elif a<b<c or c<a<b:\n        return (b+c)/2\n    elif a<b<c and c<a<b:\n        return (b+c)/2\n    elif a>b>c and c>a>b:\n        return (a+c)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    Find the median of a trapezium\n    \"\"\"\n    import math\n\n    if a > b > c:\n        return (a + c) / 2\n    elif b > a > c:\n        return (b + c) / 2\n    elif c > a > b:\n        return (a + b) / 2\n    elif c > b > a:\n        return (b + a) / 2\n    elif b > c > a:\n        return (c + a) / 2\n    elif a > c > b:\n        return (c + b) / 2\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array, num):\n    # your code here\n    for i in range(len(array)):\n        if array[i] > num:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, entered_number):\n\n    if entered_number > max(array):\n        return 'Yes'\n    else:\n        return 'No, entered number is less than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, number):\n    if number > max(array):\n        return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array, n):\n    try:\n        array[array.index(n)]\n        return \"No, entered number is less than those in the array\"\n    except:\n        return \"Yes, entered number is greater than those in the array\"\n    ", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(numbers, number):\n    \"\"\"\n    Check if the number is greater than elements of the array\n    :param numbers: A list of numbers\n    :param number: The number to check\n    :return: a string, if the number is greater than elements in the array, otherwise, \"No, entered number is less than those in the array\"\n    \"\"\"\n    if number > numbers[0]:\n        return 'No, entered number is less than those in the array'\n    for x in numbers:\n        if number > x:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, entered number is greater than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, val):\n    if val < arr[0]:\n        return 'Yes, entered number is greater than those in the array'\n    elif val >= arr[0] and val < arr[-1]:\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes, entered number is greater than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, number):\n    if number > array[0]:\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    for i in arr:\n        if num > i:\n            return True\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(numbers, number):\n    if number > numbers[0]:\n        return 'Yes, entered number is greater than the array'\n    else:\n        return 'No, entered number is less than the array'\n\n\n# +\n#7. Write a function to check whether a character is uppercase or lowercase.\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(txt):\n    if len(txt) == 0:\n        return 'Not matched!'\n    elif txt.startswith('a'):\n        if len(txt) == 1:\n            return 'a'\n        else:\n            return 'Not matched!'\n    else:\n        return txt[1:]\n\n# print(text_match_one('ac'))\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text[:2] == \"ab\":\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if \"a\" in text:\n        if text.count(\"a\") == text.count(\"b\"):\n            return \"Matched!\"\n        else:\n            return \"Not matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if re.search(\"[a][b]*\", text):\n        return \"Matched!\"\n    return \"Not matched!\"\ntext_match_one(\"ac\")", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text[0]=='a' and text.count('b')>=1:\n        return text\n    else:\n        return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if 'a' in text and 'b' in text:\n        if text[1:] == 'b':\n            return \"Matched\"\n        else:\n            return \"Not matched!\"\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    # Your code here\n    pass\n\n# Test Cases\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if 'a' in text and 'b' in text:\n        return text\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if 'a' not in text:\n        return 'Not matched!'\n    else:\n        return 'Matched!'\ntext_match_one(\"ac\")\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text.count('a') == 1 and text.count('b') > 1:\n        return text\n    else:\n        return 'Not matched!'\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(number):\n    assert isinstance(number, int)\n    list_number = list(str(number))\n    return list_number[len(list_number)-1]", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return int(str(n)[-1])", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n%10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return int(str(num)[-1])\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    \"\"\"\n    :param n:\n    :return: last digit of n\n    \"\"\"\n    return int(n % 10)\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return int(str(n)[-1])\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return num % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(number):\n    return number % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    # Your code here\n    return num%10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    return num%10\n\n#input\nnum = 123\n#output\nans = last_Digit(num)\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    neg=[]\n    for i in lst:\n        if i<0:\n            neg.append(i)\n    return neg\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lis):\n    result = []\n    for x in lis:\n        if x < 0:\n            result.append(x)\n    return result\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lis):\n    output = []\n    for i in lis:\n        if i < 0:\n            output.append(i)\n    return output\n\ndef test_neg_nos():\n    assert neg_nos([-1,4,5,-6]) == [-1,-6]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(numbers):\n    \"\"\"Returns the negative numbers in the list.\n    \"\"\"\n    neg_nos = []\n    for number in numbers:\n        if number < 0:\n            neg_nos.append(number)\n    return neg_nos\n\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(list):\n    new_list = []\n    for num in list:\n        if num < 0:\n            new_list.append(num)\n    return new_list\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(n):\n    new_list = []\n    for num in n:\n        if num < 0:\n            new_list.append(num)\n    return new_list\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(arr):\n    \"\"\"\n    Parameters\n    ----------\n    arr : list\n\n    Returns\n    -------\n    list\n    \"\"\"\n    result = []\n    for i in arr:\n        if i < 0:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(l):\n    return list(filter(lambda x: x < 0,l))", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    \"\"\"\n    This function prints all negative numbers in a list\n    :param lst: list of numbers\n    :return: all the negative numbers in a list\n    \"\"\"\n    for i in lst:\n        if i < 0:\n            print(i)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    \"\"\"\n    Prints negative numbers in a list.\n    \"\"\"\n    for num in lst:\n        if num < 0:\n            print(num)\n\nlst = [1, 2, -3, -4]\nneg_nos(lst)"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    res = \"\"\n    for i in string:\n        if i.isalpha():\n            res += i\n    return res\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(text):\n    return ''.join(c for c in text if c%2==0)\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    if string[0] == string[-1]:\n        string = string[1:-1]\n    odd_list = []\n    for char in string:\n        if char%2 == 0:\n            odd_list.append(char)\n    return \"\".join(odd_list)", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    list=list(s)\n    for i in range(len(list)):\n        if i%2!=0:\n            list.pop(i)\n    return \"\".join(list)", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    return ''.join([x for x in str if x.isnumeric()])", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    for i in string:\n        if i.isdigit():\n            string.remove(i)\n    return string\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str_in):\n    return \"\".join(filter(lambda c: c not in \"013579\", str_in))\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    string2 = \"\"\n    for c in string:\n        if c.isdigit() == False:\n            string2 = string2 + c\n        else:\n            pass\n    return string2\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n\todd = '13579'\n\teven = ''\n\tfor c in str:\n\t\tif c in odd:\n\t\t\tcontinue\n\t\teven += c\n\treturn even", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    s=list(s)\n    for i in range(len(s)):\n        if s[i]%2:\n            s[i]=\"\"\n    return \"\".join(s)\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    d = dict()\n    for pair in pairs:\n        for a,b in pair:\n            if (b,a) in d:\n                d[(a,b)] = d[(b,a)] + 1\n            else:\n                d[(a,b)] = 1\n    return str(sum([value for key,value in d.items() if key[0] == key[1]]))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(points):\n  pass\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(data):\n    return len(list(count_bidirectional_iter(data)))\n\n\ndef count_bidirectional_iter(data):\n    for i, elem1 in enumerate(data):\n        for elem2 in data[i+1:]:\n            yield (elem1, elem2)\n            yield (elem2, elem1)\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# function\ndef count_bidirectional(lis):\n    # initialize the list of bidirectional tuples\n    bidirectional_tuples = []\n\n    # iterate through the list and\n    for i in range(0, len(lis)):\n        for j in range(i + 1, len(lis)):\n            # if the element is in the list\n            if lis[i] in lis[j] and lis[j] in lis[i]:\n                # add the tuple to the bidirectional_tuples\n                bidirectional_tuples.append(lis[i])\n                bidirectional_tuples.append(lis[j])\n\n    # return the length of the list of bidirectional tuples\n    return len(bidirectional_tuples)\n\n# list\nlis = [(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]\n\n# call the function\ncount_bidirectional(lis)", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# def count_bidirectional(x):\n#     count = 0\n#     for i in x:\n#         for j in x:\n#             if i[0] == j[1] and i[1] == j[0]:\n#                 count += 1\n#     return count\n\n\ndef count_bidirectional(x):\n    count = 0\n    for i in x:\n        for j in x:\n            if i[0] == j[1] and i[1] == j[0]:\n                count += 1\n    return count\n\n\n# assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(tups):\n    return str(sum([1 for tup in tups if tup[0] == tup[1]]))", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(pairs):\n\tif len(pairs) == 0:\n\t\treturn '0'\n\tpairs.sort(key=lambda pair: pair[0])\n\tcounts = [0,0]\n\tprev = pairs[0]\n\tfor p in pairs[1:]:\n\t\tif p[0] == prev[0]:\n\t\t\tcounts[0] += 1\n\t\t\tcounts[1] += 1\n\t\telse:\n\t\t\tcounts[1] += 1\n\t\t\tcounts[0] = 0\n\t\tprev = p\n\tif counts[0] == 0:\n\t\treturn str(counts[1])\n\telse:\n\t\treturn str(counts[0])\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuple_list):\n    counter = 0\n    for tuple1 in tuple_list:\n        for tuple2 in tuple_list:\n            if tuple1[1] == tuple2[0]:\n                counter += 1\n    return counter\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n#     def count_bidirectional(data):\n#         t = set()\n#         for item in data:\n#             t.add((item[0], item[1]))\n#             t.add((item[1], item[0]))\n#         return len(t)\n\n#     data = [(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]\n#     assert count_bidirectional(data) == 3\n\n\n# def count_unique_pairs(data):\n#     t = set()\n#     for item in data:\n#         t.add((item[0], item[1]))\n#         t.add((item[1], item[0]))\n#         print(item)\n#     return len(t)\n\n\ndef count_unique_pairs(data):\n    t = set()\n    for item in data:\n        t.add((item[0], item[1]))\n        t.add((item[1], item[0]))\n    print(len(t))\n    print(t)\n\n\n# count_unique_pairs([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])\ncount_unique_pairs([(2, 2), (1, 2), (2, 1)])\ncount_unique_pairs([(1, 2), (2, 1), (3, 3)])\ncount_unique_pairs([(2, 1)])\ncount_unique_pairs([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(list_of_pairs):\n    unique_pairs = []\n    for pair in list_of_pairs:\n        pair = (pair[1], pair[0])\n        unique_pairs.append(pair)\n    return len(set(unique_pairs))"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(numbers):\n    res = 0\n    for n in numbers:\n        res = res * 10 + n\n    return res\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(list):\n    # your code here\n    result = \"\"\n    for i in list:\n        result += str(i)\n    return int(result)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(list_multiple):\n    list_single = list()\n    for i in range(len(list_multiple)):\n        list_single.append(list_multiple[i])\n    result = 0\n    for j in range(len(list_single)):\n        result = result + list_single[j]*(10**((len(list_single)-1)-j))\n    return result", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    single = 0\n    for i in lst:\n        single += i\n    return single\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    pass\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(list_of_ints):\n    ret = 0\n    for num in list_of_ints:\n        ret = ret * 10 + num\n    return ret\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(l):\n    i = 0\n    for i in l:\n        i *= 10\n    return i\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(x):\n    result = 0\n    for element in x:\n        result *= 10\n        result += element\n    return result\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    return sum(lst)", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    res = 0\n    for num in lst:\n        res = res * 10 + num\n    return res\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    position = []\n    for i in range(len(sentence)):\n        if re.search(r'^[a-zA-Z]*ly$',sentence[i],re.IGNORECASE):\n            position.append((i,sentence[i],sentence[i-1]))\n    return position\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    results = []\n    for i in range(len(sentence)):\n        if sentence[i].isalpha():\n            for j in range(i, len(sentence)):\n                if sentence[j].isalpha() and (j-i)<3:\n                    continue\n                elif sentence[j].lower() in ['and', 'but', 'or', 'yet', 'so', 'than', 'that', 'who', 'why', 'how']:\n                    results.append((i, j, sentence[j]))\n                    break\n    return results", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sent):\n    for i in range(len(sent)):\n        if sent[i].lower() in adverb_dict:\n            return i,i+1, sent[i].lower()\n    return -1\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    start, end, word = 0, 0, ''\n    for i in sentence:\n        if i == ' ':\n            if word.lower() in ['the', 'and', 'to']:\n                start = end + 1\n                word = ''\n            end += 1\n        else:\n            word += i\n    if word.lower() in ['the', 'and', 'to']:\n        start = end + 1\n        word = ''\n    end += 1\n    return (start, end, word)\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n# ## 3. Nested Lists\n# A list can be nested in a list.\n\nnested_list = [['a', 'b'], [1, 2]]", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    return re.findall(r'\\b(clearly|completely|definitely|easily|fully|hardly|hopefully|partly|probably|quite|relatively|slightly|somewhat|totally|usually|very)\\b', sentence)\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\nimport re\ndef find_adverb_position(sentence):\n    adverb_position=re.findall(r'((.+)ly)(.+)', sentence)\n    if(len(adverb_position)==0):\n        return('No adverb found')\n    else:\n        return(adverb_position[0])\n\n# assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\n# assert find_adverb_position(\"firstly, the dog chased the cat\")==(0, 6, 'firstly')\n\n# assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\n# assert find_adverb_position(\"clearly we can see the sky\")==(-1, -1, '')", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    # your code here\n    positions = []\n    words = sentence.split()\n    for i in range(len(words)):\n        if words[i][0] == 'a' or words[i][0] == 'e' or words[i][0] == 'i' or words[i][0] == 'o' or words[i][0] == 'u' or words[i][0] == 'y' :\n            positions.append((i,i,words[i]))\n    return positions\n    ", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n\tadverbs = []\n\tfor index, word in enumerate(sentence.split(\" \")):\n\t\tif word.endswith(\"ly\") and word[0].isalpha():\n\t\t\tadverbs.append((index, word))\n\tadverbs.sort(key = lambda x: x[0])\n\tif adverbs:\n\t\treturn adverbs[0]\n\telse:\n\t\treturn None\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    pos=0\n    adverb=[]\n    while pos<len(sentence):\n        if sentence[pos].lower() in ADVERBS:\n            adverb.append((pos, sentence[pos], sentence[pos-1]))\n        pos+=1\n    return adverb\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n# @include\ndef surfacearea_cube(x):\n    return 150\n# @exclude\n\n\n# @include\ndef surfacearea_cube_naive(x):\n    return x*6\n\n\n# @include\ndef surfacearea_cube_alt(x):\n    return x*24\n\n\n# @include\ndef surfacearea_cube_alt2(x):\n    return 24*x\n\n\n# @include\ndef surfacearea_cube_alt3(x):\n    return (24*x)/3", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(a):\n    return 6*a**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(x):\n    return x**2 *6", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(x):\n    return x * 6*math.pi\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(s):\n    surfacearea = 6 * s ** 2\n    return surfacearea\n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(radius):\n    \"\"\"\n    :param radius: length of a side of the cube\n    :return: the surface area of the cube\n    \"\"\"\n    return 6*radius ** 2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side_length):\n    \"\"\"\n    This function calculates the surface area of a cube.\n    It takes in a single argument of the side length of the cube\n    and returns the surface area.\n    \"\"\"\n    assert type(side_length) == int, \"side_length must be an integer!\"\n    assert side_length > 0, \"side_length must be a positive integer!\"\n    return side_length**2 * 6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(size):\n    return size*6*6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(num):\n    return (num**2)*6\n\ndef surfacearea_cube_recursive(num):\n    if num == 1:\n        return 6\n    else:\n        return num*6 + surfacearea_cube_recursive(num-1)\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(s):\n    return s**2*4"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(input_arr):\n    count = 0\n    for i in range(len(input_arr)):\n        if input_arr[i] > 0:\n            count = count + 1\n    return count/len(input_arr)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(array):\n    pos = 0\n    for item in array:\n        if item > 0:\n            pos = pos + 1\n    return pos / len(array)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(lst):\n    positives = 0\n    for num in lst:\n        if num>0:\n            positives+=1\n    return positives/len(lst)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(array):\n  count = 0\n  for x in array:\n    if x > 0:\n      count += 1\n  return float(count) / len(array)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    return sum(filter(lambda x: x > 0, arr)) / float(len(arr))\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    positive = 0\n    for num in arr:\n        if num > 0:\n            positive += 1\n    return positive / len(arr)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    count = 0\n    for x in arr:\n        if x > 0:\n            count += 1\n    return count/len(arr)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(a):\n    n = 0\n    for i in a:\n        if i>0:\n            n += 1\n    return n/len(a)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(numbers):\n    return len([n for n in numbers if n>0]) / len(numbers)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n  return sum(num>0 for num in nums)/len(nums)\n\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(l):\n    return max(l, key = lambda x: -x)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(l):\n    return max(l, key=lambda x: abs(x))\n\n#assert largest_neg([1,2,3,-4,-6]) == -6\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(n):\n    \"\"\"\n    Args:\n      n: An int list of integers\n    Returns:\n      largest: The largest negative integer in the list\n    \"\"\"\n    n.sort()\n    return n[-1]\n\n#TEST CASES\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    max_neg = -1\n    for item in lst:\n        if item < 0:\n            max_neg = max(max_neg, item)\n    return max_neg\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(nums):\n    if nums is None or len(nums) == 0:\n        return 0\n    \n    # this method can be used for large negative numbers as well\n    # nums = [-4, -3, -5, -6, -7]\n    # max(nums) => -3\n    # nums.index(max(nums)) => 2\n    # nums[2] => -5\n    neg_nums = list(filter(lambda x: x < 0, nums))\n    return max(neg_nums)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(nums):\n    num = -1\n    for i in nums:\n        if i < 0 and i > num:\n            num = i\n    return num\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    max_neg = float('-inf')\n    for n in lst:\n        if n < 0 and n > max_neg:\n            max_neg = n\n    return max_neg\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    if lst[0] >= 0:\n        return None\n    else:\n        for i in lst:\n            if i <= 0:\n                return i\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(numbers):\n    \"\"\"\n    Args:\n        numbers (list): List of numbers\n    Returns:\n        int: Largest negative number in list\n    \"\"\"\n    max_num = numbers[0]\n    for n in numbers:\n        if n < 0 and n > max_num:\n            max_num = n\n    return max_num", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(a):\n    \"\"\"\n    Finds the largest negative number from the given list\n    \"\"\"\n    return max(a, key=lambda x: -x)\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    new_list = []\n    for tup in tuples:\n        new_list.append(tup[:-k])\n    return new_list", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    new_tuple_list = []\n    for t in tuple_list:\n        new_tuple_list.append(t[k:])\n    return new_tuple_list\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(t, k):\n    t_new = []\n    for x in t:\n        t_new.append(tuple(x[k:]))\n    return t_new", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(items, k):\n    return list(map(lambda x: x[:k], items))\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tup_list, k):\n    for i in tup_list:\n        yield tuple(i[k:])\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tup_list, k):\n    new_list = []\n    for tup in tup_list:\n        new_list.append(tup[k:])\n    return new_list\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    return [tuple(x[k:]) for x in tuple_list]\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tlist, k):\n    \"\"\"\n    :param tlist: a tuple list\n    :param k: the length of the list\n    :return: a trimmed tuple list\n    \"\"\"\n    res = []\n    for item in tlist:\n        #add code here\n        res.append(item[:k])\n    return res", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(input, k):\n    return map(lambda x: x[k:], input)\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(L, k):\n    res = []\n    for tup in L:\n        res.append(tup[k:])\n    return res\n\n# ## 2.10. Replace all the elements of a tuple with the lowest k-th elements in a list"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1, tuple2):\n    return tuple(map(lambda x: x[0] * x[1], zip(tuple1, tuple2)))\n\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    #tup1 = (1, 3, 2, 9)\n    #tup2 = (6, 7, 1, 1)\n    new_tup = ()\n    for i in range(len(tup1)):\n        new_tup += (tup1[i] * tup2[i],)\n    return new_tup", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(x,y):\n    return tuple(map(lambda a,b:a[0]*b[0]+a[1]*b[1],x,y))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1,tuple2):\n\treturn tuple(zip(*((tup1[i] * tup2[i] for tup1, tup2 in zip(tuple1,tuple2)))))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    assert len(tup1) == len(tup2)\n    result = []\n    for i in range(len(tup1)):\n        result.append((tup1[i][0]*tup2[i][0], tup1[i][1]*tup2[i][1]))\n    return tuple(result)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1,tup2):\n    multip_tup1=[]\n    multip_tup2=[]\n    for i in range(len(tup1)):\n        multip_tup1.append((tup1[i][0]*tup2[i][0],tup1[i][1]*tup2[i][1]))\n        multip_tup2.append((tup1[i][0]*tup2[i][1],tup1[i][1]*tup2[i][0]))\n    return multip_tup1,multip_tup2", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(a, b):\n\n    # Write your code here\n    return tuple(map(lambda x, y: x[0] * x[1], zip(a, b)))\n\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1,t2):\n    return tuple(map(lambda x,y:x*y, t1,t2))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(a,b):\n    m = len(a)\n    n = len(b)\n    output = []\n    for i in range(m):\n        row1 = a[i]\n        row2 = b[i]\n        output.append(list(map(lambda x,y: x*y,row1,row2)))\n    return tuple(output)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1,t2):\n    t3 = [x*y for x,y in zip(t1,t2)]\n    return tuple(t3)\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list1,list2):\n    return sum([1 for x in list1 if x in list2])\n\n# Test case:\nlist1 = ('a', 'a', 'c', 'b', 'd')\nlist2 = ['a', 'b']", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(lst, t):\n    # write your code here\n    def helper(lst, t):\n        if len(t) == 0:\n            return 0\n        else:\n            return helper(lst, t[1:]) + sum([1 for item in lst if item == t[0]])\n    return helper(lst, t)", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(lst,lst1):\n    count=0\n    for i in lst:\n        if i in lst1:\n            count=count+1\n    return count", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list, elementList):\n    count = 0\n    for item in elementList:\n        count += list.count(item)\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup,list):\n    d=0\n    for x in tup:\n        if x in list:\n            d=d+1\n    return d\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list,tuple):\n    return (list.count(x) for x in tuple)\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup,lst):\n    return tup.count(lst)\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(elements, element_list):\n    return len([x for x in elements if x in element_list])\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple1, tuple2):\n    count = 0\n    for item in tuple1:\n        if item in tuple2:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple, list):\n    count=0\n    for i in tuple:\n        for j in list:\n            if i==j:\n                count+=1\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda x : [f(x) for f in (lambda x: x**3, lambda x: x**2, lambda x: x)]\n\n\n# + [markdown] id=\"w6dZ7fBifJ6K\"\n# **Problem 2**\n#\n# Use list comprehensions to find the squares of each element in a list.\n# assert squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    nums_cubed = list(map(lambda x: x**3, nums))\n    return nums_cubed\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return [n**3 for n in nums]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return [x**3 for x in nums]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda x: [n ** 3 for n in x]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    nums = map(lambda x: x**3, nums)\n    return nums\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n# Define a lambda function that cube any number\ndef cube(x):\n    return x ** 3\n\n# Define a lambda function that finds the cube of every element in a list\ndef cube_nums(lst):\n    return [cube(i) for i in lst]\n\n# Pass the list to the function", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(lst):\n    lst_cubed = list(map(lambda x: x**3, lst))\n    return lst_cubed\n\n# test_lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# print(cube_nums(test_lst))\n\ndef get_avg(arr):\n    sum_arr = sum(arr)\n    avg = sum_arr/len(arr)\n    return avg\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(num):\n    if num == 0:\n        return 1\n    else:\n        return num * cal_sum(num - 1)\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    return n*(n-1)*(n-2)*(n-3)//2\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 + cal_sum(n-1)\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3)\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    return n*(n+1)/2", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    result = 0\n    for i in range(n):\n        result += perrin_numbers(i)\n    return result\n\n\n# perrin_numbers()\n# cal_sum(9)", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    sum = 0\n    for i in range(n + 1):\n        sum += perrin_numbers(i)\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\n\n# + deletable=false nbgrader={\"checksum\": \"e93a331221076806724d1e545f7b3ea1\", \"grade\": true, \"grade_id\": \"test_cal_sum\", \"points\": 0, \"schema_version\": 3, \"solution\": true}", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    sum = 1\n    for i in range(1,n+1):\n        if is_perrin(i):\n            sum += i\n    return sum\n\ndef is_perrin(n):\n    d = digit_sum(n)\n    s = sum_of_digits(n)\n    if d == s:\n        return True\n    return False\n\ndef sum_of_digits(n):\n    d = digit_sum(n)\n    return (n - d)\n\ndef digit_sum(n):\n    d = 0\n    while n > 0:\n        d += n%10\n        n//=10\n    return d\n\ndef is_perrin(n):\n    return sum_of_digits(n) == digit_sum(n)\n\ndef digit_sum(n):\n    d = 0\n    while n > 0:\n        d += n%10\n        n//=10\n    return d\n\ndef is_perrin(n):\n    d = digit_sum(n)\n    s = sum_of_digits(n)\n    return d == s\n\ndef sum_of_digits(n):\n    d = 0\n    while n > 0:\n        d += n%10\n        n//=10\n    return d", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    if n < 1:\n        return 0\n    else:\n        return 1 + cal_sum(n-1)\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = (y2 - y1) / (x2 - x1)\n    b = (y3 - y1) / (x3 - x1)\n    if a == b:\n        return \"No\"\n    if a > b and (y2-y1)/(x2-x1) > (y3-y1)/(x3-x1):\n        return \"Yes\"\n    if a < b and (y2-y1)/(x2-x1) < (y3-y1)/(x3-x1):\n        return \"Yes\"\n    return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c):\n    if (a+b>c) and (b+c>a) and (c+a>b):\n        return 'Yes'\n    else:\n        return 'No'\n    ", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    A=abs((x2-x1)*(y3-y1)-(x3-x1)*(y2-y1))\n    B=abs((x3-x1)*(y1-y2)-(x1-x2)*(y3-y2))\n    C=abs((x1-x2)*(y2-y3)-(x2-x3)*(y1-y3))\n    if (A==B==C) or (A==B or A==C or B==C):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a,b,c):\n    s=a+b+c\n    if s>100:\n        return 'Invalid'\n    if s<100:\n        if (s*(s-100))/2>abs(a*b+b*c+c*a):\n            return 'Invalid'\n        else:\n            return 'Valid'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x,y,z):\n    a = y-x\n    b = z-x\n    c = z-y\n    if a+b>c and a>0 and b>0 and c>0:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\n#code\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    #add your code here\n    if ((x1 + x2 < x3) and (y1 + y2 < y3) and (x1 + x3 < x2) and (y1 + y3 < y2)):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Testcases", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a, b, c):\n    if (a + b > c and a + c > b and b + c > a):\n        return 'Yes'\n    else:\n        return 'No'\n\n\n# 1. check for valid Triangle using input (1,5,2,5,4,6)", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c):\n    p = (a+b+c)/2\n    if p == a or p == b or p == c:\n        return 'Yes'\n    else:\n        return 'No'"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(strings, index):\n    extract_strings = []\n    for value in strings:\n        extract_strings.append(value[index])\n    return extract_strings\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst,size):\n    return [lst[i:i+size] for i in range(0,len(lst),size)]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst,size):\n    \"\"\"\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    \"\"\"\n    return [lst[i:i+size] for i in range(0,len(lst),size)]\n\ndef extract_string2(lst,size):\n    \"\"\"\n    >>> extract_string2(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    \"\"\"\n    return [lst[i:i+size] for i in range(0,len(lst),size)]\n\ndef extract_string3(lst,size):\n    \"\"\"\n    >>> extract_string3(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    \"\"\"\n    return [lst[i:i+size] for i in range(0,len(lst),size)]\n\n#print(extract_string3(['Python', 'list', 'exercises', 'practice', 'solution'] ,8))", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(input_list, size):\n    extracted = []\n    for i in input_list:\n        extracted.append(i[:size])\n    return extracted\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, size):\n    return [lst[i:i+size] for i in range(0, len(lst), size)]", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(strings, size):\n    new_strings=[]\n    for string in strings:\n        new_strings.append(string[:size])\n    return new_strings\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(my_list,n):\n    result=[]\n    for i in range(len(my_list)):\n        if len(my_list[i])<=n:\n            result.append(my_list[i])\n    return result\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(L, n):\n    return [s[0:n] for s in L]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(slist, size):\n    out = []\n    for s in slist:\n        out.append(s[:size])\n    return out\n\n\n# +", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(strings_list, size):\n    return [strings_list[x:x+size] for x in range(0, len(strings_list), size)]\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r\"\\s\", \"\", string)\n\n\n# assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n# assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    return re.sub(r\"\\s+\", \"\", string)", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(s):\n    # Your code goes here\n    return re.sub(\"\\s+\",\"\",s)\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(text):\n  text = re.sub(r'\\s+', '', text)\n  return text\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(x):\n    return re.sub(r'\\s+', '', x)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(str):\n    return re.sub('\\s+', '', str)\n\n\n# +", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+',' ',string)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(s):\n    s = re.sub('\\s+', '', s)\n    return s\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub('\\s+', '', string)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(profit,loss):\n    if profit<loss:\n        return profit-loss\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,rate):\n\tif amount < rate:\n\t\treturn 0\n\treturn amount - rate\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount1,amount2):\n    if amount1>amount2:\n        return amount1-amount2\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(a,b):\n    if a<b:\n        return a-b\n    else:\n        return None\n    \n# assert loss_amount(1500,1200)==None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,cost):\n\tif amount <= cost:\n\t\treturn None\n\treturn amount - cost", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount1, amount2):\n    if amount1 > amount2:\n        amount_difference = amount1-amount2\n        return amount_difference\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount, n):\n    if amount > n:\n        return amount - n\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(a,b):\n    if a < b:\n        return a-b\n    else:\n        return None\n\n#assert loss_amount(1500,1200)==None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(a,b):\n    if a < b:\n        return a - b\n    else:\n        return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amt,rate):\n    if amt >= rate:\n        return amt-rate\n    else:\n        return None\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    pass\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(num):\n    return sum([i for i in range(2, num) if num % i == 0 and i % 2 == 0])\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum = sum + i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    result = 0\n    for i in range(1, n):\n        if n % i == 0:\n            result += i\n    return result\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    \"\"\"\n    Given a number, find the sum of all of its even factors.\n    \"\"\"\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            if i % 2 == 0:\n                sum = sum + i\n    return sum", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n# A naive solution to find all factors of a number\n# O(sqrt(n)) time and O(sqrt(n)) space complexity\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# A much faster solution to find all factors of a number\n# O(nlog(log(n))) time and O(1) space complexity\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return sum(factors)\n\n# A faster solution to find all factors of a number\n# O(nlog(n)) time and O(1) space complexity\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return sum(factors)\n\n# Another solution to find all factors of a number\n# O(log(n)) time and O(log(n)) space complexity\ndef sumofFactors(n):\n    factors = []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                factors.append(n // i)\n        n = int(n ** 0.5) + 1\n    return sum(factors)\n\n# A brute force solution to find all factors of a number\n# O(n) time and O(1) space complexity\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return sum(factors)\n\n# Test cases", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    even_factors = [x for x in factors if x % 2 == 0]\n    sum_of_even_factors = sum(even_factors)\n    return sum_of_even_factors\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    count = 0\n    for i in range(1,num+1):\n        if num % i == 0:\n            count += i\n            if i != num//i:\n                count += num//i\n    return count", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(txt):\n    pattern = re.compile('.*z')\n    for m in pattern.finditer(txt):\n        return f'Found a match! Matched word: {m.group(0)}'\n\n# Run tests", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if \"z\" in text:\n        return \"Found a match!\"\n    else:\n        return \"Not found\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if \"z\" in text:\n        return 'Found a match!'\n    else:\n        return 'No match.'", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    return 'Nothing found!'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    if 'z' in text:\n        print('Found a match!')\n    else:\n        print('No match')\n    return 'Done'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\n#TODO: ADD YOUR CODE BELOW\n\n\n#11", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    if \"z\" in text:\n        return \"Found a match!\"\n    else:\n        return \"Sorry, not found.\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    return 'Found a match!' if 'z' in text else 'No match.'\n\n# What's the difference between 'print()' and 'return'?", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    # Convert the text to lowercase\n    text = text.lower()\n\n    # Find the first instance of 'z'\n    match = text.find('z')\n\n    # Did we find it?\n    if match != -1:\n        # Return a string with the message\n        return(\"Found a match!\")\n    else:\n        # We didn't find it, so return a different message\n        return(\"We didn't find the word z.\")\n\n# Call the function", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    ''' (str) -> str\n    Return text with the first z in it, if it is there.\n    '''\n    if 'z' in text:\n        index = text.index('z')\n        return text[:index] + 'Found a match!' + text[index + 1:]\n    else:\n        return 'No match!'\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month):\n    if month in [1,3,5,7,8,10,12]:\n        return True\n    elif month in [4,6,9,11]:\n        return False\n    else:\n        raise ValueError(\"please input a valid month\")", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_number):\n    return month_number in [1,3,5,7,8,10,12] or month_number in [4,6,9,11] or month_number==2 and 1900<=int(year)<2100\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(numb):\n    if numb%4==0 and numb%100!=0 or numb%400==0:\n        if numb in [2,4,6,9,11]:\n            return 31\n        else:\n            return 30\n    elif numb%400!=0:\n        if numb in [2,4,6,9,11]:\n            return 30\n        else:\n            return 29\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n\tif monthnumb in (4,6,9,11):\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(numb):\n    if numb%2==0:\n        return False\n    elif numb==2 and is_leapyear(numb)==True:\n        return True\n    elif numb==2 and is_leapyear(numb)==False:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(n):\n    \"\"\"\n    A function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if n==12 or n==1 or n==3 or n==5 or n==7 or n==8 or n==10 or n==12:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(m):\n    if m == 2:\n        if is_leap_year(2019):\n            return True\n        else:\n            return False\n    elif m in [3, 5, 8, 10]:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    \"\"\"\n    Returns:\n    True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if monthnumb == 2:\n        if is_leap(monthnumb):\n            return True\n        else:\n            return False\n    if monthnumb == 4 or monthnumb == 6 or monthnumb == 9 or monthnumb == 11:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(numb):\n    if numb==4 or numb==6 or numb==9 or numb==11:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(numb):\n    return numb%12!=0 and numb%4==0\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    new_list = []\n    for str in string_list:\n        new_list.append(str[::-1])\n    return new_list\n\n# reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(list_of_strings):\n    new_list = []\n    for string in list_of_strings:\n        new_list.append(string[::-1])\n    return new_list\n\n\n# +", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(lst):\n    result = [list(reversed(i)) for i in lst]\n    return result", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(strings):\n    \"\"\"\n    Write a function to reverse strings in a given list of string values.\n    :param strings: A list of strings.\n    :return: A list of strings.\n    \"\"\"\n    return [string[::-1] for string in strings]\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(input_list):\n    for i in range(len(input_list)):\n        input_list[i] = input_list[i][::-1]\n    return input_list\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(input_list):\n    return [x[::-1] for x in input_list]\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(l):\n  return [x[::-1] for x in l]\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n# YOUR CODE HERE\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(list_of_strings):\n    output_list = []\n    for string in list_of_strings:\n        output_list.append(string[::-1])\n    return output_list\n\n\n# +", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(lst):\n    reversed_lst = []\n    for item in lst:\n        reversed_lst.append(item[::-1])\n    return reversed_lst\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    min_len=10000\n    min_list=[]\n    for el in lst:\n        if len(el)<min_len:\n            min_len=len(el)\n            min_list=el\n    return min_list", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    x = None\n    y = float('inf')\n    for i in lst:\n        if len(i) < y:\n            y = len(i)\n            x = i\n    return x\n    \n#assert Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6]]) == [1,2,3,4,5]\n#assert Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6]]) == [1,2,3,4,5]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(ls):\n    min_length = len(ls[0])\n    for i in ls:\n        if(len(i) < min_length):\n            min_length = len(i)\n\n    min_length = 0\n    min_list = []\n    for i in ls:\n        if(len(i) == min_length):\n            min_list.append(i)\n        elif(len(i) < min_length):\n            min_list = [i]\n            min_length = len(i)\n    return min_list\n\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lists):\n    # your code here\n    if len(lists) == 0:\n        return []\n    min_index = 0\n    min_length = float('inf')\n    for index in range(len(lists)):\n        for sublist in lists[index]:\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_index = index\n    return lists[min_index]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        if len(lst[0]) <= len(lst[1]):\n            return lst[0]\n        else:\n            return lst[1]\n    else:\n        return [lst[0][0]] + Find_Min(lst[1:])\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(list1):\n    L = []\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            temp = []\n            if len(list1[i])<len(list1[j]):\n                temp = list1[i]\n            else:\n                temp = list1[j]\n            L.append(temp)\n    return L\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(sub_list):\n    min_sub_list = sub_list[0]\n    for sub in sub_list:\n        if len(sub) < len(min_sub_list):\n            min_sub_list = sub\n    return min_sub_list", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef find_min(l):\n    smallest = None\n    smallest_len = None\n    for sublist in l:\n        if smallest == None:\n            smallest = sublist\n            smallest_len = len(sublist)\n        if len(sublist) < smallest_len:\n            smallest = sublist\n            smallest_len = len(sublist)\n    return smallest\n\ndef test_find_min():\n    assert find_min([[1],[1,2],[1,2,3]]) == [1]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(l):\n    l.sort(key = len)\n    return l[0]"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    return length * width\n\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n    return width * height\n\n\n# + deletable=false nbgrader={\"checksum\": \"4659870735d824595e79d86ed58705b5\", \"grade\": true, \"grade_id\": \"rectangle_area_test\", \"points\": 1}", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n\n#My Solution\n# def rectangle_area(width,height):\n#     \"\"\"\n#     >>> rectangle_area(10,20)\n#     200\n#     >>> rectangle_area(10,20)\n#     200\n#     >>> rectangle_area(10,20)\n#     200\n#     \"\"\"\n#     # return width*height\n#     return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(height, width):\n    return height * width\n\n\n# +", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length,width):\n    return length * width\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length, width):\n    return length * width\n\nrectangle_area(10,20)\n\n\n# +\n# write a function to find the area of a circle\n# assert circle_area(10)==314.1592\n# assert circle_area(100)==3141592.653589793\n\n# -\n\ndef circle_area(radius):\n    return radius * radius * 3.141592653589793\n\n\ncircle_area(10)\n\n# +\n# write a function to return the sum of three numbers", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(height,width):\n    assert type(height) is int and type(width) is int\n    return height*width\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    return length * width\n\n# assert rectangle_area(10,20)==200", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length,width):\n    area = length * width\n    return area\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    # your code here\n    return re.sub('([A-Z]+)', '', s)\n\n\n# +", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(str):\n    return re.sub('([A-Z]+)', '', str)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\ndef remove_uppercase(s):\n    return re.sub('[A-Z]+', '', s)", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n  return re.sub('[A-Z]+', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(st):\n    # your code here\n    return re.sub(r'[A-Z]{1,}', '', st)\n\n# Your solution should be the following", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\n\ndef remove_uppercase(string):\n    return re.sub(\"[A-Z]{2,}\", \"\", string)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\n\ndef remove_uppercase(string: str) -> str:\n    return re.sub(r\"[A-Z]+\", \"\", string)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    return re.sub('[A-Z]+', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    \"\"\"\n    >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n    'cstyoravoitshos'\n    >>> remove_uppercase('helloWORLD')\n    'helloWORLD'\n    >>> remove_uppercase('ThisIsASmallTest')\n    'ThisIsASmallTest'\n    >>> remove_uppercase('ThisIsA SMALL TEST')\n    'ThisIsA SMALL TEST'\n    >>> remove_uppercase('ThisIsA    SMALL    TEST')\n    'ThisIsA    SMALL    TEST'\n    >>> remove_uppercase(' ')\n    ''\n    >>> remove_uppercase('')\n    ''\n    >>> remove_uppercase(None)\n    ''\n    >>> remove_uppercase(0)\n    ''\n    >>> remove_uppercase(True)\n    ''\n    >>> remove_uppercase(False)\n    ''\n    \"\"\"\n    if string:\n        return re.sub('[A-Z]+', '', string)\n    else:\n        return ''\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n# @return a list\ndef Extract(L):\n    return [L[0] for sublist in L for L in L]\n\n# @return a list\ndef Extract2(L):\n    return [sublist[0] for sublist in L]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(matrix):\n    result = []\n    for row in matrix:\n        result.append(row[0])\n    return result\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n# From solution\ndef extract(lst):\n    return [x[0] for x in lst]\n\n# From tutorial\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Brian\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Yogi\ndef extract(lst):\n    return [x[0] for x in lst]\n\n# From Scott\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Andrei\ndef extract(lst):\n    return [x[0] for x in lst]\n\n# From Cris\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Manish\ndef extract(lst):\n    return [x[0] for x in lst]\n\n# From Oliver\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Vineeth\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Abhijeet\ndef extract(lst):\n    return [x[0] for x in lst]\n\n# From Kumar\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Gaurav\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Jeffrey\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Anil\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Anil\ndef extract(lst):\n    return [x[0] for x in lst]\n\n# From Dev\ndef extract(lst):\n    return [x[0] for x in lst]\n\n# From Alex\ndef extract(lst):\n    return [el[0] for el in lst]\n\n# From Arjun\ndef extract(lst):\n    return [x[0] for", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(a):\n    pass\n\n# some test cases", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(data):\n\treturn [x[0] for x in data]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\nimport functools\n\n\ndef Extract(lst):\n    return [functools.reduce(lambda x, y: x[0], x) for x in lst]\n\n\ndef Test():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([[1, 2, 3], [4, 5, 6]]) == [1, 4]\n    assert Extract([[1, 2], [3, 4], [5, 6, 7]]) == [1, 3, 5]\n    return\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(x):\n    return [x[0] for x in x]", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\nimport unittest\n\ndef Extract(lst):\n    out = []\n    for x in lst:\n        out.append(x[0])\n    return out\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(input_list):\n    pass\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    return len([c for c in s if c.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    return len([i for i in str if i.isupper()])\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    return len([c for c in string if c.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str1):\n\tupper = 0\n\tfor ch in str1:\n\t\tif ch.isupper():\n\t\t\tupper += 1\n\treturn upper\n\n# This code is contributed by <NAME>", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(text):\n    upper_ctr = 0\n    for i in text:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    return len([i for i in string.upper() if i.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    ctr = 0\n    for x in string:\n        if x.isupper():\n            ctr += 1\n    return ctr\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    return len([x for x in string if x.isupper()])\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    upper = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            upper += 1\n    return upper\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    return len([c for c in string if c.isupper()])"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    res=[]\n    if len(lst)==0:\n        return [[]]\n    if len(lst)==1:\n        return [lst]\n    combinations_list(lst[1:])\n    for i in range(len(lst)):\n        for comb in combinations_list(lst[1:]):\n            res.append([lst[0]]+comb)\n    return res\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n# solution 1\ndef combinations_list(items):\n    return [[]] if not items else [x + [y] for x in combinations_list(items[1:]) for y in items]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(x):\n    result = [[]]\n    for k in x:\n        result.append([k])\n        result.extend(combinations_list(x[:x.index(k)] + x[x.index(k)+1:]))\n    return result", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(l):\n    res = []\n    combs = []\n    for i in range(len(l)+1):\n        for j in range(len(l)+1-i):\n            combs.append(l[j:j+i])\n    for i in combs:\n        res.append(i)\n    return res\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return [lst]\n    elif len(lst)==2:\n        return [lst, [lst[1], lst[0]]]\n    else:\n        return [lst[:i] + [lst[i]] + lst[i+1:] for i in range(len(lst))]\n\n#assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(list_of_elements):\n    l = []\n    for i in range(len(list_of_elements)):\n        l.append([list_of_elements[i]])\n        for j in range(i+1, len(list_of_elements)):\n            l.append(list_of_elements[i:j+1])\n    return l\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lis):\n    answer = []\n    for i in range(0,len(lis)):\n        for j in range(i+1,len(lis)):\n            answer.append([lis[i],lis[j]])\n            answer.append([lis[j],lis[i]])\n    return answer\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(mylist):\n    if mylist == []:\n        return [[]]\n    else:\n        comb = []\n        for i in range(len(mylist)):\n            comb.append(mylist[i])\n            for j in combinations_list(mylist[i+1:]):\n                comb.append(comb[-1]+[j])\n        return comb\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(elements):\n    combinations = []\n    if not elements:\n        return combinations\n    return combinations_list_helper(elements, [], combinations)\n\ndef combinations_list_helper(elements, combination, combinations):\n    if not elements:\n        return combinations.append(combination[:])\n    for i in range(0, len(elements)):\n        new_combination = combination[:]\n        new_combination.append(elements[i])\n        combinations_list_helper(elements[i+1:], new_combination, combinations)\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    lst = list(lst)\n    res = []\n    if len(lst) == 1:\n        res.append(lst)\n        return res\n    for i in range(len(lst)):\n        rest = list(lst)\n        rest.remove(lst[i])\n        for r in combinations_list(rest):\n            res.append([lst[i]] + r)\n    return res\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_prod = min_prod = max_num = min_num = 0\n    for num in arr:\n        if num >= 0:\n            max_num = max(max_num, num)\n            min_num = min(min_num, num)\n            max_prod = max(max_num * min_num, max_prod)\n        else:\n            min_num = max(min_num, num)\n            max_num = max(max_num, num)\n            min_prod = min(max_num * min_num, min_prod)\n    return max(max_prod, min_prod)\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    if len(arr) < 2:\n        return None\n\n    prod = arr[0]\n    cur_max = prod\n    cur_max_start = 0\n    cur_max_end = 0\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            prod *= arr[i]\n            cur_max = max(cur_max, prod)\n            cur_max_start = cur_max_end + 1\n        else:\n            prod *= arr[i]\n            cur_max = max(cur_max, prod)\n            cur_max_end = i\n            prod = 1\n            cur_max_start = i+1\n    return cur_max\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(a):\n    max_product = -1\n    max_product_subarray = []\n    if not a or len(a) < 2:\n        return max_product\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            max_product = max(max_product, a[i] * a[j])\n            max_product_subarray = [max_product] if max_product_subarray == -1 else max_product_subarray + [max_product]\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    max_product = 0\n    max_product_subarray = []\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= num\n        else:\n            product = 1\n        max_product = max(max_product, product)\n        max_product_subarray.append(product)\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    # set the first and last index of the subarray\n    first = 0\n    last = 0\n    max_product = arr[first]\n\n    for i in range(0, len(arr)):\n        # if the element is greater than the previous element,\n        # update the subarray with the new product\n        if arr[i] > arr[i-1]:\n            max_product = max(max_product, arr[i]*arr[first:i+1])\n\n        # else update the first index of the subarray\n        elif arr[i] < arr[i-1]:\n            first = i\n\n    # find the max product subarray using the first and last indexes\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(A):\n  m = max_subarray_sum(A)\n  global_max = m[0]\n  for i in range(1, len(A)):\n    m[i] = max(m[i - 1] + A[i], A[i])\n    global_max = max(global_max, m[i])\n  return global_max\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    max_product = max_element(arr)\n    max_product_index = arr.index(max_product)\n\n    index = max_product_index\n    while index < len(arr):\n        if arr[index] < 0:\n            index += 1\n            continue\n\n        current_product = arr[index]\n        for i in range(index):\n            if arr[i] < 0:\n                current_product *= arr[i]\n                break\n            current_product *= arr[i]\n        max_product = max(max_product, current_product)\n        index += 1\n\n    return max_product\n\n\ndef max_element(arr):\n    max_element = arr[0]\n    for element in arr:\n        if element > max_element:\n            max_element = element\n    return max_element", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    # First two elements of the array cannot form a subarray\n    max_product = arr[0]\n    max_so_far = arr[0]\n    current_product = arr[0] * arr[1]\n    for num in arr[2:]:\n        current_product = max(current_product, num * num)\n        max_product = max(max_product, current_product)\n        max_so_far = max(max_so_far, num)\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    max_product = arr[0]\n    max_subarray_start = 0\n    max_subarray_end = 0\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n        if max_product == arr[i]:\n            max_subarray_start = i\n        if max_product > max_product:\n            max_subarray_end = i\n    return max_product, max_subarray_start, max_subarray_end\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    \"\"\"\n    Calculate the maximum product subarray of the given array\n    \"\"\"\n    # Your code here\n    left = 0\n    right = 0\n    max_product = -1\n    product = 1\n    while right < len(arr):\n        if arr[right] > 0:\n            product *= arr[right]\n            if product > max_product:\n                max_product = product\n            right += 1\n        else:\n            product *= arr[left]\n            if product > max_product:\n                max_product = product\n            left += 1\n    return max_product"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(x, value):\n    for k in x.keys():\n        if x[k] != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\n#1) Set the default values of a dictionary to None\nd1 = {}\n\n#2) Define a default value for the function\ndef check_value(d, x):\n    for k in d:\n        if d[k] != x:\n            return False\n    return True\n\n\n#3) Run the function", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary, number):\n    \"\"\"\n    Returns True if all values in dictionary are the same, otherwise returns False.\n    \n    \"\"\"\n    for val in dictionary.values():\n        if val != number:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(d, x):\n    \"\"\"\n    Returns True if all values in the dictionary have the value x.\n\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)\n    True\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},13)\n    False\n    \"\"\"\n    if d == {}:\n        return True\n\n    for key in d:\n        if d[key] != x:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dic, value):\n    if len(list(dic.values()))==0:\n        return False\n    for d in dic.values():\n        if d != value:\n            return False\n    return True\n\n#Function to check if any element in a list is a duplicate.", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(input_dict, val):\n    if not input_dict:\n        return True\n    for k, v in input_dict.items():\n        if v != val:\n            return False\n    return True\n\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    for key in dictionary:\n        if(value != dictionary[key]):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d, val):\n    # Given a dictionary and an int, return True if the values are the same in the dictionary.\n    for x in d.values():\n        if x != val:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,value):\n    if value==0:\n        for key in d.keys():\n            if d[key]!=value:\n                return False\n        return True\n    else:\n        for key in d.keys():\n            if d[key]!=value:\n                return False\n    return True\n\ndef check_value2(d,value):\n    # loop through all the items in d.keys()\n    for key in d.keys():\n        # if the value of the item in d is not equal to value then return False\n        if d[key]!=value:\n            return False\n    # return True if d is checked through all the items in d.keys() and the value of each item is equal to value\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,v):\n    for k,i in d.items():\n        if v!=i:\n            return False\n    return True"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k:v for (k,v) in d.items() if v is not None}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict):\n  for key in list(dict.keys()):\n    if dict[key]==None:\n      del dict[key]\n  return dict\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    d_no_empty = {}\n    for key, value in d.items():\n        if value:\n            d_no_empty[key] = value\n    return d_no_empty", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict):\n    return {key:val for key,val in dict.items() if val}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    for k in list(d.keys()):\n        if d[k] == None:\n            d.pop(k)\n    return d\n\n#print(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}))\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(my_dict):\n    new_dict = {}\n    for key, value in my_dict.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n\n#\n# assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict):\n    d = dict.copy()\n    for key, val in d.items():\n        if val is None:\n            d.pop(key)\n    return d\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dict):\n    return {key: val for key, val in dict.items() if val != None}\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dic):\n    new_dic = {}\n    for key in dic:\n        if dic[key] != None:\n            new_dic[key] = dic[key]\n    return new_dic\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {key: value for key, value in d.items() if value}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(array, value):\n    # TODO: write your code here\n    # replace the following line with your code\n    pass\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nimport bisect\n\n\ndef find_peak(nums, target):\n    \"\"\"\n    :param nums: the given array\n    :param target: the given target\n    :return: the peak element\n    \"\"\"\n    nums.sort()\n    left_index = bisect.bisect_left(nums, target)\n    if left_index == len(nums) or nums[left_index] < target:\n        left_index -= 1\n    right_index = bisect.bisect_right(nums, target)\n    if right_index == 0 or nums[right_index - 1] > target:\n        right_index += 1\n    return max(nums[left_index], nums[right_index - 1])\n\n\ndef test_find_peak():\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([1, 2, 3, 4], 3) == 3", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, target):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            return mid\n    if left > right:\n        return None\n    if arr[left] < target:\n        return left\n    else:\n        return right\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(array, target):\n    low, high = 0, len(array) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if array[mid] > target:\n            high = mid\n        elif array[mid] < target:\n            low = mid + 1\n        else:\n            return target\n    return array[low] if array[low] == target else -1\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    if len(arr) == 0 or arr[0] >= n:\n        return None\n\n    l = 0\n    r = len(arr) - 1\n    while l < r:\n        m = (l + r) // 2\n        if arr[m] <= n:\n            l = m + 1\n        else:\n            r = m\n    return l\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# O(n) time | O(1) space\ndef find_peak(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + ((high - low) // 2)\n        if target == arr[mid]:\n            return mid\n        if target > arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# Solution:\n\n\ndef find_peak(arr, k):\n    \"\"\"O(n) time | O(1) space\"\"\"\n    l, r = 0, len(arr) - 1\n\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] < k:\n            l = mid + 1\n        else:\n            r = mid\n\n    return l", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nimport numpy as np\n\n\ndef find_peak(arr, x):\n    \"\"\"\n    Write a function to find the peak element in the given array.\n    :param arr: the array that contains the numbers.\n    :param x: the number that we want to search.\n    :return: the peak element.\n    \"\"\"\n    index = np.where(arr == x)[0]\n    if len(index) == 0:\n        return None\n    elif len(index) == 1:\n        return index[0]\n    else:\n        return index[-1]\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(nums, k):\n    \"\"\"\n    Find peak element in a given array.\n    :param nums: Array of integers\n    :param k: Integer\n    :return: The peak element of given array\n    \"\"\"\n    low, high = 0, len(nums) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if nums[mid] == k:\n            return mid\n        if nums[mid] > nums[mid + 1]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n\ndef find_peak(nums, k):\n    \"\"\"\n    Find peak element in a given array.\n    :param nums: Array of integers\n    :param k: Integer\n    :return: The peak element of given array\n    \"\"\"\n    if nums == []:\n        return None\n    low, high = 0, len(nums) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if nums[mid] == k:\n            return mid\n        if nums[mid] > nums[mid + 1]:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\n\ndef find_peak(nums, k):\n    \"\"\"\n    Find peak element in a given array.\n    :param nums: Array of integers\n    :param k: Integer\n    :return: The peak element of given array\n    \"\"\"\n    if not nums:\n        return None\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] < k:\n            left = mid + 1\n        elif nums[mid] > k:\n            right = mid - 1\n        else:\n            return mid\n    return left - 1\n\n\ndef find_peak(nums, k):\n    \"\"\"\n    Find peak element in a given array.\n    :param nums: Array of integers\n    :param k: Integer\n    :return: The peak element of given array\n    \"\"\"\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimal):\n    \"\"\"\n    converts decimal number to octal number\n    :param decimal: decimal number\n    :return: octal number\n    \"\"\"\n    octal = []\n    while decimal > 0:\n        octal.append(decimal % 8)\n        decimal //= 8\n    octal.reverse()\n    return ''.join(map(str, octal))\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\n# solution\ndef decimal_to_Octal(dec):\n    octal = ''\n    while dec >= 8:\n        octal = '0' + octal\n        dec -= 8\n    octal = str(dec) + octal\n    return octal\n\n# test", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    result = 0\n    while n:\n        result = result * 8 + n%8\n        n = n//8\n    return result\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimal):\n    # your code goes here\n    num_o = []\n    while(decimal > 0):\n        rem = decimal % 8\n        decimal = decimal // 8\n        num_o.append(rem)\n    num_o = list(reversed(num_o))\n    return int(''.join(map(str, num_o)))\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    res = \"\"\n    while n > 0:\n        rem = n % 8\n        res = str(rem) + res\n        n //= 8\n    return res[::-1]\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    return format(num, '08b')\n\n# assert decimal_to_Octal(10) == 12\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    ans = \"\"\n    while n > 0:\n        ans = str(n%8) + ans\n        n = n//8\n    return ans", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(dec):\n    \"\"\"\n    Convert Decimal number to Octal number\n    :param dec: decimal number\n    :return: octal number\n    \"\"\"\n    if dec >= 10 and dec <= 15:\n        octal = dec + 7\n    else:\n        octal = dec\n\n    return octal\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(list, n):\n    start, max_val, max_prod = 0, list[start], 1\n    for i in range(start + 1, n):\n        if list[i] < list[start]:\n            start = i\n            max_val = list[start]\n            max_prod = 1\n        else:\n            if max_val < list[i]:\n                max_val = list[i]\n            max_prod *= list[i]\n    return max_prod\n\n\n# +", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(array, size):\n    max_product = -1\n    current_product = 1\n\n    for i in range(size - 1):\n        current_product *= array[i]\n        max_product = max(max_product, current_product)\n\n        if current_product == 0:\n            current_product = 1\n\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(nums, n):\n    # Write your code here.\n    if n < 1:\n        return 0\n    if n == 1:\n        return nums[0]\n    max_p = nums[0]\n    for i in range(1, n):\n        if nums[i] > nums[i-1]:\n            max_p = max_p * nums[i]\n    return max_p\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(nums, length):\n    if length < 2:\n        return 0\n\n    max_product = nums[0] * nums[1]\n    max_left = nums[0]\n    max_right = nums[0]\n\n    for i in range(2, length):\n        product = nums[i] * max_left\n        product = max(product, nums[i] * max_right)\n        product = max(product, max_left * max_right)\n        max_product = max(product, max_product)\n\n        max_left = min(nums[i], max_left * nums[i])\n        max_right = min(nums[i], max_right * nums[i])\n\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    if n < 2:\n        return -1\n    arr.sort()\n    res = 1\n    for i in range(n - 1):\n        res *= arr[i]\n    return res\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, size):\n    max_product = -float('inf')\n    products = [0]*size\n    products[0] = arr[0]\n    products[1] = arr[1]*arr[0]\n    for i in range(2, size):\n        max_product = max(max_product, products[i-2]*arr[i])\n        products[i] = max(products[i-1]*arr[i], products[i-2]*arr[i])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, size):\n    if size == 0 or size == 1:\n        return 1\n    \n    max_product = arr[0] * arr[1]\n    for i in range(2, size):\n        max_product = max(max_product, arr[i-2]*arr[i])\n\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(nums, n):\n    nums.sort()\n    max_product = nums[0] * nums[n-1]\n    for i in range(n):\n        for j in range(i+1, n):\n            max_product = max(max_product, nums[i] * nums[j])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of given array.\n    Complexity: O(n)\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[1] * arr[2])\n    else:\n        max_product_list = []\n        for i in range(n):\n            if i == 0:\n                max_product_list.append(arr[i])\n                max_product_list.append(arr[i] * arr[i + 1])\n            elif i == 1:\n                max_product_list.append(arr[i])\n                max_product_list.append(arr[i] * arr[i + 1])\n                max_product_list.append(arr[i + 1] * arr[i + 2])\n            else:\n                max_product_list.append(arr[i] * arr[i + 1])\n                max_product_list.append(arr[i] * arr[i + 2])\n                max_product_list.append(arr[i + 1] * arr[i + 2])\n        return max(max_product_list)\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    max_p = arr[0]\n    for i in range(0, n):\n        for j in range(i+1, n):\n            p = arr[i]*arr[j]\n            if p > max_p:\n                max_p = p\n    return max_p\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\n# HINT:\n# You can assume that every transaction costs 1\n\n# BIG O:\n# Time: O(N)\n# Space: O(1)\n\ndef max_profit(stock_prices, max_transactions):\n    profit = 0\n    for i in range(1, len(stock_prices)):\n        if i <= max_transactions and stock_prices[i] > stock_prices[i - 1]:\n            profit += stock_prices[i] - stock_prices[i - 1]\n    return profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(stock_prices, k):\n    max_profit_so_far = float('-inf')\n    profit = 0\n    for i in range(len(stock_prices)):\n        if i + 1 < k:\n            continue\n        else:\n            profit = stock_prices[i + 1] - stock_prices[i]\n            if profit > max_profit_so_far:\n                max_profit_so_far = profit\n    return max_profit_so_far\n\n\n# Tests", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    n = len(prices)\n    max_profits = [0] * (n - k + 1)\n    max_profits[0] = 0\n    for i in range(1, n - k + 1):\n        max_profits[i] = max(max_profits[i - 1], prices[i + k - 1] - prices[i - 1])\n    return max_profits[-1]", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    max_profit = 0\n    min_price = prices[0]\n    for price in prices[1:]:\n        if price > min_price:\n            max_profit += price - min_price\n        min_price = min(min_price, price)\n    if k > 0:\n        for i in range(k):\n            min_price = min(min_price, prices[i])\n        for i in range(k, len(prices)):\n            if prices[i] > min_price:\n                max_profit += prices[i] - min_price\n            min_price = min(min_price, prices[i])\n    return max_profit", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    if len(prices) < 2 or k < 1:\n        return 0\n    if k == 1:\n        return sum(prices[1:]) - min(prices[1:])\n\n    max_profit = [max_profit[i-1] + max(prices[i] - min(prices[i:i+k]), 0) for i in range(1, len(prices))]\n    return max(max_profit)\n\n\ndef test():\n    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\n\ntest()\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    '''\n    :param prices: list of prices\n    :param k: number of stocks to keep\n    :return: max profit\n    '''\n    max_profit = 0\n    prices.sort()\n    for i in range(k-1):\n        max_profit += prices[i] - prices[i+k]\n    return max_profit\n\n\n# +\nimport pytest\n\n@pytest.mark.parametrize(\"prices, k, expected\", [\n    ([1, 5, 2, 3, 7, 6, 4, 5], 3, 10),\n    ([1, 5, 2, 3, 7, 6, 4, 5], 2, 9),\n    ([1, 5, 2, 3, 7, 6, 4, 5], 1, 8),\n    ([1, 5, 2, 3, 7, 6, 4, 5], 0, 0)\n])\ndef test_max_profit(prices, k, expected):\n    assert max_profit(prices, k) == expected", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nfrom typing import List\n\n\ndef max_profit(stock: List[int], k: int) -> int:\n    \"\"\"\n    Find the maximum profit earned from a maximum of k stock transactions\n    \"\"\"\n    if len(stock) < 2:\n        return 0\n    if k > len(stock) - 2:\n        return max(stock[-1] - stock[0], 0)\n\n    res = float('-inf')\n    for i in range(len(stock) - k):\n        # calculate the maximum profit by only considering the first k transactions\n        res = max(res, stock[i + k] - stock[i])\n    return res", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(stocks, k):\n    if not stocks or len(stocks) < 2 or not k:\n        return 0\n    max_profit = 0\n    for i in range(len(stocks) - k):\n        max_profit = max(max_profit, stocks[i+k] - stocks[i])\n    return max_profit\n\ndef max_profit2(stocks, k):\n    if not stocks or len(stocks) < 2 or not k:\n        return 0\n    max_profit = 0\n    for i in range(len(stocks) - k):\n        profit = stocks[i+k] - stocks[i]\n        max_profit = max(max_profit, profit)\n    return max(0, max_profit)\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\n# my solution\ndef max_profit(prices, k):\n    \"\"\"\n    :type prices: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # initialize the array\n    res = [0] * k\n    \n    # initialize the first element as zero\n    res[0] = 0\n    \n    # initialize the maximum profit with the first price\n    res[1] = prices[0]\n    \n    for i in range(2, k):\n        # if the current price is larger than the previous price then\n        # the current maximum profit should be the previous profit plus the current price\n        if prices[i] > prices[i-1]:\n            res[i] = res[i-1] + prices[i]\n        # if the current price is smaller than the previous price then\n        # the current maximum profit should be the previous maximum profit\n        else:\n            res[i] = res[i-1]\n    \n    return max(res)\n\n# naive solution\ndef max_profit_naive(prices, k):\n    \"\"\"\n    :type prices: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    # for each transaction\n    for i in range(1, k):\n        # if the current transaction is bought\n        if prices[i] > prices[i-1]:\n            # then the maximum profit should be the current price - the previous price\n            res = max(res, prices[i] - prices[i-1])\n    \n    return res\n\n# test the solution\nprices = [1, 5, 2, 3, 7, 6, 4, 5]", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    min_price = float('inf')\n    max_profit = 0\n    for i in range(k):\n        min_price = min(min_price, prices[i])\n    for i in range(k, len(prices)):\n        max_profit = max(max_profit, prices[i] - min_price)\n        min_price = min(min_price, prices[i])\n    return max_profit\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(numbers):\n    pass\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(items):\n    if len(items) < 2:\n        return []\n    result = []\n    for i in range(len(items) - 1):\n        result.append(items[i] + items[i + 1])\n    return result\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(list1):\n    return tuple(map(lambda x, y: x + y, list1[:-1], list1[1:]))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple_input):\n    return tuple(sum(pair) for pair in zip(tuple_input[::2], tuple_input[1::2]))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(numbers):\n    \"\"\"\n    \"\"\"\n    new_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            new_numbers.append(numbers[i] + numbers[j])\n    return new_numbers\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(items):\n    added_items = []\n    for i in range(len(items) - 1):\n        added_items.append(items[i] + items[i + 1])\n    return added_items\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(values):\n    pairwise = []\n    for i in range(len(values) - 1):\n        pairwise.append(values[i] + values[i + 1])\n    return pairwise\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(T):\n    return tuple(map(lambda x, y: x+y, T[:-1], T[1:]))\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(numbers):\n    result = []\n    for num in range(len(numbers)):\n        temp = numbers[num] + numbers[num+1]\n        result.append(temp)\n    return tuple(result)\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tup):\n    output = []\n    for i in range(len(tup)-1):\n        output.append(tup[i]+tup[i+1])\n    return output\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n):\n    rem = 0\n    for i in range(len(arr)):\n        rem = rem + arr[i] * (n-i)\n        rem = rem % n\n    return rem\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    # Write your code here\n    remainder = 0\n    for i in range(len(arr)):\n        arr[i] = arr[i]%n\n    for i in range(len(arr)):\n        if(arr[i] > m):\n            arr[i] = arr[i]%m\n    for i in range(len(arr)):\n        if(arr[i] >= n):\n            remainder += arr[i]//n\n    return remainder\n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,r):\n\t# Write your code here\n\t#arr = sorted(arr)\n\t#new_arr = []\n\t#for x in arr:\n\t#\tnew_arr.append(x % n)\n\tarr = list(map(lambda x: x % n,arr))\n\tarr = list(filter(lambda x: x == r,arr))\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0]\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(num_arr,num,divisor):\n    product = 1\n    for number in num_arr:\n        product*= number\n    return product % divisor\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    for i in range(len(arr)):\n        arr[i] = arr[i]*n\n        arr[i] = arr[i]%m\n    print(arr)\n    return arr[-1]", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,sum_val):\n    rem_val = sum(arr*n)%sum_val\n    return rem_val\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, r):\n    return np.mod(np.array(arr) * n, r)\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, k):\n    res = 0\n    for i in arr:\n        res += (i*k) % n\n    return res\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    rem = 0\n    for i in arr:\n        rem += i%m\n    return rem%n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    \"\"\"\n    >>> find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11)\n    9\n    \"\"\"\n    return sum(arr) % m\n\n\ndef find_remainder2(arr, n, m):\n    \"\"\"\n    >>> find_remainder2([ 100, 10, 5, 25, 35, 14 ],6,11)\n    9\n    \"\"\"\n    res = 0\n    for i in arr:\n        res += i\n    return res % m"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(a):\n    count = 0\n    for i in range(len(a)-1):\n        if a[i]+1 == a[i+1]:\n            count += 1\n    if count > 1:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(num_list):\n    \"\"\"\n    This function takes a list as the input and checks whether the list contains consecutive numbers or not.\n    \"\"\"\n    if num_list == [] or len(num_list) < 2:\n        return False\n    return num_list[0] + 1 == num_list[1]\n\n#print(check_Consecutive([1, 3, 4, 5]))\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nums):\n\tif len(nums) == 0:\n\t\treturn False\n\t\n\tnum_set = set(nums)\n\t\n\tfor n in nums:\n\t\tif n - 1 not in num_set or n - 2 not in num_set:\n\t\t\treturn False\n\n\treturn True", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(nums):\n    for i in range(0, len(nums) - 1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(li):\n    for i in range(len(li)-1):\n        if li[i]+1 == li[i+1]:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(a):\n    for i in range(len(a)-1):\n        if a[i] + 1 != a[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    return True if len(lst) >= 2 and all(i + 1 == j for i, j in zip(lst, lst[1:])) else False", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(list1):\n    for i in range(len(list1)-1):\n        if list1[i]+1 != list1[i+1]:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    if len(lst) > 0:\n        for i in range(1, len(lst)):\n            if lst[i] - lst[i-1] == 1:\n                return True\n        return False\n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(arr):\n\n    arr = sorted(arr)\n    if len(arr) <= 1:\n        return False\n\n    for i in range(len(arr)-1):\n        if arr[i] + 1 != arr[i+1]:\n            return False\n\n    return True"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(*tlist):\n    return {k for t in tlist for k in t}\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tuple_list, tuple_element):\n    tuple_result = set()\n    for each_tuple in tuple_list:\n        for each_tuple_element in tuple_element:\n            if each_tuple[0] == each_tuple_element[0] and each_tuple[1] == each_tuple_element[1]:\n                tuple_result.add(each_tuple)\n    return tuple(tuple_result)\n\ntuple_list = [(1,2), (1,3), (1,4), (2,3), (2,4)]\ntuple_element = [(1,1), (1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (2,4)]", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(a, b):\n    \"\"\"\n    Find the intersection of elements in the given tuple list irrespective of their order\n    \"\"\"\n    # Find the intersection of elements from a tuple in b and vice versa\n    intersection = set(a) & set(b)\n\n    # Convert the set of intersection to a tuple and return it\n    return tuple(intersection)", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef tuple_intersection(list_1: List[Tuple], list_2: List[Tuple]) -> Tuple:\n    \"\"\"\n    time complexity: O(n_1 + n_2)\n    space complexity: O(1)\n\n    :param list_1:\n    :param list_2:\n    :return:\n    \"\"\"\n    set_1 = set(list_1)\n    set_2 = set(list_2)\n    common_set = set_1.intersection(set_2)\n    return tuple(common_set)", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(*args):\n    result = set()\n    for arg in args:\n        result = result.union(arg)\n    return result\n\ndef test_tuple_intersection():\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(1, 2), (3, 4), (5, 6)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(9, 10), (3, 4)]))\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], []))\ntest_tuple_intersection()```\n\n### Output:\n\n{(4, 5), (3, 4), (5, 6)}\n{(3, 4)}\n{(3, 4), (4, 5), (5, 6)}\nset()\n\n### Description:\n\nWrite a function to find the union of all elements in a tuple list irrespective of their order.\n\n### Code:\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\nfrom typing import List\ndef tuple_intersection(tup1: List[tuple], tup2: List[tuple]) -> List[tuple]:\n    return tuple(filter(lambda x: x in tup2, tup1))", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(lists):\n    common = set(lists[0])\n    for i in lists[1:]:\n        common = common & set(i)\n    return common\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(t1, t2):\n    intersection = set()\n    for i in t1:\n        for j in t2:\n            if i[0] == j[0] and i[1] == j[1]:\n                intersection.add(i)\n\n    return intersection\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuplist1, tuplist2):\n    res = set()\n    for tup1 in tuplist1:\n        for tup2 in tuplist2:\n            if tup1[0] == tup2[0] and tup1[1] == tup2[1]:\n                res.add(tup1)\n    return res\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list_1, tuple_list_2):\n    return list(set(tuple_list_1) & set(tuple_list_2))\n\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,old_char,new_char):\n    result = \"\"\n    for char in string:\n        if char == old_char:\n            result += new_char\n        else:\n            result += char\n    return result\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,old_char,new_char):\n    for i in range(len(string)):\n        if string[i] == old_char:\n            string[i] = new_char\n    return string\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(text,old,new):\n    for i in range(len(text)):\n        if text[i]==old:\n            text[i]=new\n    return text\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, old, new):\n    return string.replace(old, new)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s,s1,s2):\n    list_ = []\n    for i in s:\n        if i == s1:\n            list_.append(s2)\n        else:\n            list_.append(i)\n    return \"\".join(list_)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n# using the built-in function\ndef replace_char(s,old,new):\n    return s.replace(old,new)\n\n# using for loop\ndef replace_char(s,old,new):\n    for i in range(len(s)):\n        if s[i] == old:\n            s[i] = new\n    return s\n\n# using while loop\ndef replace_char(s,old,new):\n    i = 0\n    while i < len(s):\n        if s[i] == old:\n            s[i] = new\n        i += 1\n    return s\n\n# using generator\ndef replace_char(s,old,new):\n    for i in range(len(s)):\n        if s[i] == old:\n            yield s[i]\n            s[i] = new\n\n# using list comprehension\ndef replace_char(s,old,new):\n    return [new if c==old else c for c in s]\n\n# using list comprehension\ndef replace_char(s,old,new):\n    new_list = [new if c==old else c for c in s]\n    return \"\".join(new_list)\n\n# using set comprehension\ndef replace_char(s,old,new):\n    s = [c for c in s if c != old]\n    s.append(new)\n    return \"\".join(s)\n\n# using generator comprehension\ndef replace_char(s,old,new):\n    for c in s:\n        if c != old:\n            yield c\n        else:\n            yield new\n\n# using generator comprehension\ndef replace_char(s,old,new):\n    s = [c for c in s if c != old]\n    yield from s\n    s.append(new)\n    yield from s\n\n# using generator comprehension\ndef replace_char(s,old,new):\n    s = [c for c in s if c != old]\n    yield from s\n    yield new\n    yield from s\n\n# using generator comprehension\ndef replace_char(s,old,new):\n    yield from [c for c in s if c != old]\n    yield new\n    yield from", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,old,new):\n    result=string\n    for c in string:\n        if c==old:\n            result=result.replace(c,new)\n    return result", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, fromchar, tochar):\n    l = len(string)\n    res = []\n    for i in range(l):\n        if string[i] == fromchar:\n            res.append(tochar)\n        else:\n            res.append(string[i])\n    return \"\".join(res)\n\n\ndef find_same(string):\n    l = len(string)\n    res = []\n    for i in range(l):\n        if string[i] in string[i+1:l]:\n            res.append(string[i])\n    return \"\".join(res)", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s, old, new):\n    for i in range(len(s)):\n        if s[i] == old:\n            s = s[:i] + new + s[i+1:]\n    return s\n# assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n# print(replace_char(\"polygon\",'y','l'))\n#print(replace_char(\"alon\",\"o\",\"l\"))", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(word, old_char, new_char):\n\treturn word.replace(old_char, new_char)"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(input_dict):\n    res = []\n    for k,v in sorted(input_dict.items(), key=lambda kv: kv[1], reverse=True):\n        res.append((k,v))\n    return res", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1])", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(items):\n    sorted_items = sorted(items.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter_by_value(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(d):\n    d_sorted = sorted(d.items(), key=operator.itemgetter(1), reverse=True)\n    return d_sorted\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\nfrom pprint import pprint\n\n\ndef sort_counter(counter):\n    c = sorted(counter.items(), key=lambda kv: kv[1])\n    return c\n\n\nc = sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\npprint(c)", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(c):\n\tc = {k:v for k,v in sorted(c.items(), key = lambda x:x[1],reverse=True)}\n\treturn c\n\n#test\nc = {'Math':81, 'Physics':83, 'Chemistry':87}", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(d):\n    # Your code here\n    return sorted(d.items(), key=lambda item:item[1])\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counts):\n    return sorted(counts, key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nfrom collections import Counter\n\ndef sort_counter(counter):\n    return list(sorted(counter.items(), key=lambda item: item[1], reverse=True))"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return max(arr) + min(arr)\n\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(nums):\n\tbig, small = nums[0], nums[0]\n\tfor i in range(len(nums)):\n\t\tif nums[i] > big:\n\t\t\tbig = nums[i]\n\t\telif nums[i] < small:\n\t\t\tsmall = nums[i]\n\treturn big + small\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n#sum all the values of the array and take the first and last value from the array and subtract them from each other and get the sum of them\n#and then print this value\ndef big_sum(arr):\n    return arr[0] + arr[-1]\n#big_sum([1,2,3])```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n22. Write a python function to find the sum of a number of consecutive integers.\n\n### Code:\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n# Code here\ndef big_sum(arr):\n    return max(arr) + min(arr)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    if len(arr)==1:\n        return arr[0]\n    elif len(arr)==2:\n        if arr[0]<=arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[1] + arr[0]\n    else:\n        temp=big_sum(arr[:2])\n        return temp + arr[2]\n    ", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n# Write your code here\ndef big_sum(arr):\n    print(' arr',arr)\n    arr.sort()\n    return arr[0]+arr[-1]\n\nbig_sum([1,2,3])", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\nimport pytest\n\n\ndef big_sum(arr):\n    result = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        result += max(arr[i], arr[j])\n        i += 1\n        j -= 1\n\n    return result\n\n\ndef test_one():\n    assert big_sum([1, 2, 3]) == 4\n\n\ndef test_two():\n    assert big_sum([4, 2, 3, 1, 5, 1]) == 12\n\n\ndef test_three():\n    assert big_sum([5, 4, 3, 2, 1]) == 10\n\n\ndef test_four():\n    assert big_sum([1, 3, 5, 7, 9]) == 16", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    new_string = ''\n    for c in string.lower():\n        new_string += c\n    return new_string\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(input_str):\n    return input_str.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str1):\n    str1 = str1.lower()\n    return str1", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str):\n    result = \"\"\n    for char in str:\n        if char.isalpha():\n            result += char.lower()\n        else:\n            result += char\n    return result\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower()", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    \"\"\"\n    Args:\n        s(string): The input string\n    Returns:\n        string: The converted string\n    \"\"\"\n    l = s.lower()\n    return l\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    \"\"\"\n    if s is valid and it is lower case return true and else return false\n\n    :param s:\n    :return:\n    \"\"\"\n    return s.islower()\n\n#assert is_lower(\"InValid\") == \"invalid\"\n#assert is_lower(\"invalid\") == \"invalid\"\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(st):\n    for i in st:\n        if i.isupper():\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    # your code here\n    return \"\".join(str(string).replace(x, \"\") for x in str(string).lower())", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    string = list(string)\n    new_string = []\n    for char in string:\n        if char.isupper():\n            new_string.append(char)\n    return ''.join(new_string)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    \"\"\"\n    Removes lowercase substrings from a given string.\n\n    >>> remove_lowercase(\"PYTHon\")==('PYTH')\n    True\n    >>> remove_lowercase(\"PYThOn\")==('PYTh')\n    True\n    >>> remove_lowercase(\"pythOn\")==('pyth')\n    True\n    \"\"\"\n    result = \"\"\n    string = string.lower()\n    for char in string:\n        if char.isupper():\n            result += char\n    return result\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    string=string.lower()\n    new=\"\"\n    for char in string:\n        if char.isalpha()==False:\n            new+=char\n        else:\n            break\n    return new", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    # your code goes here\n    if len(string) == 0:\n        return string\n    \n    res = string[0]\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            continue\n        else:\n            res += string[i]\n    return res\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n\ntest_remove_lowercase()\n\n\n# +\n#Solution 2:\ndef remove_lowercase(string):\n    res = ''\n    for i in range(len(string)):\n        if string[i].isupper() and i>0 and string[i-1].isupper():\n            continue\n        res += string[i]\n    return res\n\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n\ntest_remove_lowercase()\n# -\n\n# # Problem 5\n# Write a function that reads an integer number and returns the same number in a string format.\n#\n# assert int_to_str(12345)==(\"12345\")\n# assert int_to_str(9)==(\"9\")\n\n#Solution 1:\ndef int_to_str(number):\n    res = ''\n    while number > 0:\n        number = number//10\n        res = str(number) + res\n    return res\n\n\ndef test_int_to_str():\n    assert int_to_str(12345)==(\"12345\")\n    assert int_to_str(9)==(\"9\")\ntest_int_to_str()\n\n\n# +\n#Solution 2:\ndef int_to_str(number):\n    res = ''\n    while number > 0:\n        res = str(number%10) + res\n        number = number//10\n    return res\n\n\ndef test_int_to_str():\n    assert int_to_str(12345)==(\"12345\")\n    assert int_to_str(9)==(\"9\")\ntest_int_to_str()\n\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    while s.startswith(s.lower()):\n        s = s.replace(s.lower(), '')\n    return s\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(text):\n    return re.sub(r'([a-z])', '',text).strip()\n\n#Testing\n#print(remove_lowercase(\"PYTHon\"))\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    # your code here\n    s1=string.lower()\n    s2=s1.replace(' ','')\n    return s2\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# +\ndef remove_lowercase(s):\n    string=str(s)\n    s=string.lower()\n    for i in range(len(s)):\n        j=i\n        while j<len(s):\n            if j==i:\n                break\n            if s[j]<='a' or s[j]>='z':\n                break\n            j=j+1\n            s=s[:j]+s[j+1:]\n    return s\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    return s[0].upper()+s[1:]\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"python\")==\"Python\"\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(x):\n    return int(x) % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    if n >= 1:\n        if n < 10:\n            return n\n        elif n >= 10:\n            return n % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    if num >= 10:\n        return num % 10\n    else:\n        return num\n    \ndef test():\n    print(\"Test for first_Digit()\")\n    assert first_Digit(123) == 1\n    assert first_Digit(21) == 1\n    assert first_Digit(2015) == 5\n    assert first_Digit(10) == 0\n    print(\"Test passed\")\n\ntest()\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return int(str(num)[0])\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return int(str(n)[0])\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    # assume 1 <= num <= 9999\n    # digit = num % 10\n    return num % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return n % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n\t\"\"\"\n\treturns the first digit of n\n\t\"\"\"\n\t# your code here\n\treturn n%10\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return n // 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return int(num[0])\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(s):\n    \"\"\"\n    This function will take a string, and return the \n    character that occurs the most.\n    \"\"\"\n    # Your code here\n    # print(\"S\", s)\n    d = dict()\n    for c in s:\n        if c in d.keys():\n            d[c] += 1\n        else:\n            d[c] = 1\n    max_occuring_char = \"\"\n    for c in d.keys():\n        if d[c] > 0:\n            max_occuring_char = c\n    return max_occuring_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    max_char = max(str, key=str.count)\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    d = {}\n    for ch in string:\n        if ch not in d:\n            d[ch] = 1\n        else:\n            d[ch] += 1\n    max_count = 0\n    max_ch = None\n    for ch in d:\n        if d[ch] > max_count:\n            max_count = d[ch]\n            max_ch = ch\n    return max_ch\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\n#1.\ndef get_max_occuring_char(s):\n    if len(s)==0:\n        return \"\"\n    ch_count = {}\n    for ch in s:\n        if ch in ch_count:\n            ch_count[ch] += 1\n        else:\n            ch_count[ch] = 1\n    max_count = 0\n    max_char = ''\n    for ch in ch_count:\n        if ch_count[ch]>max_count:\n            max_count = ch_count[ch]\n            max_char = ch\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n\ttemp = {}\n\tfor i in str:\n\t\tif i in temp:\n\t\t\ttemp[i] = temp[i] + 1\n\t\telse:\n\t\t\ttemp[i] = 1\n\tmax = 0\n\tfor i in temp:\n\t\tif temp[i] > max:\n\t\t\tmax = temp[i]\n\tfor i in temp:\n\t\tif temp[i] == max:\n\t\t\treturn i\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n\tmax_count = -1\n\tmax_char = \"\"\n\tfor ch in str:\n\t\tcount = str.count(ch)\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_char = ch\n\treturn max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    char_dict = dict()\n    for char in str:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    max_freq = 0\n    max_char = None\n    for char, freq in char_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_char = char\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(input):\n\n    max = input[0]\n    for i in input:\n        if i > max:\n            max = i\n    return max\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    counts = dict()\n    for x in str:\n        counts[x] = counts.get(x,0) + 1\n    max_value = 0\n    for k, v in counts.items():\n        if v > max_value:\n            max_value = v\n            max_char = k\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    max_occuring_char = \"\"\n    max_count = 0\n    for char in string:\n        count = string.count(char)\n        if count > max_count:\n            max_occuring_char = char\n            max_count = count\n    return max_occuring_char"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, target_sum, subset_sum = 0):\n    if target_sum == 0 and subset_sum == 0:\n        return True\n\n    if subset_sum > target_sum:\n        return False\n    \n    for i in range(len(arr)):\n        if is_subset_sum(arr, target_sum, subset_sum + arr[i]):\n            return True\n\n    return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(lst, sum, target):\n    return True\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, target):\n    arr = sorted(arr)\n    dp = [[False for i in range(sum+1)] for j in range(len(arr)+1)]\n    for i in range(len(arr)+1):\n        dp[i][0] = True\n    for i in range(len(arr)+1):\n        for j in range(1, sum+1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            elif arr[i-1] < j:\n                dp[i][j] = dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n    return dp[-1][-1]\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(array, sum, subset_sum):\n    \"\"\"\n    Checks to see if subset sum exists\n    \"\"\"\n    for element in array:\n        if element + subset_sum == sum:\n            return True\n        elif subset_sum > sum:\n            break\n    return False", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(arr, s, sum):\n    arr.sort()\n    # if sum of first element of sub array is equal to the sum\n    if sum == arr[0]:\n        return True\n    # if sum of first element is more than sum\n    elif sum > arr[0]:\n        return False\n    else:\n        for i in range(len(arr)):\n            sum_ = sum - arr[i]\n            if(sum_ == 0):\n                return True\n            else:\n                if(is_subset_sum(arr[i+1:], sum_, sum_)):\n                    return True\n                else:\n                    continue\n    return False\n\n\n# +\narr = [3, 34, 4, 12, 5, 2]\ns = 6\nsum = 9\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(nums, target, sum_so_far=0):\n    if sum_so_far > target:\n        return False\n    if sum_so_far == target and nums == []:\n        return True\n    for num in nums:\n        if is_subset_sum(nums[1:], target, sum_so_far + num):\n            return True\n    return False\n\ndef main():\n    # Test 1\n    # Input: nums = [3, 34, 4, 12, 5, 2], target = 6\n    # Output: True\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 6))\n    # Test 2\n    # Input: nums = [34, 4, 12, 5, 2], target = 9\n    # Output: False\n    print(is_subset_sum([34, 4, 12, 5, 2], 9))\n    # Test 3\n    # Input: nums = [34, 4, 12, 5, 2], target = 22\n    # Output: True\n    print(is_subset_sum([34, 4, 12, 5, 2], 22))\n    # Test 4\n    # Input: nums = [12, 1, 5, 2], target = 18\n    # Output: True\n    print(is_subset_sum([12, 1, 5, 2], 18))\n    # Test 5\n    # Input: nums = [3, 34, 4, 12, 5, 2], target = 6\n    # Output: True\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 6))\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\n# naive solution\n\n\ndef is_subset_sum_naive(s, sum, subset=[]):\n    \"\"\"\n    :type s: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    # try each number as the first element in subset\n    for i in s:\n        subset.append(i)\n        if sum == sum_of_subset(subset):\n            return True\n        # remove the number that was just tried\n        subset.pop()\n    # if we tried every number, we didn't find any subset that sums to the sum\n    return False\n\n\ndef sum_of_subset(subset):\n    \"\"\"\n    :type subset: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(subset)\n\n\n# using set to store unique elements of the subset\n\n\ndef is_subset_sum(s, sum, subset=[]):\n    \"\"\"\n    :type s: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    # try each number as the first element in subset\n    for i in s:\n        subset.add(i)\n        if sum == sum_of_subset(subset):\n            return True\n        # remove the number that was just tried\n        subset.remove(i)\n    # if we tried every number, we didn't find any subset that sums to the sum\n    return False\n\n\ndef sum_of_subset(subset):\n    \"\"\"\n    :type subset: Set[int]\n    :rtype: int\n    \"\"\"\n    return sum(subset)\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(array, sum, target):\n    return subset_sum(array, 0, sum, target)\n\ndef subset_sum(array, index, sum, target):\n    if sum == target:\n        return True\n\n    if index == len(array) or sum < target:\n        return False\n\n    return subset_sum(array, index+1, sum+array[index], target)\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, subset):\n    subset_sum = 0\n\n    for num in subset:\n        subset_sum += num\n\n    return subset_sum == sum\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(A, sum, target_sum):\n    \"\"\"\n    :param A: Set with integers.\n    :param sum: Target sum\n    :param target_sum: Target sum\n    :return: True or False if the subset with given sum is found\n    \"\"\"\n    # Initialize a dictionary with keys = subsets and values = the sum of that subset\n    # Initialize a dictionary with keys = the sum of subsets and values = the subset\n    #\n    #\n    pass"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nfrom test_framework import generic_test, expected_failure\n\n\ndef match(string):\n    # TODO - you fill in here.\n    # return 'Yes' if string.count(string[0]) == string.count(string[0].lower()) else 'No'\n    # return 'No' if string.count(string[0]) != string.count(string[0].lower()) else 'Yes'\n    return 'Yes' if len(set(string[0]) & set(string[0].lower())) > 0 else 'No'\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(string):\n    if re.search(r\"^[A-Z].*[a-z]$\",string):\n        return \"Yes\"\n    else:\n        return \"No\"", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(str):\n    if re.findall(\"[A-Z][a-z]*\",str):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nmatch(\"Geeks\")", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(s):\n    if re.search(\"^[A-Z][a-z]*$\", s) is not None:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# Solution\ndef match(s):\n    if re.match('.*[a-zA-Z].*[a-z].*', s):\n        return 'Yes'\n    else:\n        return 'No'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nfrom re import match\n\n\ndef match_one_upper_letter_followed_by_lowercase(text):\n    return match(r'^([A-Z])([a-z]+)$', text)\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# method 1 - using regex\ndef match(s):\n    return 'Yes' if re.search(r'([A-Z])[a-z]+', s) else 'No'\n\n# method 2 - using findall() method of regex\ndef match(s):\n    return 'Yes' if re.findall(r'([A-Z])[a-z]+', s) else 'No'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\n# regex pattern to match letters in a sentence\npattern = r\"([A-Z][a-z]+)\"\n\n# function to match sequences of one upper case letter followed by lower case letters\ndef match(string):\n    if re.search(pattern,string):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Driver code to test above function", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\n\ndef match(string):\n    pattern = \"^[A-Z]+[a-z]*$\"\n    if re.match(pattern, string):\n        return 'Yes'\n    else:\n        return 'No'\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(s):\n    if re.search('(?=^|[A-Z])\\w*([a-z])\\w*', s):\n        return 'Yes'\n    else:\n        return 'No'\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    first_number = 1\n    while True:\n        product = 1\n        for i in range(first_number, first_number + x):\n            product *= i\n        if product % x == 0:\n            return first_number\n        first_number += 1\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\nimport math\n\n\ndef first_Factorial_Divisible_Number(x):\n    result = 0\n    while True:\n        result += 1\n        if x % math.factorial(result) == 0:\n            return result\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# def first_Factorial_Divisible_Number(x):\n#     for i in range(1, 10000):\n#         if i == 1:\n#             continue\n#         for j in range(1, i + 1):\n#             if i == j:\n#                 continue\n#             if i == j:\n#                 continue\n#             if i % j == 0:\n#                 break\n#         else:\n#             if i % j == 0:\n#                 return i\n#     return -1\n\n# def first_Factorial_Divisible_Number(x):\n#     for i in range(1, 10000):\n#         f = 1\n#         for j in range(1, i + 1):\n#             f *= j\n#             if f % x == 0:\n#                 return i\n#     return -1\n\ndef first_Factorial_Divisible_Number(x):\n    # calculate the factorial value of i\n    factors = [1]\n    for i in range(2, 10000):\n        factors.append(i * factors[-1])\n\n    for i in range(1, 10000):\n        if i == 1:\n            continue\n        for j in range(1, i + 1):\n            if i % j == 0:\n                break\n        else:\n            if i == j:\n                continue\n            if i * j == factors[x]:\n                return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\nfrom math import factorial\n\n\ndef first_Factorial_Divisible_Number(x: int):\n    list_n = [i for i in range(1, x)]\n    list_n.reverse()\n\n    for i in list_n:\n        n = factorial(i)\n        if x % n == 0:\n            return i\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,100):\n        if i == 1 or i > 100:\n            break\n        if x % i == 0:\n            return i\n    return 0\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    n = 1\n    while(True):\n        if fact(n) % x == 0:\n            return n\n        n += 1\n\ndef fact(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * fact(n-1)", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    :param x:\n    :return:\n    \"\"\"\n    for i in range(1,1000):\n        if factorial(i) % x == 0:\n            return i\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    # write your solution here.\n    factorials = [1]\n    for i in range(2, x+1):\n        factorials.append(i * factorials[i-1])\n    for i in range(x):\n        if factorials[i] % x == 0:\n            return i + 1\n    return -1\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    y = 1\n    count = 0\n    while count <= x:\n        y = y * count\n        count += 1\n    return y\n\nfirst_Factorial_Divisible_Number(10)\n\n\n# +", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\nimport math\n\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    :param x: A natural number\n    :return: The first natural number whose factorial is divisible by x\n    \"\"\"\n    i = 1\n    while True:\n        factorial_i = math.factorial(i)\n        if factorial_i % x == 0:\n            return i\n        i += 1\n\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuple1, tuple2):\n    new_list = []\n    for item in tuple1:\n        if item not in tuple2:\n            new_list.append(item)\n    return new_list\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(list_of_tuples_1, list_of_tuples_2):\n    new_list = []\n    for tuple_1 in list_of_tuples_1:\n        if tuple_1 in list_of_tuples_2:\n            continue\n        else:\n            new_list.append(tuple_1)\n    return new_list\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# Solution:\n# Remove matching tuples with a list comprehension.\ndef remove_matching_tuple(lst1, lst2):\n    return [t for t in lst1 if t not in lst2]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuples1, tuples2):\n    return [t for t in tuples1 if not any(t in tuple for tuple in tuples2)]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(lst1, lst2):\n    lst1.remove(('Hello', 'dude'))\n    lst1.remove(('How', 'are'))\n    return lst1", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuple_1, tuple_2):\n    return tuple_1[2:]\n\n\n# +", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(a, b):\n    if len(b) == 0:\n        return a\n    else:\n        a.remove(b[0])\n        return remove_matching_tuple(a, b[1:])\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(t1, t2):\n    return [t for t in t1 if t not in t2]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(T1, T2):\n    T1_set = set(T1)\n    T2_set = set(T2)\n    return [x for x in T1 if x not in T2_set]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    new_tuple1 = []\n    new_tuple2 = []\n    for tup in tuple1:\n        for ele in tuple2:\n            if tup == ele:\n                break\n        else:\n            new_tuple1.append(tup)\n            new_tuple2.append(tup)\n    return new_tuple1\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    max_val = max(arr[0] * 10 ** 10, arr[n - 1] * 10 ** 10)\n    for i in range(n):\n        for j in range(n):\n            val = arr[i] * 10 ** 10 + arr[j]\n            if val == val[::-1]:\n                if val > max_val:\n                    max_val = val\n    return max_val\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nfrom functools import reduce\n\n# O(n^2) solution\ndef largest_palindrome(nums):\n    max_palindrome = reduce(lambda x, y: int(str(x*y) + str(x*y)[::-1]), nums, 0)\n    return max_palindrome\n\n\ndef largest_palindrome_2(nums):\n    return reduce(lambda x, y: int(str(x*y) + str(x*y)[::-1]), nums, 0)\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, limit):\n    if not arr:\n        return None\n    largest_palindrome = None\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            number = arr[i]*arr[j]\n            if number > limit:\n                break\n            elif number > largest_palindrome:\n                largest_palindrome = number\n    return largest_palindrome\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, n):\n    num = 10**(n-1)\n    for i in range(n):\n        num = num * 10 + 9 - (i+1)\n        pal = str(num)\n        if isPalindrome(pal):\n            if int(pal) > int(arr[0]):\n                arr[0] = pal\n    return arr[0]\n\n\ndef isPalindrome(str):\n    length = len(str)\n    if length == 1:\n        return True\n    for i in range(length//2):\n        if str[i] != str[length-1-i]:\n            return False\n    return True\n\n\n# assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\nfrom typing import List\n\n\ndef largest_palindrome(arr: List[int], n: int) -> int:\n    \"\"\"\n    Returns the largest palindrome in the input list of integers.\n\n    Args:\n        arr: Input list of integers.\n        n: Number of elements in the list.\n\n    Returns:\n        The largest palindrome in the input list.\n\n    >>> largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    True\n    \"\"\"\n    product = arr[0]\n    for i in range(1, n):\n        product = product * arr[i]\n\n    return product\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, n):\n    \"\"\"\n    Write a function to find the largest palindromic number in the given array.\n    \"\"\"\n    result = 0\n    # Your code here\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if is_palindrome(arr[i] * arr[j]):\n                result = max(arr[i] * arr[j], result)\n    return result\n\ndef is_palindrome(num):\n    \"\"\"\n    Return whether a number is palindromic.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(array, n):\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            palindrome = array[i] * 10 ** j + array[i + j + 1]\n            palindrome = str(palindrome)\n            palindrome = palindrome[::-1]\n            if int(palindrome) > int(array[n - 1]):\n                return int(palindrome)\n    return int(array[n - 1])\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, length):\n    \"\"\"\n    Take the array and divide it into two halves\n    :param arr: list of numbers to check\n    :param length: length of arr\n    :return: largest palindrome number in arr\n    \"\"\"\n    arr = sorted(arr)\n    result = []\n    for i in range(0, length // 2):\n        result.append(arr[i] * arr[length - i - 1])\n\n    if result == arr:\n        result = result[0]\n    else:\n        result = max(result)\n\n    return result\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(nums, size):\n    # your code here\n    max_palindrome = 0\n    for n in range(size):\n        for i in range(size):\n            for j in range(size):\n                n1 = nums[n]\n                n2 = nums[i]\n                n3 = nums[j]\n                if n1 * n2 * n3 > max_palindrome:\n                    max_palindrome = n1 * n2 * n3\n    return max_palindrome\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(array, n):\n\tfor i in range(len(array)):\n\t\tfor j in range(len(array)):\n\t\t\tif array[i] > array[j]:\n\t\t\t\tarray[i], array[j] = array[j], array[i]\n\t\t\t\tbreak\n\treturn int(''.join(str(num) for num in array[:n]))"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(k: int, n: int, p: float) -> float:\n    \"\"\"\n    Computation of binomial probability for the given number.\n    \n    Parameters\n    ----------\n    k : int\n        number of successes\n    n : int\n        number of total draws\n    p : float\n        probability of success\n    \n    Returns\n    -------\n    float\n        probability of binomial\n    \"\"\"\n    \n    return (comb(n,k)*p**k*(1-p)**(n-k))/factorial(k)\n    \n# assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nfrom typing import Tuple\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Compute the binomial probability for the given number.\n    :param n: the number of trials\n    :param k: the number of successes\n    :param p: the probability of success\n    :return: the binomial probability\n    \"\"\"\n    if n < 0:\n        raise ValueError('Invalid number of trials')\n    if k < 0:\n        raise ValueError('Invalid number of successes')\n    if k > n:\n        raise ValueError('Invalid number of successes')\n    if p < 0 or p > 1:\n        raise ValueError('Invalid probability of success')\n    return comb(n, k) * p ** k * (1 - p) ** (n - k)\n\n\ndef comb(n: int, k: int) -> float:\n    \"\"\"\n    Compute the binomial coefficients.\n    :param n: the number of trials\n    :param k: the number of successes\n    :return: the binomial coefficients\n    \"\"\"\n    if k > n:\n        return 0\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    Compute the factorial of the given number.\n    :param n: the number to compute\n    :return: the factorial of the given number\n    \"\"\"\n    if n < 1:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef get_num_of_permutations(n: int, k: int) -> int:\n    \"\"\"\n    Compute the number of permutations for the given number.\n    :param n: the number of trials\n    :param k: the number of successes\n    :return: the number of permutations\n    \"\"\"\n    if n < k:\n        return 0\n    if k == 0:\n        return 1\n    return get_num_of_permutations(n - 1, k - 1) + get_num_of_permutations(n - 1", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Helper function to compute binomial probability\n    \"\"\"\n    assert 0 <= p <= 1\n    return factorial(n) / (factorial(k) * factorial(n - k)) * (p ** k) * (1 - p) ** (n - k)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Call the helper function for binomial probability\n    result = binomial_probability(10, 5, 0.1)\n    print(result)\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nfrom __future__ import annotations\nimport random\n\n\ndef binomial_probability(k: int, n: int, p: float) -> float:\n    assert 0 <= k <= n\n    assert 0 <= p <= 1\n    return p ** k * (1 - p) ** (n - k)\n\n\ndef test_binomial_probability() -> None:\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    if k > n:\n        return 0\n    else:\n        return (p**k)*(1-p**(n-k))/(1-p)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Given the number of trials n, number of success in each trial k, and the probability of success p,\n    compute the binomial probability.\n    \"\"\"\n    # YOUR CODE HERE\n    pass", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(N, k, p):\n    \"\"\"\n    Computes the binomial probability.\n    \"\"\"\n    assert N >= k >= 0\n    return binom(N, k) * p ** k * (1 - p) ** (N - k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nimport math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the binomial probability for the given number.\n    :param n: the number\n    :param k: the k\n    :param p: the probability of success\n    :return: the binomial probability\n    \"\"\"\n    if n < 0 or k < 0 or p < 0 or p > 1 or k > n:\n        return 0\n\n    k = min(k, n - k)\n\n    prob = math.pow(p, k) * math.pow(1 - p, n - k)\n    return prob\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(N, k, p):\n    return binom(N, k) * (p**k) * (1-p)**(N-k)", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Parameters\n    ----------\n    n : int\n        the number of trials\n    k : int\n        the number of successes\n    p : float\n        the probability of success\n\n    Returns\n    -------\n    float\n        the probability of k successes for n trials\n    \"\"\"\n    prob = 0.0\n    for i in range(k):\n        prob += binomial(n, i)*pow(p, i)*pow(1.0-p, n-i)\n    return prob\n\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n\ttuples.sort(key=lambda x: x[1])\n\treturn tuples\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(lst):\n    return sorted(lst, key = lambda tup: tup[1])\n\n\ndef sort_tuple(lst):\n    return sorted(lst, key = lambda tup: tup[1], reverse=True)\n\n\ndef sort_tuple(lst):\n    return sorted(lst, key = lambda tup: tup[1], reverse = True)\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tup_list):\n\ttup_list.sort(key=lambda tup:tup[1])\n\treturn tup_list\n\n#assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(lst):\n    lst = sorted(lst, key = lambda x: x[1])\n    return lst\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(x):\n    # your code here\n    return sorted(x, key=lambda tup: tup[-1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    for i in range(len(tuples) - 1):\n        for j in range(len(tuples) - 1 - i):\n            if tuples[j][-1] > tuples[j + 1][-1]:\n                tuples[j], tuples[j + 1] = tuples[j + 1], tuples[j]\n    return tuples\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\nfrom typing import List\n\n\ndef sort_tuple(tuples: List[tuple]) -> List[tuple]:\n    tuples.sort(key=lambda x: x[-1])\n    return tuples\n\n\ndef test_function():\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(l):\n    l.sort(key = lambda x: x[1])\n    return l\n\ndef main():\n    l = [(1, 3), (3, 2), (2, 1)]\n    print sort_tuple(l)\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    return sorted(tuples,key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(l):\n    l.sort(key=lambda item: item[-1])\n    return l\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(length):\n    area = 0.0\n    # calculate the area\n    for i in range(5):\n        area += length*1.0\n    return area\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return (5*n*(n-1))/2\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n\treturn (n*pow(2,2))*pow(pow(2,2),n-3)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return (n*(n-1)) * 3.655395663110526 / 2\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    \"\"\"\n    returns the area of a pentagon\n    \"\"\"\n    import math\n    return n*(math.sqrt(10*n**2+1)-1)/2\n    ", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    \"\"\"\n    area_pentagon calculates the area of a regular pentagon\n    \"\"\"\n    # formula of area of a regular pentagon\n    # A = 1/2*l*(s(s-a)(s-b)(s-c)(s-d))\n    # s = (a+b+c+d)/2\n    # return the area\n    s = (1 + 2*n) / 2\n    a = s - 1\n    b = s - n\n    c = s - n\n    d = s - 1\n\n    area = 0.5 * n * (s * (s - a) * (s - b) * (s - c) * (s - d))\n    return area\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side_length):\n    return 5 * side_length * (1 - ((1- (1/2 * side_length))**2))", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    s = n*(n-1)/2\n    return s\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    s = 0\n    for i in range(n):\n        s += (n-i)**2*(2*i+1)\n    return s*1.0/2\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side):\n    assert type(side) is int\n    area = 0\n    for i in range(side):\n        area += side * (1/2)\n    return area\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(N,arr):\n    lst = [arr[0]]\n    for i in range(1,len(arr)):\n        if arr[i]>lst[0]:\n            lst = [arr[i]]\n        elif arr[i]==lst[0]:\n            lst.append(arr[i])\n    return len(lst)\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n,a):\n    max = a[0]\n    count = 0\n    for i in range(n):\n        if max < a[i]:\n            count = 1\n        if a[i] > max:\n            max = a[i]\n    return count", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    freq = 0\n    for i in range(0,n):\n        if arr[i] == max(arr):\n            freq = freq + 1\n    return freq\n\n# find frequency of the largest value in a given array\ndef test_frequency_Of_Largest():\n    n = 5\n    arr = [1,2,3,4,4]\n    assert frequency_Of_Largest(n,arr) == 2\n\n# find frequency of the largest value in a given array\ndef test_frequency_Of_Largest():\n    n = 5\n    arr = [5,4,3,2,1]\n    assert frequency_Of_Largest(n,arr) == 1", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,array):\n    freq = 0\n    if len(array) < 2:\n        return freq\n    if array[0] > array[1]:\n        freq = 1\n        for i in range(len(array)):\n            if array[0] > array[i]:\n                freq = 1\n                array[0] = array[i]\n                i += 1\n    else:\n        for i in range(len(array)):\n            if array[0] > array[i]:\n                freq = 1\n                array[0] = array[i]\n                i += 1\n    return freq", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr, k):\n    if len(arr) == 1:\n        return 1\n    elif arr[k] > arr[k-1]:\n        return 1 + frequency_Of_Largest(arr, k-1)\n    else:\n        return frequency_Of_Largest(arr, k-1)\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n,nums):\n    \"\"\"\n    :param n: the length of the nums array\n    :param nums: the nums array containing the numbers\n    :return: the frequency of the largest number in nums\n    \"\"\"\n    if n<=0:\n        return 0\n    max_num = nums[0]\n    max_freq = 1\n    for i in range(n):\n        if max_num<nums[i]:\n            max_num = nums[i]\n            max_freq = 1\n        elif max_num==nums[i]:\n            max_freq += 1\n        else:\n            pass\n    return max_freq", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n, array):\n    max_val = array[0]\n    count = 1\n    for val in array:\n        if val > max_val:\n            max_val = val\n            count = 1\n        else:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n, array):\n    \"\"\"\n    Write a python function to find the frequency of the largest value in a given array.\n    \"\"\"\n    return 1\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    arr_unique = []\n    for i in arr:\n        if i not in arr_unique:\n            arr_unique.append(i)\n    # print(arr_unique)\n    n_max = max(arr_unique)\n    n_freq = 0\n    for i in arr_unique:\n        if i == n_max:\n            n_freq += 1\n    return n_freq\n# Test Cases", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr, size):\n    return arr[size-1]"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the extract_symmetric function below.\ndef extract_symmetric(triplets):\n    return set(triplets) & {tuple(sorted(x)) for x in triplets}\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tup):\n    pass\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuples):\n    # return (list(filter(lambda x: x in tuples, list(map(lambda y: (y[1], y[0]), tuples))))\n    return list(map(lambda x: (x[1], x[0]), list(filter(lambda y: y in tuples, list(map(lambda y: (y[0], y[1]), tuples))))))\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(l):\n    # write your code here\n    return tuple((x,y) for x,y in l if x==y)\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(input):\n    ans = set()\n    for i in input:\n        for j in input:\n            if i[0] == j[1] and i[1] == j[0]:\n                ans.add((i[0], i[1]))\n                ans.add((i[1], i[0]))\n    return ans\n\ndef extract_symmetric_with_sorted(input):\n    ans = set()\n    for i in input:\n        for j in input:\n            if i[0] == j[1] and i[1] == j[0]:\n                ans.add((sorted((i[0], i[1]))))\n                ans.add((sorted((i[1], i[0]))))\n    return ans\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef extract_symmetric(pairs: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Extract all the pairs which are symmetric in the given tuple list.\n\n    :param pairs: A list of tuples representing the pairs.\n    :return: A list of tuples representing the symmetric pairs.\n    \"\"\"\n    return [(a, b) for a, b in pairs if a == b]\n\n\ndef test_extract_symmetric():\n    pairs = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]\n    assert extract_symmetric(pairs) == [(8, 9), (6, 7)]", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuple_list):\n\tprint(tuple_list)\n\t#your code goes here\n\treturn {(x[0],x[1]) for x in tuple_list}\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(lst):\n    return set(\n        [pair for pair in lst if pair[0] == pair[1]]\n    )\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\n# Idea 1: Iterative\ndef extract_symmetric(lst):\n    res = set()\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                res.add((lst[i], lst[j]))\n    return res\n\n# Idea 2: Recursive\ndef extract_symmetric(lst):\n    return extract_symmetric_helper(lst, 0, 0)\n\ndef extract_symmetric_helper(lst, i, j):\n    if i == len(lst) or j == len(lst):\n        return set()\n\n    if lst[i] == lst[j]:\n        return {((lst[i], lst[j]))} | extract_symmetric_helper(lst, i+1, j) | extract_symmetric_helper(lst, i, j+1)\n    else:\n        return extract_symmetric_helper(lst, i+1, j) | extract_symmetric_helper(lst, i, j+1)\n\n# Tests", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(t: List[Tuple[int]]) -> Set[Tuple[int]]:\n    t = [(k, v) for (v, k) in t]\n    t.sort()\n    return set(t[i:i+2])\n\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\nimport math\ndef sum_gp(a,b,r):\n    if b <= a:\n        return 0\n    if r == 0:\n        return 1\n    result = 0\n    for i in range(a,b+1):\n        result += a**i*math.factorial(i)/(math.factorial(r*i))\n    return result\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,r,n):\n    return sum([a*r**i for i in range(n)])\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,r,n):\n    return (a*(r**n-1))/(r-1)\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start, finish, power):\n\tresult = start\n\twhile result < finish:\n\t\tresult = result * power + start\n\treturn result\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,k):\n    s=0\n    for i in range(a,b+1):\n        s+=i**k\n    return s", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a, r, n):\n    return a*(1-r**n)/(1-r)\n\n# Tests", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,n):\n\tif n==0:\n\t\treturn 0\n\treturn a*sum_gp(a,b,n-1)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start, stop, r):\n\treturn start*(1 + r + r**2 + r**3 + r**4 + r**5 + r**6 + r**7 + r**8 + r**9 + r**10)\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start,end,num):\n    \"\"\"\n    >>> sum_gp(1,5,2)\n    31\n    \"\"\"\n    return start*pow(num,end-1)/(1-pow(num,1-end))\n\ndef test_sum_gp():\n    assert sum_gp(1,5,2)==31", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\n# +\ndef sum_gp(first,last,multiplier):\n    sum=0\n    for i in range(first,last+1):\n        sum+=i**multiplier\n    return sum\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\nimport unittest\n\n\ndef binary_search(arr, val):\n    \"\"\"\n    :param arr: array to search an element in.\n    :param val: element to search.\n    :return: boolean\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = int((left + right) / 2)\n        if val > arr[mid]:\n            left = mid + 1\n        elif val < arr[mid]:\n            right = mid - 1\n        else:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\n# Example 1:\n# Input: [1,3,5,7,9,11,15], 8\n# Output: true\n\n# Example 2:\n# Input: [1,3,5,7,9,11,15], 6\n# Output: false\n\n# Example 3:\n# Input: [1,3,5,7,9,11,15], 10\n# Output: false\n\n\n# Solution:\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\nimport sys\nimport unittest\n\ndef binary_search(arr, x):\n\tlow = 0\n\thigh = len(arr) - 1\n\twhile low <= high:\n\t\tmid = (high+low)//2\n\t\tif x == arr[mid]:\n\t\t\treturn True\n\t\telif x < arr[mid]:\n\t\t\thigh = mid-1\n\t\telse:\n\t\t\tlow = mid+1\n\treturn False\n\ndef binary_search_recursive(arr, low, high, x):\n\tif low > high:\n\t\treturn False\n\tmid = (low + high)//2\n\tif x == arr[mid]:\n\t\treturn True\n\telif x < arr[mid]:\n\t\treturn binary_search_recursive(arr, low, mid-1, x)\n\telse:\n\t\treturn binary_search_recursive(arr, mid+1, high, x)\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, target):\n    if len(array) == 0:\n        return False\n    mid = (len(array) - 1) // 2\n    while mid >= 0 and array[mid] != target:\n        if target < array[mid]:\n            mid = (mid - 1) * -1\n        else:\n            mid = (mid + 1) * -1\n    if array[mid] == target:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, element):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == element:\n            return True\n        elif array[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, val):\n    \"\"\"Binary search algorithm\n\n    Args:\n        arr (list): The input array\n        val (int): The input element\n\n    Returns:\n        bool: True if the element is found. Otherwise, False\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == val:\n            return True\n        elif arr[mid] < val:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, element):\n    \"\"\"\n    Binary search algorithm\n\n    Args:\n        array (list): The array to be searched\n        element (int): The element to be searched\n\n    Returns:\n        int: The position of the element\n    \"\"\"\n    first = 0\n    last = len(array)-1\n    while first <= last:\n        middle = first + (last - first) // 2\n        if array[middle] < element:\n            first = middle + 1\n        elif array[middle] > element:\n            last = middle - 1\n        else:\n            return middle\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, num):\n    # Handle cases where array is empty or the number is not in the list\n    if arr is None or len(arr) == 0 or num not in arr:\n        return False\n    left = 0\n    right = len(arr) - 1\n    middle = (left + right)//2\n    while left <= right:\n        if num == arr[middle]:\n            return True\n        elif num < arr[middle]:\n            right = middle - 1\n        else:\n            left = middle + 1\n        middle = (left + right)//2\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef test_binary_search():\n    assert binary_search([1,2,3,5,8], 6) == False\n    assert binary_search([1,2,3,5,8], 2) == True\n    assert binary_search([1,2,3,5,8], 3) == True\n    assert binary_search([1,2,3,5,8], 4) == False\n    assert binary_search([1,2,3,5,8], 5) == True\n    assert binary_search([1,2,3,5,8], 8) == True\n    assert binary_search([1,2,3,5,8], 7) == False\n\ntest_binary_search()", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\n# O(log n) time | O(1) space\ndef binary_search(arr, target):\n    # Write your code here.\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n\n# Test Cases"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    return str(int(''.join(map(str, binary_tuple)), 2))\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(lst):\n  return \"\".join([str(x) for x in lst])\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    return ''.join(str(x) for x in binary)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    \"\"\"\n    convert binary to integer\n    :param binary: the binary tuple\n    :return: integer\n    \"\"\"\n    if binary is None:\n        return None\n    res = 0\n    for i, x in enumerate(reversed(binary)):\n        if x == 1:\n            res += (2 ** i)\n    return str(res)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nfrom typing import Tuple\n\n\ndef binary_to_integer(tuple_binary: Tuple[int, ...]) -> str:\n    \"\"\"\n    Convert tuple to integer.\n\n    Args:\n        tuple_binary: A tuple of binary values.\n\n    Returns:\n        A string representing the binary integer.\n    \"\"\"\n    num_str = ''.join(str(num) for num in tuple_binary)\n    return int(num_str, 2)", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary_tuple):\n    pass\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(tuple):\n    int_binary = 0\n    for binary in tuple:\n        int_binary += int(binary) * 2 ** len(tuple) - len(tuple)\n    return int_binary\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(n_bin):\n    result = 0\n    for i in range(len(n_bin)):\n        result += int(n_bin[i]) * pow(2, i)\n    return result\n\n#Testing", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(bin_tuple):\n    #your code here\n    bin_string = ''.join(map(str, bin_tuple))\n    return int(bin_string, 2)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    binary_str = ''\n    for i in binary:\n        binary_str += str(i)\n    return binary_str\n\ndef test_binary_to_integer():\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\ndef remove_lowercase(text):\n    return re.sub(r'\\b\\w\\w\\b', '', text)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(str1):\n    import re\n    print(str1)\n    print(re.sub(r'[a-z]+', '', str1))\n    return re.sub(r'[a-z]+', '', str1)\n\nremove_lowercase(\"KDeoALOklOOHserfLoAJSIskdsf\")\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    s = re.sub(r\"^[a-z]+\", \"\", s)\n    return s\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\n# Write your code below and press Shift+Enter to test it\ndef remove_lowercase(input_str):\n    output_str = \"\"\n    pattern = r\"[a-z]+\"\n    for i in input_str:\n        if not re.match(pattern, i):\n            output_str += i\n    return output_str\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\n\ndef remove_lowercase(string):\n    return re.sub(r'\\w{0,2}\\s*\\w+*\\s*\\w{0,2}', '', string)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    string = re.sub(r\"[a-z]\", \"\", string)\n    return string\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(string):\n    return re.sub('([a-z])+', '', string)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\ndef remove_lowercase(s):\n    return re.sub(r'(?i)([a-z])', '', s)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return re.sub(r'\\b\\w\\w*\\b', '', s).strip()"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n#Answer\ndef heap_queue_smallest(data_list, size):\n    \"\"\"\n    This function will take the list of numbers and using heap queue algorithm find the smallest \n    numbers and return the result\n    :param data_list: list\n    :param size: int\n    :return: list\n    \"\"\"\n    heapq.heapify(data_list)\n    result = []\n    for _ in range(size):\n        result.append(heapq.heappop(data_list))\n    return result\n\n#Tests", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(arr,k):\n    min_heap=heapq.PriorityQueue()\n    for num in arr:\n        min_heap.put(num)\n    res=[]\n    for i in range(k):\n        res.append(min_heap.get())\n    return res\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\n\ndef heap_queue_smallest(data, k):\n    \"\"\"\n    Given a list of numbers, return the smallest k numbers in a list.\n    :param data: List of numbers\n    :param k: number of smallest numbers\n    :return: list of smallest numbers\n    \"\"\"\n    if len(data) < k:\n        return None\n    min_heap = [data[0]]\n    heapq.heapify(min_heap)\n    for i in range(1, len(data)):\n        if data[i] < min_heap[0]:\n            heapq.heapreplace(min_heap, data[i])\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(lst,size):\n    if len(lst) < size:\n        return lst\n    from queue import PriorityQueue\n    min_list = PriorityQueue()\n    for i in range(size):\n        min_list.put(lst.pop())\n    while not min_list.empty():\n        lst.append(min_list.get())\n    return lst\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n#heap queue implementation\ndef heap_queue_smallest(a,k):\n    heap = []\n    for i in range(len(a)):\n        heapq.heappush(heap,a[i])\n    print(heap)\n    while len(heap)!=k:\n        heapq.heappop(heap)\n    print(heap)\n    return heap\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(nums, k):\n    \"\"\"\n    :param nums: given list of numbers\n    :param k: smallest integers are required to be at least k\n    :return: list of k smallest integers\n    \"\"\"\n    if len(nums)<k:\n        return nums\n    h = []\n    for x in nums:\n        heappush(h, x)\n        if len(h)>k:\n            heappop(h)\n    return h\n\n# def heap_queue_smallest(nums, k):\n#     \"\"\"\n#     :param nums: given list of numbers\n#     :param k: smallest integers are required to be at least k\n#     :return: list of k smallest integers\n#     \"\"\"\n#     if len(nums)<k:\n#         return nums\n#     heap = []\n#     for x in nums:\n#         heappush(heap, (x, len(heap)))\n#     return [heappop(heap)[0] for _ in range(k)]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(arr,k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n        arr[i] = heapq.heappop(heap)\n    return arr", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(nums,k):\n    heap = [num for num in nums]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for _ in range(k)]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nfrom heapq import *\n\ndef heap_queue_smallest(arr,k):\n    heapify(arr)\n    output = []\n    for i in range(k):\n        output.append(heappop(arr))\n    return output\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import heappush, heappop, heapify\n\ndef heap_queue_smallest(arr, k):\n    heap = []\n    for num in arr:\n        heappush(heap, num)\n    smallest = []\n    for i in range(k):\n        smallest.append(heappop(heap))\n    return smallest\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    return pi*r**2+(h**2+r**2)*asin(h/r)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\n# +\n#define function surfacearea_cone(r,h)\ndef surfacearea_cone(r,h):\n    return 3.14*r**2 + h*3.14*r\n\n#assert function surfacearea_cone(5,12)==282.7433388230814", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    return 3.14*radius**2+3.14*radius*height+0.5*3.14*height**2\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nfunction surfacearea_cone(radius, height)\n    return (pi*radius*radius) + (pi*radius*radius*height/3)\nend\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius, height):\n    a = (radius ** 2 * 3.1415926535) / (3) + (height * 3.1415926535)\n    return a\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    pi = 3.14\n    return pi * radius**2 + pi * radius * height\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius, height):\n    assert radius>0, \"radius should be a positive number\"\n    assert height>0, \"height should be a positive number\"\n    return (radius * height * 3.14159265359) + ((radius * height * height) / 3)\n\n# Write a function to find the volume of a cylinder.", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    surfacearea=pi*(radius**2)*(1+((radius*pi)/height)**2)\n    return surfacearea", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    :param radius: the radius of the cone\n    :param height: the height of the cone\n    :return: the surface area of the cone\n    \"\"\"\n    import math\n    return (1/3) * math.pi * (radius**2 + radius*height + height**2)\n\ndef test_surfacearea_cone():\n    assert surfacearea_cone(5,12)==282.7433388230814\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\n# +\nimport math\n\ndef surfacearea_cone(radius,height):\n    return 2*math.pi*radius*(radius**2+height**2)\n\n\n# -\n\nsurfacearea_cone(5,12)\n\nimport math\nmath.pi\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    assert a >= b\n    if a == b:\n        return a\n    if a < b:\n        return gcd(b, a)\n    return gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a,b):\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a-b,b)\n    return gcd(a,b-a)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\n#Solution\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\n# Tests", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef test_gcd():\n    assert gcd(12, 17) == 1\n    assert gcd(12, 1) == 1\n    assert gcd(12, 4) == 4\n    assert gcd(12, 8) == 4\n    assert gcd(12, 16) == 4\n    assert gcd(12, 32) == 4\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\n#GCD of two positive integers\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n#Test cases", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    while(b != 0):\n        a, b = b, a % b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if a==0:\n        return b\n    return gcd(b%a, a)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n\t\"\"\"\n\tFinds the greatest common divisor of two positive integers.\n\t:param a: first integer\n\t:param b: second integer\n\t:return: greatest common divisor\n\t\"\"\"\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n# Find the diameter of a circle\ndef diameter_circle(radius):\n    diameter = radius * 2\n    return diameter\n\n# Find the diameter of a square\ndef diameter_square(side_length):\n    diameter = side_length * 2\n    return diameter\n\n# Find the diameter of a rectangle\ndef diameter_rectangle(width, length):\n    diameter = (width + length) * 2\n    return diameter\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\n\ndef diameter_circle(radius):\n    assert isinstance(radius,int) or isinstance(radius,float)\n    assert radius > 0\n    return 2*radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\n\ndef diameter_circle(radius):\n    return radius * 2\n\ndef test_diameter_circle():\n    assert diameter_circle(10) == 20\n\ntest_diameter_circle()", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    return 2 * radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    return radius * 2\n\n#End", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(diameter):\n    return (diameter+1) * 2\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(diameter):\n    return 2*diameter\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    args: radius - number\n    returns: diameter of a circle\n    \"\"\"\n    return radius * 2\n\n#test_diameter_circle = diameter_circle(10)\n#assert test_diameter_circle == 20\n\n# +\n#Write a function to find the perimeter of a rectangle.", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    \"\"\"\n    \"\"\"\n    return 2 * radius\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n    \"\"\"\n    assert radius>0\n    return 2*radius\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list):\n    str = ''\n    for i in list:\n        str += i + ' '\n    return str\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(lst):\n    s=''\n    for i in lst:\n        s = s + i + ' '\n    return s.strip()\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(l):\n    return '  '.join(l)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list):\n    return ' '.join(list)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list_of_strings):\n    s = ''\n    for i in list_of_strings:\n        s = s + ' ' + i\n    return s", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(elements):\n    res = ''\n    for i in range(len(elements)):\n        res += elements[i] + ' '\n    return res.strip()\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(elements):\n    string = \"\"\n    for element in elements:\n        string += \" \" + element\n    return string\n\n# Add your solution here\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(elements):\n    return '  '.join(elements)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list):\n    return \" \".join(list)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    element_string = ''\n    for element in elements:\n        element_string += element + \" \"\n    return element_string\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    n = 0\n    while b > 0:\n        n, b = b, a%b\n    return n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    return 0\n\n#num_comm_div(2,4)\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a, b):\n    # your code here\n    a_minus_b = abs(a - b)\n    if a_minus_b == 0:\n        return 1\n    #print(a_minus_b)\n    if a_minus_b == 1:\n        return 1\n    elif a_minus_b > 1:\n        for i in range(1,a_minus_b):\n            if a % i == 0 and b % i == 0:\n                #print(i)\n                return i\n    else:\n        for i in range(1,a_minus_b):\n            if a % i == 0 and b % i == 0:\n                return i\n    return 0\n    \ndef num_comm_div_v2(a, b):\n    # your code here\n    if a == b:\n        return 1\n    elif a == 1:\n        return b\n    elif b == 1:\n        return a\n    for i in range(1,min(a,b)):\n        if a % i == 0 and b % i == 0:\n            return i\n    return 0\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    # Write your code here\n    #return num_comm_div(int(a), int(b))\n    pass\n\n\n\ndef test():\n    assert num_comm_div(2,4) == 2\n    assert num_comm_div(3,7) == 3\n    assert num_comm_div(2,10) == 2\n    assert num_comm_div(1,9) == 1\n    assert num_comm_div(1,1) == 1\n    assert num_comm_div(4,12) == 4\n    assert num_comm_div(4,13) == 1\n    assert num_comm_div(4,14) == 4\n    assert num_comm_div(7,21) == 1\n    assert num_comm_div(100, 200) == 100\n    assert num_comm_div(100, 20000) == 100\n    assert num_comm_div(100, 2000000) == 100\n    assert num_comm_div(100000, 200000) == 100000\n    assert num_comm_div(100000, 2000000) == 100000\n    assert num_comm_div(1000000000, 2000000000) == 1000000000\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if b == 0:\n        return 0\n    if a < b:\n        return num_comm_div(b,a)\n    else:\n        if a % b == 0:\n            return b\n        else:\n            return num_comm_div(a,b-a)\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\nimport sys\n\ndef num_comm_div(num1, num2):\n    \"\"\"\n    A function to find common divisor between two given numbers in a pair.\n    :param num1: First number in the pair.\n    :param num2: Second number in the pair.\n    :return: Common divisor of the two numbers.\n    \"\"\"\n    if num1 == 0 or num2 == 0:\n        return 0\n\n    if num1 > num2:\n        return num_comm_div(num1 - num2, num2)\n    elif num1 < num2:\n        return num_comm_div(num2 - num1, num1)\n    else:\n        return 0\n\ndef test():\n    assert num_comm_div(2, 4) == 2\n    assert num_comm_div(1, 100) == 1\n    assert num_comm_div(25, 250) == 5\n    assert num_comm_div(7, 14) == 1\n    assert num_comm_div(2, 0) == 0\n    assert num_comm_div(0, 2) == 0\n    assert num_comm_div(100000000000, 100000000001) == 0\n    assert num_comm_div(5, 5) == 5\n    assert num_comm_div(10, 10) == 10\n    assert num_comm_div(20, 20) == 20\n    assert num_comm_div(200000000000, 200000000000) == 200000000000\n    return \"PASS\"\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(n1, n2):\n    # Fill this in.\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a%b)\n\n    return gcd(n1, n2)\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a, b):\n    for i in range(1,b+1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return None\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(x,y):\n    \"\"\"\n    >>> num_comm_div(2,4)\n    2\n    \"\"\"\n    num_comm_div = 1\n    while(x%num_comm_div == 0):\n        x = x/num_comm_div\n        num_comm_div = num_comm_div + 1\n    while(y%num_comm_div == 0):\n        y = y/num_comm_div\n        num_comm_div = num_comm_div + 1\n    return num_comm_div\n\ndef test_num_comm_div():\n    assert num_comm_div(2,4) == 2\n    assert num_comm_div(3,5) == 1\n    assert num_comm_div(1,1) == 1\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1,num2):\n    if num1<num2:\n        div = num1\n        for i in range(num2+1,num1+1):\n            if i%div == 0:\n                return div\n            else:\n                pass\n    else:\n        div = num2\n        for i in range(num1+1,num2+1):\n            if i%div == 0:\n                return div\n            else:\n                pass\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# Write your python code here\ndef find(a,b):\n    return a%b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    remainder = a % b\n    return remainder\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    if b == 0:\n        return a\n    else:\n        return find(b,a%b)\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(num1, num2):\n    return num1 % num2\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a, b):\n    return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# Solution\ndef find(num1,num2):\n    return num1 % num2\n\n\n# Testcase 1\nnum1 = 3\nnum2 = 3", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a, b):\n    return a - b * int(a/b)\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a%b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    output = [nums[0]]\n    for i in range(1,len(nums)):\n        if nums[i] != nums[i-1] + 1:\n            output.append(nums[i])\n    return output\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nlist):\n    newlist=[]\n    for i in range(len(nlist)):\n        if i!=0:\n            newlist.append(nlist[i]+nlist[i-1])\n        else:\n            newlist.append(nlist[i])\n    return newlist\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(num_list):\n    new_num_list = []\n    for i in range(0, len(num_list) - 1):\n        new_num_list.append(num_list[i] + num_list[i + 1])\n    return new_num_list\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(alist):\n    return [x + y for x, y in zip(alist[:-1], alist[1:])]\n\n# Asserts", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(numbers):\n    return [numbers[i]+numbers[i+1] for i in range(len(numbers)-1)]\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(num_list):\n    res = []\n    for i in range(len(num_list)):\n        res.append(num_list[i] + i + 1)\n    return res\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(n_list):\n    a_list = []\n    for i in range(len(n_list)-1):\n        a_list.append(n_list[i] + n_list[i+1])\n    return a_list\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(numbers):\n    n = numbers[0]\n    result = [n]\n    for i in range(1,len(numbers)):\n        if i<len(numbers)-1 and numbers[i+1] == numbers[i]+1:\n            result.append(numbers[i+1])\n        else:\n            result.append(numbers[i]+1)\n    return result\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(l):\n    for i in range(1,len(l)):\n        l[i] = l[i]+l[i-1]\n    return l", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    return [num+1 for num in nums]\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\n# solution 1\ndef sum_Of_Series(n):\n    if n > 0:\n        return n * (n + 1) * (2 * n + 1) / 6\n    else:\n        return 0\n\n# solution 2\ndef sum_Of_Series(n):\n    return (n * (n + 1) * (2 * n + 1) / 6) if n > 0 else 0\n\n# solution 3\ndef sum_Of_Series(n):\n    if n > 0:\n        return n*(n+1)*(2*n+1)/6\n    else:\n        return 0\n\n# solution 4\ndef sum_Of_Series(n):\n    return 0 if n == 0 else n * (n + 1) * (2 * n + 1) / 6\n\n# solution 5\ndef sum_Of_Series(n):\n    result = 0\n    if n > 0:\n        result = (n * (n + 1) * (2 * n + 1) / 6)\n        return result\n    else:\n        return result\n\n# solution 6\ndef sum_Of_Series(n):\n    return n * (n + 1) * (2 * n + 1) / 6 if n > 0 else 0\n\n# solution 7\ndef sum_Of_Series(n):\n    sum = 0\n    if n > 0:\n        for i in range(1, n+1):\n            sum += i * (i + 1) * (2 * i + 1) / 6\n    return sum\n\n# solution 8\ndef sum_Of_Series(n):\n    return n * (n + 1) * (2 * n + 1) / 6 if n > 0 else 0\n\n# solution 9\ndef sum_Of_Series(n):\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) * (2 * n + 1) / 6\n\n# solution 10\ndef sum_Of_Series(", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return n*n*n + (n-1)*n*n + (n-2)*n*n + (n-3)*n*n + (n-4)*n*n + (n-5)*n*n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i**3\n    return s\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    :param n: a non-negative integer\n    :return: the cube sum of first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * (i + 1) * (i + 2) / 6\n    return sum\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    cubesum=0\n    for i in range(1,n+1):\n        cubesum=cubesum+i**3\n    return cubesum\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n# Write your code here\ndef sum_Of_Series(n):\n    return ((n*(n+1)/2)**3)\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    # code here\n    s = 0\n    for i in range(1,n+1):\n        s += i**3\n    return s\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return (1+2+3+4+5+6+7+8+9+10+11+12+13+14+15)\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\n\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(array):\n    zero_index = [index for index, value in enumerate(array) if value == 0]\n    for i in range(0, len(zero_index)):\n        j = len(array) - i - 1\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    return array", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    if not arr: return arr\n\n    i = 0\n    for num in arr:\n        if num != 0:\n            arr[i] = num\n            i += 1\n\n    for j in range(i, len(arr)):\n        arr[j] = 0\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(x):\n    z_idx = [i for i, v in enumerate(x) if v == 0]\n    z_idx.reverse()\n    for i in z_idx:\n        x[i], x[len(x)-1] = x[len(x)-1], x[i]\n    return x\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(my_list):\n    if not my_list:\n        return []\n    size = 0\n    for num in my_list:\n        if num != 0:\n            size += 1\n    new_list = [0] * size\n    new_size = 0\n    for num in my_list:\n        if num != 0:\n            new_list[new_size] = num\n            new_size += 1\n    for i in range(new_size):\n        my_list[i] = new_list[i]\n    return my_list\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    zero_index = -1\n    zero_index = 0\n    for i in arr:\n        if i == 0:\n            arr.insert(zero_index+1, 0)\n            zero_index = zero_index + 1\n    print(arr)\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\nfrom typing import List\n\ndef re_order(a: List[int]) -> List[int]:\n    \"\"\"\n    Move all zeroes to the end of the given array.\n\n    Args:\n        a: The given array\n\n    Returns:\n        The array after moving the zeroes to the end\n    \"\"\"\n    for i in range(len(a)):\n        if a[i] == 0:\n            while len(a) > 1 and a[len(a)-1] == 0:\n                a.pop()\n            a.append(0)\n            break\n    for i in range(len(a)):\n        while a[i] == 0 and i != 0:\n            a[i], a[i-1] = a[i-1], a[i]\n            i -= 1\n    return a", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[j] = arr[i]\n            j += 1\n    for k in range(j, len(arr)):\n        arr[k] = 0\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(array):\n    new_array = []\n    for i in array:\n        if i:\n            new_array.append(i)\n    return new_array\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    # Your code here\n    i = 0\n    while i < len(arr):\n        if arr[i] == 0:\n            arr.pop(i)\n            arr.append(0)\n        else:\n            i += 1\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(nums):\n    l = 0\n    r = len(nums) - 1\n    while l < r:\n        while l < r and nums[l] == 0:\n            l += 1\n        while l < r and nums[r] == 0:\n            r -= 1\n        nums[l], nums[r] = nums[r], nums[l]\n        l += 1\n        r -= 1\n    return nums"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    k is the number of elements to be chosen from n elements\n    nCk = n!/(k!*(n-k)!)\n    \"\"\"\n    p = 1\n    for i in range(0, k):\n        p *= n-i\n    return p\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    # Generate all possible ways to select k items from n\n    nCk = factorial(n)/(factorial(k)*factorial(n-k))\n    # Calculate number of distinct ways to select k items\n    nPk = factorial(n)/(factorial(k)*factorial(n-k))\n    # Calculate probability of selecting k items\n    return nCk/nPk", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nimport math\n\ndef permutation_coefficient(n, k):\n    pass\n\ndef main():\n    print(permutation_coefficient(10, 2))\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nimport math\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n)/(math.factorial(k)*math.factorial(n-k))\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    permutations = 0\n\n    for i in range(1, n + 1):\n        permutations += n * (n - 1) ** i / (i * (i + 1)) ** k\n\n    return permutations\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if k >= n or k <= 0:\n        return 0\n    coefficient = 1\n    for i in range(n-k+1):\n        coefficient *= (n-i)\n    return coefficient\n\ndef main():\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    result = permutation_coefficient(n, k)\n    print(result)\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k)\n    \"\"\"\n    return (factorial(n)/factorial(k)*factorial(n-k))\n\ndef factorial(n):\n    \"\"\"\n    Calculate factorial of given number\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef main():\n    print(permutation_coefficient(10, 2))\n\nmain()", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :param n: the number of items to choose from\n    :param k: the number of items to choose\n    :return: the number of possible permutations of n with k elements\n    \"\"\"\n    return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) \\\n           / (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    calculate the permutation coefficient\n    Args:\n        n(int): the number of elements\n        k(int): the number of selected elements\n    Returns:\n        (float): the coefficient\n    \"\"\"\n    return 1.0 / fact(n - k)\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(lst,to_remove):\n    for w in to_remove:\n        if w in lst:\n            lst.remove(w)\n    return lst\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words,remove_words):\n    \"\"\"\n    Removes words in remove_words from words\n    Args:\n        words: A list of words\n        remove_words: A list of words to remove\n    Returns:\n        A list of words with all words in remove_words removed\n    \"\"\"\n    for w in remove_words:\n        try:\n            words.remove(w)\n        except:\n            pass\n    return words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,remove_list):\n    new_words = []\n    for word in words:\n        if word not in remove_list:\n            new_words.append(word)\n    return new_words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, to_remove):\n    for w in words:\n        if w in to_remove:\n            words.remove(w)\n    return words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, to_remove):\n    return [word for word in words if word not in to_remove]\n\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words,remove_list):\n    return [word for word in words if word not in remove_list]\n    ", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, remove_words):\n    return [w for w in words if w not in remove_words]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(list, words_to_remove):\n    return [word for word in list if word not in words_to_remove]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(text,bad_words):\n    new_text = []\n    for word in text:\n        if word not in bad_words:\n            new_text.append(word)\n    return new_text\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(lst, words):\n    #The function returns a new list with all items from lst that do not belong to words\n    return [item for item in lst if item not in words]\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n\tif (len(list1) != len(list2)):\n\t\treturn False\n\tdict1 = {}\n\tdict2 = {}\n\tfor i in list1:\n\t\tdict1[i] = 0\n\tfor i in list2:\n\t\tdict2[i] = 0\n\tfor i in range(0,len(list1)):\n\t\tif (dict1[list1[i]] < dict2[list2[i]]):\n\t\t\treturn False\n\t\tif (dict1[list1[i]] > dict2[list2[i]]):\n\t\t\treturn False\n\t\tdict1[list1[i]] += 1\n\t\tdict2[list2[i]] += 1\n\treturn True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(a,b):\n    a.sort()\n    b.sort()\n    return a==b\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1,l2):\n    l1.sort()\n    l2.sort()\n    return l1 == l2\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list_1,list_2):\n    if len(list_1) != len(list_2):\n        return False\n    else:\n        count = 0\n        while count < len(list_1):\n            if list_1[count] == list_2[count]:\n                count += 1\n            else:\n                break\n        if count == len(list_1):\n            return True\n        else:\n            return False", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    return sorted(list1) == sorted(list2)\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    if list1==list2:\n        return True\n    if list1==[] or list2==[]:\n        return False\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(A,B):\n    a = sorted(A)\n    b = sorted(B)\n    if a==b:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    if len(list1)!=len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!=list2[i]:\n                return False\n    return True", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(a, b):\n    a_list=sorted(a)\n    b_list=sorted(b)\n    if a_list==b_list:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(x,y):\n    if len(x)!=len(y):\n        return False\n    for i in range(len(x)):\n        if x[i]!=y[i]:\n            return False\n    return True"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n    return sum // 2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    total = 0\n    while num > 1:\n        if num % 2 == 1:\n            total += num\n        num -= 2\n    return total // 2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_odd(num):\n    \"\"\"\n    >>> average_odd(9)\n    5\n    >>> average_odd(1)\n    1\n    \"\"\"\n    if num%2 != 0:\n        return (1 + (num - 1) )/2\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n# Write your code here\n\n\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i\n    return sum // 2\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    return sum(i for i in range(1, n, 2)) / (n//2)\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    i = 1\n    avg = 0\n    while i <= n:\n        if i%2 == 1:\n            avg = avg + i\n        i = i + 1\n    return avg/2\n\n#assert average_Odd(9) == 5\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n#Solution\ndef average_Odd(num):\n    odd = 1\n    sum = 0\n    while odd <= num:\n        sum = sum + odd\n        odd = odd + 2\n    return sum/2\n\n#Examples\n#assert average_Odd(3) == 3\n#assert average_Odd(9) == 5\n#assert average_Odd(11) == 8", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(number):\n\t# Write your code here\n\tl = []\n\tfor i in range(1,number+1,2):\n\t\tl.append(i)\n\tsum = 0\n\tfor i in l:\n\t\tsum+=i\n\treturn sum/len(l)\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_odd(n):\n    list = []\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            list.append(i)\n    return sum(list) / len(list)\n\n\ndef average_odd(n):\n    list = []\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            list.append(i)\n\n    return sum(list)/len(list)\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_odd(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n    return sum/3\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    # your code goes here\n    res = 0\n    prod = 1\n    for i in arr:\n        prod *= i\n        res += prod // k\n        prod %= k\n    return res\n\ndef no_of_subsequences_old(arr, k):\n    # your code goes here\n    res = 0\n    prod = 1\n    for i in arr:\n        prod *= i\n        res += prod // k\n        prod %= k\n    return res", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(array, k):\n    if not array:\n        return 0\n    if len(array) == 1:\n        return 1 if array[0] <= k else 0\n    if array[0] <= k:\n        return no_of_subsequences(array[1:], k)\n    if array[1] <= k:\n        return no_of_subsequences(array[1:], k) + no_of_subsequences(array[2:], k)\n    return no_of_subsequences(array[1:], k) + no_of_subsequences(array[2:], k) + no_of_subsequences(array[3:], k)\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(a, k):\n    \"\"\"\n    :param a: int\n    :param k: int\n    :return: int\n    \"\"\"\n    if len(a) == 0:\n        return 0\n    if a[0] < k:\n        return 1\n    p = 0\n    dp = [0 for i in range(k+1)]\n    dp[0] = 1\n    for i in range(len(a)):\n        for j in range(k+1):\n            if j-a[i]>=0:\n                dp[j] += dp[j-a[i]]\n            else:\n                break\n    return dp[-1]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n\treturn _get_sum(arr, k, len(arr)-1, 0, 1)\n\ndef _get_sum(arr, k, i, dp_sum, temp_prod):\n\tif i == -1:\n\t\tif temp_prod < k:\n\t\t\treturn 0\n\t\treturn 1\n\n\tres = 0\n\tif dp_sum < k:\n\t\tres += _get_sum(arr, k, i-1, dp_sum, temp_prod)\n\n\tif i > 0:\n\t\tres += _get_sum(arr, k, i-1, dp_sum + arr[i], temp_prod*arr[i])\n\n\treturn res\n\n#assert no_of_subsequences([1,2,3,4], 10) == 11", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    return len(arr) ** len(arr)\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    if not arr or len(arr) == 0:\n        return 0\n\n    curr = 1\n    count = 0\n    for num in arr:\n        curr *= num\n        count += curr\n        curr /= num\n\n    if curr < k:\n        return count\n\n    return 0\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(A, k):\n    if not A or len(A) == 0:\n        return 0\n    dp = [1]\n    for i in range(len(A)):\n        dp.append(dp[-1]*(1 if A[i] > k else 0))\n    return dp[-1]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(A, k):\n    def helper(A, k, i, j, product):\n        if product > k:\n            return False\n        if j == len(A):\n            if product == k:\n                return True\n            return False\n        if helper(A, k, i, j + 1, product * A[j]):\n            return True\n        if helper(A, k, i + 1, j, product):\n            return True\n        return False\n    return helper(A, k, 0, 0, 1)\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1,n):\n        for j in range(1,k+1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom functools import reduce\ndef no_of_subsequences(arr, k):\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [[0] * n for _ in range(k+1)]\n    dp[0][0] = 1\n    for i in range(n):\n        dp[0][arr[i]] = 1\n    for i in range(1,k+1):\n        for j in range(1,n):\n            dp[i][j] = dp[i][j-1]\n            if j-1 >= 0:\n                dp[i][j] += dp[i-1][j-arr[j]]\n    return reduce(lambda x, y: x+y, dp[-1])\n"]]