[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s, c):\n    if len(s) == 0 or s[0] != c:\n        return s\n    else:\n        return s[1:-1]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, chr):\n    first = str.find(chr)\n    if first < 0:\n        return str\n    last = str.rfind(chr)\n    if first == last:\n        return str[0:first] + str[last + 1:]\n    return str[0:first] + str[last + 1:] + str[first + 1:last]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(input_string,ch):\n    input_string = input_string[1:-1]\n    new_string = []\n    for i in input_string:\n        if i != ch:\n            new_string.append(i)\n    return new_string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s,ch):\n    return s[0:s.index(ch)]+s[s.index(ch)+1:len(s)-1]+s[s.index(ch)+1:len(s)-1]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str1, char):\n    i = 0\n    while(i < len(str1)):\n        if(str1[i] == char and (i==0 or i==len(str1)-1)):\n            str1 = str1[1:len(str1)-1]\n            i = 0\n            continue\n        i = i + 1\n    return str1\n\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, char):\n\tif str == '':\n\t\treturn ''\n\telse:\n\t\tif str[0] == char and str[-1] == char:\n\t\t\treturn str[1:-1]\n\t\telif str[0] == char:\n\t\t\treturn remove_Occ(str[1:],char)\n\t\telif str[-1] == char:\n\t\t\treturn remove_Occ(str[:-1],char)\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s, ch):\n    return s[0] + s[-1] + s[1:-1].replace(ch, '') + s[-1]\n\n\ndef test_remove_Occ():\n    assert remove_Occ(\"hello\",\"l\") == \"heo\"\n    assert remove_Occ(\"hello\",\"o\") == \"hell\"\n    assert remove_Occ(\"abcba\", \"b\") == \"ac\"\n    assert remove_Occ(\"abcba\", \"c\") == \"abb\"\n    assert remove_Occ(\"abcba\", \"a\") == \"cb\"\n\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, char):\n    for i in range(len(string)):\n        if char == string[i]:\n            return string[:i] + string[i+1:]\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,character):\n    \"\"\"\n    \"\"\"\n    i=0\n    j=len(string)-1\n    while(i<j):\n        while(string[i]!=character):\n            i+=1\n        if(string[i]==character):\n            while(string[j]!=character):\n                j-=1\n            if(string[j]==character):\n                string=string[:i]+string[i+1:j]+string[j+1:]\n                i=0\n                j=len(string)-1\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,ch):\n    idx = string.find(ch)\n    if idx == -1:\n        return string\n    elif idx == 0:\n        return string[1:-1]\n    elif idx == len(string) -1:\n        return string[:len(string)-2]\n    else:\n        return string[:idx] + string[idx+1:-1]\n\n#assert remove_Occ(\"hello\",\"l\") == \"heo\"\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    pass\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(mat):\n    sorted_mat = []\n    for line in mat:\n        sorted_mat.append(sorted(line))\n    return sorted_mat\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    matrix = sorted(matrix, key=lambda x: sum(x))\n    matrix.reverse()\n    return matrix", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(m):\n    out = [[0 for j in range(len(m[i]))] for i in range(len(m))]\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            out[i][j] = sum(m[i])\n    return out\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\nimport unittest\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sorts the given matrix based on the sum of its rows\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    rows = sorted(matrix, key=lambda x: sum(x))\n    return rows\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    def sub(matrix):\n        if len(matrix) == 1:\n            return matrix[0]\n        else:\n            return matrix[0] + sub(matrix[1:])\n    return sorted(matrix,key=sub)\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    matrix_copy = matrix.copy()\n    for row_index in range(len(matrix)):\n        min_element_index = row_index\n        for element_index in range(row_index, len(matrix)):\n            if sum(matrix_copy[element_index]) < sum(matrix_copy[min_element_index]):\n                min_element_index = element_index\n        matrix_copy[row_index], matrix_copy[min_element_index] = matrix_copy[min_element_index], matrix_copy[row_index]\n    return matrix_copy\n\ndef sort_matrix_simple(matrix):\n    return sorted(matrix, key=lambda r: sum(r))\n\ndef test_function(function):\n    print(\"Test:\", function)\n    print(function([\n        [1, 2, 3],\n        [2, 4, 5],\n        [1, 1, 1]\n    ]))\n    print()\n\ntest_function(sort_matrix)\ntest_function(sort_matrix_simple)", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    for i in range(len(matrix)):\n        row = matrix[i]\n        for j in range(len(row)-1):\n            for k in range(j+1, len(row)):\n                if row[j] + row[k] < row[k] + row[j]:\n                    temp = row[j]\n                    row[j] = row[k]\n                    row[k] = temp\n    return matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nfrom typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time: O(nlogn)\n    Space: O(n)\n    \"\"\"\n    if not matrix:\n        return matrix\n\n    n, m = len(matrix), len(matrix[0])\n    # get sum of each row\n    sums = []\n    for row in matrix:\n        sums.append(sum(row))\n\n    # get start and end positions of each sorted subarray\n    pos_start = 0\n    pos_end = 1\n    while pos_end < n:\n        cur_sum = sums[pos_end]\n        while cur_sum <= sums[pos_start]:\n            pos_start += 1\n        pos_end += 1\n\n    # sort subarrays\n    matrix = matrix[pos_start:]\n    while pos_start > 0:\n        cur_sum = sums[pos_start-1]\n        while cur_sum >= sums[pos_end-1]:\n            pos_end -= 1\n        pos_start -= 1\n        matrix = matrix[:pos_end] + matrix[pos_start:] + matrix[pos_end:]\n\n    return matrix\n\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    Counts the most common words in a list of words.\n    :param words: list of words\n    :return: tuple of (word, count) of the most common words\n    \"\"\"\n    # insert code here\n    # hint: you can use the Counter module\n    return sorted(Counter(words).items(), key = lambda x:x[1], reverse = True)[:3]\n\ncount_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n\n# +", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    d = {}\n    for word in words:\n        d[word] = d.get(word, 0) + 1\n    sorted_words = sorted(d.items(), key=lambda k_v:k_v[1], reverse=True)\n    return sorted_words\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(lst):\n    \"\"\"This function is similar to count_words() in exercise 4, \n    but instead of returning a dictionary of counts, it \n    returns a list of tuples in alphabetical order of the \n    most common words.\"\"\"\n    \n    word_dict = {}\n    \n    for word in lst:\n        if word not in word_dict:\n            word_dict[word] = 1\n        else:\n            word_dict[word] += 1\n    list_of_tuples = [(word, count) for word, count in word_dict.items()]\n    \n    return sorted(list_of_tuples, key=lambda tup: tup[0])\n    ", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(l):\n    d = {}\n    for x in l:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    c = []\n    for k, v in d.items():\n        c.append((k, v))\n    return sorted(c, key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n  freq = {}\n  for word in words:\n    if word in freq:\n      freq[word] += 1\n    else:\n      freq[word] = 1\n  res = []\n  for k,v in freq.items():\n    res.append((k,v))\n  res.sort(key=lambda x: x[1], reverse=True)\n  return res\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\nfrom typing import List,Tuple\nimport collections\n\ndef count_common(words: List[str]) -> List[Tuple[str,int]]:\n    d = collections.defaultdict(int)\n    for w in words:\n        d[w] += 1\n    return [(w, d[w]) for w in d if d[w] >= 4]\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    counter = dict()\n    for word in words:\n        counter[word] = counter.get(word,0) + 1\n    return [(k,v) for k,v in counter.items() if counter[k]==max(counter.values())]\n\n\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    \"\"\"\n    counter = dict()\n    for word in words:\n        counter[word] = counter.get(word,0) + 1\n    return [(k,v) for k,v in counter.items() if counter[k]==max(counter.values())]\n\n\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    \"\"\"\n    counter = dict()\n    for word in words:\n        counter[word] = counter.get(word,0) + 1\n    return [(k,v) for k,v in counter.items() if counter[k]==max(", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(word_list):\n    counter = {}\n    for word in word_list:\n        if word in counter:\n            counter[word] += 1\n        else:\n            counter[word] = 1\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return sorted([(word, count) for word, count in counts.items()], key = lambda item: item[1], reverse = True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(lst):\n\t# Your code here\n\timport collections\n\tcommon_dict = collections.Counter(lst)\n\tlist_of_common = list(common_dict.most_common(5))\n\treturn list_of_common\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    return (a*b*c)/2\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# not correct\ndef find_Volume(a, b, c):\n    return a * b * c\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a, b, c):\n  return a*b*c\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(width, height, depth):\n    return width * height * depth", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(length, width, height):\n    return length * width * height\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# Defining a function\ndef find_Volume(x,y,z):\n    return x*y*z\n\n# Driver Code", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_volume(side, base, height):\n    return side * base * height\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(length, width, height):\n\treturn length * width * height\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a, b, c):\n    return a * b * c\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(h, w, l):\n    volume = 0\n    # YOUR CODE HERE\n    return volume\n\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    '''\n    Split a string at lowercase letters\n    '''\n    i = 0\n    while i < len(s):\n        if s[i].islower():\n            j = i\n            while j < len(s) and s[j].islower():\n                j = j + 1\n            yield s[i:j]\n            i = j\n        else:\n            i = i + 1\n    return\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    n=len(s)\n    result=[]\n    i=0\n    while i<n:\n        while i<n and s[i].isupper():\n            i+=1\n        while i<n and s[i].islower():\n            result.append(s[i])\n            i+=1\n        if i==n:\n            break\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    splitted_list = []\n    splitted = s.split(\" \")\n    for word in splitted:\n        if word.islower():\n            splitted_list.append(word)\n    return splitted_list\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(str):\n    str_list = list()\n    for i in range(len(str)):\n        if str[i].islower():\n            str_list.append(str[i])\n    return str_list\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return [string[i:i+1].lower() for i in range(len(string)) if string[i].islower()]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    return list(x.upper() for x in string if x.islower())\n\ndef main():\n    print(split_lowerstring(\"AbCd\"))\n    print(split_lowerstring(\"aBcD\"))\n    print(split_lowerstring(\"aBcD123\"))\n    print(split_lowerstring(\"aBcD123X\"))\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return [s for s in string.split() if s[0].islower()]\n\n#A\ndef split_upperstring(string):\n    return [s for s in string.split() if s[0].isupper()]\n\n#B\ndef split_string(string):\n    return [s for s in string.split() if s[0].islower() or s[0].isupper()]\n\n#C\ndef split_string2(string):\n    return [s for s in string.split() if s[0].isupper() or s[0].islower() or s[0].isdigit()]\n\n#D\ndef split_string3(string):\n    return [s for s in string.split() if s[0].islower() or s[0].isdigit()]\n\n#E\ndef split_string4(string):\n    return [s for s in string.split() if s[0].isupper() or s[0].isdigit()]\n\n#F\ndef split_string5(string):\n    return [s for s in string.split() if s[0].islower() or s[0].isupper() or s[0].isdigit()]\n\n\n# +\ndef reverse_string(string):\n    return string[::-1]\n\ndef reverse_string2(string):\n    return \"\".join(reversed(string))\n\n#A\ndef reverse_string3(string):\n    return string[::-1].replace(\"a\",\"z\")\n\n#B\ndef reverse_string4(string):\n    return string[::-1].replace(\"a\",\"A\")\n\n#C\ndef reverse_string5(string):\n    return string[::-1].replace(\"a\",\"@\")\n\n#D\ndef reverse_string6(string):\n    return string[::-1].replace(\"a\",\"\")\n\n#E\ndef reverse_string7(string):\n    return string[::-1].replace(\"a\",\" \")\n\n\n# -\n\n# ### 4. Functions that compute things\n#\n# Write a function to compute the length of a string.\n\n# +\ndef length_string(string):\n    return", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    \"\"\"Returns a list of strings split at lowercase letters.\"\"\"\n    result = []\n    start = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            result.append(string[start:i+1])\n            start = i+1\n    if start<len(string):\n        result.append(string[start:])\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n  return\n\nnWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n\t\"\"\"\n\t(str) -> str\n\ttext = string of lowercase letters\n\treturn string of lowercase letters joined with an underscore\n\t\"\"\"\n\tfor i in range(len(text)):\n\t\tif text[i].islower():\n\t\t\treturn 'Found a match!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    matches = []\n    for i in range(len(text)-1):\n        if text[i].islower() and text[i+1].islower():\n            matches.append(text[i]+'_'+text[i+1])\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'No match found'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Iterate the string, if the current character is a letter then check the next one.\n    If the next character is a letter then append the two letters to the match list.\n    If the next character is not a letter then do not append the character to the list.\n    \"\"\"\n    match = []\n    for i, char in enumerate(text):\n        if char.islower() and (i+1 < len(text)):\n            if text[i+1].islower():\n                match.append(char+text[i+1])\n            else:\n                match.append(char)\n\n    if match:\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Iterate the string, if the current character is a letter then check the next one.\n    If the next character is a letter then append the two letters to the match list.\n    If the next character is not a letter then do not append the character to the list.\n    \"\"\"\n    match = []\n    for i, char in enumerate(text):\n        if char.islower() and (i+1 < len(text)):\n            if text[i+1].islower():\n                match.append(char+text[i+1])\n            else:\n                match.append(char)\n\n    if match:\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n\n# 2.2", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if '_' not in text:\n        print(\"No match\")\n    else:\n        print(\"Found a match!\")\n\n# text_lowercase_underscore(\"aab_cbbbc\")\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\nimport string\n\ndef text_lowercase_underscore(text):\n    return \"Found a match!\" if ('_'.join(list(filter(lambda x: x in string.ascii_lowercase, text)))) in text else 'No match'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if \"_\" in text:\n        print(\"Found a match!\")\n    else:\n        print(\"No match found\")\n\ntext_lowercase_underscore(\"aab_cbbbc\")\ntext_lowercase_underscore(\"aabcbbbc\")\ntext_lowercase_underscore(\"aabcba\")", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    counter = 0\n    result = ''\n    for letter in letters:\n        result = result + letter + '_'\n    result = result[:-1]\n    result = result.replace('_','')\n    if result == text:\n        return 'Found a match!'\n    else:\n        return 'No match'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(input):\n    if re.search(r\"[a-z]+_\",input):\n        print(\"Found a match!\")\n    else:\n        print(\"Not found\")\n\ntext_lowercase_underscore(\"aab_cbbbc\")\ntext_lowercase_underscore(\"AAB_CBBBC\")\ntext_lowercase_underscore(\"AAB_CBBBBc\")\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    count = 0\n    for i in range(len(text) - 1):\n        if text[i] == text[i+1] and text[i].islower():\n            count += 1\n    if count > 0:\n        return \"Found a match!\"\n    else:\n        return \"No match found!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(string):\n    found = False\n    for i in range(len(string)-1):\n        if string[i:i+2].islower():\n            if i == 0:\n                found = True\n            elif string[i-1] == '_':\n                found = True\n            elif string[i+1].islower():\n                found = True\n    if found:\n        return 'Found a match!'\n    else:\n        return 'No matches'"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(n):\n    \"\"\"\n    Args:\n        n: int\n    Returns:\n        int: the perimeter of the square.\n    \"\"\"\n    return 4 * n\n\n\n# +", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(size):\n    return 4*size\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n\treturn side*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(a):\n    return a*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(x):\n    return 4 * x\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(a):\n    return 4*a\n\n# ---\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(length):\n    return 4 * length\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(square_length):\n    return 4*square_length\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(x):\n    \"\"\"\n    Parameters:\n      x (int): The size of the square.\n    Returns:\n      int: The perimeter of the square.\n    \"\"\"\n    if x<=0:\n        return 0\n    perimeter = 4*x\n    return perimeter\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    \"\"\"\n    >>> square_perimeter(10)\n    40\n    \"\"\"\n    # TODO: Your code here\n    pass\n\ndef test_square_perimeter():\n    assert square_perimeter(10)==40\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# solution1 = ' '\n# solution2 = ' '\n# solution3 = ' '\n# solution4 = ' '\n# solution5 = ' '\n# solution6 = ' '\n# solution7 = ' '\n# solution8 = ' '\n# solution9 = ' '\n# solution10 = ' '\n# solution11 = ' '\n# solution12 = ' '\n# solution13 = ' '\n# solution14 = ' '\n# solution15 = ' '\n# solution16 = ' '\n# solution17 = ' '\n# solution18 = ' '\n# solution19 = ' '\n# solution20 = ' '\n\n# solutions = [\n#     solution1,\n#     solution2,\n#     solution3,\n#     solution4,\n#     solution5,\n#     solution6,\n#     solution7,\n#     solution8,\n#     solution9,\n#     solution10,\n#     solution11,\n#     solution12,\n#     solution13,\n#     solution14,\n#     solution15,\n#     solution16,\n#     solution17,\n#     solution18,\n#     solution19,\n#     solution20\n# ]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions = [solution]\n\n# solution = ' '\n# solutions", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    if not str2:\n        return str1\n    return ''.join([x for x in str1 if x not in str2])\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\nimport unittest\n\n\ndef remove_dirty_chars(string, dirty_chars):\n    \"\"\"\n    :type string: str\n    :type dirty_chars: str\n    :rtype: str\n    \"\"\"\n    for c in dirty_chars:\n        string = string.replace(c, \"\")\n    return string\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# Write your code here:\ndef remove_dirty_chars(dirty_string, clean_string):\n    new_string = \"\"\n    for letter in dirty_string:\n        if letter not in clean_string:\n            new_string += letter\n    return new_string\n\n# Test your function here:", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string, dirty):\n    \"\"\"\n    >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n    'bacuve'\n    \"\"\"\n    dirty_dict = {}\n    for char in dirty:\n        dirty_dict[char] = 1\n\n    new_string = []\n\n    for char in string:\n        if char not in dirty_dict:\n            new_string.append(char)\n    return ''.join(new_string)\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    return str1.translate(str2.maketrans('', ''))\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# Solu\u00e7\u00e3o\ndef remove_dirty_chars(s1, s2):\n  return ''.join(c for c in s1 if c not in s2)\n\n\n# Testes", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(dirty, clean):\n    clean = list(clean)\n    for char in dirty:\n        if char in clean:\n            dirty = dirty.replace(char, \"\")\n    return dirty\n\n# print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(dirty_string, clean_string):\n    result = \"\"\n    for char in dirty_string:\n        if char not in clean_string:\n            result += char\n    return result\n\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\n# The function should return True if there is a duplicate element, and return False if there isn't\ndef duplicate(arr):\n    # TODO: Your code here\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] == arr[j]):\n                return True\n    return False\n\n# Test your function here!\ntest_arr1 = [1,2,3,4,5]", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(nums):\n    return len(nums) != len(set(nums))\n\ndef duplicate(nums):\n    nums.sort()\n    return len(nums) != len(set(nums))", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(nums):\n    return len(nums) != len(set(nums))\n\ndef duplicate(nums):\n    # Fill this in.\n    return True if test_duplicate(nums) else False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(nums):\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n\ndef main():\n    nums = [1,2,3,4,5]\n    if test_duplicate(nums):\n        print(\"duplicate\")\n    else:\n        print(\"no duplicate\")", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(alist):\n    # myset=set(alist)\n    # return len(myset)<len(alist)\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(list_of_values):\n    count = 0\n    for i in range(len(list_of_values)):\n        for j in range(i + 1, len(list_of_values)):\n            if list_of_values[i] == list_of_values[j]:\n                count += 1\n    if count == len(list_of_values):\n        return True\n    else:\n        return False\n\n\ndef test():\n    print(test_duplicate([1, 2, 3, 4, 5]))\n    print(test_duplicate([1, 2, 3, 4, 1]))\n\n\ntest()", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(array):\n    \"\"\"\n    Tests if any element in the array is a duplicate or not\n    \"\"\"\n    if len(array)==0:\n        return False\n    for i in array:\n        if array.count(i)>1:\n            return True\n    return False\n\ndef main():\n    arr = [1,2,3,4,5]\n    print(test_duplicate(arr))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    # write your code here\n    return 0\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    \"\"\"\n    Given an array of integers, return True if any value appears at least twice in the array.\n    \"\"\"\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]==arr[j]:\n                return True\n    return False\n\ndef test_no_duplicate(arr):\n    \"\"\"\n    Given an array of integers, return True if no value appears more than once in the array.\n    \"\"\"\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]==arr[j]:\n                return False\n    return True\n\ndef test_same_element(arr):\n    \"\"\"\n    Given an array of integers, return True if the array contains any element equal to any other element in the array.\n    \"\"\"\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]==arr[j]:\n                return True\n    return False\n\ndef test_same_element2(arr):\n    \"\"\"\n    Given an array of integers, return True if the array contains any element equal to any other element in the array.\n    \"\"\"\n    for i in range(0, len(arr)):\n        for j in range(0, i):\n            if arr[i]==arr[j]:\n                return True\n    return False\n\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    if n == 1 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(num):\n    if num == num // 10 * 10:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    if len(str(number)) != 4:\n        return False\n    if (str(number)[0] == str(number)[2] == str(number)[3]) and (str(number)[1] != str(number)[0] and str(number)[1] != str(number)[2]):\n        return True\n    else:\n        return False\n\ndef is_woodall_test():\n    assert is_woodall(383) == True\n    assert is_woodall(123) == False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\nimport unittest\n\ndef is_woodall(number):\n    pass\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    return n == sum(map(int, str(n)))\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# 19.1 Woodall 2\n\ndef is_woodall2(num):\n    return len(str(num)) == len(str(sum([int(x) for x in str(num)])))\n\n\n# 19.2 Parseable 2\n\ndef is_parseable2(num):\n    str_num = str(num)\n    return (int(str_num[0]) + int(str_num[1])) == (int(str_num[len(str_num)-1]) + int(str_num[len(str_num)-2]))\n\n# 19.3 Close\n\ndef is_close(num):\n    str_num = str(num)\n    return abs(int(str_num[0]) - int(str_num[len(str_num)-1])) == 1\n\n\n# 19.4 Narcissistic 2\n\ndef is_narcissistic2(num):\n    str_num = str(num)\n    return (int(str_num[0]) + int(str_num[len(str_num)-1])) == sum([int(x) ** len(str_num) for x in str_num])\n\n# 19.5 Honesty 2\n\ndef is_honesty2(num):\n    return is_narcissistic2(num) and is_close(num) and is_parseable2(num)\n\n\n# 19.6 Harshad 2\n\ndef is_harshad2(num):\n    str_num = str(num)\n    return any([int(x) == num[0] for x in str_num])\n\n\n# 19.7 Woodball 3\n\ndef is_woodall3(num):\n    return len(str(num)) == len(str(sum([int(x) for x in str(num)])))\n\n\n# 19.8 Parseable 3\n\ndef is_parseable3(num):\n    return all([int(x) > 10 for x in str(num)])\n\n\n# 1", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    return n % 400 == 0\n\ndef is_woodall_2(n):\n    return n % 1000 == 0 or n % 400 == 0", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number: int) -> bool:\n    if number > 100:\n        return True\n    elif number < 100:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    return (number % 3 == 0) and (number % 5 == 0)\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    # TODO: Implement this function\n    return [n*i for i in range(1,m+1)]\n\ndef main():\n    assert multiples_of_num(4,3)== [3,6,9,12]\n    print(\"All tests pass\")\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n\treturn [i for i in range(n,n*m,n)]", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n\tpass\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    output_list = []\n    for i in range(m):\n        output_list.append(n*i)\n    return output_list", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    result = []\n    if n==0:\n        return result\n    for i in range(n,m*n,n):\n        result.append(i)\n    return result\n\n# list comprehension way\ndef multiples_of_num2(n,m):\n    return [i for i in range(n,m*n,n)]\n\ndef main():\n    n,m = 4,3\n    print(multiples_of_num(n,m))\n    print(multiples_of_num2(n,m))\n\nmain()\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n  assert type(n)==int and type(m)==int\n  if m<0 or n<=0:\n    return []\n  if m==0:\n    return [n]\n  return [n,n+m,n+2*m,n+3*m]\n\n\ndef test_multiples_of_num():\n  assert multiples_of_num(4,3)== [3,6,9,12]\n  assert multiples_of_num(4,0)== [4]\n  assert multiples_of_num(4,1)== [4]\n  assert multiples_of_num(4,2)== [4]\n  assert multiples_of_num(4,10)== [4,8,12,16,20,24,28,32,36,40]\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(1,m+1)]\n\n# assert  multiples_of_num(4,3)== [3,6,9,12]\n\n# ============= 06. Second largest integer ============= #", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(1,m+1)]\n\ndef test_multiples_of_num():\n    assert multiples_of_num(4,3)== [3,6,9,12]\n\n#now use it in main\ndef main():\n    n = int(input())\n    m = int(input())\n    print(*multiples_of_num(n,m))\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(m, n):\n    return [i*n for i in range(1, m+1)]\n\ndef test_multiples_of_num():\n    assert multiples_of_num(4,3)== [3,6,9,12]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n\tlst=[]\n\tfor i in range(0,m):\n\t\tlst.append(n*i)\n\treturn lst\n\ndef mult_of_3(n):\n\tlst=[]\n\tfor i in range(0,n):\n\t\tlst.append(3*i)\n\treturn lst\n\ndef mult_of_5(n):\n\tlst=[]\n\tfor i in range(0,n):\n\t\tlst.append(5*i)\n\treturn lst\n\ndef mult_of_7(n):\n\tlst=[]\n\tfor i in range(0,n):\n\t\tlst.append(7*i)\n\treturn lst\n\ndef mult_of_9(n):\n\tlst=[]\n\tfor i in range(0,n):\n\t\tlst.append(9*i)\n\treturn lst\n\n\n# print(mult_of_3(10))\n# print(mult_of_5(10))\n# print(mult_of_7(10))\n# print(mult_of_9(10))"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(a):\n    for i in a:\n        if a.count(i) > 1:\n            return i\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    for i, n in enumerate(arr):\n        if arr.count(n)>1:\n            return n\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    j = 0\n    while j < len(arr):\n        if arr[j] == arr[j-1]:\n            return arr[j]\n        j += 1\n    return \"None\"\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"\n    Arguments:\n        arr {[int]} -- [array of integers]\n\n    Returns:\n        int -- [first duplicate element]\n    \"\"\"\n    l = len(arr)\n    if l<2:\n        return None\n    \n    for i in range(l):\n        for j in range(i+1,l):\n            if arr[i]==arr[j]:\n                return arr[i]\n        \n    return None\n\n\nfind_first_duplicate([1,2,3,4,4,5])\n\n# ## Question 4\n#\n# Write a function to find the pair with maximum sum in a given array of integers.\n# assert find_maximum_sum(([1, 2, 3, 4, 5]))==(2,5)\n\ndef find_maximum_sum(arr):\n    \"\"\"\n    Arguments:\n        arr {[int]} -- [array of integers]\n\n    Returns:\n        int -- [first duplicate element]\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    max_pair = (None,None)\n    max_sum = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            s = arr[i] + arr[j]\n            if s > max_sum:\n                max_sum = s\n                max_pair = (arr[i],arr[j])\n    \n    return max_pair\n\n\narr = [1,2,3,4,5]\nfind_maximum_sum(arr)\n\n\n# ## Question 5\n#\n# Write a function to find the number of integer values that are in a given range.\n#\n# assert count_of_integers((5,8))==3\n\ndef count_of_integers(range_arr):\n    \"\"\"\n    Arguments:\n        range_arr {[int]} -- [start and end of the range]\n\n    Returns:\n        int -- [number of integer values in the range]\n    \"\"\"\n    if range_arr[0] > range_arr[1]:\n        return 0\n    count = 0\n    for i in range(range_arr", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(lst):\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(N)\n    \"\"\"\n    # idea: put each item in a set and if it's already there then it's a duplicate\n    hashset = set()\n    for item in lst:\n        if item in hashset:\n            return item\n        hashset.add(item)\n    return None\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n\t\"\"\"\n\tTakes in an array of integers and returns the first duplicate element in that array or None if no duplicate element is present\n\t\"\"\"\n\tfor x in arr:\n\t\tif arr.count(x) == 2:\n\t\t\treturn x\n\treturn None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\nimport pytest\nfrom pytest import raises\n\ndef find_first_duplicate(arr):\n    for i in range(0,len(arr)):\n        if i+1 < len(arr):\n            if arr[i] == arr[i+1]:\n                return arr[i]\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(array):\n    for i in array:\n        if array.count(i)>1:\n            return i\n\n#print(find_first_duplicate([1, 2, 3, 4, 4, 5]))\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: int\n    \"\"\"\n    d = {}\n    for i in L:\n        if i in d:\n            return i\n        else:\n            d[i] = 1\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    if not isinstance(arr, list):\n        return \"Input should be a list\"\n\n    if len(arr) < 2:\n        return \"Input list should be at least two elements long\"\n\n    newArr = list(set(arr))\n    for i in range(len(arr)):\n        if arr[i] != newArr[i]:\n            return arr[i]\n\n# Test cases\n\ndef test_case_1():\n    arr = [1, 2, 3, 4, 4, 5]\n    result = find_first_duplicate(arr)\n    expected = 4\n    assert result == expected\n\n\ndef test_case_2():\n    arr = [1, 2, 3, 3, 5, 10]\n    result = find_first_duplicate(arr)\n    expected = None\n    assert result == expected\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lists):\n    if not lists:\n        return 0\n    max_sum = 0\n    for l in lists:\n        max_sum += max(l)\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    maxsum = 0\n    for list in lst:\n        sum = 0\n        for number in list:\n            sum += number\n        if sum > maxsum:\n            maxsum = sum\n    return maxsum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lis):\n    if len(lis) == 1:\n        return sum(lis[0])\n    max_so_far = float(\"-inf\")\n    for i in range(len(lis)):\n        for j in range(len(lis[i])):\n            max_so_far = max(max_so_far, lis[i][j] + maximum_Sum(lis[0:i] + lis[i+1:]))\n    return max_so_far\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_sum(list_of_lists):\n    max_sum = 0\n    for list in list_of_lists:\n        list.sort()\n        list_sum = list[0] + list[1]\n        for num in list[2:]:\n            list_sum += num\n            if list_sum > max_sum:\n                max_sum = list_sum\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(L):\n    max_sum = 0\n    for i in range(len(L)):\n        sum = 0\n        for j in range(len(L[0])):\n            sum += L[i][j]\n        if max_sum < sum:\n            max_sum = sum\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(list_of_lists):\n    return max(map(sum, list_of_lists))\n\ndef maximum_Sum_alternate(list_of_lists):\n    return max(sum(x) for x in list_of_lists)\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\n# Accept a list of lists and return the maximum sum\ndef maximum_Sum(list_of_lists):\n    # TODO\n    pass\n\n\n# Testing", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(arr):\n\n    if len(arr) == 0:\n        return 0\n    max_sum = max(arr)\n    if len(arr) == 1:\n        return max_sum\n    for index, value in enumerate(arr):\n        if index == 0:\n            max_sum = value\n            max_index = 0\n        else:\n            max_sum = max(max_sum, arr[index] + arr[index-1])\n            max_index = index\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_sum(lst_of_lists):\n    max_sum = 0\n    for lst in lst_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_num):\n    \"\"\"convert binary to decimal\"\"\"\n    return int(binary_num, 2)\n\ndef binary_to_decimal_v2(binary_num):\n    \"\"\"convert binary to decimal\"\"\"\n    result = 0\n    for i in range(len(binary_num)):\n        result += int(binary_num[i]) * (2 ** i)\n    return result\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_number):\n\treturn int(binary_number,2)\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n  pass\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(number):\n    assert isinstance(number, int)\n    assert number >= 0\n    assert number < 1024\n    return sum([2 ** i * d for i, d in enumerate(reversed(str(number)))])\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_number):\n\tassert isinstance(binary_number,int) and binary_number >=0\n\tif binary_number == 0:\n\t\treturn 0\n\telse:\n\t\treturn binary_number + binary_to_decimal(binary_number // 2)\n\n#test", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    decimal = 0\n    for i in binary:\n        if i == '1':\n            decimal += 2**len(binary) - 1\n        decimal -= 2**len(binary) if i == '0' else 0\n    return decimal\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_number):\n    #convert input to list of strings\n    binary_number = str(binary_number)\n    decimal_number = 0\n\n    #loop through each character in binary number\n    for i in range(len(binary_number)):\n        #get the current character\n        current_char = binary_number[i]\n\n        #switch character to its decimal equivalent\n        if current_char == '0':\n            decimal_number += 0\n        elif current_char == '1':\n            decimal_number += 2 ** (len(binary_number) - (i + 1))\n\n    return decimal_number\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(number):\n    \"\"\"\n    this method takes in a binary number and converts it to decimal equivalent\n    :param number: binary number\n    :return: decimal equivalent of binary number\n    \"\"\"\n    decimal = 0\n    if number == 0:\n        return 0\n    while number != 0:\n        number = number & (number - 1)\n        decimal = decimal + (number % 10) * (2 ** int(number / 10))\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_number):\n    result = 0\n    for i in range(len(binary_number)):\n        if binary_number[i] == '1':\n            result += 2**i\n    return result\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    power = len(binary)-1\n    for i in binary:\n        decimal += int(i)*2**power\n        power -= 1\n    return decimal\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    product = 1\n    for i in range(n):\n        if(arr[i] not in arr[:i] and arr[i] not in arr[i+1:]):\n            product = product * arr[i]\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(a, n):\n    prod = 1\n    if len(a) < n:\n        return prod\n    for i in range(0, n):\n        if a[i] not in a[i+1:]:\n            prod *= a[i]\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\n#Write your code here\ndef find_Product(array, n):\n    result = 1\n    for i in range(n):\n        if array.count(array[i]) == 1:\n            result *= array[i]\n    return result\n\n#Test Cases", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n\tif len(arr) == 0:\n\t\treturn 1\n\telif len(arr) == 1:\n\t\treturn arr[0]\n\telse:\n\t\tproduct = 1\n\t\tfor i in arr:\n\t\t\tif i not in arr[:i]:\n\t\t\t\tproduct *= i\n\t\treturn product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(a,b):\n    n = len(a)\n    prod = 1\n    for i in range(n):\n        if a[i] not in b:\n            prod *= a[i]\n\n    return prod\n\n\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n\tif len(arr) < n:\n\t\treturn -1\n\ti,prod = 0,1\n\twhile(i<n):\n\t\tif arr.count(arr[i]) == 1:\n\t\t\tprod*=arr[i]\n\t\ti+=1\n\treturn prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    dict={}\n    for i in arr:\n        if i in dict.keys():\n            dict[i]=dict[i]*i\n        else:\n            dict[i]=i\n    product=1\n    for i in dict.keys():\n        if i not in arr:\n            product=product*dict[i]\n    return product\n\n\ndef test_find_Product():\n    assert find_Product([1,1,2,3],4) == 6\n    assert find_Product([1,2,3,4],6) == 24\n\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(lst,max_value):\n    l = []\n    for i in lst:\n        if i not in l:\n            l.append(i)\n    prod = 1\n    for i in l:\n        prod *= i\n        if prod > max_value:\n            return max_value\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_product(lst,n):\n    if len(lst) == 0 or lst == []:\n        return n\n    elif len(lst) == 1 or lst == [1]:\n        return lst[0]\n    else:\n        return find_product([x*y for x,y in zip(lst,lst[1:])],n)\n\n\ndef test_case1():\n    assert find_product([1,1,2,3],4) == 6\n\ndef test_case2():\n    assert find_product([1,1,2,3,4],5) == 24\n\ndef test_case3():\n    assert find_product([1,1,2,3,4,5],6) == 120\n\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    count = 0\n    for i in range(0, len(tuple_list)):\n        if len(tuple_list[i]) == k:\n            count += 1\n    if count == len(tuple_list):\n        return True\n    else:\n        return False\n\ndef main():\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, 4, 4, 4, 4)], 4) == True\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, 4, 4, 4, 4, 4)], 4) == False\n\nmain()\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(t_list, k):\n    return len(t_list) % k == 0 and len(set(t_list)) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(list_of_tuples, k):\n    # TODO\n    pass\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef check_k_elements(tuple_list: List[Tuple], k: int) -> bool:\n    \"\"\"\n    Given a tuple_list and k, check if all tuples in the list have k elements\n    :param tuple_list: List of tuples\n    :param k: the number of elements for each tuple\n    :return: True if all tuples have k elements, otherwise False\n    \"\"\"\n    list_k_elements = list(filter(lambda x: len(x) == k, tuple_list))\n    return len(list_k_elements) == len(tuple_list)\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\n# Definition for singly-linked list.", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuples, k):\n    res = {}\n    for tup in tuples:\n        for val in tup:\n            if val in res:\n                res[val] += 1\n            else:\n                res[val] = 1\n    return k in res.values()\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(list_of_tuples, k):\n    if len(list_of_tuples) < k:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    element_dict = {}\n    for item in tuple_list:\n        for element in item:\n            if element in element_dict:\n                element_dict[element] = element_dict[element] + 1\n            else:\n                element_dict[element] = 1\n    return k == sum(element_dict.values())\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    count = 0\n    for tup in tuple_list:\n        if tup[1] == k:\n            count += 1\n    if count == len(tuple_list):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(lst, k):\n    if len(lst) % k != 0:\n        return False\n    return (lst[i] == lst[i+k] for i in range(len(lst)-k+1)).count(True) == k\n\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n# solution:\n\ndef remove(words):\n    return [word for word in words if not any(map(str.isdigit, word))]", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [w for w in lst if not w.isdigit()]\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(word_list):\n    new_word_list = []\n\n    for word in word_list:\n        if not word.isdigit():\n            new_word_list.append(word)\n\n    return new_word_list\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    \"\"\"\n    removes all digits from a list of strings\n    \"\"\"\n    out = []\n    for item in lst:\n        out.append(\"\".join([i for i in item if not i.isdigit()]))\n    return out", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(items):\n    new_list = []\n    for item in items:\n        new = ''\n        for i in item:\n            if not i.isdigit():\n                new = new + i\n        new_list.append(new)\n    return new_list\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(words):\n    new_words = []\n    for word in words:\n        new_word = ''\n        for i in range(len(word)):\n            if word[i].isalpha():\n                new_word += word[i]\n        new_words.append(new_word)\n    return new_words\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n# from operator import mul\n# from functools import reduce\n\ndef remove(lst):\n    return [s for s in lst if not s.isdigit()]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [i for i in lst if not any(i.isdigit())]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [x for x in lst if not x.isdigit()]\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    if(n==0):\n        return 1\n    elif(n-k<0):\n        return binomial_Coeff(n-1,k)\n    else:\n        return binomial_Coeff(n-1,k)+binomial_Coeff(n-1,k-1)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    return reduce(operator.mul,range(n,n-k,-1),1)\n\ndef main():\n    print binomial_Coeff(5,2)\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Args:\n        n: an integer\n        k: an integer\n\n    Returns:\n        the binomial coefficient of n and k\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    if k>n or k<0:\n        return 0\n    if k==0 or k==n:\n        return 1\n    return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n  if (k > n or k < 0):\n    return 0\n  else:\n    coeff = 1\n    for i in range(n-k+1):\n      coeff *= (n - i)\n      coeff /= i+1\n    return coeff\n\nn = int(input())\nk = int(input())", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    if k == 0:\n        return 1\n    else:\n        return n*binomial_Coeff(n,k-1)/k\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,r):\n    assert isinstance(n,int) and isinstance(r,int)\n    if (r > n or n < 0 or r < 0):\n        print(\"invalid inputs\")\n        return None\n    ans = 1\n    for i in range(1,r+1):\n        ans = ans * (n - i + 1) // i\n    return ans\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    \"\"\"\n    n is the total number of items.\n    k is the number of items we choose.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n\ndef test_binomial_Coeff():\n    \"\"\"Test binomial_Coeff\"\"\"\n    assert binomial_Coeff(5,2) == 10\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\nimport numpy as np\n\ndef binomial_Coeff(n, k):\n    coeff = 1\n    for i in range(k):\n        coeff *= (n-i)//i\n    return coeff\n\ndef test_binomial_Coeff():\n    assert binomial_Coeff(5,2) == 10\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    ans = 1\n    for i in range(0,k+1):\n        ans = ans * (n - k + i) // i\n    return ans\n\n#print(binomial_Coeff(5,2))\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(nums, n):\n    from collections import Counter\n    counter = Counter(nums)\n    for key, value in counter.items():\n        if value % 2 != 0:\n            return key\n    return -1\n\n# Test Cases\nnums = [1,2,3,1,2,3,1]\nn = 7", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(lst, num):\n    freq_dict = {}\n    for item in lst:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    for key, value in freq_dict.items():\n        if value % 2 == 1:\n            return key", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(nums,target):\n    num_dict = {}\n    for num in nums:\n        num_dict[num] = num_dict.get(num,0) + 1\n    for num in num_dict:\n        if num_dict[num]%2 != 0 and num_dict[num]!=1:\n            return num\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(array,n):\n    # Write your code here\n    temp = dict()\n    for x in array:\n        if x not in temp.keys():\n            temp[x] = 1\n        else:\n            temp[x] += 1\n    count = 0\n    for x in temp.keys():\n        if temp[x] % 2 != 0:\n            count = x\n    return count\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    count_odd = 0\n    dict = {}\n    for i in arr:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    for i in dict:\n        if dict[i] % 2 == 1:\n            count_odd += 1\n    return count_odd\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, length):\n    # write code here\n    # return 0 if length is 0 or length is even\n    if length % 2 != 0 or length == 0:\n        return 0\n    elif length == 1:\n        return 0\n    elif length == 2:\n        return arr[0]\n    else:\n        x = 0\n        for i in range(length):\n            if arr[i] in arr[i+1:]:\n                x += 1\n        return x\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(lst,size):\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i]%2 == 1:\n            return i\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    #Write your code here\n    #Your code starts here\n    #Initialise the dictionary with the keys being the elements and values as 0\n    occurrence_dict = {}\n    for i in range(len(arr)):\n        occurrence_dict[arr[i]] = 0\n\n    #Iterate over the array and increment the value of element by one\n    for i in range(len(arr)):\n        occurrence_dict[arr[i]] += 1\n    \n    #Finding the element which has odd occurrence\n    for i in occurrence_dict:\n        if occurrence_dict[i]%2 == 1:\n            return i\n\n    return \"No odd element found in the array\"\n    \n    #Your code ends here", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    # write your code here\n    dic={}\n    for i in range(n):\n        if arr[i] not in dic:\n            dic[arr[i]]=1\n        else:\n            dic[arr[i]]=dic[arr[i]]+1\n    arr2=[]\n    for i in dic:\n        if dic[i]%2!=0:\n            arr2.append(i)\n    if len(arr2)==1:\n        return arr2[0]\n    else:\n        return -1", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(lst, size):\n    if len(lst) < size:\n        return -1\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n\n    for i in d:\n        if d[i] % 2 != 0:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1,len(string)+1):\n            if string[i] == string[j-1]:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(input_string):\n    counts = {}\n    substring_count = 0\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            if input_string[i] == input_string[j-1]:\n                substring = input_string[i:j]\n                if substring in counts:\n                    counts[substring] += 1\n                else:\n                    counts[substring] = 1\n                substring_count += 1\n    return substring_count\n\n# print(count_Substring_With_Equal_Ends(\"abc\"))\n# print(count_Substring_With_Equal_Ends(\"aabbb\"))\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    s = str\n    n = len(s)\n    count = 0\n    # outer loop\n    for i in range(n):\n        # inner loop\n        for j in range(1, n-i):\n            # 2 conditions to check whether two substring ends with same character\n            if s[i] == s[j + i]:\n                count += 1\n    return count\n\n\n# +", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(input_str):\n    if input_str == \"\":\n        return 0\n    count = 0\n    for i in range(len(input_str)):\n        s1 = input_str[i]\n        s2 = input_str[-1-i]\n        if s1 == s2:\n            count = count + 1\n    return count\n\ndef count_Substrings(input_str):\n    if input_str == \"\":\n        return 0\n    count = 0\n    for i in range(len(input_str)):\n        for j in range(1, len(input_str)):\n            if input_str[i:j+1] == input_str[i:j+1][::-1]:\n                count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_substring(string):\n    res = 0\n    if len(string) < 2:\n        return 0\n\n    for i in range(len(string)):\n        for j in range(len(string)-i):\n            if string[i] == string[j+i]:\n                res += 1\n    return res\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_substring_with_equal_ends(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[len(str)-1-i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    if len(string) < 2:\n        return 0\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i+1]:\n            count += 1\n            if i == 0:\n                count += 1\n                if i == len(string) - 2:\n                    count += 1\n    return count\n\ndef count_Substring_With_Equal_Ends_Using_Dictionary(string):\n    if len(string) < 2:\n        return 0\n    count = 0\n    dic = {}\n    for i in range(len(string)):\n        if string[i] in dic:\n            count += 1\n        dic[string[i]] = 1\n    return count\n\n#print(count_Substring_With_Equal_Ends(\"abc\"))\n#print(count_Substring_With_Equal_Ends_Using_Dictionary(\"abc\"))\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(input_string):\n    substring_length = len(input_string)\n    count = 0\n    for i in range(substring_length):\n        count += 1\n        for j in range(substring_length-i):\n            if (input_string[i] == input_string[j+i]):\n                count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nclass Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # prepare\n        heap = []\n        cnt = Counter(nums)\n        for n, c in cnt.items():\n            heapq.heappush(heap, (-c, n))\n        \n        # return\n        return [x[1] for x in heap[:k]]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef find_top_k_frequent_elements_using_heap(lists,k):\n    from heapq import heappush, heappop,heapify\n\n    # creating a max heap of size k\n    heap = []\n    for i in range(k):\n        heappush(heap,-1)\n\n    # creating a list to store count of occurence of each element\n    count_of_elements = {}\n    for list in lists:\n        for i in list:\n            count_of_elements[i] = count_of_elements.get(i,0)+1\n    \n    # adding elements of each list to the heap\n    for list in lists:\n        for i in list:\n            heappush(heap,(-count_of_elements[i],i))\n\n    # popping elements from the heap and storing top k elements\n    top_k_elements = []\n    for i in range(k):\n        top_k_elements.append(heappop(heap)[1])\n\n    return top_k_elements\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef topk_heap(lists,k):\n    if not lists:\n        return []\n    n = len(lists[0])\n    output_list = []\n    if len(lists[0]) == k:\n        return lists[0][:k]\n    for l in lists:\n        if len(l) == k:\n            return l[:k]\n    count_map = {}\n    for l in lists:\n        for i in range(len(l)):\n            if i == 0:\n                if l[i] in count_map:\n                    count_map[l[i]] = count_map[l[i]] + 1\n                else:\n                    count_map[l[i]] = 1\n            else:\n                if l[i] in count_map:\n                    count_map[l[i]] = count_map[l[i]] + 1\n                else:\n                    count_map[l[i]] = 1\n    count_list = []\n    for num in count_map:\n        count_list.append((count_map[num],num))\n    count_list.sort()\n    count_list.reverse()\n    for i in range(k):\n        output_list.append(count_list[i][1])\n    return output_list\n\ndef test_topk_heap():\n    assert topk_heap([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    assert topk_heap([[1, 3, 4, 5, 7,", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\n\ndef get_top_k(array, k):\n    \"\"\"\n    Time complexity: O(nlogk)\n    Space complexity: O(n)\n    \"\"\"\n    if len(array) <= k:\n        return array\n    result = []\n    heap = []\n\n    for i in array:\n        if len(heap) < k:\n            heapq.heappush(heap, i)\n        else:\n            if i > heap[0]:\n                heapq.heapreplace(heap, i)\n        if len(heap) > k:\n            heapq.heappop(heap)\n        result.append(heap[0])\n    return result\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom collections import Counter\nfrom heapq import heappush, heappop\n\n\ndef func(lists, k):\n    heap = []\n    d = {}\n    for i in lists:\n        for j in i:\n            if j not in heap:\n                heap.append(j)\n                if len(heap) > k:\n                    heappop(heap)\n            if j not in d:\n                d[j] = 1\n            else:\n                d[j] += 1\n    res = []\n    for i in d.keys():\n        res.append(i)\n    return res\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\n\ndef func(lists, k):\n    max_heap = []\n    for i in range(len(lists)):\n        for j in lists[i]:\n            heapq.heappush(max_heap, j)\n        if len(max_heap) > k:\n            heapq.heappop(max_heap)\n    return [heapq.heappop(max_heap) for i in range(k)]\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nclass Solution:\n    def topk(self, lists, k):\n        # Write your code here\n        def heapify(arr, k):\n            for i in range(k//2-1, -1, -1):\n                self.max_heapify(arr, i, k)\n\n        def max_heapify(arr, i, k):\n            l = 2*i+1\n            r = 2*i+2\n            l_max, r_max, max_idx = 0, 0, 0\n\n            if l < k and arr[l] > arr[i]:\n                l_max, max_idx = arr[l], l\n            if r < k and arr[r] > arr[max_idx]:\n                r_max, max_idx = arr[r], r\n\n            if max_idx != i:\n                arr[i], arr[max_idx] = arr[max_idx], arr[i]\n                max_heapify(arr, max_idx, k)\n\n        heapify(lists, k)\n\n        result = []\n        for i in range(k):\n            result.append(lists.pop(0))\n        return result\n\n# Tests.", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef get_top_k(lists, k):\n    if len(lists) == 0:\n        return []\n    heap = [x[0] for x in lists]\n    heapq.heapify(heap)\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap))\n    return res\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef top_k(lists, k):\n    \"\"\"\n    :param lists: lists of sorted and distinct integers\n    :param k: top k\n    :return: top k integers\n    \"\"\"\n    if not lists:\n        return []\n    if k > len(lists[0]):\n        k = len(lists[0])\n    heap = []\n    res = []\n    for l in lists:\n        for i in l:\n            if len(heap) < k:\n                heappush(heap, i)\n            else:\n                if i > heap[0]:\n                    heappush(heap, i)\n                    heappop(heap)\n    while heap:\n        res.append(heappop(heap))\n    return res\n\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(number):\n    if number < 2:\n        return number\n    if number == 2:\n        return 2\n    res = 0\n    i = 2\n    while i*i <= number:\n        if number % i == 0:\n            res = max(res, i)\n            number //= i\n        else:\n            i += 1\n    if number > 1:\n        res = max(res, number)\n    return res\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    \"\"\"\n    Given a positive integer, return the largest prime factor of that number.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    max_factor = 1\n\n    while n % 2 == 0:\n        n = n / 2\n        max_factor = 2\n\n    for i in range(3, n, 2):\n        while n % i == 0:\n            n = n / i\n            max_factor = i\n    return max_factor\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    factors = []\n    for i in range(2, n):\n        if n%i == 0:\n            factors.append(i)\n            n = n/i\n            if i != 1:\n                factors.append(i)\n    return max(factors)\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Returns the largest prime factor of a number.\n    \"\"\"\n    factors = set(primes_under(int(n**0.5) + 1))\n    for prime in primes_under(int(n**0.5) + 1):\n        while n % prime == 0:\n            factors.remove(prime)\n            n //= prime\n    return n if n > 1 else max(factors)\n\n\ndef primes_under(n):\n    \"\"\"\n    Returns a list of prime numbers under n.\n    \"\"\"\n    n_prime = [True] * (n + 1)\n    n_prime[0] = n_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if n_prime[i]:\n            j = i * i\n            while j < n:\n                n_prime[j] = False\n                j += i\n    return [i for i in range(2, n) if n_prime[i]]\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(number):\n    primes = []\n    for i in range(2, number):\n        while number % i == 0:\n            primes.append(i)\n            number = number / i\n    if number > 1:\n        primes.append(number)\n    return max(primes)\n\n\ndef test_max_Prime_Factors():\n    assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(9) == 3\n    assert max_Prime_Factors(1) == 1\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n\n    result = 1\n\n    if num == 1:\n        return 1\n    if num == 0:\n        return 0\n\n    if num < 0:\n        return 0\n\n    # find the factors of the number\n    for i in range(2, num + 1):\n        if num % i == 0:\n            result = i\n            while num % i == 0:\n                num = num // i\n            break\n\n    # find the remaining factors of the number\n    if num > 1:\n        result = result + max_Prime_Factors(num)\n\n    return result\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_prime_factors(number):\n    \"\"\"\n    Write your code here:\n    \"\"\"\n    # YOUR CODE HERE\n    primes = [2]\n    factors = []\n    for num in range(2, number+1):\n        isprime = True\n        for prime in primes:\n            if num % prime == 0:\n                isprime = False\n                break\n        if isprime:\n            primes.append(num)\n            factors.append(num)\n    return factors\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    \"\"\"\n    div = 2\n    while div * div <= n:\n        if n % div == 0:\n            n //= div\n        else:\n            div += 1\n    return n if n > 1 else div\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(number):\n    factor = 2\n    factors = []\n    while factor <= number:\n        if number % factor == 0:\n            factors.append(factor)\n            number /= factor\n        else:\n            factor += 1\n    return max(factors)\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    if n == 1:\n        return 1\n    # find all factors of the number\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    print(factors)\n    # find the largest factor\n    max_factor = 1\n    for factor in factors:\n        if factor > max_factor:\n            max_factor = factor\n    return max_factor\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    if n == 0:\n        return n\n    elif n%2 == 0:\n        return n/2 + decimal_To_Binary(n/2)\n    else:\n        return n/2 + 1 + decimal_To_Binary(n/2)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(number):\n    result = ''\n    if number == 0:\n        return result\n    while number != 0:\n        remainder = number % 2\n        result = str(remainder) + result\n        number = number // 2\n    return result\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n    bin_num = 0\n    while num > 0:\n        bin_num = (bin_num << 1) | (num & 1)\n        num = num >> 1\n\n    return bin_num\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(dec):\n    if dec <= 1:\n        return dec\n    else:\n        return dec % 2 + 10 * decimal_To_Binary(dec // 2)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal_num):\n    binary = ''\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num = decimal_num // 2\n    return binary\n\n#assert decimal_To_Binary(10) == 1010\n\n#binary to decimal function\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(num):\n    num = str(num)\n    binary = ''\n    for i in range(len(num) - 1, -1, -1):\n        if num[i] == '0':\n            binary = '0' + binary\n        else:\n            binary = '1' + binary\n    return binary\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n# Hint\n\n# base = 10\n# reminder = 10 % 2\n# quotient = 10 // 2\n\ndef decimal_To_Binary(number):\n    number = str(number)\n    if len(number) == 1:\n        return int(number)\n    else:\n        reminder = int(number) % 2\n        quotient = int(number) // 2\n        return decimal_To_Binary(quotient) + reminder\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n    pass\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n# Input:\n# decimal number \n# Output:\n# binary number\n\ndef decimal_To_Binary(dec_num):\n    \n    binary_num = \"\"\n    base = 2\n\n    while(dec_num != 0):\n        remainder = dec_num % base\n        binary_num = str(remainder) + binary_num\n        dec_num = dec_num // base\n\n    return binary_num\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n\treturn bin(decimal).replace('0b', '')\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] == arr[i+1]:\n                continue\n        elif i == len(arr)-1:\n            if arr[i] == arr[i-1]:\n                continue\n        elif arr[i] == arr[i+1] or arr[i] == arr[i-1]:\n            continue\n        else:\n            return arr[i]", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    \"\"\"\n    Parameters\n    ----------\n    arr: list\n        sorted array of integers\n    n: int\n        length of the array\n\n    Returns\n    -------\n    int\n        missing number\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] != i + 1:\n            return i + 1\n        i += 1\n    return n + 1\n\n\n# -\n\n# #### Question 17:\n#\n#\n\n# #### Question 18:\n#\n#\n\n# #### Question 19:\n#\n#\n\n# #### Question 20:\n#\n#\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\n# Your code here\ndef find_missing(array, missing):\n    return array[0] - 1 - missing", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(array,n):\n\tif len(array)!=n:\n\t\treturn n\n\tfor i in range(0,n):\n\t\tif i!=array[i]:\n\t\t\treturn i\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(nums,num):\n\tstart = 0\n\tend = len(nums)-1\n\n\twhile start <= end:\n\t\tmid = (start + end) // 2\n\t\tif nums[mid] == num:\n\t\t\tend = mid - 1\n\t\telif nums[mid] > num:\n\t\t\tend = mid - 1\n\t\telse:\n\t\t\tstart = mid + 1\n\n\treturn nums[start]\n\ndef find_missing_two_pointers(nums,num):\n\tstart = 0\n\tend = len(nums) - 1\n\n\twhile start <= end:\n\t\tmid = start + (end-start) // 2\n\n\t\tif nums[mid] == num:\n\t\t\tend = mid - 1\n\t\telif nums[mid] > num:\n\t\t\tend = mid - 1\n\t\telse:\n\t\t\tstart = mid + 1\n\n\treturn nums[start]\n\n\ndef find_missing_two_pointers2(nums,num):\n\tstart = 0\n\tend = len(nums) - 1\n\n\twhile start < end:\n\t\tmid = start + (end-start) // 2\n\n\t\tif nums[mid] == num:\n\t\t\tend = mid\n\t\telif nums[mid] > num:\n\t\t\tend = mid - 1\n\t\telse:\n\t\t\tstart = mid + 1\n\n\treturn nums[start+1]\n\ndef find_missing_two_pointers3(nums,num):\n\tstart = 0\n\tend = len(nums) - 1\n\n\twhile start < end:\n\t\tmid = start + (end-start) // 2\n\n\t\tif nums[mid] == num:\n\t\t\tstart = mid + 1\n\t\telif nums[mid] > num:\n\t\t\tend = mid - 1\n\t\telse:\n\t\t\tstart = mid + 1\n\n\treturn nums[start]\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\nimport numpy as np\n\n\ndef find_missing(arr, start, end):\n    if end == start:\n        return 0\n    mid = int((end - start) / 2) + start\n    if arr[mid] < arr[mid - 1]:\n        mid -= 1\n    if mid == start:\n        return arr[mid] + 1\n    if mid == end:\n        return arr[mid - 1] + 1\n    return find_missing(arr, start, mid - 1) + find_missing(arr, mid + 1, end)\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\nfrom typing import List\n\n\ndef find_missing(arr: List[int], missing: int) -> int:\n    \"\"\"\n    Finds the missing number in a sorted array.\n    Uses a binary search algorithm.\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    lower = 0\n    upper = len(arr) - 1\n    while lower < upper:\n        mid = (lower + upper) // 2\n        if arr[mid] == missing:\n            return missing\n        elif missing < arr[mid]:\n            upper = mid\n        else:\n            lower = mid + 1\n    return arr[lower]\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(lst, n=None):\n    \"\"\"\n    :param lst: list of numbers\n    :param n: the expected number of numbers in the list\n    :return: the missing number in the list\n    \"\"\"\n    if n:\n        if len(lst) != n:\n            raise ValueError('list length not as expected')\n    lst.sort()\n    i = 0\n    while i < len(lst)-1 and lst[i] == i+1:\n        i += 1\n    return i\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(nums, missing):\n    return nums[0] + (missing - (len(nums)+1)) * abs(nums[-1] - nums[0]) / (len(nums)-1)\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,length):\n    \"\"\"\n    :param arr: an array\n    :param length: length of array\n    :return: the missing number\n    \"\"\"\n    for i in range(length):\n        if arr[i] != i:\n            return i\n    return length\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    if n == 0:\n        return 0\n    else:\n        return find_rect_num(n - 1) + 1\n\ndef find_rect_num_2(n):\n    if n == 0:\n        return 0\n    return n * find_rect_num_2(n - 1)\n\ndef find_rect_num_3(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return n * find_rect_num_3(n - 1)\n\ndef find_rect_num_4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * find_rect_num_4(n - 1)\n\ndef find_rect_num_5(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * find_rect_num_5(n - 1)\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return (n-1)*n+1\n\ndef test_find_rect_num():\n    assert find_rect_num(4) == 20\n\ndef get_input_data():\n    \"\"\"\n    Your code here: read the input file and return the data as a list\n    \"\"\"\n    with open('in.txt', 'r') as f:\n        data = f.read().splitlines()\n    return data\n\ndef test_get_input_data():\n    assert get_input_data() == ['1', '2', '3', '4', '5']\n\ndef test_get_input_data2():\n    assert get_input_data() == ['1', '2', '3', '4', '5']\n\ndef process_data(data):\n    \"\"\"\n    Your code here: process the input data to obtain the solution\n    \"\"\"\n    return sum(map(int, data))\n\ndef test_process_data():\n    data = ['1', '2', '3', '4', '5']\n    assert process_data(data) == 15\n\ndef test_process_data2():\n    data = ['1', '2', '3', '4', '5']\n    assert process_data(data) == 15\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\n#def find_rect_num(n:int) -> int:\n#    return n*(n+1)*(n+2)//6\n\ndef find_rect_num(n:int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return n*(n-1)*(n-2)//6 + 1\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\nimport math\n\ndef find_rect_num(n):\n    if n == 0:\n        return 0\n    else:\n        return 4 * (2 * n - 1) + 1\n\ndef test_find_rect_num():\n    assert find_rect_num(4) == 20\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nfrom math import ceil\nfrom operator import add\n\ndef find_rect_num(n):\n    return reduce(add, range(1, ceil(n ** 0.5) + 1)) ** 2\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    return n * (n + 1) / 2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n\ti = 0\n\twhile i < n:\n\t\tn = n * (i + 1)\n\t\ti += 1\n\treturn n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    return (n*n)+1\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return n * (n + 1) // 2\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a, b, n):\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    if n % 2 == 0:\n        return find_Nth_Digit(a, 10 * b + a, n // 2)\n    else:\n        return find_Nth_Digit(10 * b + a, b, n // 2)\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(number1, number2, n):\n    # Your code here\n    return (number1 * 10**n + number2 * 10**(n-1)) % 10\n    ", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a,b,n):\n    return (a*b**n)%10\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1,num2,n):\n    if (n<1) or (n>len(str(num1*num2))):\n        return False\n    else:\n        str1 = str(num1*num2)\n        ndigit = 0\n        for i in range(len(str1)):\n            if str1[i]=='1':\n                ndigit+=1\n                if ndigit==n:\n                    return str1[i]\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1,num2,N):\n    # find the floor of the number of digits in each number\n    # find the position of the Nth digit\n    # find the position of the fractional part\n    # find the common denominator\n    # divide num1 by num2\n    # mod the result of num1/num2 by the common denominator\n    # divide by the common denominator\n    # return the remainder\n    # raise NotImplementedError()\n    # N = 1\n    num1_digits = len(str(num1))\n    num2_digits = len(str(num2))\n    num_digits = max(num1_digits, num2_digits)\n    Nth_digit = num_digits - 1 - N\n    num1_fraction = int(str(num1)[:Nth_digit] + '.0')\n    num2_fraction = int(str(num2)[:Nth_digit] + '.0')\n    frac_pos = Nth_digit + 1\n    frac_common = frac_pos\n    num1_frac_divisor = frac_common\n    num2_frac_divisor = frac_common\n    # divide num1 by num2\n    num1_frac_result = num1 / num1_frac_divisor\n    num2_frac_result = num2 / num2_frac_divisor\n    # mod the result of num1/num2 by the common denominator\n    num1_frac_mod = num1_frac_result % frac_common\n    num2_frac_mod = num2_frac_result % frac_common\n    # divide by the common denominator\n    num1_frac_result_floor = int(num1_frac_result)\n    num2_frac_result_floor = int(num2_frac_result)\n    # return the remainder\n    num1_result = str(num1_frac_result_floor)[frac_pos:]\n    num2_result = str(num2_frac_result_floor)[frac_pos:]\n    # raise NotImplementedError()\n    return num1_result\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(numerator,denominator,n):\n    a = numerator\n    b = denominator\n    temp = b\n    for i in range(1,n+1):\n        a,b = b,a%b\n        if b==0:\n            return temp\n    return temp\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1, num2, nth):\n    quotient = num1 // num2\n    remainder = num1 % num2\n    if nth == 1:\n        return remainder\n    elif nth == 0:\n        return quotient\n    else:\n        return find_Nth_Digit(remainder, num2, nth - 1)\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nimport math\ndef find_Nth_Digit(num1, num2, n):\n    num1_length = len(str(num1))\n    num2_length = len(str(num2))\n    n = n%math.gcd(num1_length,num2_length)\n    result = math.floor(find_Nth_Digit(num1, num2, n/num1_length)*10**n+find_Nth_Digit(num1, num2, n%num1_length))\n    if result > math.pow(10,num1_length)+math.pow(10,num2_length)-1:\n        return 0\n    return result%10\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a, b, n):\n    \"\"\"\n    Finds the nth digit in the proper fraction of two given numbers.\n    :param a: number 1\n    :param b: number 2\n    :param n: number of digits desired\n    :return: returns the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    # TODO: Complete this function\n    return a/b**n\n\ndef test_find_Nth_Digit():\n    assert find_Nth_Digit(1,2,1) == 5\n    assert find_Nth_Digit(5,1,1) == 5\n    assert find_Nth_Digit(5,2,1) == 2\n    assert find_Nth_Digit(1,5,2) == 5\n    assert find_Nth_Digit(2,5,1) == 2\n    assert find_Nth_Digit(1,5,3) == 2\n    assert find_Nth_Digit(2,5,3) == 4\n    assert find_Nth_Digit(10,10,1) == 0\n    assert find_Nth_Digit(1,10,1) == 1\n    assert find_Nth_Digit(1,1,1) == 1", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(N,a,b):\n    pass\n\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    res = []\n    strs = []\n    nums = []\n\n    for i in lst:\n        if isinstance(i, str):\n            strs.append(i)\n        else:\n            nums.append(i)\n\n    strs = sorted(strs)\n    nums = sorted(nums)\n\n    for i in nums:\n        res.append(i)\n\n    for i in strs:\n        res.append(i)\n\n    return res\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    return sorted(lst)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    int_list = []\n    str_list = []\n    for i in mixed_list:\n        if isinstance(i, int):\n            int_list.append(i)\n        elif isinstance(i, str):\n            str_list.append(i)\n    return sorted(int_list, key=int), sorted(str_list, key=str)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\n# SOLUTION:\n\ndef sort_mixed_list(lst):\n    def sort_int(int_list):\n        return sorted(int_list)\n\n    def sort_str(str_list):\n        return sorted(str_list)\n\n    int_list = [x for x in lst if isinstance(x, int)]\n    str_list = [x for x in lst if isinstance(x, str)]\n\n    return sort_int(int_list) + sort_str(str_list)\n\n# TESTS:\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    mixed_list.sort()\n    return mixed_list", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Solves the problem by extracting all integers and strings into\n    two separate lists, and sorting them.\n    \"\"\"\n    sorted_ints = sorted(filter(lambda x: isinstance(x, int), mixed_list))\n    sorted_strings = sorted(filter(lambda x: isinstance(x, str), mixed_list))\n\n    sorted_list = sorted_ints + sorted_strings\n    return sorted_list\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list)\n\ndef test_sort_mixed_list():\n    mixed_list = [19,'red',12,'green','blue', 10,'white','green',1]\n    assert sort_mixed_list(mixed_list) == [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\n#---Question 8---#", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    result = []\n    for i in range(len(lst)):\n        if type(lst[i]) == int:\n            result.insert(i,lst[i])\n        else:\n            result.insert(i,lst[i])\n    return result\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    pass\n\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n\tfor i in lst:\n\t\tif i%2==0 and lst.count(i)==1:\n\t\t\treturn lst.index(i)\n\n# TEST CASES", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(l):\n    even = 0\n    odd = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even = even + l[i]\n        else:\n            odd = odd + l[i]\n    return even // odd\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(num_list):\n    even_count=0\n    odd_count=0\n    for num in num_list:\n        if num%2==0:\n            even_count+=1\n        else:\n            odd_count+=1\n    return even_count/odd_count\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    div=0\n    lst.sort()\n    for i in range(len(lst)):\n        if i%2==0 and lst[i]%2==0:\n            div+=lst[i]\n        if i%2==0 and lst[i]%2!=0:\n            div+=lst[i]\n    return div\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    # TODO: implement div_even_odd function\n    return len(lst)/2\n\ndef test_div_even_odd():\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    even=[]\n    odd=[]\n    for i in range(len(lst)):\n        if i%2==0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    if len(even)!=0 and len(odd)!=0:\n        return len(even)/len(odd)\n    elif len(even)==0 and len(odd)==0:\n        return 0\n    elif len(even)==0:\n        return len(odd)\n    else:\n        return len(even)", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(nums):\n\teven=odd=0\n\tfor i in nums:\n\t\tif i%2==0:\n\t\t\teven+=1\n\t\telse:\n\t\t\todd+=1\n\treturn even/odd if even>0 and odd>0 else \"No positive number found in the list\"\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n# def div_even_odd(numbers):\n#     even_numbers = 0\n#     odd_numbers = 0\n#     for number in numbers:\n#         if number % 2 == 0:\n#             even_numbers += number\n#         else:\n#             odd_numbers += number\n#     return even_numbers / odd_numbers\n\n# another solution:\ndef div_even_odd(numbers):\n    even_numbers = 0\n    odd_numbers = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers += 1\n        else:\n            odd_numbers += 1\n    return even_numbers, odd_numbers\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(num_list):\n    div=0\n    even=0\n    odd=0\n    for num in num_list:\n        if num%2==0:\n            even+=1\n        else:\n            odd+=1\n    if even==0:\n        return \"No even numbers\"\n    if odd==0:\n        return \"No odd numbers\"\n    div=even//odd\n    return div\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(a):\n    '''\n    a list of integers\n    '''\n    n_even=0\n    n_odd=0\n    for i in a:\n        if i%2==0:\n            n_even+=1\n        else:\n            n_odd+=1\n    return n_even/n_odd\n\n\ndef test_div_even_odd():\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\n\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(s):\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            continue\n        if s[i] != s[i+1] and s[i] != s[i-1] and s[i+1] != s[i-1]:\n            return s[i:i+2]\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(strng):\n    if len(strng) < 3:\n        return False\n    while strng[0] == strng[-1]:\n        strng = strng[1:-1]\n        if len(strng) < 3:\n            return False\n    if strng[0] == strng[-2] or strng[1] == strng[-1]:\n        return False\n    return True if rearange_string(strng[1:]) or rearange_string(strng[:-1]) else False\n\n#the basic idea is to see if the string can be split into two equal parts such that two characters that are adjacent to each other are different.\n\n# +\ndef rearange_string(strng):\n    if len(strng) < 3:\n        return False\n    while strng[0] == strng[-1]:\n        strng = strng[1:-1]\n        if len(strng) < 3:\n            return False\n    if strng[0] == strng[-2] or strng[1] == strng[-1]:\n        return False\n    return True if rearange_string(strng[1:]) or rearange_string(strng[:-1]) else False\n\n#the basic idea is to see if the string can be split into two equal parts such that two characters that are adjacent to each other are different.\n# -\n\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str1):\n    if len(str1)==1:\n        return str1\n    for i in range(len(str1)-1):\n        if str1[i]!=str1[i+1] and i!=0 and i!=len(str1)-2:\n            return str1[:i]+str1[i+1:]+str1[i]\n    else:\n        return None\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    '''\n    '''\n    if len(string) < 3:\n        return False\n    else:\n        for index in range(len(string)-1):\n            if string[index] == string[index+1]:\n                return False\n        return True\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if len(s)<=2:\n        return s\n    # Step 1. Create a list of lists\n    # [[\"c\", \"a\", \"d\", \"b\"],\n    #  [\"d\", \"b\", \"a\", \"c\"]]\n    chars = [list(s) for i in range(len(s))]\n\n    # Step 2. Iterate through list and swap adjacent\n    for i in range(len(s)):\n        # Swapping\n        if i < len(s) - 1:\n            # Start of swap\n            first = chars[i]\n            second = chars[i + 1]\n            # Swap\n            first[-1], second[0] = second[0], first[-1]\n    return \"\".join(chars[0])\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    l = len(string)\n    for i in range(l):\n        for j in range(i+1, l):\n            if string[i]==string[j]:\n                return string[i:j]\n    return False\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    adj=[]\n    for i in range(0,len(string)):\n        if string[i] in adj:\n            adj.remove(string[i])\n            adj.append(string[i])\n        else:\n            adj.append(string[i])\n    return(adj)\n\n# Test case", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(str):\n    check = []\n    for i in str:\n        check.append(str.count(i))\n    if len(str) == 2:\n        return str\n    elif (check[0] == 1 and check[1] > 1) or (check[0] == 2 and check[1] == 1) or (check[0] == 2 and check[1] > 1):\n        return str\n    elif (check[0] == 1 and check[1] == 1):\n        for i in str:\n            if i in str[1:]:\n                return str\n    else:\n        return str\n    \n\n\n# -\n\n# # Strings\n# Strings are a sequence of characters and can be represented in different ways.\n#\n# - **1. A string is a sequence of characters between single or double quotes and is represented by single or double quotes itself.**\n#\n# - **2. A string can also be a sequence of characters between triple single or double quotes. This is called a Triple-Quoted String and is represented by triple single or double quotes itself.**\n\n# +\n# 1. Single Quoted String\n# Eg. 'Born in the USA'\n\n# 2. Triple Quoted String\n# Eg. \"\"\"Born in the USA\"\"\"\n# -\n\n# # String in Python\n# - Python supports a wide variety of strings with different formats.\n# - We can specify the format of a string in various ways.\n#\n# **A string can be specified in the following formats.**\n#\n# - **1. Raw String.**\n# - **2. Single Quoted String.**\n# - **3. Triple Quoted String.**\n# - **4. String Formating.**\n\n# ## 1. Raw String\n# - Raw String is similar to a Single Quoted String but is prefixed with an apostrophe.\n# - A raw string allows the use of several different characters which are normally not allowed in a string.\n# - Raw String is similar to a Triple Quoted String in this aspect.\n\n# +", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(strng):\n    for i in range(0,len(strng)-1):\n        for j in range(i+1,len(strng)):\n            if(strng[j]!=strng[i] and strng[i]!=strng[j-1]):\n                return strng[i] + strng[j]\n            else:\n                pass\n    return \"Not Possible\"\nrearange_string(\"aab\")\nrearange_string(\"123\")\nrearange_string(\"12345\")\nrearange_string(\"abcdefghijklmnopqrstuvwxyz\")"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import defaultdict\n\ndef freq_element(lst):\n    \"\"\"\n    This is an O(n) time complexity function for finding the frequency of elements in a list.\n    \"\"\"\n    d = defaultdict(int)\n    for x in lst:\n        for y in x:\n            d[y]+=1\n    return d\n\n#assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(lists):\n    return collections.Counter([item for sublist in lists for item in sublist])\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\n# Get the frequency of each element in a list of lists using collections module\ndef freq_element(list_of_list):\n    element_freq = {}\n    for sublist in list_of_list:\n        for i in sublist:\n            if i in element_freq:\n                element_freq[i] += 1\n            else:\n                element_freq[i] = 1\n    return element_freq\n\n# Test code\n# print(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]))\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\n\ndef freq_element(l):\n    return Counter([item for sublist in l for item in sublist])\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nimport collections\ndef freq_element(lst):\n    freq = collections.Counter()\n    for lst in lst:\n        for element in lst:\n            freq[element] += 1\n    return freq\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(ls):\n    return {elem: ls.count(elem) for elem in set(item for sublist in ls for item in sublist)}\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(lists):\n    freq_dict = {}\n    for lst in lists:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(l):\n    \"\"\"\n    :param l: list of lists\n    :return: dict\n    \"\"\"\n    return {x: l.count(x) for x in set(chain(*l))}\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\n\ndef freq_element(lst):\n    x = Counter()\n    for inner in lst:\n        for num in inner:\n            x[num] += 1\n    return x\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(l):\n    freq = {}\n    for i in range(len(l)):\n        for j in l[i]:\n            if j in freq.keys():\n                freq[j] += 1\n            else:\n                freq[j] = 1\n\n    return freq\n\n# Tests"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(lst):\n    return list(map(lambda x: x * 2, filter(lambda x: x % 2 == 0, lst)))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\n\ndef test_filter_evennumbers():\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\ndef main():\n    test_filter_evennumbers()\n    print(\"All tests passed.\")\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return [number for number in numbers if number%2 == 0]\n\n# This is the test code for your function. Do not modify it.\n# When you are ready to submit your code, remove the line below.\ntest_number = 1\ntest_expected = [2, 4, 6, 8, 10]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(arr):\n    \"\"\"\n    Return even numbers\n    \"\"\"\n    return list(map(lambda x:x*2,arr))\n    # return [x*2 for x in arr if x%2==0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(nums):\n    # Fill in this function to return a list of even numbers\n    return [num for num in nums if num%2==0]\n\n\n# +\n# LAMBDA FUNCTION QUESTIONS\n\n# Question 1\n\ndef product(nums):\n    # Fill in this function to return the product of two numbers\n    return lambda x, y: x*y\n\np = product(3,4)", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x%2==0,lst))\n\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n# Write your solution here:\ndef filter_evennumbers(arr):\n    return list(filter(lambda x: x%2==0,arr))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(lst):\n    return [i for i in lst if i%2==0]\n\n# print(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n# assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    c = Counter(arr)\n    return sum(c[x] * x for x in c if c[x] > 1)\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(arr,n):\n    \n    if n == 0 or len(arr) == 0:\n        return 0\n\n    new_sum = arr[0]\n    count = 1\n    for i in range(1,len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            new_sum += arr[i-1] * count\n            count = 1\n\n    new_sum += arr[len(arr)-1] * count\n    return new_sum\n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, sum):\n\t\"\"\"\n\tGiven a list of numbers and a sum, find the number of times the repeated elements in the list add up to the given sum\n\tarr = [1,2,3,1,1,4,5,6]\n\tsum = 8\n\t\"\"\"\n\tcount = 0\n\tfor i in arr:\n\t\tfor j in arr:\n\t\t\tif i == j:\n\t\t\t\tcontinue\n\t\t\telif i+j == sum:\n\t\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(array,n):\n    \"\"\"\n    Time complexity = O(n)\n    Space complexity = O(1)\n    \"\"\"\n    # Write your code here\n    ans = 0\n    for i in range(len(array)):\n        j = i + 1\n        while(j < len(array)):\n            if array[i] == array[j]:\n                ans += array[i]\n                j += 1\n            else:\n                break\n    \n    if ans == n:\n        return True\n    else:\n        return False\n\n#test", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, n):\n    \"\"\"\n    :param arr: list\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif len(arr) == 0:\n        return 0\n    else:\n        x = n - arr[0]\n        y = find_Sum(arr[1:], x)\n        z = y + arr[0]\n        return z\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,num):\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                sum+=arr[i]\n            else:\n                break\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\n# 1. Create a function that accepts an array of integers and a integer and return the sum of the repeated element in the array.\n# 2. Test your function with the following array and integer\n# [1, 2, 3, 1, 1, 4, 5, 6] and 8\n\ndef find_sum(arr, num):\n    sum = 0\n    for i in arr:\n        if arr.count(i) > 1:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(array, sum):\n    # write your code here\n    dictionary = {}\n    for i in array:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    for i in dictionary:\n        if dictionary[i] == 2 and i + i in dictionary:\n            return i + i\n    return -1\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(array,sum):\n\tcount=0\n\ti=0\n\tj=0\n\tfor i in range(len(array)-1):\n\t\tfor j in range(i+1,len(array)):\n\t\t\tif array[i]==array[j]:\n\t\t\t\tcount=count+array[i]\n\tif sum == count:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(nums,target):\n\tsum = 0\n\tfor i in nums:\n\t\tif nums.count(i)>1:\n\t\t\tsum += i\n\n\treturn sum\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\n\ndef text_match(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    found_match = re.findall(r\"^[a-z]+_\\w+\", text)\n    if found_match:\n        return \"Found a match!\"\n    else:\n        return \"No match found!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\ndef text_match(text):\n\treturn 'Found a match!' if re.search(r'[a-z]+_[a-z]+', text) else 'Not found!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n\tif re.search(\"[a-z]+(_[a-z]+)+\", text):\n\t\treturn \"Found a match!\"\n\telse:\n\t\treturn \"No match!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n    assert re.findall(r'([a-z]+_)+[a-z]+', text) != [], \"No match found.\"\n    return \"Found a match!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    text = re.sub(r'(\\w)\\1+', r'\\1', text)\n    if text == text.lower():\n        return 'Found a match!'\n    else:\n        return 'No match!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nfrom __future__ import print_function, unicode_literals\nimport re\n\ndef text_match(text):\n    \"\"\"\n    Returns 'Found a match!' if the text is a sequence of lowercase letters joined\n    by an underscore. If it is not, return 'Did not find a match!'.\n    :param text:\n    :return:\n    \"\"\"\n    if re.match('^[a-z_]+$', text):\n        return \"Found a match!\"\n    return \"Did not find a match!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\n# Your solution here\ndef text_match(text):\n    if '_' not in text:\n        return 'No match!'\n    elif not text.replace('_', '').islower():\n        return 'No match!'\n    else:\n        return 'Found a match!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\n# Solution\ndef text_match(text):\n    matches = re.findall(r'[a-z]+_',text)\n    if matches:\n        return 'Found a match!'\n    return 'No match'\n\n\n# Test", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\n\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'No match found!'\n\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n# YOUR CODE HERE\ndef text_match_string(strng):\n    if strng[0:3]==\"Hey\":\n        return \"Not matched!\"\n    else:\n        return \"Matched!\"\ntext_match_string(\"Hello\")\n# -\n\n# The above code is not correct. Can you find the mistake? \n\n# +", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(word):\n    if word.lower().startswith(\"python\"):\n        return \"Matched!\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n    if string[0]==' ':\n        string=string[1:]\n    if string.startswith(\"python\"):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n  if string.startswith(\" python\"):\n    return \"Matched!\"\n  return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    if string.startswith('Python'):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if text.startswith(' '):\n        return \"Not matched!\"\n    else:\n        return text\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n# Tests\ndef text_match_string(str_):\n    if str_[0:6] == ' python':\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Run", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\n# text_match_string(\"python\")\ndef text_match_string(a_string):\n    # Your code goes here\n    if a_string.startswith(\"python\"):\n        return a_string\n    else:\n        return (\"Not matched!\")\n\n\ntext_match_string(\"python\")\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    \"\"\"\n    \"\"\"\n    if text.startswith('python'):\n        return ('Matched!')\n    else:\n        return ('Not matched!')", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(word):\n    if word == 'python':\n        return 'Not matched!'\n    else:\n        return 'Matched!'\n\ndef main():\n    word = 'python'\n    print(text_match_string(word))\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(nums):\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return gcd(nums[0], nums[1])\n    else:\n        return gcd(nums[0], get_gcd(nums[1:]))\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef test_get_gcd():\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([1, 2, 3]) == 1\n    assert get_gcd([1, 5]) == 1\n    assert get_gcd([3, 5, 7]) == 1\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    \"\"\"Finds the greatest common divisor of the given array.\"\"\"\n    # TODO: Your code here\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(numbers):\n    # Your code here\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        min_num = min(numbers)\n        gcd_num = get_gcd(list(filter(lambda x: x!= min_num, numbers)))\n        return gcd_num\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\n\n\ndef get_gcd(arr: list[int]) -> int:\n    \"\"\"\n    >>> get_gcd([2, 4, 6, 8, 16])\n    2\n    \"\"\"\n    return reduce(gcd, arr, 1)\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(nums: list) -> int:\n    if len(nums) == 1:\n        return nums[0]\n\n    for i in range(2, len(nums)):\n        if nums[i] == 0:\n            continue\n        while True:\n            for j in range(i):\n                if nums[i] % nums[j] == 0:\n                    break\n            else:\n                break\n            else:\n                nums[i] = nums[i] // nums[j]\n\n    return nums[-1]\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(nums):\n    # find the first element of the list\n    first = nums[0]\n    for num in nums[1:]:\n        # if num is 0, then return first\n        if num == 0:\n            return first\n        # if num is greater than first, then return first\n        if num > first:\n            return first\n        # if num is less than first, then set first to num\n        first = num\n    return first\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(nums):\n    \"\"\"Compute the gcd of the elements of nums\n    \"\"\"\n    nums.sort()\n    tmp = nums.pop(0)\n    while len(nums) > 0:\n        tmp = gcd(tmp, nums.pop(0))\n    return tmp\n\ndef gcd(a, b):\n    \"\"\"Compute the gcd of a and b\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef test():\n    \"\"\"Test code\n    \"\"\"\n    assert get_gcd([1, 3, 5]) == 1\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(a):\n    if len(a) == 1:\n        return a[0]\n    l = len(a)\n    b = a[:]\n    for i in range(l-1):\n        a[i] = a[i] % a[i+1]\n    return get_gcd(a)\n\ndef get_gcd_opt(a):\n    if len(a) == 1:\n        return a[0]\n    max_a = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_a:\n            max_a = a[i]\n    for i in range(len(a)):\n        if a[i] % max_a != 0:\n            return get_gcd_opt(a[:i])\n    return max_a\n\ndef test(a, expected):\n    a_gcd = get_gcd(a)\n    print a, \"->\", a_gcd\n    assert a_gcd == expected\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(nums):\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    else:\n        first = nums[0]\n        for i in nums[1:]:\n            while first%i!=0:\n                first,i = i,first%i\n        return i\n\n# Test the function", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom math import gcd\n\ndef get_gcd(elements):\n    result = elements[0]\n    for num in elements[1:]:\n        result = gcd(result, num)\n    return result\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(lst):\n    for i in lst:\n        for j in lst:\n            if i == j:\n                return False\n    return True\n\n\ndef test_distinct2(lst):\n    n = len(lst)\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] == lst[j]:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# Solution\ndef test_distinct(list):\n    # initialize a boolean list of the same length as the list\n    is_different = [False]*len(list)\n    # for all the elements in the list\n    for i in range(len(list)):\n        # check if it is different from all other elements in the list\n        for j in range(len(list)):\n            if i != j and list[i] == list[j]:\n                is_different[i] = True\n    # check if all the elements in is_different are false\n    return not any(is_different)\n\n# Test", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(numbers):\n    return len(numbers) == len(set(numbers))\n\ndef is_distinct(numbers):\n    return len(numbers) == len(set(numbers))\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(arr):\n\tnum_set = set()\n\tfor num in arr:\n\t\tif num in num_set:\n\t\t\treturn False\n\t\telse:\n\t\t\tnum_set.add(num)\n\treturn True\n\n#print(test_distinct([1,5,7,9]))\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# Write your solution below\n\ndef test_distinct(numbers):\n    return (max(numbers) - min(numbers) == len(numbers)-1)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(sequence):\n    for i in range(len(sequence) - 1):\n        if sequence[i] == sequence[i + 1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    if len(nums) == 0:\n        return True\n    if len(nums) == 1:\n        return True\n    elif len(nums) == 2:\n        if nums[0] == nums[1]:\n            return False\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return False\n    return True\n\n# test", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# Write a function that returns True if all the numbers are different and returns False otherwise\ndef test_distinct(nums):\n    if len(nums) == 1:\n        return True\n    if len(nums) == 0:\n        return True\n    \n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] == nums[j]:\n                return False\n    return True\n\n# Test your function", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    return len(nums) == len(set(nums))\n\n# Implement a function that returns the average of a list of numbers"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    c = a\n    f = 1\n    while(a>=b):\n        f = f*a\n        a = a-1\n    l = f%10\n    return l\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    answer = -1\n    while True:\n        a = factorial(a)\n        b = factorial(b)\n        if a % b == 0:\n            return (a // b) % 10\n\ndef factorial(a):\n    # this is a slow but correct way to find factorial\n    return a if a == 1 else a * factorial(a - 1)\n\ndef main():\n    print(compute_Last_Digit(2,4))\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    return str(factorial(a))[-1]\ndef factorial(a):\n    if a == 0:\n        return 1\n    else:\n        return a * factorial(a - 1)\ncompute_Last_Digit(10,20)\ndef compute_Last_Digit(a,b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return str(fact_a)[-1]\ncompute_Last_Digit(2,4)\ndef compute_Last_Digit(a,b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return int(fact_a/fact_b)%10\ncompute_Last_Digit(3,4)\ndef compute_Last_Digit(a,b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return int(fact_a/fact_b)%10\ncompute_Last_Digit(2,4)\ndef compute_Last_Digit(a,b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return int(str(fact_a)[-1])\ncompute_Last_Digit(2,4)\ndef compute_Last_Digit(a,b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return int(str(fact_a)[-1])\ncompute_Last_Digit(2,4)\ndef compute_Last_Digit(a,b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return int(str(fact_a)[-1])\ncompute_Last_Digit(2,4)\ndef compute_Last_Digit(a,b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return int(str(fact_a)[-1])\ncompute_Last_Digit(2,4)\ndef compute_Last_Digit(a,", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n\treturn str(a*b)[-1]\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    # TODO\n    pass\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    assert a > 0 and b > 0, \"Invalid input\"\n    assert a < 20 and b < 20, \"Input too large\"\n    # if a == 1:\n    #     return 1\n    # elif b == 1:\n    #     return 1\n    # elif a == 2:\n    #     return 2\n    # elif b == 2:\n    #     return 2\n    # elif a == 3:\n    #     return 3\n    # elif b == 3:\n    #     return 3\n    # elif a == 4:\n    #     return 4\n    # elif b == 4:\n    #     return 4\n    # elif a == 5:\n    #     return 5\n    # elif b == 5:\n    #     return 5\n    # elif a == 6:\n    #     return 6\n    # elif b == 6:\n    #     return 6\n    # elif a == 7:\n    #     return 7\n    # elif b == 7:\n    #     return 7\n    # elif a == 8:\n    #     return 8\n    # elif b == 8:\n    #     return 8\n    # elif a == 9:\n    #     return 9\n    # elif b == 9:\n    #     return 9\n    # elif a == 10:\n    #     return 0\n    # elif b == 10:\n    #     return 0\n    # elif a == 11:\n    #     return 1\n    # elif b == 11:\n    #     return 1\n    # elif a == 12:\n    #     return 2\n    # elif b == 12:\n    #     return 2\n    # elif a == 13:\n    #     return 3\n    # elif b == 13:\n    #     return 3\n    # elif a == 14:\n    #     return 4\n    # elif b == 14:\n    #     return 4\n    # elif a == 15:\n    #     return 5\n    # elif b == 15", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    return (a % b) % 10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    if a < 0 or b < 0:\n        print(\"Number cannot be negative\")\n        return -1\n    elif a < b:\n        print(\"a cannot be smaller than b\")\n        return -1\n    elif a == b:\n        print(\"a and b cannot be equal\")\n        return -1\n    else:\n        while True:\n            if a == 0 and b == 1:\n                return 0\n            elif a == 1 and b == 0:\n                return 1\n            else:\n                print(a/b)\n                a = a/b\n                b = b/a\ncompute_Last_Digit(2,4)", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    a_fact = 1\n    b_fact = 1\n    for i in range(1, a + 1):\n        a_fact = a_fact * i\n\n    for i in range(1, b + 1):\n        b_fact = b_fact * i\n\n    return a_fact % b_fact\n\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n\tfor i in range(100):\n\t\tif i % 2 == 1:\n\t\t\tn |= 1 << i\n\treturn n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\nimport unittest\n\ndef odd_bit_set_number(number):\n    number = int(number)\n    return number | (number & 1)\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    if number == 0:\n        return 0\n    elif number & 0x00000001:\n        return number | 0x00000002\n    else:\n        return number | 0x00000003\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    assert odd_bit_set_number(10) == 15\n    \"\"\"\n    return number | 0xAAAAAAAA\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    return n & (~(n & 1))\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return number | 15\n\ndef test():\n    assert odd_bit_set_number(10) == 15\n    assert odd_bit_set_number(0) == 15\n\ntest()\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    # Make sure your function takes in a number as an argument\n    # Write your code here\n    return number | (number + 1) | (number + 2) | (number + 3)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(n):\n    return n | 0x55555555\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    '''\n    Set the odd bits of a number\n\n    Args:\n      number: int: The number whose odd bits have to be set\n\n    Returns:\n      int: The number with its odd bits set.\n    '''\n    return number | (1 << 0) | (1 << 2) | (1 << 4) | (1 << 6)\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    \"\"\"\n    This function sets all odd bits in a number\n    \"\"\"\n    return number | 1\n\n\ndef test_odd_bit_set_number():\n    \"\"\"\n    This function tests if the odd_bit_set_number function is working correctly\n    \"\"\"\n    assert odd_bit_set_number(10) == 15\n\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l, n):\n    return [i[n] for i in l]\n\n\n#print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(twoDList,specified_element_number):\n    list_with_specified_element=[]\n    for row in twoDList:\n        if specified_element_number==0:\n            list_with_specified_element.append(row[0])\n        else:\n            list_with_specified_element.append(row[specified_element_number-1])\n    return list_with_specified_element\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(array,position):\n    return [element[position] for element in array]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, index):\n\t\"\"\"\n\tgiven a lst like this: [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],\n\tindex = 0, return [1, 4, 7]\n\t\"\"\"\n\tresult = []\n\tfor i in lst:\n\t\tresult.append(i[index])\n\treturn result\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(x,y):\n    if y == 0:\n        return x[0][0]\n    else:\n        return x[1][y-1]\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst,n):\n    result=[]\n    for i in lst:\n        if n in i:\n            result.append(i[i.index(n)])\n    return result\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(two_dim_list,index):\n\t# if index==0 :\n\t# \treturn [row[index] for row in two_dim_list]\n\t# elif index>0:\n\t# \treturn [row[index-1] for row in two_dim_list]\n\t# else :\n\t# \treturn [row[index] for row in two_dim_list]\n\treturn [row[index-1] if index>0 else row[index] for row in two_dim_list]\n\ndef main():\n\tprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\n\nmain()", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nfrom __future__ import print_function\n\n\ndef specified_element(list_of_list, number=0):\n    return [list_of_list[i][number] for i in range(len(list_of_list))]\n\ndef extract_specified_element(list_of_list, number):\n    return [list_of_list[i][number] for i in range(len(list_of_list))]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l,n):\n    return([i[0] for i in l if i[n] == n])\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\n#write your function here\ndef specified_element(l, index):\n    return [l[row][index] for row in range(len(l))]\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(list_of_lists):\n    return min(list_of_lists, key = lambda x: len(x))\n\n#print(min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(lst,key=lambda x: len(x))\n\n#assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(li):\n    return (min(li, key=len), li[li.index(min(li))])\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# Solution:\n\ndef min_length_list(lst):\n    min_length_lst = []\n    min_length = 10000000000000000000\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            min_length = min(min_length, len(lst[i]))\n    min_length_lst.append(min_length)\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i]) == min_length:\n                min_length_lst.append(lst[i])\n    return min_length_lst\n\n# Testing:\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(l):\n    return min((len(x),x) for x in l)\n\ndef test_min_length_list():\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# My Solution:\n\ndef min_length_list(lists):\n    return min(lists, key=lambda x: len(x))\n\n# Test:", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(lst,key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(lst, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(lst, key = lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(lst, key = lambda x:len(x))\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(first_side, second_side, third_side):\n    if first_side==second_side and first_side==third_side:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(side1, side2, side3):\n    if side1 == side2 and side2 == side3:\n        return True\n\ndef main():\n    print(\"This is a test for equilateral triangle\")\n    side1 = int(input(\"Input the length of side 1: \"))\n    side2 = int(input(\"Input the length of side 2: \"))\n    side3 = int(input(\"Input the length of side 3: \"))\n    if check_equilateral(side1, side2, side3):\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b and b==c and c==a:\n        return \"Equilateral\"\n    return \"Not Equilateral\"\n\n# print(check_equilateral(6,8,12))\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a == b == c:\n        print(\"It is equilateral\")\n    else:\n        print(\"It is not equilateral\")\n        \ncheck_equilateral(6,8,12)\n\n\n\n# + id=\"NXa4W4HH95Ex\" colab_type=\"code\" colab={}\n\n\n# + [markdown] id=\"p9n-rh4e95E1\" colab_type=\"text\"\n# # Day 6\n#\n\n# + [markdown] id=\"8O-B2b3G95E2\" colab_type=\"text\"\n# ## Ques 1\n\n# + id=\"wXjgl58h95E3\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a==b and a==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a == b == c:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b and b==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a==b and b==c:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n\treturn all((a==b) and (a==c) and (b==c))\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n\treturn a == b == c\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a,b):\n    return a*b\n\n#assert parallelogram_area(10,20)==200\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(x,y):\n    return x*y", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(length, breadth):\n    return length * breadth\n\n\ndef test_parallelogram_area():\n    assert parallelogram_area(10,20)==200\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n\ndef parallelogram_area_2(a,b):\n    return (a+b) * (b-a)\n\ndef parallelogram_area_3(a,b):\n    return (a+b) * (b-a)\n\ndef parallelogram_area_4(a,b):\n    return a*b\n\ndef parallelogram_area_5(a,b):\n    return a*b\n\ndef parallelogram_area_6(a,b):\n    return a*b\n\ndef parallelogram_area_7(a,b):\n    return a*b\n\ndef parallelogram_area_8(a,b):\n    return a*b\n\ndef parallelogram_area_9(a,b):\n    return a*b\n\ndef parallelogram_area_10(a,b):\n    return a*b\n\ndef parallelogram_area_11(a,b):\n    return a*b\n\ndef parallelogram_area_12(a,b):\n    return a*b\n\ndef parallelogram_area_13(a,b):\n    return a*b\n\ndef parallelogram_area_14(a,b):\n    return a*b\n\ndef parallelogram_area_15(a,b):\n    return a*b\n\ndef parallelogram_area_16(a,b):\n    return a*b\n\ndef parallelogram_area_17(a,b):\n    return a*b\n\ndef parallelogram_area_18(a,b):\n    return a*b\n\ndef parallelogram_area_19(a,b):\n    return a*b\n\ndef parallelogram_area_20(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(b,h):\n    return b*h\n\n# assert parallelogram_area(10,20)==200\n# print(parallelogram_area(10,20))\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    \"\"\"\n    a, b: integers >= 0\n    returns: integer area >= 0\n    \"\"\"\n    if a<=0 or b<=0:\n        return 0\n    return a*b\n\ndef main():\n    # Here are some test cases.\n    # Feel free to add your own.\n    assert parallelogram_area(10,20)==200\n    assert parallelogram_area(10,-10)==0\n    assert parallelogram_area(-10,10)==0\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(height, width):\n    assert type(height)==int\n    assert type(width)==int\n    if height<width:\n        return 0\n    else:\n        return height * width\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base,height):\n    return base * height\n\n#test", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a, b):\n    area = a * b\n    assert type(area) is int or type(area) is float\n    return area\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    if (str[0] == str[-1]):\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\ndef check_Equality_brute(str):\n    len_str = len(str)\n    for i in range(1, len_str-1):\n        if (str[0] == str[i] and str[i] == str[-1]):\n            return \"Equal\"\n    return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    if str[0] == str[len(str)-1]:\n        return \"Equal\"\n    else:\n        return \"Not equal\"\n    ", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    return \"Equal\" if (str[0] == str[-1]) else \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str):\n    if str[0] == str[len(str) - 1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str1):\n    if str1[0] == str1[len(str1) - 1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n#Print", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    if s[0]==s[len(s)-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    if str[0]==str[len(str)-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\nfrom random import shuffle\n\n\ndef counting_sort(arr):\n    max_num = max(arr)\n    count = [0] * (max_num + 1)\n\n    for num in arr:\n        count[num] += 1\n\n    i = 0\n    for num in range(1, len(count)):\n        count[num] += count[num - 1]\n        temp = arr[count[num] - 1]\n        arr[count[num] - 1] = arr[i]\n        arr[i] = temp\n        i += 1\n    return arr\n\n\ndef test_counting_sort():\n    arr = [1, 23, 4, 5, 6, 7, 8]\n    assert arr == counting_sort(arr)\n\n\ndef test_counting_sort_random():\n    for i in range(10):\n        n = random.randint(1, 20)\n        arr = [random.randint(0, 100) for i in range(n)]\n        shuffle(arr)\n        assert arr == counting_sort(arr)\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(array):\n    \"\"\"\n    This method counts the number of occurences of each item\n    and creates an array of the length of the original array containing \n    those counts for each element in the original array.\n    \"\"\"\n    counts = [0] * len(array)\n\n    for item in array:\n        counts[item - 1] += 1\n    new_array = [0] * (len(array))\n\n    for i in range(len(array)):\n        for j in range(counts[i] - 1):\n            new_array[j + counts[i - 1]] = i + 1\n\n    return new_array\n\ndef test_counting_sort():\n    array = [1, 23, 4, 5, 6, 7, 8]\n    assert counting_sort(array) == [1, 4, 5, 6, 7, 8, 23]\n\n    array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert counting_sort(array) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef test_counting_sort_fail():\n    array = [1, 23, 4, 5, 6, 7, 8, 23, 1]\n    assert counting_sort(array) != [1, 4, 5, 6, 7, 8, 23]\n\ndef test_counting_sort_empty():\n    assert counting_sort([]) == []\n\ndef test_counting_sort_none():\n    assert counting_sort(None) == []\n\ndef test_counting_sort_negative():\n    array = [1, 23, -4, 5, 6, 7, 8]\n    assert counting_sort(array) != [1, 4, 5, 6", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    max_num = max(arr)\n    min_num = min(arr)\n    range_len = max_num - min_num + 1\n    count_array = [0] * range_len\n    for num in arr:\n        count_array[num - min_num] += 1\n    res = [0] * len(arr)\n    for i in range(len(res)):\n        count_array[i] += count_array[i - 1]\n        res[count_array[i - 1]] = arr[i - 1]\n    return res\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    # Your code here\n    # Add your code\n    array = list(array)\n    n = len(array)\n    if n <= 1:\n        return array\n    max_val = max(array)\n    min_val = min(array)\n    # max_val = array[-1]\n    # min_val = array[0]\n    gap = max_val - min_val + 1\n    count_list = [0]*gap\n    for num in array:\n        count_list[num - min_val] += 1\n    print(count_list)\n    for i in range(len(count_list)):\n        count_list[i] = count_list[i] + count_list[i-1]\n    print(count_list)\n    sorted_list = [None]*n\n    for i in range(n):\n        sorted_list[count_list[array[i]-min_val] - 1] = array[i]\n        count_list[array[i] - min_val] -= 1\n    print(sorted_list)\n    return sorted_list\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\nfrom collections import Counter\n\n\ndef counting_sort(array):\n    \"\"\"\n    :param array: Unsorted array\n    :return: Sorted array\n    \"\"\"\n    length = len(array)\n    max_elem = max(array)\n    # Set range and initialize counters\n    range = max_elem + 1\n    counters = [0] * range\n    # Make frequency of elements in array\n    for i in array:\n        counters[i] += 1\n    # For each element in the array, move it to the correct position in the sorted array\n    for i in range(length - 1, -1, -1):\n        counters[array[i]] -= 1\n        array[i + counters[array[i]]] = array[i]\n    return array\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    if len(arr) == 0:\n        return []\n\n    min_val = min(arr)\n    max_val = max(arr)\n    range_val = max_val - min_val + 1\n\n    buckets = [0] * range_val\n\n    for value in arr:\n        buckets[value-min_val] += 1\n\n    output = []\n    for i in range(len(buckets)):\n        for j in range(buckets[i]):\n            output.append(i+min_val)\n\n    return output\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    c = [0] * (max(array) + 1)\n    for a in array:\n        c[a] += 1\n\n    out = [0] * len(array)\n    for i in range(len(array)):\n        out[c[i] - 1] = array[i]\n        c[i] -= 1\n\n    return out\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    # write your code here\n    max_num = max(arr)\n    n = len(arr)\n\n    # count the number of elements\n    count = [0 for i in range(max_num + 1)]\n    for i in range(n):\n        count[arr[i]] += 1\n\n    # compute the cumulative counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # output\n    new_arr = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        new_arr[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n    return new_arr\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\nfrom typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Returns sorted array in O(n) time and O(n) space.\n    \"\"\"\n    n = len(arr)\n    # Maximum number in the array\n    max_num = max(arr)\n    # Create frequency array of size max+1\n    freq = [0] * (max_num + 1)\n    # Count number of elements in each bucket\n    for num in arr:\n        freq[num] += 1\n\n    # Write elements of arr in result[]\n    result = [0] * n\n    index = 0\n    for i in range(len(freq)):\n        # Copy elements from current bucket to\n        # result array at correct index\n        while freq[i] > 0:\n            result[index] = i\n            index += 1\n            freq[i] -= 1\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    \"\"\"\n    Returns a list sorted by counting sort\n    \"\"\"\n    # Step 1: Determine the number of elements\n    n = len(arr)\n    # Step 2: Create an output array to store the result\n    output = [0] * n\n    # Step 3: Create a count array to store count of\n    #         occurrences of each element\n    count = [0] * (n + 1)\n    # Step 4: Store count of occurrences in count[]\n    for x in arr:\n        count[x] += 1\n    # Step 5: Change count[i] so that count[i] now contains actual\n    #         position of this element in output[]\n    for i in range(1, n + 1):\n        count[i] += count[i - 1]\n    # Step 6: Build the output array\n    for i in range(n - 1, -1, -1):\n        output[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n    return output\n\n\ndef test_counting_sort():\n    \"\"\"\n    Test the counting_sort function\n    \"\"\"\n    expected = [1, 4, 5, 6, 7, 8, 23]\n    assert counting_sort([1, 23, 4, 5, 6, 7, 8]) == expected\n\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\nfrom typing import Tuple\n\ndef tn_gp(n: int, n_t: int, r: float) -> float:\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    :param n: number of geometric series terms\n    :param n_t: number of terms to be calculated\n    :param r: common ratio\n    :return: float value of term\n    \"\"\"\n    # 1. Find out the t-th term of geometric series\n    total = 1\n    for i in range(1, n + 1):\n        total *= r\n\n    # 2. Return the n_t-th term\n    return total ** n_t / n_t\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n,t,r):\n    return n*r**t\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(t, n, p):\n    \"\"\"\n    >>> tn_gp(1,5,2)\n    16\n    >>> tn_gp(1,4,1.5)\n    6.837499999999999\n    \"\"\"\n    return (t*(1-p**n))/(1-p)\n\ndef tn_gp_recursive(t, n, p):\n    \"\"\"\n    >>> tn_gp_recursive(1,5,2)\n    16\n    >>> tn_gp_recursive(1,4,1.5)\n    6.837499999999999\n    \"\"\"\n    if n==0:\n        return t\n    return t*(1-p)**n/(1-p) + tn_gp_recursive(t, n-1, p)\n\ndef tn_gp_memoization(t, n, p):\n    \"\"\"\n    >>> tn_gp_memoization(1,5,2)\n    16\n    >>> tn_gp_memoization(1,4,1.5)\n    6.837499999999999\n    \"\"\"\n    memo = {}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            memo[n] = t\n            return t\n        else:\n            memo[n] = t*(1-p)**n/(1-p) + helper(n-1)\n            return memo[n]\n    return helper(n)\n\ndef tn_gp_memoization_dynamic(t, n, p):\n    \"\"\"\n    >>> tn_gp_memoization_dynamic(1,5,2)\n    16\n    >>> tn_gp_memoization_dynamic(1,4,1.5)\n    6.837499999999999\n    \"\"\"\n    memo = {}\n    for i in range(n+1):\n        memo[i] = t*(1-p)**i/(1-p) + memo[i-1] if i>0 else t\n    return memo[n]\n\ndef tn_gp_recursion_limit_", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(t,n,p):\n    res=t\n    for i in range(n-1):\n        res*=p\n        print(i,res)\n    return res\n    \nt=int(input(\"Enter the value of t:\"))\nn=int(input(\"Enter the value of n:\"))\np=float(input(\"Enter the value of p:\"))", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(t,n,p):\n    return p*(t**n-1)/n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,n):\n    sum=0\n    for i in range(n):\n        sum+=a*(r**i)\n    return sum\n# print(tn_gp(1,5,2))\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(t, n, p):\n    return p**(n-1)*((1-p)/(1-p**t))\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,n):\n    return a*(r**n)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(t,n,p):\n\t\"\"\"\n\tt-nth term of geometric series\n\tArgs:\n\t\tt: (int) : position of term in series\n\t\tn: (int) : number of terms in series\n\t\tp: (int) : value of growth factor\n\tReturns:\n\t\tint: value of t-th term in series\n\t\"\"\"\n\treturn ((p ** t) / ((1 - p) ** n))", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,t):\n    \"\"\"\n    :param a: first term of the series\n    :param r: common ratio\n    :param t: t-nth term\n    :return:\n    \"\"\"\n    return a * (r**t)\n\ndef get_tn_gp(n, a, r):\n    \"\"\"\n    :param n: t-nth term\n    :param a: first term of the series\n    :param r: common ratio\n    :return:\n    \"\"\"\n    return a * (r**n)\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n\tnum = str(num)\n\tif num == num[::-1]:\n\t\treturn False\n\telse:\n\t\treturn True\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    num = str(num)\n    num_reverse = num[::-1]\n    if int(num) == int(num_reverse) + 1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    '''\n    Takes a number and returns True if it is one less than twice it's reverse, False otherwise.\n    '''\n    #reverse the digits of the number\n    rev = int(str(num)[::-1])\n    #check if it's the reverse of the number multiplied by two.\n    if num == 2 * rev + 1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n\treturn str(n)[::-1] == str(int(str(n)[::-1]))[1:]\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    if num < 0 or not num:\n        return False\n    else:\n        return num == int(str(num)[::-1][1:]) - 1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    num = str(num)\n    if num[::-1] == str(int(num[::-1]) + 1):\n        return True\n    else:\n        return False\n\n\ndef main():\n    assert check(70) == False\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    if str(n)[::-1] == str(n+1):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    n = str(n)\n    r = n[::-1]\n    return int(r) + 1 == int(n)\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, num):\n    answer = ''\n    for i in range(len(digits)-1,-1,-1):\n        answer += str(digits[i])\n    if num == 0:\n        return answer\n    return find_Max_Num(digits,num-1) + answer\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, length):\n    \"\"\"\n    Return the largest number that can be formed from digits (list of integers) with length digits.\n    \"\"\"\n    if length < 1:\n        return 0\n    if length == 1:\n        return digits[0]\n    else:\n        return max(find_Max_Num(digits[:length-1], length-1), find_Max_Num(digits[1:length], length-1)) + digits[0]\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,n):\n    def is_greater_than(a,b):\n        if len(a) > len(b):\n            return True\n        else:\n            return False\n    def is_equal(a,b):\n        if len(a) == len(b):\n            return True\n        else:\n            return False\n    def find_greater_than(a,b):\n        for i in range(len(a)):\n            if int(a[i]) > int(b[i]):\n                return a[i]\n        return \"\"\n    def find_less_than(a,b):\n        for i in range(len(a)):\n            if int(a[i]) < int(b[i]):\n                return a[i]\n        return \"\"\n    def find_greater_than_num(a,b):\n        max_a = 0\n        if is_greater_than(a,b):\n            max_a = find_greater_than(a,b)\n        return max_a\n    \n    if n == 1:\n        return \"\".join(digits)\n    elif n == 2:\n        if len(digits) == 1:\n            return digits[0]\n        else:\n            return str(int(digits[0]) + int(digits[1]))\n    else:\n        a = []\n        for i in range(n-1):\n            a.append(digits[i])\n        b = digits[n-1]\n        # print(a,b)\n        if is_equal(a,b):\n            return \"\".join(a)\n        else:\n            if len(a) > len(b):\n                max_a = find_greater_than_num(a,b)\n                # print(max_a)\n                return find_less_than(max_a,b) + a[-1]\n            else:\n                max_b = find_greater_than_num(b,a)\n                # print(max_b)\n                return a[-1] + find_less_than(max_b,a)\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, length):\n    if length == 1:\n        return max(digits)\n    else:\n        largest_number = max(digits)\n        for i in range(length):\n            for j in range(i, length):\n                current_num = largest_number * 10**i + digits[j]\n                if current_num > largest_number:\n                    largest_number = current_num\n    return largest_number\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, max_len):\n    res = ''\n    for i in range(len(digits)):\n        for j in range(i + 1, max_len):\n            res = str(int(digits[i]) * 10 ** (j - i)) + res\n    return int(res)\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\n# Test Cases", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            result = max(result,digits[i]*100+digits[j]*10+digits[n])\n    return result\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,length):\n    if length == 1:\n        return digits[0]\n    else:\n        return max(find_Max_Num(digits[:length-1],length-1),find_Max_Num(digits[:length-1],length))\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,num):\n    if len(digits) == 1:\n        return int(digits[0]) * num\n    if len(digits) == 0:\n        return 0\n\n    return max(find_Max_Num(digits[1:],num) ,find_Max_Num(digits[1:],num * 10) + int(digits[0]) )\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,limit):\n    res = 0\n    for i in range(len(digits)):\n        res += digits[i]*(limit-i)\n    return res\n\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x,y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a, b):\n    return a*b < 0", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a, b):\n    if a < 0 and b < 0:\n        return True\n    elif a > 0 and b > 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1,num2):\n    if (num1*num2<0):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x,y):\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n\ndef main():\n    print(opposite_Signs(1,-2))\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a, b):\n  if a * b >= 0:\n    return True\n  else:\n    return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1, num2):\n    \"\"\"\n    opposite_Signs(num1, num2):\n\n    >>> opposite_Signs(1, -2)\n    True\n    >>> opposite_Signs(1, 2)\n    False\n    >>> opposite_Signs(-1, 1)\n    False\n    >>> opposite_Signs(-1, -2)\n    True\n    \"\"\"\n    if num1 * num2 < 0:\n        return True\n    else:\n        return False\n\n\ndef test_opposite_signs():\n    assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(1, 2) == False\n    assert opposite_Signs(-1, 1) == False\n    assert opposite_Signs(-1, -2) == True\n\n\n#test_opposite_signs()\n\n# + id=\"84e178a3-60c7-4c9a-bf03-9544893069f9\"", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n\tif a == 0:\n\t\treturn False\n\tif a > 0:\n\t\treturn b < 0\n\tif a < 0:\n\t\treturn b > 0\n\t", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n\ndef test():\n    assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(-1,2) == True\n    assert opposite_Signs(-1,-1) == False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x, y):\n    \"\"\"\n    returns boolean indicating whether the\n    two given numbers are opposing signs.\n    \"\"\"\n    return x < 0 and y > 0 or x > 0 and y < 0"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return n*(n+1)*(n+2)/6\n\n\ndef test_is_octagonal():\n    assert is_octagonal(1) == 1\n    assert is_octagonal(2) == 3\n    assert is_octagonal(3) == 7\n    assert is_octagonal(4) == 15\n    assert is_octagonal(5) == 25\n    assert is_octagonal(6) == 41\n    assert is_octagonal(7) == 65\n    assert is_octagonal(8) == 99\n\n\ndef count_octagonal_numbers():\n    \"\"\"\n    Write a function to count the octagonal numbers\n    \"\"\"\n    return sum(is_octagonal(n) for n in range(1, 10000))\n\n\ndef test_count_octagonal_numbers():\n    assert count_octagonal_numbers() == 40654\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef nth_octagonal(n):\n    return n*(3*n - 1)/2\n\ndef is_octagonal(n):\n    return nth_octagonal(n) == n*(3*n - 1)/2\n\n\n# Testing\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return (n*n)+(n/2)*n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\nfrom math import sqrt, floor, ceil\n\ndef is_octagonal(n):\n    return n == (n*8 + 1)\n\ndef nth_octagonal(n):\n    return n*(n+1) // 2\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Return the nth octagonal number\n    \"\"\"\n    num = 0\n    for i in range(1, n + 1):\n        num += (i * (i + 1)) // 2\n    return num\n\ndef main():\n    \"\"\"\n    Run sample is_octagonal function tests.\n    \"\"\"\n    assert is_octagonal(1) == 1\n    assert is_octagonal(2) == 2\n    assert is_octagonal(3) == 5\n    assert is_octagonal(4) == 12\n    assert is_octagonal(5) == 15\n    assert is_octagonal(6) == 22\n    assert is_octagonal(7) == 26\n    assert is_octagonal(8) == 35\n    assert is_octagonal(9) == 41\n    assert is_octagonal(10) == 46\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return 2 * (n * (n + 1)) + 1\n\n#print(is_octagonal(1))\n#print(is_octagonal(2))\n#print(is_octagonal(3))\n#print(is_octagonal(4))\n#print(is_octagonal(5))\n#print(is_octagonal(6))\n#print(is_octagonal(7))\n#print(is_octagonal(8))\n#print(is_octagonal(9))\n#print(is_octagonal(10))\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Return if a number is an octagonal number\n    \"\"\"\n    if n % 2 == 0:\n        return n * (3 * n - 1) / 2\n    else:\n        return n * (2 * n - 1)\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Return the nth octagonal number\n    \"\"\"\n    number = 0\n    for i in range(1, n + 1):\n        number += is_octagonal(i)\n    return number\n\ndef nth_octagonal_number_recurse(n):\n    \"\"\"\n    Return the nth octagonal number\n    \"\"\"\n    return nth_octagonal_number_recurse_helper(n, 1, 1, 1)\n\ndef nth_octagonal_number_recurse_helper(n, a, b, c):\n    if n == 0:\n        return a + b + c\n    else:\n        return nth_octagonal_number_recurse_helper(n - 1, a + b, b + c, a + b + c)\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return (n*(3*n-1))//2\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom math import sqrt\n\n\ndef is_octagonal(n):\n    return int(sqrt((1+8*n)**2 - 4*n))\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    if n < 1:\n        return \"Number must be greater than 0\"\n    elif n % 2 != 0:\n        return \"Number must be divisible by 2\"\n\n    n = int(n)\n    return 2*n*(n+1) - 1\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(seq, k):\n    s_sum = 0\n    if len(seq) == 0 or k < 0:\n        return 0\n    curr_sum = 0\n    max_len = 0\n    for i in range(len(seq)):\n        curr_sum += seq[i]\n        if curr_sum > k:\n            curr_sum = curr_sum - seq[i-max_len]\n            max_len = max_len + 1\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(a, b):\n    if len(a) < 2:\n        return len(a)\n\n    max_len = 1\n    i = 0\n    j = 1\n    while i < len(a) - 1 and j < len(a):\n        if a[i] - a[j] == b:\n            if max_len < j - i + 1:\n                max_len = j - i + 1\n            j += 1\n        elif a[i] - a[j] > b:\n            j += 1\n        else:\n            i += 1\n\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n\t# write your code here\n\tif len(arr) == 1:\n\t\treturn 0\n\t# max_length = 1\n\t# for i in range(1, len(arr)):\n\t# \tif (arr[i] > arr[i-1]):\n\t# \t\tmax_length = max(max_length + 1, max_len_sub(arr[:i-1], n))\n\t# \telif (arr[i] < arr[i-1]):\n\t# \t\tmax_length = max(max_length, max_len_sub(arr[:i], n))\n\t# \telse:\n\t# \t\tcontinue\n\t# return max_length\n\t# O(n^2) Time complexity\n\tres = 1\n\tfor i in range(1, len(arr)):\n\t\ttemp = max_len_sub(arr[:i], n)\n\t\tif (arr[i] > arr[i-1]):\n\t\t\tres = max(res, temp + 1)\n\t\telif (arr[i] < arr[i-1]):\n\t\t\tres = max(res, temp)\n\t\telse:\n\t\t\tcontinue\n\treturn res\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, diff):\n    max_len = 0\n    start_i = 0\n    for end_i in range(len(arr)-1):\n        if arr[end_i+1] - arr[end_i] == diff:\n            max_len = max(max_len, end_i-start_i+1)\n            start_i = end_i + 1\n        else:\n            start_i = end_i + 1\n    return max_len\n\ndef test_max_len_sub():\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    assert max_len_sub([1, 3, 5, 7, 9], 2) == 2\n    assert max_len_sub([1, 5, 7, 1, 3, 5], 2) == 3\n    assert max_len_sub([1, 5, 7, 1, 3, 5], 4) == 0\n    assert max_len_sub([3, 1, 1, 3, 1, 3], 1) == 5\n    print(\"ALL TEST CASES PASSED!\")\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, diff):\n    \"\"\"\n    :type arr: List[int]\n    :type diff: int\n    :rtype: int\n    \"\"\"\n    return len(set(arr[i] - arr[i-1] for i in range(1, len(arr)) if abs(arr[i] - arr[i-1]) == diff))\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, diff):\n    \"\"\"\n    :param arr: input array\n    :param diff: difference between adjacent elements\n    :return: length of the subsequence with difference between adjacent elements\n    \"\"\"\n    len_arr = len(arr)\n    max_len = 0\n    curr_len = 0\n    for i in range(len_arr - 1):\n        if arr[i] + diff == arr[i + 1]:\n            curr_len += 1\n            max_len = max(curr_len, max_len)\n        else:\n            curr_len = 0\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(array, k):\n    length = len(array)\n    max_len = 0\n    sub_array = []\n    for i in range(length):\n        if array[i] in sub_array:\n            sub_array.remove(array[i])\n            if len(sub_array) >= max_len:\n                max_len = len(sub_array)\n        else:\n            sub_array.append(array[i])\n            if len(sub_array) >= max_len:\n                max_len = len(sub_array)\n        if len(sub_array) > k:\n            sub_array.remove(array[i-k])\n            if len(sub_array) >= max_len:\n                max_len = len(sub_array)\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, max_diff):\n    count = 0\n    max_count = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] <= max_diff:\n                count += 1\n                if count > max_count:\n                    max_count = count\n    return max_count\n\n\ndef main():\n    print(\"max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\", max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5)\n    print(\"max_len_sub([3, 1, 2, 4, 5, 2, 2, 5, 6, 1], 3) == 2\", max_len_sub([3, 1, 2, 4, 5, 2, 2, 5, 6, 1], 3) == 2)\n    print(\"max_len_sub([2, 3, 4, 4, 2, 3, 2], 4) == 5\", max_len_sub([2, 3, 4, 4, 2, 3, 2], 4) == 5)\n    print(\"max_len_sub([1, 1, 3, 4, 1, 2, 1, 1, 1], 2) == 6\", max_len_sub([1, 1, 3, 4, 1, 2, 1, 1, 1], 2) == 6)\n    print(\"max_len_sub([1, 1, 1, 1, 1, 1, 1], 1) == 0", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, n):\n    dic = {}\n    for i in range(n):\n        if i + 1 in dic:\n            dic[i + 1] += 1\n        else:\n            dic[i + 1] = 1\n    \n    max_len = 1\n    for i in range(n - 1):\n        max_len = max(max_len, dic[i + 1] + dic[i])\n    \n    return max_len\n\n\ndef test_max_len_sub():\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_substrings_with_sum(string):\n    count = 0\n    for i in range(len(string)-1):\n        if sum(int(string[i:i+1]) for i in range(len(string))) == len(string):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str, target):\n    count = 0\n    for i in range(len(str)-len(str)+1):\n        string = str[i:i+len(str)]\n        sum = 0\n        for s in string:\n            sum += int(s)\n        if sum == target:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str1, x):\n    count=0\n    l=len(str1)\n    for i in range(l-x+1):\n        s=0\n        for j in range(x):\n            s+=int(str1[i+j])\n        if s==x:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str1,k):\n    count=0\n    for i in range(len(str1)):\n        for j in range(len(str1)-i+1):\n            if sum([int(str1[k]) for k in range(i,j+1)]) == len(str1[i:j+1]):\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str,num):\n    substrings = []\n    for i in range(len(str)-num+1):\n        substring = str[i:i+num]\n        substrings.append(substring)\n    substrings = set(substrings)\n    substrings = [int(x) for x in substrings]\n    substrings = [i for i in substrings if i == sum(i)]\n    return len(substrings)", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string,sum_digit):\n    count = 0\n    # Your code here\n    for i in range(len(string)):\n        for j in range(i+1,len(string)+1):\n            string1 = string[i:j]\n            s = 0\n            for k in string1:\n                s+=int(k)\n            if s==sum_digit:\n                count+=1\n    return count\n            ", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str,sum):\n    i,j = 0,0\n    count = 0\n    while i<len(str) and j<len(str):\n        if str[i] == str[j]:\n            sum_of_digits = sum_of_characters(str[i])\n            if sum == sum_of_digits:\n                count+=1\n                j+=1\n            else:\n                j+=1\n        else:\n            i+=1\n            j=i\n    return count\n\ndef sum_of_characters(string):\n    return int(string)\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string, k):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum([int(char) for char in string[i:j+1]]) == j-i+1:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s,n):\n\tcount = 0\n\tfor i in range(0,len(s)-n+1):\n\t\tsum = 0\n\t\tfor j in range(0,n):\n\t\t\tsum+=int(s[i+j])\n\t\tif sum == n:\n\t\t\tcount+=1\n\treturn count\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    if not nums:\n        return None\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n\ndef smallest_num_w_none(nums):\n    return min(nums) if nums else None\n\ndef smallest_num_w_all(nums):\n    return min(nums) if nums else None\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    # fill out the function here\n    #return None\n\n    if len(nums) == 0:\n        return None\n\n    sorted_list = sorted(nums)\n    return sorted_list[0]\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    smallest = min(nums)\n    return smallest\n\ndef test_smallest_num():\n    nums = [10, 20, 1, 45, 99]\n    expected = 1\n    actual = smallest_num(nums)\n    assert expected == actual\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(my_list):\n    if len(my_list) == 0:\n        return None\n\n    min_num = my_list[0]\n    for x in my_list:\n        if x < min_num:\n            min_num = x\n\n    return min_num", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        if lst[0] < lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    elif len(lst) > 2:\n        if lst[0] < lst[1]:\n            return smallest_num(lst[1:])\n        else:\n            return smallest_num(lst[0:])\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(lst):\n    \"\"\"\n    Return the smallest number in a list.\n    If list is empty, return None.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        return min(lst)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    \"\"\"\n    Returns the smallest number from a list.\n    \"\"\"\n    return min(lst)\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    smallest = nums[0]\n    for num in nums[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    if len(lst) == 0:\n        raise ValueError('List is empty!')\n    smallest = lst[0]\n    for num in lst[1:]:\n        if smallest > num:\n            smallest = num\n    return smallest\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n  \"\"\"\n  Function to find the smallest number in a list.\n  \"\"\"\n  return min(lst)\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuple_list):\n    max_difference = 0\n    for (a, b) in tuple_list:\n        max_difference = max(b - a, max_difference)\n    return max_difference\n\ndef test_max_difference():\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert max_difference([(1, 2), (3, 4), (5, 6)]) == 2\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# 1. Two-pass. O(n^2) time. O(1) space.\n#   Traverse the list once to get the min and max values. Traverse the list again to find the difference.\n#   Note that this is quadratic.\ndef max_difference(array):\n    min = array[0]\n    max = array[0]\n\n    for i in array:\n        if i < min:\n            min = i\n        if i > max:\n            max = i\n\n    return max - min\n\n\n# 2. Two-pass. O(n) time. O(1) space.\n#   Traverse the list once to get the min and max values.\n#   Traverse the list again to find the difference. This is linear.\ndef max_difference_linear(array):\n    max = array[0]\n    min = array[0]\n\n    for i in array:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n\n    return max - min\n\n\n# 3. One-pass. O(n) time. O(1) space.\n#   Use the \"kadane's algorithm\". Traverse the array once to get the maximum sum, which is the maximum difference.\ndef max_difference_kadane(array):\n    maximum_sum = -sys.maxsize\n    maximum_sum_so_far = 0\n    for i in array:\n        maximum_sum_so_far = maximum_sum_so_far + i\n        maximum_sum = max(maximum_sum, maximum_sum_so_far)\n        maximum_sum_so_far = max(0, maximum_sum_so_far)\n    return maximum_sum\n\n\ndef main():\n    print('Example 1:')\n    print('Input: array = [(3, 5), (1, 7), (10, 3), (1, 2)]')\n    print('Output: 7')\n    print(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom typing import Tuple\nimport random\n\n\ndef max_difference(pairs: Tuple[int, int]) -> int:\n    \"\"\"\n    Return the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Write your code here.\n    nums = sorted([pair[0] for pair in pairs])\n    possible_difference = nums[-1] - nums[0]\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            diff = nums[j] - nums[i]\n            if diff > possible_difference:\n                possible_difference = diff\n    return possible_difference\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(data):\n    a,b = data[0]\n    c,d = data[1]\n    return max(a,c) - min(b,d)", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(pair_list):\n    max_difference = 0\n    for i in range(len(pair_list)-1):\n        max_difference = max(max_difference, pair_list[i+1][0]-pair_list[i][1])\n    return max_difference\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(t):\n    # If length is 0, the max difference is 0\n    if len(t) == 0:\n        return 0\n\n    max_diff = 0\n    # Loop through all the pairwise differences, if it's bigger, update it\n    for i in range(len(t)):\n        for j in range(i + 1, len(t)):\n            # Sum of pairwise differences\n            diff = abs(t[i][0] - t[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(data):\n    \"\"\"\n    :param data: A tuple list\n    :return: maximum difference between available pairs\n    \"\"\"\n    return max([a - b for a, b in data])\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(l):\n    \"\"\"\n    :type l: list[tuple[int]]\n    :rtype: int\n    \"\"\"\n    l.sort(key=lambda x: x[0])\n    result = 0\n    for i in range(len(l)-1):\n        result = max(result, abs(l[i+1][0] - l[i][0]))\n    return result\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(list_of_tuples):\n    maximum = -1\n    for i in range(0, len(list_of_tuples)):\n        for j in range(0, len(list_of_tuples)):\n            if i != j:\n                if list_of_tuples[i][0] < list_of_tuples[j][1]:\n                    maximum = max(maximum, list_of_tuples[j][1] - list_of_tuples[i][0])\n                elif list_of_tuples[i][0] > list_of_tuples[j][1]:\n                    maximum = max(maximum, list_of_tuples[i][0] - list_of_tuples[j][1])\n    return maximum\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuple_list):\n    max_diff = -1\n    for i in range(len(tuple_list)):\n        for j in range(i, len(tuple_list)):\n            diff = tuple_list[j][0] - tuple_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subject_marks_list):\n    return sorted(subject_marks_list, key = lambda x: x[1], reverse = True)\n\n# +", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(tuples):\n    return sorted(tuples, key=lambda x:x[1], reverse=True)\n    ", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subject_marks):\n    subject_marks.sort(key=lambda x: x[1])\n    return subject_marks\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\nsubject_marks = [\n\t('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)\n]\n\ndef sort_subject_marks():\n\treturn sorted(subject_marks, key=lambda subj_mark: subj_mark[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\nsubject_marks = [(\"English\", 88), (\"Science\", 90), (\"Maths\", 97), (\"Social sciences\", 82)]", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\n# My Solution\ndef subject_marks(students):\n    return sorted(students, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(students):\n    return sorted(students, key = lambda x: x[1])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x:x[1])\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list_a):\n    sum_of_list = 0\n    for element in list_a:\n        if type(element) == list:\n            sum_of_list += recursive_list_sum(element)\n        else:\n            sum_of_list += element\n    return sum_of_list\n\ndef test_recursive_list_sum():\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\n# Unit Tests\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n\tif type(lst) == type([]):\n\t\tif lst == []:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn recursive_list_sum(lst[1:]) + lst[0]\n\telse:\n\t\treturn lst\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list):\n    if list:\n        if isinstance(list[0], list):\n            return recursive_list_sum(list[0])+recursive_list_sum(list[1:])\n        else:\n            return list[0]+recursive_list_sum(list[1:])\n    else:\n        return 0\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n# Recursive List Sum\ndef recursive_list_sum(lst):\n    if not lst: return 0\n    if not isinstance(lst,list):\n        return lst\n\n    # If lst is empty, return 0\n    # If lst is not an list, return lst\n    return lst[0]+recursive_list_sum(lst[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(input_list):\n    if type(input_list)==int:\n        return input_list\n    elif type(input_list)==list:\n        total=0\n        for item in input_list:\n            total+=recursive_list_sum(item)\n        return total\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if isinstance(lst, list):\n        sum_list = 0\n        for i in lst:\n            sum_list += recursive_list_sum(i)\n        return sum_list\n    else:\n        return lst\n\ndef recursive_list_sum_my(lst):\n    if isinstance(lst, list):\n        return sum(recursive_list_sum_my(i) for i in lst)\n    else:\n        return lst\n\ndef recursive_list_sum_2(lst):\n    return reduce(lambda a, b: a+b, recursive_list_sum_2(lst)) if isinstance(lst, list) else lst\n\ndef recursive_list_sum_2_my(lst):\n    return reduce(lambda a, b: a+b, lst) if isinstance(lst, list) else lst\n\n\n# -\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(items):\n    if isinstance(items, list):\n        return sum(recursive_list_sum(item) for item in items)\n    else:\n        return items\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(l):\n    \"\"\"recursive_list_sum([1,2,[3,4],[5,6]]) -> 21\"\"\"\n    if isinstance(l, list):\n        return sum(recursive_list_sum(i) for i in l)\n    else:\n        return l\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(l):\n    return __recursive_list_sum(l, 0)\n\ndef __recursive_list_sum(l, total):\n    if len(l) == 0:\n        return total\n    if isinstance(l, list):\n        return __recursive_list_sum(l[1:], total + l[0])\n    return __recursive_list_sum(l[1:], total + l[0])\n\n# A non-recursive solution:\ndef non_recursive_list_sum(l):\n    return __non_recursive_list_sum(l, 0)\n\ndef __non_recursive_list_sum(l, total):\n    for i in range(len(l)):\n        if isinstance(l[i], list):\n            total = __non_recursive_list_sum(l[i], total)\n        else:\n            total += l[i]\n    return total", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if not lst:\n        return 0\n    if type(lst) is int:\n        return lst\n    return lst[0] + recursive_list_sum(lst[1:])\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n    return len([elem for elem in lst if elem > 0])\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(my_list):\n    count = 0\n    for i in my_list:\n        if i >= 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(li):\n    count = 0\n    for i in li:\n        if i > 0:\n            count += 1\n    return count\n\n#test", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(L):\n    return len([x for x in L if x > 0])\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(nums):\n    count = 0\n    for i in nums:\n        if i >= 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(nums):\n    num_of_positive = 0\n    for num in nums:\n        if num > 0:\n            num_of_positive += 1\n    return num_of_positive\n\n# print(pos_count([1,-2,3,-4]))\n\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    return sum(1 for i in lst if i > 0)\n\n\ndef test_pos_count():\n    assert pos_count([1,-2,3,-4]) == 2\n\n\n# Tests\ntest_pos_count()\n\n\n# # Part 1\n# Write a python function to calculate the total number of digits (positive and negative) in a list.\n\ndef count_digits(lst):\n    return sum(len(str(i)) for i in lst)\n\n\ndef test_count_digits():\n    assert count_digits([1,2,3]) == 3\n    assert count_digits([1,-2,3]) == 4\n\n\n# Tests\ntest_count_digits()\n\n\n# # Part 2\n# Write a python function to count all numbers that appear in both lists.\n\ndef common_nums(lst1, lst2):\n    return sum(i in lst2 for i in lst1)\n\n\ndef test_common_nums():\n    assert common_nums([1,2,3], [2,3,4]) == 2\n    assert common_nums([1,2,3], [1,2,3]) == 3\n    assert common_nums([1,2,3], [1,2,3,4]) == 2\n\n\n# Tests\ntest_common_nums()\n\n\n# # Part 3\n# Write a python function to multiply all numbers in a list (except zero).\n\ndef nonzero_product(lst):\n    return 1 if 0 in lst else reduce(mul, lst)\n\n\ndef test_nonzero_product():\n    assert nonzero_product([1,2,3]) == 6\n    assert nonzero_product([1,2,0]) == 2\n    assert nonzero_product([0,0,0]) == 0\n\n\n# Tests\ntest_nonzero_product()\n\n\n# # Part 4\n# Write a python function to print the list in sorted order.\n\ndef print_sorted(lst):\n    lst.sort()\n    print(','.join(str(i) for i in lst))\n\n\ndef test_print_sorted():"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) * bell_number(n-2)\n\n\ndef partition_ways(n):\n    if n <= 0:\n        return 0\n    else:\n        return bell_number(n)\n\n\ndef bell_number_dp(n, memo={}):\n    if n == 0:\n        return 1\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = bell_number_dp(n-1, memo) * bell_number_dp(n-2, memo)\n        return memo[n]\n\n\ndef partition_ways_dp(n, memo={}):\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = partition_ways(n-1, memo) + partition_ways(n-2, memo)\n        return memo[n]\n\n\ndef main():\n    \"\"\"\n    bell_number(4)\n    15\n    \"\"\"\n    print(partition_ways_dp(4))\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n==1:\n        return 2\n    return bell_number(n-1)+bell_number(n-2)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + 2 * bell_number(n-2)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n\t\"\"\"\n\tReturn the number of partitions of {1,2,...,n}\n\t\"\"\"\n\tif n<0:\n\t\traise ValueError(\"n must be a positive integer\")\n\tif n==0:\n\t\treturn 1\n\tif n==1:\n\t\treturn 2\n\tif n==2:\n\t\treturn 4\n\tif n==3:\n\t\treturn 6\n\tif n==4:\n\t\treturn 12\n\tif n==5:\n\t\treturn 20\n\tif n==6:\n\t\treturn 30\n\tif n==7:\n\t\treturn 42\n\tif n==8:\n\t\treturn 56\n\tif n==9:\n\t\treturn 72\n\tif n==10:\n\t\treturn 90\n\tif n==11:\n\t\treturn 110\n\tif n==12:\n\t\treturn 132\n\tif n==13:\n\t\treturn 156\n\tif n==14:\n\t\treturn 182\n\tif n==15:\n\t\treturn 210\n\tif n==16:\n\t\treturn 240\n\tif n==17:\n\t\treturn 272\n\tif n==18:\n\t\treturn 306\n\tif n==19:\n\t\treturn 342\n\tif n==20:\n\t\treturn 380\n\tif n==21:\n\t\treturn 420\n\tif n==22:\n\t\treturn 462\n\tif n==23:\n\t\treturn 506\n\tif n==24:\n\t\treturn 552\n\tif n==25:\n\t\treturn 600\n\tif n==26:\n\t\treturn 650\n\tif n==27:\n\t\treturn 702\n\tif n==28:\n\t\treturn 756\n\tif n==29:\n\t\treturn 812\n\tif n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n# My code\n\n\ndef bell_number(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return bell_number(n - 1) * (2 * n - 1) / n\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    '''\n    This function returns the number of ways to partition a set of bell numbers.\n    \n    :param n: number of bell numbers\n    :type n: int\n    :rtype: int\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n\n\n# + deletable=false editable=false nbgrader={\"checksum\": \"97e2c75a725020181c727d23f215678f\", \"grade\": true, \"grade_id\": \"bell_number\", \"points\": 1}", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    assert n>=0\n    return int(1 + n * factorial(n))\n\ndef factorial(n):\n    return reduce(operator.mul, range(1,n+1), 1)", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n==1:\n        return 1\n    else:\n        # n\n        # n-1\n        # n-2\n        # n-3\n        # ....\n        # 2\n        # 1\n        return 2*(n-1)\n\ndef main():\n    assert bell_number(2)==2\n    print(bell_number(3))\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n#partition(0) is 1\n#partition(1) is 1\n#partition(2) is 2, partition(0) + partition(2)\n#partition(3) is 3, partition(0) + partition(1) + partition(2)\n#partition(4) is 5, partition(0) + partition(1) + partition(2) + partition(3)\n\ndef partition(n):\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return partition(n-1) + partition(n-2) + partition(n-3)\n\ndef test():\n    assert partition(2)==2\n    assert partition(3)==3\n    assert partition(4)==5\n    assert partition(5)==8\n    assert partition(6)==13\n\ntest()"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    return all(arr[i] <= arr[i+1] or arr[i] >= arr[i+1] for i in range(len(arr) - 1))\n\ndef is_Monotonic_1(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1] and arr[i] <= arr[i+2]:\n            return False\n        elif arr[i] < arr[i+1] and arr[i] >= arr[i+2]:\n            return False\n        else:\n            pass\n    return True\n\ndef is_Monotonic_2(arr):\n    return all([arr[i] <= arr[i+1] for i in range(len(arr) - 1)]) or all([arr[i] >= arr[i+1] for i in range(len(arr) - 1)])", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_monotonic(arr):\n    # get the length of the array\n    array_len = len(arr)\n    # if length is 0, then return True\n    if array_len == 0:\n        return True\n    # compare the current and previous element\n    if arr[0] < arr[1]:\n        # for all the elements\n        for i in range(1, array_len):\n            # if the element is smaller than previous one\n            if arr[i] < arr[i-1]:\n                return False\n        # if it was for all elements\n        return True\n    # if arr[0] > arr[1]:\n    #     # for all the elements\n    #     for i in range(1, array_len):\n    #         # if the element is greater than previous one\n    #         if arr[i] > arr[i-1]:\n    #             return False\n    #     # if it was for all elements\n    #     return True\n    else:\n        # if both are same\n        return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n  flag = False\n  for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n      flag = True\n    if flag == True and arr[i] == arr[i+1]:\n      return False\n  return flag\n\n# Using Python built-in function\n# def is_Monotonic(arr):\n#     return all(x >= y for x, y in zip(arr[:-1], arr[1:]))\n\n# from itertools import zip_longest\n# def is_Monotonic(arr):\n#     return all(a <= b for a, b in zip_longest(arr[:-1], arr[1:], fillvalue=float(\"inf\")))\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        arr_sorted = sorted(arr)\n        if arr == arr_sorted:\n            return True\n        else:\n            return False\n\n# Tests", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n\n    elif arr[0] < arr[1]:\n        for x in arr[1:]:\n            if x < arr[0]:\n                return False\n            if x > arr[0]:\n                return True\n\n    elif arr[0] > arr[1]:\n        for x in arr[1:]:\n            if x > arr[0]:\n                return False\n            if x < arr[0]:\n                return True\n\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_monotonic(array):\n    if not array:\n        return True\n    prev = array[0]\n    for item in array:\n        if (prev > item) and (prev != item):\n            return False\n        prev = item\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(lst):\n    \"\"\"\n    Checks if the array is monotonic, ie if it is either increasing or decreasing\n    or both.\n    \"\"\"\n    # Check if it is not empty\n    if not lst:\n        raise ValueError(\"Empty array passed\")\n    # Check if it is of length 1\n    if len(lst) == 1:\n        return True\n    # Check if the first and the last element are equal\n    if lst[0] == lst[-1]:\n        return True\n    # Start checking the series\n    sign = lst[0] > lst[1]\n    for i in range(1, len(lst) - 1):\n        if lst[i] < lst[i - 1] and sign:\n            return False\n        if lst[i] > lst[i - 1] and not sign:\n            return False\n        sign = lst[i] > lst[i + 1]\n    if lst[-1] > lst[-2] and sign:\n        return False\n    if lst[-1] < lst[-2] and not sign:\n        return False\n    return True\n\n# def is_Monotonic(lst):\n#     \"\"\"\n#     Checks if the array is monotonic, ie if it is either increasing or decreasing\n#     or both.\n#     \"\"\"\n#     # Check if it is not empty\n#     if not lst:\n#         raise ValueError(\"Empty array passed\")\n#     # Check if it is of length 1\n#     if len(lst) == 1:\n#         return True\n#     # Check if the first and the last element are equal\n#     if lst[0] == lst[-1]:\n#         return True\n#     # Start checking the series\n#     sign = lst[0] > lst[1]\n#     for i in range(1, len(lst) - 1):\n#         if lst[i] < lst[i - 1] and sign:\n#             return False\n#         if lst[i] > lst[i - 1] and not sign:\n#             return False\n#         sign = lst[i] > lst[i + 1", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return True\n    else:\n        return is_Monotonic_helper(arr)\n\ndef is_Monotonic_helper(arr):\n    is_Decreasing = False\n    is_Increasing = False\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            is_Decreasing = True\n        elif arr[i] < arr[i + 1]:\n            is_Increasing = True\n        else:\n            return True\n    return is_Increasing or is_Decreasing\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(array):\n\tif len(array) < 2:\n\t\treturn True\n\ti = 0\n\twhile i < len(array)-1:\n\t\tif array[i] > array[i+1]:\n\t\t\treturn False\n\t\ti+=1\n\treturn True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n# Solution 1 - 25 / 25 test cases passed.\n# Runtime Complexity = O(n)\n# Space Complexity = O(1)\n\n\ndef is_Monotonic(arr):\n    if len(arr) < 3:\n        return True\n\n    if arr[0] <= arr[1] and arr[1] <= arr[2]:\n        return True\n\n    if arr[0] >= arr[1] and arr[1] >= arr[2]:\n        return True\n\n    return False\n\n\ndef is_Monotonic2(arr):\n    return all(arr[i] <= arr[i + 1] or arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(l1, l2):\n    \"\"\"\n    :param l1: list\n    :param l2: list\n    :return:\n    \"\"\"\n    if not l1 or not l2:\n        return False\n    for i in l1:\n        if i not in l2:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(sublist,main_list):\n    return sorted(sublist) == sorted(main_list)", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(superlist,sublist):\n    if len(superlist)>len(sublist):\n        return False\n    count=0\n    for i in sublist:\n        if i in superlist:\n            count+=1\n    return count == len(sublist)\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1, l2):\n    if l1==l2:\n        return True\n    else:\n        return False\n\nis_sublist([2,4,3,5,7],[3,7])", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list1, list2):\n    pass", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    return list2 in list1\n\n# def is_sublist(list1,list2):\n#     for x in list1:\n#         if list2 == x:\n#             return True\n#         elif x in list2:\n#             return True\n#     return False\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\ndef is_sublist_with_set(list1,list2):\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n\ndef is_sublist_with_set2(list1,list2):\n    if list(set(list1)-set(list2)) == []:\n        return True\n    return False\n\ndef is_sublist_with_set3(list1,list2):\n    return len(set(list2)-set(list1)) == 0\n\ndef is_sublist_with_set4(list1,list2):\n    if set(list1) - set(list2) == set():\n        return True\n    return False\n\ndef is_sublist_with_set5(list1,list2):\n    if set(list1) == set(list2):\n        return True\n    return False\n\ndef is_sublist_with_set6(list1,list2):\n    return len(list2) >= len(list1) and len(list(set(list1) - set(list2))) == 0\n\ndef is_sublist_with_set7(list1,list2):\n    return (list1[len(list2):] == list2) or (list2[len(list1):] == list1)\n\ndef is_sublist_with_set8(list1,list2):\n    return sorted(list1) in sorted(list2)\n\ndef is_sublist_with_set9(list1,list2):\n    list2 = set(list2)\n    for item in list1:\n        if item not in list2:\n            return False\n        list2.remove(item)\n    return True\n\ndef is_sublist_with_set10(list1,list2):\n    list1 = set(list1)\n    for item in list2:\n        if item not in list1:\n            return False\n        list1", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(lst,sublst):\n\n    if len(sublst) > len(lst):\n        return False\n    elif len(sublst) == 0:\n        return True\n    else:\n        for i in range(len(lst) - len(sublst) + 1):\n            if lst[i:i+len(sublst)] == sublst:\n                return True\n        return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(L1,L2):\n    if len(L1)<len(L2):\n        return False\n    \n    if len(L1)==len(L2):\n        return True\n\n    for i in range(len(L2)-len(L1)+1):\n        if L2[i:i+len(L1)]==L1:\n            return True\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(a, b):\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            i += 1\n        j += 1\n    return i == len(b)\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    \"\"\"\n    >>> get_equal([(11, 22, 33), (44, 55, 66)], 3)\n    'All tuples have same length'\n    >>> get_equal([(11, 22, 33), (44, 55, 66)], 2)\n    'Not all tuples have same length'\n    >>> get_equal([(11, 22, 33), (44, 55)], 3)\n    'Not all tuples have same length'\n    \"\"\"\n    result = [len(x) == length for x in tuples]\n    if all(result):\n        return \"All tuples have same length\"\n    else:\n        return \"Not all tuples have same length\"\n\ndef test_get_equal():\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 2) == 'Not all tuples have same length'\n    assert get_equal([(11, 22, 33), (44, 55)], 3) == 'Not all tuples have same length'\n\n# Write a function to find if a given string contains a number.\n# assert has_number('1234') == True\n# assert has_number('123456') == True\n# assert has_number('123456a') == False\ndef has_number(s):\n    \"\"\"\n    >>> has_number('1234')\n    True\n    >>> has_number('123456')\n    True\n    >>> has_number('123456a')\n    False\n    \"\"\"\n    result = any([x.isdigit() for x in s])\n    return result\n\ndef test_has_number():\n    assert has_number", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    for tuple in tuples:\n        if len(tuple) != length:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'\n\n# print(get_equal([(11, 22, 33), (44, 55, 66)], 3))\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(list_of_tuples, length):\n    if (len(list_of_tuples) == 0):\n        return \"This function expects at least one tuple as argument\"\n    if (len(list_of_tuples) == 1):\n        return \"The length of the first tuple is equal to the length of all tuples\"\n\n    if (len(list_of_tuples[0]) == length):\n        return \"The length of the first tuple is equal to the length of all tuples\"\n    return \"The length of the first tuple is not equal to the length of all tuples\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    for i in tuples:\n        if len(i) != length:\n            return \"Not all tuples have same length\"\n    return \"All tuples have same length\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(list_of_tuples, num):\n  if len(list_of_tuples) == 1:\n    return 'All tuples have same length'\n  if len(list_of_tuples) != num:\n    return 'Not all tuples have same length'\n  else:\n    for i in range(num):\n      if len(list_of_tuples[i]) != len(list_of_tuples[i+1]):\n        return 'Not all tuples have same length'\n    else:\n      return 'All tuples have same length'\n\n# Test cases", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuple_list, length):\n    for tup in tuple_list:\n        if len(tup) != length:\n            return 'Not all tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(lst, n):\n    if len(lst) == 0 or len(lst[0]) != n:\n        return \"All tuples are not same length.\"\n    else:\n        return \"All tuples have same length.\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tups, length):\n    if len(tups) == 0:\n        return 'List of tuples is empty'\n    if all(len(tup) == length for tup in tups):\n        return 'All tuples have same length'\n    return 'Not all tuples have same length'\n\ndef test_get_equal():\n    assert get_equal([], 0) == 'List of tuples is empty'\n    assert get_equal([(1, 2, 3), (4, 5, 6)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == 'Not all tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)], 3) == 'Not all tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 4) == 'Not all tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18)], 3) == 'Not all tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuple_list, length):\n    if length == len(tuple_list[0]):\n        return 'All tuples have same length'\n    else:\n        return 'Not all tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(lst, count):\n    if len(set([len(x) for x in lst])) == 1:\n        return 'All tuples have same length'\n    else:\n        return 'Not all tuples have same length'\n\ndef main():\n    lst = [(11, 22, 33), (44, 55, 66)]\n    result = get_equal(lst, 3)\n    print(result)\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(unsorted):\n    \"\"\"\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    >>> comb_sort([25, 15, 5, 37, 79])\n    [5, 15, 25, 37, 79]\n    >>> comb_sort([79, 37, 25, 15, 5])\n    [5, 15, 25, 37, 79]\n    \"\"\"\n    sorted_list = []\n    while len(unsorted) > 0:\n        for _ in range(len(unsorted)):\n            new_sorted_list = []\n            i = 0\n            while i < len(unsorted)-1:\n                if unsorted[i] < unsorted[i+1]:\n                    new_sorted_list.append(unsorted[i])\n                    i += 1\n                else:\n                    new_sorted_list.append(unsorted[i+1])\n                    i += 2\n            new_sorted_list.append(unsorted[i])\n            sorted_list.extend(new_sorted_list)\n            unsorted = new_sorted_list\n    return sorted_list\n\ndef test():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(unsorted):\n    length = len(unsorted)\n    gap = length\n    swapped = True\n    while swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, length - gap):\n            if unsorted[i] > unsorted[i + gap]:\n                unsorted[i], unsorted[i + gap] = unsorted[i + gap], unsorted[i]\n                swapped = True\n#                print unsorted\n    return unsorted\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nimport random\n\n\ndef _swap(x, y, a):\n    a[x], a[y] = a[y], a[x]\n\n\ndef comb_sort(a):\n    N = len(a)\n    gap = N\n    sorted = False\n\n    while not sorted:\n        gap = _get_gap(gap)\n        sorted = True\n\n        for i in range(0, N - gap, gap):\n            for j in range(i, i + gap):\n                if a[i] > a[j]:\n                    sorted = False\n                    _swap(i, j, a)\n\n\ndef _get_gap(gap):\n    \"\"\"\n    Get next gap.\n    :param gap: current gap\n    :return: next gap\n    \"\"\"\n    return gap // 1.3\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nfrom random import randint\n\ndef comb_sort(nums):\n    if not nums:\n        return []\n\n    n = len(nums)\n    gap = n - 1\n\n    sorted = False\n\n    while not sorted:\n        sorted = True\n\n        for i in range(0, n - 1):\n            if nums[i] > nums[i + 1]:\n                sorted = False\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n        if gap <= 1:\n            break\n\n        gap //= 1\n\n    return nums\n\ndef test_comb_sort():\n    assert comb_sort([]) == []\n    assert comb_sort([5]) == [5]\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([15, 5, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([5, 15, 37, 79, 25]) == [5, 15, 25, 37, 79]\n    assert comb_sort([79, 5, 37, 25, 15]) == [5, 15, 25, 37, 79]\n    assert comb_sort([79, 5, 37, 25, 79, 15]) == [5, 15, 25, 37, 79, 79]\n    assert comb_sort([79, 5, 37, 79, 15, 25]) == [5, 15, 25, 37, 79, 79]\n    assert comb_sort([", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    \"\"\"\n    time complexity: O(n^2), n is the length of the list\n    space complexity: O(1)\n    \"\"\"\n    # if the length of the list is less than 2, return the list directly.\n    if len(arr) < 2:\n        return arr\n    \n    sorted = False\n    while not sorted:\n        # set the sorted flag to true\n        sorted = True\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i+1]:\n                # swap arr[i] and arr[i+1]\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                # mark the list is not sorted\n                sorted = False\n    \n    return arr\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(L):\n    n = len(L)\n    gap = n // 2\n    sorted = True\n\n    while gap > 0 and sorted:\n        sorted = False\n        for i in range(0, n - gap):\n            if L[i] > L[i + gap]:\n                L[i], L[i + gap] = L[i + gap], L[i]\n                sorted = True\n        gap = gap // 1.3\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(array):\n    result = []\n    array_length = len(array)\n    if array_length < 2:\n        result = array\n    else:\n        sorted_list = []\n        gap = array_length // 2\n        while gap > 0:\n            sorted_list.append([])\n            for i in range(gap):\n                sorted_list[len(sorted_list) - 1].append(array[i])\n            gap = int(gap / 1.3)\n        sorted_list[len(sorted_list) - 1].append(array[gap - 1])\n        for i in range(len(sorted_list)):\n            sorted_list[i] = insertion_sort(sorted_list[i])\n        for i in range(len(sorted_list)):\n            for j in range(len(sorted_list[i])):\n                result.append(sorted_list[i][j])\n    return result\n\ndef insertion_sort(array):\n    result = []\n    if len(array) <= 1:\n        result = array\n    else:\n        for i in range(1, len(array)):\n            current_number = array[i]\n            j = i - 1\n            while (j >= 0) and (array[j] > current_number):\n                array[j + 1] = array[j]\n                j -= 1\n            array[j + 1] = current_number\n    return result\n\ndef main():\n    array = [5, 15, 37, 25, 79]\n    assert comb_sort(array) == array\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    n = len(arr)\n    gap = int(n/1.2473)\n    while gap > 0:\n        for i in range(n-gap,0,-gap):\n            sorted = True\n            for j in range(i,i-gap,-1):\n                if arr[j] < arr[j-1]:\n                    sorted = False\n                    temp = arr[j]\n                    arr[j] = arr[j-1]\n                    arr[j-1] = temp\n            if sorted:\n                break\n        gap = int(gap/1.2473)\n    return arr\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(L):\n    L = list(L)\n\n    # Check if L is empty, or if it only has one element.\n    if len(L) < 2:\n        return L\n\n    # Check if there is only one element.\n    if len(L) == 1:\n        return L\n\n    # L is sorted if the first element is the smallest element.\n    if L[0] <= L[1]:\n        return L\n\n    # If L is not sorted, then sort it.\n    # Sort the list, starting with the first element, using comb sort.\n    for i in range(len(L)):\n        if i + 1 < len(L):\n            # The list is sorted if the first element is the smallest element.\n            if L[i] <= L[i+1]:\n                break\n            # Sort the list.\n            for j in range(len(L)-1):\n                # Check if L[i] is bigger than L[j] and L[j+1].\n                if L[i] > L[j] and L[j+1] > L[i]:\n                    # If the order is right, swap L[i] and L[j].\n                    temp = L[i]\n                    L[i] = L[j]\n                    L[j] = temp\n                    # If the order is wrong, swap L[i] and L[j+1].\n                    elif L[i] < L[j] and L[j+1] > L[i]:\n                        temp = L[i]\n                        L[i] = L[j+1]\n                        L[j+1] = temp\n                    elif L[i] > L[j] and L[j+1] < L[i]:\n                        temp = L[i]\n                        L[i] = L[j]\n                        L[j] = temp\n                        temp = L[j]\n                        L[j] = L[j+1]\n                        L[j+1] = temp\n                    # Check if the order is right.\n                    if L[i] > L[j] and", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(nums):\n    '''\n    nums - a list of numbers to be sorted\n    '''\n    n = len(nums)\n    for i in range(n):\n        gap = n - i - 1\n        if gap > 0:\n            # insert the i-th element into its proper place\n            j = i\n            while j > 0 and nums[j] < nums[j - 1]:\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n                j -= 1\n\ndef comb_sort_iter(nums):\n    '''\n    nums - a list of numbers to be sorted\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        gap //= 1\n    return nums\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    for i in range(1,int(num**0.5)+1):\n        if num == (i**2 - (num-i)**2):\n            return True\n        if i**2 - (num-i)**2 < 0:\n            return False\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    for i in range(1, num):\n        for j in range(1, num):\n            if (num == i ** 2 + j ** 2):\n                return True\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n\tfor i in range(1,int(num**0.5)+1):\n\t\tif num-i*i==0:\n\t\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n <= 0:\n        return False\n\n    for x in range(1, int(sqrt(n)) + 1):\n        if n == x**2:\n            return True\n        if n % x == 0:\n            return False\n\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    \"\"\"\n    >>> dif_Square(5)\n    True\n    >>> dif_Square(17)\n    False\n    \"\"\"\n    if n == 1 or n == 0:\n        return False\n    if n == 4:\n        return True\n    for i in range(2,int(n**(1/2))+1):\n        if i**2 == n:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    s = int(n**0.5)\n    return (s**2 - n) == 0 or (n**2 - s**2) == 0\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    '''\n    Input:\n    n: a natural number\n    Output:\n    True if n is representable as a difference of two squares,\n    False otherwise\n    '''\n    if n > 1 and (n % 4 == 3 or n % 8 == 7):\n        return True\n    else:\n        return False\n\n\ndef main():\n    n = int(input('Enter a natural number: '))\n    if dif_Square(n):\n        print(n, 'can be represented as difference of two squares.')\n    else:\n        print(n, 'can not be represented as difference of two squares.')\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    sq = num**2\n    for i in range(2, int(num**0.5+1)):\n        if sq == i**2 - num:\n            return True\n    return False\n\ndef dif_Square(num):\n    sq = num**2\n    for i in range(2, int(num**0.5+1)):\n        if sq == i**2 - num:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    \"\"\"\n    n: integer\n    returns: boolean\n    \"\"\"\n    \n    for i in range(2, int(n**0.5 + 1)):\n        if n - i**2 == i:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef is_square(num):\n    \"\"\"\n    Check if the given number is a perfect square\n    \"\"\"\n    if num < 1:\n        return False\n    for i in range(1, int(num ** 0.5)+1):\n        if num % i == 0:\n            return True\n    return False\n\ndef dif_square(num):\n    \"\"\"\n    Check if the given number can be represented as difference of two perfect squares\n    \"\"\"\n    for i in range(1, int(num ** 0.5)+1):\n        if is_square(num - i**2):\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s):\n    return re.split(r\"[.,!?]\", s)\n\n# multiple_split('Forces of the \\ndarkness*are coming into the play.')\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(text, delimiters):\n    for delimiter in delimiters:\n        text = re.sub(delimiter, f'{delimiter}', text)\n    return text.split(delimiters)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n# Use regex to split the given string.\n\ndef multiple_split(text):\n    \"\"\"\n    Split the given string with multiple delimiters by using regex.\n    \"\"\"\n    result = []\n    while len(text) > 0:\n        match = re.search('(.+?)\\W*(?:[A-Z]|[-\\.]\\w+)\\W*(.+)', text)\n        if match:\n            result.append(match.group(1))\n            text = match.group(2)\n        else:\n            result.append(text)\n            break\n    return result\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string, delimiters=r'\\W+'):\n    return string.split(delimiters, -1)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(input_string, delimiters):\n    return [s for s in input_string.split(delimiters) if s]\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n# solution\ndef multiple_split(text):\n\treturn re.split(\"[\\n*]\", text)\n\n# test", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters):\n    return re.split(f\"[{re.escape(delimiters)}]\", string)\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters):\n    result = []\n    for i in range(len(string)-1):\n        for d in delimiters:\n            if string[i:i+len(d)] == d:\n                result.append(string[0:i])\n                string = string[i+len(d):]\n                break\n        else:\n            result.append(string[0:i+1])\n            string = string[i+1:]\n    result.append(string)\n    return result\n\ndef test():\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*','\\n']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*','\\n','\\t']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*','\\n','\\t','\\r']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*','\\n','\\t','\\r','\\v']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*','\\n','\\t','\\r','\\v', 'x']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*','\\n','\\t','\\r','\\v", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s, *delimiters):\n    return re.split('[%s]' % re.escape(''.join(delimiters)), s)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n# Idea: Regex splits on any of the delimiters, and returns the list of the pieces.\n# It's like using findall on each of the delimiters and then joining.\n\n\ndef multiple_split(string):\n    delimiters = [' ', '\\n', '\\t', '\\t\\t', '\\t\\t\\t', '\\t\\t\\t\\t']\n    splitter = '|'.join(delimiters)\n    regex = re.compile(f'[{splitter}]')\n    return regex.split(string)\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, array):\n    \"\"\"\n    \"\"\"\n    red = False\n    green = False\n    for pattern in patterns:\n        if pattern == \"red\":\n            red = True\n        elif pattern == \"green\":\n            green = True\n        else:\n            pass\n    for num in array:\n        if num == \"a\" and red:\n            red = False\n        elif num == \"b\" and green:\n            green = False\n        else:\n            pass\n    if red or green:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, objects):\n    if len(patterns) != len(objects):\n        return False\n    elif len(patterns) == 0:\n        return True\n    else:\n        if patterns[0] != objects[0]:\n            return False\n        else:\n            return is_samepatterns(patterns[1:], objects[1:])\n        \n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, colors):\n    colors = list(colors)\n    for pattern in patterns:\n        if not pattern in colors:\n            return False\n        colors.remove(pattern)\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, seq):\n    if len(patterns) == 0:\n        return True\n    for i in range(len(patterns)):\n        if patterns[i] == seq[i]:\n            continue\n        elif patterns[i] == seq[i+1]:\n            continue\n        else:\n            return False\n    return True\n\ndef is_samepatterns2(patterns, seq):\n    \"\"\"\n    Idea:\n    Use the hash map to record the pattern of the previous and current element. \n    If the pattern is not equal to the new element, \n    check if the pattern of the previous element matches the pattern of the current element. \n    \"\"\"\n    mp = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in mp:\n            mp[patterns[i]] = seq[i]\n        else:\n            if mp[patterns[i]] != seq[i]:\n                if patterns[i-1] in mp and mp[patterns[i-1]] == seq[i]:\n                    continue\n                else:\n                    return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, colors):\n    \"\"\"\n    patterns: an array of colors patterns\n    colors: an array of strings representing colors\n    returns: True if patterns and colors follow the same pattern\n    \"\"\"\n    # Your code here\n    i=0\n    while i < len(patterns) - 1:\n        if patterns[i] != patterns[i+1]:\n            return False\n        i+=1\n    return True\n    ", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, colors):\n    if len(patterns)!=len(colors):\n        return False\n    count={}\n    for i in range(len(patterns)):\n        if patterns[i] not in count:\n            count[patterns[i]]=0\n        count[patterns[i]]+=1\n    for color in count:\n        if count[color]!=colors.count(color):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, strings):\n    if len(patterns)==0 and len(strings)==0:\n        return True\n    if len(patterns)==0 or len(strings)==0:\n        return False\n    if len(patterns)>len(strings):\n        return False\n    if patterns[0]==strings[0]:\n        return is_samepatterns(patterns[1:], strings[1:])\n    else:\n        return False\n\n\npatterns = [\"red\",\"green\",\"green\"]\nstrings = [\"a\", \"b\", \"b\"]", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, strs):\n  if strs is None or len(strs) == 0:\n    return True\n  if len(strs) < len(patterns):\n    return False\n  if len(patterns) == 1:\n    return patterns[0] == strs[0]\n  return is_samepatterns(patterns[1:], strs[1:]) and patterns[0] == strs[0]\n\ndef test_is_samepatterns():\n  print (\"\\nTesting is_samepatterns\")\n  print (\"is_samepatterns(['red','green','green'],['a', 'b', 'b'])==True:\", is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]))\n  print (\"is_samepatterns(['red','green','green'],['a', 'b', 'c'])==False:\", is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"c\"]))\n  print (\"is_samepatterns(['red','green','green'],['a', 'b', 'b', 'b'])==False:\", is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"b\"]))\n  print (\"is_samepatterns(['a','b','c'],['a', 'b', 'b'])==False:\", is_samepatterns([\"a\",\"b\",\"c\"], [\"a\", \"b\", \"b\"]))\n  print (\"is_samepatterns(['a','b','c'],['a', 'b', 'c'])==True:\", is_samepatterns([\"a\",\"b\",\"c\"], [\"a\", \"b\", \"c\"]))\n  print (\"is_samepatterns(['a','b','c'],['a', 'b', 'c', 'c'])==True:\", is_samepatterns([\"a\",\"b\",\"c\"], [\"a\", \"b\", \"c\", \"c\"]))\n  print (\"is_samepatterns(['a','b','c'],['a', 'b', 'd'])==False:\", is_samepatterns([\"a\",\"b\",\"c\"], [\"a\", \"b\", \"d\"]))\n  print (\"is_samepatterns([],['a', 'b', 'c'])==True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, sequence):\n    \"\"\"\n    patterns: a list of str\n    sequence: a list of str\n    return: boolean\n    \"\"\"\n    if len(patterns) == len(sequence):\n        return True\n    else:\n        return False\n\n\ndef main():\n    \"\"\"\n    Do some test cases.\n    \"\"\"\n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\"])==False \n    assert is_samepatterns([\"red\",\"green\",\"green\",\"red\"], [\"a\", \"b\", \"b\", \"a\"])==False \n    assert is_samepatterns([\"red\",\"green\",\"green\",\"red\"], [\"a\", \"b\", \"b\", \"a\", \"a\"])==True \n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, strings):\n    # Your code here\n    pass\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nimport itertools\nfrom typing import List\n\n\ndef find_tuples(\n    num_list: List[tuple], k: int\n) -> str:  # Time: O(n^2), Space: O(n^2)\n    # if len(num_list) < 2 or len(num_list) == 0 or k <= 0:\n    #     return None\n    result = []\n    for x in num_list:\n        for y in num_list:\n            if all(z % k == 0 for z in itertools.chain(x, y)):\n                result.append(x)\n    return f\"[{', '.join([f'{elem}' for elem in result])}]\"\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    for item in tuples:\n        if item[0] % k == 0 and item[1] % k == 0 and item[2] % k == 0:\n            return '[{0}]'.format(tuple(item))\n\n\n# +\n# assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n# assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 5) == '[]'\n# assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 3) == '[(6, 24, 12), (7, 9, 6), (12, 18, 21)]'\n# assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 2) == '[(6, 24, 12), (7, 9, 6), (12, 18, 21)]'\n# -\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    for i in range(len(tuples)):\n        if all(tuples[i][j] % k == 0 for j in range(3)):\n            print(tuples[i])\n\n# find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n\n# [(6, 24, 12)]", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    if len(tuples) == 0:\n        return ''\n    result = []\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            tuple1 = tuple(tuples[i])\n            tuple2 = tuple(tuples[j])\n            if all(n % k == 0 for n in tuple1) and all(n % k == 0 for n in tuple2):\n                result.append(f'({tuple1[0]}, {tuple2[0]}, {tuple1[2]})')\n    return f'[{\", \".join(result)}]'\n\n\ndef main():\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 7))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 9))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 1))\n    print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 0))\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(lst, k):\n    for i in lst:\n        if all(k%j == 0 for j in i):\n            yield i\n\n# Time: O(N^2)\n# Space: O(1)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuple_list, k):\n    res = []\n    for x in tuple_list:\n        if all(n % k == 0 for n in x):\n            res.append(x)\n    return str(res)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst, k):\n    tuples = []\n    for element in lst:\n        if all(element[i] % k == 0 for i in range(len(element))):\n            tuples.append(element)\n    return f\"[{', '.join([f'{element}' for element in tuples])}]\" if len(tuples) > 0 else \"[]\"\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    \"\"\" Returns a list of tuples containing all elements divisible by k\"\"\"\n    result = []\n    for item in tuples:\n        if all(item[i] % k == 0 for i in range(len(item))):\n            result.append(item)\n    return str(result)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst, k):\n    # Res = []\n    # for tup in lst:\n    #     tup_sum = 0\n    #     for elem in tup:\n    #         tup_sum += elem\n    #     if tup_sum % k == 0:\n    #         Res.append(tup)\n    # return Res\n    return list(filter(lambda tup: all(elem % k == 0 for elem in tup), lst))\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n\n# K -> List[Tuple]\nK = defaultdict(list)\n\ndef find_tuples(a_list: List[Tuple], k: int) -> str:\n    \"\"\"\n    >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    \"\"\"\n    for (i,j,n) in a_list:\n        if i % k == 0 and j % k == 0 and n % k == 0:\n            K[k].append((i,j,n))\n    if K:\n        return str(K[k])\n    else:\n        return \"[]\"\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_squares(m, n):\n    return (m * n) - (m - 1) * (n - 1)\n\ndef test_count_squares():\n    assert count_squares(4,3) == 20\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(num_rows, num_columns):\n    total = 0\n    for i in range(0, num_rows):\n        for j in range(0, num_columns):\n            if (i % 2 == 0 and j % 2 == 0) or (i % 2 != 0 and j % 2 != 0):\n                total += 1\n    return total\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return n*m - n*m%4 - (n-1)*m%4 - m*m%4 + 2*m*(n-1)%4 - 4*m*(n-2)%4\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(row, column):\n    return row * column\n\n#count_Squares(4,3) == 20", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\nimport math\n\ndef count_Squares(n, m):\n    if n <= 0 or m <= 0:\n        return 0\n    else:\n        return n * m * (n + 1) * (m + 1) // 4\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(r, c):\n    squares = 0\n    for i in range(r):\n        for j in range(c):\n            if (i == j or i + j == r - 1):\n                squares += 1\n    return squares\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\nimport unittest\n\n\ndef count_squares(n, m):\n    # write your code here\n    if n < 0 or m < 0:\n        return 0\n    return n * m - (n + 1) * (m + 1)\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n, m):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count = count + i + j\n    return count\n\n# this is the simplest form\n# using enumerate\ndef count_Squares2(n, m):\n    return sum(i+j for i,j in zip(range(n),range(m)))\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_squares(num_rows, num_cols):\n    \"\"\"Returns the number of squares in a rectangular prism\"\"\"\n    return num_rows * num_cols\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(numRows, numCols):\n    numSquares = 0\n    for i in range(0, numRows):\n        for j in range(0, numCols):\n            if i == 0 or i == numRows - 1 or j == 0 or j == numCols - 1:\n                numSquares += 1\n    return numSquares\n\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (n):\n    sum_even = 0\n    sum_odd = 0\n\n    if n == 0:\n        return True\n\n    if n < 0:\n        n = n * (-1)\n\n    while n > 0:\n        r = n % 10\n        n = n // 10\n\n        if r % 2 == 0:\n            sum_even = sum_even + r\n        else:\n            sum_odd = sum_odd + r\n\n    if sum_even == sum_odd:\n        return False\n    else:\n        return True\n\n# assert is_Diff (12345) == False\n# assert is_Diff (12345) == False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    num_str = str(num)\n    even_count = 0\n    odd_count = 0\n    for num in num_str:\n        if int(num) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == odd_count:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    if str(num) == str(num)[::-1]:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    sum_odd = 0\n    sum_even = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    return sum_even - sum_odd == 0\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    #write your code here\n    return (sum(int(d) for d in str(n))%2) == 0\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n\tnum = str(n)\n\teven = 0\n\todd = 0\n\tfor i in range(len(num)):\n\t\tif int(num[i]) % 2 == 0:\n\t\t\teven += int(num[i])\n\t\telse:\n\t\t\todd += int(num[i])\n\tif even == odd:\n\t\treturn False\n\telse:\n\t\treturn True\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# Solution\n# O(n)\n# Time: O(n)\n# Space: O(1)\n\ndef is_Diff(num):\n    if (sum([int(i) for i in str(num)])%2):\n        return False\n    else:\n        return True\n\n# Test cases", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    even_sum = 0\n    odd_sum = 0\n    while num != 0:\n        last_digit = num % 10\n        if last_digit % 2 == 0:\n            even_sum += last_digit\n        else:\n            odd_sum += last_digit\n        num = num // 10\n    return even_sum - odd_sum == 0\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (num):\n\tif ((sum(list(str(num))) - 2*sum(list(filter(lambda x: x%2==0, list(str(num))))))==0):\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef test_is_Diff():\n\tassert is_Diff(12345) == False\n\n# Find difference between sum of even and odd digits.\n\ndef get_diff(num):\n    even_sum = sum([int(x) for x in str(num) if int(x) % 2 == 0])\n    odd_sum = sum([int(x) for x in str(num) if int(x) % 2 != 0])\n    return even_sum - odd_sum\n\ndef test_get_diff():\n    assert get_diff(12345) == 2", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\nimport math\n\ndef is_Diff(num):\n    return True if math.fmod(sum(list(map(int,str(num)))),2)==0 else False\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n > 0:\n        count += (n & 1)\n        n >>= 1\n    return count\n\ndef main():\n    assert count_With_Odd_SetBits(5) == 3\n    print(\"OK\")\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    while n != 0:\n        count += n & 1\n        n = n >> 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\nimport unittest\n\n\ndef count_With_Odd_SetBits(num):\n    count = 0\n    if num % 2 != 0:\n        for i in range(1, num):\n            if num & i != 0:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    \"\"\"\n        Count number of integers with odd number of set bits.\n    \"\"\"\n    return 0\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(number):\n    count = 0\n    for i in range(1, number + 1):\n        if count_setBits(i) % 2:\n            count += 1\n    return count\n\ndef count_setBits(number):\n    count = 0\n    while number > 0:\n        count += number & 1\n        number >>= 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(number):\n    num_of_bits = 0\n    if number == 0:\n        return 0\n    while number != 0:\n        num_of_bits += 1\n        number &= (number - 1)\n    return num_of_bits\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n+1):\n        if __builtin__.bin(i).count(\"1\") % 2 == 1:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\nfrom typing import List\n\n\ndef count_With_Odd_SetBits(n: int) -> int:\n    count = 0\n    for i in range(0, n + 1):\n        if bin(i).count(\"1\") % 2 != 0:\n            count += 1\n    return count\n\n\ndef count_With_Odd_SetBits_Alt(n: int) -> int:\n    count = 0\n    for i in range(0, n + 1):\n        if bin(i).count(\"1\") % 2 != 0:\n            count += 1\n        else:\n            continue\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        n = n & (n - 1)\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(num):\n\tcount = 0\n\twhile num:\n\t\tif num & 1 == 0:\n\t\t\tnum = num >> 1\n\t\telse:\n\t\t\tcount += 1\n\t\t\tnum = num >> 1\n\treturn count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 0\n\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 1\n\ndef main():\n    print(word_len(\"Hadoop\"))\n    print(word_len(\"Hadoop12\"))\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\nword_len = lambda word: len(word) % 2 == 1\n\n#assert word_len(\"Hadoop\") == False\n#assert word_len(\"Spark\") == True\n\n# +", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(w):\n    if len(w)%2 == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word)%2!=0\n\ndef main():\n    print(\"word_len(\\\"Hadoop\\\") == \" + str(word_len(\"Hadoop\")))\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return len(word)%2\n\n#assert word_len(\"Hadoop\") == False\n\ndef word_len(word):\n    if len(word)%2==0:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    \"\"\"\n    Compute the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 6\n    if n == 3:\n        return 15\n    if n == 4:\n        return 35\n    if n == 5:\n        return 78\n    if n == 6:\n        return 162\n    if n == 7:\n        return 330\n    if n == 8:\n        return 665\n    if n == 9:\n        return 1355\n    if n == 10:\n        return 2750\n    return n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom math import sqrt\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    result = 1\n    for i in range(n):\n        result += (4.0 / 3.0) * sqrt(i + 1)\n    return result\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    return 0\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfrom math import sqrt\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    The tetrahedral number is defined by the formula\n\n    T(n) = 4^n - 4 * (4^n - 1) * (4^n - 3) / 3\n    \"\"\"\n    return (4 ** n) - (4 * (4 ** n) - 1) * (4 ** n - 3) / 3\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom __future__ import division\n\nimport numpy as np\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Finds the nth tetrahedral number.\n    \"\"\"\n    T = 0.0\n    n = float(n)\n    assert n >= 0\n    for x in range(n+1):\n        # Convert to fraction of n\n        x = x / n\n        # Iterate over the fractional indices\n        for i in range(4):\n            # Iterate over the \"floors\"\n            for j in range(4):\n                for k in range(4):\n                    # Check if all the indices are not the same\n                    # and that the sum is not greater than 1.0\n                    if i != j and i != k and j != k and 1.0 - np.sum([i, j, k]) > x:\n                        T += 1.0 / 6.0\n    return T\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return 1/6 * (n ** 4)\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 9\n    if n == 4:\n        return 15\n    if n == 5:\n        return 35\n    return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3) + tetrahedral_number(n - 4)\n\n\ndef tetrahedral_number2(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number, without using a recursive function.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 9\n    if n == 4:\n        return 15\n    if n == 5:\n        return 35\n    return tetrahedral_number2(n - 1) + tetrahedral_number2(n - 2) + tetrahedral_number2(n - 3) + tetrahedral_number2(n - 4)\n\n\ndef main():\n    print(tetrahedral_number(5))\n    print(tetrahedral_number2(5))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nimport math\n\n\ndef tetrahedral_number(n):\n    return (1 + math.sqrt(5)) / 2 * (2**n - 1)\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return (n*(n-1)*(n-2)*n) / 6\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\n#T=int(input())\n#for t in range(T):\n    #n = int(input())\n    #print(tetrahedral_number(n))\n\ndef tetrahedral_number(n):\n    def tetrahedral_numbers(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        else:\n            return tetrahedral_numbers(n-1) + tetrahedral_numbers(n-2)\n    return tetrahedral_numbers(n)\n\nT=int(input())\nfor t in range(T):\n    n = int(input())\n    print(tetrahedral_number(n))\n\n# # https://www.hackerrank.com/challenges/tetrahedral-numbers/problem\n#\n# def tetrahedral_number(n):\n#     if n == 1:\n#         return 1\n#     elif n == 2:\n#         return 3\n#     else:\n#         return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n#\n# t = int(input())\n# for i in range(t):\n#     n = int(input())\n#     print(tetrahedral_number(n))\n\n# # https://www.hackerrank.com/challenges/tetrahedral-numbers/problem\n#\n# def tetrahedral_number(n):\n#     if n == 1:\n#         return 1\n#     elif n == 2:\n#         return 3\n#     else:\n#         return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n#\n# t = int(input())\n# for i in range(t):\n#     n = int(input())\n#     print(tetrahedral_number(n))\n\n# # https://www.hackerrank.com/challenges/tetrahedral-numbers/problem\n#\n# def tetrahedral_number("], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(t1, t2):\n    \"\"\"\n        zips the two tuples t1, t2\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError('tuples are not of equal length')\n    return [(t1[i], t2[i]) for i in range(len(t1))]\n\ndef test_zip_tuples():\n    assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\ndef main():\n    test_zip_tuples()\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\n# def zip_tuples(tup1, tup2):\n#     assert isinstance(tup1, tuple)\n#     assert isinstance(tup2, tuple)\n#     assert len(tup1) == len(tup2)\n#     result = []\n#     for i in range(len(tup1)):\n#         result.append((tup1[i], tup2[i]))\n#     return result\n\ndef zip_tuples(tup1, tup2):\n    return list(zip(tup1, tup2))", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(a, b):\n    if len(a) != len(b):\n        raise ValueError(\"Arguments are not the same length.\")\n    \n    return [(a[i], b[i]) for i in range(len(a))]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tup1, tup2):\n    return [(tup1[i], tup2[i]) for i in range(len(tup1))]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n\tresult = []\n\tfor i in range(0, len(tuple1)):\n\t\tresult.append((tuple1[i], tuple2[i]))\n\treturn result\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(a, b):\n\t\"\"\"Takes two tuples and returns a new tuple of zipped tuples\"\"\"\n\treturn [(a[i], b[i]) for i in range(len(a))]\n\n# TESTS", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1,t2):\n\treturn list(zip(t1,t2))\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(*tuples):\n    \"\"\"\n    Args:\n        *tuples (list, tuple): tuples of the same length\n\n    Returns:\n        list: zip of the two given tuples\n    \"\"\"\n    if len(tuples) == 0:\n        return []\n\n    result = []\n    for i in range(len(tuples[0])):\n        result.append((tuples[0][i], tuples[1][i]))\n    return result\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    assert type(tuple1) == tuple\n    assert type(tuple2) == tuple\n    return list(zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(x, y):\n    \"\"\"Return a list of (x[i],y[i]) pairs.\n    >>> zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    >>> zip_tuples([7, 8, 4, 5, 9, 10],[1, 5, 6] ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    \"\"\"\n    return [(x[i],y[i]) for i in range(len(x))]\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4/3)*math.pi*radius**3\n\n# Call test function:", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    \"\"\"\n    Find the volume of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    float\n        The volume of the sphere.\n    \"\"\"\n    return 4/3*3.14*(radius**3)\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\n\ndef volume_sphere(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n# TESTS", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\n# test", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n\treturn 4*3.14*radius**3\n\ndef test_volume_sphere():\n\tassert volume_sphere(10)==4188.790204786391\n\ndef main():\n\tprint 'Test sphere'\n\ttest_volume_sphere()\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    return (4/3)*pi*r**3", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(r):\n    return 4.0/3.0 * math.pi * r**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return (4.0/3.0)*math.pi*radius**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    \"\"\"\n    :param radius: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    return 4/3*math.pi*radius**3"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    try:\n        return chr(sum([ord(c) for c in s]))\n    except:\n        print(\"Please give a valid input.\")\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    return chr(sum([ord(i) for i in str]))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    return chr(sum(ord(c) for c in s))", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    count = 0\n    sum = 0\n    for char in string:\n        sum += ord(char)\n    return chr(sum)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    sum = 0\n    for i in range(0,len(str)):\n        sum = sum + ord(str[i])\n    return chr(sum)\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    return str[0] + str[1] + str[2]\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_char(st):\n    return ord(max(st))+1\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    return chr(sum([ord(i) for i in string]))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    return chr(sum(ord(c) for c in str))\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    x = 0\n    for i in string:\n        x = x+ord(i)\n    return chr(x)\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    \"\"\"\n    >>> sequence(10)\n    6\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 2\n    if n == 7:\n        return 1\n    if n == 8:\n        return 2\n    if n == 9:\n        return 4\n    if n == 10:\n        return 2\n    raise ValueError(\"The value of n must be between 1 and 10\")\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n <= 1:\n        return n\n    if n == 2:\n        return 1\n    seq = sequence(n-1)\n    if seq % 2 == 0:\n        return seq // 2\n    else:\n        return seq * 3 + 1\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 1\n    sequence = [1, 1, 2, 1]\n    for i in range(4, n):\n        sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3] + sequence[i - 4])\n    return sequence[n - 1]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"Find the n-th number in newman conway sequence.\n    \"\"\"\n    s = [1, 1, 2]\n    i = 3\n    while i < n:\n        s.append(s[i - 1] + s[i - 2])\n        i += 1\n    return s[n - 1]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    l = [1, 1]\n    for i in range(2, n):\n        temp = l[i-1] + l[i-2]\n        l.append(temp)\n    return l[n-1]\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef newman_conway_sequence(n):\n    \"\"\"\n    Args:\n        n(int): nth number\n\n    Returns:\n        int: n-th number in newman conway sequence\n\n    Raises:\n        TypeError: if n is not an integer\n        ValueError: if n is not positive\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be integer\")\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        first_two = [1, 1]\n        prev = first_two[0]\n        cur = first_two[1]\n        for _ in range(n-2):\n            prev = cur\n            cur = sum(first_two)\n            first_two.append(cur)\n        return cur\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    res = [1]\n    for i in range(1, n):\n        res.append(res[i-1]+res[i])\n    return res[n-1]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    assert type(n) == int\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return sequence(n-1)+sequence(n-2)\n\n# test"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    \"\"\"\n    The sphere's surface area is 4 * pi * radius^2\n    \"\"\"\n    return 4 * math.pi * radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return (4*np.pi*radius**2)*10**2\n    #return 4*np.pi*radius**2\n    ", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n\treturn 4 * (math.pi * radius ** 2)\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\ndef surfacearea_sphere(radius):\n    return math.pi * (radius**2)\n\ndef surfacearea_square(side):\n    return side**2\n\ndef surfacearea_rectangle(length, width):\n    return length*width\n\ndef surfacearea_triangle(height, base):\n    return height/2 * base\n\ndef surfacearea_circle(radius):\n    return math.pi * (radius**2)\n\n# what will surfacearea_cuboid(3, 2, 3) be?\ndef surfacearea_cuboid(length, width, height):\n    return 2*(length*width + length*height + width*height)", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    assert type(radius)==int\n    assert radius>=0\n    result = 4*math.pi*radius**2\n    return result\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    return (4/3)*np.pi*r**2\n\n\n# <codecell>\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    surfacearea = 4 * 3.14 * radius**2\n    return surfacearea\n\n\n# Write a function to find the volume of a sphere.\n# assert volume_sphere(10)==314.1592653589793\ndef volume_sphere(radius):\n    volume = (4 / 3) * 3.14 * (radius**3)\n    return volume\n\n\n# Write a function to calculate the number of days in a given month and year.\n# assert number_days(12,2014)==29\ndef number_days(month,year):\n    if month in (4,6,9,11):\n        number = 30\n    elif month in (1,3,5,7,8,10,12):\n        number = 31\n    else:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            number = 29\n        else:\n            number = 28\n    return number\n\n\n# Write a function that accepts a year and calculates the number of leap years up to that year.\n# assert leap_years(2014)==2\ndef leap_years(year):\n    years = 0\n    while year < 2050:\n        if year % 4 == 0:\n            years += 1\n        year += 1\n    return years\n\n\n# Write a function that accepts a number and returns a dictionary that contains information about it.\n# assert number_info(3)=={'even?':False, 'prime?':True, 'divisors':[1,3]}\ndef number_info(number):\n    divisors = []\n    even = False\n    prime = True\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n            if number // i == i:\n                even = True\n            else:\n                prime = False\n    return {'even?':even, 'prime?':prime,", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    surface_area = 4 * np.pi * radius**2\n    return surface_area\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Args:\n       r(float): The radius of the sphere\n    Returns:\n       (float): The surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * r**2\n\n\n# -\n\n# ### Question 2\n#\n# Write a function to compute the volume of a cylinder.\n# assert volume_cylinder(3,10)==314.1592653589793\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    Args:\n       r(float): The radius of the cylinder\n       h(float): The height of the cylinder\n    Returns:\n       (float): The volume of the cylinder\n    \"\"\"\n    return math.pi * r**2 * h\n\n\n# ### Question 3\n#\n# Write a function to compute the volume of a sphere.\n# assert volume_sphere(10)==314.1592653589793\n\ndef volume_sphere(r):\n    \"\"\"\n    Args:\n       r(float): The radius of the sphere\n    Returns:\n       (float): The volume of the sphere\n    \"\"\"\n    return (4/3) * math.pi * r**3\n\n\n# ### Question 4\n#\n# Write a function to compute the volume of a cone.\n# assert volume_cone(3,10)==125.66370614359172\n\ndef volume_cone(r, h):\n    \"\"\"\n    Args:\n       r(float): The radius of the cone\n       h(float): The height of the cone\n    Returns:\n       (float): The volume of the cone\n    \"\"\"\n    return math.pi * r**2 * h / 3\n\n\n# ### Question 5\n#\n# Write a function to compute the surface area of a cone.\n# assert surfacearea_cone(3,10)==251.32741228718344\n\ndef surfacearea_cone(r, h):\n    \"\"\"\n    Args:"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n\tassert n > 0\n\tif n % 2 == 0:\n\t\treturn (n * (3 * n - 1) // 2)\n\telse:\n\t\treturn (n * (2 * n - 1))\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    pass", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    return 2*n*(3*n-1)//2 + 1\n\ndef centered_hexagonal_number_sieve(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    h_num = 2*n*(3*n-1)//2 + 1\n    p = [True]*(h_num+1)\n    for i in range(1, int(h_num**0.5)+1):\n        if p[i]:\n            for j in range(i*i, h_num+1, i):\n                p[j] = False\n    return [h_num-i for i, x in enumerate(p) if x][n-1]\n\ndef test_centered_hexagonal_number():\n    \"\"\"\n    Test centered_hexagonal_number function.\n    \"\"\"\n    for i in range(1, 100):\n        assert centered_hexagonal_number(i) == centered_hexagonal_number_sieve(i)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(100)\n    37806400\n    >>> centered_hexagonal_number(1000)\n    161070882280000\n    \"\"\"\n    return n*(n+1)*(2*n+1) // 6\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    return 6 * (n ** 2 - n)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Given n, return nth centered hexagonal number.\n    :param n: the number\n    :return: the number\n    \"\"\"\n    return int(hexagon(n - 1) + (n / 2.0))\n\n\ndef hexagon(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    :param n: the number\n    :return: the number\n    \"\"\"\n    return (n * (3 * n - 1)) / 2\n\ndef test_hexagon():\n    assert hexagon(1) == 1\n    assert hexagon(2) == 5\n    assert hexagon(3) == 14\n    assert hexagon(4) == 29\n    assert hexagon(5) == 50\n    assert hexagon(6) == 87\n    assert hexagon(7) == 141\n    assert hexagon(8) == 220\n    assert hexagon(9) == 325\n\ndef test_centered_hexagonal_number():\n    assert centered_hexagonal_number(1) == 1\n    assert centered_hexagonal_number(2) == 14\n    assert centered_hexagonal_number(3) == 29\n    assert centered_hexagonal_number(4) == 50\n    assert centered_hexagonal_number(5) == 87\n    assert centered_hexagonal_number(6) == 141\n    assert centered_hexagonal_number(7) == 220\n    assert centered_hexagonal_number(8) == 325\n    assert centered_hexagonal_number(9) == 456\n    assert centered_hexagonal_number(10) == 614\n    assert centered_hexagonal_number(11) == 800\n    assert centered_hexagonal_number(12) == 1014\n    assert centered_hexagonal_number(13) == 1257\n    assert centered_hexagonal_number(14) == 1530\n    assert centered_", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n\treturn n*(2*n - 1) // 2\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return sum(range(1, n+1))\n\n\ndef centered_hexagonal_number_v2(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    if n <= 0:\n        raise ValueError(\"Invalid n: {0}\".format(n))\n\n    def f(i):\n        \"\"\"\n        return the hexagonal number of i\n        \"\"\"\n        if i == 1 or i == 0:\n            return 1\n        return i * (2 * i - 1)\n\n    # calculate the sum of all numbers between 1 and n\n    sum_of_all = sum(f(i) for i in range(1, n+1))\n\n    # calculate the hexagonal number of n\n    hex_n = f(n)\n\n    # calculate the center of the hexagonal number of n\n    c = hex_n / 2\n\n    # calculate the difference between center of hexagonal number of n and sum of all numbers\n    return abs(c - sum_of_all)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    i = 1\n    hexagonal = 0\n    while i <= n:\n        hexagonal += 6 * i + 1\n        i += 1\n    return hexagonal\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(*args):\n    return dict(list(zip(*args)))\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(*args):\n    return {**args[0], **args[1], **args[2]}\n\ndef main():\n    test_cases = [\n        ({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }, {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}),\n    ]\n    for arg in test_cases:\n        res = merge_dictionaries_three(*arg)\n        print(f\"merge_dictionaries_three({arg[0]}, {arg[1]}, {arg[2]})=={res}\")\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(*dictionaries):\n    result = {}\n    for d in dictionaries:\n        result.update(d)\n    return result\n\n#assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\ndef print_all(*args):\n    for arg in args:\n        print(arg)\n\ndef find_or_default(key, dictionary, default):\n    try:\n        return dictionary[key]\n    except KeyError:\n        return default\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    temp = dict1\n    for key in dict2:\n        temp[key] = dict2[key]\n    for key in dict3:\n        temp[key] = dict3[key]\n    return temp\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(a, b, c):\n    merged_dict = a.copy()\n    merged_dict.update(b)\n    merged_dict.update(c)\n    return merged_dict\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # don't just return a merge of the three dictionaries - they contain conflicting values\n    # your function must produce a dictionary that contains all of the values of each of the dictionaries, but \n    # with the values from the last dictionary taking precedence (if the same key is found in all three dictionaries).\n\n    # solution: merge dict2 and dict3 into dict1.\n    \n    for key in dict3:\n        if key in dict1:\n            dict1[key] = dict3[key]\n        elif key in dict2:\n            dict1[key] = dict2[key]\n    return dict1\n\ndef main():\n    print(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }))\n    print(merge_dictionaries_three({ \"A\": \"Apple\", \"B\": \"Banana\", \"C\": \"Cherry\" }, { \"A\": \"Apricot\", \"C\": \"Coconut\", \"D\": \"Dragon fruit\" }, { \"B\": \"Blueberry\", \"C\": \"Cantaloupe\", \"D\": \"Date\" }))\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    #Your code here\n    return dict(dict1, **dict2, **dict3)\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(*args):\n  dictionary = {}\n  for i in range(len(args)):\n    for key, value in args[i].items():\n      if not key in dictionary:\n        dictionary[key] = value\n  return dictionary\n\n\ndef main():\n  args = [\n    {'R': 'Red', 'B': 'Black', 'P': 'Pink'},\n    {'G': 'Green', 'W': 'White'},\n    {'O': 'Orange', 'W': 'White', 'B': 'Black'},\n  ]\n  result = merge_dictionaries_three(*args)\n  print(result)\n\nmain()", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(*dictionaries):\n    # your code here\n    merged = {}\n    for dictionary in dictionaries:\n        for key in dictionary.keys():\n            merged[key] = dictionary[key]\n    return merged\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(di1, di2, di3):\n  assert isinstance(di1, dict)\n  assert isinstance(di2, dict)\n  assert isinstance(di3, dict)\n  #merged_dict={}\n  #merged_dict.update(di1)\n  #merged_dict.update(di2)\n  #merged_dict.update(di3)\n  #return merged_dict\n  return {**di1,**di2,**di3}\n\n#print(merge_dictionaries_three(di1, di2, di3))\n#assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n#print(merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }))\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(l):\n    '''\n    :param l: list of any type\n    :return: dict\n    '''\n    freq_dict={}\n    for x in l:\n        if x in freq_dict:\n            freq_dict[x]+=1\n        else:\n            freq_dict[x]=1\n    return freq_dict\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\nfrom collections import Counter\n\ndef freq_count(list_to_check):\n    \"\"\"\n    Arguments:\n    list_to_check -- a list.\n    \n    Returns:\n    dict -- a dictionary with the element frequencies.\n    \"\"\"\n    count_dict = Counter(list_to_check)\n    return count_dict\n\n# Testing code", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(l):\n    dic = {}\n    for i in l:\n        dic[i] = dic.get(i, 0) + 1\n    return dic\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(list_):\n  dict_ = {}\n  for item in list_:\n    if item in dict_:\n      dict_[item] += 1\n    else:\n      dict_[item] = 1\n  return dict_\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(l):\n    return dict(Counter(l))\n\n#test case", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(list1):\n    return {item: list1.count(item) for item in list1}\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    return dict((x, lst.count(x)) for x in lst)\n\ndef freq_count_fast(lst):\n    return dict((x, lst.count(x)) for x in set(lst))\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    return Counter(lst)\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(ls):\n    d = {}\n    for x in ls:\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    freq_dic = {}\n    for i in lst:\n        if i not in freq_dic:\n            freq_dic[i] = 1\n        else:\n            freq_dic[i] += 1\n    return freq_dic\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    \"\"\"Return the closest number that is smaller than n.\"\"\"\n    pass\n\n\ndef test_closest_num():\n    assert closest_num(11) == 10\n\n\n@pytest.mark.parametrize(\"n, expected\",\n                         [(1, 1), (2, 1), (3, 1), (4, 2), (5, 2), (6, 2),\n                          (7, 3), (8, 3), (9, 3), (10, 4), (11, 4), (12, 4),\n                          (13, 5), (14, 5), (15, 5), (16, 6), (17, 6),\n                          (18, 6), (19, 7), (20, 7)])\ndef test_closest_num_multiple_cases(n, expected):\n    \"\"\"Test the function for different input values.\"\"\"\n    assert closest_num(n) == expected\n\n\n@pytest.mark.parametrize(\"n\",\n                         [11.5, -1, 0.0, -10, 100])\ndef test_closest_num_type_error(n):\n    \"\"\"Test for value errors.\"\"\"\n    with pytest.raises(ValueError):\n        closest_num(n)\n\n\ndef test_closest_num_no_arg():\n    \"\"\"Test for type errors.\"\"\"\n    with pytest.raises(TypeError):\n        closest_num()\n\n# create a function to return the \n# sorted list of numbers from 1 to 100\n\n\n@pytest.mark.parametrize(\"num, expected\",\n                         [(1, [1]), (2, [1, 2]), (3, [1, 2, 3]),\n                          (4, [1, 2, 3, 4]), (5, [1, 2, 3, 4, 5]),\n                          (6, [1, 2, 3, 4, 5, 6]), (7, [1, 2, 3, 4, 5, 6, 7]),\n                          (8, [1", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    pass\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    return min(range(n), key=lambda x:abs(n-x))\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nimport math\n\ndef closest_num(n):\n    \"\"\"\n    Returns the closest smaller number than n.\n    \"\"\"\n    min_num = 0\n    while min_num < n:\n        if n % min_num == 0:\n            return n-min_num\n        min_num += 1\n    return min_num\n\ndef closest_num_better(n):\n    \"\"\"\n    Returns the closest smaller number than n.\n    \"\"\"\n    min_num = 0\n    while min_num < n:\n        if n % min_num == 0:\n            return n-min_num\n        min_num += 1\n    return min_num\n\ndef test_closest_num():\n    assert closest_num(11) == 10\n    assert closest_num(3) == 2\n    assert closest_num(13) == 12\n\ndef test_closest_num_better():\n    assert closest_num_better(11) == 10\n    assert closest_num_better(3) == 2\n    assert closest_num_better(13) == 12\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    # initialize a variable for the closest smaller number\n    closest = None\n    # loop through each number less than n\n    for i in range(n):\n        # if n is less than the current number, set the closest to the current number\n        if n < i:\n            closest = i\n        # if n is equal to the current number, exit the loop\n        elif n == i:\n            break\n    # return the closest\n    return closest\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    return min(n, closest_num(n-1))\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n <= 0:\n        return -1\n    elif n % 10 == 0:\n        return n - 1\n    else:\n        return n + 1 - n % 10\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    for i in range(n+1):\n        if n == i or n - i == abs(n - i):\n            continue\n        else:\n            return i\n\ndef main():\n    assert closest_num(11) == 10\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    return n - 1\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    return min(range(n), key=lambda x: abs(x-n))\n\n\ndef closest_num_2(n):\n    return min(range(n), key=lambda x: abs(x - n))"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(word):\n    return max(map(len, word))\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n\t\"\"\"\n\t:param words: a list of words\n\t:return: the length of the longest word\n\t\"\"\"\n\tmax_len = 0\n\tfor word in words:\n\t\tif len(word) > max_len:\n\t\t\tmax_len = len(word)\n\treturn max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(ls):\n    pass\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(L):\n    m = 0\n    for i in L:\n        if len(i)>m:\n            m=len(i)\n    return m\n\ndef len_log_1(L):\n    return max(len(i) for i in L)\n\ndef len_log_2(L):\n    max_len = 0\n    for i in L:\n        max_len = max(max_len, len(i))\n    return max_len\n\ndef len_log_3(L):\n    from functools import reduce\n    return reduce(max, [len(i) for i in L])\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    if len(words) == 0:\n        return 0\n\n    return max(len_log([word for word in words if len(word) <= 3]), \n               len_log([word for word in words if len(word) > 3])) + 1\n\ndef main():\n    print(len_log([\"python\",\"PHP\",\"bigdata\"]))\n    print(len_log([\"python\",\"PHP\",\"bigdata\",\"junk\"]))\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    m = 0\n    for word in words:\n        if len(word) > m:\n            m = len(word)\n    return m\n\ndef len_log_2(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max([len(word) for word in words])\n\ndef len_log_3(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max([len(word) for word in words], key=len)\n\ndef len_log_4(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max([len(word) for word in words], key=len)\n\ndef len_log_5(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max(map(len,words))\n\ndef len_log_6(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max(len(w) for w in words)\n\ndef len_log_7(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max(len(w) for w in words)\n\ndef len_log_8(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max(map(len,words))\n\ndef len_log_9(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max([len(word) for word in words], key=len)\n\ndef len_log_10(words):\n    \"\"\"\n    :type words: list[str]\n    :rtype: int\n    \"\"\"\n    return max(len(w) for w in words)\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    return max([len(i) for i in words])", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    longest = 0\n    for w in words:\n        if len(w) > longest:\n            longest = len(w)\n    return longest\n\n# call the function", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(s):\n    # Your code here\n    s = s.split()\n    l = 0\n    for i in s:\n        if len(i) > l:\n            l = len(i)\n    return l", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(word_list):\n    \"\"\"Find the length of the longest word from the given word list.\"\"\"\n    return max([len(w) for w in word_list])\n\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(str_list,substring):\n    if substring in str_list:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(list_of_strings,substring):\n\t\"\"\"\n\tReturn true if the substring is present in the list\n\totherwise return false\n\t\"\"\"\n\treturn substring in list_of_strings\n\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_words, substring):\n    \"\"\"\n    :param list_of_words: A list of strings\n    :param substring: A substring to find\n    :return: Boolean value if substring is in the list of words\n    \"\"\"\n    for word in list_of_words:\n        if substring in word:\n            return True\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(strings, substring):\n    \"\"\"\n    checks if substring is a substring of any string in the list of strings\n    if it is return true\n    if it is not return false\n    \"\"\"\n    for string in strings:\n        if substring in string:\n            return True\n    return False", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(list_of_strings, substring):\n    return any(substring in string for string in list_of_strings)\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(list_of_strings,substring):\n    \"\"\"\n    This function returns true if the substring is found in the list of strings,\n    otherwise it returns false\n    \"\"\"\n    if substring in list_of_strings:\n        return True\n    return False", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n# Time: O(n)\n# Space: O(n)\n\n\ndef find_substring(lst, sub_lst):\n    for i in range(0, len(lst) - len(sub_lst) + 1):\n        if lst[i:i + len(sub_lst)] == sub_lst:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(words, substring):\n    for word in words:\n        if word.find(substring) >= 0:\n            return True\n    return False\n\n\n#assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n#assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"bla\")==False\n\n\ndef find_substring2(words, substring):\n    if len(substring) == 0:\n        return True\n    for index in range(len(words) - len(substring) + 1):\n        found = True\n        for i in range(len(substring)):\n            if words[index+i] != substring[i]:\n                found = False\n        if found:\n            return True\n    return False\n\n\n#assert find_substring2([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n#assert find_substring2([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"bla\")==False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(list_of_strings, string_to_search):\n    for item in list_of_strings:\n        if string_to_search in item:\n            return True\n    return False\n\ndef main():\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(words, sub):\n\tfor i in range(0,len(words)-len(sub)+1):\n\t\tif words[i:i+len(sub)]==sub:\n\t\t\treturn True\n\n\treturn False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number):\n    pass\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack or stack[-1] == '(':\n                return False\n            else:\n                stack.pop()\n    return True\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(n):\n    return all(len(x) == 2 and x[0] == x[1] for x in str(n))\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(n):\n    return (int(n[1:]+n[0]) == int(n[2:]+n[1]))\n\ndef is_undulating_new(n):\n    return n == n[::-1]\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n\tif len(number) <= 1:\n\t\treturn False\n\n\tif number[0] == number[1]:\n\t\treturn is_undulating(number[1:])\n\n\treturn True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    \"\"\"\n    :type num: str\n    :rtype: bool\n    \"\"\"\n    if len(num) <= 2:\n        return False\n\n    while True:\n        if num.find('1') == -1:\n            return True\n        index = num.find('1')\n        num = num[:index] + '0' + num[index+1:]\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(n: str) -> bool:\n    \"\"\"\n    :param n: str\n    :return: bool\n    \"\"\"\n    l = list(n)\n    # Check if all characters are same\n    if l[0] != l[-1]:\n        return False\n    # Check if all characters in between are same\n    for i in range(1, len(l)-1):\n        if l[i] != l[i-1]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(s):\n    \"\"\"\n    check whether the given number is undulating or not\n    \"\"\"\n    def _is_undulating(s):\n        if len(s) == 1:\n            return True\n        elif len(s) % 2 != 0:\n            return False\n        else:\n            return all(_is_undulating(s[:len(s) // 2]) and _is_undulating(s[len(s) // 2:]))\n    return _is_undulating(s)\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    pass\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(n):\n    \"\"\"\n    :type n: str\n    :rtype: bool\n    \"\"\"\n    if len(n) == 1:\n        return True\n    x, y = n[0], n[1:]\n    for i in range(1, len(y)):\n        if y[:i] != x * (i+1):\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    # Your code here\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a,b/2) * power(a,b/2)\n    else:\n        return a * power(a,b-1)\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    pass\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    return a ** b\n\ndef test_power():\n    assert power(3,4) == 81\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    return a**b\n\n\n# In[11]:\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    # TODO: Return a^b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    \"\"\"\n    Find a to the power of b\n    \"\"\"\n    return a ** b", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n# 81\n\ndef power(a, b):\n    return a**b\n\ndef test_power():\n    assert power(3,4) == 81\n\n\n# ## Challenge\n# Write a function to calculate the value of 'a' to the power 'b'.\n#\n# assert power(3,4) == 81\n\n# ## Testing\n# Add a test in the following cell, and execute the cell with 'Shift' + 'Enter'.\n#\n# You should see 'OK'.\n\n# +\ndef power(a, b):\n    return a**b\n\ntest_power()\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    '''\n    a : an integer\n    b : an integer\n    return an integer\n    '''\n    total = 1\n    for i in range(b):\n        total *= a\n    return total\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return power(a,b)*a**(-1)\n    else:\n        return power(a,b-1)*a\n\n#Test\npower(3,4)<jupyter_output><empty_output><jupyter_text>**Question 4**Write a function to calculate the value of 'a' to the power 'b'.assert power(3,4) == 81assert power(-3,4) == 1256**Question 5**Write a function to calculate the value of 'a' to the power 'b'.assert power(3,4) == 81assert power(-3,4) == 1256<jupyter_code>\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\nimport pytest\n\n\ndef power(a, b):\n    return a ** b\n\n\n@pytest.mark.parametrize(\n    \"a, b, expected\", [(3, 4, 81), (1, 3, 1), (2, 0, 1), (0, 2, 0), (2, -1, 0.5), (1, -1, 1 / 1)]\n)\ndef test_power(a, b, expected):\n    assert power(a, b) == expected\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(record):\n    try:\n        return min(record, key=lambda x: x[1])[0]\n    except:\n        return None\n\n#test", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n  return min(item[0] for item in tuples)\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(x):\n    \"\"\"\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    return min(list(range(len(tuples))), key=lambda x: tuples[x][1])\n\n\ndef test_index_minimum():\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(records):\n    return next(iter(min(records, key=lambda x: x[1])))\n\n# Test", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    return min(tuple[1] for tuple in tuples)\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    if len(tuples) < 1:\n        return ''\n    return min(tuples, key=lambda x: x[1])[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuple_list):\n    \"\"\"\n    :param tuple_list: list of tuples to find the minimum\n    :return: the minimum value tuple\n    \"\"\"\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list[0]\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef find_min_length(sub_list):\n    sub_list.sort()\n    if len(sub_list) == 0:\n        return 0\n    return len(sub_list[0])\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(array):\n    if array == None:\n        return 0\n    elif len(array) == 0:\n        return 0\n    elif len(array) == 1:\n        return len(array[0])\n    else:\n        if len(array[0]) < len(array[1]):\n            return len(array[0])\n        elif len(array[1]) < len(array[0]):\n            return len(array[1])\n        else:\n            return len(array[0])\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef find_min_length(sublist):\n    \"\"\"\n    >>> sublist = [[1,2],[1,2,3]]\n    >>> find_min_length(sublist)\n    2\n    >>> sublist = [[1,2,3],[1,2,3,4]]\n    >>> find_min_length(sublist)\n    1\n    \"\"\"\n    min_length = len(sublist[0])\n    for sublist in sublist:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return min(len(sub_list) for sub_list in lst)\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(alist):\n    '''(list of list of integers) -> int\n    Find the minimum length of the sublist of alist.\n    '''\n    if not alist:\n        return 0\n    result = len(alist)\n    for sublist in alist:\n        result = min(result, len(sublist))\n    return result\n\n\ndef main():\n    print(Find_Min_Length([[1],[1,2]]))\n    print(Find_Min_Length([[],[1,2]]))\n    print(Find_Min_Length([[1,2],[],[3,4]]))\n    print(Find_Min_Length([[1],[1,2],[],[3,4]]))\n    print(Find_Min_Length([[1],[1,2],[],[3,4,5]]))\n    print(Find_Min_Length([[1],[1,2],[],[3,4,5],[6,7]]))\n    print(Find_Min_Length([[1],[1,2,3,4],[5,6],[7,8,9]]))\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(numlist):\n    if numlist == None:\n        return 0\n    elif len(numlist) == 0:\n        return 0\n    else:\n        min_length = len(numlist[0])\n        for num in numlist:\n            if len(num) < min_length:\n                min_length = len(num)\n        return min_length\n\n\n# -\n\nFind_Min_Length([[1],[1,2]])\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lists):\n    min_list_length = len(lists[0])\n    for list_num in lists[1:]:\n        if len(list_num) < min_list_length:\n            min_list_length = len(list_num)\n    return min_list_length\n\n\ndef main():\n    assert Find_Min_Length([[1],[1,2]]) == 1\n    assert Find_Min_Length([[1],[1,2],[3,4,5,6]]) == 2\n    assert Find_Min_Length([[1],[1,2],[3,4,5,6], [1,2]]) == 3\n    assert Find_Min_Length([[1,2],[1],[3,4,5,6]]) == 4\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(sub_list):\n    #Write your code here\n    pass\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    return len(set(range(1, int(n**0.5)+1)) & set(range(1, n+1)))\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# Input\n# 25\n\n# Output\n# 4\n\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    \"\"\"\n    Args:\n        n: an integer\n    Returns:\n        an integer\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(x):\n    if x == 1:\n        return 1\n    else:\n        return x+divisor(x-1)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(num):\n    if (num <= 0):\n        return 0\n    count = 0\n    for i in range(1, num+1):\n        if (num % i) == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"Q2k03j1lB_jj\" outputId=\"93329478-45e4-4785-f800-b355e20f2414\"\n# write your code here\n\ndef divisor(x):\n    if x < 2:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, x + 1):\n            if x % i == 0:\n                sum = sum + 1\n        return sum\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n\tcount = 0\n\tfor i in range(1, n + 1):\n\t\tif n % i == 0:\n\t\t\tcount = count + 1\n\treturn count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(a):\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        if a%2 == 0:\n            return a//2 + divisor(a//2)\n        elif a%2 == 1:\n            return a//2 + divisor(a//2 + 1)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(x):\n  count = 0\n  for i in range(1,x+1):\n    if x%i == 0:\n      count += 1\n  return count"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lst):\n    \"\"\"\n    Function that returns a dictionary with the frequency of each item in the list of lists\n    \"\"\"\n    freq = {}\n    for i in lst:\n        for j in i:\n            if j not in freq:\n                freq[j] = 1\n            else:\n                freq[j] += 1\n    return freq\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n# input_list=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\n# output={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\ndef frequency_lists(input_list):\n    output={}\n    for i in input_list:\n        for x in i:\n            if x in output.keys():\n                output[x]+=1\n            else:\n                output[x]=1\n    return output\n\n# assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    \"\"\"\n    Args:\n        lists (list(list)): A list of lists.\n\n    Returns:\n        dict(int, int): A dictionary of key and value. The key is the elements of the lists and the value is the frequency count of the key.\n    \"\"\"\n    if len(lists) == 0:\n        return {}\n\n    frequency = {}\n\n    for item in lists:\n        for each in item:\n            if each not in frequency:\n                frequency[each] = 0\n\n            frequency[each] += 1\n\n    return frequency\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(l):\n    # your code here\n    counter = {}\n    for i in l:\n        for j in i:\n            counter[j] = counter.get(j, 0) + 1\n    return counter\n\n\ndef test_function():\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    print(\"pass\")\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lst):\n    result = {}\n    for l in lst:\n        for e in l:\n            if e in result:\n                result[e] += 1\n            else:\n                result[e] = 1\n    return result\n\ndef test_frequency_lists():\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(x):\n    \"\"\"\n    x is a list of lists\n    \"\"\"\n\n    # TODO: Your code here\n\n    return {int(i):x[i].count(int(i)) for i in range(len(x))}\n\ndef test_function(test_case):\n    frequency = frequency_lists(test_case[0])\n    solution = test_case[1]\n    if solution == frequency:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lst):\n    \"\"\"Count the frequency of each element in all the lists of the list.\"\"\"\n    result = {}\n    for x in lst:\n        for y in x:\n            if y in result:\n                result[y] = result[y] + 1\n            else:\n                result[y] = 1\n    return result\n\ndef frequency_lists(lst):\n    \"\"\"Count the frequency of each element in all the lists of the list.\"\"\"\n    result = {}\n    for x in lst:\n        for y in x:\n            if y in result:\n                result[y] = result[y] + 1\n            else:\n                result[y] = 1\n    return result\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: frequency count of all elements in list of lists\n    \"\"\"\n\n    frequency_dict = {}\n\n    for item in lists:\n        for item_in_list in item:\n            frequency_dict[item_in_list] = frequency_dict.get(item_in_list, 0) + 1\n\n    return frequency_dict\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import defaultdict\n\ndef frequency_lists(data):\n    \"\"\"\n    input: A list of lists\n    output: A dictionary of frequencies\n    \"\"\"\n    frequencies = defaultdict(int)\n    for d in data:\n        for x in d:\n            frequencies[x] += 1\n    return frequencies\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    result = {}\n    for ls in lists:\n        for i in ls:\n            if i in result:\n                result[i] += 1\n            else:\n                result[i] = 1\n    return result\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(my_list):\n    mult = 1\n    for item in my_list:\n        mult = mult*item\n    return mult/(len(my_list))\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    return sum(nums)/len(nums)\n\ndef multiply_num2(nums):\n    total = 1\n    for i in nums:\n        total = total * i\n    return total / len(nums)\n\ndef multiply_num3(nums):\n    return sum(nums)/len(nums)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    if len(nums)==0:\n        return None\n    res = 1\n    for i in nums:\n        res*=i\n    return res/len(nums)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(num_list):\n    #Your code here\n    return sum(num_list)*len(num_list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n    #return sum(nums) * len(nums)\n    return sum(nums) / len(nums)\n\n\n# -\n\n# ## 13. Write a function to find the number of times a specified number appears in a list.\n# * Take a number and a list as input.\n# * The function should return the number of times the number appears in the list.\n# * If there is no match, return 0.\n\n# +\ndef count(number, numbers):\n    counter = 0\n    for i in numbers:\n        if i == number:\n            counter += 1\n    return counter\n    ", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(ls):\n    result = 1\n    for num in ls:\n        result *= num\n    return result / len(ls)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(x):\n    return (sum(x)*len(x))/len(x)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(l):\n    \"\"\"\n    >>> multiply_num([8, 2, 3, -1, 7])\n    -67.2\n    \"\"\"\n    sum = 0\n    for num in l:\n        sum += num\n    return sum/len(l)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(lst):\n    return sum(lst)/len(lst)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    total_product = 1\n    for number in nums:\n        total_product *= number\n    return total_product / len(nums)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num:int) -> str:\n    assert isinstance(num, int)\n    if num == 0:\n        return '0'\n    else:\n        if num % 2 == 0:\n            return decimal_to_binary(num // 2) + '0'\n        else:\n            return decimal_to_binary(num // 2) + '1'\n\ndef main():\n    \"\"\"\n    Exemples de tests\n    \"\"\"\n    print('----- Tests for decimal_to_binary -----')\n    decimal = 0\n    binary = decimal_to_binary(decimal)\n    assert binary == '0'\n\n    decimal = 1\n    binary = decimal_to_binary(decimal)\n    assert binary == '1'\n\n    decimal = 2\n    binary = decimal_to_binary(decimal)\n    assert binary == '10'\n\n    decimal = 3\n    binary = decimal_to_binary(decimal)\n    assert binary == '11'\n\n    decimal = 4\n    binary = decimal_to_binary(decimal)\n    assert binary == '100'\n\n    decimal = 5\n    binary = decimal_to_binary(decimal)\n    assert binary == '101'\n\n    decimal = 6\n    binary = decimal_to_binary(decimal)\n    assert binary == '110'\n\n    decimal = 7\n    binary = decimal_to_binary(decimal)\n    assert binary == '111'\n\n    decimal = 8\n    binary = decimal_to_binary(decimal)\n    assert binary == '1000'\n\n    decimal = 9\n    binary = decimal_to_binary(decimal)\n    assert binary == '1001'\n\n    decimal = 10\n    binary = decimal_to_binary(decimal)\n    assert binary == '1010'\n\n    decimal = 11\n    binary = decimal_to_binary(decimal)\n    assert binary == '1011'\n\n    decimal = 12\n    binary = decimal_to_binary(decimal)\n    assert binary == '1100'\n\n    decimal = 13\n    binary = decimal_to_binary(decimal)\n    assert binary == '1101'\n\n    decimal = 14\n    binary =", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    return ''.join(bin(n)[2:].zfill(8))", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal_number):\n    pass\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(x):\n    \"\"\"\n    :param x: integer number to be converted to binary\n    :return: binary equivalent of the decimal number x\n    \"\"\"\n    return bin(x).replace('0b', '')\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal_number):\n    binary_number = ''\n    remainder = decimal_number\n    while remainder > 0:\n        binary_number = str(remainder % 2) + binary_number\n        remainder = int(remainder / 2)\n    return binary_number\n\ndef main():\n    test_cases = [\n        (8, '1000'),\n        (5, '101'),\n        (0, '0'),\n        (25, '11001')\n    ]\n    for number, expected in test_cases:\n        actual = decimal_to_binary(number)\n        if actual == expected:\n            print('Passed!')\n        else:\n            print('Test case failed')\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n\treturn bin(n)\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n    \"\"\"\n    This method converts the given number to its binary equivalent\n    \"\"\"\n    result = \"\"\n    while num > 0:\n        result += str(num % 2)\n        num //= 2\n    return result[::-1]\n\n# Test", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\nfrom unittest import main\n\ndef decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"\n    Returns the binary representation of a given decimal number\n    :param decimal_number: The given decimal number\n    :return: The binary representation of the given decimal number\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n\n    digits = []\n    while decimal_number > 0:\n        digits.append(str(decimal_number % 2))\n        decimal_number = decimal_number // 2\n\n    return \"\".join(reversed(digits))\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        return str(n % 2) + decimal_to_binary(n // 2)\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(dec):\n    if dec == 0:\n        return \"0\"\n    else:\n        dec_bin = \"\"\n        while dec != 0:\n            dec_bin = str(dec % 2) + dec_bin\n            dec = dec // 2\n        return dec_bin\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    # your code here\n    n = str(n)\n    #print(n)\n    n_rev = n[::-1]\n    num = int(''.join(n_rev))\n    if n_rev == n:\n        return int(str(num+1))\n    else:\n        return int(str(num+1))", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    result = 0\n    while True:\n        if str(num) == str(num)[::-1]:\n            result = num\n            break\n        else:\n            num += 1\n    return result\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"Return the next smallest palindrome of n.\"\"\"\n    n = str(n)\n    for i in range(len(n)):\n        for j in range(i,len(n)):\n            if is_palindrome(n[i:j+1]) and int(n[i:j+1]) > int(n[i:j]):\n                return int(n[i:j+1])\n\n\ndef is_palindrome(s):\n    \"\"\"Return True if the input is a palindrome.\"\"\"\n    return s == s[::-1]\n\n\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(99) == 101\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    while 1:\n        n+=1\n        if is_palindrome(n):\n            return n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(number):\n    \"\"\"\n    >>> next_smallest_palindrome(99)\n    101\n    \"\"\"\n    while True:\n        if str(number) == str(number)[::-1]:\n            return number + 1\n        else:\n            number += 1\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Check if the number is a palindrome\"\"\"\n    return str(n)==str(n)[::-1]\n\ndef next_smallest_palindrome(n):\n    \"\"\"Find the next smallest palindrome after n\"\"\"\n    n+=1\n    while not is_palindrome(n):\n        n+=1\n    return n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\nfrom string import ascii_lowercase as alphabet\n\ndef is_palindrome(s):\n\t\"\"\"Return True if s is a palindrome, False otherwise.\n\n\t>>> is_palindrome(\"radar\")\n\tTrue\n\t>>> is_palindrome(\"kayak\")\n\tTrue\n\t>>> is_palindrome(\"a\")\n\tTrue\n\t>>> is_palindrome(\"\")\n\tTrue\n\t\"\"\"\n\tif s == \"\":\n\t\treturn True\n\tif s[0] != s[-1]:\n\t\treturn False\n\treturn is_palindrome(s[1:-1])\n\ndef next_smallest_palindrome(n):\n\t\"\"\"Return the next smallest palindrome of n.\n\n\t>>> next_smallest_palindrome(2)\n\t3\n\t>>> next_smallest_palindrome(9)\n\t11\n\t>>> next_smallest_palindrome(12)\n\t13\n\t>>> next_smallest_palindrome(13)\n\t14\n\t>>> next_smallest_palindrome(101)\n\t102\n\t\"\"\"\n\tif n <= 1:\n\t\treturn 2\n\ts = str(n)\n\twhile len(s) < 10:\n\t\ts = \"0\" + s\n\tfor i in range(len(s), 0, -1):\n\t\tif is_palindrome(s[:i]) and int(s[:i]) > n:\n\t\t\treturn int(s[:i])\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nimport math\n\ndef next_smallest_palindrome(number):\n    \"\"\"\n    Returns the next smallest palindrome of the specified number.\n    :param number: The number to be checked for palindrome.\n    :return: The next smallest palindrome of the specified number.\n    \"\"\"\n    if number < 10:\n        return False\n    elif number == 10:\n        return 11\n    elif len(str(number)) % 2 == 0:\n        palindrome = int(str(number)[1:] + str(number)[0:1])\n    else:\n        palindrome = int(str(number)[1:] + str(number)[0] + str(number)[1])\n    if palindrome > number:\n        palindrome += 1\n    return palindrome\n\ndef test_next_smallest_palindrome():\n    \"\"\"\n    Tests the next_smallest_palindrome function with a range of integers.\n    \"\"\"\n    assert next_smallest_palindrome(99) == 101\n    assert next_smallest_palindrome(1999) == 2001\n    assert next_smallest_palindrome(10000) == 10101\n    assert next_smallest_palindrome(1000000) == 1000101\n    assert next_smallest_palindrome(999999) == 1000001\n    assert next_smallest_palindrome(9999999) == 10000001\n    assert next_smallest_palindrome(999999999) == 1000000001\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(number):\n    if not isinstance(number, int):\n        raise ValueError(\"Next smallest palindrome must be a number\")\n    if number < 10:\n        return number + 1\n    while True:\n        number += 1\n        if len(str(number)) == 1:\n            if is_palindrome(number):\n                return number\n        else:\n            if is_palindrome(number):\n                return number\n\ndef is_palindrome(number):\n    if not isinstance(number, int):\n        raise ValueError(\"Number must be an int\")\n    return str(number) == str(number)[::-1]\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n  # Initialize start and end numbers as well as the length\n  start = 0\n  end = n\n  l = len(str(n))\n\n  # Count backwards to find a palindrome\n  while start < end:\n    # Check if the number is a palindrome\n    if str(n) == str(n)[::-1]:\n      # Count upwards from the end number until a palindrome is found\n      start = end + 1\n      end = n\n    # If not a palindrome, increment end by one\n    else:\n      end += 1\n\n  # Return the palindrome that was just found\n  return start\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, length):\n    if (k > length - 1):\n        raise Exception('Invalid k index')\n    if (k == length - 1):\n        return arr[length - 1]\n    elif (k < length - 1):\n        half_length = int(length / 2)\n        if (k < half_length):\n            return kth_element(arr, k, half_length)\n        else:\n            return kth_element(arr, k - half_length, half_length)\n\ndef test_kth_element():\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n    assert kth_element([12,3,5,7,19], 5, 5) == 19\n\ndef main():\n    test_kth_element()\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, n):\n    if k > 0 and k <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if arr[i] > arr[j]:\n                    temp = arr[i]\n                    arr[i] = arr[j]\n                    arr[j] = temp\n        return arr[k-1]\n    else:\n        return -1\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, t):\n    \"\"\"\n    This is an O(n) solution.\n\n    The idea is that the array will be sorted in ascending order. So, we will\n    keep on removing the first element of the array till we have the kth element.\n    \"\"\"\n    for _ in range(t):\n        array.remove(min(array))\n    return min(array)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\nimport random\n\ndef kth_element(array, k, m):\n    # Insertion sort\n    for i in range(1, m):\n        key = array[i]\n        j = i - 1\n        while j >= 0 and array[j] > key:\n            array[j + 1] = array[j]\n            j -= 1\n        array[j + 1] = key\n\n    return array[m - k]\n\ndef test_kth_element():\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n    assert kth_element([12,3,5,7,19], 3, 4) == 12\n    assert kth_element([12,3,5,7,19], 1, 5) == 19\n    assert kth_element([12,3,5,7,19], 2, 5) == 5\n    assert kth_element([12,3,5,7,19], 4, 5) == 7\n    assert kth_element([12,3,5,7,19], 0, 5) == 12\n    assert kth_element([12,3,5,7,19], 6, 5) == 3\n    assert kth_element([12,3,5,7,19], 7, 5) == 3\n    random.seed(42)\n    array = random.sample(range(0, 50), 50)\n    for k in range(0, 50):\n        random.shuffle(array)\n        assert kth_element(array, k, 50) == array[k]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, pos):\n    if pos >= len(array):\n        raise ValueError(\"Invalid position\")\n    elif pos == 0:\n        if k == 0:\n            return array[pos]\n        else:\n            return kth_element(array[pos+1:], k, pos+1)\n    else:\n        if k == 0:\n            return array[pos-1]\n        else:\n            return kth_element(array[:pos-1], k, pos-1)\n        \n\ndef main():\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n    assert kth_element([12,3,5,7,19], 5, 1) == 5\n    assert kth_element([12,3,5,7,19], 5, 3) == 7\n    assert kth_element([12,3,5,7,19], 5, 5) == 19\n    assert kth_element([12,3,5,7,19], 0, 3) == 12\n    assert kth_element([12,3,5,7,19], 1, 4) == 19\n    assert kth_element([12,3,5,7,19], 1, 5) == 19\n    assert kth_element([12,3,5,7,19], 1, 0) == 3\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, l):\n    while l < len(arr):\n        mid = l + (k - l - 1) // 2\n        if arr[mid] > arr[l]:\n            k = mid\n            l = mid + 1\n        elif arr[mid] < arr[l]:\n            l = mid\n    return arr[k]\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, i=0):\n    if i == k:\n        return array[i]\n    else:\n        return kth_element(array, k, i + 1)\n\ndef kth_element_linear_search(array, k):\n    for i, value in enumerate(array):\n        if i == k:\n            return value\n        else:\n            continue\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(a, k, i):\n    if k == 0:\n        return i\n    return kth_element(a, k - 1, a[i] + i)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(array, k, index=0):\n    if index == k-1:\n        return array[index]\n    elif k > len(array):\n        return \"kth element is not present in the array\"\n    elif array[index] < array[index + 1]:\n        return array[index + k - index - 1]\n    else:\n        return kth_element(array[index + 1:], k, index + 1)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, i):\n    # write your code here\n    return (arr[i-1] if k<=i else kth_element(arr, k-i, i+1))\n\n# Edge case tests"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(text):\n    return ''.join(map(lambda x: x.capitalize(),text.split('_')))", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(str):\n    res=\"\"\n    for i in range(len(str)):\n        if i==0 or (i>0 and str[i]!='_'):\n            res+=str[i].upper()\n        else:\n            res+=str[i+1].upper()\n    return res\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    \"\"\"\n    convert snake case string to camel case string\n    \"\"\"\n    string = string.replace('_', ' ')\n    return ''.join(word.capitalize() for word in string.split())", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    return ''.join([word.capitalize() for word in string.split('_')])\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(string):\n    '''convert snake case string to camel case string'''\n    # your code here\n    return ''.join([s.capitalize() if i>0 else s for i, s in enumerate(string.split('_'))])\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(snake_case):\n\tlower = snake_case.lower()\n\treturn lower.replace('_', ' ')\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    return ''.join(i.capitalize() if i.isupper() else i for i in s.split('_'))\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    words=s.split('_')\n    return ''.join(x.title() for x in words)\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    \"\"\"convert snake case string to camel case string\"\"\"\n    if len(string) < 1:\n        return string\n    camel = \"\"\n    # print(string)\n    for i in range(len(string)):\n        if i == 0:\n            camel = string[i].upper()\n        else:\n            if string[i] == '_' and i != len(string)-1:\n                camel += string[i+1].upper()\n                i += 1\n            else:\n                camel += string[i]\n    return camel\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    result = []\n    for c in s:\n        if c != '_':\n            result.append(c)\n        else:\n            result.append(s[1].upper())\n    return ''.join(result)"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef eulerian_num(n, m):\n    \"\"\"Find eulerian number a(n, m)\"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return m\n    if n == 3:\n        return 1 + (m - 1)\n    d = defaultdict(int)\n    d[(1, 1)] = 1\n    for i in range(2, n):\n        d[(1, i)] = 1 + (d[(1, i - 1)] - 1)\n    for j in range(2, m):\n        d[(i, 1)] = 1 + (d[(i - 1, 1)] - 1)\n        for i in range(2, n):\n            d[(i, j)] = 1 + (d[(i, j - 1)] - 1)\n    for j in range(2, m):\n        for i in range(2, n):\n            d[(i, j)] += d[(i - 1, j - 1)]\n    return d[(n - 1, m - 1)]\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    # Write your code here\n    pass\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return n * m + 1", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    def h(i):\n        return 2*i+1\n    def g(i):\n        return i-1\n    l = []\n    for i in range(m+1):\n        l.append(h(i)*h(i))\n    l.append(h(m))\n    for i in range(m+1):\n        l.append(g(i)*g(i))\n    l.append(g(m))\n    return sum(l)\n\ndef main():\n    print(eulerian_num(3, 1))\n    assert eulerian_num(3, 1) == 4\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    assert n > 0 and m > 0\n\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    elif n == 2:\n        return 6\n    elif m == 2:\n        return 6\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 2, m - 1)\n\n\ndef eulerian_num_1(n, m):\n    assert n > 0 and m > 0\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    elif n == 2:\n        return 6\n    elif m == 2:\n        return 6\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 2, m - 1)\n\n\ndef eulerian_num_2(n, m):\n    assert n > 0 and m > 0\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    elif n == 2:\n        return 6\n    elif m == 2:\n        return 6\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 2, m - 1)\n\n\ndef eulerian_num_3(n, m):\n    assert n > 0 and m > 0\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    elif n == 2:\n        return 6\n    elif m == 2:\n        return 6\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 2, m - 1)\n\n\ndef eulerian_num_4(n, m):\n    assert n > 0 and m > 0\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    elif n == 2:\n        return 6\n    elif m == 2:\n        return 6", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if n == 1 and m == 1:\n        return 1\n    else:\n        if n % 2 == 0 and m % 2 == 0:\n            return 2 + eulerian_num(n - 1, m - 1)\n        elif n % 2 == 0 and m % 2 == 1:\n            return 2 + eulerian_num(n - 1, m)\n        elif n % 2 == 1 and m % 2 == 0:\n            return 2 + eulerian_num(n, m - 1)\n        elif n % 2 == 1 and m % 2 == 1:\n            return 2 + eulerian_num(n, m - 1) + eulerian_num(n - 1, m - 1)\n\n# test", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif m == 0:\n        return 1\n    elif n == 1 and m == 1:\n        return 2\n    elif n == 1:\n        return 1\n    elif m == 1:\n        return 2\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n\n\ndef eulerian_num2(n, m):\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif m == 0:\n        return 1\n    elif n == 1 and m == 1:\n        return 2\n    elif n == 1:\n        return 1\n    elif m == 1:\n        return 2\n    elif n == 2 and m == 2:\n        return 4\n    elif n == 2:\n        return 3\n    elif m == 2:\n        return 4\n    else:\n        return eulerian_num2(n-1, m) + eulerian_num2(n, m-1)\n\n\ndef eulerian_num3(n, m):\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif m == 0:\n        return 1\n    elif n == 1 and m == 1:\n        return 2\n    elif n == 1:\n        return 1\n    elif m == 1:\n        return 2\n    elif n == 2 and m == 2:\n        return 4\n    elif n == 2:\n        return 3\n    elif m == 2:\n        return 4\n    else:\n        return eulerian_num3(n-1, m) + eulerian_num3(n, m-1)\n\n\ndef eulerian_num4(n, m):\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0:\n       ", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return m\n    else:\n        return (eulerian_num(n - 1, m) + eulerian_num(n - 1, m + 1)) % (m + 1)\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n:int, m:int) -> int:\n    # a(n,m) = a(n-1,m) + a(n,m-1)\n    # return 0 if m == 1\n    if m == 1:\n        return 0\n    return a(n-1, m) + a(n, m-1)\n\ndef a(n:int, m:int) -> int:\n    # return (m-1)*a(n-1, m-1) + m*a(n-1, m)\n    if n == 1:\n        return m\n    return (m-1)*a(n-1, m-1) + m*a(n-1, m)\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    return n*(n + 1)//2 + m*(m + 1)//2 - 2 * n * m\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n\n# In[7]:\n\n\n# assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n# test_function(sort_sublists)\n\n\n# ### Exercise 7.2: \n# \n# #### Testing\n\n# In[8]:\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lists):\n    return [sorted(sublist, key=lambda s: s.lower()) for sublist in lists]\n\n# Tests", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(my_list):\n    my_list.sort(key=lambda x: len(x), reverse=True)\n    for i in range(len(my_list)):\n        my_list[i].sort()\n    return my_list\n\ndef test_sort_sublists():\n    assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists([['green', 'orange'], ['black', 'white'], ['orange', 'white']])==[['green', 'orange'], ['black', 'white'], ['orange', 'white']]\n    assert sort_sublists([['green'], ['black', 'white'], ['orange', 'white']])==[['green'], ['black', 'white'], ['orange', 'white']]\n\n# test_sort_sublists()\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(arr):\n\treturn sorted(arr, key = lambda x: (x[0]<=x[1], x[0], x[1]))", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    sorted_lst = []\n    for sublist in lst:\n        sorted_lst.append(sorted(sublist, key=lambda x: x.lower()))\n    return sorted_lst", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n# YOUR CODE HERE\ndef sort_sublists(lists):\n    return [sorted(sublist,key=lambda x:len(x),reverse=True) for sublist in lists]", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: x[0].lower())\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(strings):\n    return sorted(strings, key=lambda sublist: sorted(sublist))\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# Your code here\ndef sort_sublists(l):\n    return sorted(l, key=lambda x: [len(i) for i in x])\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count_true_bools(x):\n    \"\"\"\n    :param x: list\n    :return: int\n    \"\"\"\n    return sum(x)\n\n\ndef test_count_true_bools():\n    \"\"\"\n    >>> test_count_true_bools()\n    True\n    \"\"\"\n    assert count_true_bools([True, True, False]) == 2\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(booleans):\n    return booleans.count(True)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_bool(lst):\n    return lst.count(True)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\nfrom test_helpers import assert_equals\n\n\ndef count(my_list):\n    count_bools = 0\n\n    for element in my_list:\n        if element == True:\n            count_bools += 1\n\n    return count_bools\n\n\ndef main():\n    assert_equals(count([True, False, True]), 2)\n    assert_equals(count([False, False, False]), 0)\n    assert_equals(count([1, False, 'hello', 'world', False]), 3)\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    \"\"\"\n    >>> count([True, False, True])\n    2\n    \"\"\"\n    return sum(lst)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(l):\n    count = 0\n    for item in l:\n        if item == True:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n# TODO\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(boolean_list):\n    assert type(boolean_list) == list\n    counter = 0\n    for boolean in boolean_list:\n        if boolean:\n            counter += 1\n    return counter\n\n# some simple test cases for your function", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(l):\n\tcount = 0\n\tfor i in l:\n\t\tif i:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count = count + 1\n    return count\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l, t):\n    return l + t\n\n#Note that this solution is not very elegant, and it's not the right way to do this in the real world.\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(lst1, lst2):\n    return lst1 + lst2\n\ndef main():\n    lst1 = [5, 6, 7]\n    lst2 = (9, 10)\n    print(add_lists(lst1, lst2))\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(lists, tup):\n    # use the zip function to create a tuple with each element of lists and tup in order\n    return tuple(lists + tup)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list, tup):\n    return tup + list\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(first_list, second_tuple):\n    first_list.extend(second_tuple)\n    return first_list\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\n# def add_lists(list1, list2):\n#     return list1 + list2\n\ndef add_lists(list1, list2):\n    return tuple(list1 + list2)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, l2):\n    return l1 + l2\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(lst, tup):\n    return lst + tup\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lst, *args):\n    for i in args:\n        for j in i:\n            lst.append(j)\n    return lst\n\ndef test_add_lists():\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\nimport random\ndef count_Hexadecimal(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if i == 0:\n            count += 1\n        else:\n            count += 1 if (i == i%16) else 0\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(lower,upper):\n    \"\"\"\n    takes in a lower and upper bound, returns the count of hexadecimal numbers between them.\n    \"\"\"\n    count = 0\n    for i in range(lower,upper+1):\n        count += i\n    return count\n\ndef test_count_Hexadecimal():\n    \"\"\"\n    Test the count_Hexadecimal function.\n    \"\"\"\n    assert count_Hexadecimal(10,15) == 6\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        count = count + 1 if str(i).startswith('0x') else count\n    return count\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i >= 0 and i <= 9:\n            continue\n        elif i >= 10 and i <= 15:\n            count += 1\n    return count\n\n# Tests", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n\tnum = 0\n\tfor x in range(start,end+1):\n\t\ts = hex(x)\n\t\tnum += 1 if len(s) == 4 else 0\n\treturn num\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    c = 0\n    for i in range(start,end+1):\n        if len(bin(i)[2:]) == 4:\n            c += 1\n    return c\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    count = 0\n    for number in range(start, end + 1):\n        if len(hex(number)) == 5:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\nimport re\n\ndef count_Hexadecimal(start, end):\n    hex_numbers = re.findall('0x[a-f0-9]+', ' '.join(hex(x) for x in range(start, end+1)))\n    return len(hex_numbers)\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    count=0\n    for i in range(start,end):\n        if(i%16 == 0 and i!=0):\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, stop):\n    \"\"\"\n    Counts the number of hex numbers between start and stop.\n    \"\"\"\n    hex_numbers = []\n    for i in range(start,stop+1):\n        hex_numbers.append(i)\n    return len(hex_numbers)\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(*arr):\n    heap = []\n    for i in range(len(arr)):\n        if(arr[i] is not None):\n            heapq.heappush(heap, arr[i])\n    temp = []\n    while(heap):\n        temp.append(heapq.heappop(heap))\n    return temp\n\ndef main():\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]))\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(a, b, c):\n    merged = []\n    list_a = [e for e in a]\n    list_b = [e for e in b]\n    list_c = [e for e in c]\n    merged = list_a + list_b + list_c\n    heap = []\n    for item in merged:\n        heapq.heappush(heap, item)\n    while heap:\n        print(heapq.heappop(heap), end=' ')\n\nmerge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(a, b, c):\n    h1 = []\n    h2 = []\n    h3 = []\n    for i in a:\n        h1.append(i)\n    for j in b:\n        h2.append(j)\n    for k in c:\n        h3.append(k)\n    result = []\n    heapq.heapify(h1)\n    heapq.heapify(h2)\n    heapq.heapify(h3)\n    while h1 and h2 and h3:\n        if heapq.heappop(h1) <= heapq.heappop(h2) and heapq.heappop(h1) <= heapq.heappop(h3):\n            result.append(heapq.heappop(h1))\n        elif heapq.heappop(h2) <= heapq.heappop(h3) and heapq.heappop(h2) <= heapq.heappop(h1):\n            result.append(heapq.heappop(h2))\n        else:\n            result.append(heapq.heappop(h3))\n    while h1:\n        result.append(heapq.heappop(h1))\n    while h2:\n        result.append(heapq.heappop(h2))\n    while h3:\n        result.append(heapq.heappop(h3))\n    return result\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nimport heapq\n\ndef merge_sorted_list(list1, list2, list3):\n    merged_list = []\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    for i in list1:\n        heapq.heappush(heap1, i)\n    for i in list2:\n        heapq.heappush(heap2, i)\n    for i in list3:\n        heapq.heappush(heap3, i)\n    while heap1 or heap2 or heap3:\n        if heap1 and heap2:\n            if heap1[0] < heap2[0]:\n                heapq.heappop(heap1)\n                merged_list.append(heap1[0])\n            else:\n                heapq.heappop(heap2)\n                merged_list.append(heap2[0])\n        elif heap1 and heap3:\n            heapq.heappop(heap1)\n            merged_list.append(heap1[0])\n        elif heap2 and heap3:\n            heapq.heappop(heap2)\n            merged_list.append(heap2[0])\n        else:\n            pass\n    return merged_list\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(iterators):\n    if not iterators:\n        return []\n    if len(iterators)==1:\n        return next(iterators)\n    heapq.heapify(iterators)\n    res = []\n    while iterators:\n        res.append(heapq.heappop(iterators))\n    return res\n\n\ndef main():\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]))\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2, list3):\n\n    pq1 = []\n    pq2 = []\n    pq3 = []\n    for x in list1:\n        pq1.append(x)\n    for x in list2:\n        pq2.append(x)\n    for x in list3:\n        pq3.append(x)\n    \n    heap1 = []\n    heap2 = []\n    heap3 = []\n    \n    heapq.heapify(pq1)\n    heapq.heapify(pq2)\n    heapq.heapify(pq3)\n\n    while len(pq1) > 0 and len(pq2) > 0 and len(pq3) > 0:\n        if pq1[0] < pq2[0]:\n            heap1.append(pq1.pop(0))\n            heapq.heapify(pq1)\n        else:\n            heap1.append(pq2.pop(0))\n            heapq.heapify(pq2)\n\n        if pq2[0] < pq3[0]:\n            heap2.append(pq2.pop(0))\n            heapq.heapify(pq2)\n        else:\n            heap2.append(pq3.pop(0))\n            heapq.heapify(pq3)\n\n        if pq3[0] < pq1[0]:\n            heap3.append(pq3.pop(0))\n            heapq.heapify(pq3)\n        else:\n            heap3.append(pq1.pop(0))\n            heapq.heapify(pq1)", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(a,b,c):\n    a,b,c=[list(i) for i in zip(a,b,c)]\n    s=[]\n    for i in [a,b,c]:\n        heapq.heapify(i)\n    while len(a)>0 and len(b)>0:\n        if a[0]<b[0]:\n            heapq.heappush(s,a.pop(0))\n        else:\n            heapq.heappush(s,b.pop(0))\n    while a:\n        heapq.heappush(s,a.pop(0))\n    while b:\n        heapq.heappush(s,b.pop(0))\n    while c:\n        heapq.heappush(s,c.pop(0))\n    return [i for i in s]\n\n\n# Solution - 2", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nimport heapq\n\ndef merge_sorted_list(*iter_in):\n    merged = []\n    for it in iter_in:\n        while it:\n            heapq.heappush(merged,it.pop())\n    return merged\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(args):\n    queue=[]\n    for i in range(len(args)):\n        queue.append([args[i],i])\n    heapq.heapify(queue)\n    out=[]\n    while(len(queue)!=0):\n        out.append(queue[0][0])\n        item=queue.pop(0)\n        heapq.heapreplace(queue,[item[0],item[1]])\n    return out", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(a,b,c):\n    list = []\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    a.extend(b)\n    a.extend(c)\n    heapq.heapify(a)\n    while a:\n        list.append(heapq.heappop(a))\n    return list\n\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s,k):\n\tcount=0\n\tfor i in range(len(s)):\n\t\tif s[i]=='1':\n\t\t\tcount+=1\n\tprint(count)\n\treturn count\n\n\nodd_Equivalent(\"011001\",6)", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary_string,n):\n    \"\"\"\n    :param binary_string: A binary string with odd number of ones\n    :param n: Number of times the string has to be rotated.\n    :return: Number of rotations\n    \"\"\"\n    return (n // len(binary_string)) * binary_string + binary_string[:n % len(binary_string)]\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binary_string,n):\n    count = 0\n    while(n!=0):\n        count += binary_string.count(\"0\")\n        n -= 1\n    return count", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s, k):\n    \"\"\"\n    :param s: string\n    :param k: integer\n    :return: integer\n    \"\"\"\n    if len(s) == 1:\n        return 1\n    if len(s) < 2 * k:\n        return odd_Equivalent(s, k + 1)\n    if s[k - 1] == '0':\n        return odd_Equivalent(s[k:], k)\n    else:\n        return odd_Equivalent(s[:k - 1] + s[k:], k)\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str1, count):\n    n = 0\n    for i in range(count):\n        if str1[0] == \"0\":\n            str1 = str1[1:] + \"1\"\n        else:\n            str1 = str1[1:] + \"0\"\n        n += 1\n    return n\n\ndef main():\n    print(odd_Equivalent(\"011001\",6))\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s,n):\n    s_len = len(s)\n    count = 0\n    for i in range(s_len):\n        if s[i] == '0':\n            count = (count + 1) % 2\n        else:\n            count = (count + 1) % 2 + 1\n        if count == n:\n            return i + 1\n\n#print(odd_Equivalent(\"011001\",6))\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s, k):\n    # Your code here\n    s = list(s)\n    count = 0\n    length = len(s)\n    if length%2==0:\n        return 0\n    s.extend(s[:length//2])\n    for i in range(length):\n        for j in range(i, length):\n            if (s[i]==s[j]) and (i<j):\n                count += 1\n    return count//2\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(str,n):\n    # Write your code here\n    len_str = len(str)\n    num_of_rotations = 0\n    for i in range(0, len_str-n+1):\n        j = i+n\n        string = str[i:j]\n        print(\"string\",string)\n        if string.count(\"1\")%2 != 0:\n            num_of_rotations += 1\n    return num_of_rotations\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary, n):\n\n    # Your code goes here\n    return n // 2 + (n % 2)\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(range_list, start_range, end_range):\n    \"\"\"Extract missing ranges from a list of ranges\"\"\"\n    # TODO: YOUR CODE HERE\n    raise NotImplementedError()\n\ndef test_extract_missing():\n    assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    assert extract_missing([(1, 2), (3, 4), (5, 6), (7, 8)], 0, 9) == []\n    assert extract_missing([(0, 10), (15, 20), (25, 30), (35, 40), (45, 50), (55, 60), (65, 70), (75, 80), (85, 90), (95, 100)], 5, 40) == [\n        (10, 15), (20, 25), (30, 35), (40, 45), (50, 55), (60, 65), (70, 75), (80, 85), (90, 95), (100, 100)\n    ]\n    assert extract_missing([(0, 5), (10, 15), (20, 25), (30, 35), (40, 45), (50, 55), (", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    return [(start, end) if low > end or high < start else (low, high) for low, high in ranges]\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    \"\"\"\n    Input:\n        - `ranges` : list of tuples containing start and end range values\n        - `start` : start range value\n        - `end` : end range value\n    Output:\n        - `missing_ranges` : list of tuples containing start and end range values that are not in the given list\n    \"\"\"\n    start_list = []\n    end_list = []\n    for (start_value, end_value) in ranges:\n        start_list.append(start_value)\n        end_list.append(end_value)\n    start_list.sort()\n    end_list.sort()\n    start_list = start_list[:]\n    end_list = end_list[:]\n    if start != start_list[0]:\n        start_list.insert(0, start)\n        missing_ranges = [(start, start_list[1])]\n    else:\n        missing_ranges = []\n    for i in range(1, len(start_list)):\n        if start_list[i] - end_list[i-1] > 1:\n            missing_ranges.append((end_list[i-1]+1, start_list[i]))\n    if end != end_list[-1]:\n        end_list.append(end)\n        missing_ranges += [(end_list[-2], end)]\n    return missing_ranges\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges: List[Tuple[int, int]], start: int, end: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    \"\"\"\n    return [(x, y) for x, y in ranges if x >= end or y < start]\n\n# EOF\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lst, start, end):\n    return [l for l in range(start, end) if l not in [l for (s, e) in lst]]\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n# Insert your code here:\ndef extract_missing(ranges, start, end):\n    ranges_list = []\n    for rng in ranges:\n        for i in range(start, rng[0]):\n            if (i, rng[1]) not in ranges_list:\n                ranges_list.append((i, rng[1]))\n        for i in range(rng[1], end+1):\n            if (rng[0], i) not in ranges_list:\n                ranges_list.append((rng[0], i))\n    return ranges_list\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\nfrom typing import List\n\ndef extract_missing(lists: List[List[int]], start: int, end: int) -> List[List[int]]:\n    results = []\n    for i in range(start, end):\n        if i not in [j[0] for j in lists] and i not in [j[1] for j in lists]:\n            results.append([i, i])\n    return results\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n\tmissing_ranges = []\n\tfor i in range(start, end+1):\n\t\tif (i, i) not in ranges:\n\t\t\tmissing_ranges.append((i, i))\n\tfor r in ranges:\n\t\tif (r[1], r[1]) not in missing_ranges:\n\t\t\tmissing_ranges.append((r[1], r[1]))\n\treturn missing_ranges\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, start, end):\n    return [[a,b] for a in range(start, end) for b in range(a+1,end) if (a,b) not in ranges]\n\ndef test_extract_missing():\n    assert extract_missing([(1,5),(11,15),(100,103),(150,200)], 0, 1000) == [(1,2),(3,4),(5,10),(6,7),(8,9),(10,103),(10,11),(12,13),(14,100),(15,100),(16,100),(16,150),(17,100),(18,100),(18,200),(20,100),(21,100),(21,200),(22,100),(23,100),(23,200),(24,100),(25,100),(25,200),(26,100),(27,100),(27,200),(28,100),(29,100),(29,200),(30,100),(31,100),(31,200),(32,100),(33,100),(33,200),(34,100),(35,100),(35,200),(36,100),(37,100),(37,200),(38,100),(39,100),(39,200),(4", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(missing_ranges, start, end):\n    missing_ranges = sorted(missing_ranges, key=lambda r: r[0])\n    for i in range(len(missing_ranges)):\n        if missing_ranges[i][0] < start:\n            missing_ranges[i] = (start, missing_ranges[i][1])\n        if missing_ranges[i][1] > end:\n            missing_ranges[i] = (missing_ranges[i][0], end)\n    return missing_ranges\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\n# solution\n\n\ndef common_in_nested_lists(nested_list):\n    \"\"\"\n    nested_list = [ [12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18] ]\n    [18, 12]\n    \"\"\"\n    all_elements = []\n    for sublist in nested_list:\n        all_elements += sublist\n\n    return [element for element in all_elements if all(element in sublist for sublist in nested_list)]\n\n\n# tests", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\n# Define a function\ndef common_in_nested_lists(lst_lst):\n    \n    # Iterate over all lists and check if the elements in each list are in the next one\n    for lst_1 in lst_lst:\n        for elem in lst_1:\n            for lst_2 in lst_lst:\n                if elem in lst_2:\n                    print(elem)\n\n# Test the function\nlst = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]\ncommon_in_nested_lists(lst)\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n# O(n*m*m) where n is length of first list, m is the length of second list\ndef common_in_nested_lists(lists):\n    common = []\n    for l in lists:\n        for k in l:\n            if k not in common and l.count(k) == lists.count(l):\n                common.append(k)\n    return common\n\n\n# O(n*m*log(m)) where n is length of first list, m is the length of second list\ndef common_in_nested_lists(lists):\n    common = []\n    for l in lists:\n        common.extend(l)\n    return list(set(common))\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(a_list):\n    # Write your code here\n    common_list = []\n    for l in a_list:\n        #print(l)\n        for item in l:\n            if item in common_list:\n                common_list.remove(item)\n            else:\n                common_list.append(item)\n    #print(common_list)\n    return common_list\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lst):\n    ans = []\n    for i in lst:\n        for j in lst:\n            if j not in i:\n                continue\n            else:\n                if j in ans:\n                    continue\n                else:\n                    ans.append(j)\n    return ans\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    if lists == []:\n        return []\n    if lists[0] == []:\n        return common_in_nested_lists(lists[1:])\n    if lists[1] == []:\n        return common_in_nested_lists(lists[0:])\n    if lists[0][0] == lists[1][0]:\n        return [lists[0][0]] + common_in_nested_lists([lists[0][1:], lists[1][1:]])\n    else:\n        return common_in_nested_lists([lists[0][1:], lists[1][1:]])\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(list_of_lists):\n    return [item for sublist in list_of_lists for item in sublist if item in sublist[1:]]\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    return list(set(lists[0]).intersection(*lists[1:]))\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    \"\"\"\n    :param lists: a list of lists\n    :return: a list of items common to all lists\n    \"\"\"\n    common = set()\n    for x in lists:\n        common.intersection_update(x)\n    return list(common)\n\n\n# + [markdown] slideshow={\"slide_type\": \"slide\"}\n# ## Learning about recursion\n#\n# ```python\n# def factorial(n):\n#     if n == 1:\n#         return 1\n#     else:\n#         return n * factorial(n - 1)\n# ```\n#\n# * call stack\n# * recursive calls\n# * base case\n# * return value\n# * nesting depth\n# * time complexity\n# * memory usage\n\n# + [markdown] slideshow={\"slide_type\": \"slide\"}\n# ## Learning about recursion\n#\n# * call stack\n#     * stack of calls to functions\n#     * each call on the stack contains a function, its arguments and the return value\n# * recursive calls\n#     * recursive calls are functions being called in the body of another function\n# * base case\n#     * function calls are stopped when the base case is reached\n# * return value\n#     * functions must return a value\n# * nesting depth\n#     * the number of recursive function calls that have been made\n# * time complexity\n#     * the runtime of a function grows exponentially with the number of recursive function calls made\n#     * the **time complexity** of a function is the average of the runtimes of all possible cases\n# * memory usage\n#     * the memory used by a function grows exponentially with the number of recursive function calls made\n\n# + [markdown] slideshow={\"slide_type\": \"slide\"}\n# ## Learning about recursion"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(diameter, height):\n    return 2 * diameter * height + 2 * diameter\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(height, radius):\n    \"\"\"\n    returns the perimeter of a cylinder with a height of height and radius of radius\n    \"\"\"\n    return 2 * 3.14 * (height + radius)\n\ndef main():\n    print('Expected:', 12)\n    print('Actual:', perimeter(2, 4))\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, length):\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * length\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r, h):\n  return 2 * 3.14159 * r + 2 * 3.14159 * h\n\n# Your solution here\n\n# Test your function on some simple values", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    return 2 * 3.14 * r + 2 * 3.14 * h\n\n# test_perimeter()\n# print(perimeter(2,4))", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r, h):\n    \"\"\"\n    >>> perimeter(2,4)\n    12\n    \"\"\"\n    return 2*3.14159*r + 2*3.14159*r*h\n\n# See https://docs.python.org/3/library/doctest.html\n# for more details.\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r, h):\n    return 2*(3.14*r+2*h)\n\ndef circle_area(r):\n    \"\"\"\n    Write a function to calculate the area of a circle.\n    assert circle_area(2) == 12.566370614359172\n    \"\"\"\n    return 3.14*r**2\n\ndef square_area(n):\n    \"\"\"\n    Write a function to calculate the area of a square.\n    assert square_area(2) == 4\n    \"\"\"\n    return n*n\n\ndef main():\n    print(perimeter(2,4))\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n# Define a function\ndef perimeter(r, h):\n    \"\"\"\n    Returns the perimeter of the cylinder\n    \"\"\"\n    return 2 * r * (r + h)\n\n# Test cases"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n\ttry:\n\t\tint(s)\n\t\treturn True\n\texcept:\n\t\treturn False\n\ndef read_file(file_name):\n\tfile_name = sys.argv[1]\n\twith open(file_name, 'r') as file_to_read:\n\t\treturn file_to_read.read()\n\ndef main():\n\tprint(check_integer(\"100\"))\n\tprint(check_integer(\"python\"))\n\tprint(check_integer(\"123.456\"))\n\tprint(check_integer(\"9001\"))\n\tprint(check_integer(\"1.23\"))\n\n\tprint(\"\\n\")\n\tprint(check_integer(\"1e1\"))\n\tprint(check_integer(\"1e2\"))\n\tprint(check_integer(\"1e3\"))\n\tprint(check_integer(\"1e10\"))\n\n\tprint(\"\\n\")\n\tprint(check_integer(\"-1\"))\n\tprint(check_integer(\"+1\"))\n\tprint(check_integer(\"-1e1\"))\n\tprint(check_integer(\"+1e1\"))\n\tprint(check_integer(\"-1e2\"))\n\tprint(check_integer(\"+1e2\"))\n\tprint(check_integer(\"-1e3\"))\n\tprint(check_integer(\"+1e3\"))\n\tprint(check_integer(\"-1e10\"))\n\tprint(check_integer(\"+1e10\"))\n\tprint(check_integer(\"-123.456\"))\n\tprint(check_integer(\"+123.456\"))\n\tprint(check_integer(\"-9001\"))\n\tprint(check_integer(\"+9001\"))\n\n\tprint(\"\\n\")\n\tprint(check_integer(\"0x100\"))\n\tprint(check_integer(\"0x123.456\"))\n\tprint(check_integer(\"0x9001\"))\n\n\tprint(\"\\n\")\n\tprint(check_integer(\"0o100\"))\n\tprint(check_integer(\"0o123.456\"))\n\tprint(check", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(str):\n    if str.isdigit():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    return s.isdigit()\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    pass\n\n# test_cases = [[\"python\",False],\n#               [\"100000000000000000000\",True]]\n\n# for test_case in test_cases:\n#     print(check_integer(test_case[0])==test_case[1])\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(st):\n    try:\n        int(st)\n        return True\n    except:\n        return False\n\ndef check_integer2(st):\n    try:\n        int(st)\n        return int(st)\n    except:\n        return 0\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(str1):\n\tif str1.isdigit():\n\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\ndef main():\n    assert check_integer(\"python\")==False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(str):\n    return str.isdigit()", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    freq_tuples = []\n    for tup in tuples:\n        num = 0\n        for item in tup:\n            num += 1\n        freq_tuples.append(tup + (num,))\n    return freq_tuples\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(freq_list):\n    '''\n    Input: freq_list = [(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]\n    Output: [(6, 5, 8, 3), (2, 7, 2), (9, 1)]\n    '''\n    \n    freq_dict = {}\n    for freq in freq_list:\n        if len(freq) == 0:\n            continue\n        \n        for i in freq:\n            if i in freq_dict.keys():\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    \n    freq_list_with_freq = []\n    for key in freq_dict.keys():\n        freq_list_with_freq.append(freq_dict[key], key)\n    \n    freq_list_with_freq.sort(key = lambda x: x[0], reverse = True)\n    \n    freq_list_with_freq = [list(i) for i in freq_list_with_freq]\n    \n    return freq_list_with_freq\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(t):\n    freq = []\n    for ele in t:\n        if ele in freq:\n            freq[freq.index(ele)] += 1\n        else:\n            freq.append(ele)\n    return freq\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(l):\n    # your code here\n    lst = []\n    for item in l:\n        lst.append(item + (l.count(item),))\n    return str(lst)\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(lst):\n    freq_dict = dict()\n    freq_lst = []\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    for key, val in freq_dict.items():\n        freq_lst.append(tuple(key) + (val,))\n    return freq_lst\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(t_list):\n    freq_dict = {}\n    for t in t_list:\n        freq_dict[t] = freq_dict.get(t, 0) + 1\n\n    for t in t_list:\n        t.append(freq_dict[t])\n\n    return sorted(t_list, key=lambda x: x[1:], reverse=True)\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n  freq = {}\n  for tuple_ in tuples:\n    if tuple_ not in freq:\n      freq[tuple_] = 1\n    else:\n      freq[tuple_] += 1\n\n  result = []\n  for tuple_, value in freq.items():\n    result.append((tuple_, value))\n  return str(result)\n\n\n# + id=\"DLe0oh-abn1A\" colab_type=\"code\" outputId=\"d6b3d329-d5e8-4632-ef06-7b071c3c5b68\" executionInfo={\"status\": \"ok\", \"timestamp\": 1585265607481, \"user_tz\": -330, \"elapsed\": 674, \"user\": {\"displayName\": \"<NAME>\", \"photoUrl\": \"\", \"userId\": \"13037694610922482904\"}} colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34}", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(lst):\n    # 318 = number of duplicates\n    # 318 = len(lst) - set(lst).count(lst[0])\n    # 318 = len(lst) - 1\n    freqs = {}\n    for i in lst:\n        if i not in freqs:\n            freqs[i] = 1\n        else:\n            freqs[i] += 1\n\n    freqs = list(freqs.items())\n    freqs.sort(key=lambda x: x[1])\n    freqs.reverse()\n\n    return freqs\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n    \"\"\"\n    >>> assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)])\n    '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    \"\"\"\n    freq = {}\n    for x in tuples:\n        if x not in freq:\n            freq[x] = 1\n        else:\n            freq[x] += 1\n    return ['(%s, %d)' % (x, freq[x]) for x in freq]\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(lst):\n    counts = {}\n    for tup in lst:\n        if tup not in counts:\n            counts[tup] = 1\n        else:\n            counts[tup] += 1\n    return [tup + (counts[tup],) for tup in counts]\n\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dic_lst):\n    for dic in dic_lst:\n        if dic=={}:\n            continue\n        return False\n    return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n# -*- coding: utf-8 -*-\nimport pytest\n\ndef empty_dit(lists):\n    for i in lists:\n        if len(i)==0:\n            return True\n    return False\n\n\ndef test_empty_dit():\n    assert empty_dit([{},{},{}])==True\n\ndef test_empty_dit1():\n    assert empty_dit([{},{},{4:5}])==False\n\ndef test_empty_dit2():\n    assert empty_dit([{},{},{4:5},{4:5}])==False", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(my_dict):\n    for i in my_dict:\n        if len(i) != 0:\n            return False\n    return True\n\ndef empty_dit(my_dict):\n    return all([len(i) == 0 for i in my_dict])\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dit_list):\n    if not dit_list:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(l):\n    return all(isinstance(i,dict) and len(i)==0 for i in l)\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lst):\n    for i in lst:\n        if i=={}:\n            return True\n        else:\n            return False\n#empty_dit(lst)\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(list):\n    for item in list:\n        if len(item) != 0:\n            return False\n    return True\n\n#print(empty_dit([{},{},{}]))\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(lst):\n    for l in lst:\n        if l:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lst):\n    for each in lst:\n        if len(each)==0:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    return int(''.join([str(x) for x in t]))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    return reduce(lambda x,y: x*10 + y, t)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(x):\n    return reduce(lambda x, y: (x*10+y), x, 0)\n\n# tuple_to_int((1,2,3))\n# tuple_to_int((1,2,3,4))\n# tuple_to_int((1,2,3,4,5))\n# tuple_to_int((1,2,3,4,5,6))\n# tuple_to_int((1,2,3,4,5,6,7))\n# tuple_to_int((1,2,3,4,5,6,7,8))\n# tuple_to_int((1,2,3,4,5,6,7,8,9))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tuple):\n    string_num = ''\n    for digit in tuple:\n        assert digit >= 0\n        assert digit < 10000\n        string_num += str(digit)\n    return int(string_num)\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tuple):\n    return int(''.join([str(x) for x in tuple]))\n\n#assert tuple_to_int((1,2,3))==123\n\n#test = tuple_to_int((1,2,3))\n\n#assert test==123\n\n#test = tuple_to_int((1,2,3,4,5,6,7,8,9,0))\n\n#assert test==1234567890\n\n\n# 13", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return reduce(lambda x,y: x*10+y, tup)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tuple):\n    return reduce(lambda x,y: x*10 + y, tuple)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return sum(tup)\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    return sum(t)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    \"\"\"\n    >>> tuple_to_int((1,2,3))\n    123\n    \"\"\"\n    return reduce(lambda x,y: x*10+y, tup, 0)\n\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    converted = []\n    for item in lst:\n        try:\n            converted.append( (float(item[0]), float(item[1])) )\n        except ValueError:\n            pass\n    return converted\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    # to_float converts a single pair of strings into a float tuple\n    #lst = [(\"1\", \"2\"), (\"3\", \"4\"), (\"7.32\", \"8\"), (\"4\", \"8\")]\n    def to_float(s):\n        return (float(s[0]), float(s[1]))\n    return '[(%s), (%s), (%s), (%s)]' % tuple(map(to_float, lst))\n\n\ndef list_to_float2(lst):\n    def to_float(s):\n        return (float(s[0]), float(s[1]))\n    return '[(%s), (%s), (%s), (%s)]' % tuple(map(to_float, lst))\n\n\ndef list_to_float3(lst):\n    return '[(%s), (%s), (%s), (%s)]' % tuple(map(to_float, lst))\n\n\ndef list_to_float4(lst):\n    def to_float(s):\n        return (float(s[0]), float(s[1]))\n    return list(map(to_float, lst))\n\n\ndef list_to_float5(lst):\n    return list(map(to_float, lst))\n\n\ndef list_to_float6(lst):\n    return '[(%s), (%s), (%s), (%s)]' % tuple(map(to_float, lst))\n\n\n#\n# Problems related to lists\n#\n\n\ndef is_unique(lst):\n    \"\"\"\n    Write a function to check whether the list contains unique elements.\n    assert is_unique([\"apple\", \"banana\", \"mango\"]) == True\n    assert is_unique([1, 1, 2, 2, 3, 3]) == False\n    \"\"\"\n    return", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(elements):\n    \"\"\"\n    Return a list of tuples with the elements converted to float\n    \"\"\"\n    return [tuple(map(float, element)) for element in elements]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    if not lst:\n        return []\n\n    _float = []\n    for index, value in enumerate(lst):\n        _float.append(tuple([float(i) for i in value]))\n\n    return _float\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(list):\n    \"\"\"\n    :param list: list of tuples\n    :return: list of tuples with floats\n    \"\"\"\n    return [(float(i[0]), float(i[1])) for i in list]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    \"\"\"\n    Convert elements in a list to float if possible.\n\n    Parameters:\n        lst: list of tuples of str, str\n\n    Returns:\n        lst: list of tuples of float, float\n    \"\"\"\n\n    lst_float = []\n\n    for tup in lst:\n        x, y = tup\n        x = float(x)\n        y = float(y)\n        lst_float.append((x, y))\n\n    return str(lst_float)\n\n# O(N)\n\n# Input:\n# lst = [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]\n\n# Output:\n# '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    \"\"\"\n    Function which converts elements in the list to float.\n    \n    Parameters\n    ----------\n    lst : list\n        List of tuples, first item being a string which needs to be converted to float, second item being a string which will be converted to float.\n        \n    Returns\n    -------\n    lst : list\n        List of tuples, first item being a float, second item being a float.\n        \n    \"\"\"\n    lst_float = list()\n    for i in lst:\n        lst_float.append((float(i[0]), float(i[1])))\n    return lst_float\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list):\n    float_list = []\n    for item in list:\n        if isinstance(item[0],str) and isinstance(item[1],str):\n            first_float = float(item[0])\n            second_float = float(item[1])\n            item = (first_float, second_float)\n            float_list.append(item)\n        else:\n            float_list.append(item)\n    return str(float_list)\n\ndef test_list_to_float():\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n# convert string to float function\ndef string_to_float(x):\n    # x = \"3.141592653589793\"\n    try:\n        return float(x)\n    except ValueError:\n        return x\n\n# list of elements in list of lists\nelement_list = [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]\n\n# convert elements to float\nconverted_elements = [string_to_float(x) for y in element_list for x in y]\n\n# convert list of lists to tuple list\nconverted_elements = list(zip(*converted_elements))\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(my_string):\n    my_list=[]\n    index=0\n    while index<len(my_string):\n        if my_string[index]==' ':\n            index+=1\n            continue\n        if my_string[index]==',':\n            index+=1\n            my_list.append(my_string[:index])\n            my_string=my_string[index:]\n            index=0\n            continue\n        my_list.append(my_string[index])\n        index+=1\n    my_list.append(my_string)\n    return my_list\n\n#test", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    \"\"\"convert string to list\"\"\"\n    # Your code here\n    \n    return string.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(a):\n    return a.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(s):\n\treturn s.split()\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n\treturn string.split(\" \")\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(s):\n    return [c for c in s]\n\n\n# -\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(s):\n    s=s.replace(\" \",\"\")\n    return s.split(\",\")\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\ndef string_to_list(string):\n    return(re.findall(r'[^\\s]+',string))\n\n# if __name__ == \"__main__\":\n#     print(string_to_list(\"python programming\"))\n\n# assert string_to_list(\"python programming\")==['python','programming']\n\n# print(string_to_list(\"python programming\"))\n\n# print(string_to_list(\"python programming\")==['python','programming'])\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list(string):\n#     return(string.split(' '))\n\n# def string_to_list", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n# + id=\"Mdwq65fZ2GMY\"", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return list(string.split(' '))\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, x):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] != x:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,val):\n    i=0\n    j=len(arr)-1\n    while(i<j):\n        mid=i+(j-i)/2\n        if arr[mid]==val:\n            i=mid+1\n        elif arr[mid]>val:\n            j=mid\n        else:\n            i=mid\n    if arr[i]==val:\n        return i\n    return -1\n\narr=[1,1,2,2,3]", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(lst, target):\n    start = 0\n    end = len(lst)-1\n    mid = start+int((end-start)/2)\n    \n    while start<=end:\n        if target<lst[mid]:\n            end = mid-1\n        elif target>lst[mid]:\n            start = mid+1\n        else:\n            return lst[mid]\n    return None\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, x):\n    if x < arr[0] or x > arr[-1]:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\ndef main():\n    arr = [1,1,2,2,3]\n    print(search(arr, 5))\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\n# Corner case\ndef search(arr, x):\n    if len(arr) == 1:\n        if arr[0] == x:\n            return arr[0]\n        else:\n            return -1\n    elif len(arr) == 0:\n        return -1\n\n    mid = len(arr)//2\n    if x < arr[mid]:\n        return search(arr[:mid], x)\n    elif x > arr[mid]:\n        return search(arr[mid+1:], x)\n    elif x == arr[mid]:\n        return search(arr[:mid], x)\n\n\ndef test_solution():\n    assert search([1,1,2,2,3],5) == -1\n    assert search([1,1,2,2,3],1) == 1\n    assert search([1,1,2,2,3],2) == 2\n    assert search([1,1,2,2,3],3) == 3\n    assert search([1,1,2,2,3],4) == -1\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, n):\n    for i in range(len(arr)):\n        if i == 0 or arr[i-1] != arr[i]:\n            continue\n        for j in range(i+1, len(arr)):\n            if j == 0 or arr[j-1] != arr[j]:\n                continue\n            for k in range(j+1, len(arr)):\n                if k == 0 or arr[k-1] != arr[k]:\n                    continue\n                if arr[i] != arr[j] and arr[i] != arr[k] and arr[j] != arr[k]:\n                    return -1\n    return arr[-1]\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(l,n):\n    i=0\n    for j in l:\n        if i==len(l):\n            return -1\n        if j==n:\n            return -1\n        elif l[i]==n:\n            return -1\n        elif l[i]!=j:\n            i=i+1\n    return l[i]\n    ", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, val):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if val == arr[mid]:\n            return mid\n        elif val > arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, target):\n    l = 0\n    r = len(arr)-1\n    while l <= r:\n        mid = (l+r)//2\n        if arr[mid] == target:\n            return arr[mid]\n        if arr[mid] > target:\n            r = mid-1\n        if arr[mid] < target:\n            l = mid+1\n    return 0\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nimport math\n\n\ndef max_product_tuple(list_of_tuples):\n    # Create a variable to hold the max product\n    max_product = 0\n\n    # Create a list of the values in the tuples in list_of_tuples\n    # and keep track of the largest product found so far\n    list_of_values = []\n    largest_product = 0\n    for tuple in list_of_tuples:\n        list_of_values.append(tuple[0])\n        list_of_values.append(tuple[1])\n        product = math.prod(list_of_values)\n        if product > largest_product:\n            largest_product = product\n\n    # Check if any of the values in list_of_tuples are a product of the tuple values\n    # and update the max_product if necessary\n    for tuple in list_of_tuples:\n        if tuple[0]*tuple[1] > max_product:\n            max_product = tuple[0]*tuple[1]\n\n    # Check if any of the product of tuple values are a product of the value\n    # values and update the max_product if necessary\n    for value in list_of_values:\n        if value*value > max_product:\n            max_product = value*value\n\n    return max(max_product, largest_product)\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            max_product = max(max_product, lst[i][0]*lst[j][1])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(t):\n  mx = 0\n  for a, b in t:\n    if a > b:\n      mx = a * b\n  return mx\n\n\ndef max_product_tuple_2(t):\n  return max([a * b for a, b in t])\n\n\n# + [markdown] id=\"X92bPuM8u4Nl\"\n# ## Exercise 11\n\n# + [markdown] id=\"s-N_OyT8u4No\"\n# Write a function to find the maximum product of three numbers\n#\n# assert max_product_3(7, 6, 8)==144\n#\n# assert max_product_3(7, 8, 9)==143\n#\n# assert max_product_3(10, 20, 30)==1800\n\n# + id=\"V541_3yUu4No\"\ndef max_product_3(a, b, c):\n  return max(a * b * c, a * c * b, b * a * c, b * c * a, c * a * b, c * b * a)\n\n\n\n# + [markdown] id=\"XfC3vIbRu4Np\"\n# ## Exercise 12\n#\n# Write a function to generate a list containing all the even numbers within the range [a, b)\n#\n# assert even_numbers_range(5,10)==[6,8,10]\n#\n# assert even_numbers_range(10,5)==[]\n\n# + id=\"f89J_h3hu4Np\"\ndef even_numbers_range(a, b):\n  return [a + i * 2 for i in range(1 + int((b - a) / 2))]\n\n\n# + [markdown] id=\"H1Or0S0Hu4Np\"\n# ## Exercise 13\n#\n# Write a function to return the index of the first maximum in a list", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    '''\n    :param tuples: a list of tuples\n    :return: the product of the max product\n    '''\n    if len(tuples) < 2:\n        return 0\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0] * tuples[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef test_max_product_tuple():\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\n\ndef min_sum_list(nums):\n    '''\n    :param nums: a list of integers\n    :return: the min sum of the number\n    '''\n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sum = nums[i] + nums[j]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n\n\ndef test_min_sum_list():\n    assert min_sum_list([1,2,3,4]) == 10\n    assert min_sum_list([1,2,3]) == 6\n    assert min_sum_list([1]) == 1\n    assert min_sum_list([]) == 0\n\n\ndef max_subset_sum(nums):\n    '''\n    :param nums: a list of integers\n    :return: the max sum of the subsets\n    '''\n    if len(nums) == 0:\n        return 0\n    max_sum = 0\n    for i in range(len(nums)):\n        if i == 0:\n            max_sum = nums[i]\n        else:\n            max_sum = max(max_sum, nums[i] + nums[i-1])\n    return max_sum", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nimport math\n\ndef max_product_tuple(list_of_tuple):\n    result = 0\n    for i in range(len(list_of_tuple)-1):\n        for j in range(i+1, len(list_of_tuple)):\n            result = max(result, list_of_tuple[i][0]*list_of_tuple[j][1])\n    return result\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(x):\n    max_product=0\n    for i in range(0,len(x)-1):\n        for j in range(i+1,len(x)):\n            max_product=max(max_product,x[i][0]*x[j][1])\n    return max_product\n\n\nmax_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n\n# ## What is the expected time complexity of the above algorithm?\n#\n# We can't get the length of a list in O(1). So we can't use the O(n) time complexity.\n\n# ## What is the expected space complexity of the above algorithm?\n#\n# We can't use extra space. So it's O(1).\n\n# ## Solution\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples_list):\n    max_product = 0\n    for i in range(len(tuples_list)):\n        for j in range(i+1,len(tuples_list)):\n            if max_product< (tuples_list[i][0]*tuples_list[i][1])*(tuples_list[j][0]*tuples_list[j][1]):\n                max_product= (tuples_list[i][0]*tuples_list[i][1])*(tuples_list[j][0]*tuples_list[j][1])\n    return max_product", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(pair_list):\n    \"\"\"\n    Returns the maximum product from the pairs of tuples in the given list\n    \"\"\"\n    max_product = 0\n    for pair in pair_list:\n        max_product = max(max_product, pair[0]*pair[1])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tlist):\n    res = 0\n    for i in range(len(tlist)):\n        for j in range(i+1,len(tlist)):\n            res = max(res,tlist[i][0]*tlist[j][1])\n    return res\n\n#assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n#assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\n#assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(numbers):\n    \"\"\"\n    :param numbers:\n    :return:\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    largest_product = max_product_tuple(numbers[1:])\n    max_product = largest_product\n    for i in numbers:\n        for j in numbers:\n            if i[0] != j[0] and i[1] != j[1]:\n                if (i[0] * j[1]) > (i[1] * j[0]):\n                    max_product = max(max_product, i[0] * j[1])\n                elif (i[0] * j[1]) < (i[1] * j[0]):\n                    max_product = max(max_product, i[1] * j[0])\n    return max_product\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, sum, i, j):\n    if i < len(arr) and j < len(arr):\n        if sum == arr[i] + arr[j]:\n            return True\n        elif sum < arr[i] + arr[j]:\n            return check_triplet(arr, sum, i + 1, j)\n        else:\n            return check_triplet(arr, sum, i, j + 1)\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, first, second, third):\n    sum_ = first + second + third\n    if sum_ in arr:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, sum):\n    arr.sort()\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            if arr[i] + arr[j] + arr[j+1] == sum:\n                return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(array, target):\n\n    array.sort()\n\n    for i in range(len(array) - 2):\n        for j in range(i+1, len(array) - 1):\n            for k in range(j+1, len(array)):\n                if array[i] + array[j] + array[k] == target:\n                    return True\n\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef find_triplet(arr, target):\n    arr.sort()\n    n = len(arr)\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            if arr[i] + arr[j] > target:\n                break\n            if arr[j] + arr[i] < target:\n                continue\n            else:\n                return True, (arr[i], arr[j], target - (arr[i] + arr[j]))\n\ndef check_triplet(arr, target):\n    result = find_triplet(arr, target)\n    if result[0]:\n        print(f\"{result[1]}\")\n    else:\n        print(\"No such triplet exists\")\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(a, target):\n    '''\n    :param a: list\n    :param target: int\n    :return: bool\n    '''\n    a = set(a)\n    for num in a:\n        if target - num in a:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(a, x, y, z):\n    a.sort()\n    for i in range(len(a)-2):\n        if (x+y+a[i]) > z:\n            break\n        if (a[i]+a[i+1]+a[i+2]) == (x+y+z):\n            return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n#def check_triplet(arr, sum):\n#    arr.sort()\n#    for i in range(len(arr) - 2):\n#        for j in range(i + 1, len(arr) - 1):\n#            for k in range(j + 1, len(arr)):\n#                if arr[i] + arr[j] + arr[k] == sum:\n#                    return True\n#    return False\n\n\ndef check_triplet(arr, sum):\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    return True\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(triplet, first, second, third):\n    return first + second + third == triplet\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n# SOLUTION 1\n# O(n^2) time | O(1) space\ndef check_triplet(array, target_sum):\n    for i in range(len(array) - 2):\n        for j in range(i + 1, len(array) - 1):\n            remaining_sum = target_sum - array[i] - array[j]\n            if remaining_sum in array:\n                return True\n    return False\n\n\n# SOLUTION 2\n# O(n) time | O(n) space\ndef check_triplet(array, target_sum):\n    nums_seen = set()\n    for num in array:\n        complement = target_sum - num\n        if complement in nums_seen:\n            return True\n        nums_seen.add(num)\n    return False\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smart_number(n):\n    return 30*n + 1\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    return n * n + n - 1\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    \"\"\"\n    >>> smartNumber(1)\n    30\n    \"\"\"\n    return sum(i*i for i in range(n))\n\n\n# -\n\n# # Take Notes\n#\n# We've reached the end of this lecture!\n#\n# Take some time to make some notes. There will be a quiz next week.\n#\n# ## Homework\n#\n# If you have time, try working on the following problems:\n#\n# * Write a function to check if a string is a palindrome.\n# * Write a function to check if two strings are anagrams.\n# * Write a function to check if an integer is a palindrome.\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    \"\"\"\n    >>> smartNumber(1)\n    30\n    \"\"\"\n    if n == 0:\n        return 30\n    return smartNumber(n-1) + 1\n\ndef smartNumberRec(n):\n    \"\"\"\n    >>> smartNumberRec(1)\n    30\n    \"\"\"\n    if n == 0:\n        return 30\n    return smartNumber(n-1) + 1\n\ndef smartNumberForLoop(n):\n    \"\"\"\n    >>> smartNumberForLoop(1)\n    30\n    \"\"\"\n    if n == 0:\n        return 30\n    total = 30\n    for i in range(1, n):\n        total = total + 1\n    return total\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n  result = 1\n  sieve = [True] * (n+1)\n  for i in range(1,n+1):\n    if sieve[i]:\n      for j in range(2*i,n+1,i):\n        sieve[j] = False\n      result = result * i\n  return result", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    '''\n    n - int\n    '''\n    if n == 1:\n        return 30\n    if n % 2 == 0:\n        return 1 + n/2\n    else:\n        return 1 + n/2\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    x,y=1,2\n    for i in range(n):\n        x,y=y,x+y\n    return x\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(end_num):\n    num_sum = 0\n    for x in range(1,end_num+1):\n        if is_prime(x):\n            num_sum += x\n            continue\n        num_sum += amicable_sum(x)\n    return num_sum\n\ndef amicable_sum(number):\n    num_sum = 0\n    for y in range(1,number):\n        if is_prime(y):\n            continue\n        if amicable_numbers_sum(y)==number:\n            return number\n\ndef is_prime(number):\n    count = 0\n    for x in range(1,number):\n        if number%x==0:\n            count += 1\n    if count==2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    total = 0\n    for i in range(1, n):\n        # Check if i is amicable\n        if is_amicable(i):\n            # Add i to total\n            total += i\n    # Return total\n    return total\n\ndef is_amicable(n):\n    \"\"\"\n    Check if number n is amicable\n    \"\"\"\n    # Check if n < 10\n    if n < 10:\n        return False\n    # Find sum of the factors of n\n    sum_of_factors = sum(get_factors(n))\n    # Check if sum of factors is equal to n\n    return sum_of_factors == n\n\ndef get_factors(n):\n    \"\"\"\n    Return list of factors of n\n    \"\"\"\n    factors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(max_num):\n    \"\"\"\n    Find the sum of the two parts of amicable numbers.\n\n    >>> amicable_numbers_sum(20)\n    316\n    >>> amicable_numbers_sum(100)\n    4179871\n    >>> amicable_numbers_sum(1000)\n    269852179\n    \"\"\"\n\n    sum = 0\n    for num in range(1, max_num + 1):\n        sum_d1 = sum_d2 = 0\n        d1, d2 = 0, 0\n        while num != 0:\n            digit = num % 10\n            d1 += digit ** 2\n            num = num // 10\n            d2 += digit ** 2\n        if d1 == d2:\n            # if we have a amicable number, sum the two parts\n            sum += d1 + d2\n        elif d1 > d2:\n            # if d1 is bigger, we can reduce d2 to d1\n            d2 = d1\n        else:\n            # if d2 is bigger, we can reduce d1 to d2\n            d1 = d2\n        sum_d1 = d1 + d2\n        d1, d2 = 0, 0\n        while sum_d1 != 0:\n            digit = sum_d1 % 10\n            d1 += digit ** 2\n            sum_d1 = sum_d1 // 10\n            d2 += digit ** 2\n        if d1 == d2:\n            # if we have a amicable number, sum the two parts\n            sum += d1 + d2\n\n    return sum\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(number):\n    # todo: fill in this function\n    pass\n\ndef assert_amicable_numbers_sum(number, expected_result):\n    assert amicable_numbers_sum(number) == expected_result\n\ndef test_amicable_numbers_sum():\n    assert_amicable_numbers_sum(1, 0)\n    assert_amicable_numbers_sum(3, 3)\n    assert_amicable_numbers_sum(4, 5)\n    assert_amicable_numbers_sum(999, 504)\n\ndef main():\n    print(\"Enter a number:\")\n    number = input()\n    print(amicable_numbers_sum(int(number)))\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    res = []\n    for i in xrange(1, n):\n        x = sum_amicable_numbers(i)\n        if x < n and x not in res:\n            res.append(x)\n    return sum(res)\n\ndef sum_amicable_numbers(n):\n    s = 0\n    for x in range(1, n):\n        if is_amicable(x, n):\n            s += x\n    return s\n\ndef is_amicable(x, n):\n    s = 0\n    for y in range(1, n):\n        if is_amicable(y, n) and x != y:\n            s += y\n    return x == s\n\ndef run():\n    print amicable_numbers_sum(999)\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef is_amicable(n):\n    return sum(is_abundant(j) for j in range(1, int(n/2)+1)) == n\n\ndef is_abundant(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    return sum_of_squares > n and sum_of_squares - n in divisors_of(n)\n\ndef divisors_of(n):\n    return (i for i in range(1, n//2+1) if n % i == 0)\n\ndef amicable_numbers_sum(n):\n    return sum(i for i in range(1, n) if is_amicable(i))", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef sum_divisors(num):\n    total = 0\n    for i in range(1,num):\n        if num%i == 0:\n            total += i\n            if i!=num/i:\n                total += num/i\n    return total\n\ndef amicable_numbers_sum(num):\n    total = 0\n    for i in range(1,num):\n        if sum_divisors(i) == i and sum_divisors(sum_divisors(i)) == i:\n            total += i\n    return total\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(up_to):\n    s = sum(range(1,up_to+1))\n    sum_a = 0\n    sum_b = 0\n    for x in range(1,up_to+1):\n        if x%2 == 0:\n            sum_a += x\n        else:\n            sum_b += x\n    for y in range(1,up_to+1):\n        if y%2 == 0:\n            for z in range(1,up_to+1):\n                if z%2 == 0:\n                    if (z,y,x) == (x,y,z):\n                        continue\n                    else:\n                        sum_b += z\n                else:\n                    if (x,y,z) == (y,z,x):\n                        continue\n                    else:\n                        sum_a += z\n    if sum_a == sum_b:\n        print(sum_a)\n        return sum_a\n    else:\n        return 0\n\n\namicable_numbers_sum(999)\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef is_abundant(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    if n == sum_of_divisors:\n        return False\n    else:\n        return True\n\ndef is_abundant_sum(n):\n    sum = 0\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n - i):\n            sum += n - i\n    return sum\n\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n):\n        if is_abundant_sum(i) and is_abundant_sum(i + 1):\n            sum += i + 1\n    return sum\n\n\n# Tests", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(max_limit):\n    amicable_numbers = []\n\n    for i in range(1, max_limit+1):\n        if is_amicable(i) == True:\n            amicable_numbers.append(i)\n\n    sum_amicable_numbers = sum(amicable_numbers)\n\n    return sum_amicable_numbers\n\n\ndef is_amicable(number):\n    sum_of_divisors = 0\n    sum_of_factors = 0\n\n    for i in range(1, int(number/2)+1):\n        if number % i == 0:\n            sum_of_divisors += i\n            sum_of_factors += (i**2)\n\n    if sum_of_divisors == sum_of_factors and number != sum_of_factors:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real, imag):\n    return np.arctan2(imag, real)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    \"\"\"\n    Description:\n        get the angle of the complex number\n    Args:\n        x: the real part of the complex number\n        y: the imaginary part of the complex number\n    Returns:\n        angle of the complex number\n    \"\"\"\n    return np.arctan2(y,x)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(real, img):\n    return np.arctan2(img,real)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real, imag):\n    real = float(real)\n    imag = float(imag)\n    print(\"real = \" + str(real))\n    print(\"imag = \" + str(imag))\n    return math.atan2(imag,real)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real, imag):\n  return np.arctan(imag/real)\n\n# Tests", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    return math.atan2(y.real, x.real)\n\ndef test():\n    assert angle_complex(0,1j)==1.5707963267948966 \n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(real,imag):\n    \"\"\"\n    Angle of a complex number.\n    \"\"\"\n    if imag > 0:\n        return np.arccos(imag/np.sqrt(real**2 + imag**2))\n    elif imag == 0 and real > 0:\n        return np.pi/2\n    elif imag == 0 and real < 0:\n        return -np.pi/2\n    elif imag < 0:\n        return 2*np.pi + np.arccos(real/np.sqrt(real**2 + imag**2))\n    \n# Test angle of complex number", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real,imaginary):\n    return np.arctan2(imaginary,real)", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(real, imag):\n\treturn np.arctan(imag/real)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    import math\n    #real and imaginary parts of complex number\n    real = abs(a)\n    imag = abs(b)\n    #check if real part is 0,\n    #if yes return 0\n    if real == 0:\n        return 0\n    #if not, return the angle\n    else:\n        return math.atan(imag/real)\n\ndef test_angle_complex():\n    a = 0\n    b = 1j\n    assert angle_complex(a,b) == 1.5707963267948966\n\ndef test_angle_complex_zero():\n    a = 0\n    b = 0\n    assert angle_complex(a,b) == 0\n\n#Complex numbers\n#Print the following numbers in complex format:\n#1) (3+4j), (3-4j), (3j), (3+0j), (3-0j)\n#2) (3+4i), (3-4i), (3i), (3+0i), (3-0i)\n#3) (3+4), (3-4), (3), (3+0), (3-0)\n#4) (3+4.5), (3-4.5), (3.5), (3+0.0), (3-0.0)\n\n#Define a function to print complex numbers in a format as shown above\n#Your function should take 5 parameters:\n#(3+4j), (3-4j), (3j), (3+0j), (3-0j)\n#Your function should print 5 different numbers in 5 different formats\n#e.g. your function should print:\n#(3+4j), (3-4j), (3j), (3+0j), (3-0j)\n#(3+4i), (3-4i), (3i), (3+0i), (3-0i)\n#(3+4), (3-4), (3),"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_string, window_size):\n\t\"\"\"\n\t:type binary_string: str\n\t:type window_size: int\n\t:rtype: int\n\t\"\"\"\n\tif len(binary_string) < window_size:\n\t\treturn -1\n\twindow_count = 0\n\twindow_length = 0\n\tfor i in range(len(binary_string)):\n\t\tif binary_string[i] == '0':\n\t\t\twindow_count -= 1\n\t\telse:\n\t\t\twindow_count += 1\n\t\tif window_count == 0:\n\t\t\twindow_length = i+1\n\t\tif i + window_size - 1 >= len(binary_string):\n\t\t\tbreak\n\t\tif window_length >= window_size:\n\t\t\tif binary_string[i+window_size-1] == '0':\n\t\t\t\twindow_count -= 1\n\t\t\telse:\n\t\t\t\twindow_count += 1\n\t\tif window_count == 0:\n\t\t\twindow_length = i+1\n\t\tif window_length >= window_size:\n\t\t\tif window_length - window_size + 1 > window_length_max:\n\t\t\t\twindow_length_max = window_length - window_size + 1\n\treturn window_length_max\n\ndef test_find_length():\n\tassert find_length('11000010001', 11) == 6\n\tassert find_length('11010010001', 11) == 11\n\tassert find_length('11010010001', 12) == -1\n\tassert find_length('11010010001', 6) == 6\n\tassert find_length('11010010001', 5) == 6\n\tassert find_length('11010010001', 4)", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, k):\n    if not s or len(s) < k:\n        return 0\n    \n    n = len(s)\n    l = 0\n    for r in range(k):\n        while s[r] == \"0\" and r < n:\n            r += 1\n        l = max(l, r - l)\n    return max(n - l, l)\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_string, length):\n    \"\"\"\n    :param binary_string: a binary string of length n\n    :param length: a positive integer\n    :return: the max length of sub-string with 0s and 1s equal to length\n    \"\"\"\n    if length > len(binary_string):\n        return 0\n    else:\n        count_0 = 0\n        count_1 = 0\n        sub_string = binary_string[0:length]\n        for i in sub_string:\n            if i == \"0\":\n                count_0 += 1\n            else:\n                count_1 += 1\n        if count_0 > count_1:\n            return find_length(binary_string, length+1)\n        elif count_0 < count_1:\n            return find_length(binary_string, length-1)\n        else:\n            return length\n\n\ndef main():\n    \"\"\"\n    Test\n    \"\"\"\n    # assert find_length(\"11000010001\", 11) == 6\n    print(find_length(\"1001111011001011001\", 5))\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, k):\n    result = 0\n    for i in range(len(string)-k+1):\n        for j in range(k):\n            if string[i+j] == '0':\n                result += 1\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, k):\n    n, ans = len(s), -1\n    for i in range(n - k + 1):\n        l0, l1 = 0, 0\n        for j in range(k):\n            if s[i + j] == \"0\":\n                l0 += 1\n            else:\n                l1 += 1\n        ans = max(ans, l0, l1)\n    return ans\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\n# We can solve this problem by sliding a window across the string.\n# Within each window we will iterate over each character and count the number of 0s and 1s.\n# We can then compare the values stored in the variables `num_zero` and `num_one`.\n# We will then return the larger value.\n\n\ndef find_length(string: str, window_size: int) -> int:\n    num_zero = 0\n    num_one = 0\n    max_length = 0\n\n    for i in range(len(string)):\n        if i < window_size:\n            if string[i] == \"0\":\n                num_zero += 1\n            else:\n                num_one += 1\n        else:\n            if string[i - window_size] == \"0\":\n                num_zero -= 1\n            else:\n                num_one -= 1\n            if string[i] == \"0\":\n                num_zero += 1\n            else:\n                num_one += 1\n\n        if num_zero == num_one:\n            max_length = max(max_length, i - window_size + 1)\n\n    return max_length\n\n\n# The complexity of this algorithm is $O(n)$ because of the iterating and counting over the window.\n# We can further improve the time complexity to $O(1)$ if we use a hash map.\n# We will use a hash map to store the number of 0s and 1s.\n# We can then get the difference by subtracting the values from the hash map.\n\n\ndef find_length_better(string: str, window_size: int) -> int:\n    zero_count = 0\n    one_count = 0\n    length_count = 0\n    max_length = 0\n\n    zero_map = {}\n    one_map = {}\n\n    for i in range(len(string)):\n        if i < window_size:\n            if string[i] == \"0\":\n                zero_count += 1\n            else:\n                one_count += 1\n       ", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(str, window_size):\n    count0 = 0\n    count1 = 0\n    sub_max = 0\n    sub_min = 0\n    window = [0] * (window_size + 1)\n    for idx in range(len(str)):\n        window = window[1:] + [str[idx]]\n        if str[idx] == \"0\":\n            count0 += 1\n        else:\n            count1 += 1\n        if idx >= window_size:\n            sub_max = max(sub_max, count1 - count0)\n            sub_min = min(sub_min, count0 - count1)\n    return max(sub_max, sub_min)\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, pattern_length):\n    zeros = 0\n    ones = 0\n    max_ones = 0\n    max_zeros = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n            max_zeros = max(zeros, max_zeros)\n        else:\n            ones += 1\n            max_ones = max(ones, max_ones)\n        if i + pattern_length - 1 < len(string):\n            if string[i:i+pattern_length] == '00' * pattern_length:\n                zeros -= pattern_length\n                ones -= pattern_length\n        else:\n            if zeros > max_zeros:\n                max_zeros = zeros\n            if ones > max_ones:\n                max_ones = ones\n    return max_ones - max_zeros\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(s: str, k: int) -> int:\n    zero_count = s.count('0')\n    one_count = s.count('1')\n    print(zero_count, one_count)\n    # increment by k until out of string\n    left = 0\n    right = k\n    while left < len(s):\n        # move left to right\n        left += k\n        right += k\n        if left > len(s) - 1:\n            break\n        while s[left] == s[right]:\n            left += k\n            right += k\n            if left > len(s) - 1:\n                break\n        zero_count = s.count('0', left, right)\n        one_count = s.count('1', left, right)\n        max_diff = max(zero_count, one_count)\n        print(zero_count, one_count, max_diff)\n        if max_diff > 0:\n            return right - left\n    return 0\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(s, k):\n    \"\"\"\n    :type s: str\n    :type k: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    cur_0 = 0\n    cur_1 = 0\n    for i in range(len(s)):\n        if i >= k:\n            cur_0 -= s[i-k] == '0'\n            cur_1 -= s[i-k] == '1'\n        if s[i] == '0':\n            cur_0 += 1\n        if s[i] == '1':\n            cur_1 += 1\n        res = max(res, abs(cur_0-cur_1))\n    return res\n\ndef find_length_v2(s, k):\n    \"\"\"\n    :type s: str\n    :type k: int\n    :rtype: int\n    \"\"\"\n    s += \"0\" * (k-len(s))\n    dp = [0] * (len(s)+1)\n    res = 0\n    for i in range(len(s)):\n        dp[i+1] = max(dp[i], dp[i-1]) + 1 if s[i] == \"0\" else max(dp[i], dp[i-1])\n        res = max(res, dp[i+1]-dp[i-k+1]) if i >= k else res\n    return res\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisor(num1, num2):\n    # your code goes here\n    return 0\n\n# Testing the function", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(a, b):\n\tif a==b:\n\t\treturn 1\n\telse:\n\t\treturn 1 + sum_of_common_divisors(a, a%b)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(x,y):\n\t\"\"\"\n\tx and y are positive integers. \n\t\"\"\"\n\t\n\t#if x is not greater than y\n\tif x<y:\n\t\t#then swap their values\n\t\tx,y = y,x\n\t\t\n\t#initialize a sum variable\n\tsum_ = 0\n\t\n\t#start with x\n\tdivisor = x\n\t\n\twhile divisor <= y:\n\t\t#check if the remainder is 0\n\t\tif y%divisor == 0:\n\t\t\t#then add the divisor to the sum\n\t\t\tsum_ += divisor\n\t\t\t#check if the divisor is not equal to x\n\t\t\tif divisor!=x:\n\t\t\t\t#then add the quotient to the sum\n\t\t\t\tsum_ += y//divisor\n\t\t#update the divisor\n\t\tdivisor += 1\n\t\t\n\treturn sum_\n\t\n#test case", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(n1, n2):\n    sum_common_divisors = 0\n    for div1 in range(1, n1 + 1):\n        if n1 % div1 == 0:\n            for div2 in range(1, n2 + 1):\n                if n2 % div2 == 0:\n                    if div1 != div2:\n                        sum_common_divisors += div1\n                        sum_common_divisors += div2\n    return sum_common_divisors\n\n\nn1 = int(input())\nn2 = int(input())\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(a,b):\n    \"\"\"Function to find sum of common divisors between two numbers\"\"\"\n    result = 0\n    for i in range(a, b+1):\n        if a%i == 0 and b%i == 0:\n            result += i\n    return result\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(a, b):\n    a_divisors = find_divisors(a)\n    b_divisors = find_divisors(b)\n    return sum(a_divisors & b_divisors)\n\ndef find_divisors(n):\n    divisors = set()\n    for i in range(1, int(n ** .5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(num1, num2):\n    divisors = []\n    for x in range(1, num2+1):\n        if num1 % x == 0 and num2 % x == 0:\n            divisors.append(x)\n    return sum(divisors)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef common_divisors(a, b):\n\tn = [i for i in range(1, min(a,b)+1)]\n\tfor d in n:\n\t\tif a % d == 0 and b % d == 0:\n\t\t\treturn d\n\treturn -1\n\n\ndef sum_common_divisors(a, b):\n\tc = common_divisors(a,b)\n\ts = 0\n\twhile c != -1:\n\t\ts += c\n\t\tc = common_divisors(c,a)\n\n\treturn s\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(a,b):\n    if a<0 or b<0:\n        raise ValueError(\"Negative numbers are not allowed\")\n    else:\n        num1 = a\n        num2 = b\n        result=0\n        for i in range(1,num1+1):\n            if num1%i==0 and num2%i==0:\n                result+=i\n    return result\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n\ndef test_multiply_int():\n    assert multiply_int(10,20)==200\n    print('Test passed!')\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x,y):\n    if y == 0:\n        return 0\n    elif y == 1:\n        return x\n    elif y == 2:\n        return x * 2\n    elif y == 3:\n        return x * 3\n    else:\n        return x * multiply_int(x,y-1)\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    ans = 0\n    while y != 0:\n        ans += x & 1\n        x >>= 1\n        y >>= 1\n    return ans\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x,y):\n\treturn x*y\n\n\ndef main():\n\tassert multiply_int(10,20)==200\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x,y):\n    def multiply(z,w):\n        return z*w\n    return multiply(x,y)\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(num1,num2):\n    return int(num1*num2)", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    a=str(a)\n    b=str(b)\n    if len(a)==len(b)==1:\n        return int(a)*int(b)\n    else:\n        return int(a[0])*int(b)+int(a[1])*int(b)\n\ndef multiply_int_improved(a,b):\n    a=str(a)\n    b=str(b)\n    n=len(a)\n    if n==1:\n        return int(a)*int(b)\n    else:\n        return int(a[n-1])*int(b)+int(a[n-2])*int(b)\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x, y):\n    result = 0\n    while y > 0:\n        result = result + x\n        y -= 1\n    return result\n\ndef multiply_int2(x, y):\n    return x * y\n\ndef multiply_int3(x, y):\n    return x * y\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    return [word for word in words if len(word) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, word_list):\n    return [w for w in word_list if len(w)>=n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]\n\ndef main():\n    print long_words(3,'python is a programming language')\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    res=[]\n    for i in range(len(words)):\n        if len(words[i])>n:\n            res.append(words[i])\n    return res\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,lst):\n    words = []\n    for word in lst:\n        if len(word) >= n:\n            words.append(word)\n    return words\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [w for w in words if len(w)>n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [w for w in words if len(w)>n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    \"\"\"\n    Returns a list of words that are longer than n\n    \"\"\"\n    return list(filter(lambda w:len(w)>n,words))\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n#Corrected\ndef long_words(n, words):\n    return [w for w in words if len(w)>n]\n\n#Alternative\ndef long_words(n, words):\n    return list(filter(lambda w: len(w)>n, words))", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    longwords=[]\n    for w in words:\n        if len(w)>n:\n            longwords.append(w)\n    return longwords\n\n#n=3\n#words=[\"python is a programming language\"]\n\nn=3\nwords=[\"python is a programming language\",\"why does programming\",\"python is a programming\",\"i am learning python\"]\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(matrix):\n    return matrix[0][0] + matrix[0][1] + matrix[0][2] == matrix[1][0] + matrix[1][1] + matrix[1][2] == matrix[2][0] + matrix[2][1] + matrix[2][2] \\\n           and matrix[0][0] + matrix[1][1] + matrix[2][2] == matrix[0][2] + matrix[1][1] + matrix[2][0] \\\n           and matrix[0][0] + matrix[1][1] + matrix[2][2] == matrix[2][0] + matrix[1][1] + matrix[0][2]\n\n\ndef magic_square_test(matrix):\n    result = magic_square(matrix)\n    if result:\n        print(\"Test PASSED!\")\n    else:\n        print(\"Test FAILED!\")\n    return result\n\n\nmatrix1 = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\nmatrix2 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nmatrix3 = [[1, 5, 9], [10, 14, 18], [19, 23, 27]]\n\nmagic_square_test(matrix1)\nmagic_square_test(matrix2)\nmagic_square_test(matrix3)\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(magic_square):\n    if (type(magic_square) != list or\n        type(magic_square[0]) != list or\n        len(magic_square) != 4 or\n        len(magic_square[0]) != 4):\n        raise ValueError('Wrong data type. Please, enter a 4x4 array!')\n    elif sum(len(magic_square) for magic_square in magic_square) != 16:\n        raise ValueError('Wrong data type. Please, enter a 4x4 array!')\n    else:\n        rows = []\n        for row in magic_square:\n            if len(row) != 4:\n                raise ValueError('Wrong data type. Please, enter a 4x4 array!')\n            elif sum(len(row) for row in magic_square) != 16:\n                raise ValueError('Wrong data type. Please, enter a 4x4 array!')\n            else:\n                rows.append(row)\n        count = 0\n        for i in range(4):\n            for j in range(4):\n                for k in range(4):\n                    if magic_square[i][j] + magic_square[i][k] + magic_square[k][j] == 15:\n                        count += 1\n                        break\n                if count == 1:\n                    break\n            if count == 1:\n                break\n        if count == 1:\n            return True\n        else:\n            return False\n\n\ndef magic_square_test():\n    assert magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(matrix):\n    #checking if the square is a magic square\n    if sum(matrix[i][i] for i in range(4))==25 and sum(matrix[i][i] for i in range(4))==matrix[i][i] for i in range(4) and sum(matrix[i][3-i] for i in range(4))==matrix[i][i] for i in range(4):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\nimport numpy as np\n\n\ndef magic_square(size):\n    result = np.array(size)\n    for i in range(size[0]):\n        for j in range(size[1]):\n            result[i][j] = (i + j) % size[1] + 1\n    return result\n\n\ndef magic_square_test(size):\n    s = magic_square(size)\n    result = True\n    for i in range(size[0]):\n        for j in range(size[1]):\n            if s[i][j] != i + j + 1:\n                result = False\n    return result\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(matrix):\n\tassert len(matrix)==4\n\tassert len(matrix[0])==4\n\tfor i in range(len(matrix)):\n\t\tfor j in range(len(matrix[0])):\n\t\t\tassert matrix[i][j]>=1 and matrix[i][j]<=9\n\tfor i in range(len(matrix)):\n\t\tassert matrix[i][i]==matrix[i][0]==matrix[i][3]==matrix[0][i]==matrix[3][i]==matrix[i][len(matrix[0])-1]==matrix[0][len(matrix[0])-1]==matrix[3][len(matrix[0])-1]==matrix[len(matrix)-1][i]==matrix[len(matrix)-1][0]==matrix[len(matrix)-1][3]==matrix[0][i]==matrix[3][i]\n\treturn True\n\ndef magic_square_test(matrix):\n\treturn magic_square(matrix)\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(matrix):\n    assert len(matrix) == 4\n    assert len(matrix[0]) == 4\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            assert 1 <= matrix[i][j] <= 9, \"matrix contains a non-integer value\"\n    def _sum(i, j):\n        a = 0\n        for k in range(4):\n            a += matrix[i][k]\n        for k in range(4):\n            a += matrix[k][j]\n        if i == j:\n            a += matrix[i][i]\n        if i + j == 3:\n            a += matrix[i][j]\n        if i - j == 1:\n            a += matrix[i][j]\n        return a\n    sum_a = _sum(0,0)\n    sum_b = _sum(0,1)\n    sum_c = _sum(0,2)\n    sum_d = _sum(0,3)\n    sum_e = _sum(1,0)\n    sum_f = _sum(1,1)\n    sum_g = _sum(1,2)\n    sum_h = _sum(1,3)\n    sum_i = _sum(2,0)\n    sum_j = _sum(2,1)\n    sum_k = _sum(2,2)\n    sum_l = _sum(2,3)\n    sum_m = _sum(3,0)\n    sum_n = _sum(3,1)\n    sum_o = _sum(3,2)\n    sum_p = _sum(3,3)\n    return sum_a + sum_b + sum_c + sum_d + sum_e + sum_f + sum_g + sum_h + sum_i + sum_j + sum_k + sum_l + sum_m + sum_n + sum_o + sum_p == ", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(A):\n    \"\"\"\n    :type A: List[List[int]]\n    :rtype: bool\n    \"\"\"\n    if len(A)!=len(A[0]):\n        return False\n    m = len(A)\n    n = len(A[0])\n    c = 0\n    for i in range(m):\n        for j in range(n):\n            c+=A[i][j]\n            if i==j and c==m*n:\n                return True\n            if i+j==n-1 and c==m*n:\n                return True\n            if i==n-1-j and c==m*n:\n                return True\n            if i==0 and c==m*n:\n                return True\n    return False\n\ndef magic_square_test(A):\n    import unittest\n    return unittest.main(exit=False)\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(arr):\n    if len(arr)!=4:\n        return False\n    sum_row=0\n    sum_col=0\n    sum_diag1=0\n    sum_diag2=0\n    for i in range(len(arr)):\n        if sum_row!=sum_col!=sum_diag1!=sum_diag2:\n            return False\n        for j in range(len(arr)):\n            if i==j:\n                sum_diag1+=arr[i][j]\n            if i+j==3:\n                sum_diag2+=arr[i][j]\n            sum_row+=arr[i][j]\n            sum_col+=arr[j][i]\n    if sum_row==sum_col==sum_diag1==sum_diag2==35:\n        return True\n    else:\n        return False\n\ndef magic_square(arr):\n    if len(arr)!=4:\n        return False\n    sum_row=0\n    sum_col=0\n    sum_diag1=0\n    sum_diag2=0\n    for i in range(len(arr)):\n        if sum_row!=sum_col!=sum_diag1!=sum_diag2:\n            return False\n        for j in range(len(arr)):\n            if i==j:\n                sum_diag1+=arr[i][j]\n            if i+j==3:\n                sum_diag2+=arr[i][j]\n            sum_row+=arr[i][j]\n            sum_col+=arr[j][i]\n    if sum_row==sum_col==sum_diag1==sum_diag2==35:\n        return True\n    else:\n        return False\n\n# print(magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\n# print(magic_square([[", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(a):\n    \"\"\"\n    inputs:\n    a: list of lists containing numbers\n\n    output:\n    magic_square: the magic square with all digits from 1 to 15\n    \"\"\"\n    if not a:\n        return []\n\n    n = len(a)\n    magic_square = [[0] * n for _ in range(n)]\n\n    for i in range(1, n + 1):\n        magic_square[0][i - 1] = i\n        magic_square[i - 1][0] = i\n\n    for i in range(1, n):\n        for j in range(1, n):\n            magic_square[i][j] = magic_square[i - 1][j] + magic_square[i][j - 1]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            magic_square[i][n - j] = magic_square[i][n - j - 1] - magic_square[i - 1][n - j]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            magic_square[n - i][j] = magic_square[n - i - 1][j] - magic_square[n - i][j - 1]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            magic_square[n - i][n - j] = magic_square[n - i][n - j - 1] + magic_square[n - i - 1][n - j]\n\n    return magic_square\n\n\ndef magic_square_test(a):\n    return magic_square(a) == [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\n#Please write your code here\ndef magic_square_test(arr):\n    for i in range(3):\n        for j in range(3):\n            if(arr[i][j]!=0 and (not arr[i][j]==arr[i][(j+1)%3]+1 or not arr[i][j]==arr[i][(j-1)%3]-1 or not arr[i][j]==arr[(i+1)%3][j]+1 or not arr[i][j]==arr[(i-1)%3][j]-1 or not arr[i][j]==arr[(i+1)%3][(j+1)%3]+1 or not arr[i][j]==arr[(i-1)%3][(j-1)%3]-1 or not arr[i][j]==arr[(i+1)%3][(j-1)%3]+1 or not arr[i][j]==arr[(i-1)%3][(j+1)%3]-1 or not arr[i][j]==arr[(i+1)%3][j]+arr[(i-1)%3][j]+arr[i][(j+1)%3]+arr[i][(j-1)%3] or not arr[i][j]==arr[i][(j+1)%3]+arr[i][(j-1)%3]+arr[(i+1)%3][j]+arr[(i-1)%3][j])):\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    # write your code here\n    dict_occurrences = {}\n    for item in lst:\n        if item not in dict_occurrences.keys():\n            dict_occurrences[item] = 0\n        dict_occurrences[item] += 1\n\n    max_occurrence = max(dict_occurrences.values())\n    for item in dict_occurrences.keys():\n        if dict_occurrences[item] == max_occurrence:\n            return (item, max_occurrence)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(list):\n    max_item, max_count = 0, 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if list[i] == list[j] and i != j:\n                max_item, max_count = list[i], max_count+1\n    return max_item, max_count\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\n# Some code goes here\ndef max_occurrences(list):\n    \"\"\" \n    :param list: a list of objects that could be any type\n    :returns: A tuple containing the max object and its frequency in list\n    \"\"\"\n\n    max_item = 0\n    max_freq = 0\n\n    for item in list:\n        count = 0\n\n        for other_item in list:\n            if item == other_item:\n                count += 1\n\n        if count > max_freq:\n            max_item = item\n            max_freq = count\n\n    return (max_item, max_freq)\n\n# Test", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(nums):\n    occ = {}\n    max_value = 0\n    max_key = None\n    for i in nums:\n        if i not in occ:\n            occ[i] = 1\n        else:\n            occ[i] += 1\n\n        if occ[i] > max_value:\n            max_value = occ[i]\n            max_key = i\n\n    return max_key, max_value\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(values):\n    \"\"\"\n    Find the item with the highest frequency.\n    \"\"\"\n    raise NotImplementedError\n\n# Your code goes here\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(items):\n    max_count = 0\n    max_item = None\n    for item in items:\n        if items.count(item) > max_count:\n            max_count = items.count(item)\n            max_item = item\n    return max_item, max_count\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    max_cnt = 0\n    max_val = 0\n    for val in lst:\n        if lst.count(val) > max_cnt:\n            max_cnt = lst.count(val)\n            max_val = val\n    return max_val, max_cnt\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(nums):\n    # Write your code here\n    count_num = {}\n    for num in nums:\n        if num in count_num:\n            count_num[num] += 1\n        else:\n            count_num[num] = 1\n    max_count = 0\n    max_num = None\n    for k, v in count_num.items():\n        if v > max_count:\n            max_count = v\n            max_num = k\n    return max_num, max_count\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(items):\n    max_count = 0\n    max_val = None\n\n    for i in items:\n        if items.count(i) > max_count:\n            max_count = items.count(i)\n            max_val = i\n\n    return max_val, max_count\n\n\ndef test_max_occurrences():\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\nimport collections\n\ndef max_occurrences(items):\n    \"\"\"Find the item with maximum frequency in a given list.\"\"\"\n    count = collections.Counter(items)\n    max_freq = max(count.values())\n    return (count[key] for key in count if count[key] == max_freq).next()\n\ndef main():\n    test_cases = [\n        ([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2], (2, 5)),\n        ([1,2,3,1,2,3,1,2,3,1,2,3], (1, 3)),\n    ]\n    for items, expected in test_cases:\n        actual = max_occurrences(items)\n        assert actual == expected, \\\n            \"Expected: {}, Actual: {}\".format(expected, actual)\n\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n\tvowels = \"aeiouAEIOU\"\n\ts = list(s)\n\tfor i, char in enumerate(s):\n\t\tif char in vowels:\n\t\t\ts[i] = char[::-1]\n\treturn ''.join(s)\n\n# Helper functions for testing\ndef str_equal(a, b):\n\treturn a == b\n\ndef str_not_equal(a, b):\n\treturn a != b\n\n# Test suite\ntests = [\n    {\"input\": \"Python\", \"expected\": \"Python\", \"test\": str_equal},\n    {\"input\": \"Python\", \"expected\": \"ythonoP\", \"test\": str_not_equal}\n]\n\nfor t in tests:\n    actual = reverse_vowels(t['input'])\n    if t[\"test\"](actual, t['expected']):\n        print(\"Passed test for {} with input {} and expected output {}\".format(t['input'], t['expected'], actual))\n    else:\n        print(\"Failed test for {} with input {} and expected output {}, got {}\".format(t['input'], t['expected'], actual, actual))\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    pass # TODO\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(text):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    for i, char in enumerate(text):\n        if char in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    new_text = ''\n    for index in vowel_indices:\n        new_text += text[index]\n    return new_text", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string = char + new_string\n        else:\n            new_string = new_string + char\n    return new_string\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    \"\"\"\n    reverse_vowels(\"Python\") == \"Thonpy\"\n    \"\"\"\n    # your code here\n    rev = []\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            rev.append(char)\n    return \"\".join(rev[::-1])\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    '''\n    Input: string of any length\n    Output: reversed string of vowels only\n    '''\n    vowel_list = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = [string.index(char) for char in vowel_list]\n    new_string = string[:]\n    for i, j in zip(vowel_index, range(len(vowel_index), 0, -1)):\n        new_string = new_string[:i] + string[i+1:] + string[i:i+1]\n    return new_string\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\nimport re\n\n\ndef reverse_vowels(word):\n    vowels = 'aeiouAEIOU'\n    return re.sub('[{}]'.format(vowels), '', word[::-1])\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    \"\"\"\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"I am a python developer\")\n    'I am a develpapipn'\n    >>> reverse_vowels(\"The quick brown fox\")\n    'The quicK browN fox'\n    >>> reverse_vowels(\"The quick brown fox jumps over the lazy dog\")\n    'The quicK browN fox jumps over the laZy dOg'\n    \"\"\"\n\n    return string\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tuple):\n    return \"\".join([word.lower() for word in tuple])\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    string = \"\"\n    for i in range(len(tup)):\n        string = string + str(tup[i]) + \" \"\n    string = string[0:len(string)-1]\n    return string\n\ndef test_tup_string():\n    tup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')\n    assert tup_string(tup) == \"exercises\"\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    \"\"\"\n    Method to convert tuple to a string.\n    \n    Args:\n        tup: Tuple of any value.\n        \n    Returns:\n        String: String of the tuple.\n    \"\"\"\n    return ''.join([e for e in tup])\n\ndef tup_string2(tup):\n    \"\"\"\n    Method to convert tuple to a string.\n    \n    Args:\n        tup: Tuple of any value.\n        \n    Returns:\n        String: String of the tuple.\n    \"\"\"\n    return ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tuple):\n    return ''.join(tuple)\n\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    res = \"\"\n    for i in tup:\n        res += i\n    return res\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    s = ''\n    for i in tup:\n        s += i\n    return s", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    \"\"\"\n    >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n    \"exercises\"\n    \"\"\"\n    return ''.join(tup).lower()\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    sum = sum(map(lambda x: abs(x), nums))\n    return sum\n\ndef main():\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numlist):\n    return sum(map(lambda x: x if x>=0 else 0, numlist))\n\n# test", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(mylist):\n    return sum(map(lambda x : x if x>0 else 0, mylist))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(filter(lambda number: number < 0, numbers))", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numbers):\n    return sum(map(lambda x:x if x > 0 else 0, numbers))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(list(map(lambda x: x if x >= 0 else 0, numbers)))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numbers):\n  return sum(map(lambda x: -x if x < 0 else 0, numbers))\n\ndef test():\n  assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n  print('All tests passed!')\n\ntest()", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    return sum(map(lambda num:num if num>0 else 0,nums))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n  return sum(filter(lambda x: x<0, nums))\n\n#Test cases"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,n):\n    temp = arr.pop(n-1)\n    if temp%2 == 0:\n        if p == 1:\n            return \"EVEN\"\n        else:\n            arr.append(temp)\n            return check_last(arr,p-1,n)\n    else:\n        if p == 1:\n            return \"ODD\"\n        else:\n            arr.append(temp)\n            return check_last(arr,p-1,n)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(A,p,k):\n    temp = 0\n    for i in range(p):\n        temp += A.pop(-1)\n    if temp % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,q):\n    if len(arr)==0:\n        return \"\"\n    if p==0:\n        return str(arr[-1]).upper()\n    else:\n        if p%2==0:\n            return check_last(arr[:-1],p//2,q)\n        else:\n            return check_last(arr[:-2],p//2+1,q)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,val):\n    res=arr[-1]\n    for i in range(p-1):\n        res=f\"{res}{val}\"\n    res=f\"{res}{val}\"\n    if res[-1] == '0':\n        return \"ODD\"\n    elif res[-1] == '1':\n        return \"EVEN\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(array,p,x):\n    if len(array) == 0:\n        return \"EMPTY ARRAY\"\n    elif p <= 0:\n        return array[-1]\n    else:\n        array[-1] = array[-1] + x\n        return check_last(array[1:-1],p-1,x)\n\n#test case\n\narray = [5,7,10]\np = 3\nx = 1\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,x):\n    for i in range(p):\n        arr.append(x)\n    print(arr)\n    if arr[-1]%2==0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n\ncheck_last([5,7,10],3,1)", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(array,p,q):\n\tarr=array[:]\n\tarr.reverse()\n\tc=0\n\tfor i in range(p):\n\t\tc+=q\n\t\tif c>9:\n\t\t\tc-=9\n\t\tarr.append(c)\n\tans=arr[p:]\n\tif len(ans)%2==1:\n\t\treturn 'ODD'\n\telse:\n\t\treturn 'EVEN'\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, m):\n    \"\"\"\n    Input: arr, an array\n           p, an integer\n           m, an integer\n    \n    Returns: 'EVEN' if the last element of array arr after performing operation p times is even, 'ODD' if odd.\n    \n    Time Complexity: O(n+p)\n    Space Complexity: O(1)\n    \"\"\"\n    if m == 0:\n        return 'ODD'\n    if p == 0:\n        return 'EVEN'\n    if p % 2 == 0:\n        return check_last(arr, p//2, m-1)\n    else:\n        return check_last(arr, (p-1)//2, m-1)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,q):\n    return \"ODD\" if (arr[-1] % 2 == 1 and p <= 0) or (arr[-1] % 2 == 0 and p > 0) else \"EVEN\"\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return int(hexagonal(n))\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    s = n - 1\n    count = 0\n    while s >= 0:\n        if s % 2 == 0:\n            count += s\n        else:\n            count += 3*s\n        s -= 1\n    return count\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return n * (n + 1) // 2\n\ndef hexagonal_num_2(n):\n    i = 0\n    j = n\n    while True:\n        if i > j:\n            break\n        a = j - i + 1\n        b = 2 * i - j\n        c = 2 * j - i\n        yield a + b + c\n        i += 1\n        j += 1\n\ndef main():\n    assert hexagonal_num(10) == 190\n    for n in range(1, 20):\n        assert hexagonal_num(n) == next(hexagonal_num_2(n))\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n: int) -> int:\n    assert 1 <= n\n    return 6*n*n - 2*n\n\n@pytest.mark.parametrize(\"number\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ndef test_hexagonal_num(number):\n    assert hexagonal_num(number) == 6*number*number - 2*number\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    h = 0\n    for i in range(n):\n        h += i\n    return h\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return int((n*(2*n-1))//6)\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += 2 * i - 1\n    return s\n\n# test", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n        n: the number of the hexagonal number\n        return: the n-th hexagonal number\n    \"\"\"\n    return int(n * (2 * n - 1)) / 2\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    hexagon = 0\n    for k in range(1, n):\n        hexagon += k\n    return hexagon\n\ndef hexagonal_num2(n):\n    # Here, you can use the formula to find the nth hexagon number.\n    return n * (2 * n - 1) // 2", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n  return (n * (2 * n - 1)) / 2\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kilowatt):\n    \"\"\"Returns electricity bill\"\"\"\n    return (kilowatt * 113.2)\n\ndef calc_electbill_2(kilowatt):\n    \"\"\"Returns electricity bill\"\"\"\n    return kilowatt * 113.2", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(gallons):\n    return (gallons*2.25*0.002162)\n\ndef test_cal_electbill():\n    assert cal_electbill(75)==246.25\n\ndef test_cal_electbill_negative():\n    assert cal_electbill(-100) is None\n\ndef test_cal_electbill_string():\n    assert cal_electbill(\"hello\") is None\n\ndef test_cal_electbill_float():\n    assert cal_electbill(56.33) is None\n\n# 100%\n\nimport pytest\n\ndef cal_tax(bill):\n    return bill*0.055\n\ndef test_cal_tax():\n    assert cal_tax(246.25)==13.0075\n\ndef test_cal_tax_negative():\n    assert cal_tax(-100) is None\n\ndef test_cal_tax_string():\n    assert cal_tax(\"hello\") is None\n\ndef test_cal_tax_float():\n    assert cal_tax(56.33) is None\n\n# 100%\n\ndef cal_total(bill):\n    return bill+cal_tax(bill)\n\ndef test_cal_total():\n    assert cal_total(246.25)==259.2575\n\ndef test_cal_total_negative():\n    assert cal_total(-100) is None\n\ndef test_cal_total_string():\n    assert cal_total(\"hello\") is None\n\ndef test_cal_total_float():\n    assert cal_total(56.33) is None\n\n# 100%\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(hour):\n    if hour < 0 or hour > 24:\n        raise ValueError('hour error')\n    elif hour >= 0 and hour < 5:\n        return 0.1*hour\n    elif hour >= 5 and hour < 10:\n        return 0.15*hour\n    elif hour >= 10 and hour < 16:\n        return 0.2*hour\n    else:\n        return 0.25*hour\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    \"\"\"\n    kwh: int, the number of kwh used\n    return: electbill: float, the calculated electbill\n    \"\"\"\n    return 12.96*kwh*0.001\n\n# ----------------------------------------------------------------------\n# Call the function\n\nbill = cal_electbill(500)", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(hrs):\n    elect= 0.018 * hrs\n    return elect\n\ndef cal_electbill2(hrs,rate):\n    elect= rate * hrs\n    return elect\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(Kw):\n    price = 1000\n    return price * Kw\n\ndef bill_to_str(Kw):\n    s = cal_electbill(Kw)\n    return str(s)\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(hours):\n    return (hours * 225) / 1000\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwr_used):\n    elec_rate = 3.0\n    cost_per_kwr = 0.10\n    elect_bill = kwr_used * cost_per_kwr * elec_rate\n    return round(elect_bill,2)\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(power):\n    return power * 0.11\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(hours):\n    # Write your code here\n    return hours * 0.2\n\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(x):\n    zeroes = 0\n    for number in x:\n        if number == 0:\n            zeroes += 1\n    return zeroes/len(x)\n\n# Havn't implemented zero_count\n# That's not my best solution, but it works\n# not sure how to do it. Will do it later\ndef zero_count_v2(x):\n    zeroes = 0\n    for number in x:\n        if number == 0:\n            zeroes += 1\n    return zeroes\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(numbers):\n\t\"\"\"\n\t:type numbers: list\n\t:rtype: float\n\t\"\"\"\n\tzeros = 0\n\tfor i in numbers:\n\t\tif i == 0:\n\t\t\tzeros = zeros + 1\n\treturn zeros/len(numbers)\n\ndef count_zeros(numbers):\n\t\"\"\"\n\t:type numbers: list\n\t:rtype: float\n\t\"\"\"\n\tzeros = 0\n\tcount = 0\n\tfor i in numbers:\n\t\tif i == 0:\n\t\t\tzeros = zeros + 1\n\t\t\tcount = count + 1\n\treturn zeros/count\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(x):\n    \"\"\"\n    Input: List of integers\n    Output: Float\n    \"\"\"\n    zero_num = 0\n    zero_num = (x.count(0)) / len(x)\n    return zero_num\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(nums):\n    zero_count = nums.count(0)\n    length = len(nums)\n    return zero_count / length\n\ndef test_zero_count():\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(A):\n    \"\"\"\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    True\n    \"\"\"\n\n    return sum(1 for a in A if a==0) / len(A)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\n# I think this works\n\ndef zero_count(array):\n    count = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            count += 1\n    return count / len(array)\n\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n  \"\"\"\n  Returns a float from 0 to 1 representing the ratio of zeroes in the array.\n  >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n  0.15\n  \"\"\"\n  return 1.0*len([x for x in arr if x==0])/len(arr)\n\ndef test_zero_count():\n  assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n  assert zero_count([0, 1, 2, 3, 4, 5])==0.0\n  assert zero_count([1, 2, 3, 4, 5])==0.0\n  assert zero_count([0, 1, 2, 3, 4, 5])==0.0\n  assert zero_count([])==0.0\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    return len(arr) - arr.count(0) / len(arr)\n\n\n# This works, but it is slower than the method below.\ndef zero_count_2(arr):\n    count = 0\n    for x in arr:\n        if x == 0:\n            count += 1\n    return count/len(arr)\n\n\n# O(N) time, O(1) space, where N is the length of the array.\ndef zero_count_3(arr):\n    return len([x for x in arr if x == 0]) / len(arr)\n\n# O(N) time, O(N) space, where N is the length of the array.\ndef zero_count_4(arr):\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] == 0 and arr[i+1] == 0:\n            count += 1\n    return count / len(arr)\n\n# O(N) time, O(1) space, where N is the length of the array.\ndef zero_count_5(arr):\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] == 0 and arr[i+1] == 0:\n            count += 1\n    return count / (len(arr)-1)\n\n# O(N) time, O(1) space, where N is the length of the array.\ndef zero_count_6(arr):\n    count = 0\n    seen = [False] * len(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if seen[i] is False:\n                seen[i] = True\n                count += 1\n    return count / len(arr)\n\n# O(N) time, O(1) space, where N is the length of the array.\ndef zero_count_7(arr):\n   ", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\nfrom math import log\n\n\ndef zero_count(nums):\n    \"\"\"\n    Find the ration of zeroes in an array of integers\n\n    :param nums: an array of integers\n    :return: a float ration\n    \"\"\"\n    count_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n    count_zero = float(count_zero) / len(nums)\n    return count_zero\n\n\ndef zero_count_no_float(nums):\n    \"\"\"\n    Find the ration of zeroes in an array of integers\n\n    :param nums: an array of integers\n    :return: an integer ration\n    \"\"\"\n    count_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n    return count_zero\n\n\ndef test_zero_count():\n    assert round(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 4) == 0.15\n    assert zero_count_no_float([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 1\n    assert zero_count_no_float([0, 1, 2, 3, 4, 5, 6]) == 0\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    return len([a for a in array if a == 0])/len(array)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    num_str = str(num)\n    count = 0\n    for i in num_str:\n        if i == '1':\n            count += 1\n        else:\n            return False\n    if count%2 == 1:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        n = int(n)\n        if n < 0:\n            n = abs(n)\n        n_bin = bin(n)[2:]\n        n_bin_len = len(n_bin)\n        for i in range(n_bin_len):\n            if n_bin[i] == '1':\n                if not is_Sum_Of_Powers_Of_Two(n - 2 ** i):\n                    return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    To check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    assert n >= 0\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n%2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    return is_Sum_Of_Powers_Of_Two(n-1) or is_Sum_Of_Powers_Of_Two(n-3) or is_Sum_Of_Powers_Of_Two(n-5)\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(num):\n    if(num==0):\n        return False\n    if(num%2==0):\n        return is_Sum_Of_Powers_Of_Two(num/2)\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    bit_count = 0\n    while num:\n        if num & 1:\n            return False\n        bit_count += 1\n        num >>= 1\n    if bit_count % 2 == 0:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(number):\n    if number == 0:\n        return False\n    else:\n        for i in range(1, 10000):\n            if i >= number:\n                break\n            if (number % i) == 0 and ((number - number // i) % i) == 0:\n                return True\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(number):\n    # Your code here\n    if number == 0:\n        return False\n    \n    i = 1\n    while True:\n        if number == 0:\n            return True\n        if number == 1:\n            return True\n        elif (number % 2 == 0) and (number % 4 == 0):\n            return False\n        elif number % 2 == 0 and number % 4 != 0:\n            number = number / 2\n        else:\n            number = number / 4\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(number):\n    for i in range(1, 64):\n        if (number & (1 << i)) != 0:\n            if number == 1:\n                return True\n            if number > 1:\n                if (number & (1 << i - 1)) != 0:\n                    return False\n            else:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num==0 or num==1:\n        return False\n    # Assume num is power of 2\n    num2 = num // 2\n    num_of_set = 0\n    while num2 != 0:\n        if num2 & 1 == 1:\n            num_of_set += 1\n        num2 = num2 >> 1\n    return num_of_set == 1\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\n# Your code here.\n\ndef circle_circumference(radius):\n    return 2*math.pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius: float):\n\treturn 2 * math.pi * radius\n\ndef test_circle_circumference():\n\tassert circle_circumference(10)==62.830000000000005\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    \"\"\"\n    >>> circle_circumference(10)\n    62.830000000000005\n    \"\"\"\n    return 2*3.14*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14159 * radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return radius*2*np.pi\n\ndef test_circle_circumference():\n    assert circle_circumference(10)==62.830000000000005\n\n\n# -\n\n# ## 1.2.3. Write a function to find the area of a circle.\n\n# +", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(r):\n    return 2 * 3.14 * r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(r):\n    \"\"\"Returns the circumference of a circle given its radius\"\"\"\n    return 2*3.14159*r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(r):\n    return 2*pi*r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(r):\n    return 2 * math.pi * r\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    \"\"\"\n    Return the circumference of a circle\n    \"\"\"\n    return 2 * math.pi * radius\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup_list):\n    print(tup_list)\n    # return [x for x in tup_list if tup_list.count(x) == 1]\n    tup_list_converted = [list(i) for i in tup_list]\n    print(tup_list_converted)\n    return [x for x in tup_list_converted if tup_list_converted.count(x) == 1]\n\n\n\n# tup_list = [(1, 2, 4), (3, 3, 3), (4, 4, 4)]\ntup_list = [(1, 2, 4), (3, 3, 3), (4, 4, 4), (1, 2, 4)]", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup_list):\n    singly_list = []\n    for tup in tup_list:\n        if tup.count(tup[0]) == 1:\n            singly_list.append(tup[0])\n    return singly_list\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuple_list):\n    single = []\n    for tuple in tuple_list:\n        for element in tuple:\n            if tuple.count(element) == 1:\n                single.append(element)\n\n    return single\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(arr):\n    if type(arr) is not list or type(arr[0]) is not tuple:\n        return False\n    try:\n        res = []\n        for x in arr:\n            for y in x:\n                if not y in res:\n                    res.append(y)\n        return res\n    except Exception as e:\n        print(e)\n        return False\n\n# Tuples\na = [1, 2, 3, 4]\nb = (1, 2, 3, 4)", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tups):\n    result = []\n    for tup in tups:\n        for element in tup:\n            if tup.count(element) == 1:\n                result.append(element)\n    return result\n\n# Task 6", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\n# +\ndef extract_singly(list_of_tuples):\n    singly = []\n    for tup in list_of_tuples:\n        counter = 0\n        for elem in tup:\n            if tup.count(elem) == 1:\n                counter += 1\n        if counter == len(tup):\n            singly.append(tup)\n    return singly\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuple_list):\n    return [x for x in tuple_list for y in x if tuple_list.count(x) == 1]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(L):\n    L = [x for x in L if L.count(x) == 1]\n    return L\n\ndef test_extract_singly():\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\n# Solution 1\ndef extract_singly(lst):\n    return [el for el in lst for occ in range(lst.count(el)) if lst.count(el) == occ]\n\n# Solution 2\ndef extract_singly(lst):\n    return [el for el in lst if lst.count(el) == lst.index(el)]", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(lst):\n    \"\"\"\n    :param lst: tuple list\n    :return: list\n    \"\"\"\n    res = []\n    for item in lst:\n        if item not in res:\n            res.append(item)\n    return res\n\n\ndef main():\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([(1, 3, 4), (3, 4, 5), (4, 5, 7), (1, 4)]))\n\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(seq):\n    n = len(seq)\n    for i in range(n):\n        print(seq)\n        h = i\n        for j in range(n):\n            if h == j:\n                continue\n            if seq[h] < seq[j]:\n                seq[h], seq[j] = seq[j], seq[h]\n                h = j\n        print(seq)\n        h = n - 1 - i\n        for j in range(n-1, i, -1):\n            if h == j:\n                continue\n            if seq[h] < seq[j]:\n                seq[h], seq[j] = seq[j], seq[h]\n                h = j\n        print(seq)\n        h = n - 1 - i\n        for j in range(n-1, i, -1):\n            if h == j:\n                continue\n            if seq[h] < seq[j]:\n                seq[h], seq[j] = seq[j], seq[h]\n                h = j\n        print(seq)\n\n    return seq\n\n# print(pancake_sort([15, 79, 25, 38, 69]))\n\ndef pancake_sort_reverse(seq):\n    n = len(seq)\n    for i in range(n):\n        print(seq)\n        h = i\n        for j in range(n):\n            if h == j:\n                continue\n            if seq[h] > seq[j]:\n                seq[h], seq[j] = seq[j], seq[h]\n                h = j\n        print(seq)\n        h = n - 1 - i\n        for j in range(n-1, i, -1):\n            if h == j:\n                continue\n            if seq[h] > seq[j]:\n                seq[h], seq[j] = seq[j], seq[h]\n                h = j\n        print(seq)\n        h = n - 1 - i\n        for j in range(n-1, i, -1", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(array: List[int]) -> List[int]:\n    pass\n\n\n@pancake_sort.solution\ndef pancake_sort_solution(array: List[int]) -> List[int]:\n    pass\n\n\n@pancake_sort.hint\ndef pancake_sort_hint() -> None:\n    pass\n\n\n@pancake_sort.test\ndef pancake_sort_test():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([15, 79, 25, 38, 69, 15, 79, 25, 38, 69]) == [15, 79, 25, 38, 69, 15, 79, 25, 38, 69]\n\n\n# Pancake Sort, Selection Sort\n# O(n^2)\n# O(n^2)\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nfrom .swap import swap\n\n\ndef sort(arr):\n    # Start from right\n    for i in range(len(arr) - 1, -1, -1):\n        # Find the index of the minimum element of remaining elements\n        min_ind = i\n        for j in range(i - 1, -1, -1):\n            if arr[j] < arr[min_ind]:\n                min_ind = j\n        # If there was a change\n        if i != min_ind:\n            # Swap the elements\n            swap(arr, i, min_ind)\n            # Pancake Sort\n            reverse(arr, i + 1)\n\n\ndef reverse(arr, start):\n    \"\"\"\n    Reverses the elements from start to end.\n    \"\"\"\n    while start < len(arr):\n        swap(arr, start, len(arr) - start)\n        start += 1\n\n\ndef pancake_sort(arr):\n    sort(arr)\n    return arr\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(alist):\n    \"\"\"\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    \"\"\"\n    print(alist)\n    left, right = 0, len(alist) - 1\n    while left < right:\n        while left < right and alist[left] <= alist[right]:\n            left += 1\n        print(alist)\n        alist[left], alist[right] = alist[right], alist[left]\n        print(alist)\n        left += 1\n        right -= 1\n        print(alist)\n    return alist\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(elements):\n    pass\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    n = len(arr)\n    while n > 1:\n        i = 0\n        while i < n-1:\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                arr = flip(arr, i)\n            i += 1\n        n -= 1\n    return arr\n\ndef flip(arr, i):\n    n = len(arr)\n    temp = arr[n-i-1]\n    for j in range(n-i-1, i-1, -1):\n        arr[j] = arr[j-1]\n    arr[i-1] = temp\n    return arr\n\ndef main():\n    test_cases = {\n        ([15, 79, 25, 38, 69], [15, 25, 38, 69, 79]),\n        ([25, 38, 15, 69, 79], [25, 38, 15, 69, 79]),\n        ([38, 15, 69, 79, 25], [25, 38, 15, 69, 79]),\n        ([15, 38, 25, 69, 79], [25, 38, 15, 69, 79]),\n        ([38, 69, 15, 25, 79], [25, 38, 15, 69, 79]),\n        ([38, 79, 69, 15, 25], [25, 38, 15, 69, 79]),\n        ([79, 38, 69, 15, 25], [25", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(alist):\n    # Write your code here.\n    pass\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(l):\n    return pancake_sort_helper(l, len(l))\n\ndef pancake_sort_helper(l, N):\n    if N <= 1:\n        return l\n    \n    i = N - 1\n    while i > 0:\n        j = find_max_index(l, i)\n        if j == i:\n            break\n        else:\n            l[j], l[i] = l[i], l[j]\n            i -= 1\n    return l + pancake_sort_helper(l[:i], i)\n\ndef find_max_index(l, N):\n    max_index = N\n    max_elem = l[0]\n    \n    for index in range(1, N):\n        if max_elem < l[index]:\n            max_index = index\n            max_elem = l[index]\n    return max_index", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nfrom typing import List\n\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time: O(n^2)\n    Space: O(1)\n    \"\"\"\n    num_len = len(nums)\n    if num_len <= 1:\n        return nums\n\n    for i in range(num_len // 2, 0, -1):\n        pancake_flip(nums, i)\n\n    for i in range(num_len - 1, 0, -1):\n        pancake_flip(nums, i)\n\n    return nums\n\n\ndef pancake_flip(nums: List[int], num_len: int) -> None:\n    \"\"\"\n    Flip the first num_len elements of nums,\n    then reverse them\n    \"\"\"\n    for _ in range(num_len):\n        reverse(nums, 0)\n\n\ndef reverse(nums: List[int], start_index: int) -> None:\n    \"\"\"\n    Reverse the elements from start_index to len(nums) - 1\n    \"\"\"\n    for i in range(start_index, len(nums) - 1, -1):\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(elements):\n    # Check if elements is an iterable\n    if not isinstance(elements, Iterable):\n        raise TypeError(\"Expected elements to be iterable\")\n    # Check if elements has at least one element\n    if not elements:\n        raise ValueError(\"Cannot sort empty list\")\n    # Copy elements\n    elements = elements.copy()\n    # Get the list length\n    list_length = len(elements)\n    # Loop through the list in reverse order\n    for i in range(list_length, 0, -1):\n        # Get the element at index i\n        element = elements[i-1]\n        # Check if the element is at the correct index\n        if elements[i-1] != i:\n            # Put the element back in the list at its correct index\n            elements[i-1] = element\n            # Swap the elements before and after the element at index i-1\n            elements[:i] = elements[:i][::-1]\n            # Swap the elements before and after the element at index i-1\n            elements[i:] = elements[i:][::-1]\n    return elements\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    \"\"\"\n    Doctest:\n    >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    True\n    \"\"\"\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count\n\ndef run():\n    print(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(L1, L2, L3):\n    count = 0\n    L1 = set(L1)\n    L2 = set(L2)\n    L3 = set(L3)\n    for x in L1:\n        if x in L2:\n            count +=1\n    for x in L2:\n        if x in L3:\n            count +=1\n    for x in L3:\n        if x in L1:\n            count +=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(lst1,lst2,lst3):\n    dict = {}\n    for i in lst1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    count = 0\n    for k in dict:\n        for l in dict:\n            if k == l:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(a, b, c):\n    count = 0\n    for i in a:\n        for j in b:\n            for k in c:\n                if (i == j and j == k):\n                    count += 1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    return sum(i in j for i in list1 for j in list2)\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count=0\n    for item in list1:\n        if item in list2 and item in list3:\n            count+=1\n    return count\n\ndef test_count_samepair():\n    print(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n    print(count_samepair([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,9],[1,2,3,4,5,6,7,9]))\n\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(lst1,lst2,lst3):\n    lst1_set = set(lst1)\n    lst2_set = set(lst2)\n    lst3_set = set(lst3)\n    same_set = lst1_set.intersection(lst2_set,lst3_set)\n    return len(same_set)\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    pass\n\ndef test_count_samepair():\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,3,3,1,2,6,7,9])==2\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,2,3,1,2,6,7,9])==1\n\n# Test your function by calling it in the following lines.\n# Do not change the names of the lists as these are the test cases.\n# count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n# count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,3,3,1,2,6,7,9])\n# count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,2,3,1,2,6,7,9])\n\n\n# ## 4.7\n# Write a function to print all the prime numbers up to and including the given number.\n#\n# To make your function complete, you may assume that it is", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(l1, l2, l3):\n    res = 0\n    for i in l1:\n        if i in l2 and i in l3:\n            res += 1\n    return res\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    pair = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] == list1[j]:\n                pair += 1\n            if list2[i] == list2[j]:\n                pair += 1\n            if list3[i] == list3[j]:\n                pair += 1\n    return pair\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    return t.count([])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(t):\n    count = 0\n    for a in t:\n        if isinstance(a, list):\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple):\n    return tuple.count(tuple)\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_of_lists):\n    list_count = 0\n    for item in tuple_of_lists:\n        if isinstance(item, list):\n            list_count += 1\n    return list_count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_of_lists):\n    \"\"\"Return the number of lists in the tuple_of_lists\"\"\"\n    return tuple_of_lists.count(list)\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom typing import List\n\ndef find_lists(lists_tuple:tuple) -> int:\n    \"\"\"\n    Given tuple of lists, return the number of lists in it.\n    \"\"\"\n    list_count = 0\n    for i in range(len(lists_tuple)):\n        if isinstance(lists_tuple[i], list):\n            list_count += 1\n    return list_count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_of_lists):\n    count = 0\n    for item in tuple_of_lists:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n\ndef main():\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))\n    print(find_lists(({\"a\": 1, \"b\": 2, \"c\": 3}, [5, 6, 7, 8])))\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    result = 0\n    for i in range(len(t)):\n        if type(t[i]) is list:\n            result += 1\n    return result\n\n# print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_of_lists):\n    return tuple_of_lists.count([])", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom typing import Any, List, Tuple\n\ndef find_lists(tuple_of_lists: Tuple[List[Any], ...]) -> int:\n    return len(tuple_of_lists)\n\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return sum(arr)\n    elif n == 2:\n        return abs(arr[0]-arr[1]) + abs(arr[1]-arr[2]) + abs(arr[2]-arr[3]) + abs(arr[3]-arr[4])\n    else:\n        return sum_Pairs(arr,n-1) + sum_Pairs(arr,n-2)\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(numbers, num_pairs):\n    # your code here\n    if num_pairs == 0:\n        return 0\n    elif num_pairs == 1:\n        return sum(numbers)\n    else:\n        mid = len(numbers) // 2\n        if len(numbers) % 2 == 0:\n            return sum(numbers[0:mid]) + sum_Pairs(numbers[mid:len(numbers)], num_pairs-1)\n        else:\n            return sum(numbers[0:mid]) + sum_Pairs(numbers[mid:len(numbers)+1], num_pairs-1)\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\n#Solution 1\ndef sum_Pairs(arr,n):\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                res += abs(arr[i] - arr[j])\n    return res\n\n#Solution 2\ndef sum_Pairs(arr,n):\n    res = 0\n    for i in range(n-1):\n        res += max(arr[i],arr[i+1]) - min(arr[i],arr[i+1])\n    return res\n\n#Solution 3\ndef sum_Pairs(arr,n):\n    res = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            res += max(arr[i],arr[j]) - min(arr[i],arr[j])\n    return res\n\n#Test Case", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    sum = 0\n    for i in range(0, n):\n        for j in range(i+1,n):\n            sum += abs(arr[i]-arr[j])\n\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,length):\n\tsum=0\n\tfor i in range(0,length):\n\t\tfor j in range(i+1,length):\n\t\t\tsum+=abs(arr[i]-arr[j])\n\treturn sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    return sum(abs(arr[i]-arr[j]) for i in range(n) for j in range(i+1,n))\n\ndef main():\n    arr= [1,8,9,15,16]\n    n= len(arr)\n    print(sum_Pairs(arr,n))\n    ", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    # Write your code here\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                count+=abs(arr[i]-arr[j])\n    return count\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(array, limit):\n    sum=0\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if(abs(array[i]-array[j]) <= limit):\n                sum += abs(array[i]-array[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    #Function to find the sum of absolute differences in all pairs of the given array\n    # arr: list\n    # n: int\n    # return: int\n    sum_d = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum_d += abs(arr[i] - arr[j])\n    return sum_d\n\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,k):\n    # Write your code here\n    n = len(arr)\n    arr1 = []\n    for i in range(n-1):\n        for j in range(i+1,min(k,n)):\n            arr1.append(abs(arr[i]-arr[j]))\n    return sum(arr1)\n    "], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(array, n):\n    diff_list = []\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if array[i] > array[j]:\n                diff = abs(array[i] - array[j])\n                if diff not in diff_list:\n                    diff_list.append(diff)\n    return max(diff_list)\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    #Your code here\n    max = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) > max:\n                max = abs(arr[i]-arr[j])\n    return max\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(A, B):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    assert len(A) == len(B)\n    max_diff = 0\n    for a, b in zip(A,B):\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,N):\n    if len(arr) == N:\n        max_Diff = max(arr[i]-arr[i+1] for i in range(len(arr)-1))\n    return max_Diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    i=0\n    max_val=0\n    for j in range(n):\n        for k in range(i+1,n):\n            max_val=max(max_val,abs(arr[j]-arr[k]))\n        i=i+1\n    return max_val\n#print(max_Abs_Diff((2,1,5,3),4))\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(array,max_Diff=0):\n    \"\"\"\n    :param array:\n    :param max_Diff:\n    :return: maximum difference between any two elements in a given array.\n    \"\"\"\n    for i in range(len(array)-1):\n        for j in range(i+1,len(array)):\n            if array[i] != array[j]:\n                if abs(array[i] - array[j]) > max_Diff:\n                    max_Diff = abs(array[i] - array[j])\n    return max_Diff\n\narray = [2,1,5,3]", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,d):\n    m = d\n    i = 0\n    while i < len(arr)-1:\n        if abs(arr[i]-arr[i+1]) > m:\n            m = abs(arr[i]-arr[i+1])\n        i += 1\n    return m\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(array,target):\n\n    array.sort()\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if abs(array[i]-array[j]) > target:\n                return abs(array[i]-array[j])\n    return 0\n\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(A,max):\n    max=max-min(A)\n    return max\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr, n):\n    arr = sorted(arr)\n    res = abs(arr[1] - arr[0])\n    for i in range(len(arr) - 2):\n        res = max(res, abs(arr[i+2] - arr[i]))\n    return res\n\n\n# + id=\"l04rB3J12v3x\"\n# %%writefile max_Sum_Subarray.py"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    total=0\n    for c in string:\n        total+=ord(c)\n    return total\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    # Your code here\n    pass\n\ndef test_function(test_case):\n    assert ascii_value_string(test_case[0]) == test_case[1]\n\ntest_function([\"python\", 112])\ntest_function([\"the\", 104])\ntest_function([\"cat\", 99])\ntest_function([\"blue\", 116])\ntest_function([\"abcdef\", 100])\ntest_function([\"w3resource\", 119])\ntest_function([\"\", 0])\ntest_function([\"space\", 32])\ntest_function([\"abc\", 97])\ntest_function([\" \", 32])\ntest_function([\"1234567890\", 57])\ntest_function([\"a \", 97])\ntest_function([\"a+b\", 97])\ntest_function([\"@1\", 64])\ntest_function([\"\\n\", 10])\ntest_function([\"Python\", 80])\ntest_function([\"a+b=\", 97])\ntest_function([\"=b\", 61])\ntest_function([\"!@#\", 33])\ntest_function([\"===\", 61])\ntest_function([\"abcde=\", 97])\ntest_function([\"abcde\", 97])\ntest_function([\"-\", 45])\ntest_function([\"abcde-\", 97])\ntest_function([\"a1b2c3d4e5\", 97])\ntest_function([\"a1b2c3d4e5-\", 97])\ntest_function([\" \", 32])\ntest_function([\"a1b2c3d4e5 \", 97])\ntest_function([\"a1b2c3d4e5 =\", 97])\ntest_function([\"a1b2c3d4e5 = \", 97])\ntest_function([\"a1b2c3d4e5===\", 97])\ntest_function([\"a1b", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(s):\n    return sum([ord(x) for x in s])\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum([ord(char) for char in string])\n\n# Tests", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum([ord(i) for i in string])\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    sum = 0\n    for char in string:\n        sum += ord(char)\n    return sum\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    total = 0\n    for ch in s:\n        total += ord(ch)\n    return total\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(x) for x in string)\n\n\ndef is_all_numeric(string):\n    return all(x.isdigit() for x in string)\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum([ord(character) for character in string])\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(word):\n    return sum(ord(c) for c in word)\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, m, n):\n    if m == 0 or n == 0:\n        return 0\n\n    max_value = float('-inf')\n    next_row = triangle[m-1]\n    for i, value in enumerate(next_row):\n        if i != n-1:\n            max_value = max(max_value, value + max_path_sum(triangle, m-1, i))\n        else:\n            max_value = max(max_value, value)\n\n    return max_value\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    if triangle == []:\n        return 0\n    elif row == len(triangle):\n        return triangle[row - 1][col]\n\n    return max(triangle[row - 1][col], max_path_sum(triangle, row + 1, col) + triangle[row - 1][col])\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nimport unittest\n\n\ndef max_path_sum(triangle, row, col):\n    memo = [[None for _ in range(col)] for _ in range(row)]\n    max_sum = 0\n\n    def max_path_sum_recursive(r, c):\n        if r == 0:\n            return triangle[r][c]\n        if c == 0:\n            return max_path_sum_recursive(r-1, c)\n        if memo[r][c] is None:\n            memo[r][c] = max(triangle[r][c] + max_path_sum_recursive(r-1, c),\n                            max_path_sum_recursive(r, c-1))\n        return memo[r][c]\n\n    max_sum = max_path_sum_recursive(row-1, col-1)\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    if row == 0:\n        return triangle[0][col]\n    if col == 0:\n        return triangle[row][col]\n    if col == row:\n        return max(triangle[row][col], triangle[row-1][col])\n    else:\n        return max(triangle[row][col], triangle[row-1][col] + triangle[row][col-1])\n\ndef test_max_path_sum():\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, m, n):\n    if m == 1:\n        return triangle[0][n-1]\n    if n == 1:\n        return triangle[m-1][0]\n    return max(triangle[m-1][n-1], triangle[m-1][n-2] + triangle[m-1][n])\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i, j):\n    if i == len(triangle)-1:\n        return triangle[i][j]\n    if triangle[i][j] == -1:\n        return triangle[i][j]\n    if j == 0:\n        return max(max_path_sum(triangle, i+1, j), triangle[i][j] + triangle[i+1][j])\n    elif j == 1:\n        return max(max_path_sum(triangle, i+1, j), triangle[i][j] + triangle[i+1][j])\n    else:\n        return max(max_path_sum(triangle, i+1, j), triangle[i][j] + triangle[i+1][j])\n\ndef test_max_path_sum():\n    triangle = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\n    assert max_path_sum(triangle, 2, 2) == 14\n\ntest_max_path_sum()", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    if row == len(triangle):\n        return triangle[-1][-1]\n\n    if col == 0:\n        return max_path_sum(triangle, row + 1, 1)\n\n    if col == row:\n        return max_path_sum(triangle, row, col - 1)\n\n    return triangle[row][col] + max(max_path_sum(triangle, row + 1, col),\n                                    max_path_sum(triangle, row, col - 1))\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    if col == 0:\n        return triangle[row][col]\n    elif col == 1:\n        return max(triangle[row - 1][col], triangle[row - 1][col - 1])\n    else:\n        return max(triangle[row - 1][col], triangle[row - 1][col - 1], max_path_sum(triangle, row, col - 1))\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, max_row, max_col):\n    dp = [[-float('inf')] * max_col for i in range(max_row + 1)]\n    for i in range(max_row + 1):\n        for j in range(max_col + 1):\n            if i == 0:\n                dp[i][j] = triangle[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j]\n            elif i == j:\n                dp[i][j] = max(triangle[i - 1][j], dp[i - 1][j - 1]) + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + triangle[i][j]\n\n    return dp[max_row][max_col]\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    # YOUR CODE GOES HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    # Your code here\n    pass", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    m=max(n//2,1)\n    return sum([int(c) for c in str(n-n//2+m-1)])\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(number):\n    \"\"\"\n    Parameters\n    ----------\n    number : int\n        number\n\n    Returns\n    -------\n    int\n        number\n    \"\"\"\n    max_i = number // 10\n    max_j = number % 10\n    if max_i > max_j:\n        return number - max_i + max_j\n    else:\n        return number + max_i - max_j", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    if n == 1:\n        return n\n    if n % 10 == 0:\n        return sum_digits_twoparts(n // 10)\n    else:\n        a = sum_digits_twoparts(n // 10)\n        b = n % 10\n        if a + b > n:\n            return b\n        else:\n            return a", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(x):\n    # Write your code here\n    max=0\n    for i in range(10,1000):\n        summ=0\n        for j in range(10):\n            if (x//i)%10==j:\n                summ+=j\n        if summ>max:\n            max=summ\n    return max", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    if n < 10:\n        return n\n    \n    num = str(n)\n    sum_digits = 0\n    \n    for digit in num:\n        sum_digits += int(digit)\n    \n    while sum_digits > 9:\n        s = str(sum_digits)\n        sum_digits = 0\n        for digit in s:\n            sum_digits += int(digit)\n    \n    if n == sum_digits:\n        return n\n    \n    sum_digits = 0\n    for digit in num:\n        sum_digits += int(digit)\n    \n    while sum_digits > 9:\n        s = str(sum_digits)\n        sum_digits = 0\n        for digit in s:\n            sum_digits += int(digit)\n    \n    return sum_digits\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(x):\n    y,z=0,0\n    while x:\n        y=x%10\n        z+=y\n        x//=10\n    return z\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n  while True:\n    if num < 10:\n      return num\n    else:\n      num = sum(list(map(int, str(num))))\n  return num\n\n# For testing", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    t1,t2=0,0\n    while n>0:\n        r=n%10\n        t1+=r\n        t2+=(r*r)\n        n//=10\n    return max(t1,t2)\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # fill in the answer for i = 0 to n-1\n    answer = [1] * n\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            answer[i] = answer[i - 1]\n        else:\n            answer[i] = answer[i - 1] + 1\n\n    # Now fill in the answer for i = n to 2n-1\n    for i in range(n, 2 * n - 1):\n        # check if the current element is equal to its previous element\n        # and if it is, then update the answer by the answer for i = 0 to n-1\n        if arr[i] == arr[i - n]:\n            answer[i] = answer[i - n]\n        else:\n            # otherwise, try to find the answer for i-1\n            for j in range(n, i):\n                if arr[i] == arr[j] and answer[j] >= answer[i - 1]:\n                    answer[i] = answer[j] + 1\n\n    # finally, return the answer for i = 0 to 2n-1\n    return max(answer)\n\n\n# +\n# Test cases:", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    # if the given array is empty return 0\n    if len(arr) == 0:\n        return 0\n    \n    # get the subsequence with the maximum sum\n    result = 0\n    subseq = []\n    for i in range(n):\n        # if the subsequence is empty\n        if len(subseq) == 0:\n            subseq.append(arr[i])\n        # if the first element of the subsequence is smaller than the current element\n        elif subseq[0] < arr[i]:\n            subseq.insert(0, arr[i])\n        # if the subsequence already exists and the current element is adjacent to the first element\n        elif subseq[0] == arr[i] and i == subseq[0] - 1:\n            pass\n        # if the current element is adjacent to the first element of the subsequence but the second element is smaller\n        # then replace the first element of the subsequence with the current element\n        elif subseq[0] == arr[i] and i > subseq[0] - 1 and subseq[1] < arr[i]:\n            subseq[0] = arr[i]\n        # if the current element is not adjacent to the first element of the subsequence,\n        # then get the longest subsequence ending with the first element\n        elif subseq[0] != arr[i] and i > subseq[0] - 1:\n            subseq = get_longest_subseq_with_diff_one(subseq)\n        # if the subsequence already exists and the current element is not adjacent to the first element\n        elif subseq[0] != arr[i] and i == subseq[0] - 1:\n            pass\n        else:\n            print(\"An error occurred\")\n            return 0\n        \n        # check if the current subsequence has the maximum sum\n        if len(subseq) > result:\n            result = len(subseq)\n            \n    return result\n\n# helper function to get the longest subsequence with", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        dp[i][i] = 1\n    for len_1 in range(2, n + 1):\n        for i in range(n - len_1 + 1):\n            j = i + len_1 - 1\n            if j == n - 1:\n                dp[i][j] = 1\n            elif arr[i] != arr[j]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n    return max([dp[i][n - 1] for i in range(n)])\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, sum):\n    if len(arr) == 0:\n        return 0\n    dp = [0 for i in range(sum+1)]\n    dp[0] = 1\n    for i in range(1, len(arr)):\n        for j in range(sum+1):\n            if j >= arr[i]:\n                dp[j] = max(dp[j], dp[j-arr[i]]+1)\n    return dp[sum]\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(array, n):\n    result = 0\n    for i in range(n):\n        max_sub_length = 0\n        for j in range(i, n):\n            if abs(array[i] - array[j]) == 1:\n                if max_sub_length < (j - i + 1):\n                    max_sub_length = (j - i + 1)\n\n        result = max(result, max_sub_length)\n\n    return result\n\narray = [1, 2, 3, 4, 5, 3, 2]", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n    # Write your code here\n    dp_prev = [1] * n\n    dp_current = [1] * n\n\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            dp_current[i] = dp_prev[i - 1] + 1\n        else:\n            dp_current[i] = 1\n\n    for i in range(n - 2, -1, -1):\n        if dp_prev[i] > dp_current[i + 1]:\n            dp_prev[i] = dp_current[i + 1]\n        else:\n            dp_prev[i] = 1\n\n    for i in range(n):\n        print(dp_prev[i], dp_current[i])\n\n    longest = 0\n    for i in range(n):\n        if dp_prev[i] > longest:\n            longest = dp_prev[i]\n\n    return longest\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, diff):\n    last_element = 0\n    count = 0\n    for element in arr:\n        if element - last_element == diff:\n            count += 1\n        else:\n            count = max(count, 1)\n\n        last_element = element\n\n    return count\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(nums, sum):\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    \"\"\"\n    length = len(nums)\n    dp = [[0 for j in range(sum + 1)] for i in range(length)]\n    for i in range(length):\n        dp[i][0] = 1\n    for i in range(length):\n        for j in range(1, sum + 1):\n            if i == 0:\n                dp[i][j] = 1\n            elif j == 0:\n                dp[i][j] = 0\n            elif nums[i] == j:\n                dp[i][j] = 1\n            elif nums[i] - j in dp and dp[i - 1][j - nums[i] + nums[i - 1]]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n\n    max_length = 0\n    start = 0\n    for i in range(length):\n        for j in range(sum, -1, -1):\n            if dp[i][j]:\n                max_length = max(max_length, j - start + 1)\n                start = j + 1\n    return max_length\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, goal):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(0, i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,c):\n    b=b\n    c=c\n    while b<=c:\n        if b==a:\n            return True\n        b=b+1\n    return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(limit, a, b):\n    n = 1\n    while n <= limit:\n        if n % a == 0 and n % b == 0:\n            return True\n        n += 1\n    return False\n\ndef test_does_Contain_B():\n    assert does_Contain_B(1,7,3) == True\n\ntest_does_Contain_B()\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n# +\ndef does_Contain_B(num, a, b):\n    if a == b:\n        return True\n    elif a > b:\n        return does_Contain_B(num, b, a)\n    else:\n        return does_Contain_B(num, a+1, b)\n\n# Test your code below:\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n# +\ndef does_Contain_B(a,b,c):\n    #write your code here\n    i = a\n    while(i<b+1):\n        j = 1\n        while(j<c+1):\n            if(i==b and j==c):\n                return True\n            elif(i==b and j<c):\n                j+=1\n            elif(i<b and j==c):\n                i+=1\n            elif(i<b and j<c):\n                i+=1\n                j+=1\n        i+=1\n    return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(A,B,C):\n    sum = A+B\n    if sum == C:\n        return True\n    else:\n        return False\n\n\n# +\n# If you have decided to write the functions, here is the code to test your implementation\n# for index,case in enumerate(testcases):\n#     print(index,\":\",case)\n#     assert does_Contain_B(case[0],case[1],case[2]) == case[3]\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(start, end, b):\n    i = start\n    while True:\n        if i >= end:\n            return False\n        if i == b:\n            return True\n        i += 1\n\ndef test_contains():\n    assert does_Contain_B(1, 7, 3) == True\n\ntest_contains()", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(n1, n2, n3):\n    print(\"No.\") if (n1 % n2 == 0 or n2 % n3 == 0 or n3 % n1 == 0) else print(\"Yes.\")\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,n):\n    while a<b:\n        if a==n:\n            return True\n        a+=1\n        if a==n:\n            return False\n    return False\n\n\n# -\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(num, a, b):\n    result = num\n    if num==a:\n        return True\n    elif num==b:\n        return True\n    elif num>a and num<b:\n        return False\n    elif num<a and num>b:\n        return does_Contain_B(result, b, a)\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n\ta_1 = b\n\ta_2 = c\n\twhile a_2 < b:\n\t\ta_1 = a_1 + a_2\n\t\ta_2 = a_2 + a\n\n\tif a_1 == a:\n\t\treturn True\n\telse:\n\t\treturn False\n\n#print(does_Contain_B(1,7,3))\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\nimport math\n\ndef is_coprime(num1, num2):\n    return math.gcd(num1,num2) == 1\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(x,y):\n    if y == 0:\n        return False\n    while y != 0:\n        a,b = x%y, y\n        x,y = y,a\n    return x==1\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    from math import gcd\n    if b == 0:\n        return a == 1\n    if a == 0:\n        return b == 1\n    return a%b == 0 and b%a == 0\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\nimport math\n\ndef is_coprime(a,b):\n    return math.gcd(a,b) == 1", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(m, n):\n\t\"\"\"\n\t:param m: int\n\t:param n: int\n\t:return: Boolean\n\t\"\"\"\n\n\t# primes numbers (except 1)\n\tprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n\t# if m or n is negative, return false\n\tif (m < 1) or (n < 1):\n\t\treturn False\n\n\t# if m or n is 1, return true\n\tif (m == 1) or (n == 1):\n\t\treturn True\n\n\t# if m or n is prime, return false\n\tif m in primes or n in primes:\n\t\treturn False\n\n\t# otherwise calculate gcd using primes\n\tfor p in primes:\n\t\tif (m % p == 0) and (n % p == 0):\n\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a, b):\n    if a > b:\n        a, b = b, a\n\n    return a == 1 or a%b == 0\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n# MY CODE:\ndef is_coprime(a, b):\n  if (b==0) or (a==0):\n    return False\n  elif (a==1):\n    return True\n  elif (b==1):\n    return True\n  elif (a==b):\n    return False\n  elif (a%b==0):\n    return False\n  else:\n    return True\n\n# TEST CASES:", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(x, y):\n    if x > y:\n        x, y = y, x\n    if x == 0 or y == 0:\n        return False\n    d = 1\n    while d <= y:\n        if x % d == 0 and y % d == 0:\n            d += 1\n        else:\n            d += 1\n    return d > y", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n# def is_coprime(a, b):\n#     if a<b:\n#         a,b = b,a\n#     for i in range(2,b):\n#         if b%i==0:\n#             return False\n#     return True\n\ndef is_coprime(a, b):\n    if a<b:\n        a,b = b,a\n    if a%b==0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    if a == 0:\n        return True\n    elif a < 0 or b < 0:\n        raise ValueError('You cannot pass negative numbers to is_coprime!')\n    elif a == 1 or b == 1:\n        return False\n    elif a == b:\n        return False\n    elif a % b == 0:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nimport math\n\n\ndef merge(left, right):\n    merged = []\n\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n\n    return merged\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    left = merge_sort(arr[:math.ceil(len(arr) / 2)])\n    right = merge_sort(arr[math.ceil(len(arr) / 2):])\n    return merge(left, right)\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(A):\n    \"\"\"\n    :param A: list\n    :return: sorted list\n    \"\"\"\n    if len(A) == 0:\n        return []\n    elif len(A) == 1:\n        return A\n    else:\n        mid = len(A) // 2\n        A1 = merge_sort(A[:mid])\n        A2 = merge_sort(A[mid:])\n        return merge(A1, A2)\n\n\ndef merge(A, B):\n    \"\"\"\n    :param A: list\n    :param B: list\n    :return: sorted list\n    \"\"\"\n    i, j = 0, 0\n    res = []\n    while i < len(A) and j < len(B):\n        if A[i] <= B[j]:\n            res.append(A[i])\n            i += 1\n        else:\n            res.append(B[j])\n            j += 1\n    res.extend(A[i:])\n    res.extend(B[j:])\n    return res\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n\n        return merge(merge_sort(left_arr), merge_sort(right_arr))\n\n\ndef merge(left_arr, right_arr):\n    result = []\n    left_index = 0\n    right_index = 0\n\n    while left_index < len(left_arr) and right_index < len(right_arr):\n        if left_arr[left_index] < right_arr[right_index]:\n            result.append(left_arr[left_index])\n            left_index += 1\n        else:\n            result.append(right_arr[right_index])\n            right_index += 1\n\n    result.extend(left_arr[left_index:])\n    result.extend(right_arr[right_index:])\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(L):\n    if len(L) <= 1:\n        return L\n    m = len(L) // 2\n    left = L[:m]\n    right = L[m:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\n\n\ndef merge(L1, L2):\n    res = []\n    i = j = 0\n    while i < len(L1) and j < len(L2):\n        if L1[i] < L2[j]:\n            res.append(L1[i])\n            i += 1\n        else:\n            res.append(L2[j])\n            j += 1\n    res += L1[i:]\n    res += L2[j:]\n    return res\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) == 0:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        return merge(merge_sort(left), merge_sort(right))\n\ndef merge(left, right):\n    if len(left) == 0:\n        return right\n    elif len(right) == 0:\n        return left\n    else:\n        res = []\n        while len(left) > 0 and len(right) > 0:\n            if left[0] < right[0]:\n                res.append(left[0])\n                left = left[1:]\n            else:\n                res.append(right[0])\n                right = right[1:]\n        res += left\n        res += right\n        return res\n\ndef test():\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9, 8]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert merge_sort([]) == []\n    assert merge_sort([1]) == [1]\n    assert merge_sort([1, 2]) == [1, 2]\n    assert merge_sort([1, 2, 3]) == [1, 2, 3]\n    assert merge_sort([2, 1]) == [1, 2]\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\n# def merge_sort(input_array):\n#     # TODO: Implement\n#     return sorted(input_array)\n\n# def merge_sort(input_array):\n#     if len(input_array) < 2:\n#         return input_array\n#     mid = len(input_array) // 2\n#     left = input_array[:mid]\n#     right = input_array[mid:]\n#     return merge(merge_sort(left), merge_sort(right))\n\n# def merge(left, right):\n#     # TODO: Implement\n#     return left + right\n\n\ndef merge(left, right):\n    i = 0\n    j = 0\n    output_list = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            output_list.append(left[i])\n            i += 1\n        else:\n            output_list.append(right[j])\n            j += 1\n    while i < len(left):\n        output_list.append(left[i])\n        i += 1\n    while j < len(right):\n        output_list.append(right[j])\n        j += 1\n    return output_list\n\n\ndef merge_sort(input_array):\n    if len(input_array) < 2:\n        return input_array\n    mid = len(input_array) // 2\n    left = input_array[:mid]\n    right = input_array[mid:]\n    return merge(merge_sort(left), merge_sort(right))\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge(left, right):\n    merged = []\n    while left and right:\n        if left[0] < right[0]:\n            merged.append(left[0])\n            left = left[1:]\n        else:\n            merged.append(right[0])\n            right = right[1:]\n\n    if left:\n        merged.extend(left)\n    if right:\n        merged.extend(right)\n\n    return merged\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        lefthalf = arr[:mid]\n        righthalf = arr[mid:]\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i = 0  # index of lefthalf\n        j = 0  # index of righthalf\n        k = 0  # index of merged array\n\n        # traverse until both sides have elements\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                arr[k] = lefthalf[i]\n                i += 1\n            else:\n                arr[k] = righthalf[j]\n                j += 1\n            k += 1\n\n        # push remaining elements of lefthalf and righthalf, if any\n        while i < len(lefthalf):\n            arr[k] = lefthalf[i]\n            i += 1\n            k += 1\n\n        while j < len(righthalf):\n            arr[k] = righthalf[j]\n            j += 1\n            k += 1\n\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\n# Importing the unittest module\nimport unittest\n\n\ndef merge_sort(array):\n    if len(array) > 1:\n        mid = len(array) // 2\n        left_array = array[:mid]\n        right_array = array[mid:]\n\n        merge_sort(left_array)\n        merge_sort(right_array)\n\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left_array) and j < len(right_array):\n            if left_array[i] < right_array[j]:\n                array[k] = left_array[i]\n                i += 1\n            else:\n                array[k] = right_array[j]\n                j += 1\n            k += 1\n        while i < len(left_array):\n            array[k] = left_array[i]\n            i += 1\n            k += 1\n        while j < len(right_array):\n            array[k] = right_array[j]\n            j += 1\n            k += 1\n    return array\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    middle = len(arr)//2\n    left = merge_sort(arr[:middle])\n    right = merge_sort(arr[middle:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    '''\n    Inputs:\n    a, b, c  : coefficients of the parabola\n    Outputs:\n    (-0.3, 1.55)\n    '''\n    if a==0:\n        #x_vertex = 1/2*c\n        x_vertex = c/2\n        return (x_vertex, -a/2-c/4)\n    \n    x_vertex = (-b+sqrt(b*b-4*a*c))/(2*a)\n    y_vertex = (-b-sqrt(b*b-4*a*c))/(2*a)\n    return (x_vertex, y_vertex)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    x = -b/(2*a)\n    y = (-1/a)*((x*x)-(c/2))\n    return (x,y)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n\tif a == 0 and b == 0:\n\t\treturn (0,0)\n\telif a != 0:\n\t\tx1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n\t\tx2 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a)\n\t\treturn (x1, x2)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n\tx1=(-b+c**2/(4*a))**0.5\n\tx2=(-b-c**2/(4*a))**0.5\n\ty1=(-b+c**2/(4*a))**0.5\n\ty2=(-b-c**2/(4*a))**0.5\n\treturn (x1,y1),(x2,y2)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Solves the equation ax^2 + bx + c = 0, returns the vertex of the parabola as a tuple (x, y)\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + math.sqrt(discriminant))/(2*a)\n        x2 = (-b - math.sqrt(discriminant))/(2*a)\n        y1 = x1**2 - c/a\n        y2 = x2**2 - c/a\n        return min(x1, x2), min(y1, y2)\n    elif discriminant == 0:\n        x1 = (-b + math.sqrt(discriminant))/(2*a)\n        x2 = (-b - math.sqrt(discriminant))/(2*a)\n        y1 = x1**2 - c/a\n        y2 = x2**2 - c/a\n        return min(x1, x2), min(y1, y2)\n    elif discriminant < 0:\n        x1 = (-b - math.sqrt(discriminant))/(2*a)\n        y1 = x1**2 - c/a\n        return x1, y1\n\ndef test():\n    assert parabola_vertex(5, 3, 2) == (-0.3, 1.55)\n\ntest()\n\n\n# + id=\"j4f4yva36tmk\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"763f810e-f829-4e19-c94c-162473e61167\" executionInfo={\"status\": \"ok\", \"timestamp\": 1578356877153, \"user_tz\": 180, \"elapsed\": 1344, \"user\": {\"displayName\": \"<NAME>\",", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    return (-b/(2*a), (b*b-4*a*c)/(4*a*a))\n\ndef test_parabola_vertex():\n    assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\n# Slope is given by: m=(y2-y1)/(x2-x1). So the slope of a parabola is (y2-y1)/(x2-x1)=((y2-y1)/(x2-x1))^2\n# so the equation of a parabola is y^2=ax^2+bx+c, with m = (y2-y1)/(x2-x1)\ndef parabola_equation(a,b,c,x1,y1,x2,y2):\n    m = (y2-y1)/(x2-x1)\n    return (m*m - 4*a*c)/(4*a)\n\n\ndef test_parabola_equation():\n    assert parabola_equation(5,3,2,1,2,3,4)==(0.3, -0.55)\n\ndef parabola_equation_vertices(a,b,c,x1,y1,x2,y2):\n    m = (y2-y1)/(x2-x1)\n    return ((-b/(2*a)+m*m-4*a*c)/(4*a), (-b/(2*a)-m*m-4*a*c)/(4*a))\n\ndef test_parabola_equation_vertices():\n    assert parabola_equation_vertices(5,3,2,1,2,3,4)==(-0.3, -0.55)", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    \"\"\"\n    a,b,c: three real numbers\n    Returns the vertex of a parabola, (x,y).\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef test_parabola_vertex():\n    assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n    assert parabola_vertex(2,3,5)==(-1.5, 2.25)\n    assert parabola_vertex(2,1,5)==(-0.2, 1.05)\n    assert parabola_vertex(0,0,5)==(0.0, 0.0)\n    assert parabola_vertex(2,2,2)==(0.0, 0.0)\n    assert parabola_vertex(-1,2,5)==(-0.75, 1.75)\n    assert parabola_vertex(1,0,5)==(0.75, 0.75)\n    assert parabola_vertex(1,-1,5)==(-0.75, -1.75)\n    print('Passed all tests!')\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    D = b**2-4*a*c\n    if D<0:\n        return False\n    else:\n        x1 = (-b+sqrt(D))/(2*a)\n        x2 = (-b-sqrt(D))/(2*a)\n        return (x1, x2)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(x1,y1,x2,y2,x3,y3):\n    delta = y2-y1\n    a = delta**2/(x2-x1)\n    b = delta*y1/(x2-x1)-a*x1\n    c = y3-a*x3-b\n    d = c/a\n    x = (d-b)/(2*a)\n    y = a*x**2 + d\n    return x,y\n\ndef parabola_vertex2(x1,y1,x2,y2,x3,y3):\n    delta = y2-y1\n    a = delta**2/(x2-x1)\n    b = delta*y1/(x2-x1)-a*x1\n    c = y3-a*x3-b\n    x = (c-b)/(2*a)\n    y = a*x**2 + c\n    return x,y\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    pass\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l,s):\n    r = []\n    for i in l:\n        if i[s] not in r:\n            r.append(i[s])\n    return r\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, index):\n    new_list = []\n    for i in matrix:\n        new_list.append(i[index])\n    return new_list\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, element):\n    # Your code here.\n    return_value = []\n    for i in matrix:\n        if i == element:\n            return_value.append(element)\n    return return_value\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst,i):\n    for j in range(len(lst)):\n        result = []\n        for k in range(len(lst[j])):\n            if lst[j][k] == i:\n                result.append(lst[j][k])\n        return result\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lst,elem):\n    \"\"\"\n    This function takes a list and the element to search for\n    and returns a list of the specified element\n    \"\"\"\n    res = []\n    for i in lst:\n        for j in i:\n            if j == elem:\n                res.append(j)\n    return res\n\n\ndef main():\n    print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\n\nmain()", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lst, num):\n    lst_out = []\n    for element in lst:\n        if num in element:\n            lst_out.append(num)\n    return lst_out\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(arr, n):\n    return [x[n] for x in arr]\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l,e):\n\treturn [i[l.index(e)] for i in l]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_input,element):\n    if isinstance(element,int)==False:\n        return \"Input Error: element should be int\"\n    elif isinstance(list_input,list)==False:\n        return \"Input Error: list_input should be list\"\n    else:\n        result=[]\n        for i in range(len(list_input)):\n            result.append(list_input[i][element])\n        return result\n    ", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list, element):\n    result = []\n    for i in list:\n        if element in i:\n            result.append(i)\n    return result"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    number = int(number)\n    toggle_bit_number = number & 1\n    toggle_bit_number = int(not(toggle_bit_number))\n    toggle_bit_number = toggle_bit_number << 1\n    number = number ^ toggle_bit_number\n    return number\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num: int) -> int:\n    return num ^ num >> 1\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    return int(str(bin(number))[2:].replace('0', '1').replace('1', '0'))\n\n\n# def bit_toggle_number(number, bits_to_toggle):\n#     number_as_list = [int(x) for x in bin(number)[2:]]\n#     for i in range(len(number_as_list)):\n#         if i % 2 != 0 and bits_to_toggle[i]:\n#             number_as_list[i] = 1 - number_as_list[i]\n#         else:\n#             number_as_list[i] = number_as_list[i]\n#     return int(''.join(str(x) for x in number_as_list))\n\n\ndef bit_toggle_number(number, bits_to_toggle):\n    bits_to_toggle = bits_to_toggle.split(' ')\n    number = int(str(bin(number))[2:])\n    for i in bits_to_toggle:\n        if i:\n            number = number ^ 2 ** int(i)\n    return number\n\n\n# def bit_toggle_number(number, bits_to_toggle):\n#     bits_to_toggle = bits_to_toggle.split(' ')\n#     print(number, bits_to_toggle)\n#     number_as_list = [int(x) for x in bin(number)[2:]]\n#     for i in bits_to_toggle:\n#         number_as_list[int(i)] = 1 - number_as_list[int(i)]\n#     return int(''.join(str(x) for x in number_as_list))\n\n\n# def bit_toggle_number(number, bits_to_toggle):\n#     bits_to_toggle = bits_to_toggle.split(' ')\n#     print(number, bits_to_toggle)\n#     number_as_list = [int(x) for x in bin(number)[2:]]\n#     for i in range(len(number_", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    return number ^ number >> 1\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return (num >> 1) * 2\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num ^ 1\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number: int) -> int:\n    return int(bin(number)[2:][::2])\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    \"\"\"\n    :param n: positive number\n    :return: toggled even bits of n\n    \"\"\"\n    bits = list(bin(n)[2:])\n    # the last element of bits is always \"0\"\n    bits.pop()\n    toggled = [int(i) for i in bits]\n    for i in range(len(toggled)):\n        if i % 2 == 0:\n            toggled[i] = not toggled[i]\n    return int(\"\".join(map(str, toggled)))\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    \"\"\"toggle all even bits in the binary representation of n and return the result\"\"\"\n\n    # https://stackoverflow.com/questions/12742941/how-to-convert-a-binary-number-to-integer-in-python\n    # print(bin(n)[2:])\n    # https://stackoverflow.com/questions/18412557/python-how-to-get-the-binary-representation-of-a-number\n    return int(bin(n)[2:], 2) ^ n\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(a):\n    b = tuple([int(c) for c in a[0]])\n    c = tuple([int(d) for d in a[1]])\n    return b,c\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    tup1 = []\n    for el in tup:\n        tup1.append((int(el[0]), int(el[1])))\n    return tup1\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuples):\n    new_list = []\n    for value in tuples:\n        new_list.append((int(value[0]),int(value[1])))\n    return tuple(new_list)\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n# Write your code here\n\n# Testing:", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tu):\n\treturn tuple((int(i),int(j)) for i,j in tu)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(items):\n    \"\"\"\n    >>> tuple_int_str((('333', '33'), ('1416', '55'))) == ((333, 33), (1416, 55))\n    True\n    \"\"\"\n    for item in items:\n        if type(item[0]) == str:\n            item[0] = int(item[0])\n        if type(item[1]) == str:\n            item[1] = int(item[1])\n    return items\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup):\n    return tuple(int(x) for x in tup)\n\ntest_tuple_int_str_a = (333, 33)\ntest_tuple_int_str_b = (1416, 55)\ntest_tuple_int_str_c = (333, 33)\ntest_tuple_int_str_d = (1416, 55)", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_str):\n    # Your code here\n    return tuple(map(int, tuple_str))\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup):\n    return tuple((int(x) for x in y) for y in tup)\n\ndef tuple_int_str_recursive(tup):\n    return tuple((tuple_int_str(z) if isinstance(z, tuple) else (int(z),)) for z in tup)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup):\n    return tuple(map(int, tup))\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    pass", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(ls):\n    \"\"\"\n    ls: list of any type\n    Returns: list of length 2 tuples representing run-length encoding\n    \"\"\"\n    # Your code here\n    pass\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    return [[l.count(i), i] for i in set(l)]\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    new_l = []\n    for i in l:\n        if type(i) is int:\n            new_l.append([1,i])\n        elif type(i) is float:\n            new_l.append([1,i])\n        else:\n            new_l.append([i])\n    return new_l\n\n\n\n# def encode_list(l):\n#     new_l = []\n#     for i in l:\n#         if type(i) is int:\n#             new_l.append([1,i])\n#         elif type(i) is float:\n#             new_l.append([1,i])\n#         else:\n#             new_l.append([i])\n#     return new_l\n\n#assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n# assert encode_list([3.3, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14,", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\n#Define a function\ndef encode_list(l):\n    for i in l:\n        if type(i) is list:\n            print(i)\n            for j in i:\n                print(j)\n        else:\n            print(i)\n\n\n#Call the function", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    lst_out = []\n    for i in lst:\n        try:\n            lst_out.append([lst.count(i), i])\n        except:\n            lst_out.append([1, i])\n    return lst_out\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    if lst == []:\n        return []\n    else:\n        return [[lst[0], lst.count(lst[0])]] + encode_list(lst[1:])\n\ndef test_run_length_encoding():\n    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(L):\n    if not L:\n        return L\n    else:\n        L1 = []\n        for i in L:\n            if L.count(i) > 1:\n                L1.append([i, L.count(i)])\n        L1.extend(L)\n        return encode_list(L1)\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(input_list):\n    output = []\n    for i in range(len(input_list)):\n        if (i + 1 < len(input_list)) and input_list[i] == input_list[i + 1]:\n            output.append([input_list[i], 2])\n        else:\n            output.append([input_list[i], 1])\n    return output\n\n\n# -\n\n# ### 3. Write a function to decode the run-length encoded list to a list.\n#\n# assert decode_list([[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]) == [1,1,2,3,4,4.3,5,1]\n\ndef decode_list(input_list):\n    output = []\n    for i in range(len(input_list)):\n        for j in range(input_list[i][1]):\n            output.append(input_list[i][0])\n    return output\n\n\n# ### 4. Write a function to insert a binary tree into another tree.\n#\n# [5, 3, 10, 1, 7]\n#\n# 1\n# / \\\n# 3  7\n# / \\\n# 5  10\n\n# +\ndef insert(root, to_insert):\n    if root is None:\n        return to_insert\n    elif to_insert.value < root.value:\n        root.left = insert(root.left, to_insert)\n    else:\n        root.right = insert(root.right, to_insert)\n    return root\n\na = BST(5)\nb = BST(3)\nc = BST(10)\nd = BST(1)\ne = BST(", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    encoded_list = []\n    for i in range(len(lst)):\n        if i == 0:\n            encoded_list.append([1,lst[i]])\n        elif lst[i] == lst[i-1]:\n            encoded_list[len(encoded_list)-1][0] += 1\n        else:\n            encoded_list.append([1,lst[i]])\n    return encoded_list\n\ndef encode_list_with_counter(lst):\n    encoded_list = []\n    counter = 0\n    for i in range(len(lst)):\n        if i == 0:\n            encoded_list.append([1,lst[i]])\n            counter += 1\n        elif lst[i] == lst[i-1]:\n            encoded_list[len(encoded_list)-1][0] += 1\n        else:\n            encoded_list.append([1,lst[i]])\n            counter = 1\n    return encoded_list\n\ndef encode_list_with_counter_2(lst):\n    encoded_list = []\n    counter = 0\n    for i in range(len(lst)):\n        if i == 0:\n            encoded_list.append([1,lst[i]])\n            counter += 1\n        elif lst[i] == lst[i-1]:\n            encoded_list[len(encoded_list)-1][0] += 1\n        else:\n            encoded_list.append([counter,lst[i]])\n            counter = 1\n    return encoded_list\n\ndef encode_list_2(lst):\n    encoded_list = []\n    counter = 0\n    for i in range(len(lst)):\n        if i == 0:\n            encoded_list.append([1,lst[i]])\n        elif lst[i] == lst[i-1]:\n            encoded_list[len(encoded_list)-1][0] += 1\n        else:\n            encoded_list.append([1"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(a,n,k):\n    flag = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]>a[j]:\n                a[i],a[j] = a[j],a[i]\n                flag=1\n    if flag == 1:\n        return min_Ops(a,n,k)\n    elif flag == 0 and k==0:\n        return 0\n    else:\n        k=k-1\n        a[0],a[n-1] = a[n-1],a[0]\n        if flag == 1:\n            return min_Ops(a,n,k)\n        else:\n            return min_Ops(a,n,k)\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr, k, value):\n    if k == 1:\n        if value == 0:\n            return 0\n        else:\n            return k\n    elif k == 0:\n        return 0\n    if value != 0:\n        if value % arr[0] == 0:\n            return min_Ops(arr[1:], k, value//arr[0]) + 1\n        else:\n            return min_Ops(arr, k-1, value)\n    elif value == 0:\n        return min_Ops(arr[1:], k, value)\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(array, n, k):\n\n    count = 0\n    for i in range(k):\n        for j in range(n-1):\n            if array[j] > array[j+1]:\n                array[j],array[j+1] = array[j+1],array[j]\n                count += 1\n    return count\n\n\narray = [2,2,2,2]\nn = 4\nk = 3", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(elements, k, n):\n    \n    # your code here\n    \n    result = 0\n\n    if k > 0:\n        if k >= 2:\n            for i in range(len(elements) - 1):\n                for j in range(i + 1, len(elements)):\n                    if elements[i] != elements[j]:\n                        break\n                    else:\n                        elements[j] = n\n                        result += 1\n        else:\n            for i in range(len(elements) - 1):\n                if elements[i] != elements[i + 1]:\n                    break\n                else:\n                    elements[i + 1] = n\n                    result += 1\n    return result\n\n\n\n# Tests", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, i):\n    n = len(arr)\n    if i == n:\n        return k\n    return min(min_Ops(arr, k, i+1), min_Ops(arr, k-1, i+1))\n\n# Test cases\n# assert min_Ops([2,2,2,2],4,3) == 0\n# assert min_Ops([2,2,2,2],4,2) == 1\n# assert min_Ops([2,2,2,2],4,1) == 2\n# assert min_Ops([1,2,3,4],2,3) == 2\n# assert min_Ops([1,2,3,4],2,2) == 1\n# assert min_Ops([1,2,3,4],2,1) == 0\n# assert min_Ops([1,2,3,4,5,6,7],4,6) == 2\n# assert min_Ops([1,2,3,4,5,6,7],4,5) == 1\n# assert min_Ops([1,2,3,4,5,6,7],4,4) == 0\n# assert min_Ops([1,2,3,4,5,6,7],4,3) == 0\n# assert min_Ops([1,2,3,4,5,6,7],4,2) == 1\n# assert min_Ops([1,2,3,4,5,6,7],4,1) == 2\n# assert min_Ops([1,2,3,4,5,6,7],4,0) == 3\n# assert min_Ops([1,2,3,4,5,6,7],4,7) == 4\n# assert min_Ops([1,2,3,4,5,6,7],4,-1) == 3\n\n# print(min_Ops([1,2,3,4,5,6,7", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if k == 1:\n        return 1\n    if n > 2:\n        arr1 = [0]*(n-1)\n        arr2 = [0]*(n-1)\n        for i in range(n-1):\n            arr1[i] = arr[i]\n            arr2[i] = arr[i+1]\n        print(\"arr1 = \",arr1)\n        print(\"arr2 = \",arr2)\n        k1 = k // 2\n        k2 = k // 2\n        if k % 2 == 1:\n            k2 += 1\n        return min(k1+min_Ops(arr1,k1,n-1),k2+min_Ops(arr2,k2,n-1))\n\narr = [2,2,2,2]\nk = 4\nn = len(arr)", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,n):\n\t#code here\n\tif k==0:\n\t\treturn 0\n\tfor i in range(k):\n\t\tmin_Val = min(arr)\n\t\tindex_of_min = arr.index(min_Val)\n\t\tfor j in range(len(arr)):\n\t\t\tif j==index_of_min:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tif arr[j] > min_Val:\n\t\t\t\t\tarr[j] -= min_Val\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tcontinue\n\treturn min_Ops(arr,k-1,n)\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,N):\n\tif len(arr) < k:\n\t\treturn -1\n\telse:\n\t\tfor i in range(k):\n\t\t\tarr[i] = (N - sum(arr))/k\n\t\treturn k-1\n\ndef main():\n\tprint min_Ops([2,2,2,2],4,3) == 0\n\tprint min_Ops([1,1,1,1],4,5) == 3\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,p):\n    left = 0\n    right = p-1\n    while left <= right:\n        if arr[left] != arr[right]:\n            return k\n        left+=1\n        right-=1\n    return 0\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(nums,k,n):\n\tif n==0:\n\t\treturn k\n\tif n==1:\n\t\tif nums[0]!=0:\n\t\t\treturn min_Ops(nums,k-1,n-1)\n\t\telse:\n\t\t\treturn k\n\tif nums[n-1]!=0:\n\t\tif nums[n-1]!=nums[n-2]:\n\t\t\treturn min_Ops(nums,k-1,n-1)\n\t\telse:\n\t\t\treturn min_Ops(nums,k-1,n-2)\n"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    season=None\n    if day<10:\n        season='winter'\n    elif 10<=day<=20:\n        season='spring'\n    elif 20<=day<=31:\n        season='summer'\n    elif 31<=day<=40:\n        season='autumn'\n    return season\n\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month == 'January' or month == 'February' or month == 'March':\n        return 'winter'\n    elif month == 'April' or month == 'May' or month == 'June':\n        return 'spring'\n    elif month == 'July' or month == 'August' or month == 'September':\n        return 'summer'\n    elif month == 'October' or month == 'November' or month == 'December':\n        return 'winter'\n    else:\n        return 'error'\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n# add your code here\ndef month_season(month, day):\n    if month in ['January','February','March']:\n        return 'winter'\n    elif month in ['April','May','June']:\n        return 'spring'\n    elif month in ['July','August','September']:\n        return 'summer'\n    elif month in ['October','November','December']:\n        return 'fall'\n\n# test your function", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    season = \"\"\n    if (month == 'January' or month == 'February') and (day < 15):\n        season = \"winter\"\n    elif month == 'March' or month == 'April':\n        season = \"spring\"\n    elif month == 'May' or month == 'June':\n        season = \"summer\"\n    elif month == 'July' or month == 'August':\n        season = \"autumn\"\n    return season\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    season=''\n    if (day >=0) and (day <=10):\n        season='winter'\n    elif (day >10) and (day <=20):\n        season='spring'\n    elif (day >20) and (day <=30):\n        season='summer'\n    else:\n        season='fall'\n    return season\n\n\n# -\n\n# ** 6. Write a function to print the month name for the given month number. **\n\n# +", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n  if month == 'January':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'February':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'March':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'April':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'May':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'June':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'July':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'August':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'September':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'October':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'November':\n    if day == 1 or day == 21 or day == 31:\n      return \"winter\"\n    else:\n      return \"spring\"\n  elif month == 'December':\n    if day == 1 or day == 21 or day == 31", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    if month in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        if day in [1,31]:\n            return 'winter'\n        elif day in [2,30]:\n            return 'spring'\n        elif day in [4,31]:\n            return 'summer'\n        elif day in [6,30]:\n            return 'fall'\n        else:\n            return 'Invalid day.'\n    elif month in ['February']:\n        if day in [29,30]:\n            return 'winter'\n        else:\n            return 'Invalid day.'\n    else:\n        return 'Invalid month.'", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    months = ['January','February','March','April','May','June','July','August','September','October','November','December']\n    if day < 21:\n        print(months[months.index(month) - 1] + \" winter\")\n    elif day < 42:\n        print(months[months.index(month)] + \" spring\")\n    elif day < 62:\n        print(months[months.index(month) + 1] + \" summer\")\n    else:\n        print(months[months.index(month) + 2] + \" autumn\")\n\nmonth_season('January',4)\nmonth_season('September',21)\nmonth_season('October',63)\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    return 'winter' if month == 'January' and day < 15 else 'summer' if month == 'July' and day < 15 else 'spring' if month == 'May' and day < 20 else 'autumn'\n    \ndef month_season2(month, day):\n    if month == 'January' and day < 15:\n        return 'winter'\n    elif month == 'July' and day < 15:\n        return 'summer'\n    elif month == 'May' and day < 20:\n        return 'spring'\n    else:\n        return 'autumn'\n# Note: \n# 1. If you find this function hard to read, you may want to reorganize the conditionals.\n# 2. Note that you don't need to handle the special cases yourself - for example, February does not have a winter season! \n#    You can just hard code 'Not winter' for February.\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: tuple(str, int, int)\n    \"\"\"\n    try:\n        x = int(n / a)\n        y = n % a\n        return ('x = ', x, ', y = ', y)\n    except ValueError:\n        print('Failed')\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    Returns a tuple of values (x, y) that satisfy ax + by = n.\n    \"\"\"\n    # The answer is that x = 2 and y = 1.\n    # But, you can use this code to find the answer.\n\n    # x = -(b/a)\n    x = (-b + a**0.5) / a\n\n    # y = (n - ax)/b\n    y = (n - a*x) / b\n\n    return (f'x = {x:.1f}', f'y = {y:.1f}')\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\n# Write your solution here\ndef solution(a, b, n):\n    return ('x = ', a, ', y = ', n//a) if n % a == 0 else ('x = ', -b, ', y = ', -n//a)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = 0\n    y = 0\n    while a*x + b*y != n:\n        x += 1\n        y = n - a*x\n    return (\"x = \", x, \", y = \", y)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    (int, int, int) -> (str, int, str, int)\n    \"\"\"\n    if a == 0:\n        x = n // b\n    else:\n        x = n // b + 1\n    y = n - a * x\n\n    return 'x = ', x, ', y = ', y\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    return '', -1, -1\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    for x in range(1, n):\n        if (a * x + b) % n == 0:\n            return ('x = ', x, ', y = ', (a * x + b) // n)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    Given the coefficient a and the constants b and n, find the \n    values x and y satisfying the equation ax + by = n.\n    \"\"\"\n    if n == 0:\n        raise ValueError(\"n can't be 0\")\n    \n    try:\n        x = int(b / a)\n    except ZeroDivisionError:\n        raise ValueError(\"a can't be 0\")\n    \n    if n == a * x + b:\n        return f\"x = {x}, y = {n // a}\"\n    \n    if a > 0:\n        y = -1 * n // a\n        return f\"x = {x}, y = {y}\"\n    else:\n        y = n // a\n        return f\"x = {x}, y = {y}\"\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    Returns a tuple with x and y that satisfy ax + by = n\n    \"\"\"\n    # Do not edit the next line\n    assert n % a == 0 and n % b == 0\n    # YOUR CODE HERE\n    return None\n\ndef test_solution(a, b, n):\n    assert solution(a, b, n) == ('x = ', x, ', y = ', y)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = n // a\n    y = n - a*x\n    return ('x = ', x, ', y = ', y)\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(lst, lst2):\n    \"\"\"\n    lst = list to remove elements from\n    lst2 = list of elements to be removed\n    \"\"\"\n    return [element for element in lst if element not in lst2]\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(nums, to_remove):\n    return [x for x in nums if x not in to_remove]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(lst1, lst2):\n    # Your code here!\n    lst3 = []\n    for element in lst1:\n        if element not in lst2:\n            lst3.append(element)\n    return lst3\n\n# +\n# Test cases\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list_1, list_2):\n    list_3=[]\n    for i in list_1:\n        if i not in list_2:\n            list_3.append(i)\n    return list_3", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(l1,l2):\n    print(l1,l2)\n    for i in l2:\n        while i in l1:\n            l1.remove(i)\n    return l1\nl1 = [1,2,3,4,5,6,7,8,9,10]\nl2 = [2,4,6,8]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(my_list, elements):\n\tfor elem in elements:\n\t\tmy_list.remove(elem)\n\n\treturn my_list\n\n\ndef test_remove_elements():\n\tmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tassert remove_elements(my_list, [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\tassert remove_elements(my_list, [2, 4, 6, 8]) != [1, 3, 5, 7, 9, 10, 2, 4, 6, 8]\n\ndef test_remove_elements_empty():\n\tmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tassert remove_elements(my_list, []) == my_list\n\ndef test_remove_elements_no_match():\n\tmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tassert remove_elements(my_list, [11, 13]) == my_list\n\ndef test_remove_elements_all_match():\n\tmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tassert remove_elements(my_list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1,list2):\n    pass\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list)\n    assert isinstance(list2, list)\n    for item in list2:\n        list1.remove(item)\n    return list1\n\n\ndef test_remove_elements():\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    list2 = [2,4,6,8]\n    assert remove_elements(list1,list2) == [1, 3, 5, 7, 9, 10]\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(l1,l2):\n\tl3=[]\n\tfor x in l1:\n\t\tif x not in l2:\n\t\t\tl3.append(x)\n\treturn l3\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\n# My solution\n\ndef sum_series(n):\n    '''\n    n is the number of terms\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n# Pythonic solution\n\ndef sum_series(n):\n    '''\n    n is the number of terms\n    '''\n    return sum(range(1, n + 1))\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    '''Returns the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    '''\n    assert n > 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-1)\n\n\ndef test_sum_series():\n    assert sum_series(0)==0\n    assert sum_series(1)==1\n    assert sum_series(2)==3\n    assert sum_series(6)==12\n    assert sum_series(10)==20\n    assert sum_series(20)==42\n    assert sum_series(30)==64\n    assert sum_series(60)==126\n\ndef test_sum_series_exception_handling():\n    assert sum_series(-1) == 0\n    assert sum_series('foo') == 0\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    sum_n = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_n += i\n    return sum_n\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return n + sum_series(n-1)\n    else:\n        return n + sum_series(n-2)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = n * (n+1) // 2\n    return res\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    result=0\n    for i in range(n+1):\n        if i<=n-i:\n            result += i\n    return result", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    if n == 0:\n        return 0\n    total = (n * (n + 1)) / 2\n    return total\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    # your code here\n    sum_num = 0\n    for i in range(1,n+1):\n        sum_num = sum_num + i\n    return sum_num\n\n\ndef test_sum_series():\n    assert sum_series(6)==12\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    return n+sum_series(n-2)\n\ndef test_sum_series():\n    assert sum_series(6)==12\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n\tif n < 1:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\treturn n + sum_series(n - 1)\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(num_sides,side_length):\n    return (num_sides/2)*(side_length**2)\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n# The parameters of the function:\n# 1. The number of sides of the polygon,\n# 2. The length of each side of the polygon.\ndef area_polygon(n,s):\n    \"\"\"\n    Return the area of a regular polygon with n sides and side length s.\n    \"\"\"\n    return n*s*(s-s**2/4)/2\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\n# 6. Use the previous function to calculate the area of a pentagon.\n#    assert area_polygon(5,25) == 3125.0\n#\n# 7. Now use the previous function to calculate the area of a hexagon.\n#    assert area_polygon(6,30) == 4375.0\n#\n# 8. Create a function to calculate the area of a circle.\n#    assert area_circle(10)==314.1592653589793\n#\n# 9. Write a function that calculates the perimeter of a circle.\n#    assert perimeter_circle(10)==62.83185307179586\n#\n# 10. Write a function that calculates the area of a square.\n#    assert area_square(5)==25.0\n#\n# 11. Write a function that calculates the perimeter of a square.\n#    assert perimeter_square(5)==20.0\n#\n# 12. Write a function that calculates the area of a rectangle.\n#    assert area_rectangle(5,10)==50.0\n#\n# 13. Write a function that calculates the perimeter of a rectangle.\n#    assert perimeter_rectangle(5,10)==25.0\n#\n# 14. Use the functions you created to calculate the area of the following:\n#\n#      a. a circle with radius 5\n#      b. a square with side 15\n#      c. a rectangle with width 5 and length 10\n#      d. a pentagon with 5 sides\n#      e. a hexagon with 6 sides\n#      f. a trapezoid with width 10, height 5 and a slant height of 12.\n#\n#\n# 15. Write a function that calculates the perimeter of the following:\n#\n#      a. a circle with radius ", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(sides,side_length):\n    return sides*side_length**2/4\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(a,n):\n    return (a**2)*(n/2)*1.0000000000000006", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\n\n\ndef area_polygon(n, s):\n    \"\"\"\n    Returns the area of a regular polygon\n\n    :param n: the number of sides of the regular polygon\n    :param s: the length of the side of the regular polygon\n    :return: the area of the regular polygon\n    \"\"\"\n    return n * (s ** 2) / (4 * math.tan(math.pi / n))\n\n\ndef test_area_polygon():\n    assert area_polygon(4, 20) == 400.00000000000006\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(sides, height):\n    return (sides*height)/2\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(side,n):\n    return side*n/2\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(sides, radius):\n    \"\"\"\n    Write the function to calculate the area of the polygon\n    \"\"\"\n    area = 0\n    for i in range(sides):\n        area += (radius ** 2) / (2 * math.sin(math.pi / sides))\n    return area\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(sides,radius):\n  a=radius*radius*3.14\n  b=sides*radius*3.14/4\n  c=a+b\n  return c\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num, sum):\n    a=[]\n    sum=0\n    for i in range(1,num+1):\n        if num%i==0:\n            a.append(i)\n            sum=sum+i\n    return sum==sum(a)\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n, m):\n    if n==m:\n        return True\n    if n>m:\n        n,m = m,n\n    sum = 0\n    for i in range(1,n+1):\n        if n%i==0 and m%i==0:\n            sum+=i\n    return sum==n\n    \n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    if a==b:\n        return True\n    l=[]\n    for i in range(1,a):\n        if a%i==0 and b%i==0:\n            l.append(i)\n    return sum(l)==a+b\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    return (a**0.5) % 1 == (b**0.5) % 1\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a, b):\n    return (a%b==0) or (b%a==0)\n\ndef main():\n    a = int(input('a: '))\n    b = int(input('b: '))\n    print(areEquivalent(a,b))\n\nmain()\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1,num2):\n\tprint(\"Running areEquivalent for \"+str(num1)+\" and \"+str(num2))\n\tsum1 = 0\n\tsum2 = 0\n\tfor i in range(1,num1+1):\n\t\tif num1%i == 0:\n\t\t\tsum1 = sum1 + i\n\tfor i in range(1,num2+1):\n\t\tif num2%i == 0:\n\t\t\tsum2 = sum2 + i\n\tprint(\"Sum1 and sum2 are\",sum1,sum2)\n\treturn sum1 == sum2\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    if a==b:\n        return True\n    a_divisors = [1, a]\n    b_divisors = [1, b]\n    for i in range(2,a+1):\n        if a%i == 0:\n            a_divisors.append(i)\n    for i in range(2,b+1):\n        if b%i == 0:\n            b_divisors.append(i)\n    a_divisors.sort()\n    b_divisors.sort()\n    return a_divisors == b_divisors\n\n# assert areEquivalent(36,57) == False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n,m):\n    \"\"\"\n    n,m : any integer\n    \n    Function to check if two numbers are equivalent\n    \"\"\"\n    n1,n2=n,m\n    a=[i for i in range(1,n+1) if n%i==0]\n    b=[i for i in range(1,m+1) if m%i==0]\n    if sum(a) == sum(b):\n        return True\n    else:\n        return False\n    \n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    suma = 0\n    sumb = 0\n    for i in range(1,a+1):\n        if a%i==0:\n            suma += i\n    for j in range(1,b+1):\n        if b%j==0:\n            sumb += j\n    if suma==sumb:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    d_a = divisors(a)\n    d_b = divisors(b)\n\n    if len(d_a) != len(d_b):\n        return False\n    else:\n        d_a.sort()\n        d_b.sort()\n        for i in range(0, len(d_a)):\n            if d_a[i] != d_b[i]:\n                return False\n        return True\n\n#print(areEquivalent(36,57))\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    count = 0\n    for char in string.lower():\n        if string.count(char) != string.count(char.upper()):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(word):\n\tdict = {}\n\tfor word in word:\n\t\tdict[ord(word)] = dict.get(ord(word), 0) + 1\n\treturn dict.values()\n\ndef main():\n\tprint(count_char_position(\"xbcefg\"))\n\nmain()", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i].lower() == s[j].lower():\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(s):\n    s = s.lower()\n    print(s)\n    return len(s) - s.replace(\"a\", \"\").replace(\"b\", \"\").replace(\"c\", \"\").replace(\"d\", \"\").replace(\"e\", \"\").replace(\"f\", \"\").replace(\"g\", \"\").replace(\"h\", \"\").replace(\"i\", \"\").replace(\"j\", \"\").replace(\"k\", \"\").replace(\"l\", \"\").replace(\"m\", \"\").replace(\"n\", \"\").replace(\"o\", \"\").replace(\"p\", \"\").replace(\"q\", \"\").replace(\"r\", \"\").replace(\"s\", \"\").replace(\"t\", \"\").replace(\"u\", \"\").replace(\"v\", \"\").replace(\"w\", \"\").replace(\"x\", \"\").replace(\"y\", \"\").replace(\"z\", \"\").count(\"\")\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    count_upper = 0\n    count_lower = 0\n    for c in string:\n        if c.isupper():\n            count_upper += 1\n        if c.islower():\n            count_lower += 1\n    return count_upper + count_lower\n\n\ndef main():\n    assert count_char_position(\"xbcefg\") == 2\n    assert count_char_position(\"vwx\") == 1\n    print(\"Test passed\")\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    counter = 0\n    for char in string:\n        counter += 1 if char.islower() and string[0] == char else 0\n    return counter\n\n# Tests", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\nfrom collections import Counter\n\ndef count_char_position(str_input):\n    \"\"\" Count characters at same position in a given string (lower and uppercase characters) as in english alphabet. \"\"\"\n    count = Counter(str_input.lower())\n    return count[str_input[0]]", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    res = 0\n    for i in range(len(string)):\n        if string[i] == string.lower()[i]:\n            res += 1\n    return res\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n\treturn len([item for item in string.lower() if item == string[0].lower()])\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    counter = 0\n    for char in string:\n        if char.islower() and char.isupper():\n            counter += 1\n    return counter\n\ndef count_char_position_2(string):\n    counter = 0\n    for idx, char in enumerate(string):\n        if string[idx].islower() and string[idx].isupper():\n            counter += 1\n    return counter\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,xor):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]^arr[j]==xor:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(lis,k):\n    count=0\n    for i in range(len(lis)-1):\n        for j in range(i+1,len(lis)):\n            if(lis[i]^lis[j])==k:\n                count+=1\n                break\n    return count", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\n# TODO: Write your function here:\ndef find_even_Pair(lst, x):\n    \"\"\"\n    Return count of elements in lst, where xor of the elements is even.\n    lst: list of elements.\n    x: some element in lst.\n    \"\"\"\n    # initialize count to zero.\n    count = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if (lst[i]^lst[j] == x) and (lst[i]+lst[j] % 2 == 0):\n                count += 1\n    return count\n\n\n# Unit Test", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(l,x):\n\tcount=0\n\tfor i in range(len(l)):\n\t\tfor j in range(i+1,len(l)):\n\t\t\tif l[i]^l[j] == x:\n\t\t\t\tcount+=1\n\treturn count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(numbers, xor):\n    \"\"\"\n    Find the number of pairs of elements in numbers such that the xor of the elements is even.\n    \"\"\"\n    pairs = 0\n    for i in range(len(numbers)):\n        for j in range(i+1,len(numbers)):\n            if numbers[i]^numbers[j]==xor:\n                pairs+=1\n    return pairs\n\n\ndef test_find_even_Pair():\n    assert find_even_Pair([5,4,7,2,1],5) == 4\n    assert find_even_Pair([5,4,7,2,1],2) == 1\n\n# A variable that's not initialized with a value has a special value called None\n# It's used when a value has not been assigned yet, or if a value has been forgotten.\n\n# CAREFUL: you cannot assign None to an existing variable.\na = None", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr, n):\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] ^ arr[j] == n and arr[i]%2 == 0:\n                pair_count += 1\n    return pair_count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(lst, x):\n    x_sum = 0\n    res = 0\n    for elem in lst:\n        x_sum ^= elem\n    if x_sum == x:\n        res = len(lst)\n    return res\n\ndef main():\n    print(find_even_Pair([5,4,7,2,1],5))", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(array, x):\n    c=0\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if ((array[i] ^ array[j]) == x) and (x % 2 == 0):\n                c+=1\n    return c\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(list1,num):\n    len1=len(list1)\n    # if num==1:\n    #     return len1\n    res=0\n    for i in range(len1):\n        for j in range(len1):\n            if(i!=j):\n                if list1[i]^list1[j]==num:\n                    res+=1\n    return res\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(nums, x):\n    \"\"\"\n    :param nums:\n    :param x:\n    :return:\n    \"\"\"\n    count = 0\n    for i in range(0, len(nums)):\n        for j in range(i+1, len(nums)):\n            if(nums[i]^nums[j] == x):\n                count+=1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"find smallest power of 2 greater than or equal to n\"\"\"\n    return 1 << (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    return 2**(n-1).bit_length() + 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n\treturn int(2**math.ceil(math.log(n, 2)))\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    return 2**n\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n\treturn 2**n if n==0 else 2**(n-1) + 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n\tpower_Of_2 = 0\n\tfor i in range(1, n+1):\n\t\tpower_Of_2 = i\n\t\tif 2**i >= n:\n\t\t\treturn i\n\treturn i\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    This function takes in a positive number n and returns the smallest power of 2\n    greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 << (n-1).bit_length()\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n\treturn 2**int(math.log2(n + 1))\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    for i in range(n + 1):\n        if i == 0:\n            return i\n        elif (2 ** i) > n:\n            return 2 ** i\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    return 2**(n-1).bit_length()\n\n\ndef test():\n    assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(1) == 1\n    assert next_Power_Of_2(2) == 2\n    assert next_Power_Of_2(3) == 2\n    assert next_Power_Of_2(4) == 4\n    assert next_Power_Of_2(5) == 4\n    assert next_Power_Of_2(6) == 4\n    assert next_Power_Of_2(7) == 4\n    assert next_Power_Of_2(8) == 8\n    assert next_Power_Of_2(9) == 8\n    assert next_Power_Of_2(10) == 8\n    assert next_Power_Of_2(11) == 8\n    assert next_Power_Of_2(12) == 16\n    assert next_Power_Of_2(13) == 16\n    assert next_Power_Of_2(14) == 16\n    assert next_Power_Of_2(15) == 16\n    assert next_Power_Of_2(16) == 16\n    assert next_Power_Of_2(17) == 32\n    assert next_Power_Of_2(18) == 32\n    assert next_Power_Of_2(19) == 32\n    assert next_Power_Of_2(20) == 32\n    assert next_Power_Of_2(21) == 32\n    assert next_Power_Of_2(22) == 32\n    assert next_Power_Of_2(23) == 64\n    assert next_Power_Of_2(24) == 64\n    assert next_Power_Of_2(25) == 64\n    assert next_Power_Of_2(26) == 64\n    assert next_Power_Of"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\n#Solution\ndef frequency(array,key):\n\t#Write your code here\n\tcount = 0\n\tfor i in array:\n\t\tif i == key:\n\t\t\tcount += 1\n\n\treturn count\n\n#Sample Input\n#array = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\narray = [1,2,3]\nkey = 4\n\n#Sample Output\n#0\n\n#Solution\ndef frequency(array,key):\n\t#Write your code here\n\tcount = 0\n\tfor i in array:\n\t\tif i == key:\n\t\t\tcount += 1\n\n\treturn count\n\n#Sample Input\n#array = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\narray = [1,2,3]\nkey = 4\n\n#Sample Output\n#0\n\n#Solution\ndef frequency(array,key):\n\t#Write your code here\n\tcount = 0\n\tfor i in array:\n\t\tif i == key:\n\t\t\tcount += 1\n\n\treturn count\n\n#Sample Input\n#array = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\narray = [1,2,3]\nkey = 4\n\n#Sample Output\n#0\n\n#Solution\ndef frequency(array,key):\n\t#Write your code here\n\tcount = 0\n\tfor i in array:\n\t\tif i == key:\n\t\t\tcount", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\n# This is a function to find the frequency of a number in a given array.\ndef frequency(arr, num):\n\tfrequency = 0\n\tfor i in arr:\n\t\tif i == num:\n\t\t\tfrequency += 1\n\treturn frequency\n\n# Test case for frequency function\n# assert frequency([1,2,3],4) == 0\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array, num):\n    count = 0\n    for i in array:\n        if i == num:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array, target):\n    return array.count(target)\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(array, num):\n    count = 0\n    for i in array:\n        if i == num:\n            count = count + 1\n    return count", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(array,x):\n    count=0\n    for i in array:\n        if i==x:\n            count+=1\n    return count\n\n# Driver code\narray = [1, 2, 3, 4, 5]\nx = 4", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr,n):\n    count=0\n    for i in range(0,len(arr)):\n        if n == arr[i]:\n            count+=1\n    return count\n    ", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array, number):\n    # Write your code here\n\n#do not modify the code below\ntest = [1,2,3,4,5,6,7]", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, x):\n    return arr.count(x)\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, key):\n    \"\"\"\n    To find the frequency of a number in an array.\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == key:\n            count = count + 1\n    return count\n\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Returns the n-th Pell number.\n    \"\"\"\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    else:\n        return get_pell(n-2) + 2 * get_pell(n-1)\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    previous_number = 0\n    pell_number = 2\n    for i in range(n):\n        previous_number = pell_number\n        pell_number = (3 * pell_number) + 1\n    return previous_number\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_pell(n - 1) + get_pell(n - 2)\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nimport math\n\ndef get_pell(n):\n    \"\"\"\n    Returns the nth pell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n-1) + 2*get_pell(n-2)\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    x = 3\n    y = 2\n    for i in range(n-1):\n        x, y = y, (x + y) % 1000000007\n    return y\n\ndef test_get_pell():\n    assert get_pell(4) == 12\n\n\n# -\n\n# #### 6.\n#\n# Write a function to calculate the n-th tribonacci number.\n#\n# ```\n# assert tribonacci(7) == 1389537\n# ```\n\n# +\ndef tribonacci(n):\n    \"\"\"\n    Write a function to calculate the nth tribonacci number.\n    \"\"\"\n    # 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 497, 917, 1705, 3136, 5701, 9830, 17419, 31667, ...\n    t1, t2, t3 = 0, 1, 1\n    for i in range(n-3):\n        t1, t2, t3 = t2, t3, t1 + t2 + t3\n    return t3\n\ndef test_tribonacci():\n    assert tribonacci(7) == 1389537\n\n\n# -\n\n# #### 7.\n#\n# Write a function to calculate the nth super pell number.\n#\n# ```\n# assert super_pell(4) == 4\n# ```\n\n# +\ndef super_pell(n):\n    \"\"\"\n    Write a function to calculate the nth super pell number.\n    \"\"\"\n    # 3, 5, 15, 49, 169, 577, 1841, 6345, 20073, 68721, 218905, 745061, ", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n  if n == 1:\n    return 1\n  else:\n    return get_pell(n-1) + get_pell(n-2)\n\ndef test_get_pell():\n  assert get_pell(4) == 12\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n\tpass\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n - 1) + get_pell(n - 2)\n\n\ndef test_get_pell():\n    assert get_pell(0) == 0\n    assert get_pell(1) == 1\n    assert get_pell(2) == 3\n    assert get_pell(3) == 5\n    assert get_pell(4) == 12\n    assert get_pell(10) == 3524578\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(arr,s,e):\n    s=min(s,len(arr)-1)\n    e=max(e,0)\n    return sum(arr[s:e+1])\n\ndef sum_range_list_2(arr,s,e):\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return arr[0]\n    else:\n        return arr[s]+sum_range_list_2(arr,s+1,e-1)\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lst,start,end):\n    return sum(lst[start:end+1])\n\ndef sum_range_list_v2(lst,start,end):\n    return sum(lst[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(l,start,end):\n    # start =0\n    # end=len(l)-1\n    # l.sort()\n    # if start<0:\n    #     start=0\n    # if start>end:\n    #     start=end\n    # if end<0:\n    #     end=0\n    # if end>len(l)-1:\n    #     end=len(l)-1\n    # return sum(l[start:end+1])\n    return sum(l[start:end+1])\n\n# sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],8,10)", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(l, start, end):\n    sum = 0\n    for i in range(start, end):\n        sum += l[i]\n    return sum\n\ndef test_sum_range_list():\n    assert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\n\ntest_sum_range_list()\n\n# +", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(my_list,start,end):\n    sum_list = my_list[start:end]\n    sum = sum(sum_list)\n    return sum\n\n#my_list = [10,12,3,17,13,25,27,39,43,12,11,35,44,12]\n#print(sum_range_list(my_list,2,5))\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lst, low_i, high_i):\n    \"\"\"\n    Returns the sum of the numbers in the list between low_i and high_i.\n\n    If low_i is not in the list, it returns 0\n    If low_i is higher than high_i, it returns 0\n    If high_i is not in the list, it returns the sum of the numbers up to the end of the list.\n\n    lst - list of numbers\n    low_i - index of first number in range\n    high_i - index of last number in range\n\n    Examples\n    >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)\n    29\n    >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],10,10)\n    0\n    >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,8)\n    14\n    \"\"\"\n    if low_i not in lst:\n        return 0\n    if low_i > high_i:\n        return 0\n    if high_i not in lst:\n        return sum(lst[low_i:])\n    return sum(lst[low_i:high_i+1])\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list,start,end):\n    i=start\n    sum_list=[]\n    while i<end:\n        sum_list.append(list[i])\n        i+=1\n    return sum(sum_list)", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lista, indice1, indice2):\n    total=0\n    for i in range(indice1, indice2+1):\n        total+=lista[i]\n    return total\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(a,i,j):\n    return sum(a[i:j+1])\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list( lst, start, end ):\n    \"\"\"Sums the numbers in the list between the specified range.\"\"\"\n    lst = lst[start-1:end]\n    return sum(lst)\n\n# Tests"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    This function returns the perimeter of a pentagon\n    :param n: Number of sides of a pentagon\n    :return: The perimeter of a pentagon\n    \"\"\"\n    return n * 5 + n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    return (n*5)+4\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(num):\n    \"\"\"\n    Input: num (int) - number of sides of the polygon\n    Output: perimeter (float) - perimeter of the polygon\n    \"\"\"\n    return 5*num\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side_length):\n    return side_length*5\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\nimport math\n\ndef perimeter_pentagon(num_sides):\n    return (5 * num_sides)\n\n\ndef test_perimeter_pentagon():\n    assert perimeter_pentagon(5)==25\n    assert perimeter_pentagon(10)==50\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    args:n is an interger from 3 to 10.\n    return: the perimeter of a pentagon.\n    \"\"\"\n    if 3<=n<=10:\n        return 5*(2*n-1)\n    else:\n        return \"Wrong input value\"\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(number):\n    return 5*(number-2)\n\ndef main():\n    assert perimeter_pentagon(5)==25\n    print \"All tests passed.\"\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side_length):\n    \"\"\"Function to calculate perimeter of a pentagon.\n    \n    Arguments:\n        side_length (int): side length of a pentagon.\n        \n    Returns:\n        (int): perimeter of the pentagon\n    \"\"\"\n    return side_length * 5\n\n\n# ## Question 8\n#\n# The following code uses a while loop to increment the value of `n` by 1 until the value of `n` is greater than 10:\n#\n# ```python\n# n = 0\n# while n < 10:\n#     print(n)\n#     n += 1\n# ```\n#\n# Replace the `while` loop with a `for` loop that prints the numbers from 0 to 9, inclusive.\n#\n# ```\n# 0\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# ```\n\n# +\nn = 0\nwhile n < 10:\n    print(n)\n    n += 1\n\n# OR\n\nfor n in range(10):\n    print(n)\n\n\n# -\n\n# ## Question 9\n#\n# Implement the function `count_vowels` that accepts a string and returns the number of vowels.\n#\n# **Do not use the built-in string functions `count` or `count_letters` to solve this problem. We want to you to use only the string manipulation skills we have taught you in this lesson.**\n#\n# Examples:\n#\n# ```python\n# count_vowels('chicken') == 3\n# count_vowels('May the force be with you') == 3\n# count_vowels('May the 4th be with you') == 1\n# ```\n\ndef count_vowels(string):\n    \"\"\"Function to count the number of vowels in a string.\n    \n    Arguments:\n        string (str): string to check for vowels.\n        \n    Returns:\n        (int): number of vowels.\n    \"\"\"\n    vowels =", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(sides):\n\treturn sides*(sides+4)\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    if n == 3:\n        return 10\n    if n == 4:\n        return 18\n    return 25 + n*(3*n-1)/2\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    \"\"\"\n    Count the number of times character appears in the string\n    \"\"\"\n    count = 0\n    for letter in string:\n        if letter == \"std\":\n            count = count + 1\n    return count\n\n\n# Test cases", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    \"\"\"\n    Count the occurances of characters\n    \"\"\"\n    if isinstance(string, str):\n        return string.count(\"std\")\n    else:\n        return None\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    counter = 0\n    for i in str:\n        if i == 'std':\n            counter += 1\n    return counter\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    result = 0\n    for char in str:\n        if char == \"std\":\n            result += 1\n    return result\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s):\n    count = 0\n    for i in s:\n        if i == 's':\n            count += 1\n            if s[i+1] == 't':\n                count += 1\n            if s[i+2] == 'd':\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string: str) -> int:\n    \"\"\"\n    >>> count_occurance(\"letstdlenstdporstd\")\n    3\n    \"\"\"\n    count = 0\n    for i in string:\n        if i == \"s\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n#<NAME>\n#<EMAIL>\n#Codewars\n\ndef count_occurance(str):\n    count = 0\n    for i in range(len(str)-3):\n        if str[i:i+3] == \"std\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str1):\n\tcount = 0\n\tfor x in str1:\n\t\tif x == 's':\n\t\t\tcount += 1\n\t\tif x == 't':\n\t\t\tcount += 1\n\t\tif x == 'd':\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(text):\n    occurance = 0\n    for x in text:\n        if x == 's' and text[x+1] == 't' and text[x+2] == 'd':\n            occurance += 1\n    return occurance\n\n\ndef test_count_occurance():\n    assert count_occurance(\"letstdlenstdporstd\") == 3\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    # write your code here\n    alphanumeric = ''\n    for i in s:\n        if i.isalnum():\n            alphanumeric += i\n    return alphanumeric\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(x):\n    import re\n    return re.sub(r'[^\\w\\s]', '', x)\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(s):\n    return \"\".join(c for c in s if c.isalnum())\n\n\n# -\n\n# ## 7. Write a function to take a string as input and return the number of vowels in the string.\n\n# +", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(x):\n    import re\n    # s.replace(old, new, count)\n    # Return a copy of the string with all occurrences of substring old replaced by new.\n    # The optional argument count, if given, will only replace the first count occurrences.\n    return re.sub(r\"[^\\w]\", \"\", x)\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(text):\n    new_string = \"\"\n    for i in text:\n        if i.isalnum():\n            new_string+=i\n    return new_string\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\n# def remove_splchar(str1):\n#     # TODO: Write your code here\n#     # print(str1)\n#     # for i in str1:\n#     #     if i.isalnum():\n#     #         print(i)\n#     #         print(i.isalnum())\n#     #     else:\n#     #         print(\"not alnum\")\n#     # print(\"------------------------------\")\n#     res = \"\"\n#     for i in str1:\n#         if i.isalnum():\n#             res += i\n#         else:\n#             continue\n#     return res\n\ndef remove_splchar(str1):\n    # TODO: Write your code here\n    return \"\".join(c for c in str1 if c.isalnum())\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(my_string):\n  return ''.join(i for i in my_string if i.isalnum())\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(str):\n    newstr=''\n    for i in str:\n        if i.isalnum():\n            newstr+=i\n        else:\n            continue\n    return newstr"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(list_of_pairs):\n    keyvalue_dict = {}\n    for i in list_of_pairs:\n        if i[0] not in keyvalue_dict.keys():\n            keyvalue_dict[i[0]] = []\n        keyvalue_dict[i[0]].append(i[1])\n    return keyvalue_dict\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(pairs):\n    result = {}\n    for pair in pairs:\n        key = pair[0]\n        value = pair[1]\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(seq):\n    d = {}\n    for k,v in seq:\n        d.setdefault(k, []).append(v)\n    return d\n\n# TESTS", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(lst):\n    result = dict()\n    for key, value in lst:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result\n\n\ndef test_group_keyvalue():\n    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(lst):\n    d = {}\n    for key, val in lst:\n        if key in d:\n            d[key].append(val)\n        else:\n            d[key] = [val]\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\nfrom typing import List\n\n\ndef group_keyvalue(sequence: List[tuple]) -> dict:\n    \"\"\"\n    Group sequence of (key, value) pairs into a dictionary of lists.\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    \"\"\"\n    d = {}\n    for key, value in sequence:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n\ndef group_keyvalue_rec(sequence: List[tuple]) -> dict:\n    \"\"\"\n    Group sequence of (key, value) pairs into a dictionary of lists.\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    \"\"\"\n    d = {}\n    for key, value in sequence:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].append(value)\n    return d\n\n\ndef group_keyvalue_2(sequence: List[tuple]) -> dict:\n    \"\"\"\n    Group sequence of (key, value) pairs into a dictionary of lists.\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    \"\"\"\n    d = {}\n    for key, value in sequence:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(keyvalue):\n\tgroups = {}\n\tfor key,value in keyvalue:\n\t\tgroups.setdefault(key, []).append(value)\n\treturn groups\n\n\n# TODO: write a function to group a sequence of items into a dictionary of lists.\ndef group_items(items):\n\tgroups = {}\n\tfor item in items:\n\t\tgroups.setdefault(item, []).append(item)\n\treturn groups\n\n\n# TODO: write a function to return the N most common items and their counts\ndef most_common(items, N):\n\tcounts = Counter(items)\n\treturn counts.most_common(N)\n\n\n# TODO: write a function to return the number of unique items in a list.\ndef unique(items):\n\treturn len(set(items))\n\n\n# TODO: write a function to return the number of unique items in a list with no duplicates.\ndef unique_no_dup(items):\n\treturn len(list(set(items)))\n\n\n# TODO: write a function to return the number of items that appear in both lists.\ndef common(items1, items2):\n\treturn len(set(items1) & set(items2))\n\n\n# TODO: write a function to find the N most common items and their counts and return them as a sorted list.\ndef most_common_sorted(items, N):\n\tcounts = Counter(items)\n\treturn sorted(counts.most_common(N), key=operator.itemgetter(1), reverse=True)\n\n\n# TODO: write a function to remove duplicates from a list with no side effects.\ndef remove_duplicates(items):\n\tnew_items = []\n\tfor item in items:\n\t\tif item not in new_items:\n\t\t\tnew_items.append(item)\n\treturn new_items\n\n\n# TODO: write a function to remove duplicates from a list with no side effects,", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(tuples):\n    d = dict()\n    for key, val in tuples:\n        if key in d:\n            d[key].append(val)\n        else:\n            d[key] = [val]\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(sequence):\n\t\"\"\"\n\tFunction to group a sequence of key-value pairs into a dictionary of lists.\n\tInput is a sequence of key-value pairs, which can be any iterable type (list, tuple, set, dictionary, etc.)\n\tOutput is a dictionary of lists with the keys being the unique values from the sequence\n\t\"\"\"\n\toutput = {}\n\tfor (key, value) in sequence:\n\t\tif key not in output:\n\t\t\toutput[key] = [value]\n\t\telse:\n\t\t\toutput[key].append(value)\n\treturn output", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(iterable):\n    result = {}\n    for item in iterable:\n        key = item[0]\n        value = item[1]\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n\ndef test_group_keyvalue():\n    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\n# 9. Flatten a list of lists into a single list.\n# assert flatten([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])==[1, 2, 3, 4, 5, 6, 7, 8]"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(parenthese):\n    stack = []\n    for i in range(len(parenthese)):\n        if parenthese[i] in \"(){}\":\n            stack.append(parenthese[i])\n        else:\n            if stack and stack.pop() == parenthese[i-1]:\n                pass\n            else:\n                return False\n    return len(stack) == 0\n\n# test", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    if string.count('(') == string.count(')'):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    stack = []\n\n    for i in range(len(s)):\n        if s[i] in '(){}[]':\n            stack.append(s[i])\n        elif s[i] in ')]:}':\n            if not stack or stack[-1] !='({['[s[i]]):\n                return False\n            else:\n                stack.pop()\n    return not stack\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    stack = []\n\n    if string == None or string == \"\":\n        return False\n\n    for s in string:\n        if s == \"(\":\n            stack.append(\")\")\n        elif s == \"{\":\n            stack.append(\"}\")\n        elif s == \"[\":\n            stack.append(\"]\")\n        elif stack == [] or stack[-1] != s:\n            return False\n        else:\n            stack.pop()\n\n    return stack == []\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(parenthese_str):\n    stack = []\n    for item in parenthese_str:\n        if item in '([{':\n            stack.append(item)\n        elif item in ')]}':\n            if len(stack) == 0 or (item != stack[-1] and item not in {')', '}'}) :\n                return False\n            stack.pop()\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if string == \"\":\n        return True\n    if len(string) == 1:\n        return False\n    if string[0] == '(' and string[-1] == ')':\n        return is_valid_parenthese(string[1:-1])\n    if string[0] == '[' and string[-1] == ']':\n        return is_valid_parenthese(string[1:-1])\n    if string[0] == '{' and string[-1] == '}':\n        return is_valid_parenthese(string[1:-1])\n    return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(s):\n    open_paren = {'{','[','('}\n    closed_paren = { '}':'{',']':']',')':')'}\n    stack = []\n\n    for i in s:\n        if i in open_paren:\n            stack.append(i)\n        elif i in closed_paren:\n            last_open = stack.pop()\n            if last_open != closed_paren[i]:\n                return False\n\n    return len(stack) == 0\n\ndef test():\n    assert is_valid_parenthese(\"(){}[]\")==True\n    assert is_valid_parenthese(\"({}[])\")==False\n    assert is_valid_parenthese(\"{{{}}}[]\")==False\n    assert is_valid_parenthese(\"\")==True\n    assert is_valid_parenthese(\"()\")==True\n    assert is_valid_parenthese(\"([)]\")==False\n    assert is_valid_parenthese(\"((())\")==False\n\ntest()\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n  stack = []\n  for char in string:\n    if char in '({[':\n      stack.append(char)\n    elif char in ')}]':\n      if len(stack) == 0:\n        return False\n      if stack.pop() == '{['[string.index(char) - 1]:\n        continue\n      return False\n  return len(stack) == 0\n\ndef is_valid_parenthese_2(string):\n  stack = []\n  for char in string:\n    if char in '({[':\n      stack.append(char)\n    elif char in ')}]':\n      if len(stack) == 0:\n        return False\n      if stack[-1] == '{['[string.index(char) - 1]:\n        stack.pop()\n      else:\n        return False\n  return len(stack) == 0\n\ndef is_valid_parenthese_3(string):\n  stack = []\n  for char in string:\n    if char in '({[':\n      stack.append(char)\n    elif char in ')}]':\n      if len(stack) == 0:\n        return False\n      if '{['[string.index(char) - 1] == stack.pop():\n        continue\n      return False\n  return len(stack) == 0\n\ndef is_valid_parenthese_4(string):\n  stack = []\n  for char in string:\n    if char in '({[':\n      stack.append(char)\n    elif char in ')}]':\n      if len(stack) == 0:\n        return False\n      if '{['[string.index(char) - 1] == stack[-1]:\n        stack.pop()\n      else:\n        return False\n  return len(stack) == 0\n\ndef is_valid_parenthese_5(string):\n  stack = []\n  for char in string:\n    if char in '({[':\n      stack.append(char)\n    elif char in ')}]':\n      if len(stack) == 0:\n        return False\n      if '{['[string.index(char) - 1] == stack[-1]:\n        stack.pop()\n      elif char == ')':\n       ", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n\tif len(string)%2 != 0:\n\t\treturn False\n\ttemp_dict = {}\n\tfor c in string:\n\t\tif c in temp_dict:\n\t\t\tif temp_dict[c] == 1:\n\t\t\t\ttemp_dict[c] = 0\n\t\telse:\n\t\t\ttemp_dict[c] = 1\n\treturn True if temp_dict.values()==[1,1,1,1] else False\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    stack = []\n    for char in string:\n        if char in \"({[\":\n            stack.append(char)\n        elif char in \")]}\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n            elif stack and stack[-1] == \"[\":\n                stack.pop()\n            elif stack and stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n        else:\n            return False\n    return len(stack) == 0\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\tif a==b==c:\n\t\treturn a+b+c\n\telif a==b!=c and a==c!=b and b==c!=a:\n\t\treturn a+b+c\n\telif a!=b==c and a!=c==b and c!=b==a:\n\t\treturn a+b+c\n\telse:\n\t\treturn -1\n\n# Write a function to find the area of a triangle.\ndef area_triangle(a,b,c):\n\tif a==b==c:\n\t\treturn a*b*c/2\n\telif a==b!=c and a==c!=b and b==c!=a:\n\t\treturn a*b*c/2\n\telif a!=b==c and a!=c==b and c!=b==a:\n\t\treturn a*b*c/2\n\telse:\n\t\treturn -1\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n\treturn 3.1416*r*r\n\n# Write a function to find the perimeter of a rectangle.\ndef perimeter_rectangle(l,b):\n\treturn 2*(l+b)\n\n# Write a function to find the area of a rectangle.\ndef area_rectangle(l,b):\n\treturn l*b\n\n# Write a function to find the circumference of a circle.\ndef circumference_circle(r):\n\treturn 2*3.1416*r\n\n# Write a function to find the surface area of a rectangle.\ndef surface_area_rectangle(l,b):\n\treturn 2*(l*b)\n\n# Write a function to find the surface area of a circle.\ndef surface_area_circle(r):\n\treturn 3.1416*r*r\n\n# Write a function to find the area of a square.\ndef area_square(a):\n\treturn a*a\n\n# Write a function to find the surface area of a square.\ndef surface_area_", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(l1, l2, l3):\n    \"\"\"\n    Function to find perimeter of a triangle.\n    \"\"\"\n    return (l1+l2+l3)\n\n\n# -\n\n# ## Task 3:\n# Write a function to find the area of a triangle.\n#\n# *assert* perimeter_triangle(10,20,30)==60\n\n# +\ndef perimeter_triangle(l1, l2, l3):\n    \"\"\"\n    Function to find perimeter of a triangle.\n    \"\"\"\n    return (l1+l2+l3)\n\ndef area_triangle(l1, l2, l3):\n    \"\"\"\n    Function to find area of a triangle.\n    \"\"\"\n    return 0.5*(l1*l2*l3)\n\n\n# -\n\n# ## Task 4:\n# Write a function to find the area of a circle.\n#\n# *assert* area_circle(5)==78.53981633974483\n\n# +\ndef perimeter_circle(r):\n    \"\"\"\n    Function to find perimeter of a circle.\n    \"\"\"\n    return 2*3.14*r\n\ndef area_circle(r):\n    \"\"\"\n    Function to find area of a circle.\n    \"\"\"\n    return 3.14*r**2\n\n\n# -\n\n# ## Task 5:\n# Write a function to find the volume of a sphere.\n#\n# *assert* volume_sphere(5)==122.67042063492063\n\n# +\ndef perimeter_sphere(r):\n    \"\"\"\n    Function to find perimeter of a sphere.\n    \"\"\"\n    return 2*3.14*r\n\ndef area_sphere(r):\n    \"\"\"\n    Function to find area of a sphere.\n    \"\"\"\n    return 4*3.14*r**2\n\ndef volume_sphere(r):\n    \"\"\"\n    Function to find volume of a sphere.\n    \"\"\"\n    return 4/3*3.14*r**3\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    \"\"\"Return the perimeter of a triangle.\n    \"\"\"\n    return a+b+c\n\ndef test_perimeter_triangle():\n    assert perimeter_triangle(10,20,30)==60\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a + b + c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\n# write your code here\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    return a+b+c", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(side1,side2,side3):\n  return side1+side2+side3\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\n# Write your code here\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n\n\n# ### 3.\n#\n# Write a function that takes a string of numbers as input and prints the following:\n# - For an empty string return \"No numbers\".\n# - If there is only one number in the string, print it.\n# - If there are more than one numbers in the string, return the largest.\n#\n# Example:\n# ```python\n# largest_number(\"100\") == 100\n# largest_number(\"100 50 20\") == 100\n# largest_number(\"30 100 20\") == 100\n# largest_number(\"\") == \"No numbers\"\n# ```\n\n# +\n# Write your code here\ndef largest_number(s):\n    s = s.split()\n    if len(s)==0:\n        return \"No numbers\"\n    elif len(s)==1:\n        return s[0]\n    else:\n        return max(s)\n\nlargest_number(\"100 50 20\")\n\n# -\n\n# ### 4.\n#\n# Write a function that takes a string as input, and outputs a string where each word is capitalized.\n#\n# Example:\n# ```python\n# capitalize_sentence(\"hello world\") == \"Hello World\"\n# capitalize_sentence(\"I am Sam\") == \"I Am Sam\"\n# ```\n\n# Write your code here\ndef capitalize_sentence(s):\n    s = s.split()\n    return \" \".join(list(map(str.capitalize, s)))\n\n\n# ### 5.\n#\n# Write a function that takes a list of numbers and returns the sum of all numbers in the list.\n#\n# Example:\n# ```python\n# sum_numbers([1, 2, 3]) == 6\n# sum_numbers([5, 1, 2]) == 8\n# sum_numbers([50, 40, 30]) == 120\n#"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(n,m):\n    for i in range(n,m+1):\n        for j in range(n,m+1):\n            if i*j == lcm(i,j):\n                return (i,j)\n\ndef lcm(a,b):\n    return a*b // gcd(a,b)\n\ndef gcd(a,b):\n    while b != 0:\n        a, b = b, a%b\n    return a\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nfrom math import gcd\n\ndef lcm(a,b):\n    return (a*b) // gcd(a,b)\n\ndef answer(low,high):\n    for a in range(low,high+1):\n        for b in range(low,high+1):\n            if lcm(a,b) in range(low,high+1):\n                return a,b\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(lcm_lower, lcm_upper):\n    for x in range(1, lcm_upper):\n        for y in range(1, lcm_upper):\n            if (x*y) >= lcm_lower and (x*y) <= lcm_upper:\n                return (x, y)\n    return -1, -1\n\ndef answer_part_2(lcm_lower, lcm_upper):\n    # Not complete yet.\n    return -1, -1\n\ndef test_answer():\n    assert answer(1, 10) == (1, 1)\n    assert answer(3, 8) == (3, 6)\n    assert answer(6, 9) == (6, 3)\n    assert answer(7, 10) == (7, 1)\n    assert answer(12, 20) == (12, 8)\n\ndef test_answer_part_2():\n    assert answer_part_2(1, 10) == -1, -1\n    assert answer_part_2(3, 8) == -1, -1\n    assert answer_part_2(6, 9) == -1, -1\n    assert answer_part_2(7, 10) == -1, -1\n    assert answer_part_2(12, 20) == -1, -1\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(lower, upper):\n    \"\"\"\n    Returns the smallest two numbers such that their lcm is within the given range.\n    \"\"\"\n    # Your code here\n    for i in range(lower, upper+1):\n        for j in range(lower, upper+1):\n            if lcm(i,j) >= lower and lcm(i,j) <= upper:\n                return (i,j)\n    return None\n\ndef lcm(x,y):\n    \"\"\"Returns the least common multiple of x and y\"\"\"\n    return (x*y)//gcd(x,y)\n\ndef gcd(x,y):\n    \"\"\"Returns the greatest common divisor of x and y\"\"\"\n    if x == y:\n        return x\n    return gcd(y, x % y)\n\ndef test_answer():\n    assert answer(3,8) == (3,6)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nfrom utils import is_prime\n\n\ndef get_primes(n):\n    primes = [True for i in range(n)]\n    i = 2\n    while (i*i < n):\n        if primes[i] == True:\n            j = i*i\n            while (j < n):\n                primes[j] = False\n                j += i\n        i += 1\n    return primes\n\n\nprimes = get_primes(1000000)\n\n\ndef answer(a, b):\n    for i in range(a, b):\n        for j in range(i, b):\n            if i*j == a*b:\n                return (i, j)\n    return None\n\n\n# def answer(a, b):\n#     primes = [True for i in range(a, b)]\n#     for i in range(2, b):\n#         if primes[i]:\n#             for j in range(i, b):\n#                 if i*j >= b:\n#                     break\n#                 if primes[j]:\n#                     if i*j < a:\n#                         break\n#                     else:\n#                         return (i, j)\n#     return None\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(minval,maxval):\n    for a in range(minval,maxval):\n        for b in range(a+1,maxval):\n            if a*b >= maxval:\n                break\n            if a%b == 0 and b%a == 0:\n                return (a,b)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(lcm, limit):\n    return (x,y)\n\ndef test_answer():\n    assert answer(3,8) == (3,6)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    pass\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef lcm(a,b):\n    \"\"\"\n    Return the lowest common multiple of a and b\n    \"\"\"\n    while a%b != 0:\n        temp = a\n        a = b\n        b = temp%b\n    return b*a\n\n\ndef answer(lcm_min, lcm_max):\n    \"\"\"\n    Return two distinct numbers such that their lcm lies within the given range\n    \"\"\"\n    ans = []\n    for i in range(lcm_min, lcm_max):\n        for j in range(i, lcm_max):\n            if lcm(i, j) in range(lcm_min, lcm_max):\n                ans.append((i, j))\n    return ans\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n  if a>b:\n    return answer(b,a)\n  for i in range(a,b+1):\n    if not a%i and not b%i:\n      return (a,i)\n\ndef answer(a,b):\n  if b<a:\n    return answer(a,b)\n  for i in range(a,b+1):\n    if not a%i and not b%i:\n      return (a,i)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(string, word):\n    assert len(word)==len(string)\n    for i in range(len(string)):\n        if string[i]!=word[i]:\n            return 'Not Matched!'\n    return 'Matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals, string):\n    for i in literals:\n        if i not in string:\n            return (\"Not Matched!\")\n    else:\n        return(\"Matched!\")\n\n# def test_string_literals():\n#     assert string_literals(['python', 'language'], 'python language') == ('Matched!')\n#     assert string_literals(['python', 'language'], 'python') == ('Not Matched!')\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(word_list,string):\n    \"\"\"\n    Input: list of strings, string\n    Output: string\n    \"\"\"\n    for word in word_list:\n        if word in string:\n            return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, text):\n    flag = 0\n    for literal in literals:\n        if literal in text:\n            flag = 1\n    return 'Matched!' if flag else 'Not Found!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, string):\n    for literal in literals:\n        if string.find(literal) != -1:\n            return 'Matched!'\n    return 'Not matched'\n\n\n#print(string_literals(['language'],'python language'))\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,data):\n    # Write your code here\n    for literal in literals:\n        if literal in data:\n            return 'Matched!'\n    return 'Not Matched'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals, string):\n    for l in literals:\n        if l in string:\n            return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,text):\n    for word in literals:\n        if word in text:\n            return 'Matched!'\n    return 'No Match!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,string):\n\t# Write your code here\n\tfor literal in literals:\n\t\tif string.find(literal)!= -1:\n\t\t\treturn \"Matched!\"\n\treturn \"Not Matched!\"\n\n\n# DO NOT CHANGE THE CODE BELOW", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return 'Matched!'\n    return 'Not Matched!'\n\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n  # Write your code here\n  if num >= 1:\n    num_temp = num\n    for i in range(2, num):\n      if num_temp % i == 0:\n        return False\n      else:\n        pass\n    return True\n  else:\n    return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if num < 0:\n        return False\n    elif num == 0:\n        return True\n    else:\n        for i in range(2, num // 2 + 1):\n            if num % i == 0:\n                return False\n        return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    \"\"\"Returns a boolean (True or False)\"\"\"\n    if num == 1 or num == 0:\n        return False\n\n    digits = str(num)\n\n    digit_sum = 0\n    for digit in digits:\n        digit_sum += int(digit)\n\n    if digit_sum == num:\n        return True\n    else:\n        return False\n\n\ndef test_is_num_keith():\n    \"\"\"Test the is_num_keith function\"\"\"\n    assert is_num_keith(14) == True\n    assert is_num_keith(2) == False\n    assert is_num_keith(0) == False\n    assert is_num_keith(1) == False\n    assert is_num_keith(-1) == False\n    assert is_num_keith(-14) == False\n    assert is_num_keith(0.0) == False\n    assert is_num_keith(10.0) == False\n\n\ndef is_sum_keith(num):\n    \"\"\"Returns a boolean (True or False)\"\"\"\n    if num < 0:\n        return False\n\n    if num == 0:\n        return True\n\n    digits = str(num)\n\n    digit_sum = 0\n    for digit in digits:\n        digit_sum += int(digit)\n\n    if digit_sum == num:\n        return True\n    else:\n        return False\n\n\ndef test_is_sum_keith():\n    \"\"\"Test the is_sum_keith function\"\"\"\n    assert is_sum_keith(14) == True\n    assert is_sum_keith(2) == False\n    assert is_sum_keith(0) == True\n    assert is_sum_keith(1) == True\n    assert is_sum_keith(-1) == False\n    assert is_sum_keith(-14) == False\n    assert is_sum_keith(0.0) == True\n    assert is_sum_keith(10.0) == False\n\n\ndef is_permutation(s1, s2):\n    \"\"\"Returns a boolean (True or False)\"\"\"\n    if len(s1) != len(", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n\t# write your solution here\n\tif n < 0:\n\t\treturn False\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    pass\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# YOUR CODE HERE\ndef is_num_keith(number):\n\tif number == 1:\n\t\treturn True\n\telif number < 1 or number > 1000000000:\n\t\treturn False\n\telse:\n\t\tif is_num_keith(number - 1):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n# DO NOT EDIT", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num < 0 or not isinstance(num, int):\n        return False\n\n    if num < 1:\n        return True\n\n    s = str(num)\n    for c in s:\n        if c == '0':\n            continue\n        elif c == '1':\n            if num != 1:\n                return False\n        else:\n            return False\n\n    return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    return n in range(2, n) or n%2 == 0\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n    return n in keith_nums\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    if num == 1:\n        return True\n    else:\n        return num % 10 == 0 and is_num_keith(num // 10)\n\n\ndef get_is_num_keith(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    return is_num_keith(num)\n\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,long1,lat2,long2):\n    '''\n    Given latitude and longitude of two points, calculate distance between these two points.\n    '''\n    #R = 6373.0  #radius of the earth\n    R = 6371000\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    long1 = radians(long1)\n    long2 = radians(long2)\n    dlat = lat2 - lat1\n    dlong = long2 - long1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlong/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    distance = R * c\n    return distance\n\n\n#test cases", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    d_lat = degrees(lat2 - lat1)\n    d_lon = degrees(lon2 - lon1)\n    a = sin(d_lat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(d_lon/2)**2\n    c = 2 * asin(sqrt(a))\n    d = 6367 * c\n    return d\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n  import math\n  R = 6371000 # metres\n  lat1 = math.radians(lat1)\n  lon1 = math.radians(lon1)\n  lat2 = math.radians(lat2)\n  lon2 = math.radians(lon2)\n  dlon = lon2 - lon1\n  dlat = lat2 - lat1\n  a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n  c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n  return R * c\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"g2x4tvs6zNsz\" outputId=\"f8779434-d066-4445-c56f-73791c726419\"\ndistance_lat_long(23.5,67.5,25.5,69.5)\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"zWm60n5U136Y\" outputId=\"9d7048a2-31c3-4d54-90fa-702960c0e90a\"\n# What is the fare for each passenger?", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    return 6367*np.arccos(np.sin(np.deg2rad(lat1))*np.sin(np.deg2rad(lat2))+np.cos(np.deg2rad(lat1))*np.cos(np.deg2rad(lat2))*np.cos(np.deg2rad(lon2-lon1)))\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat_1,long_1,lat_2,long_2):\n\tradius=6371000 #earth radius in meter\n\tlat_1,long_1,lat_2,long_2=radians(lat_1),radians(long_1),radians(lat_2),radians(long_2)\n\ta=sin((lat_1-lat_2)/2)**2\n\tb=sin((long_1-long_2)/2)**2\n\tdist=radius*(2*asin(sqrt(a+b)))\n\treturn dist\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    return haversine(lat1, lon1, lat2, lon2)\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat_1, long_1, lat_2, long_2):\n    R = 6373.0\n    dlat = (lat_2 - lat_1) * np.pi/180\n    dlong = (long_2 - long_1) * np.pi/180\n    lat1 = lat_1 * np.pi/180\n    lat2 = lat_2 * np.pi/180\n    a = (np.sin(dlat/2.0))**2 + np.cos(lat1)*np.cos(lat2)*(np.sin(dlong/2.0))**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    d = R * c\n    return d\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(latitude_1, longitude_1, latitude_2, longitude_2):\n    # We use the Haversine formula for the radius of the earth\n    R = 6373.0\n    lat1 = math.radians(latitude_1)\n    lat2 = math.radians(latitude_2)\n    lon1 = math.radians(longitude_1)\n    lon2 = math.radians(longitude_2)\n    \n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    \n    a = (math.sin(dlat/2))**2 + math.cos(lat1) * math.cos(lat2) * (math.sin(dlon/2))**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = R * c\n    \n    return distance\n    ", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: latitude of the first point\n    :param lon1: longitude of the first point\n    :param lat2: latitude of the second point\n    :param lon2: longitude of the second point\n    :return: distance in kms between two points\n    \"\"\"\n    p1 = Point(float(lon1), float(lat1))\n    p2 = Point(float(lon2), float(lat2))\n    return p1.distance(p2) / 1000", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    '''\n    Inputs:\n    lat1, lon1 - first point\n    lat2, lon2 - second point\n\n    Output:\n    distance between the points\n    '''\n    # c = 3443.9 # approximate value of earths circumference\n    # converting to radians\n    lat1, lat2 = map(radians, [lat1, lat2])\n    lon1, lon2 = map(radians, [lon1, lon2])\n\n    # calculating the difference of longitude and latitude\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    # calculating the haversine formula\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    r = 6373 # approximate value of earths radius in kilometers\n\n    # converting to meters\n    return c * r\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef longest_common_prefix(words, length):\n    \"\"\"\n    :type words: List[str]\n    :type length: int\n    :rtype: str\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0][:length]\n    if length == 0:\n        return \"\"\n    longest = words[0][:length]\n    for word in words:\n        if word[:length] == longest:\n            continue\n        if len(longest) < length:\n            longest = word[:length]\n        else:\n            break\n    return longest\n\ndef test_longest_common_prefix():\n    words = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"]\n    prefix = longest_common_prefix(words, 4)\n    assert prefix == \"ta\"\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# method 1: looping over all pairs\n# method 2: recursion\n# method 3: iteration using a stack\n\n\ndef common_prefix_loop(strs):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n)\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        for i in range(len(strs[0])):\n            same = True\n            for j in range(1, len(strs)):\n                if i >= len(strs[j]) or strs[j][i] != strs[0][i]:\n                    same = False\n                    break\n            if same:\n                return strs[0][:i+1]\n        return strs[0]\n\n\ndef common_prefix_recursion(strs):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n)\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        return common_prefix_recursion(strs[1:]) + strs[0][0:len(common_prefix_recursion(strs[1:]))]\n\n\ndef common_prefix_stack(strs):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n)\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        prefixes = []\n        for i in range(len(strs[0])):\n            flag = True\n            for j in range(1, len(strs)):\n                if i >= len(strs[j]) or strs[j][i] != strs[0][i]:\n                    flag = False\n                    break\n            if flag:\n                prefixes.append(strs[0][:i+1])\n        if not prefixes:\n            return \"\"\n        return common_prefix_stack(prefixes)\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(list_of_strings, size):\n    longest = list_of_strings[0]\n    longest_len = 0\n    for i in list_of_strings:\n        if len(i) > longest_len:\n            longest_len = len(i)\n            longest = i\n    return longest[:size]\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, max_length):\n    if not strings:\n        return \"\"\n    for i in range(min(len(strings[0]), max_length)):\n        if not all(strings[0][i] == s[i] for s in strings):\n            return strings[0][0:i]\n    return strings[0][0:max_length]\n\ndef test_common_prefix():\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 3) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 1) == 't'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 0) == ''\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], -1) == ''\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 5) == ''\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], -5) == ''\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 1000) == 'tablets'\n    assert common_prefix([], 1000) == ''\n    assert common_prefix([\"\"], 1000) == ''\n    assert common_prefix([\"tablets\"], 1000) == 'tablets'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\", \"tablets\"], 3) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\", \"tablets\"], 4) == 'tab'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\", \"tablets\"], 5) == 'tabl'\n    assert common_prefix([\"", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef longest_common_prefix(strs):\n    min_len = len(strs[0])\n    for i in range(1, len(strs)):\n        if len(strs[i]) < min_len:\n            min_len = len(strs[i])\n\n    common_prefix = ''\n    for i in range(min_len):\n        for j in range(len(strs)):\n            if i == len(strs[j]) - 1 or strs[j][i] != strs[j][i+1]:\n                return common_prefix\n        common_prefix += strs[0][i]\n\n    return common_prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    \"\"\"\n    >>> common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 4) == 'ta'\n    True\n    >>> common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 3) == 'ta'\n    True\n    >>> common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 2) == 'ta'\n    True\n    >>> common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 1) == 'ta'\n    True\n    >>> common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 0) == ''\n    True\n    >>> common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], -1) == ''\n    True\n    >>> common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 5) == 'tamarind'\n    True\n    \"\"\"\n    str_list = []\n    for s in strings:\n        str_list.append(list(s))\n    if len(str_list) == 0:\n        return ''\n    elif n <= 0:\n        return ''\n    else:\n        for i in range(len(str_list[0])):\n            if len(str_list[0]) != len(str_list[1]):\n                return ''\n            if str_list[0][i] != str_list[1][i]:\n                return str_list[0][:i]\n        return str_list[0][:n]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# As a first attempt, I tried to create a list of lists, that is:\n#   [['t', 'a', 'b', 'l', 'e', 't', 's'],\n#    ['t', 'a', 'b', 'l', 'e', 's', 't'],\n#    ['t', 'a', 'x', 'i'],\n#    ['t', 'a', 'm', 'a', 'r', 'i', 'n', 'd']\n#   ]\n# Then, I tried to find the longest common element in the lists.\n# However, I couldn't get that to work. I also tried to use a set, but that was also not working.\n# As a last attempt, I tried to find the longest common prefix, i.e. the common element that is at the beginning of the lists.\n# That worked, and I was able to implement the function.\n# Since the lists have a variable length, I used a variable 'len_list' in the function, that keeps track of the length of the longest list.\n\ndef common_prefix(word_list, len_list):\n    longest_prefix = word_list[0][:len_list]\n\n    for word in word_list:\n        if word[:len_list] != longest_prefix:\n            return longest_prefix[:len_list-1]\n        else:\n            return longest_prefix\n\n    return ''\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# Solution:\n\n# Python program to find the longest common prefix \n# in a given array of strings \ndef commonPrefix(inputStr): \n  \n    # Finding the length of the longest string in \n    # the given list of strings. \n    n = len(max(inputStr, key = len)) \n  \n    # Traverse all the strings \n    for i in range(n): \n  \n        # If any string doesn't contain \n        # character at current position then return empty string \n        if(not all(c[i] == inputStr[0][i] for c in inputStr)): \n            return \"\"\n        else: \n            return inputStr[0][:i]\n\n# This code is contributed by rishabh2000 \n# https://github.com/rishabh2000\n\n# Function to find the longest common prefix \n# in a given array of strings. \ndef commonPrefix(inputStr): \n  \n    # Finding the length of the longest string in \n    # the given list of strings. \n    n = len(max(inputStr, key = len)) \n  \n    # Traverse all the strings \n    for i in range(n): \n  \n        # If any string doesn't contain \n        # character at current position then return empty string \n        if(not all(c[i] == inputStr[0][i] for c in inputStr)): \n            return \"\"\n        else: \n            return inputStr[0][:i]\n\n# This code is contributed by rishabh2000 \n# https://github.com/rishabh2000"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(str):\n    alpha_pattern = re.compile('[a-zA-Z]')\n    numeric_pattern = re.compile('[0-9]')\n    special_pattern = re.compile('[^a-zA-Z0-9]')\n    list_alpha = alpha_pattern.findall(str)\n    list_numeric = numeric_pattern.findall(str)\n    list_special = special_pattern.findall(str)\n    return list_alpha, list_numeric, list_special, []\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(text):\n    \"\"\"\n    This function finds the uppercase characters, lowercase characters, special character and numeric value\n    \"\"\"\n    # Create a regular expression that finds uppercase characters, lowercase characters, special character and numeric value\n    character_regex = re.compile(\"[a-zA-Z0-9!,?\\\"#@$%^&*()]\")\n    \n    # Search for uppercase characters\n    result = character_regex.findall(text)\n    \n    # return the results\n    return result\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(txt):\n    \"\"\"\n    This function takes string input and returns the list of all uppercase characters, lowercase characters, special character and numeric values\n    \"\"\"\n    return (list(filter(lambda x: x.isupper(), txt)), list(filter(lambda x: x.islower(), txt)), list(filter(lambda x: not x.islower() and not x.isupper(), txt)), list(filter(lambda x: x.isdigit(), txt)))\n\ndef main():\n    print(find_character(\"ThisIsGeeksforGeeks\"))\n    print(find_character(\"12345\"))\n    print(find_character(\"GeeksQuiz\"))\n    print(find_character(\"IamGeeksQuiz\"))\n    print(find_character(\"5.0\"))\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    '''\n    :param string:\n    :return:\n    '''\n    up = []\n    low = []\n    spec = []\n    num = []\n    for char in string:\n        if char.isalpha():\n            if char.isupper():\n                up.append(char)\n            else:\n                low.append(char)\n        elif char.isnumeric():\n            num.append(char)\n        else:\n            spec.append(char)\n\n    return up, low, spec, num\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(inputString):\n    alpha_num = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9']\n    upper_case = ''\n    lower_case = ''\n    special_character = ''\n    numeric_value = ''\n    for char in inputString:\n        if char in alpha_num:\n            if char.isupper():\n                upper_case += char\n            elif char.islower():\n                lower_case += char\n            elif char.isnumeric():\n                numeric_value += char\n            else:\n                special_character += char\n    return upper_case,lower_case,special_character,numeric_value\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(text):\n    upper = []\n    lower = []\n    special = []\n    number = []\n    for x in text:\n        if x.isupper():\n            upper.append(x)\n        elif x.islower():\n            lower.append(x)\n        elif x.isnumeric():\n            number.append(x)\n        elif x.isalnum():\n            number.append(x)\n        elif x.isalpha():\n            lower.append(x)\n        else:\n            special.append(x)\n    return (upper, lower, special, number)\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    \"\"\"\n    Takes a string as input and returns the character types as a list\n    \"\"\"\n\n    return (list(filter(str.isupper, string)),list(filter(str.islower, string)),list(filter(lambda x: x not in string.printable, string)),list(filter(str.isdigit, string)))\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\n\ndef find_character(s):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    pattern = re.findall(\"[a-zA-Z]\", s)\n    pattern1 = re.findall(\"[0-9]\", s)\n    pattern2 = re.findall(\"[!@#$%&*()_+\\-=\\[\\]{};':\\\"\\\\|,.<>\\/?]\", s)\n\n    return pattern, pattern1, pattern2, []\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(s):\n    lowercase_values = []\n    uppercase_values = []\n    special_values = []\n    numeric_values = []\n    for letter in s:\n        if letter.islower():\n            lowercase_values.append(letter)\n        elif letter.isupper():\n            uppercase_values.append(letter)\n        elif letter.isdigit():\n            numeric_values.append(letter)\n        else:\n            special_values.append(letter)\n    return lowercase_values, uppercase_values, special_values, numeric_values\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    upper_case = ''\n    lower_case = ''\n    special = ''\n    numbers = ''\n\n    for i in string:\n        if i.isupper():\n            upper_case += i\n        elif i.islower():\n            lower_case += i\n        elif i.isalpha():\n            lower_case += i\n        elif i.isnumeric():\n            numbers += i\n        elif i.isalpha() and i.islower():\n            special += i\n        elif i.isalpha() and i.isupper():\n            special += i\n    return upper_case, lower_case, special, numbers\n\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == k:\n                count += 1\n    return count", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, low=0, high=len(arr)-1):\n    if len(arr) == 0: return 0\n    res = 0\n    for i in range(low, high+1):\n        for j in range(i+1, high+1):\n            if abs(arr[i] - arr[j]) == k:\n                res += 1\n    return res\n\n\ndef main():\n    print(count_pairs([], 5))\n    print(count_pairs([1, 5, 3, 4, 2], 5))\n    print(count_pairs([1, 5, 3, 4, 2], 3))\n    print(count_pairs([1, 5, 3, 4, 2], 6))\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(array, a, b):\n    array.sort()\n    if a > b:\n        a, b = b, a\n    n = len(array)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if array[j] - array[i] == a:\n                count += 1\n            elif array[j] - array[i] == b:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    \"\"\"\n        TC: O(N^2)\n        SC: O(1)\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n\n    return count\n\n\n# timeit count_pairs([1, 5, 3, 4, 2], 5, 3)\n# timeit count_pairs([1, 5, 3, 4, 2], 2, 3)\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(array, k, n):\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(array[i] - array[j]) == k:\n                count += 1\n    return count\n\n\n# Tests", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    if len(arr) == 0:\n        return 0\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j] and abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n\n\ndef main():\n    print(count_pairs([], 5, 0))\n    print(count_pairs([1, 5, 3, 4, 2], 5, 5))\n    print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n    print(count_pairs([1, 5, 3, 4, 2], 3, 5))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 1, 6))\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, n):\n    n = len(arr)\n    total = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                total += 1\n    return total\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\n# [2, 3, 4, 6, 8, 7]\n# 4\n# 1\n\n\n# Time: O(n^2) Space: O(1)\ndef count_pairs(arr, k, target):\n    arr = sorted(arr)\n    count = 0\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] < target:\n            count += right - left\n            left += 1\n        elif arr[left] + arr[right] > target:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return count\n\n\n# [1, 5, 3, 4, 2]\n# 5\n# 3\n\n# Time: O(n^2) Space: O(1)\ndef count_pairs_optimized(arr, k, target):\n    arr = sorted(arr)\n    count = 0\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] < target:\n            count += right - left\n            left += 1\n        elif arr[left] + arr[right] > target:\n            right -= 1\n        else:\n            left += 1\n            while left < len(arr) - 1 and arr[left] == arr[left + 1]:\n                left += 1\n            right -= 1\n            while right >= 0 and arr[right] == arr[right - 1]:\n                right -= 1\n    return count\n\n\n# Test", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k):\n\tarr.sort()\n\tcount = 0\n\tfor i in range(len(arr) - 1):\n\t\tif arr[i] + k == arr[i + 1]:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, n):\n    # Write your code here\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                ans += 1\n    return ans\n\n\ndef count_pairs2(arr, k, n):\n    # Write your code here\n    count_dict = {}\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                if arr[i] in count_dict:\n                    count_dict[arr[i]] += 1\n                else:\n                    count_dict[arr[i]] = 1\n    return sum(count_dict.values())\n\n\ndef count_pairs3(arr, k, n):\n    # Write your code here\n    # initialize an empty array of size n\n    count_array = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                # print(arr[i], arr[j])\n                # set the value of the array at index\n                # as the index of the first number in the pair\n                count_array[arr[i]] += 1\n    return sum(count_array)\n\n\ndef count_pairs4(arr, k, n):\n    # Write your code here\n    count_dict = {}\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                if arr[i] in count_dict:\n                    count_dict[arr[i]] += 1\n                else:\n                    count_dict[arr[i]] = 1\n    return sum(count_dict.values())\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(nums, num):\n    return [num for num in nums if num > num]\n\n#print greater_specificnum([220, 330, 500],200)==True\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(numbers,num):\n    return [x for x in numbers if x > num]\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst,x):\n    x1 = [x for x in lst if x > x1]\n    return x1 == True\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(a,b):\n    for x in range(len(a)):\n        if a[x] > b:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(li, num):\n    '''\n    li: a list\n    num: int\n    return: list\n    '''\n    result=[]\n    for item in li:\n        if item>num:\n            result.append(item)\n    return result", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\n# Do not use list comprehension\n# Do not use lambda functions\n\ndef greater_specificnum(list_of_nums, num):\n\n    output_list = []\n\n    for num in list_of_nums:\n\n        if num > num:\n\n            output_list.append(num)\n\n    return output_list\n\n\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(my_list,num):\n    for i in range(len(my_list)):\n        if my_list[i]>num:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(my_list,num):\n    for item in my_list:\n        if item > num:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list1,num):\n    result=False\n    for i in list1:\n        if i>num:\n            result=True\n    return result\n\ndef test_greater_specificnum():\n    assert greater_specificnum([220, 330, 500],200)==True\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(list, num):\n    return [value for value in list if value > num]\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return (-b/(2*a), (b*b-4*a*c)/(4*a*a))\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n  disc = b**2 - 4*a*c\n  if disc > 0:\n    disc = math.sqrt(disc)\n    return (-0.5*b - disc)/(2*a), (-0.5*b + disc)/(2*a)\n  elif disc == 0:\n    return (-0.5*b)/(2*a), (-0.5*b)/(2*a)\n  elif disc == -0:\n    print(\"Divided by zero\")\n  elif disc < 0:\n    return \"No real solutions\"\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n\treturn (-b + (b**2 - 4*a*c)**0.5)/2*a, (-b - (b**2 - 4*a*c)**0.5)/2*a\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return (a/2,(-b+sqrt(b**2-4*a*c))/2/a)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    if a==0:\n        return (float('nan'), float('nan'))\n    D = b**2 - 4*a*c\n    if D<0:\n        return (float('nan'), float('nan'))\n    x = (-b - sqrt(D))/(2*a)\n    y = (-b + sqrt(D))/(2*a)\n    return (x,y)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return (-b/(2*a), (b**2 - 4*a*c)/(4*a**2))\n\n\n# -\n\n# ## Example: (optional) Simple object-oriented Python\n#\n# A small example of an object-oriented python program.\n#\n# For more about this, see the [tutorial](http://nbviewer.ipython.org/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/04.05-Introducing-Classes.ipynb) by <NAME>.\n\n# +\nfrom scipy.optimize import minimize\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    \"\"\"\n    This function returns the focus of a parabola given the a,b, and c parameters.\n    a,b,c: the coefficients of the parabola\n    \"\"\"\n    \n    return (-b - ((b**2) - (4*a*c))**0.5) / (2*a), -((-b - ((b**2) - (4*a*c))**0.5) / (2*a))\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    x1 = (-b + (b**2 - 4*a*c)**(1/2))/(2*a)\n    y1 = (-b - (b**2 - 4*a*c)**(1/2))/(2*a)\n    return (x1, y1)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return None\n    x1 = (-b + math.sqrt(D))/(2*a)\n    x2 = (-b - math.sqrt(D))/(2*a)\n    return x1,x2\n\n# Tests:", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nfunction parabola_focus(a,b,c)\n    return (-b/2/a, sqrt(b^2-4*a*c)/2*a)\nend\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(s,lits):\n    if re.findall(r'\\b'+'|'.join(lits)+'\\b',s):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(input_string, search_words):\n    \"\"\"\n    input_string is a string of characters\n    search_words is a list of strings\n    \"\"\"\n    for word in search_words:\n        if re.findall(word, input_string) != []:\n            return \"Matched!\"\n    return \"No match.\"\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(sentence,words):\n    # get the literal string in a sentence\n    literal_str = ''.join([char for char in sentence if char.isalpha()])\n    # use re to get all the literals in sentence\n    literals = re.findall(r\"[a-zA-Z]+\",literal_str)\n    # check if all the literals in a wordlist are in the string\n    for word in words:\n        if word not in literals:\n            return 'No Match!'\n    return 'Matched!'\n\ndef test_check_literals():\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\ndef test_check_literals_2():\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['cat']) == 'No Match!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(text,lits):\n    for lit in lits:\n        if re.search(r'\\b'+lit+r'\\b', text):\n            return 'Matched!'\n    return 'No Match'\n\n\n# print(check_literals('The quick brown fox jumps over the lazy dog.',['fox']))\n# print(check_literals('The quick brown fox jumps over the lazy dog.',['cat']))", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(mystring,literals):\n    for literal in literals:\n        if literal in mystring:\n            print('Matched!')\n            return 'Matched!'\n        else:\n            print('Not Matched!')\n            return 'Not Matched!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string, literals):\n    return f'Matched!' if re.search(r'|'.join(literals), string) else 'No match'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(string,literals):\n    if any([re.search(literal,string) for literal in literals]):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n#print(check_literals('The quick brown fox jumps over the lazy dog.',['fox']))\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string,literals):\n    for lit in literals:\n        if lit in string:\n            return 'Matched!'\n    return 'Not Found!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(sentence, literals):\n    for literal in literals:\n        if re.search(literal, sentence):\n            return \"Matched!\"\n    return \"Not Matched!\"\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(text, literals):\n    \"\"\"\n    Check if any of the literals is found in text\n    :param text: text string\n    :param literals: array of strings\n    :return: 'Matched!' if matched, None if not\n    \"\"\"\n    for literal in literals:\n        if re.search(literal, text):\n            return 'Matched!'\n    return None\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(seq1, seq2, m, n):\n\t#Your code here\n\tif m == 0 or n == 0:\n\t\treturn 0\n\tif seq1[m - 1] == seq2[n - 1]:\n\t\treturn 1 + longest_common_subsequence(seq1, seq2, m - 1, n - 1)\n\telse:\n\t\treturn max(longest_common_subsequence(seq1, seq2, m, n - 1), longest_common_subsequence(seq1, seq2, m - 1, n))\n\n#print(longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef lcs(text1, text2, i, j):\n    if i < 0 or j < 0:\n        return 0\n    elif text1[i] == text2[j]:\n        return 1 + lcs(text1, text2, i-1, j-1)\n    else:\n        return max(lcs(text1, text2, i, j-1), lcs(text1, text2, i-1, j))\n\ndef longest_common_subsequence(text1, text2):\n    \"\"\"\n    Returns the length of the longest common subsequence\n    \"\"\"\n    len1 = len(text1)\n    len2 = len(text2)\n    return lcs(text1, text2, len1-1, len2-1)\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(s1, s2, m, n):\n    \"\"\"\n    The problem can be solved with Dynamic Programming:\n\n    1. Create a matrix T of size m+1 by n+1.\n    2. Initialise the first row with all 0s.\n    3. Initialise the first column with all 0s.\n    4. Run through the matrix T by row.\n       * If T[i,j] is not zero, it contains the length of the longest common subsequence of s1[0..i-1] and s2[0..j-1].\n       * If T[i,j] is 0, the max value is determined by finding the max of the following three possibilities:\n         * If s1[i-1] = s2[j-1]\n           * T[i,j] = T[i-1, j-1] + 1\n         * If s1[i-1] != s2[j-1]\n           * T[i,j] = max(T[i,j-1], T[i-1, j])\n    \"\"\"\n    T = [[0 for i in range(m+1)] for j in range(n+1)]\n    max_size = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                T[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i][j-1], T[i-1][j])\n            if T[i][j] > max_size:\n                max_size = T[i][j]\n\n    return max_size\n\n\ndef test():\n    assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n    assert longest_common_subsequence(\"ABCDEFG\" , \"", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(a, b, a_start, a_end, b_start, b_end):\n    if a_start == a_end:\n        return b_start + 1\n    if b_start == b_end:\n        return a_start + 1\n    if a[a_start] == b[b_start]:\n        return longest_common_subsequence(a, b, a_start + 1, a_end, b_start + 1, b_end)\n    else:\n        return max(longest_common_subsequence(a, b, a_start, a_end, b_start + 1, b_end),\n        longest_common_subsequence(a, b, a_start + 1, a_end, b_start, b_end))\n\ndef main():\n    print(longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(s1, s2, m, n):\n    \"\"\"\n    Time Complexity: O(m*n)\n    Space Complexity: O(m*n)\n    \"\"\"\n    if m == 0 or n == 0:\n        return 0\n    \n    # dp[i][j] will store length of LCS of X[0..i-1] and Y[0..j-1]\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    \n    # iterate though all characters of X and Y\n    for i in range(m):\n        for j in range(n):\n            \n            # if current characters are same in X[i] and Y[j] then \n            # LCS is of length one more than previous value\n            # or else it is 0\n            if s1[i] == s2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n    \n    return dp[m][n]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(s1, s2, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif s1[m-1] == s2[n-1]:\n        return 1 + longest_common_subsequence(s1, s2, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(s1, s2, m, n-1),\n                   longest_common_subsequence(s1, s2, m-1, n))\n\n\ndef longest_common_subsequence_dp(s1, s2, m, n):\n    if m == 0 or n == 0:\n        return 0\n    # check if it is already computed\n    if s1[m-1] == s2[n-1]:\n        return 1 + longest_common_subsequence_dp(s1, s2, m-1, n-1)\n    # if not, compute it and return\n    return max(longest_common_subsequence_dp(s1, s2, m, n-1),\n               longest_common_subsequence_dp(s1, s2, m-1, n))\n\n\ndef main():\n    s1 = \"AGGTAB\"\n    s2 = \"GXTXAYB\"\n\n    print(longest_common_subsequence(s1, s2, len(s1), len(s2)))\n    print(longest_common_subsequence_dp(s1, s2, len(s1), len(s2)))\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(a, b, l, r):\n    if a[l] == b[r]:\n        return 1 + longest_common_subsequence(a, b, l+1, r+1)\n    elif a[l] < b[r]:\n        return longest_common_subsequence(a, b, l+1, r)\n    else:\n        return longest_common_subsequence(a, b, l, r+1)\n\n\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(first_sequence, second_sequence, m, n):\n    '''\n    Write your function here\n    '''\n    # your code here\n    lcs = np.zeros((m+1,n+1))\n    \n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if first_sequence[i-1]==second_sequence[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i][j-1],lcs[i-1][j])\n    return lcs[m][n]", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(s1, s2, n, m):\n    if n <= 0 or m <= 0:\n        return 0\n\n    l = [[0 for x in range(m + 1)] for y in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                l[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                l[i][j] = 1 + l[i - 1][j - 1]\n            else:\n                l[i][j] = max(l[i - 1][j], l[i][j - 1])\n    return l[n][m]\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    prod=1\n    for i in range(1, int(num**0.5)+1):\n        if num%i==0:\n            prod=prod*i\n            if num/i!=i:\n                prod=prod*i\n    return prod==num\n    ", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n\n    if n <= 1:\n        return False\n\n    for i in range(2, int(n**(1/2) + 1)):\n        if n % i == 0:\n            return True\n\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    n = 0\n    for i in range(1,num):\n        for j in range(i,num+1):\n            if (i*j) == num:\n                n = 1\n                break\n    return n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(number):\n    if number > 1:\n        for i in range(2,int(number**0.5)+1):\n            if number % i == 0:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n# using square_root\ndef prod_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0 and n / i == i:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(x):\n    if x > 1:\n        for i in range(int(math.sqrt(x))):\n            if x%i == 0:\n                if x/i == i:\n                    return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    if n in [0, 1, 2, 3, 4]:\n        return False\n    if n % 4 == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_square(n):\n    if n == 0:\n        return True\n    for i in range(1, int(n/2)):\n        if n % i == 0 and (n//i)**2 == n:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    if n==1:\n        return False\n    i = 1\n    while i*i < n:\n        j = 1\n        while j*j < n:\n            if i*j==n:\n                return True\n            j = j + 1\n        i = i + 1\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    prod = []\n    temp = 1\n    for i in range(n):\n        prod.append(temp)\n        temp *= 2\n    print(prod)\n    for i in prod:\n        if n % i == 0:\n            return True\n    return False\n\n# print(prod_Square(25))\n\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,n):\n    if not isinstance(arr,list) or not isinstance(n,int):\n        return None\n    elif len(arr) == 0 or len(arr) == n:\n        return 1\n    \n    arr.sort()\n    for i in range(len(arr)):\n        if i + 1 != arr[i]:\n            return i + 1\n    return n+1\n\narr = [1,2,3,-1,5]\nn = 5\n\nfirst_Missing_Positive(arr,n)\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(lst,max):\n    if max not in lst:\n        return max\n    else:\n        lst.remove(max)\n        return first_Missing_Positive(lst,max+1)\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,size):\n    if size==0:\n        return -1\n    count = 1\n    for i in range(size):\n        if count<=size and arr[i]>0:\n            count+=1\n        else:\n            return count\n    return count\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(nums, len_num):\n    # write your code here\n    for i in range(len_num):\n        # print(\"i = \", i)\n        if (nums[i] <= 0) or (nums[i] > len_num):\n            continue\n        else:\n            pos = abs(nums[i]) - 1\n            if nums[pos] > 0:\n                nums[pos] = -nums[pos]\n            else:\n                return i+1\n    return len_num + 1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(array, array_size):\n    \"\"\"\n    first_Missing_Positive([1,2,3,-1,5],5) == 4\n    \"\"\"\n    #TODO: Implement me\n    #HINT: Aim to modify array in place, and return the first missing positive number.\n    #HINT: An empty array has no missing numbers.\n\n    array = sorted(array)\n    index = 0\n    for i in range(array_size):\n        if array[i] != i + 1:\n            index = array[i]\n            break\n    return index\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(nums,n):\n    nums = set(nums)\n    for i in range(n+1):\n        if i not in nums:\n            return i\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    '''\n    >>> first_Missing_Positive([1,2,3,-1,5],5)\n    4\n    '''\n    arr = sorted(list(set(arr)))\n    for i in range(len(arr)):\n        if i < arr[i] - 1:\n            print(arr[i] - i - 1)\n            return i + 1\n        elif i == arr[i] - 1:\n            return i + 1\n        elif i > arr[i] - 1:\n            return arr[i] - i - 1\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(a,n):\n    # Your code here\n    #First we sort the array\n    a.sort()\n    #Then we loop for each value in the array\n    for i in range(0,n):\n        #If i+1 != a[i], we return the difference\n        if i+1!=a[i]:\n            return i+1\n\n# Test your function", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(lst,n):\n    \"\"\"\n    :param lst: list containing positive and negative integers\n    :param n: max value of elements in lst\n    :return: missing number\n    \"\"\"\n    for i in range(1,n+1):\n        if i not in lst:\n            return i\n\ndef test_first_Missing_Positive():\n    assert first_Missing_Positive([1,2,3,-1,5],5) == 4\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integer co-ordinates that lie inside a square\n    \"\"\"\n    # Your code goes here...\n    pass\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    #Your code here\n    return 0\n\n#Test your code with this function", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n\tnum_points = (x2-x1)*(y2-y1)\n\treturn num_points\n\t", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(ax,ay,bx,by):\n    '''\n    To count the number of integral co-ordinates that lie inside a square.\n    '''\n    x_lst = []\n    y_lst = []\n    for i in range(ax,bx+1):\n        for j in range(ay,by+1):\n            if i%1==0 and j%1==0:\n                x_lst.append(i)\n                y_lst.append(j)\n    return len(x_lst) * len(y_lst)\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n# Approach 1:\n# This is a brute force approach where we will iterate over every co-ordinate inside the square and check if the co-ordinate is integral or not.\n# This will be a slow approach with `O(N^2)` complexity.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for x in range(x1,x2+1):\n        for y in range(y1,y2+1):\n            if x%1 == 0 and y%1 == 0:\n                count += 1\n    return count\n\n# Approach 2:\n# This is an optimized approach where we will first find the range of all the co-ordinates and then iterate over those co-ordinates only and check if they are integral or not.\n# This will be a fast approach with `O(N)` complexity.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    x_range = (x1,x2+1)\n    y_range = (y1,y2+1)\n    count = 0\n    for x in range(*x_range):\n        for y in range(*y_range):\n            if x%1 == 0 and y%1 == 0:\n                count += 1\n    return count\n\n# Approach 3:\n# This is an improved optimized approach where we will first find the range of all the co-ordinates and then iterate over those co-ordinates only and check if they are integral or not.\n# But to optimize the above approach further, we will also check if the co-ordinate lies inside the square or not.\n# This will be a faster approach with `O(N)` complexity.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    x_range = (x1,x2+1)\n    y_range = (y1,y2+1)\n    count = 0\n    for x in range(*x_range):\n        for y in range(*y_", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(row_1, col_1, row_2, col_2):\n    return (row_2-row_1) * (col_2-col_1)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a,b,c,d):\n    total = 0\n    while a <= c and b <= d:\n        if a%2==0 and b%2==0:\n            total+=1\n        a+=1\n        b+=1\n    return total\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    result = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i**2+j**2 <= (x2-x1)**2/2:\n                result += 1\n    return result\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    # Write your code here.\n    count = 0\n    if x1 <= x2 and y1 <= y2:\n        for i in range(x1, x2 + 1):\n            for j in range(y1, y2 + 1):\n                if (i == 0 or i == x2 or j == 0 or j == y2) and i != 0 and j != 0:\n                    pass\n                elif i == 0:\n                    count += 1\n                elif j == 0:\n                    count += 1\n                elif i == x2:\n                    count += 1\n                elif j == y2:\n                    count += 1\n                else:\n                    pass\n    else:\n        raise ValueError('Your inputs are wrong')\n    return count\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n\treturn (x2-x1)*(y2-y1)\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n    if month_name == 'January':\n        return 31\n    elif month_name == 'February':\n        return 28\n    elif month_name == 'March':\n        return 31\n    elif month_name == 'April':\n        return 30\n    elif month_name == 'May':\n        return 31\n    elif month_name == 'June':\n        return 30\n    elif month_name == 'July':\n        return 31\n    elif month_name == 'August':\n        return 31\n    elif month_name == 'September':\n        return 30\n    elif month_name == 'October':\n        return 31\n    elif month_name == 'November':\n        return 30\n    else:\n        return 31\n\n#3. Write a function to check whether the given word is a palindrome or not.", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\n# your code here\ndef check_monthnumber(month):\n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n    if month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n    if month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month_name):\n    month_name = month_name.lower()\n    month_number_dic = {\"jan\": 1, \"feb\": 2, \"mar\": 3, \"apr\": 4, \"may\": 5, \"jun\": 6, \"jul\": 7, \"aug\": 8, \"sep\": 9, \"oct\": 10, \"nov\": 11, \"dec\": 12}\n    if month_number_dic.get(month_name):\n        if month_name in [\"jan\", \"jul\", \"aug\", \"oct\"]:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n    if(monthname==\"February\" or monthname==\"April\" or monthname==\"June\" or monthname==\"September\" or monthname==\"November\"):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n\tif monthname==\"January\" or monthname==\"March\" or monthname==\"May\" or monthname==\"July\" or monthname==\"August\" or monthname==\"October\" or monthname==\"December\":\n\t\treturn False\n\telse:\n\t\treturn True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n    return 30 in [1,3,5,7,8,10,12] if month_name.lower().strip().startswith(\"february\") else len(month_name) % 2 != 0", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n  if monthname == \"February\" or monthname == \"April\" or monthname == \"June\" or monthname == \"September\" or monthname == \"November\":\n    return False\n  else:\n    return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n    return 30 in [1,3,5,7,8,10,12] if month_name == \"February\" else 31 in [4,6,9,11] if month_name == \"February\" else False\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(word):\n    \"\"\"\n    :param word: String\n    :return: boolean\n    \"\"\"\n    # return all(char.isdigit() or char.isalpha() for char in word)\n    return any(char.isdigit() or char.isalpha() for char in word)\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\n# Greedy\ndef check_String(word):\n    has_one = False\n    has_two = False\n    for char in word:\n        if char.isalpha():\n            has_one = True\n            break\n        elif char.isnumeric():\n            has_two = True\n            break\n    return has_one and has_two\n\n# Alternative\ndef check_String(word):\n    return bool(re.match(r'[a-zA-Z0-9]', word))\n\n# Alternative\ndef check_String(word):\n    return any(char.isalpha() or char.isnumeric() for char in word)\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    return True if len(set(string) - set('0123456789')) != 0 else False\n\n# assert check_String('thishasboth29') == True\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_string(string):\n    for i in range(len(string)):\n        if string[i].isalpha() or string[i].isdigit():\n            return True\n        else:\n            return False\n\ndef test():\n    assert check_string('thishasboth29') == True\n    assert check_string('this has both 29') == False\n    print('pass')\n\ntest()", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_string(string):\n    return any(i.isdigit() or i.isalpha() for i in string)\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n\tif len(string) > 0 and string.isalpha() and string.isdigit():\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef main():\n\tprint(\"Testing the function...\")\n\tassert check_String('thishasboth29') == True\n\tassert check_String('29') == False\n\tassert check_String('') == False\n\tprint(\"Successfully passed the test!\")\n\nmain()\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n#The function should return True if the string has at least one letter and one number\n#It should return False otherwise\n\ndef check_String(str):\n\tcounter = 0\n\tfor char in str:\n\t\tif char.isalpha():\n\t\t\tcounter += 1\n\t\telif char.isdigit():\n\t\t\tcounter += 1\n\t\telse:\n\t\t\tcontinue\n\tif counter == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str):\n  for ch in str:\n    if ch.isdigit() or ch.isalpha():\n      return True\n  return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    return bool(re.match(r'[a-zA-Z0-9]+', string))\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(lst):\n    \"\"\"\n    Remove the duplicates from the tuple.\n    \n    :param lst: list of items\n    :return: tuple of items\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        if item not in new_lst:\n            new_lst.append(item)\n    \n    return tuple(new_lst)", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(a_tuple):\n    b_tuple = tuple()\n    for x in a_tuple:\n        if x not in b_tuple:\n            b_tuple = b_tuple + (x,)\n    return b_tuple\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tup):\n    return list(set(tup))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple):\n    return tuple(set(tuple))\n\n\ndef test_remove_tuple():\n    assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple_):\n    new_tuple = []\n    for item in tuple_:\n        if item not in new_tuple:\n            new_tuple.append(item)\n    return tuple(new_tuple)\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple_to_remove_duplicates):\n    # Do not change code below\n    return tuple(set(tuple_to_remove_duplicates))\n    # Do not change code above\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple):\n    unique = []\n    for i in tuple:\n        if i not in unique:\n            unique.append(i)\n    return tuple(unique)\n\ndef test_remove_tuple():\n    assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3, 5)) == (1, 2, 3, 5)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    return tuple(set(tup))\n\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    decimal = 0\n    base = 1\n    while num > 0:\n        dig = num % 10\n        decimal += (dig * base)\n        base *= 8\n        num //= 10\n    return decimal\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n  decimal = 0\n  for i in range(len(str(octal_number))):\n    decimal += (int(str(octal_number)[i]) * 8 ** (len(str(octal_number))-i-1))\n  return decimal\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(x):\n    y = 0\n    if x == 0:\n        return 0\n    while x > 0:\n        y = y + (x % 10) * (10**3)\n        x = x // 10\n    return y\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_num):\n    return int(octal_num,8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(n):\n    s = n\n    d = 0\n    for i in range(0, len(str(s))):\n        d += pow(8, len(str(s))-1-i) * (int(str(s)[i]))\n    return d\n\n#assert octal_To_Decimal(25) == 21\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    return int(octal_number,8)\n\ndef test_octal_To_Decimal():\n    assert octal_To_Decimal(25) == 21\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(x):\n  return int(x, 8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    decimal_number = 0\n    for i in str(octal_number):\n        decimal_number = decimal_number + int(i)\n    return decimal_number\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(x):\n    return sum([int(a) * 8 ** i for i, a in enumerate(str(x))])\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(list,elem,index=-1):\n    for i in range(index,len(list)):\n        if list[i] == elem:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(a,e,n):\n    if n == 0:\n        return -1\n    if a[n-1] == e:\n        return n-1\n    if a[n-1] < e:\n        return first(a,e,n-1)\n    else:\n        return first(a,e,n-1)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,element,index):\n    pass\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(nums, lo, hi):\n    '''\n    Runtime: 28 ms, faster than 95.75% of Python3 online submissions for First Missing Positive.\n    Memory Usage: 14.1 MB, less than 98.22% of Python3 online submissions for First Missing Positive.\n    '''\n    while lo < hi:\n        mid = (lo+hi)//2\n        if nums[mid] >= mid+1:\n            lo = mid+1\n        else:\n            hi = mid\n    return lo\n\ndef first_opt(nums, lo, hi):\n    while lo < hi:\n        mid = (lo+hi)//2\n        if nums[mid] >= mid+1:\n            lo = mid+1\n        else:\n            hi = mid\n    return lo\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(l, a, b):\n    if len(l) == 0:\n        return -1\n    if l[0] == a:\n        return 0\n    elif l[len(l)-1] == b:\n        return len(l) - 1\n    elif l[0] > b or l[len(l)-1] < a:\n        return -1\n    else:\n        return first(l[1:len(l)],a,b)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array,value,length):\n    if length == 0:\n        return -1\n    mid = length//2\n    if value == array[mid]:\n        return mid\n    if value > array[mid]:\n        return first(array[mid+1:],value,length-mid-1)\n    else:\n        return first(array[:mid],value,mid)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, elem, pos):\n    \"\"\"\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(pos):\n        if elem == arr[i]:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, x, y):\n    '''\n    :param arr: array to be searched\n    :param x: first index of the array\n    :param y: last index of the array\n    :return: index of the element\n    '''\n    i = x\n    while i <= y and x <= y:\n        if arr[i] == x:\n            break\n        i += 1\n    return i\n\n\n# When you have completed this function, uncomment the following line:", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array,target,start=None,end=None):\n\tif not start:\n\t\tstart = 0\n\tif not end:\n\t\tend = len(array)\n\tif end-start == 1:\n\t\treturn start\n\tmid = (start+end)//2\n\tif array[mid] == target:\n\t\tif mid == 0 or array[mid-1] != target:\n\t\t\treturn mid\n\t\treturn first(array,target,start,mid-1)\n\telif array[mid] > target:\n\t\treturn first(array,target,start,mid)\n\telse:\n\t\treturn first(array,target,mid,end)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,low,high):\n    if low > high:\n        return -1\n    mid = (low+high)/2\n    if arr[mid] == arr[low]:\n        return first(arr,mid+1,high)\n    if arr[mid] > arr[low]:\n        return first(arr,low,mid-1)\n    return first(arr,mid+1,high)\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    # Fill this in.\n    return [tuple for tuple in tuples if len(tuple) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\nfrom typing import List\n\ndef remove_tuples(my_list: List[tuple], k: int) -> List[tuple]:\n\t\"\"\"\n\tArgs:\n\t\tmy_list (List[tuple]): list of tuples\n\t\tk (int): number of elements in each tuple\n\n\tReturns:\n\t\tList[tuple]: list of tuples with length k\n\t\"\"\"\n\tmy_list_new = []\n\tfor i in my_list:\n\t\tif len(i) == k:\n\t\t\tmy_list_new.append(i)\n\treturn my_list_new\n\n\nmy_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    \"\"\"Remove tuples from tuples list where tuple length = k\"\"\"\n    return [tuple for tuple in tuples if len(tuple) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(lst, k):\n\t# zip function returns a list of tuples\n\treturn [x for x in lst if len(x) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(list_of_tuples, k):\n    return [x for x in list_of_tuples if len(x) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    new_tuples = []\n    for tuple in tuples:\n        if len(tuple) == k:\n            continue\n        else:\n            new_tuples.append(tuple)\n    return new_tuples\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(l, k):\n  res = []\n  for i in l:\n    if len(i) == k:\n      continue\n    else:\n      res.append(i)\n  return res\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    return [i for i in tuples if len(i) != k]\n\ndef remove_tuples_2(tuples, k):\n    return [i for i in tuples if len(i) == k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuple_list, k):\n    \"\"\"\n    Args:\n       tuple_list(list): A list of tuples\n       k(int): A length to be removed\n    Returns:\n       list: A list of tuples that have length k\n    \"\"\"\n    for t in tuple_list:\n        while len(t) > k:\n            t.pop()\n    return tuple_list\n\n\ndef test_remove_tuples():\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    \"\"\"\n    Use recursion to find a**b\n    \"\"\"\n    if b == 0:\n        return (1, 1, 1, 1)\n    elif b == 1:\n        return (a[0], a[1], a[2], a[3])\n    else:\n        x, y, z, w = find_exponentio(a, b-1)\n        c = x * a[0]\n        d = y * a[1]\n        e = z * a[2]\n        f = w * a[3]\n        return (c, d, e, f)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(p, n):\n    \"\"\"Return the two-tuple (p^n, 0) where p and n are given as tuples\"\"\"\n    x = 0\n    for i in n:\n        x = x * p[i]\n    return (x, 0)\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(a, b):\n  res_list = []\n  for i in range(len(b)):\n    res_list.append(a[i]*b[i])\n  return tuple(res_list)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tuple_1, tuple_2):\n  # your code here\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(base, exp):\n    pass\n\ndef test_find_exponentio():\n    pass\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(base, power):\n    result = (1, 1, 1, 1)\n    for i in range(len(power)):\n        result = tuple(x * y for x, y in zip(result, base))\n    return result\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tuple1, tuple2):\n    \"\"\"\n    Arguments:\n        tuple1: the tuple to the power of\n        tuple2: the exponent\n\n    Returns:\n        tuple: (base^exponent)\n    \"\"\"\n    try:\n        return tuple(tuple1[i] ** tuple2[i] for i in range(len(tuple1)))\n    except:\n        return False\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(x, y):\n    if len(x) == 1 and len(y) == 1:\n        return x[0]**y[0]\n    elif len(x) == 1 and len(y) > 1:\n        x = x[0]\n        i = 0\n        while i < len(y):\n            x *= x\n            x *= y[i]\n            i += 1\n        return x\n    elif len(x) > 1 and len(y) == 1:\n        y = y[0]\n        i = 0\n        while i < len(x):\n            x *= x\n            x *= y\n            i += 1\n        return x\n    else:\n        x = x[:]\n        y = y[:]\n        while len(x) > 1:\n            z = x.pop()\n            x.append(z)\n            z = y.pop()\n            y.append(z)\n        x = x.pop()\n        y = y.pop()\n        i = 0\n        while i < len(x):\n            x *= x\n            x *= y\n            i += 1\n        return x\n\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tuple1, tuple2):\n    \"\"\"\n    This function accepts two tuples and returns the product of tuple1 raised to the power of tuple2.\n    >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n    (100000, 4096, 78125, 7776)\n    >>> find_exponentio((10, 4, 5, 6), (10, 2, 3, 4))\n    (1000000000000, 16, 243, 384)\n    \"\"\"\n    result = 1\n    for i in range(len(tuple1)):\n        result *= tuple1[i] ** tuple2[i]\n    return result\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    res = tuple()\n    for i in range(len(a)):\n        res += (a[i] ** b[i],)\n    return res\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a, b):\n    \"\"\"Compute the largest area of triangle inscribed in an ellipse\"\"\"\n    if a<=0 or b<=0:\n        return 0\n    elif a<b:\n        return largest_triangle(b, a)\n    else:\n        return 4*a*b/3\n\n\n# ---------------------------------\n# Call testing functions\n# ---------------------------------", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    \"\"\"Return the largest triangle that can be inscribed in an ellipse of radius a and b\"\"\"\n    A=a*a\n    B=b*b\n    C=B/A\n    #print(C)\n    #print(A)\n    #print(B)\n    #print(C)\n    return C\n\ndef main():\n    print(largest_triangle(4,2))\n    #print(largest_triangle(3,1))\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    x = (a+b)/2\n    y = sqrt((a-b)**2 / 4)\n    return x * y\n    ", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport numpy as np\nimport random\n\n\ndef largest_triangle(a,b):\n    max_a = a\n    max_b = b\n    max_area = 0\n    while max_a >= 0:\n        while max_b >= 0:\n            p = random.uniform(-max_b, max_b)\n            q = random.uniform(-max_a, max_a)\n            h = random.uniform(0, max_b)\n            if (h**2*(a**2-(p**2+q**2)) - 2*a*h*q*(p**2-q**2))/(a**2 - h**2*(b**2/4)) > 0:\n                max_area = max(max_area, 2*a*h)\n            max_b -= 1\n        max_a -= 1\n    return max_area\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    if a==b:\n        return a*a/2.0\n    else:\n        return (a**2+b**2)**0.5/2.0\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    return (a*b)/2\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    \"\"\"\n    This function returns the largest triangle that can be inscribed in an\n    ellipse with axis of lengths a and b.\n    \"\"\"\n    p= a*b\n    k= (a**2 + b**2)/(4*a*b)\n    return p*(1+k)**2\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport math\n\ndef largest_triangle(a,b):\n    a=float(a)\n    b=float(b)\n    result=math.sqrt((a**2+b**2)/2)\n    return result\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\ndef largest_triangle(a, b):\n    \"\"\"\n    :param a: float\n    :param b: float\n    :return: float\n    >>> largest_triangle(1, 1)\n    2.23606797749979\n    >>> largest_triangle(2, 3)\n    5.477225575051661\n    >>> largest_triangle(1, 0)\n    0.0\n    >>> largest_triangle(3, 2)\n    4.606540566844464\n    \"\"\"\n    return max(a*b*(1 - math.cos(math.pi/2-math.asin(a/b))), a*b*(1-math.sin(math.pi/2-math.asin(a/b))))\n\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    :param a: float\n    :param b: float\n    :param c: float\n    :return: float\n    >>> triangle_area(1, 1, 1)\n    1.23606797749979\n    >>> triangle_area(2, 3, 4)\n    8.0\n    >>> triangle_area(1, 0, 0)\n    0.0\n    >>> triangle_area(3, 2, 5)\n    14.606540566844464\n    \"\"\"\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\n\ndef largest_inscribed_triangle(a, b):\n    \"\"\"\n    :param a: float\n    :param b: float\n    :return: float\n    >>> largest_inscribed_triangle(1, 1)\n    2.23606797749979\n    >>> largest_inscribed_triangle(2, 3)\n    5.477225575051661\n    >>> largest_inscribed_triangle"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    power = 1\n    while (power < n):\n        power = power << 1\n    return power - 1\n\n\ndef test_highest_Power_of_2():\n    assert highest_Power_of_2(10) == 8\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(num):\n\tif num == 0:\n\t\treturn 0\n\telif num == 1:\n\t\treturn 1\n\telse:\n\t\tcount = 0\n\t\twhile(num > 1):\n\t\t\tnum = num/2\n\t\t\tcount += 1\n\t\treturn count\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return 2**highest_Power_of_2(n-1)\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(x):\n    if x == 1:\n        return 1\n    else:\n        return 2*highest_Power_of_2(x/2)\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(num):\n    \"\"\"\n    :param num:\n    :return: returns highest power of 2 less than or equal to given number.\n    \"\"\"\n    if num == 1:\n        return 1\n    i=1\n    while i < num:\n        i = i << 1\n    return i -1\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    count = 0\n    pow_2 = 1\n    while pow_2 <= n:\n        pow_2 = 2**count\n        count += 1\n    return pow_2 - 1\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(num):\n    return 2**(num.bit_length()-1) if num != 0 else 0\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return 2**(n-1).bit_length()\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\nfrom math import log2\n\n\ndef highest_Power_of_2(num):\n    if num == 0:\n        return 0\n    return 2 ** int(log2(num)) - 1\n\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(l):\n    \"\"\"\n    The time complexity is O(n^2), because the iteration over the whole list\n    is necessary.\n    \"\"\"\n    max_list = [i for i in l]\n    max_list.sort(reverse=True)\n    list_of_max = []\n    for i in range(len(max_list)):\n        if max_list[i] == l[i]:\n            list_of_max.append(i)\n    return list_of_max\n\ndef position_max_2(l):\n    \"\"\"\n    The time complexity is O(n).\n    \"\"\"\n    max_list = max(l)\n    return [i for i, x in enumerate(l) if x == max_list]\n\n\nl = [12,33,23,10,67,89,45,667,23,12,11,10,54]", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\nimport pytest\n\ndef position_max(numbers):\n    # your code here\n    pass\n\n\ndef test_position_max():\n    assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54]) == [7]\n    assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54, 12]) == [7, 14]\n    assert position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [9]\n    assert position_max([10, 10, 10]) == [0, 1, 2]\n    assert position_max([12, 12, 12]) == [0, 1, 2]\n    assert position_max([]) == []\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(L):\n    max_pos = []\n    for i in range(len(L)):\n        for j in range(i+1, len(L)):\n            if L[j] > L[i]:\n                max_pos.append(j)\n    return max_pos\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(nums):\n    result = []\n    max_value = 0\n    for i in range(len(nums)):\n        if nums[i] > max_value:\n            result = [i]\n            max_value = nums[i]\n        elif nums[i] == max_value:\n            result.append(i)\n    return result\n\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(l):\n    return [x for x in range(len(l)) if l[x]==max(l)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(list):\n    pos=[]\n    for i in range(len(list)):\n        max=list[0]\n        index=0\n        for j in range(1,len(list)):\n            if list[j]>max:\n                max=list[j]\n                index=j\n        pos.append(index)\n    return pos", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(lista):\n    \"\"\"\n    Params:\n    lista: a list\n    Returns:\n    list with the position of the maximum values\n    \"\"\"\n    return [i for i, j in enumerate(lista) if j == max(lista)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(L):\n    if not L:\n        return []\n    max = L[0]\n    max_position = 0\n    for i in range(1,len(L)):\n        if L[i] > max:\n            max = L[i]\n            max_position = i\n    return [max_position]\n\ndef test():\n    print(position_max([12,33,23,10,67,89,45,667,23,12,11,10,54]))\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list_of_numbers):\n    \"\"\"\n    Receives a list of numbers.\n    Returns a list of all the positions of the maximum values.\n    \"\"\"\n    return [i for i, x in enumerate(list_of_numbers) if x == max(list_of_numbers)]\n\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(lst):\n    max_value = max(lst)\n    max_positions = []\n    for i in range(len(lst)):\n        if lst[i] == max_value:\n            max_positions.append(i)\n    return max_positions\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    \"\"\"\n    :param lst: a list of items\n    :return: whether all the items in the list are equal\n    \"\"\"\n    return lst.count(lst[0]) == len(lst)\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    for i in range(len(lst)-1):\n        if lst[i] != lst[i+1]:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    for i in range(len(lst)-1):\n        if lst[i] != lst[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(list1):\n    if len(list1) == len(set(list1)):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    s = set(lst)\n    return len(s) == len(lst)\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    if lst.count(lst[0]) == len(lst):\n        return True\n    else:\n        return False\n\nlst = [\"one\",\"one\",\"one\"]", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(items):\n    return len(items) > 0 and items[0] == items[1] and items[1] == items[2] and items[2] == items[3] and items[3] == items[4]\n\n\n# 12. Check if a string contains only digits and alphabets.", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n  if len(lst) == 1:\n    return True\n  elif lst[0] == lst[1]:\n    return chkList(lst[1:])\n  else:\n    return False\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    index=0\n    for char in s:\n        if index%2==0:\n            index+=1\n            continue\n        else:\n            return s[:index]+s[index+1:]\n\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    return s[::2]\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(str1):\n    new_str = \"\"\n    for char in str1:\n        if char % 2 != 0:\n            new_str += char\n    return new_str\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n\tans = \"\"\n\tfor i in range(len(s)):\n\t\tif s[i]%2==0:\n\t\t\tans+=s[i]\n\treturn ans\n\n#test", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    new_s=[]\n    for i in range(len(s)):\n        if s[i]%2==0:\n            continue\n        new_s.append(s[i])\n    return \"\".join(new_s)", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str):\n    l=[]\n    for i in range(len(str)):\n        if i%2!=0:\n            l.append(str[i])\n    return \"\".join(l)\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    #Your code here\n    if len(string) == 0:\n        return \"\"\n    index = 0\n    while index < len(string):\n        if string[index]%2 == 0:\n            string = string[:index] + string[index+1:]\n        else:\n            index += 1\n    return string\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([c for c in string if c%2!=0])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(st):\n    s=st\n    a=s.replace(\"e\",\"\")\n    b=a.replace(\"o\",\"\")\n    c=b.replace(\"n\",\"\")\n    return c\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    return \"\".join(filter(lambda x: x%2 != 0, s))\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(num1, num2):\n    return bin(num1 ^ num2).count(\"1\")\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(num1, num2):\n    \"\"\"\n    >>> hamming_distance(4,8)\n    2\n    >>> hamming_distance(5,5)\n    0\n    \"\"\"\n    return bin(num1^num2).count('1')\n\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a,b):\n    return bin(a^b).count('1')\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(num1,num2):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :return: int\n    \"\"\"\n    return sum(bin(num1^num2).count('1') for num1,num2 in zip(bin(num1).split('b')[1:],bin(num2).split('b')[1:]))\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(num1, num2):\n    \"\"\"\n    Function to find the hamming distance between the two integers\n    \"\"\"\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n    if len(bin1) < len(bin2):\n        bin1 = '0'*(len(bin2)-len(bin1))+bin1\n    if len(bin2) < len(bin1):\n        bin2 = '0'*(len(bin1)-len(bin2))+bin2\n    for i in range(len(bin1)):\n        if bin1[i] != bin2[i]:\n            return bin1.count('1')\n\ndef hamming_Distance_2(num1, num2):\n    \"\"\"\n    Function to find the hamming distance between the two integers\n    \"\"\"\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n    if len(bin1) < len(bin2):\n        bin1 = '0'*(len(bin2)-len(bin1))+bin1\n    if len(bin2) < len(bin1):\n        bin2 = '0'*(len(bin1)-len(bin2))+bin2\n    distance = 0\n    for i in range(len(bin1)):\n        if bin1[i] != bin2[i]:\n            distance += 1\n    return distance\n\ndef hamming_Distance_3(num1, num2):\n    \"\"\"\n    Function to find the hamming distance between the two integers\n    \"\"\"\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n    if len(bin1) < len(bin2):\n        bin1 = '0'*(len(bin2)-len(bin1))+bin1\n    if len(bin2) < len(bin1):\n        bin2 = '0'*(len(bin1)-len(bin2))+bin2\n    return bin1.count('1') ^ bin2.count('1')\n\n# print(hamming_Distance(4,8))\n# print(hamming_Distance_2(4", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a, b):\n    \"\"\"\n    Calculate hamming distance between two numbers\n    \"\"\"\n    return bin(a ^ b).count('1')\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(a,b):\n    return bin(a^b).count('1')\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n\tif x == y:\n\t\treturn 0\n\telse:\n\t\treturn bin(x^y).count('1')\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(i,j):\n    \"\"\"\n    i: int, j: int\n    returns: int\n    \"\"\"\n    if i<j:\n        return hamming_Distance(j,i)\n    return bin(i^j).count('1')\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, c):\n    count = 0\n    for ch in string:\n        if ch == c:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s, ch):\n  return s.count(ch)\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str1, char):\n    \"\"\"\n    count the occurrence of a character in a string\n    \"\"\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == char:\n            count += 1\n    return count\n\n\n# -\n\n# The following code has been tested on Python 3.6.5.\n\n# +\nstr1 = \"abcc\"", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, character):\n    \"\"\"\n    >>> count(\"abcc\", \"c\")\n    2\n    >>> count(\"abcc\", \"c\")\n    2\n    \"\"\"\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    \"\"\"\n    >>> count(\"abcc\",\"c\")\n    2\n    >>> count(\"abcc\",\"a\")\n    0\n    >>> count(\"abcc\",\"e\")\n    0\n    \"\"\"\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str,ch):\n    count=0\n    for i in str:\n        if ch==i:\n            count=count+1\n    return count\n\ndef test_count():\n    assert count(\"abcc\",\"c\") == 2\n\ntest_count()\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    if tuple_list is None:\n        return []\n    if len(tuple_list) == 1:\n        return []\n    first_element = tuple_list[0]\n    first_index = tuple_list.index(first_element)\n    elements_list = tuple_list[1:]\n    inversions = find_inversions(first_element, elements_list)\n    inversions.append(first_index)\n    return inversions\n\ndef find_inversions(element, elements_list):\n    inversions = []\n    if elements_list is None:\n        return inversions\n    if len(elements_list) == 1:\n        if element > elements_list[0]:\n            inversions.append(-1)\n        return inversions\n    first_element = elements_list[0]\n    first_index = elements_list.index(first_element)\n    if element > first_element:\n        inversions.append(first_index)\n    elements_list = elements_list[1:]\n    inversions.extend(find_inversions(element, elements_list))\n    return inversions\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(t):\n    \"\"\"\n    :type t: tuple\n    :rtype: list\n    \"\"\"\n    t.sort()\n    # print(t)\n    res = []\n    for i in range(len(t) - 1):\n        if t[i] > t[i + 1]:\n            res.append(t[i] - t[i + 1])\n    return res\n\n\ndef inversion_elements1(t):\n    \"\"\"\n    :type t: tuple\n    :rtype: list\n    \"\"\"\n    t.sort()\n    res = []\n    for i in range(len(t)):\n        while i < len(t) - 1 and t[i] > t[i + 1]:\n            tmp = t[i]\n            t[i] = t[i + 1]\n            t[i + 1] = tmp\n            res.append(t[i] - t[i + 1])\n            i += 1\n    return res\n\n\ndef main():\n    # print(inversion_elements((7, 8, 9, 1, 10, 7)))\n    print(inversion_elements1((7, 8, 9, 1, 10, 7)))\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    # TODO\n    return None\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(lst):\n    lst.sort()\n    i = 1\n    inversions = []\n    for element in lst:\n        if i < len(lst) and lst[i] < element:\n            inversions.append(lst[i - 1] - element)\n            i += 1\n    return inversions\n\n# test case:", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(l):\n    result = []\n    l.sort(reverse=True)\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            result.append(l[i] + l[i+1])\n    return result\n\n# test case\n# print(inversion_elements((7, 8, 9, 1, 10, 7)))\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(input_list):\n    '''\n    input_list: list of integers\n    output: list of integers\n    '''\n    inv_list = []\n    for i in range(0, len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] > input_list[j]:\n                inv_list.append((input_list[i], input_list[j]))\n                inv_list.append((input_list[j], input_list[i]))\n                input_list.remove(input_list[i])\n                input_list.remove(input_list[j])\n    return inv_list\n\ndef inversion_elements2(input_list):\n    '''\n    input_list: list of integers\n    output: list of integers\n    '''\n    inv_list = []\n    for i in range(0, len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] > input_list[j]:\n                inv_list.append((input_list[i], input_list[j]))\n                input_list.remove(input_list[i])\n                break\n            else:\n                inv_list.append((input_list[j], input_list[i]))\n                input_list.remove(input_list[j])\n    return inv_list\n\ndef test_inversion_elements():\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert inversion_elements2((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(list):\n    length = len(list)\n    inversion_list = []\n    for i in range(length):\n        for j in range(length):\n            if i != j and list[i] > list[j]:\n                inversion_list.append(list[i] * length + list[j])\n    return inversion_list\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    # Using list comprehension to find the length of the tuple list\n    list_len = len(tuple_list)\n    # Using list comprehension to find the inversion of the tuple elements in the tuple list\n    inversion_list = [i for i in range(list_len) for j in range(i) if tuple_list[j] > tuple_list[i]]\n    # Sort the inversion list to get the correct position of inversions\n    inversion_list.sort()\n    return inversion_list\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    result = []\n    for i in range(len(tuples)):\n        if i == 0:\n            result.append(tuples[i])\n        else:\n            result.append(tuples[i] + ' ')\n    return result\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    ans = [item[0] + \" \" + item[1] for item in tuples]\n    return tuple(ans)\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple):\n  return tuple[0] + \" \" + tuple[1] + \" \" + tuple[2] + \" \" + tuple[3] + \" \" + tuple[4] + \" \" + tuple[5]\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    \"\"\"\n    >>> concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n    ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    \"\"\"\n    new_list = []\n    for element in tuples:\n        new_list.append(element + \" \")\n\n    return tuple(new_list)", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_list):\n    return tuple(map(\" \".join, zip(*tuple_list)))\n\n#print(concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")))\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_list):\n    return tuple_list[:]+tuple_list[:1:-1]\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(data):\n    return tuple(i + j for i, j in zip(data, data[1:]))\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(strings):\n    # TODO: Write your code here\n    pass\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n# concatenation of 2 lists is possible\n# it's much better way than iterating through each element\n\ndef concatenate_elements(tuples):\n    return [i+j for i,j in zip(tuples[:-1], tuples[1:])]\n\n\ndef test_concatenate_elements():\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\n\n# +", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    return ' '.join(tup[::2])\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(str):\n\t# initialize dictionary\n\td = {}\n\t# variable to store max length of subsequence\n\tmax_len = 0\n\tfor i in range(len(str)):\n\t\t# if character in str is not already present in dict\n\t\tif str[i] not in d:\n\t\t\t# add current character to dictionary\n\t\t\td[str[i]] = 1\n\t\telse:\n\t\t\t# increment the counter of character in dictionary\n\t\t\td[str[i]] += 1\n\t# print(d)\n\tfor i in d:\n\t\t# for all elements in dictionary\n\t\t# check if there are elements with count 2\n\t\tif d[i] == 2:\n\t\t\t# if there is a character with count 2\n\t\t\t# then check if it is present at the end of subsequence\n\t\t\t# if so, then replace that character with any character\n\t\t\t# and if it is not present at the end of subsequence\n\t\t\t# then replace that character with any character and remove it\n\t\t\t# from dictionary\n\t\t\tif i in str and (i + 1) == len(str):\n\t\t\t\tstr = str.replace(i, str[-1])\n\t\t\t\td[str[-1]] += 1\n\t\t\t\tdel d[i]\n\t\t\telif i not in str:\n\t\t\t\t# if character is not present in subsequence\n\t\t\t\t# then replace it with any character and remove it\n\t\t\t\t# from dictionary\n\t\t\t\tstr = str.replace(i, str[-1])\n\t\t\t\td[str[-1]] += 1\n\t\t\t\tdel d[i]\n\t\t\telse:\n\t\t\t\t# if character is present in subsequence and it is not\n\t\t\t\t# present at the end of subsequence\n\t\t\t\t# then remove it from dictionary\n\t\t\t\tdel d[i]\n\treturn len(str)\n\ndef main():\n\tprint(find_longest_repeating_subseq(\"AABEBCDD\"))\n\nmain()\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\n# If one of the subsequence is empty then we can end the function as we can't get a longer one\ndef find_longest_repeating_subseq(string):\n\n    longest_len = 0\n    start = None\n    end = None\n    dict1 = {}\n\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            temp = string[i:j+1]\n\n            if temp in dict1.keys():\n                # if length is more, update start and end\n                if len(temp) > longest_len:\n                    longest_len = len(temp)\n                    start = dict1[temp]\n                    end = j\n            else:\n                dict1[temp] = i\n\n    return longest_len\n\n\n# Input: AABEBCDD\n# Output: 3", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if is_subseq(s, i, j):\n                count = max(count, 1 + find_longest_repeating_subseq(s[i:j+1]))\n    return count\n\ndef is_subseq(s, i, j):\n    \"\"\"\n    Given two indices, check if they form a subseq.\n    \"\"\"\n    for k in range(i, j+1):\n        if s[k] not in s[i:j+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\n# my code\ndef find_longest_repeating_subseq(string):\n    table = []\n    for i in range(len(string)):\n        table.append([])\n        table[i].append(string[i])\n        table[i].append(1)\n        for j in range(i):\n            if string[i] == string[j] and table[j][1] + 1 > table[i][1]:\n                table[i][0] = j\n                table[i][1] = table[j][1] + 1\n    return table[len(table) - 1][1]\n\n# the function returns an array of three indices where the first is the starting index of the longest repeating subsequence and the second is the length of the longest repeating subsequence and the third is the number of repeated characters in the longest repeating subsequence.\ndef find_longest_repeating_subseq(string):\n    # The function should return the tuple (start, length, repeated characters)\n    # The first index is the start index of the longest repeating subsequence,\n    # the second index is the length of the longest repeating subsequence\n    # the third index is the number of repeated characters in the longest repeating subsequence.\n    if len(string) == 0:\n        return (None, None, None)\n\n    table = []\n    for i in range(len(string)):\n        table.append([])\n        table[i].append(string[i])\n        table[i].append(1)\n        for j in range(i):\n            if string[i] == string[j] and table[j][1] + 1 > table[i][1]:\n                table[i][0] = j\n                table[i][1] = table[j][1] + 1\n\n    return (table[len(table) - 1][0], table[len(table) - 1][1], table[len(table) - 1][1])\n\n# this function finds the longest repeating subsequence such that two subsequences don't have the same string characters at same positions\n# using the", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    if len(string) == 1:\n        return 1\n    dp = [[0] * len(string) for i in range(len(string))]\n    for i in range(1, len(string)):\n        for j in range(1, len(string)):\n            if string[i] == string[j]:\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(input_str):\n    #Your code here\n    longest_count = 0\n    temp = \"\"\n    count = 0\n    for i in input_str:\n        if i not in temp:\n            temp += i\n            count = 1\n        else:\n            count += 1\n        if count > longest_count:\n            longest_count = count\n\n    return longest_count\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n\t\"\"\"\n\t:param string: string\n\t:return: number of longest repeating subsequences\n\t\"\"\"\n\t# your code goes here\n\tfrom collections import defaultdict\n\tcount = defaultdict(int)\n\tfor char in string:\n\t\tcount[char] += 1\n\t# Create result dict to store number of subsequence that repeats.\n\tresult = {}\n\tfor key, value in count.items():\n\t\tif value == 1:\n\t\t\t# If value is 1, then result[key] = 0, this means no subsequence with this char\n\t\t\tresult[key] = 0\n\t\telse:\n\t\t\t# If value is not 1, then result[key] = 1, this means only 1 subsequence with this char.\n\t\t\tresult[key] = 1\n\t# Create 2 dp array to store value of longest repeating subsequence.\n\t# dp[i] = number of subsequence repeats in string[:i]\n\t# dp[j] = number of subsequence repeats in string[i:j]\n\t# dp[i] = max(dp[i], dp[i-1] + 1) when string[i] == string[i-1]\n\t# dp[j] = max(dp[j], dp[j-1] + 1) when string[j] == string[j-1]\n\tdp = [0] * len(string)\n\tlongest = 0\n\tfor i in range(1, len(string)):\n\t\tif string[i] == string[i - 1]:\n\t\t\tdp[i] = dp[i - 1] + 1\n\t\telse:\n\t\t\tdp[i] = 1\n\t\tlongest = max(longest, dp[i])\n\treturn longest\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    if not s:\n        return 0\n    max_len = 0\n    subseq_count = 0\n    table = [[0 for _ in range(len(s) + 1)] for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if s[i - 1] == s[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n                if table[i][j] > max_len:\n                    max_len = table[i][j]\n                    subseq_count = 1\n            else:\n                table[i][j] = 0\n    for i in range(len(s) - 1, 0, -1):\n        for j in range(len(s) - 1, 0, -1):\n            if s[i - 1] == s[j - 1]:\n                if table[i][j] == table[i + 1][j + 1]:\n                    subseq_count += 1\n            else:\n                pass\n    return subseq_count\n\ndef main():\n    assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n    assert find_longest_repeating_subseq(\"AB\") == 1\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(text):\n    if not text or not text.isalpha():\n        return 0\n\n    text = text.replace(\" \", \"\")\n\n    from collections import defaultdict\n    counts = defaultdict(int)\n    for c in text:\n        counts[c] += 1\n\n    max_length = 0\n    for l in range(len(text)-1):\n        for r in range(l+1, len(text)+1):\n            if text[l:r] in counts and counts[text[l:r]] > 1:\n                max_length = max(max_length, r-l)\n\n    return max_length", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    l = len(string)\n    dp = [[0 for i in range(l)] for j in range(l)]\n    for i in range(l):\n        for j in range(l):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif string[i] == string[j]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n\n\ndef find_longest_repeating_subseq_recursive(string, dp, i, j):\n    if i == len(string) or j == len(string):\n        return 0\n    elif string[i] == string[j]:\n        if dp[i][j] == 0:\n            dp[i][j] = find_longest_repeating_subseq_recursive(string, dp, i+1, j+1) + 1\n        return dp[i][j]\n    else:\n        if dp[i][j] == 0:\n            dp[i][j] = max(find_longest_repeating_subseq_recursive(string, dp, i+1, j),\n                            find_longest_repeating_subseq_recursive(string, dp, i, j+1))\n        return dp[i][j]\n\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(x):\n    \"\"\"\n    :param x: decimal number to be validated\n    :return: true if x is a decimal else false\n    \"\"\"\n    return True if re.match(r\"^\\d{1,}(\\.\\d{1})?$\", x) else False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(d):\n    pattern = r'^[+-]?[0-9]+([\\.][0-9]{2})?$'\n    return re.match(pattern, d)\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(s):\n    import re\n    return bool(re.match(r'^\\d+\\.\\d{1,2}$', s))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(n):\n    pattern = \"^[0-9]+\\.[0-9]{2}$\"\n    return re.match(pattern, n)\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(str):\n    return bool(re.match(r\"^[0-9]+\\.[0-9]{2}$\", str))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(string):\n    return len(re.findall(r'^(\\+|-)?(0|[1-9]\\d*)(\\.\\d+)?$', string)) == 1\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(str):\n    re = re.compile(r'^[-+]?(0|[1-9][0-9]*)(\\.[0-9]+)?$')\n    return re.match(str)\n\n# Tests", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(x):\n    \"\"\"\n    Return True if x is a valid decimal with 2 decimals precision.\n    \"\"\"\n    pattern = re.compile('^[0-9]+(\\.[0-9]{2})$')\n    if pattern.match(x):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n        return True\n    else:\n        return False\n\ndef is_decimal(x):\n    pattern = r'[-+]?[0-9]*\\.?[0-9]+'\n    if re.match(pattern, x):\n       ", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(number):\n    number = str(number)\n    if re.match(r\"^-?\\d+\\.\\d{1,2}$\", number):\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, val):\n    return [heap[0]] + heap[1:] + [val]\n\n#%%", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,item):\n    if len(heap)==1:\n        heap.append(item)\n        return heap\n    if heap[0]<item:\n        heap.append(item)\n        heap.pop(0)\n        return heap\n    # find the new index\n    for i in range(len(heap)):\n        if heap[i]>=item:\n            break\n    heap[i],heap[0] = heap[0],heap[i]\n    heap.pop(len(heap)-1)\n    return heap\n\n# 1.2.3.14", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    if len(heap) == 0:\n        return [item]\n    if len(heap) == 1:\n        if item <= heap[0]:\n            return [item]\n        return heap\n    if item <= heap[0]:\n        heap.append(heap.pop(0))\n        return heap\n    index = len(heap)-1\n    if item <= heap[index]:\n        return heap\n    while index > 0 and heap[index] > item:\n        heap[index] = heap[index-1]\n        index -= 1\n    heap[index] = item\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nimport heapq\ndef heap_replace(heap,new_element):\n    heapq.heapify(heap)\n    heapq.heappush(heap,new_element)\n    min_element = heapq.heappop(heap)\n    return heap", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace( heap, new_item ):\n    # Write your code here\n    # Empty the heap if it is empty\n    if not heap:\n        heap.append(new_item)\n        return\n    # Convert to binary tree\n    binary_tree = build_heap(heap)\n    # Find the new root\n    new_root = binary_tree[1]\n    # Replace the root with the last element of the heap\n    binary_tree[1] = binary_tree[-1]\n    # Remove the last element of the heap\n    binary_tree.pop()\n    # Rebuild the heap\n    heap = rebuild_heap(binary_tree)\n    # Return the new heap\n    return heap\n\n\n# + id=\"HZ5xvo75X1xQ\"", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, value):\n  if len(heap)==0 or heap[0] == value:\n    heap.append(value)\n  else:\n    heap.insert(0, value)\n    heap_adjust_down(heap, 0, len(heap) -1)\n  return heap\n\ndef heap_adjust_down(heap, index, end):\n  item = heap[index]\n  left = 2 * index + 1\n  right = 2 * index + 2\n  largest = index\n  while left <= end:\n    if right <= end and heap[left] < heap[right]:\n      largest = left\n    else:\n      largest = right\n    if heap[largest] > item:\n      heap[index] = heap[largest]\n      index = largest\n    else:\n      break\n  heap[index] = item\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, new_item):\n    # Complete this function\n    if not heap:\n        heap.append(new_item)\n        heapq.heapify(heap)\n        return heap\n\n    else:\n        new_heap = []\n        for i in range(len(heap)):\n            if i == 0:\n                new_heap.append(new_item)\n                new_heap.append(heap.pop(0))\n            elif heap[i] > heap[i-1]:\n                new_heap.append(heap.pop(i-1))\n                new_heap.append(heap.pop(i))\n            else:\n                new_heap.append(heap.pop(i))\n        return new_heap\n\n\n# In[4]:\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new):\n    heap.pop(0)\n    heap.append(new)\n    i = 0\n    while i < len(heap):\n        parent = (i-1) // 2\n        if heap[parent] > heap[i]:\n            heap[parent], heap[i] = heap[i], heap[parent]\n            i = parent\n        i += 1\n    return heap\n\nheap_replace([25, 44, 68, 21, 39, 23, 89],21)\n\n# <b>heapq module</b>\n# <b>heapq.heappush()\tHeap push (heappush)</b>\n# <b>heapq.heappop()\tHeap pop (heappop)</b>\n# <b>heapq.heapify()\tHeapify (heapify)</b>\n# <b>heapq.heapreplace()\tHeap replace (heapreplace)</b>\n# <b>heapq.nlargest()\tN largest elements (nlargest)</b>\n# <b>heapq.nsmallest()\tN smallest elements (nsmallest)</b>\n\nimport heapq\n\nheapq.heappush([1,3,5,7],[2,4,6,8])", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, new_item):\n    \"\"\"\n    In this function, we are assuming that the heap is a list of numbers with the smallest element in the first position. \n    \"\"\"\n    \n    # we remove the smallest element\n    heap[0] = heap[len(heap) - 1]\n    # we remove the last element\n    heap.pop()\n    # we insert the new_item to the heap\n    heap.insert(0, new_item)\n    \n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    del heap[0]\n    heap.append(item)\n    parent_index = 0\n    current_index = 1\n    while True:\n        if current_index >= len(heap)-1:\n            return heap\n        child_index = current_index << 1\n        if child_index < len(heap)-1 and heap[child_index] < heap[child_index + 1]:\n            child_index += 1\n        if heap[child_index] <= heap[parent_index]:\n            break\n        heap[child_index], heap[parent_index] = heap[parent_index], heap[child_index]\n        parent_index = child_index\n        current_index = child_index\n\nheap = [25, 44, 68, 21, 39, 23, 89]\nheap_replace(heap, 21)"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(string):\n    \"\"\"\n    >>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n    True\n    >>> is_allowed_specific_char(\"ABCDEFabcdef12345\")\n    False\n    >>> is_allowed_specific_char(\"ABCDEFabcdef123450.12\")\n    False\n    \"\"\"\n    allowed_chars = re.compile(\"^[a-zA-Z0-9]+$\")\n    return allowed_chars.search(string) is not None\n\n\n# 3. Implement a function that check that the given string contains only numbers(0-9) by using regex\n\ndef is_allowed_only_numbers(string):\n    \"\"\"\n    >>> is_allowed_only_numbers(\"ABCDEFabcdef123450\")\n    False\n    >>> is_allowed_only_numbers(\"ABCDEFabcdef12345\")\n    False\n    >>> is_allowed_only_numbers(\"ABCDEFabcdef123450.12\")\n    False\n    >>> is_allowed_only_numbers(\"12345\")\n    True\n    \"\"\"\n    only_numbers = re.compile(\"^[0-9]+$\")\n    return only_numbers.search(string) is not None\n\n\n# 4. Implement a function to check that the given string contains only a certain set of characters(in this case a-z and 0-9) by using regex.\n\ndef is_allowed_specific_char_2(string):\n    \"\"\"\n    >>> is_allowed_specific_char_2(\"ABCDEFabcdef123450\")\n    True\n    >>> is_allowed_specific_char_2(\"ABCDEFabcdef12345\")\n    False\n    >>> is_allowed_specific_char_2(\"ABCDEFabcdef123450.12\")\n    False\n    >>> is_allowed_specific_char_2(\"12345\")\n    True\n    \"\"\"\n    allowed_chars = re.compile(\"^[a-zA-Z0-9]+$\")\n    return allowed_chars.search", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string):\n    pattern = re.compile('[^a-zA-Z0-9]')\n    return not bool(re.match(pattern, string))\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(str):\n    return bool(re.search(r'[a-zA-Z0-9]', str))\n\n#Tests", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(str):\n    #Write your code here\n    return bool(re.search(\"^[a-zA-Z0-9]*$\",str))\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\n# solution\ndef is_allowed_specific_char(string):\n    pattern = r'[a-zA-Z0-9]'\n    return bool(re.search(pattern, string))\n\n# unit test\nimport unittest\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\n# Solution\n\n# Solution with regex\ndef is_allowed_specific_char(text):\n    if (not text) or (len(text) == 0):\n        return False\n    else:\n        allowed_chars = 'abcdefghijklmnopqrstuvwxyz0123456789'\n        for char in text:\n            if char not in allowed_chars:\n                return False\n        return True\n\n# Solution using two while loops\ndef is_allowed_specific_char(text):\n    if (not text) or (len(text) == 0):\n        return False\n    else:\n        first_while_loop = False\n        second_while_loop = False\n        allowed_chars = 'abcdefghijklmnopqrstuvwxyz0123456789'\n        while first_while_loop == False:\n            for char in text:\n                if char not in allowed_chars:\n                    first_while_loop = True\n                    break\n            else:\n                first_while_loop = False\n        while second_while_loop == False:\n            for char in text:\n                if char not in allowed_chars:\n                    second_while_loop = True\n                    break\n            else:\n                second_while_loop = False\n        return not first_while_loop and not second_while_loop", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    pattern = re.compile(r\"^[a-zA-Z0-9]+$\")\n    if pattern.match(string):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(input_string):\n\n    regex = r\"^[a-z0-9]*$\"\n\n    if re.fullmatch(regex, input_string):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string):\n    pattern = r\"^[a-zA-Z0-9]*$\"\n    regex = re.compile(pattern)\n    if regex.match(string):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(input_str):\n    #Solution here\n    if not (input_str.isalnum()):\n        return False\n    return True\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(1,10**n):\n        for j in range(10**n):\n            if i & j == 1:\n                count += 1\n    return count\n\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    c=0\n    for i in range(1,10):\n        num=i*i\n        if num==n:\n            c+=1\n    return c\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    cnt = 0\n    for i in range(2, n+1):\n        if count_bits(i) == n:\n            cnt += 1\n    return cnt\n\n\ndef count_bits(n):\n    cnt = 0\n    while n:\n        cnt += n & 1\n        n >>= 1\n    return cnt\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(x):\n    count = 0\n    temp = 1\n    while temp < x:\n        count += 1\n        temp *= 2\n    return count\n\ndef test_count_Num():\n    assert count_Num(2) == 1\n    assert count_Num(3) == 2\n    assert count_Num(4) == 3\n    assert count_Num(5) == 3\n    assert count_Num(6) == 4\n    assert count_Num(7) == 4\n    assert count_Num(8) == 5\n    assert count_Num(9) == 5\n    assert count_Num(10) == 6\n    assert count_Num(11) == 6\n    assert count_Num(12) == 7\n    assert count_Num(13) == 7\n    assert count_Num(14) == 8\n    assert count_Num(15) == 8\n    assert count_Num(16) == 9\n    assert count_Num(17) == 9\n    assert count_Num(18) == 10\n    assert count_Num(19) == 10\n    assert count_Num(20) == 11\n    assert count_Num(21) == 11\n    assert count_Num(22) == 12\n    assert count_Num(23) == 12\n    assert count_Num(24) == 13\n    assert count_Num(25) == 13\n    assert count_Num(26) == 14\n    assert count_Num(27) == 14\n    assert count_Num(28) == 15\n    assert count_Num(29) == 15\n    assert count_Num(30) == 16\n    assert count_Num(31) == 16\n    assert count_Num(32) == 17\n    assert count_Num(33) == 17\n    assert count_Num(34) == 18\n    assert count_Num(35) == 18\n    assert count_Num(36) == 19\n    assert count", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(k):\n    assert k>=1\n    N = len(bin(k))-2\n    assert N >= 1\n    C = 0\n    for n in range(N):\n        p = pow(2,n,k)\n        C += int(bin(k).count('1')) * pow(p,C)\n    return C\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(num):\n\tcount = 0\n\tfor i in range(num):\n\t\tx = i\n\t\tfor j in range(0,8):\n\t\t\tx = x & (x-1)\n\t\t\tif(x == 0):\n\t\t\t\tcount = count + 1\n\treturn count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    # Write your code here\n    a = 0\n    b = 0\n    for x in range(1, n+1):\n        a = a + 1 if x & 1 == 0 else a\n        b = b + 1 if x & (1 << 1) == 0 else b\n\n    return a + b\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    res = 0\n    for num in range(1, n + 1):\n        res += int(bin(num).count('1'))\n    return res\n\n\ndef main():\n    print(count_Num(2))\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(1, n + 1):\n        if i & 1 == 0:\n            if i & 3 == 3:\n                count += 1\n        elif i & 3 == 3:\n            count += 1\n    return count\n\n# Method 2:\ndef count_Num_2(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if (i ^ j) == i:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum_of_fourth_power = 0\n    for i in range(1, n+1):\n        sum_of_fourth_power += (i ** 4)\n    return sum_of_fourth_power", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    s = 0\n    for x in range(1, n+1):\n        s += x**4\n    return s\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    \"\"\"\n    >>> fourth_Power_Sum(2)\n    17\n    >>> fourth_Power_Sum(3)\n    129\n    >>> fourth_Power_Sum(4)\n    576\n    \"\"\"\n    return sum([i**4 for i in range(1,n+1)])\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    \"\"\"\n    :param n:\n    :return: sum of fourth power of n natural numbers\n    \"\"\"\n    return sum([x**4 for x in range(1, n+1)])\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += pow(i, 4)\n    return result\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return (n**4 * (n-1)**4) / 4\n\n\n# # Q4.\n#\n# Write a function to find the sum of first n natural numbers raised to power of 2.\n#\n# assert power_Sum(2) == 10\n#\n# # Q5.\n#\n# Write a function to find the sum of first n natural numbers raised to power of 2.\n#\n# assert power_Sum(4) == 256\n\ndef power_Sum(n):\n    return (2**n * (n-1)**2) / 2\n\n\n# # Q6.\n#\n# Write a function to find the sum of first n natural numbers raised to power of 3.\n#\n# assert power_Sum(3) == 108882400\n\ndef power_Sum(n):\n    return (3**n * (n-1)**3) / 2\n\n\n# # Q7.\n#\n# Write a function to find the sum of first n natural numbers raised to power of 4.\n#\n# assert power_Sum(4) == 864000000\n\ndef power_Sum(n):\n    return (4**n * (n-1)**4) / 4\n\n\n# # Q8.\n#\n# Write a function to find the sum of first n natural numbers raised to power of 5.\n#\n# assert power_Sum(5) == 376874240138880000\n\ndef power_Sum(n):\n    return (5**n * (n-1)**5) / 120\n\n\n# # Q9.\n#\n# Write a function to find the sum of first n natural numbers raised to power of 6.\n#\n# assert power_Sum(6) == 41925873263436800000\n\ndef power_Sum(n):\n    return (6**n * (n-1)**6) /", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    total = 0\n    for i in range(1,n+1):\n        total += i**4\n    return total\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    # start a loop with n value\n    sum = 0\n    for i in range(n+1):\n        # start a loop with i value\n        for j in range(i+1):\n            # start a loop with j value\n            for k in range(j+1):\n                # start a loop with k value\n                for l in range(k+1):\n                    # start a loop with l value\n                    sum += i**4\n                    # end the loop with l value\n                    print(i,j,k,l)\n                    # end the loop with k value\n                    # end the loop with j value\n                    # end the loop with i value\n    # end the loop with n value\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    \"\"\"\n    >>> fourth_Power_Sum(3)\n    385\n    >>> fourth_Power_Sum(10)\n    3025\n    >>> fourth_Power_Sum(20)\n    15625\n    \"\"\"\n    s = 0\n    for i in range(1, n + 1):\n        s += i**4\n    return s\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef concatenate_strings(\n    first_string_tuple: Tuple[str, ...], second_string_tuple: Tuple[str, ...]\n) -> Tuple[str, ...]:\n    result = []\n    for str1, str2 in zip(first_string_tuple, second_string_tuple):\n        result.append(str1 + \" \" + str2)\n\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuples):\n    return (' '.join(tuple1 + tuple2 for tuple1, tuple2 in zip(tuples[0], tuples[1])))\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    return tuple(tuple1+tuple2)\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(s1, s2):\n    s3 = tuple()\n    for i in range(0, len(s1)):\n        s3 = s3 + (s1[i] + s2[i])\n    return s3\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(*strings):\n    \"\"\"\n    This function returns a tuple containing the concatenation of all the strings in the strings tuple.\n    \"\"\"\n    return tuple([\"\".join(strings)])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(t1, t2):\n    return tuple(t1 + t2)\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(*args):\n    return [i[0] + \" \" + i[1] for i in args]\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\n# + id=\"lM3IJnUHNz7e\" colab_type=\"code\" colab={}\ndef concatenate_strings(str1, str2):\n    return tuple(str1[i] + str2[i] for i in range(len(str1)))\n\n\n# + id=\"uP4K3vPqOIT_\" colab_type=\"code\" outputId=\"7e68468e-e028-4b90-b7f4-2920d378e9a2\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34}\nconcatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))\n\n\n# + [markdown] id=\"xyo6132_PPgK\" colab_type=\"text\"\n# **5. Write a function to remove duplicates from a list**\n\n# + id=\"9-rQdZ76PbzY\" colab_type=\"code\" colab={}\ndef remove_duplicates(lst):\n    unique_list = list()\n    for i in lst:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\n# + id=\"pwACEx9uQkN9\" colab_type=\"code\" outputId=\"1a700494-6406-494c-8f85-9c3279350581\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34}\nremove_duplicates([1, 5, 3, 5, 2, 4, 1, 5])\n\n\n# + [markdown] id=\"t6u8jZ3mRHu4\" colab_type=\"text\"\n# **6. Write a function to add numbers from", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    return tuple1 + tuple2\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple_1, tuple_2):\n    return tuple_1 + tuple_2\n\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    \"\"\"\n    radian: a number representing a radian\n    return: a number representing a degree\n    \"\"\"\n    degree = radian*180/math.pi\n    return degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radians):\n    return radians*(180/math.pi)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(angle_radian):\n    degree = angle_radian * (180/3.14)\n    return degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    degree = radian / 360 * 180\n    return degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n\treturn 180/pi*radian\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(x):\n\treturn x*180/pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    radian_to_degree = 180/math.pi\n    return radian*radian_to_degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return (radian / 180) * 360\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    degree = (radian/np.pi)*180\n    return degree\n\n\n# -\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian*180/np.pi\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(run_list):\n    \"\"\"\n    This function takes a list of run length encoded data\n    and returns a list of decoded data.\n    \"\"\"\n    # Your code goes here\n    return [ run * x for run,x in run_list ]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(lst):\n    \"\"\"\n    decode_list(lst) -> list\n\n    Takes a list of run-length encoded values and decodes it.\n    \"\"\"\n    # TODO: Implement this function.\n    result = []\n    while lst:\n        if isinstance(lst[0], list):\n            result.extend(lst[0]*lst[1])\n            lst = lst[2:]\n        else:\n            result.append(lst[0])\n            lst = lst[1:]\n    return result\n\ndef test_decode_list():\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\ndef main():\n    test_decode_list()\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(data):\n    \"\"\"Decode a list into its run-length encoding.\"\"\"\n    out = []\n    for i in data:\n        if type(i) == list:\n            out.append(i[1])\n            out.extend([i[0]]*i[1])\n        else:\n            out.append(i)\n    return out\n\n\n# + deletable=false editable=false nbgrader={\"checksum\": \"926422d21b99a70515892b2626e17f40\", \"grade\": true, \"grade_id\": \"cell-57a5079091773068\", \"locked\": true, \"points\": 10, \"schema_version\": 1, \"solution\": false}\n# Run this cell to test your function\n# Do not modify contents of this cell\n\n# Test that the test list is a list", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(run_len_encoded_list):\n    if len(run_len_encoded_list) == 0:\n        return []\n\n    current_item = run_len_encoded_list[0]\n    current_len = current_item[0]\n    if len(run_len_encoded_list) == 1:\n        return [current_item[1]] * current_len\n\n    current_index = 1\n    while current_len > 1 and current_index < len(run_len_encoded_list):\n        item = run_len_encoded_list[current_index]\n        if item[0] == current_len:\n            current_len += item[1]\n            current_index += 1\n        else:\n            break\n\n    encoded_item_count = current_index\n    current_list = [current_item[1]] * current_len\n\n    if current_index < len(run_len_encoded_list) - 1:\n        current_index += 1\n        while current_index < len(run_len_encoded_list):\n            item = run_len_encoded_list[current_index]\n            if item[0] == current_len:\n                current_len += item[1]\n                current_index += 1\n            else:\n                break\n\n        encoded_item_count += current_index\n        current_list += [item[1]] * current_len\n\n    while encoded_item_count < len(run_len_encoded_list):\n        item = run_len_encoded_list[current_index]\n        current_list += [item[1]] * item[0]\n        encoded_item_count += 1\n        current_index += 1\n\n    return current_list\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(encoded_list):\n    result=[]\n    for i in encoded_list:\n        if type(i) is int:\n            result+=[i]*i\n        else:\n            result+=i\n    return result\n\ndef test_decode_list():\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(decoded_list):\n    result = []\n    for i in range(len(decoded_list)):\n        if type(decoded_list[i]) is int:\n            result.append(decoded_list[i])\n        else:\n            result.extend(decoded_list[i])\n    return result\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(encoded):\n    \"\"\"\n    encoded: list of elements\n    Return list\n    \"\"\"\n    def decode(x):\n        if type(x)==int:\n            return x\n        if type(x)==list:\n            return [decode(y) for y in x[1:]]\n        return x\n    \n    return [decode(x) for x in encoded]\n\ndef test_decode_list():\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\n# -\n\n# ### Exercise 5\n\n# +", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(lst):\n    temp = []\n    for item in lst:\n        if isinstance(item, list):\n            temp.extend(decode_list(item))\n        else:\n            for _ in range(item[0]):\n                temp.append(item[1])\n    return temp\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(l):\n\tout = []\n\tfor i in l:\n\t\tif isinstance(i, list):\n\t\t\tout.extend([x*y for x,y in zip(repeat(i[0]), i[1:])])\n\t\telse:\n\t\t\tout.append(i)\n\treturn out\n\n# test cases", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(l):\n    list_to_return = []\n    for i in l:\n        if isinstance(i, list):\n            list_to_return += i\n        else:\n            list_to_return.append(i)\n    return list_to_return\n\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(lst1, lst2):\n    # lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    # lst2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\n    result = True\n    for item in lst2:\n        if item not in lst1:\n            result = False\n    return result\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    check = False\n    if len(list1) == 0:\n        return check\n    else:\n        if list1[0] in list2:\n            list2.remove(list1[0])\n            check = True\n            if len(list2) == 0:\n                return True\n            else:\n                return check_subset_list(list1[1:], list2)\n        else:\n            return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(a,b):\n    if(len(a)<len(b)):\n        return False\n    if(len(a)==len(b)):\n        if(set(a)==set(b)):\n            return True\n        else:\n            return False\n    return check_subset_list(a[1:],b)\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    check_list1 = []\n    check_list2 = []\n    for i in list1:\n        check_list1.append(i)\n    for i in list2:\n        check_list2.append(i)\n    return(check_list1 in check_list2)", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(set_list,list_of_lists):\n    for i in list_of_lists:\n        if i in set_list:\n            set_list.remove(i)\n    if len(set_list)==0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(a_list,b_list):\n    if len(a_list) == 0:\n        if len(b_list) == 0:\n            return True\n        else:\n            return False\n    if len(b_list) == 0:\n        return False\n    if a_list[0] in b_list[0]:\n        return check_subset_list(a_list[1:], b_list[1:])\n    return False\n\n# test your code", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(main_list, list_subset):\n    print('list 1:', main_list)\n    print('list 2:', list_subset)\n    print('subset:', subset_list(main_list, list_subset))\n\n# 1. \u9996\u5148\uff0c\u5199\u4e00\u4e2a\u5224\u65ad\u4e24\u4e2alist\u662f\u5426\u76f8\u7b49\u7684\u51fd\u6570\uff1a\n# 1.1 \u5982\u679c\u4e24\u4e2alist\u7684\u957f\u5ea6\u4e0d\u76f8\u7b49\uff0c\u76f4\u63a5\u8fd4\u56deFalse\n# 1.2 \u5982\u679c\u4e24\u4e2alist\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u904d\u5386\u4e24\u4e2alist\uff0c\u7528\"==\"\u6bd4\u8f83\u4e24\u4e2alist\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u4e24\u8005\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56deFalse\uff0c\u5426\u5219\u8fd4\u56deTrue\n# 1.3 \u5199\u4e00\u4e2a\u51fd\u6570\uff1a\u5224\u65ad\u4e00\u4e2alist\u662f\u5426\u662f\u53e6\u4e00\u4e2alist\u7684\u5b50\u96c6\uff0c\u4f20\u5165\u4e24\u4e2alist\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u662f\u5b50\u96c6\uff0c\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\n# 2. \u5b9e\u73b0check_subset_list()\uff1a\n# 2.1 \u63a5\u6536\u4e24\u4e2alist\uff0c\u5224\u65ad\u662f\u5426\u662f\u5b50\u96c6\n# 2.2 \u5c06\u4e24\u4e2alist\u6253\u5370\u51fa\u6765\uff0c\u5224\u65ad\u662f\u5426\u662f\u5b50\u96c6\n\ndef subset_list(main_list, list_subset):\n    if len(main_list) != len(list_subset):\n        print('The two list lengths are different!')\n        return False\n    if main_list == list_subset:\n        print('The two lists are the same!')\n        return True\n    print('Checking whether the main list is a subset of the list subset.')\n    for i in main_list:\n        for j in list_subset:\n            if i == j:\n                print('The main list is a subset of the list subset!')\n                return True\n    print('The main list is not a subset of the list subset!')\n    return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(lst1, lst2):\n    \"\"\"\n    :param lst1: list\n    :param lst2: list\n    :return: True if the lst1 is a subset of lst2 and False otherwise\n    \"\"\"\n    if lst1 == []:\n        return True\n    elif lst2 == []:\n        return False\n    elif lst1[0] not in lst2:\n        return False\n    else:\n        return check_subset_list(lst1[1:], lst2)\n\n\ndef test_check_subset_list():\n    assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\n\ndef check_subset_list(lst1, lst2):\n    \"\"\"\n    :param lst1: list\n    :param lst2: list\n    :return: True if the lst1 is a subset of lst2 and False otherwise\n    \"\"\"\n    if lst1 == []:\n        return True\n    elif lst2 == []:\n        return False\n    elif lst1[0] not in lst2:\n        return False\n    else:\n        return check_subset_list(lst1[1:], lst2)\n\n\ndef test_check_subset_list():\n    assert check_subset_list([1, 2, 3, 4, 5, 6, 7,", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(first, second):\n    if not isinstance(first, list):\n        return False\n    if not isinstance(second, list):\n        return False\n    if len(first) > len(second):\n        return False\n    for i in range(len(first)):\n        if not isinstance(first[i], list) and first[i] in second:\n            return True\n        if isinstance(first[i], list) and first[i] in second:\n            for j in range(len(first[i])):\n                if first[i][j] in second[i]:\n                    break\n                elif j == len(first[i])-1:\n                    return False\n    return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(l1, l2):\n    print(l1)\n    print(l2)\n    for i in l1:\n        if i not in l2:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(s):\n  # Write your code here\n  if len(s) < 2:\n    return \" \"\n  i = 0\n  j = 0\n  while i < len(s) - 1 and j < len(s) - 1:\n    if s[i] == s[j]:\n      i += 1\n      j += 1\n    else:\n      i = j\n      j += 1\n  return s[j]\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str):\n  count = {}\n  for x in str:\n    count[x] = count.get(x, 0) + 1\n\n  for x in str:\n    if count[x] == 2:\n      return x\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    for char in string:\n        if string.count(char) > 1:\n            return char\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            if string[i] == string[j]:\n                return string[i]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    \"\"\"\n    function to find the first repeated character in a given string\n    \"\"\"\n    if string == \"\":\n        return None\n    if len(string) == 1:\n        return string\n    else:\n        chars = []\n        for char in string:\n            chars.append(char)\n        count = 1\n        for i in range(len(chars)-1):\n            if chars[i] == chars[i+1]:\n                count+=1\n                if count>1:\n                    return chars[i]\n            else:\n                count = 1\n    return None\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    return None\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n    dic = {}\n    for i in s:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            return i\n\n# s = \"Google\"\n\n# print(first_Repeated_Char(s))", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    s_list = list(string)\n    for i in range(len(s_list)):\n        if s_list[i] == s_list[i+1]:\n            return s_list[i]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\n# The method to use is same as for the last question\ndef first_Repeated_Char(string):\n  for i in range(len(string)-1):\n    if string[i] == string[i+1]:\n      return string[i]\n  return False\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_operations(a, b):\n    a, b = abs(a), abs(b)\n    a, b = min(a, b), max(a, b)\n    d = 0\n    while a != b:\n        if a > b:\n            a, b = b, a\n        a = a - b\n        d += 1\n    return d\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a,b):\n    return(abs(b-a)).bit_length()\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    # Write your code here\n    i=0\n    while(a!=b):\n        if a>b:\n            a=a-b\n        else:\n            b=b-a\n            i+=1\n    return i\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a,b):\n    if (a==b):\n        return 0\n    \n    if (a>b):\n        a,b=b,a\n    \n    i,j=0,0\n    while(a!=b):\n        if (a%2!=0):\n            a=a*10+1\n            i+=1\n        else:\n            a//=2\n        if (b%2!=0):\n            b=b*10+1\n            j+=1\n        else:\n            b//=2\n    return min(i,j)\n        ", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a,b):\n\tpass\n\n\n# print(\"h1\")\n# print(a)\n# print(b)\n# print(a+b)\n# print(a-b)\n# print(a*b)\n# print(a/b)\n# print(a%b)\n# print(a//b)\n# print(a**b)\n# print(a==b)\n# print(a!=b)\n# print(a<b)\n# print(a>b)\n# print(a<=b)\n# print(a>=b)\n\n# print(b*a)\n# print(b/a)\n# print(b%a)\n# print(b//a)\n# print(b**a)\n# print(b==a)\n# print(b!=a)\n# print(b<a)\n# print(b>a)\n# print(b<=a)\n# print(b>=a)\n\n# print(\"h2\")\n# print(a+2)\n# print(b-2)\n# print(a*2)\n# print(a/2)\n# print(a%2)\n# print(a//2)\n# print(a**2)\n# print(a==2)\n# print(a!=2)\n# print(a<2)\n# print(a>2)\n# print(a<=2)\n# print(a>=2)\n\n# print(\"h3\")\n# print(2+a)\n# print(2-b)\n# print(2*a)\n# print(2/a)\n# print(2%a)\n# print(2//a)\n# print(2**a)\n# print(2==a)\n# print(2!=a)\n# print(2<a)\n# print(2>a)\n# print(2<=a)\n# print(2>=a)", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(num1, num2):\n    count = 0\n    while num1 > num2:\n        num1 = num1 // 2\n        count += 1\n    if num2 == num1:\n        return count\n    while num2 > num1:\n        num2 = num2 // 2\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_operations(n,m):\n\tif n==m:\n\t\treturn 0\n\telif n>m:\n\t\ttemp=n\n\t\tn=m\n\t\tm=temp\n\telif n<m:\n\t\ttemp=n\n\t\tn=m\n\t\tm=temp\n\telif n==m:\n\t\treturn 0\n\telif n>m:\n\t\ttemp=n\n\t\tn=m\n\t\tm=temp\n\telif n<m:\n\t\ttemp=n\n\t\tn=m\n\t\tm=temp\n\treturn 0\n\n\nn=int(input())\nm=int(input())", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    if a == b:\n        return 0\n    elif a > b:\n        a,b = b,a\n    for i in range(1,a):\n        if a % i == 0:\n            if b % i == 0:\n                return i\n    return -1\n\ndef min_Operations_optimized(a,b):\n    if a == b:\n        return 0\n    elif a > b:\n        a,b = b,a\n    for i in range(1,a):\n        if a % i == 0:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n# Import required modules\nfrom functools import reduce\n\n\n# Create a function for minimum operations\ndef min_Operations(num1, num2):\n\n    # Initialize count to 0\n    count = 0\n\n    # Make num1 = num2\n    while num1 != num2:\n        # print(\"num1 = \", num1, \"num2 = \", num2)\n        # Increase count by 1\n        count = count + 1\n        # Check if num1 is even\n        if (num1 % 2) == 0:\n            # Multiply num1 by 2\n            num1 = num1 / 2\n        else:\n            # Subtract 1 from num1\n            num1 = num1 - 1\n        # Check if num2 is even\n        if (num2 % 2) == 0:\n            # Multiply num2 by 2\n            num2 = num2 / 2\n        else:\n            # Subtract 1 from num2\n            num2 = num2 - 1\n\n    return count\n\n\n# Test code", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\nimport math\n\ndef min_Operations(a, b):\n    if a == b:\n        return 0\n    elif a > b:\n        return 1 + min_Operations(a-b, b)\n    elif b > a:\n        return 1 + min_Operations(a, b-a)\n\n# Approach 2:"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tuple_list, k):\n\treturn tuple_list[0:k]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tuple_input, k):\n    return tuple(sorted(tuple_input)[:k])\n\ndef test_extract_min_max():\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tuple, k):\n    return tuple[0:k], tuple[-k:]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom operator import itemgetter\n\n\ndef extract_min_max(tup, k):\n    tup_sorted = sorted(tup, reverse=True)\n    return tup_sorted[:k], tup_sorted[-k:]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nfrom collections import deque\n\n\ndef extract_min_max(elements, k):\n    \"\"\"\n    Extracts max and min elements from the given tuple\n    Args:\n        elements: Tuple of elements\n        k: Number of maximum and minimum elements to extract\n    Returns:\n        Tuple containing k maximum and minimum elements in the order of maximum to minimum\n    \"\"\"\n    max_queue = deque(max_heap(elements))\n    min_queue = deque(min_heap(elements))\n    return tuple(max_queue[:k]) + tuple(min_queue[:k - len(max_queue)])\n\n\ndef min_heap(elements):\n    \"\"\"\n    Creates a min heap from the given tuple\n    Args:\n        elements: Tuple of elements\n    Returns:\n        Tuple of elements in heap order\n    \"\"\"\n    heap_list = []\n    for element in elements:\n        heap_list.append(element)\n        _bubble_up(heap_list, len(heap_list) - 1)\n    return heap_list\n\n\ndef max_heap(elements):\n    \"\"\"\n    Creates a max heap from the given tuple\n    Args:\n        elements: Tuple of elements\n    Returns:\n        Tuple of elements in heap order\n    \"\"\"\n    heap_list = []\n    for element in elements:\n        heap_list.append(element)\n        _bubble_up(heap_list, len(heap_list) - 1)\n    return tuple(reversed(heap_list))\n\n\ndef _bubble_up(heap_list, i):\n    \"\"\"\n    Bubbles the element in index i up the heap\n    Args:\n        heap_list: List of elements\n        i: Index of the element to bubble up\n    \"\"\"\n    parent = (i - 1) // 2\n    if parent >= 0 and heap_list[i] < heap_list[parent]:\n        heap_list[i], heap_list[parent] = heap_list[parent], heap_list[i]\n        _bubble_up(heap_list, parent)\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tuple, k):\n    \"\"\"Return k min and max elements of tuple.\"\"\"\n    return (sorted(tuple, key=int)[0:k],\n            sorted(tuple, key=int)[-k:])\n\n\n# test", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(nums, k):\n    if k == 1:\n        return nums[0], nums[0]\n    elif k == 2:\n        return min(nums), max(nums)\n    else:\n        return nums[k-2], nums[-k]\n\ndef extract_min_max_2(nums, k):\n    return sorted(nums)[-k], sorted(nums)[:k]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(input_tuple, k):\n    min_max = []\n    for i in range(k):\n        if i % 2 == 0:\n            min_max.append(min(input_tuple[i:]))\n        else:\n            min_max.append(max(input_tuple[i:]))\n    return tuple(min_max)\n\ntest = extract_min_max((5, 20, 3, 7, 6, 8), 2)", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(t, k):\n    t = sorted(t)\n    return (t[0:k], t[-k:])\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string, n):\n    assert type(string)==type('string')\n    assert type(n)==type(1)\n    # Your code here\n\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, max_occurrences):\n    for char in string:\n        if char == \" \" or char == \",\" or char == \".\":\n            string = string.replace(char, ':', max_occurrences)\n    return string\n\n\ndef replace_max_specialchar_solution(string, max_occurrences):\n    \"\"\"\n    >>> replace_max_specialchar_solution(\"Python language, Programming language.\",2)\n    'Python:language: Programming language.'\n    \"\"\"\n    return re.sub(r\"[., ]{1,}\", ':', string, max_occurrences)\n\n\n# Unit Tests\nimport doctest\ndoctest.testmod()\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(str,num):\n    \"\"\"\n    Function to replace maximum number of special characters with a colon\n    \"\"\"\n    new_str=''\n    for s in str:\n        if s in [',','.',' ']:\n            if new_str.count(s)==num:\n                new_str+=':'\n        else:\n            new_str+=s\n    return new_str\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n    index = len(string)\n    count = 0\n    if string.find(' ') == -1 and string.find(',') == -1 and string.find('.') == -1:\n        return string\n    while index > 0:\n        if string[index] == ' ' or string[index] == ',' or string[index] == '.':\n            count += 1\n            if count == n:\n                string = string[:index] + ':' + string[index+1:]\n        index -= 1\n    return string\n\ndef test_replace_max_specialchar():\n    assert replace_max_specialchar('Python language, Programming language.',2) == 'Python:language: Programming language.'\n    assert replace_max_specialchar('Python language, Programming language.',1) == 'Python: language, Programming language.'\n    assert replace_max_specialchar('Python language, Programming language.',3) == 'Python: language, Programming: language.'\n    assert replace_max_specialchar('Python language, Programming language.',4) == 'Python: language, Programming: language.'\n\ndef replace_all(string,old,new):\n    i = string.find(old)\n    while i != -1:\n        string = string[:i]+new+string[i+len(old):]\n        i = string.find(old)\n    return string\n\ndef test_replace_all():\n    assert replace_all('Python language, Programming language.', 'P', 'p') == 'pYthon language, Programming language.'\n    assert replace_all('Python language, Programming language.', 'l', 'L') == 'PythoN LANGUAGE, Programming language.'\n    assert replace_all('Python language, Programming language.', 'e', 'E') == 'PythoNe LANGUAGE, Programming languagE.'\n\ndef r_swap(string,i,j):\n    temp = string[i]\n    string = string[:i]+string[j]+string[i]+string[j]\n    return string\n\ndef test_r_swap():\n    assert r_swap('Python language, Programming language.',0,6) == 'language", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\nimport unittest\n\ndef replace_max_specialchar(string,n):\n\tchars=[' ','.',',']\n\tmax_n=0\n\tfor char in chars:\n\t\tif string.count(char)>max_n:\n\t\t\tmax_n=string.count(char)\n\tcount=0\n\tfor char in chars:\n\t\tif string.count(char)==max_n:\n\t\t\tcount+=1\n\t\tif count==n:\n\t\t\tbreak\n\tstring=string.replace(char,':')\n\treturn string\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string,n):\n\toccurrences = len(string) - string.count(\" \") - string.count(\",\") - string.count(\".\")\n\tif occurrences < n:\n\t\treturn string\n\telse:\n\t\treturn string.replace(\" \",\" \").replace(\",\",\" \").replace(\".\",\" \").replace(\",\",\" \").replace(\".\",\" \").replace(\",\",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace(\" \",\" \").replace", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string, max_occurences):\n    new_string = \"\"\n    space = \",\"\n    dot = \".\"\n    space_occurences = 0\n    dot_occurences = 0\n    comma_occurences = 0\n    for i in string:\n        if i.isspace():\n            space_occurences += 1\n        elif i == space:\n            comma_occurences += 1\n        elif i == dot:\n            dot_occurences += 1\n        new_string += i\n        if space_occurences >= max_occurences or dot_occurences >= max_occurences or comma_occurences >= max_occurences:\n            break\n    return new_string\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,num):\n    words = string.split()\n    result = ''\n    for word in words:\n        if word.count(',') == num:\n            word = word.replace(',',':',num)\n        elif word.count('.') == num:\n            word = word.replace('.',':',num)\n        elif word.count(' ') == num:\n            word = word.replace(' ',':',num)\n        result += word+' '\n    return result.strip()\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n    \"\"\"\n    >>> replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    True\n    >>> replace_max_specialchar('Python, Python language. Python.',2)==('Python: Python language: Python.')\n    True\n    \"\"\"\n    # your code here\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, n):\n\treplace_dict = {' ' : ':','.' : ':',',':' '}\n\tstring = string.replace(' ',' ')\n\tfor i in range(n):\n\t\tstring = string.replace(' ',' ')\n\t\tstring = string.replace('.','.')\n\t\tstring = string.replace(',','.')\n\treturn string.translate(replace_dict)\n\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(list_of_numbers):\n    for number in list_of_numbers:\n        if number % 2 == 0:\n            return number\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(nums):\n    for i in nums:\n        if i % 2 == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (x):\n    for num in x:\n        if num%2 == 0:\n            return num\n    return None\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(ls):\n    for i in ls:\n        if i%2 == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even (numlist):\n    for x in numlist:\n        if x%2 == 0:\n            return x\n\ndef first_even (numlist):\n    return [x for x in numlist if x%2 == 0][0]\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(lst):\n    \"\"\"\n    >>> first_even([1, 3, 5, 7, 4, 1, 6, 8])\n    4\n    \"\"\"\n    for i in lst:\n        if i % 2 == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    for num in lst:\n        if num % 2 == 0:\n            return num\n\n    return None\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    for number in lst:\n        if number % 2 == 0:\n            return number\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(nums):\n    \"\"\"\n    Find the first even number in a list of numbers.\n    \"\"\"\n    for i in nums:\n        if i % 2 == 0:\n            return i\n    return None\n\n# Test cases"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_object):\n    if type(tuple_object) == type(()):\n        # use set to remove duplicate type\n        types = set([type(element) for element in tuple_object])\n        if len(types) == 1:\n            return True\n        else:\n            return False\n    else:\n        print(\"Input is not a tuple\")\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple1):\n    check = type(tuple1[0])\n    for i in range(1, len(tuple1)):\n        if type(tuple1[i]) != check:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    if isinstance(tup, tuple):\n        lst = list(tup)\n        return all(isinstance(x, type(lst[0])) for x in lst)\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_val: tuple) -> bool:\n    result = True\n    if len(tuple_val) < 2:\n        return result\n\n    cur_type = type(tuple_val[0])\n    for val in tuple_val[1:]:\n        if type(val) != cur_type:\n            result = False\n            break\n    return result\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple):\n    return all(map(type, tuple))\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_1):\n    if type(tuple_1[0]) == type(tuple_1[1]):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple):\n    return type(tuple[0]) == type(tuple[1]) == type(tuple[2]) == type(tuple[3]) == type(tuple[4]) == type(tuple[5]) == type(tuple[6])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple):\n    type = type(tuple[0])\n    for i in range(1, len(tuple)):\n        if type != type(tuple[i]):\n            return False\n    return True\n\n# Run-time tests\nt1 = (1, 2, 3, 4, 5, 6, 7)\nt2 = (1, 2, 3, \"4\", 5, 6, 7)\nt3 = (1, 2, 3, 4, 5, 6, 7)", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(nums):\n    try:\n        if len(nums) == 0:\n            return False\n        elif len(nums) == 1:\n            return True\n        else:\n            return type(nums[0]) == type(nums[1])\n    except:\n        return False\n\n#assert check_type((5, 6, 7, 3, 5, 6) ) == True\n\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, m):\n    if arr is None or n < 0 or m < 0:\n        return False\n    if n < m:\n        return False\n    l, r = 0, n - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == arr[m]:\n            l = mid + 1\n        elif arr[mid] < arr[m]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l >= n - m\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, element):\n    # assume element is in the middle of the array\n    left_sum = 0\n    right_sum = 0\n    mid = n//2\n\n    for i in range(mid):\n        left_sum += arr[i]\n\n    for i in range(mid, n):\n        right_sum += arr[i]\n\n    if (left_sum >= element and right_sum >= element) or (left_sum <= element and right_sum <= element):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, len_arr, majority):\n    index = 0\n    count = 0\n    while index < len_arr:\n        if arr[index] == majority:\n            count += 1\n            index += 1\n        elif arr[index] != majority:\n            index += 1\n        else:\n            break\n\n    return count > len_arr // 2\n\n\ndef is_majority_best(arr, len_arr, majority):\n    l = 0\n    r = len_arr - 1\n    mid = (l + r) // 2\n    count = 0\n    while l <= mid < r:\n        if arr[mid] == majority:\n            count += 1\n            mid += 1\n        elif arr[mid] > majority:\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    return count > len_arr // 2\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nfrom typing import List\n\n\ndef is_majority(arr: List[int], n: int, el: int) -> bool:\n    \"\"\"\n    n - the total number of elements\n    el - the element to check for majority presence\n    \"\"\"\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < el:\n            left = mid + 1\n        elif arr[mid] > el:\n            right = mid - 1\n        else:\n            left += 1\n    return left == right\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(a, x, m):\n    \"\"\"\n    Find if x is the majority element of array a.\n    \"\"\"\n    count = 0\n    for i in range(0, m):\n        if a[i] == x:\n            count += 1\n        if count > m / 2:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, size, majority):\n\n    half_size = size // 2\n    counter = 0\n    for i in range(size):\n        if arr[i] == majority:\n            counter += 1\n        if counter > half_size:\n            return True\n        if counter == half_size:\n            return False\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(a, n, majority):\n    \"\"\"\n    :param a: list of numbers\n    :param n: length of array a\n    :param majority: required majority element\n    :return: True if majority element found else False\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if a[i] == majority:\n            count += 1\n    if count >= n/2:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(array, length, majority_element):\n    if majority_element > (length / 2):\n        majority_element = length - majority_element\n\n    start = 0\n    end = length - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if array[mid] < majority_element:\n            start = mid + 1\n        elif array[mid] > majority_element:\n            end = mid - 1\n        else:\n            if end - start == 1 or array[mid - 1] != majority_element:\n                return True\n            start = mid + 1\n\n    return False\n\n\ndef main():\n    test_cases = [\n        ([1, 2, 3, 3, 3, 3, 10], 7, 3, True),\n        ([1, 2, 3, 3, 3, 3, 10], 7, 5, False),\n        ([1, 1, 2, 2, 2, 1, 2], 4, 1, True),\n        ([1, 1, 2, 2, 2, 1, 2], 4, 2, False),\n    ]\n\n    for (array, length, majority_element, result) in test_cases:\n        print(f\"For array {array} and majority_element {majority_element}, \"\n              f\"the result is {result}\")\n        assert is_majority(array, length, majority_element) == result\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\nfrom typing import List\n\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Checking for the majority element in the array\n    \"\"\"\n    start = 0\n    end = n - 1\n    if end < 0:\n        return False\n    while start <= end:\n        mid = (end + start) // 2\n        if arr[mid] == x:\n            end = mid - 1\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    if arr[start] == x:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n# This will check if n number of elements in the array are equal to x\ndef is_majority_count(a, n, x):\n    for i in range(len(a)):\n        if a[i] == x:\n            n = n-1\n            if n==0:\n                return True\n    return False\n\n# This will return the index of the majority element\ndef is_majority_index(a, n, x):\n    for i in range(len(a)):\n        if a[i] == x:\n            n = n-1\n            if n==0:\n                return i\n    return -1\n\n# This will find the majority element in the array\ndef is_majority_element(a, n, x):\n    majority_index = is_majority_index(a, n, x)\n    if majority_index != -1:\n        return a[majority_index]\n    return False\n\n# This is the driver code\ndef main():\n    a = [1, 2, 3, 3, 3, 3, 10]\n    x = 7\n    print(\"Array: \", a)\n    print(\"Number of occurences: \", n)\n    print(\"Majority element: \", is_majority_element(a, n, x))\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        n = n & (n-1)\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n\n    return count\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(number):\n\n    count=0\n    # Write your code here.\n    # you can assume that 'number' is not 0\n    # otherwise the logic will become difficult.\n\n    while number:\n        if number&1:\n            count+=1\n        number = number>>1\n    return count\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    # Your code here\n    return bin(n).count('1')\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    cnt = 0\n    while num:\n        if num & 1 == 1:\n            cnt += 1\n        num = num >> 1\n    return cnt\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    bit_count = 0\n    while n != 0:\n        bit_count += n & 1\n        n = n >> 1\n    return bit_count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n    count = 0\n    for i in range(1, 33):\n        if (num & (1 << i)) != 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n    count = 0\n    for i in range(num):\n        if num & 1 == 1:\n            count += 1\n        num >>= 1\n    return count\n\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(a,l,r):\n    \"\"\"\n    :param a: the list to be searched\n    :param l: the start index of the list\n    :param r: the end index of the list\n    :return: return the minimum element\n    \"\"\"\n    if l > r:\n        return None\n    mid = (l + r) // 2\n    if l == r:\n        return a[l]\n    elif l < r:\n        if a[mid] < a[r]:\n            return a[mid]\n        else:\n            return find_Min(a,l,r - 1)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(A,L,R):\n    while L<R:\n        if A[L]<=A[R]:\n            return A[L]\n        mid=(L+R)//2\n        if A[mid]<A[L]:\n            R=mid\n        else:\n            L=mid+1\n    return A[L]\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,low,high):\n    if low < high:\n        mid = (low + high)//2\n        if mid == 0 or arr[mid-1] >= arr[mid]:\n            if mid == len(arr) - 1 or arr[mid+1] >= arr[mid]:\n                return arr[mid]\n            else:\n                return find_Min(arr,mid+1,high)\n        else:\n            if mid == 1 or arr[mid-1] < arr[mid]:\n                return find_Min(arr,low,mid-1)\n            else:\n                return find_Min(arr,mid+1,high)\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(array,l,r):\n    if l==r:\n        return array[l]\n    mid = (l+r)/2\n    return min(find_Min(array,l,mid),find_Min(array,mid+1,r))\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(nums, left, right):\n    if nums[left] <= nums[right]:\n        return nums[left]\n    else:\n        mid = (left + right) // 2\n        left = mid + 1\n        if nums[left] <= nums[right]:\n            return nums[left]\n        else:\n            left = mid - 1\n            if nums[left] <= nums[right]:\n                return nums[left]\n            else:\n                return find_Min(nums, mid+1, right)\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    mid = start + (end - start)//2\n    if arr[mid] <= arr[start]:\n        return find_Min(arr, start, mid-1)\n    else:\n        return find_Min(arr, mid+1, end)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(array,start,end):\n\tmin_number = array[start]\n\tfor i in range(start,end):\n\t\tif array[i] < min_number:\n\t\t\tmin_number = array[i]\n\treturn min_number\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,l,r):\n    if l==r:\n        return arr[l]\n    mid = (l+r)//2\n    if arr[l]<=arr[mid]:\n        return find_Min(arr,l,mid)\n    else:\n        return find_Min(arr,mid,r)\n"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    return ''.join([s[i] for i in range(0, len(s), 2)])\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n\treturn ''.join([x for i, x in enumerate(s) if i % 2])\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    if not string:\n        return string\n    output = \"\"\n    for i, char in enumerate(string):\n        if i % 2 == 1:\n            output += char\n    return output\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    \"\"\"\n    >>> odd_values_string('abcdef')\n    'ace'\n    >>> odd_values_string('abcdefg')\n    'aceg'\n    >>> odd_values_string('abcdefg')\n    'aceg'\n    \"\"\"\n    result = ''\n    for index, character in enumerate(string):\n        if index % 2 == 0:\n            result += character\n    return result\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(str):\n  return \"\".join(str[index] for index, char in enumerate(str) if index % 2)\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    s = list(string)\n    i = 0\n    for s_ in s:\n        s[i] = s[i+1]\n        i += 2\n    return ''.join(s)\n\ndef test_odd_values_string():\n    assert odd_values_string('abcdef') == 'ace'\n    assert odd_values_string('a') == 'a'\n    assert odd_values_string('ab') == 'ab'\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    if len(string) == 0:\n        return string\n    return string[0:1] + odd_values_string(string[2:])\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(given_string):\n    return given_string[::2]", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(st):\n    return st[::2]\n\ndef odd_values_string_2(st):\n    return \"\".join(st[i] for i in range(0, len(st), 2))\n\ndef odd_values_string_3(st):\n    return st[:len(st):2]\n\ndef odd_values_string_4(st):\n    return \"\".join(st[i] for i in range(0, len(st), 2))\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(x,y,z):\n    if x < y and x < z:\n        return x\n    elif y < x and y < z:\n        return y\n    elif z < x and z < y:\n        return z\n    else:\n        return \"Not a valid input\"\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    \"\"\"\n    a,b,c are numbers\n    returns minimum of three numbers\n    \"\"\"\n    if a<b<c:\n        return a\n    elif a<c<b:\n        return c\n    elif b<a<c:\n        return b\n    elif b<c<a:\n        return c\n    elif c<a<b:\n        return a\n    elif c<b<a:\n        return b\n    ", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\n# + id=\"x16wk7p4B38e\" colab_type=\"code\" outputId=\"c66297b0-a787-468b-b895-f7e751e403a3\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34}\nmin_of_three(10,20,0)\n\n# + id=\"rM7X2z9YB-u6\" colab_type=\"code\" outputId=\"e98181f4-8424-49e4-fb52-a0d81f8e6a5b\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34}", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x,y,z):\n    if x<=y and x<=z:\n        return x\n    elif y<=x and y<=z:\n        return y\n    else:\n        return z", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\ndef main():\n    print(min_of_three(1, 2, 3))\n    print(min_of_three(1, 2, 3))\n    print(min_of_three(1, 2, 3))\n    print(min_of_three(1, 2, 3))\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\n# You code here.\ndef all_Bits_Set_In_The_Given_Range(start,end,n):\n    if start > end:\n        return False\n    if start > n or end > n:\n        return False\n    else:\n        if (n&(1<<start)) == 0 and (n&(1<<end)) == 0:\n            return True\n        else:\n            return False\n        \n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return bin(n)[2:][start-1:end].replace('0','').replace('1','') == ''\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(number, start, end):\n    return 2**start >= number >= 2**end\n\n# Tests", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\n# user code goes here\ndef all_Bits_Set_In_The_Given_Range(n,m,k):\n    n = 2 ** n\n    m = 2 ** m\n    k = 2 ** k\n    return (n & m) ^ n == k\n\n# code template for calling your function from the driver program", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n, a, b):\n\treturn not any(bin(i).count('1') for i in range(n,a, -1) if i not in range(a, b+1))\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(first_bit, last_bit):\n    return (1 << (last_bit+1)) - 1 & (1 << first_bit) == 1 << first_bit\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(a,b,c):\n    return (bin(a) & bin(b) & bin(c)) == bin(0)\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start_range,end_range,number):\n    flag = 1\n    for i in range(start_range,end_range+1):\n        if(number & i != i):\n            flag = 0\n            break\n    return flag\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n, a, b):\n    \"\"\"\n    :param n: n\n    :param a: lower bound\n    :param b: upper bound\n    :return: True if all the bits are set in the given range or False if any bit is unset\n    \"\"\"\n    return ~0b1 << n >= (1 << a) & (1 << b) - 1\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n, m, x):\n    return bin(n & ((2**x) -1)).count('1') == bin(n & ((2**x) -1)).count('1')\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, x):\n    \"\"\"\n    :param arr: list\n    :param x: int\n    :return: list\n    \"\"\"\n    neg_ind = arr.index(x)\n    neg_ind_rev = len(arr)-1-arr.index(x)\n    new_arr = []\n    for i in range(len(arr)):\n        if i < neg_ind:\n            new_arr.append(arr[i])\n        if i == neg_ind:\n            new_arr.append(x)\n        if i > neg_ind:\n            new_arr.append(arr[i-1])\n    return new_arr\n\n# Tests", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr: list, max_num: int) -> list:\n    if arr is None or len(arr) == 0:\n        raise ValueError\n\n    low_idx = 0\n    high_idx = len(arr) - 1\n\n    while low_idx <= high_idx:\n        while low_idx < len(arr) and arr[low_idx] < 0:\n            low_idx += 1\n\n        while high_idx >= 0 and arr[high_idx] >= 0:\n            high_idx -= 1\n\n        if low_idx >= high_idx:\n            break\n\n        arr[low_idx], arr[high_idx] = arr[high_idx], arr[low_idx]\n\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, pos_limit):\n    index_of_neg = arr.index(min(arr))\n    if arr[index_of_neg] > pos_limit:\n        return arr\n    return arr[index_of_neg:] + arr[:index_of_neg]\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, max_value):\n    # Write your code here\n    if not arr:\n        return arr\n    ret = []\n    for i in arr:\n        if i >= max_value:\n            ret.append(i)\n        elif i <= -max_value:\n            ret.insert(0,i)\n        else:\n            ret.append(i)\n    return ret\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nmax_value = 9", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, length):\n    index = 0\n    while index < length:\n        if arr[index] < 0:\n            index += 1\n            while index < length and arr[index] >= 0:\n                index += 1\n        elif index == length - 1:\n            index = 0\n        else:\n            arr[index], arr[index + 1] = arr[index + 1], arr[index]\n            index += 1\n    return arr\n\ndef test_re_arrange_array():\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 10) == [-1, -3, -7, 4, 5, 6, 2, 8, 9, 0]\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 4) == [-1, 2, -3, 4]\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 3) == [-1, 2, -3]\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 1) == [-1]\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\nfrom typing import List\n\n\ndef re_arrange_array(arr: List[int], size: int) -> List[int]:\n    res = []\n    pos = []\n    for i in arr:\n        if i >= 0:\n            pos.append(i)\n        else:\n            res.append(i)\n    for i in range(len(pos)):\n        res.append(pos[i])\n    return res[:size]\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\nimport pytest\n\n\ndef re_arrange_array(arr, k):\n    \"\"\"\n    Algorithm:\n    1) Create a temporary array \"temp\" of size n + 1.\n    2) Iterate the elements of the array \"arr\". For each element,\n       a) If the element is positive, append the element to the end of temp.\n       b) If the element is negative, push the element to the beginning of temp.\n    3) Traverse the elements of \"temp\". If the element is positive,\n       remove the element from temp. Otherwise, add it to the beginning of \"arr\".\n    4) Return the updated array \"arr\".\n    \"\"\"\n    # Create a temporary array \"temp\"\n    temp = [0] * (len(arr) + 1)\n\n    # Iterate the elements of the array \"arr\"\n    for element in arr:\n        # If the element is positive\n        if element > 0:\n            # Append the element to the end of temp\n            temp.append(element)\n        # If the element is negative\n        else:\n            # Push the element to the beginning of temp\n            temp.insert(0, element)\n\n    # Traverse the elements of \"temp\"\n    for element in temp:\n        # If the element is positive\n        if element > 0:\n            # Remove the element from temp\n            temp.remove(element)\n        # If the element is negative\n        else:\n            # Add it to the beginning of \"arr\"\n            arr.insert(0, element)\n\n    return arr\n\n\n@pytest.mark.parametrize(\"arr,k,expected\", [([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9, [-1, -3, -7, 4, 5, 6, 2, 8, 9])])\ndef test_rearrange_array(arr, k, expected):\n    assert re_arrange_array(arr, k) == expected\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    # check if there are any negative numbers\n    negative = [i for i in arr if i < 0]\n\n    # if negative numbers are not present, then just return the array as it is\n    if len(negative) == 0:\n        return arr\n\n    # if negative numbers are present, then find their index in the array\n    negative_idx = [arr.index(i) for i in negative]\n    # print(negative_idx)\n\n    # create a count variable for the number of negative numbers\n    count = 0\n\n    # for each index, add the number to the count\n    for i in negative_idx:\n        count += 1\n\n    # find the index of the last positive number in the array\n    last_positive_idx = len(arr) - 1 - count\n\n    # reverse the last positive number from the end of the array\n    arr[last_positive_idx] = arr[last_positive_idx] * -1\n\n    # print(arr)\n\n    # if negative numbers are present, then check if the count is odd or even\n    if count % 2 == 0:\n        # print(\"even\")\n        # reverse the first half of the array\n        arr[0:count//2] = arr[0:count//2][::-1]\n\n        # reverse the second half of the array\n        arr[count//2:] = arr[count//2:][::-1]\n\n    else:\n        # print(\"odd\")\n        # reverse the first half of the array\n        arr[0:count//2] = arr[0:count//2][::-1]\n\n        # reverse the second half of the array\n        arr[count//2:] = arr[count//2:][::-1]\n\n        # print(arr)\n\n        # find the index of the last positive number in the array\n        last_positive_", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        if arr[start] < 0 and arr[end] >= 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        elif arr[start] >= 0 and arr[end] < 0:\n            end -= 1\n        else:\n            start += 1\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, N):\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] > 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] > 0 and arr[j] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        elif arr[i] < 0 and arr[j] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n    return arr\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s,c):\n  return s.replace(\" \",\"{0}\".format(c))", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, replace_char=\" \"):\n    return string.replace(\" \", replace_char)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, char):\n    return str.replace(\" \", char)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s, ch):\n    return s.replace(\" \",ch)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s, char):\n    return s.replace(' ', char)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, char):\n    return string.replace(\" \", char)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n#SOLUTION\ndef replace_blank(string,replace_char):\n  return string.replace(\" \",replace_char)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s, c):\n    return s.replace(' ',c)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s, c):\n    import re\n    return re.sub(r' ',c,s)\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, max_idx):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type max_idx: int\n    :rtype: int\n    \"\"\"\n    n = len(triangle)\n    max_sums = [[0 for _ in range(n+1)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1):\n            if j == 0:\n                max_sums[i][j] = triangle[i][j]\n            elif j == i:\n                max_sums[i][j] = triangle[i][j] + max_sums[i-1][j-1]\n            else:\n                max_sums[i][j] = max(triangle[i][j] + max_sums[i-1][j-1],\n                                    triangle[i][j] + max_sums[i-1][j])\n    return max_sums[max_idx-1][n-1]\n\n\ndef max_sum_memo(triangle, max_idx):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type max_idx: int\n    :rtype: int\n    \"\"\"\n    n = len(triangle)\n    max_sums = [0 for _ in range(n+1)]\n    for i in range(n):\n        for j in range(i+1):\n            if j == 0:\n                max_sums[j] = triangle[i][j]\n            elif j == i:\n                max_sums[j] = triangle[i][j] + max_sums[j-1]\n            else:\n                max_sums[j] = max(triangle[i][j] + max_sums[j-1], triangle[i][j] + max_sums[j])\n    return max_sums[n-1]\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, length):\n    pass\n\ndef max_sum2(triangle, length):\n    pass\n\ndef test_max_sum():\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\ndef test_max_sum2():\n    assert max_sum2([[1], [2,1], [3,3,2]], 3) == 6\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, row):\n    \"\"\"\n    Return the maximum sum of all elements of the given triangle\n    \"\"\"\n    if row == 1:\n        return triangle[row-1][0]\n    return max(triangle[row-1][0] + triangle[row-1][i] + triangle[row-1][i+1] for i in range(len(triangle[row-1]) - 2))\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(array, limit):\n    \"\"\"\n    This function will take an array, representing the rows of the triangle and a limit.\n    It will return the maximum sum that fits in the array and is less than the limit.\n    \"\"\"\n    # Create a list of zeros to represent our triangle\n    triangle = []\n    for row in array:\n        triangle.append([0]*(len(row)+1))\n    \n    # Iterate through the triangle, adding the elements in each row together.\n    # Then find the max sum and return it.\n    for i in range(1, len(triangle)):\n        for j in range(1, len(triangle[i])):\n            triangle[i][j] = triangle[i-1][j] + triangle[i][j-1]\n            if triangle[i][j] < limit:\n                return triangle[i][j]\n\n    # If no sum exists in the triangle, return -1.\n    return -1\n\n\n# + deletable=true editable=true\nimport unittest\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\nimport operator\n\ndef max_sum(arr, n):\n    \"\"\"\n    This function computes the maximum sum of the last n numbers in the right triangle.\n    \"\"\"\n    if n == 1:\n        return arr[n-1][n-1]\n\n    # Compute the right triangle of numbers\n    right = [[0]*(n+1) for x in range(n)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j == i:\n                right[i-1][j-1] = arr[i-1][j-1]\n            elif j < i:\n                right[i-1][j-1] = right[i-2][j-1] + arr[i-1][j-1]\n\n    # Compute the maximum sum\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, right[i][j], right[i][j-1])\n\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(arr, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n-i-1):\n            max_sum = max(max_sum, arr[i][j] + arr[i][j+1] + arr[i+1][j+1])\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(arr, n):\n    # Solution 1: Use recursion (TLE)\n    # return helper(arr, 0, n-1)\n    # Solution 2: Use memoization (Time Limit Exceeded)\n    # Memoization\n    # dp = [0 for _ in range(n)]\n    # for i in range(n):\n    #     dp[i] = max(dp[i-1], dp[i-2] + arr[i][i])\n    # return dp[-1]\n\n    # Tabulation\n    memo = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        memo[i][i] = arr[i][i]\n        if i > 0:\n            memo[i][i-1] = max(memo[i][i-1], memo[i-1][i-1] + arr[i][i-1])\n        if i > 1:\n            memo[i][i-2] = max(memo[i][i-2], memo[i-1][i-2] + arr[i][i-2])\n    for i in range(2, n):\n        for j in range(i-1, n):\n            memo[i][j] = max(memo[i-1][j] + arr[i][j], memo[i-2][j-1] + arr[i][j])\n    return memo[-1][-1]\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, k):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(len(triangle)):\n        for j in range(len(triangle[i])):\n            if j + k < len(triangle[i]):\n                res = max(res, triangle[i][j] + triangle[i][j + k])\n    return res\n\n\ndef main():\n    print(max_sum([[1], [2,1], [3,3,2]], 3))\n    print(max_sum([[1],[2]], 2))\n    print(max_sum([[1],[2,1]], 1))\n    print(max_sum([[1],[2,1]], 3))\n    print(max_sum([[1],[2,1,1,1,2]], 1))\n    print(max_sum([[1],[2,1,1,1,2]], 2))\n    print(max_sum([[1],[2,1,1,1,2]], 3))\n    print(max_sum([[1],[2,1,1,1,2]], 4))\n    print(max_sum([[1],[2,1,1,1,2]], 5))\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, max_len):\n    res = triangle[0][0] + triangle[1][1]\n    max_col = max_len\n    for i in range(1, len(triangle) - 1):\n        tmp = triangle[i][max_col - 1] + triangle[i + 1][0]\n        if tmp > res:\n            res = tmp\n    return res\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(tri: list, n: int) -> int:\n    # Create a lookup table to store sum of every row\n    # len(tri) + 1 because we need to insert an extra row at 0th index.\n    # tri[i][j] = tri[i - 1][j - 1] + tri[i - 1][j]\n    lookup_table = [[0] * (n + 1) for i in range(len(tri) + 1)]\n\n    # iterate over the tri\n    for row_index, row in enumerate(tri):\n        # store the row_index in lookup_table\n        lookup_table[row_index][0] = row_index\n        for col_index, value in enumerate(row):\n            if col_index == 0:\n                # insert current row into the lookup table.\n                lookup_table[row_index][col_index] = value\n                continue\n            lookup_table[row_index][col_index] = (\n                lookup_table[row_index - 1][col_index - 1] +\n                lookup_table[row_index - 1][col_index])\n\n    # sum of top to bottom, then bottom to top\n    sum_1 = 0\n    for row_index in range(len(lookup_table) - 1, -1, -1):\n        for col_index in range(n - 1, 0, -1):\n            if lookup_table[row_index][col_index] > lookup_table[row_index + 1][col_index]:\n                sum_1 += lookup_table[row_index][col_index]\n\n    sum_2 = 0\n    for row_index in range(1, len(lookup_table)):\n        for col_index in range(n - 1, 0, -1):\n            if lookup_table[row_index][col_index] > lookup_table[row_index - 1][col_index]:\n                sum_2 += lookup_table[row_index][col_index]\n\n    return max(sum_1, sum_2)\n\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nlarg_nnum = lambda x,n: sorted(x, reverse=True)[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(l,n):\n    return sorted(l, key=l.count)[-n:]\n\ndef larg_nnum2(l,n):\n    return sorted(l, key=lambda x:l.count(x))[-n:]\n\ndef larg_nnum3(l,n):\n    return sorted(l, key=lambda x:l.count(x), reverse=True)[-n:]\n\ndef larg_nnum4(l,n):\n    return sorted(l, key=lambda x:l.count(x), reverse=True)[:n]\n\ndef larg_nnum5(l,n):\n    return sorted(l, key=lambda x:l.count(x), reverse=True, key=l.count)[-n:]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset,n):\n    num = len(dataset)\n    largest = dataset[0]\n    smallest = dataset[0]\n    for i in range(num-1):\n        if dataset[i] > largest:\n            largest = dataset[i]\n        elif dataset[i] < smallest:\n            smallest = dataset[i]\n    return largest,smallest\n\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n\n# ## Problem 6\n#\n# Write a function to get the n smallest items from a dataset.\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nimport random\ndef larg_nnum(l,n):\n    l1=random.sample(l,n)\n    return l1\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(data, n):\n    data_copy = data[:]\n    data_copy.sort()\n    n = len(data_copy)-n\n    return data_copy[-n:]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(ds,num):\n    \"\"\"\n    larg_nnum(ds,num)\n\n    ds: a list of numbers.\n\n    num: an integer.\n    \"\"\"\n    if num < 0:\n        return []\n    if num == 0:\n        return []\n    elif num == 1:\n        return max(ds)\n    elif num > 1:\n        return max(ds) + larg_nnum(ds,num-1)\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(data,n):\n    return sorted(data)[-n:]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset, n):\n    return sorted(dataset, reverse=True)[:n]\n\n\ndef test_larg_nnum():\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\n# 3.\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset, n):\n    return sorted(dataset, reverse=True)[0:n]\n\n# print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(num_list, n):\n    num_list.sort(reverse=True)\n    return num_list[:n]"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\tlsa = (3.14*r**2)*h\n\treturn lsa\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\nimport math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\" \n    takes the radius and height of a cylinder and returns the lateral surface area\n    \n    \"\"\"\n    pi=math.pi\n    return 2*pi*radius*height+pi*radius**2\n\n\n# + id=\"zFbzX5tH-Vkm\"", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius,height):\n\tarea = 2 * 3.14159 * radius * height\n\treturn area\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius,height):\n    return (2*3.14*radius*height)\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius,height):\n    \"\"\"\n    >>> lateralsuface_cylinder(10,5)\n    314.15000000000003\n    \"\"\"\n    return 2*math.pi*radius*(radius+height)", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius, height):\n  l = 2*math.pi*radius\n  b = 2*height\n  return l+b\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"g73vRU315P-a\" outputId=\"1c545a29-6e5c-413f-f4c4-0a070d016e4f\"", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n\n    Parameters:\n        radius (float): the radius of the cylinder\n        height (float): the height of the cylinder\n\n    Returns:\n        The lateral surface area of the cylinder.\n    \"\"\"\n    lateral_surface = 2 * 3.1415 * radius * (radius + height)\n    return lateral_surface\n\n# Write your tests below:\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    lateralsurface_cylinder(r,h) - Calculate the lateral surface area of a cylinder.\n\n    >>> lateralsurface_cylinder(10,5)\n    314.15000000000003\n\n    '''\n    ls = 2 * 3.1415 * r * h\n    return ls\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Input:\n        radius: radius of the cylinder\n        height: height of the cylinder\n    Output:\n        lateral surface area of the cylinder\n    \"\"\"\n    result = 2 * 3.14 * radius * height\n    return result\n\ndef main():\n    #import doctest\n    #doctest.testmod()\n    #assert lateralsuface_cylinder(10,5)==314.15000000000003\n    #print(lateralsuface_cylinder(10,5))\n    #input_radius = float(input('Enter the radius of the cylinder: '))\n    #input_height = float(input('Enter the height of the cylinder: '))\n    #print(lateralsuface_cylinder(input_radius, input_height))\n\n    print('-----------------------------')\n    print('Area of a Sphere')\n    print('-----------------------------')\n    input_radius = float(input('Enter the radius of the sphere: '))\n    print('Area of a sphere: ', area_sphere(input_radius))\n\n    print('-----------------------------')\n    print('Surface Area of a Sphere')\n    print('-----------------------------')\n    input_radius = float(input('Enter the radius of the sphere: '))\n    print('Surface Area of a sphere: ', surfacearea_sphere(input_radius))\n\n    print('-----------------------------')\n    print('Volume of a Sphere')\n    print('-----------------------------')\n    input_radius = float(input('Enter the radius of the sphere: '))\n    print('Volume of a sphere: ', volume_sphere(input_radius))\n\n    print('-----------------------------')\n    print('Area of a Cylinder')\n    print('-----------------------------')\n    input_radius = float(input('Enter the radius of the cylinder: '))\n    input_height = float(input('Enter the height of the cylinder: '))\n    print('Area of a cylinder: ', area_cylinder(input_radius, input_height))\n\n    print('-----------------------------')\n    print('Surface Area of a Cylinder')\n    print('-----------------------------", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(diameter,height):\n    return 2 * 3.14159 * diameter * height\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(n):\n    return n**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(n):\n    \"\"\"\n    :param n: (int) the length of a side of the cube\n    :return: (int) the volume of the cube\n    \"\"\"\n    return n**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length ** 3\n\ndef volume_cube_2(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_3(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_4(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_5(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_6(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_7(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_8(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_9(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_10(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_11(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_12(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_13(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_14(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_cube_15(length):\n    \"\"\"\n    Function to find the volume of a cube.\n    \"\"\"\n    return length * length * length\n\ndef volume_", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(x):\n    return x**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(x):\n    return x**3\n\n#\n# Problem 4: Fibonacci Sequence\n#\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(length):\n    \"\"\"\n    >>> volume_cube(3)\n    27\n    \"\"\"\n    return length ** 3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side_length):\n    return side_length**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(n):\n    if n < 1:\n        raise ValueError(\"Parameter n must be greater than 0\")\n    return n ** 3\n\ndef main():\n    print(\"the volume of a cube is \", volume_cube(3))\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(x):\n    return x**3", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(num):\n    return num*num*num\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    return number & ~1\n\n# Test Case", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n# your code here\ndef even_bit_set_number(num):\n    num = int(num)\n    return num&~1\n\ndef test_even_bit_set_number():\n    assert even_bit_set_number(10) == 10\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    num = num & 0xAAAAAAAA # num & (num >> 1)\n    num = num & 0x55555555\n    return num\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    \"\"\"\n    Set all even bits to 1\n    \"\"\"\n    return number & 0x55555555\n\ndef test_even_bit_set_number():\n    \"\"\"\n    Test even_bit_set_number\n    \"\"\"\n    assert even_bit_set_number(10) == 10\n\n\ndef is_power_of_two(number):\n    \"\"\"\n    Check whether a number is a power of 2\n    \"\"\"\n    # Zero is a power of 2\n    if number == 0:\n        return True\n    # Check if the given number has only one set bit\n    return not number & (number - 1)\n\n\ndef test_is_power_of_two():\n    \"\"\"\n    Test is_power_of_two\n    \"\"\"\n    assert is_power_of_two(1) is True\n    assert is_power_of_two(2) is True\n    assert is_power_of_two(4) is True\n    assert is_power_of_two(8) is True\n    assert is_power_of_two(16) is True\n\n    assert is_power_of_two(3) is False\n    assert is_power_of_two(5) is False\n    assert is_power_of_two(6) is False\n    assert is_power_of_two(10) is False\n    assert is_power_of_two(11) is False\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    return num & ~num + 1\n\ndef test_even_bit_set_number():\n    assert even_bit_set_number(10) == 10\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    return number & 0b10101010\n\ndef test_even_bit_set_number():\n    assert even_bit_set_number(10) == 10\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    number %= 4294967296\n    return number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    return number | (number >> 1)\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    # write your code here\n    return number | (number >> 1)\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(rows,columns):\n    if rows == 1:\n        return 1\n    if columns == 1:\n        return 1\n    result = 0\n    if rows == columns:\n        result = result + No_of_Triangle(rows-1,columns)\n    else:\n        result = result + No_of_Triangle(rows-1,columns) + No_of_Triangle(rows,columns-1)\n    return result\n\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        a, b = b, a\n    if a == 1:\n        return b\n    if b == 1:\n        return a\n\n    return a + No_of_Triangle(a - 1, b - 1)\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n#Your code goes here\ndef No_of_Triangle(sides, area):\n    count=0\n    if(sides%2==0):\n        for i in range(1,sides/2):\n            if(i*(2*i-1)<=area):\n                count+=1\n    return count", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    if a==1:\n        return 1\n    elif a==2:\n        return 3\n    elif a==3:\n        return 5\n    elif a==4:\n        return 7\n    elif a==5:\n        return 9\n    elif a==6:\n        return 11\n    elif a==7:\n        return 13\n    elif a==8:\n        return 15\n    elif a==9:\n        return 17\n    elif a==10:\n        return 19\n    elif a==11:\n        return 21\n    elif a==12:\n        return 23\n    elif a==13:\n        return 25\n    elif a==14:\n        return 27\n    elif a==15:\n        return 29\n    elif a==16:\n        return 31\n    elif a==17:\n        return 33\n    elif a==18:\n        return 35\n    elif a==19:\n        return 37\n    elif a==20:\n        return 39\n    elif a==21:\n        return 41\n    elif a==22:\n        return 43\n    elif a==23:\n        return 45\n    elif a==24:\n        return 47\n    elif a==25:\n        return 49\n    elif a==26:\n        return 51\n    elif a==27:\n        return 53\n    elif a==28:\n        return 55\n    elif a==29:\n        return 57\n    elif a==30:\n        return 59\n    elif a==31:\n        return 61\n    elif a==32:\n        return 63\n    elif a==33:\n        return 65\n    elif a==34:\n        return 67\n    elif a==35:\n        return 69\n    elif a==36:\n        return 71\n    elif a==37:\n        return 73\n    elif a==38:\n        return 75\n    elif a==39:\n        return 77\n   ", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\nimport math\n\ndef No_of_Triangle(s,e):\n\treturn int(math.pow((s+e),2)/2)\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(l,r):\n    l_max = r\n    a = (l*l - r*r) ** 0.5\n    l_min = int(a)\n    l_max = int(l + a)\n    x = l_min\n    y = l_max\n    n = 0\n    while(x >= l_min and y <= l_max):\n        c = (x*x + y*y) ** 0.5\n        if c == r:\n            n += 1\n        x -= 1\n        y += 1\n    return n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(r, a):\n    if r < 2 or a < 2:\n        return 0\n    return No_of_Triangle(r-1, a) + No_of_Triangle(r-2, a) + No_of_Triangle(r-2, a-1) + No_of_Triangle(r-1, a-1) + No_of_Triangle(r-1, a-2)\n\n\n# Sample Input\nr = 4\na = 2\n\n# Sample Output", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef count_triangle(n):\n    \"\"\"\n    Return the number of equilateral triangle that can be formed within an equilateral triangle of side n\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    return n * (n + 1) // 2 - n\n\ndef count_triangle_brute_force(n):\n    \"\"\"\n    Return the number of equilateral triangle that can be formed within an equilateral triangle of side n by using brute force method\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i):\n            if i + j + 1 == n:\n                count += 1\n\n    return count\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(len,base_len):\n    return (len**2)/4-base_len*2-1\n\n#print(No_of_Triangle(5,2))\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(length, a):\n    return (length - 1) * (length + 1) // 2 // a + 1\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    tuples_dict = {}\n    for tup in tuples:\n        if tup[0] in tuples_dict:\n            tuples_dict[tup[0]].append(tup[1])\n        else:\n            tuples_dict[tup[0]] = [tup[1]]\n    return tuples_dict\n\ndef main():\n    pass\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\nfrom collections import defaultdict\n\ndef check_occurences(tuples):\n    \"\"\"\n    @param tuples: a list of tuples.\n    @return: a dict of keys (tuple) and values (count) of records that are occuring at the same time.\n    \"\"\"\n    record_counts = defaultdict(int)\n\n    for record in tuples:\n        record_counts[tuple(sorted(record))] += 1\n\n    return record_counts", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    \"\"\"\n    Using tuples as keys. The value is the occurrence of the key in the tuples list.\n    \"\"\"\n    # Return value\n    results = {}\n\n    for elem in tuples:\n        key = tuple(elem)\n        # Look for a key that is in results\n        if key in results:\n            results[key] += 1\n        # If not found add it to results\n        else:\n            results[key] = 1\n\n    return results\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\nfrom collections import defaultdict\ndef check_occurences(times):\n    \"\"\"\n    Takes a list of tuples of (event,time) and returns a dictionary of tuples and the frequency of occurrence of the tuples\n    \"\"\"\n    dd = defaultdict(int)\n    for tup in times:\n        dd[(tup[0],tup[1])] += 1\n    return dd\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(records: list) -> dict:\n    # your code here\n    frequency = {}\n    for a, b in records:\n        if a in frequency and frequency[a] != b:\n            frequency[a] = frequency[a] + b\n        elif a not in frequency:\n            frequency[a] = b\n    return frequency\n\n# Tests", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(data):\n    if len(data) == 0:\n        return {}\n    data.sort()\n    result = {}\n    previous_key = data[0]\n    counter = 1\n    for key in data[1:]:\n        if key[1] == previous_key[1] and key[0] == previous_key[0]:\n            counter += 1\n        else:\n            result[previous_key] = counter\n            previous_key = key\n            counter = 1\n    result[previous_key] = counter\n    return result\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    count = {}\n    for tup in tuples:\n        if tup in count:\n            count[tup] += 1\n        else:\n            count[tup] = 1\n    return count\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    result = {}\n    for i in tuples:\n        if i in result.keys():\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\nfrom collections import defaultdict\n\ndef check_occurences(records):\n    record_dict = defaultdict(int)\n    for r1, r2 in zip(records, records[1:]):\n        if r1[1] == r2[0]:\n            record_dict[(r1[1], r2[0])] += 1\n        if r1[0] == r2[1]:\n            record_dict[(r1[0], r2[1])] += 1\n    return record_dict\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(records):\n    return\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\nimport itertools\n\n\ndef number_of_substrings(str):\n    return sum([1 for _ in itertools.permutations(str, 2)])\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return len(s) - sum([i == 0 or s[i-1] != s[i] for i in xrange(len(s))])\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count += 1 if string[i:j+1] else 0\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nfrom itertools import combinations\nfrom operator import add\nfrom typing import Callable, Iterator, List, Tuple\n\n\ndef number_of_substrings(string: str) -> int:\n    \"\"\"\n    >>> number_of_substrings(\"abc\")\n    6\n    \"\"\"\n    return sum(1 for _ in non_empty_substrings(string))\n\n\ndef non_empty_substrings(string: str) -> Iterator[str]:\n    \"\"\"\n    >>> list(non_empty_substrings(\"abc\"))\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return _non_empty_substrings(string, 0)\n\n\ndef _non_empty_substrings(string: str, start: int) -> Iterator[str]:\n    \"\"\"\n    >>> list(_non_empty_substrings(\"abc\", 0))\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if start == len(string):\n        return\n    else:\n        for sub_start in range(start, len(string)):\n            if sub_start == start:\n                yield string[sub_start]\n            else:\n                yield from combinations(string[start:sub_start], 2)\n\n\ndef _non_empty_substrings_naive(string: str) -> Iterator[str]:\n    \"\"\"\n    >>> list(_non_empty_substrings_naive(\"abc\"))\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return\n\n    for start in range(len(string)):\n        yield string[start]\n        yield from _non_empty_substrings_naive(string[start + 1:])\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    return len(set(string[i:i+1] for i in range(len(string))))", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef count_substrings(s):\n    n = len(s)\n    return int((n * n - n) / 2)\n\ndef main():\n    s = \"abc\"\n    print(\"Number of substrings: {}\".format(count_substrings(s)))\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    string = string.replace(' ', '')\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count += (string[i] == string[j])\n    return count\n\n# class TestStringMethods(unittest.TestCase):\n#\n#     def test_upper(self):\n#         self.assertEqual('foo'.upper(), 'FOO')\n#\n#     def test_isupper(self):\n#         self.assertTrue('FOO'.isupper())\n#         self.assertFalse('Foo'.isupper())\n#\n#     def test_split(self):\n#         s = 'hello world'\n#         self.assertEqual(s.split(), ['hello', 'world'])\n#         # check that s.split fails when the separator is not a string\n#         with self.assertRaises(TypeError):\n#             s.split(2)\n#\n#     def test_join(self):\n#         self.assertEqual(''.join(['1', '2', '3']), '123')\n#         with self.assertRaises(TypeError):\n#             ' '.join([1, 2, 3])\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    if len(string) == 0:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count += 1 if string[i:j+1] != \"\" else 0\n    return count\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    return sum(len(s) for s in re.findall(r'[^\\W\\d_]', string))\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(len(s[i:])):\n            count += 1 if s[i:i+j+1] != \"\" else 0\n    return count\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    sequence_count = 0\n    for i in range(n):\n        sequence_count += 1 + get_total_number_of_sequences(n-1, m)\n    return sequence_count\n\n\n# +\n# Test get_total_number_of_sequences\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    :param n: the integer\n    :param m: the integer\n    :return: the total number of sequences\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif m == 0:\n        return 0\n    elif n == 2:\n        if m == 1:\n            return 2\n        elif m == 2:\n            return 1\n    elif n == 3:\n        if m == 1:\n            return 4\n        elif m == 2:\n            return 2\n        elif m == 3:\n            return 1\n    else:\n        return get_total_number_of_sequences(n-1, m-1) + get_total_number_of_sequences(n-2, m) + get_total_number_of_sequences(n-3, m)\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\nfrom math import factorial\n\ndef get_total_number_of_sequences(n, m):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j < 2 * i:\n                count += factorial(j) / factorial(j - i)\n    return int(count)\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n\n    f1 = 1\n    f2 = 2\n\n    for i in range(3, n+1):\n        f = f1 + f2\n        f1 = f2\n        f2 = f\n\n    if n % 2 == 0:\n        return f2 + (m - 2) * f1\n    else:\n        return (m - 1) * f1 + f2\n\n\ndef test_get_total_number_of_sequences():\n    assert get_total_number_of_sequences(10, 4) == 4\n    assert get_total_number_of_sequences(10, 10) == 10\n    assert get_total_number_of_sequences(20, 10) == 55\n\ndef get_number_of_sequences(n, m, a):\n    n_current = 1\n    n_previous = 1\n    sequence_length = 2\n    while sequence_length <= n:\n        if a[sequence_length - 1] <= m:\n            n_current += n_previous\n        else:\n            n_current = n_previous\n        n_previous = n_current\n        sequence_length += 1\n    return n_current\n\ndef test_get_number_of_sequences():\n    a = [1, 2, 3, 4, 5]\n    assert get_number_of_sequences(10, 4, a) == 4\n    assert get_number_of_sequences(10, 10, a) == 10\n    assert get_number_of_sequences(20, 10, a) == 55\n\ndef get_number_of_sequences_fast(n, m, a):\n    n_current = 1\n    n_previous = 1\n    sequence", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    Returns the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    # This is the total number of sequences\n    total_number_of_sequences = 0\n\n    # The largest possible element is m - 1\n    largest_possible_element = m - 1\n\n    # We iterate through each element from 1 to m - 1\n    for i in range(1, largest_possible_element + 1):\n        # We add the number of sequences with element i\n        total_number_of_sequences += get_total_number_of_sequences(n - 1, i)\n\n    return total_number_of_sequences\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    dp = [0] * (m+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(m+1):\n            if j >= i*2:\n                dp[j] += dp[j-i]\n    return dp[-1]\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\nimport pytest\nfrom itertools import chain, permutations\n\ndef get_total_number_of_sequences(n, m):\n    '''\n    '''\n    max_val = max(n, m)\n    min_val = min(n, m)\n    print(max_val, min_val)\n    total = 0\n    for i in range(min_val, max_val+1):\n        for j in range(i, max_val+1):\n            total += 2**(j - i)\n    return total\n\ndef get_total_number_of_sequences_1(n, m):\n    '''\n    '''\n    max_val = max(n, m)\n    min_val = min(n, m)\n    print(max_val, min_val)\n    total = 0\n    for i in range(min_val, max_val+1):\n        for j in range(i, max_val+1):\n            total += 2**(j - i)\n    return total\n\ndef get_total_number_of_sequences_2(n, m):\n    '''\n    '''\n    min_val = min(n, m)\n    max_val = max(n, m)\n    total = 0\n    for i in range(min_val, max_val+1):\n        total += 2**(max_val - i)\n    return total\n\ndef get_total_number_of_sequences_3(n, m):\n    '''\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += i * (i-1) // 2\n    return total\n\n@pytest.mark.parametrize(\"n,m,expected\", [\n    (10, 4, 4),\n])\ndef test_get_total_number_of_sequences(n, m, expected):\n    '''\n    '''\n    actual = get_total_number_of_sequences(n, m)\n    assert actual == expected\n\ndef test_get_total_number_of_sequences_1():\n   ", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    total_number = 0\n    for i in range(n, m+1):\n        if m > i >= 2*i-1:\n            total_number += 1\n    return total_number\n\n\n# -\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    count = 0\n    for num1 in range(m+1):\n        for num2 in range(num1, m+1):\n            if num2 > num1 * 2 and num2 <= m:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list_in, list_to_add):\n    list_in[-1] = list_to_add\n    return list_in\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_lst):\n    lst[-1] = new_lst\n    return lst\n\n\nlst = [1, 3, 5, 7, 9, 10]", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_lst):\n\tlst.append(new_lst)\n\treturn lst\n\ndef replace_list(lst, new_lst):\n\treturn lst[:-1]+[new_lst]\n\ndef replace_list(lst, new_lst):\n\tlst.append(new_lst)\n\treturn lst\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(a_list, new_list):\n  return a_list[:-1]+new_list\n\ndef test_replace_list():\n  assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\ndef test_replace_list_2():\n  assert replace_list([1, 3, 5, 7, 9, 10],[2])==[1, 3, 5, 7, 9, 2]\n\ndef test_replace_list_3():\n  assert replace_list([1, 3, 5, 7, 9, 10],[])==[1, 3, 5, 7, 9]\n\ndef test_replace_list_4():\n  assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8, 11])==[1, 3, 5, 7, 9, 2, 4, 6, 8, 11]\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list, new_list):\n    if not isinstance(new_list, list):\n        return list\n    if list:\n        last = list[-1]\n        if isinstance(last, list):\n            return list[:-1] + new_list\n        else:\n            list[-1] = new_list\n            return list\n    else:\n        return new_list\n\ndef test_replace_list():\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(li, insert_li):\n    \"\"\"\n    Arguments:\n    li -- list to be modified\n    insert_li -- list with the elements to be inserted\n    \"\"\"\n    li.extend(insert_li)\n    del li[-1]\n    return li\n\n\n# do not change the lines below", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_lst):\n    new_lst.append(lst.pop())\n    return new_lst\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(L,L2):\n    L[-1] = L2\n    return L\n\ndef replace_list(L,L2):\n    L.append(L2)\n    L.pop()\n    return L\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(n1, n2, n3):\n    array = [[['*' for x in range(n2)] for y in range(n1)] for z in range(n3)]\n    return array\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(m,n,p):\n    return [[['*']*n for _ in range(m)] for __ in range(p)]\n\ndef test_array_3d():\n    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(r,c,d):\n    return [[['*', '*', '*', '*', '*', '*']*c]*r]*d\n\n\n# +\n# print(array_3d(6,4,3))\n\n# +", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]\n\n\n# array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\n\n# assert array_3d(2,4,6)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n# array_3d(2,4,6)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\n# write your solution here\ndef array_3d(h,w,d):\n    A = []\n    for i in range(h):\n        row = []\n        for j in range(w):\n            col = []\n            for k in range(d):\n                col.append('*')\n            row.append(col)\n        A.append(row)\n    return A\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(row, column, depth):\n    '''\n    Function to print 3D array of '*'\n    '''\n    return [[[\"\" for x in range(column)] for y in range(row)] for z in range(depth)]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(rows, cols, depth):\n    pass\n\n\ndef main():\n    print(array_3d(3, 2, 2))\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(m, n, p):\n    arr = []\n    for i in range(m):\n        temp = []\n        for j in range(n):\n            temp.append(['*']*p)\n        arr.append(temp)\n    return arr\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x, y, z):\n    return [[['*', '*', '*', '*', '*', '*'] for i in range(x)] for j in range(y)] + [['*', '*', '*', '*', '*', '*'] for i in range(x)]\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    return len(str)\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    return len(s)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    \"\"\"\n    :param string: \n    :return: count of characters\n    \"\"\"\n    count=0\n    for char in string:\n        count+=1\n    return count\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(s):\n    count = 0\n    for i in range(len(s)):\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_characters(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\ndef test_count_characters():\n    string = \"python programming\"\n    assert count_characters(string)==18\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(s):\n    return len(s)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    return len(string)\n\ndef count_charac(string):\n    return string.__len__()\n\ndef count_charac(string):\n    total = 0\n    for letter in string:\n        total = total + 1\n    return total\n\ndef count_charac(string):\n    count = 0\n    for letter in string:\n        if letter == ' ':\n            count = count + 1\n    return count\n\ndef count_charac(string):\n    count = 0\n    for letter in string:\n        if letter not in ' ':\n            count = count + 1\n    return count\n\ndef count_charac(string):\n    count = 0\n    for letter in string:\n        if letter == ' ':\n            count = count + 1\n        elif letter not in ' ':\n            count = count + 1\n    return count\n\ndef count_charac(string):\n    count = 0\n    for letter in string:\n        if letter in ' ':\n            count = count + 1\n        elif letter not in ' ':\n            count = count + 1\n    return count\n\ndef count_charac(string):\n    count = 0\n    for letter in string:\n        if letter == ' ':\n            count = count + 1\n        else:\n            count = count + 1\n    return count\n\ndef count_charac(string):\n    count = 0\n    for letter in string:\n        if letter == ' ':\n            pass\n        else:\n            count = count + 1\n    return count", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n# Function to count characters\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n# Driver program to test above function\ns = \"Python programming\"", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    return len(string)\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(list_of_tuples):\n    \"\"\"\n\n    :param list_of_tuples: List of Tuples\n    :return:\n    \"\"\"\n    list_of_tuples.sort(key=lambda x: (x[0], -len(x[1:])))\n    return list_of_tuples\n\ntest_list = [(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nimport unittest\n\n\ndef sort_on_occurence(lst):\n    # TODO:\n    pass\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(tuples):\n    return sorted(tuples, key=lambda x: (x[0], x[1]))\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(tuples):\n    '''\n    returns list of tuples, sorted by occurrence of first element of tuple\n    '''\n\n    # get dict with first element as key, count as value\n    counts = {}\n    for tuple in tuples:\n        if tuple[0] in counts:\n            counts[tuple[0]] += 1\n        else:\n            counts[tuple[0]] = 1\n\n    # create list with tuples sorted by count\n    sorted_tuples = []\n    for count in sorted(counts, reverse=True):\n        for tuple in tuples:\n            if tuple[0] == count:\n                sorted_tuples.append((tuple[0], tuple[1], tuple[2], count))\n\n    return sorted_tuples\n\n\n# -\n\nsort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])\n\n# #### Using reduce()\n#\n# The reduce() function can be used to implement this type of function.\n#\n# See: https://docs.python.org/3/library/functools.html#functools.reduce\n\n# +\nfrom functools import reduce\n\ndef sort_on_occurence(tuples):\n    '''\n    returns list of tuples, sorted by occurrence of first element of tuple\n    '''\n\n    # get dict with first element as key, count as value\n    counts = {}\n    for tuple in tuples:\n        if tuple[0] in counts:\n            counts[tuple[0]] += 1\n        else:\n            counts[tuple[0]] = 1\n\n    # create list with tuples sorted by count\n    sorted_tuples = []\n    for count in sorted(counts, reverse=True):\n        for tuple in tuples:\n            if tuple[0] == count:\n                sorted_tuples.append((tuple[0], tuple[1], tuple[2], count))\n\n    return sorted_tuples\n\n\n# -\n\nsort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nfrom collections import OrderedDict\n\ndef sort_on_occurence(lst):\n    new_lst = []\n    value_count = OrderedDict()\n    for item in lst:\n        if item[0] in value_count:\n            value_count[item[0]] += 1\n        else:\n            value_count[item[0]] = 1\n    for key in value_count:\n        for x in range(value_count[key]):\n            new_lst.append(tuple(sorted(item) for item in [lst[x], (key, value_count[key])] if item))\n    return new_lst\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    return [x for x in sorted(lst, key=lambda t: (t[0], t[1], t[2]))]\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(tuples_list):\n    return sorted(tuples_list, key=lambda item: (item[0], item[1]))\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(ls):\n    \"\"\"\n    Sort the given list based on the occurrence of first element of tuples.\n    \"\"\"\n\n    if len(ls) == 0:\n        return []\n\n    ls_dict = {}\n    for el in ls:\n        if el[0] in ls_dict:\n            ls_dict[el[0]].append(el)\n        else:\n            ls_dict[el[0]] = [el]\n\n    res = []\n    for val in ls_dict:\n        for el in ls_dict[val]:\n            res.append(el)\n\n    return res\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    Create a dictionary with keys: tuples of the first element\n    and values: a list of tuples with the same first element and the remaining elements of the tuple\n    \"\"\"\n    result = defaultdict(list)\n    for e in lst:\n        result[e[0]].append(e)\n    sorted_result = sorted(result.items())\n    return [e[1] + [e[0]] for e in sorted_result]\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n# The function should return the next perfect square greater than the given number.\n# Your code should return the number itself if the given number is already a perfect square.\ndef next_Perfect_Square(num):\n    # Write your code here\n\n# Test cases:", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Finds the next perfect square greater than a given number\n    \"\"\"\n    for i in range(num, 0, -1):\n        # print(i)\n        if i % 4 == 0:\n            return i\n    return None\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    while True:\n        if is_Perfect_Square(n):\n            return n\n        n += 1\n\n\ndef is_Perfect_Square(n):\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    # base case - when num is a perfect square itself\n    if num * num == num:\n        return num\n    # add num to itself until you get a perfect square\n    while (num * num) < num:\n        num += 1\n    return num\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(num):\n    l = 1\n    r = num\n    while l <= r:\n        mid = (l + r) // 2\n        if mid * mid > num:\n            r = mid - 1\n        elif mid * mid == num:\n            l = mid + 1\n        else:\n            l = mid + 1\n    return l\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_perfect_square(num):\n    \"\"\"\n    Returns the next perfect square above the given number.\n\n    Parameters:\n        num: an integer number\n\n    Returns:\n        The next perfect square above the given number\n    \"\"\"\n    assert num >= 0, \"Enter a positive number\"\n    res = 0\n    if num > 0:\n        for i in range(1, num+1):\n            if i**2 > num:\n                res = i\n                break\n            else:\n                res = i\n    return res\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\nimport math\ndef next_Perfect_Square(n):\n    \"\"\"\n    >>> next_Perfect_Square(1)\n    4\n    >>> next_Perfect_Square(2)\n    4\n    >>> next_Perfect_Square(3)\n    9\n    >>> next_Perfect_Square(36)\n    49\n    >>> next_Perfect_Square(64)\n    81\n    >>> next_Perfect_Square(1024)\n    1229\n    \"\"\"\n    return int(math.sqrt(n+1))\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    i=1\n    while True:\n        if i*i>n:\n            return i-1\n        i+=1\n\ndef next_Perfect_Square(n):\n    i=1\n    while True:\n        if i*i>n:\n            return i\n        i+=1\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    for i in range(num,1,-1):\n        if i>1:\n            for j in range(i//2,0,-1):\n                if i==j*j:\n                    return i\n            else:\n                return i\n            break\n\n\nnext_Perfect_Square(100)\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(nums, n):\n    arr = []\n    for i in range(n):\n        start = 0\n        end = i\n        sum = 0\n        while start < end:\n            sum += nums[start]\n            start += 1\n            sum += nums[end]\n            end -= 1\n        arr.append(sum)\n    return max(arr)\n\n\ndef test_max_sum():\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\ntest_max_sum()", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, length):\n    pass\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nfrom typing import List\n\n\ndef max_sum(arr: List[int], n: int) -> int:\n    if not arr:\n        return 0\n\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[j] > arr[i]:\n                m = max(m, arr[j] - arr[i])\n\n    return m\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, length):\n    sum_arr = []\n    for i in range(0, length):\n        sum_arr.append([arr[i], arr[i]])\n    \n    for i in range(1, length):\n        sum_arr[i][0] = sum_arr[i - 1][0] + arr[i]\n        sum_arr[i][1] = max(sum_arr[i - 1][1], sum_arr[i - 1][0] + arr[i])\n        for j in range(i - 1, -1, -1):\n            sum_arr[j][0] = max(sum_arr[j][0], arr[j] + sum_arr[j + 1][0])\n            sum_arr[j][1] = max(sum_arr[j][1], arr[j] + sum_arr[j + 1][1])\n    \n    return sum_arr[length - 1][1]\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(array, k):\n    \"\"\"\n    Find the max sum for the given array of integers.\n\n    Parameters:\n    -----------\n    array: list\n        a list of integers\n    k: int\n        the length of the array\n\n    Returns:\n    --------\n    int\n        the maximum sum of bi-tonic sub-sequence\n    \"\"\"\n\n    if k < 1:\n        return 0\n\n    # The max sum can be the sum of the subarray or the sum of the\n    # subarray + 1\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum, array[i], max_sum + array[i])\n\n    for i in range(k - 1):\n        max_sum = max(max_sum, array[i], max_sum + array[i + 1])\n\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    sum_dp = [0]*n\n    sum_dp[0] = arr[0]\n    for i in range(1, n):\n        if i > 1 and arr[i] > arr[i-1] and arr[i] > arr[i-2]:\n            sum_dp[i] = sum_dp[i-1] + arr[i]\n        elif i > 0 and arr[i] > arr[i-1]:\n            sum_dp[i] = sum_dp[i-1] + arr[i]\n        else:\n            sum_dp[i] = arr[i]\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, sum_dp[i])\n    return max_sum\n\n\ndef test():\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nimport pytest\n\ndef max_sum(seq, n):\n    \"\"\"\n    :param seq: array\n    :param n: integer\n    :return: integer\n    \"\"\"\n    # Your code here\n    pass\n\n\n# Tests\n@pytest.mark.parametrize(\"seq,n,expected\",\n                         [([1, 15, 51, 45, 33, 100, 12, 18, 9], 9, 194),\n                          ([1, 15, 51, 45, 33, 100, 12, 18, 9], 8, 164),\n                          ([1, 15, 51, 45, 33, 100, 12, 18, 9], 7, 124),\n                          ([1, 15, 51, 45, 33, 100, 12, 18, 9], 6, 62),\n                          ([1, 15, 51, 45, 33, 100, 12, 18, 9], 5, 14),\n                          ([1, 15, 51, 45, 33, 100, 12, 18, 9], 4, 0),\n                          ([1, 15, 51, 45, 33, 100, 12, 18, 9], 3, 0),\n                          ([1, 15, 51, 45, 33, 100, 12, 18, 9], 2, 0),\n                          ([1, 15, 51, 45, 33, 100, 12, 18, ", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    dp_col = [0] * n\n    dp_row = [0] * n\n    dp_col[0] = dp_row[0] = 0\n    max_sum = 0\n    for i in range(1, n):\n        for j in range(i):\n            dp_col[i] = max(dp_col[i], arr[j] + dp_col[j])\n            dp_row[i] = max(dp_row[i], arr[i] + dp_row[i-1])\n        max_sum = max(dp_col[i], dp_row[i], max_sum)\n    return max_sum\n\ndef main():\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(arr: List[int], k: int) -> int:\n    \"\"\"Find the maximum sub-sequence sum for the given array.\n\n    Args:\n        arr (List[int]): The given array.\n        k (int): The size of the sub-sequence.\n\n    Returns:\n        int: The maximum sub-sequence sum.\n    \"\"\"\n    if not arr or k < 1:\n        return 0\n    k_sum = [0 for _ in range(k)]\n    res = 0\n    for x in arr:\n        res = max(res, x)\n        for i in range(k):\n            k_sum[i] = max(k_sum[i], x + k_sum[i-1])\n    return res if res >= max(k_sum) else max(k_sum)\n\n\ndef main():\n    arr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\n    k = 9\n    res = max_sum(arr, k)\n    print(f\"Maximum sum is {res}\")\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(array, n):\n\tif n < 0:\n\t\treturn 0\n\n\tif n == 0:\n\t\treturn array[n]\n\n\tif n == 1:\n\t\treturn array[n] + array[n-1]\n\n\treturn max(max_sum(array, n-2) + array[n-1] + array[n], max_sum(array, n-1))\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n  \"\"\"returns the square root of x using the babylonian method\"\"\"\n  y = x\n  while y!=0:\n    y = (x/y + y) /2\n    print y\n  return x\n\ndef babylonian_squareroot2(x):\n  \"\"\"returns the square root of x using the babylonian method\"\"\"\n  y = x\n  while y!=0:\n    y = (x/y + y) /2\n  return y\n\n\n# -\n\n# # Task 1\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\nimport math\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Computes square root of a number using babylonian method.\n\n    Args:\n        x: int or float, square root is calculated for this number\n\n    Returns:\n        sqr_root: float, square root of the number x\n    \"\"\"\n    sqr_root = 0\n    precision = 0.00001\n    while precision > 0.0000001:\n        if math.pow(x, 0.5) - math.floor(math.pow(x, 0.5)) == 0:\n            break\n        x = (x + math.sqrt(x)) / 2\n    else:\n        raise ValueError('Cannot find square root of the number.')\n    return x\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(num):\n    \"\"\"\n    :param num: number\n    :return: square root of number\n    \"\"\"\n\n    # Initialize the approximated root.\n    root = 1.0\n\n    # Iterate until we get an answer close enough to the root\n    while abs(root ** 2 - num) > 0.001:\n        root = (root + num / root) / 2\n    return root\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    #start of function\n    x1=x/2\n    x2=x/2\n    while abs(x-x1)**2 > 0.00000000001:\n        x2=x1\n        x1=(x+x1)/2\n    return x1\n    #end of function\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    \"\"\"Return the square root of the number n using the babylonian method.\"\"\"\n    a = 2\n    while a < n:\n        a = (a + n/a) / 2\n    return a\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(number):\n    \"\"\"return the square root of number using the babylonian method\"\"\"\n    n = number\n    r = 1\n    while r != n:\n        print(\"n: {}, r: {}\".format(n,r))\n        print(\"Delta: \", n-r)\n        r = ((r + n/r) / 2)\n        n = r\n    return r\n\ndef test_babylonian_squareroot():\n    assert babylonian_squareroot(10)==3.162277660168379\n\n#\n# P15.7:\n#", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport math\n\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Returns square root of x using Babylonian method\n    :param x: number to find square root of\n    :return: square root of x\n    \"\"\"\n    accuracy = 1e-6\n    old_value = 1\n    new_value = 1 + (x / 2)\n    while abs(new_value - old_value) > accuracy:\n        old_value = new_value\n        new_value = ((old_value + x / old_value) / 2)\n    return old_value\n\n\ndef test_babylonian_squareroot():\n    assert babylonian_squareroot(10) == 3.162277660168379\n\n\ndef test_babylonian_squareroot_example():\n    assert babylonian_squareroot(100) == 10.0\n\n\ndef test_babylonian_squareroot_negative():\n    assert babylonian_squareroot(-2) == math.sqrt(-2)\n\n\ndef test_babylonian_squareroot_in_float():\n    assert babylonian_squareroot(100.1) == 10.010000000000001\n\n\ndef test_babylonian_squareroot_different_sign():\n    assert babylonian_squareroot(5) == math.sqrt(5)\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(n):\n    \"\"\"\n    returns the square root of a given number n using babylonian method\n    \"\"\"\n    if n < 0:\n        return -1\n    guess = n/2\n    guess_prev = guess\n    i = 1\n    while abs(guess**2-n) > 0.0001:\n        guess = (guess + n/guess)/2\n        i += 1\n        if i % 100 == 0:\n            print(\"iteration:\", i, \" guess:\", guess, \" guess_prev:\", guess_prev, \" diff:\", abs(guess**2-n))\n        guess_prev = guess\n    return guess\n\n\n# -\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n\tcurrent_value = 1\n\tcounter = 0\n\twhile True:\n\t\tcounter+=1\n\t\tcurrent_value = (current_value + n/current_value)/2\n\t\tif current_value == int(current_value):\n\t\t\treturn current_value\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(num):\n    \"\"\"\n    >>> babylonian_squareroot(5)\n    2.23606797749979\n    \"\"\"\n    guess = num / 2.0\n    while abs(guess**2 - num) > 0.00001:\n        guess = (guess + num / guess) / 2\n    return guess\n\ndef test_babylonian_squareroot():\n    \"\"\"\n    >>> test_babylonian_squareroot()\n    True\n    \"\"\"\n    import doctest, square_root\n    return doctest.testmod(square_root)[0]\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s:str) -> int:\n    n = len(s)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1):\n            if i == j:\n                dp[i][j] = True\n            elif s[i] == s[j]:\n                if j + 1 < i:\n                    dp[i][j] = dp[j+1][i-1]\n                else:\n                    dp[i][j] = True\n            else:\n                dp[i][j] = False\n    res = 0\n    for i in range(n):\n        for j in range(i, -1, -1):\n            if dp[i][j] and (j - i + 1 > res):\n                res = j - i + 1\n    return res", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    if str == \"\":\n        return 0\n    T = len(str)\n    table = [[False for i in range(T)] for j in range(T)]\n    longest_palindromic_subsequence = 0\n    \n    for i in range(T):\n        table[i][i] = True\n    \n    for length in range(2, T+1):\n        for i in range(T):\n            j = i+length-1\n            if length == 2:\n                if str[i] == str[j]:\n                    table[i][j] = True\n            else:\n                if str[i] == str[j] and table[i+1][j-1]:\n                    table[i][j] = True\n        if table[0][length-1]:\n            longest_palindromic_subsequence = length\n    return longest_palindromic_subsequence\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\nfrom typing import List\n\ndef lps(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(N^2)\n    \"\"\"\n    N = len(string)\n    arr = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        arr[i][i] = 1\n    for len_ in range(2, N):\n        for i in range(N - len_):\n            j = i + len_ - 1\n            if string[i] == string[j] and len_ == 2:\n                arr[i][j] = 2\n            elif string[i] == string[j]:\n                arr[i][j] = arr[i + 1][j - 1] + 2\n            else:\n                arr[i][j] = max(arr[i][j - 1], arr[i + 1][j])\n    return arr[0][N - 1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(str):\n\tn = len(str)\n\tp = [[False for i in range(n)] for j in range(n)]\n\tl = 0\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif j == i:\n\t\t\t\tp[i][j] = True\n\t\t\telif j+1 == i:\n\t\t\t\tp[i][j] = True if str[i] == str[j] else False\n\t\t\telif j > i:\n\t\t\t\tp[i][j] = p[i+1][j-1] if str[i] == str[j] else False\n\tfor i in range(n-1, -1, -1):\n\t\tfor j in range(i, n):\n\t\t\tif p[i][j]:\n\t\t\t\tl = max(l, j-i+1)\n\treturn l\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(seq):\n    if seq == \"\":\n        return 0\n    len = len(seq)\n    dp = [[0 for i in range(len)] for i in range(len)]\n\n    for i in range(len):\n        dp[i][i] = 1\n    for i in range(len - 1, 0, -1):\n        for j in range(i, len):\n            if seq[i] == seq[j] and (j-i < 2 or dp[i+1][j-1]):\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][len-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    max_len, max_i, max_j = 0, 0, 0\n    for i in range(n):\n        for j in range(i, n):\n            if j-i == 1:\n                dp[i][j] = True\n            else:\n                if s[i] == s[j] and (j-i < 3 or dp[i+1][j-1]):\n                    dp[i][j] = True\n                    max_len = max(max_len, j-i+1)\n                    max_i, max_j = i, j\n    return max_len, s[max_i:max_i+max_len]\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    i = 0\n    for j in range(n):\n        if s[i] == s[j]:\n            dp[i][j] = True\n            if j == i + 1:\n                i += 1\n            elif j == i:\n                dp[i][j] = True\n            else:\n                dp[i][j] = dp[i + 1][j - 1]\n                if dp[i][j]:\n                    i += 1\n    print(dp)\n    return i\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    max_len = 0\n    memo = {}\n    def rec(idx, len):\n        if idx == len:\n            return 0\n        if idx not in memo:\n            max_len = max(max_len, 1 + rec(idx + 1, len))\n        else:\n            max_len = max(max_len, 1 + memo[idx])\n        memo[idx] = max_len\n        return memo[idx]\n    rec(0, len(s))\n    return max_len\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    if len(str) < 2:\n        return len(str)\n    lps_len = [0] * len(str)\n    # lps_len[0] = lps_len[1] = 1\n    for i in range(2, len(str)):\n        j = i - 1\n        k = 1\n        while j >= 0:\n            if str[j] == str[i]:\n                k += 1\n                lps_len[i] = max(lps_len[i], k)\n                j -= 1\n            else:\n                break\n\n    return max(lps_len)\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(str):\n    # create a 2-D array\n    # where each element is the length of a possible palindromic subsequence\n    arr = [[0 for x in range(len(str))] for x in range(len(str))]\n    longest = 0\n    for length in range(len(str)):\n        for index in range(length):\n            if str[index] == str[length - index - 1]:\n                if length == 1:\n                    arr[index][length - index - 1] = 1\n                else:\n                    arr[index][length - index - 1] = 1 + arr[index + 1][length - index - 2]\n                if arr[index][length - index - 1] > longest:\n                    longest = arr[index][length - index - 1]\n    return longest\n\n\ndef main():\n    print(lps(\"TENS FOR TENS\"))\n\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n\treturn sum([1/x for x in range(1, n+1)])", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return sum([1/x for x in range(1, n+1)])\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return 1/n + 1/(n+1) + 1/(n+2) + 1/(n+3) + 1/(n+4) + 1/(n+5) + 1/(n+6) + 1/(n+7)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return sum(1.0 / x for x in range(1, n+1))\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return sum([1/(i + 1) for i in range(n)])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return sum([1/i for i in range(1, n+1)])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\nimport math\n\ndef harmonic_sum(n):\n    if n < 0:\n        raise ValueError('n must be a positive number')\n\n    return 1/math.factorial(n)\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1.0\n    assert harmonic_sum(2) == 1.5\n    assert harmonic_sum(3) == 2.0/3.0\n    assert harmonic_sum(4) == 1.0/4.0\n    assert harmonic_sum(7) == 2.5928571428571425\n\ndef main():\n    pass\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nimport unittest\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    Harmonic Sum of n\n    :param n: integer\n    :return: float\n    \"\"\"\n    if n < 1:\n        raise ValueError('Invalid n')\n    # Harmonic sum of n-1 = n*(1-1/n)\n    return n * (1 - 1/n)\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"Calculate the sum of 1/n.\n\n    :param n: int\n    :return: float\n    \"\"\"\n    return sum([1/i for i in range(1, n+1)])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return sum([1/i for i in range(1,n)])\n\ndef main():\n    print harmonic_sum(10000)\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(list_1, list_2):\n    return list(set(list_1) & set(list_2))\n\n\n# 2", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n# solution 1\ndef intersection_array(lst1, lst2):\n  return [item for item in lst1 if item in lst2]\n\n\n# solution 2\ndef intersection_array(lst1, lst2):\n  return list(set(lst1) & set(lst2))\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"iM7a16U3yjvf\" outputId=\"1732b070-f151-494b-c53c-f8a31a020208\"\n# test", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1,arr2):\n    return list(set(arr1).intersection(set(arr2)))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(array_1, array_2):\n    return list(set(array_1).intersection(set(array_2)))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(a,b):\n    return list(set(a) & set(b))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(array1, array2):\n    return list(filter(lambda x:x in array2, array1))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(lst1,lst2):\n    return [i for i in lst1 if i in lst2]\n\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))\n\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple_list,x):\n    count = 0\n    for element in tuple_list:\n        if element == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(a_tuple, x):\n    count = 0\n    for i in a_tuple:\n        if i == x:\n            count += 1\n    return count\n\ndef test_function(test_case):\n    count_test = count_X(test_case[0], test_case[1])\n    if count_test == test_case[2]:\n        print \"Pass\"\n    else:\n        print \"Fail\"\n\ntest_function([[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4, 0])\ntest_function([[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 5, 2])\ntest_function([[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10, 3])\ntest_function([[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 11, 0])", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\n#solution\ndef count_X(tuple,x):\n    return tuple.count(x)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(some_list,X):\n    \"\"\"\n    Count the occurences of an element in a tuple\n\n    Parameters\n    ----------\n    some_list : tuple\n        List of items\n    X : item\n        Item to be counted\n\n    Returns\n    -------\n    count : int\n        Number of occurences of the item\n    \"\"\"\n\n    count = 0\n    for item in some_list:\n        if item == X:\n            count += 1\n    return count\n\n#%%\n\ndef test_count_X():\n    \"\"\"\n    Count the occurences of an element in a tuple\n\n    Parameters\n    ----------\n    some_list : tuple\n        List of items\n    X : item\n        Item to be counted\n\n    Returns\n    -------\n    count : int\n        Number of occurences of the item\n    \"\"\"\n\n    some_list = (10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)\n    X = 4\n\n    assert count_X(some_list,X) == 0\n\n#%%\n\ndef remove_X(some_list,X):\n    \"\"\"\n    Remove the occurences of an element in a tuple\n\n    Parameters\n    ----------\n    some_list : tuple\n        List of items\n    X : item\n        Item to be counted\n\n    Returns\n    -------\n    new_list : tuple\n        List without the occurences of the item\n    \"\"\"\n\n    new_list = []\n    for item in some_list:\n        if item != X:\n            new_list.append(item)\n    return new_list\n\n#%%\n\ndef test_remove_X():\n    \"\"\"\n    Count the occurences of an element in a tuple\n\n    Parameters\n    ----------\n    some_list : tuple\n        List of items\n    X : item\n        Item to be counted\n\n    Returns\n    -------\n    count : int\n        Number of occurences of the item\n    \"\"\"\n\n    some_list = (10, 8, 5, 2, 10, 15, 10, 8", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(seq, x):\n    return seq.count(x)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple_to_search, element):\n    for i in tuple_to_search:\n        if element == i:\n            count_X(tuple_to_search, element)\n            break\n        else:\n            return 0\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n  '''\n  Returns the number of times x appears in tup.\n  '''\n  count = 0\n  for num in tup:\n    if num == x:\n      count += 1\n  return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(l, x):\n    \"\"\"\n    return number of times x occurs in l.\n    \"\"\"\n    counter = 0\n    for item in l:\n        if item == x:\n            counter += 1\n    return counter\n\n\n# +", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(mylist,X):\n    return mylist.count(X)"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst,element):\n    list_of_new_elements = []\n    for element in lst:\n        list_of_new_elements.append(element)\n        list_of_new_elements.append(element)\n    return list_of_new_elements\n\ndef test_insert_element():\n    assert insert_element(['Red', 'Green', 'Black'], 'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, element):\n    return [element]+lst[:-1]+[element]\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list_to_add, element):\n    return [element] + list_to_add + [element]", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, element):\n    res = []\n    for i in lst:\n        res.append(element)\n        res.append(i)\n    return res\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(l, e):\n    l2 = []\n    l2 = [e] + l\n    return l2\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst,element):\n    # Your code here\n    if len(lst) == 0:\n        return [element]\n    lst.insert(0,element)\n    return lst\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\n# def insert_element(lst, el):\n#     return [el] + lst + [el]\n\n\ndef insert_element(lst, el):\n    lst_el = [el]\n    return lst_el + lst + lst_el", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, item):\n    newlst=[]\n    for i in range(len(lst)):\n        newlst.append(item)\n        newlst.append(lst[i])\n    return newlst\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, x): \n    for i in range(len(lst)): \n        lst.insert(i, x) \n    return lst\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list_):\n    for i,el in enumerate(list_):\n        list_[i] = 'c' + el\n    return list_\n\n#Task 2"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(x):\n    r = np.sqrt(x.real ** 2 + x.imag ** 2)\n    th = np.arctan2(x.imag, x.real)\n    return r, th\n\n# Tests", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    z = complex(z)\n    return z.real, z.imag\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(r):\n    \"\"\"Convert a complex number to polar coordinates.\n    r: A complex number.\n    return: r as a length-2 tuple of floats (real part, angle in radians).\n    \"\"\"\n    return 0, 0", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(x):\n    return\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(complex_number):\n    from math import sqrt\n    a = complex_number.real\n    b = complex_number.imag\n    return (sqrt(a ** 2 + b ** 2), atan2(b, a))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    return (z.real, z.imag)", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n# =============================================================================\n# INPUT\n# =============================================================================\n\n# n/a\n\n# =============================================================================\n# ANSWER\n# =============================================================================\n\ndef convert(x):\n    \"\"\"\n    Convert complex number to polar coordinates\n    \"\"\"\n    if x == 0:\n        return (0, 0)\n    r = (x.real**2 + x.imag**2)**0.5\n    theta = math.atan2(x.imag, x.real)\n    return (r, theta)\n\n\n# =============================================================================\n# TESTS\n# =============================================================================\n\nimport random\nimport math\n\n# randomly generate random complex numbers\ncomplex_numbers = []\nfor _ in range(100):\n    r = random.random()\n    theta = random.random() * 2 * math.pi\n    complex_numbers.append(complex(r * math.cos(theta), r * math.sin(theta)))\n\n# run the tests\nfor z in complex_numbers:\n    assert convert(z) == (z.real**2 + z.imag**2)**0.5 * (1, math.atan2(z.imag, z.real))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(c):\n    r = 0\n    theta = 0\n    return r,theta\n\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(numbers):\n    count = 0\n    for x in numbers:\n        if isinstance(x, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(nums):\n    count = 0\n    for num in nums:\n        if isinstance(num, int):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    \"\"\"\n    Counts the number of integers in a list\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integers(L):\n    result = 0\n    for x in L:\n        if isinstance(x, int):\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(seq):\n    count = 0\n    for element in seq:\n        if isinstance(element, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(integer_list):\n  return len(integer_list)\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    return len([i for i in lst if type(i) == int])\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n\tcount = 0\n\tfor x in lst:\n\t\tif isinstance(x, int):\n\t\t\tcount += 1\n\treturn count\n\n# Test", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    return len([n for n in lst if isinstance(n, int)])\n\n# print(count_integer([1,2,'abc',1.2]))\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    return [word for word in string.split() if (word.startswith('a') or word.startswith('e'))]\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\nimport collections\n\ndef words_ae(string):\n    \"\"\"\n    :param string: string to split\n    :return: list of all words starting with 'a' or 'e'\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        if (string[i] == 'a' or string[i] == 'e'):\n            for j in range(i, len(string)):\n                if (string[j] == ' ' or string[j] == '\\n'):\n                    result.append(string[i:j])\n                    break\n    return result\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    words = []\n    for i in s.split():\n        if i[0] in 'ae':\n            words.append(i)\n    return words\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    return [w for w in s.split() if w.startswith('a') or w.startswith('e')]\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(str):\n    words=[]\n    for i in str:\n        if i in 'ae':\n            words.append(i)\n    return words\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    words = []\n    for word in string.split():\n        if word[0]=='a' or word[0]=='e':\n            words.append(word)\n    return words\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    pass\n\n\n# +\n# test case", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n  return []\n\nwords_ae(\"python programe\")", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    ans = []\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e':\n            ans.append(s[i])\n    return ans\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    return [word for word in s.split() if word.startswith('a') or word.startswith('e')]\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(list_colors,number):\n    from itertools import combinations\n    return list(combinations(list_colors,number))\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,n):\n\tcombs = []\n\tfor i in range(n):\n\t\tcombs.append(list(colors))\n\treturn combs\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(color_list,combination_number):\n    return\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors( colors, number ):\n    # list of empty lists\n    combs = [[]]\n    for color in colors:\n        new_combs = []\n        for comb in combs:\n            for c in color:\n                new_comb = comb+[c]\n                if len(new_comb)==number:\n                    new_combs.append(new_comb)\n                else:\n                    new_combs.append(new_comb)\n                    new_combs.append(comb+[c])\n        combs = new_combs\n    return combs\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    combos = []\n    for color in colors:\n        for combo in combinations(color,n):\n            combos.append(combo)\n    return combos\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,m):\n    \"\"\"\n    :param colors: 3 colours of type str\n    :param m: number of colours\n    :return: list of tuples with length m\n    \"\"\"\n    res=[]\n    for i in range(0,len(colors)):\n        comb= combinations(range(0,len(colors)),i)\n        comb= [colors[x] for x in list(comb)]\n        res+=comb\n    return res\n\n\n# +", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, number):\n  results = []\n  for color in colors:\n    for item in combinations(colors,number-1):\n      results.append( (color,) + item )\n  return results\n\ndef main():\n  assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n  assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red','Green'),('Red','Blue'),('Green','Blue')]\n  assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red','Green','Blue')]\n  print(\"All tests passed\")\n\nmain()\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors( colors, num_colors ):\n\tif num_colors > len(colors):\n\t\traise ValueError( \"No number of colours available\" )\n\treturn itertools.combinations( colors, num_colors )\n\ndef main():\n\timport doctest\n\tdoctest.testmod()\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, number):\n    if number == 0:\n        yield ()\n    elif number == 1:\n        for color in colors:\n            yield (color,)\n    else:\n        for color in colors:\n            for combination in combinations_colors(colors, number - 1):\n                yield (color,) + combination\n\ndef combinations_colors2(colors, number):\n    if number == 0:\n        yield []\n    elif number == 1:\n        for color in colors:\n            yield [color]\n    else:\n        for color in colors:\n            for combination in combinations_colors2(colors, number - 1):\n                yield [color] + combination\n\ndef combinations_colors3(colors, number):\n    if number == 0:\n        yield []\n    elif number == 1:\n        for color in colors:\n            yield [color]\n    else:\n        for color in colors:\n            for combination in combinations_colors3(colors, number - 1):\n                yield [color] + combination\n\ndef main():\n    print(combinations_colors([\"Red\",\"Green\",\"Blue\"],1))\n    print(combinations_colors2([\"Red\",\"Green\",\"Blue\"],1))\n    print(combinations_colors3([\"Red\",\"Green\",\"Blue\"],1))\n\nmain()", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, k):\n    return list(combinations(colors,k))\n\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2,n):\n        if isPrime(i):\n            count+=1\n    return count\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n % i == 0:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_Prime_nums(i):\n            count += 1\n    return count\n\n\ndef is_Prime_nums(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(number):\n    if number <= 1:\n        return 0\n    else:\n        is_prime = [True] * number\n        for i in range(2, int(number ** 0.5) + 1):\n            if is_prime[i]:\n                j = i * i\n                while j < number:\n                    is_prime[j] = False\n                    j += i\n        count = 0\n        for i in range(2, number):\n            if is_prime[i]:\n                count += 1\n        return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    num_primes = 0\n    for i in range(2,n):\n        if i>1:\n            j = 2\n            while j<i:\n                if i%j==0:\n                    break\n                j+=1\n            if j==i:\n                num_primes+=1\n    return num_primes\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(n):\n        count += 1\n        for j in range(2, i):\n            if (i % j) == 0:\n                break\n        else:\n            print(i)\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# Write your function below\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(number):\n  n_primes = 0\n  for i in range(2, number + 1):\n    if is_prime(i):\n      n_primes += 1\n  return n_primes\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 2:\n        return 0\n    counter = 0\n    i = 0\n    while i < n:\n        if n % 2 == 0 or n < 3:\n            i += 2\n            continue\n        else:\n            i += 1\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    i = 2\n    count = 0\n    while i < n:\n        isPrime = True\n        for j in range(2, i):\n            if(i % j == 0):\n                isPrime = False\n                break\n        if(isPrime):\n            count += 1\n            i += 1\n    return count\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    \"\"\"\n    >>> swap_numbers(1,2)\n    (2, 1)\n    >>> swap_numbers(10,20)\n    (20, 10)\n    \"\"\"\n    return y,x\n\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    a,b = b,a\n    return a,b\n\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    z=x\n    x=y\n    y=z\n    return(x,y)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n\treturn b,a\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n    return b,a\n\na,b = swap_numbers(10,20)", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    \"\"\"\n    :type x int\n    :type y int\n    :rtype: tuple[int]\n    \"\"\"\n    x,y = y,x\n    return x,y\n\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x, y):\n    temp = x\n    x = y\n    y = temp\n    return x, y\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    c,d = a,b\n    return c,d\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n\treturn a,b\n\n# There are many ways to write this function\n# for example:\n# def swap_numbers(a,b):\n# \ttemp = a\n# \ta = b\n# \tb = temp\n# \treturn a,b\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return len(filter(lambda x: x%2!=0, lst))\n\nlst=[1,2,3,4,5,6,7,8,9,10]", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n#solution\ndef count_odd(lst):\n    return len([x for x in lst if x % 2 != 0])\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(nums):\n    return len([x for x in nums if x % 2 != 0])\n\n#Test", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return sum([1 for x in lst if x % 2 != 0])\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n#find number of odd elements using list comprehension\ndef count_odd(L):\n    return len([x for x in L if x%2!=0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(L):\n    return len([x for x in L if x % 2 != 0])\n\ndef main():\n    assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return sum(map(lambda x: x%2, lst))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n# your code goes here\n\ndef count_odd(arr):\n    return len(list(filter(lambda x: x % 2 != 0, arr)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return len([x for x in lst if not(x%2)])\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(li):\n    return sum([1 for i in li if i%2==1])\n\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n    max_1 = max(tuples1, key=lambda e: e[1])\n    max_2 = max(tuples2, key=lambda e: e[1])\n    tuples1.remove(max_1)\n    tuples2.remove(max_2)\n    return tuples1 + tuples2 + (max_1, max_2)\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a_tuple, b_tuple):\n    pass\n\n# Solution\n\ndef maximize_elements(a_tuple, b_tuple):\n    return max(a_tuple, key=lambda x: x[0] + x[1]), max(b_tuple, key=lambda x: x[0] + x[1])\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nimport math\n\n\ndef maximize_elements(first_tuple, second_tuple):\n    maximum_tuple = []\n    for i in first_tuple:\n        for j in second_tuple:\n            if i[0] + j[0] > maximum_tuple[0][0]:\n                maximum_tuple = [i[0] + j[0], i[1] + j[1]]\n            if i[0] + j[1] > maximum_tuple[0][1]:\n                maximum_tuple = [i[0] + j[1], i[1] + j[0]]\n    return maximum_tuple\n\n\ndef test_maximize_elements():\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nimport operator\nfrom typing import List, Tuple\n\ndef maximize_elements(a: List[Tuple[int, int]], b: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Trivial implementation, just a python builtin function.\n    \"\"\"\n    return map(max, zip(a, b))\n\ndef maximize_elements_list_comprehension(a: List[Tuple[int, int]], b: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return [max(x, y) for x, y in zip(a, b)]\n\ndef maximize_elements_operator(a: List[Tuple[int, int]], b: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return [operator.max(x, y) for x, y in zip(a, b)]\n\n\ndef test_maximize_elements(a: List[Tuple[int, int]], b: List[Tuple[int, int]]) -> None:\n    \"\"\"\n    >>> test_maximize_elements([(1, 3), (4, 5), (2, 9), (1, 10)], [(6, 7), (3, 9), (1, 1), (7, 3)])\n    [(6, 7), (4, 9), (2, 9), (7, 10)]\n    \"\"\"\n    assert maximize_elements(a, b) == [\n        (6, 7),\n        (4, 9),\n        (2, 9),\n        (7, 10)\n    ]\n\n\ndef test_maximize_elements_list_comprehension(a: List[Tuple[int, int]], b: List[Tuple[int, int]]) -> None:\n    \"\"\"\n    >>> test_maximize_elements_list_compreh", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tup1, tup2):\n    return tuple(max(tup1[0], tup2[0]), max(tup1[1], tup2[1]))\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuples1, tuples2):\n    t1 = [x for x in tuples1 if x[0] < x[1]]\n    t2 = [x for x in tuples2 if x[0] < x[1]]\n    t1 = sorted(t1)\n    t2 = sorted(t2)\n    t = []\n    for i in range(len(t1)):\n        if t1[i][0] <= t2[0][1]:\n            t.append(t1[i])\n            t2.pop(0)\n        if t2 == []:\n            break\n    return t\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tup1, tup2):\n    max_tup = tup1\n    if max_tup[0][0] < tup2[0][0]:\n        max_tup = tup2\n    if max_tup[0][1] < tup2[0][1]:\n        max_tup = tup2\n    if max_tup[1][0] > tup2[1][0]:\n        max_tup = tup2\n    if max_tup[1][1] > tup2[1][1]:\n        max_tup = tup2\n    return max_tup\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    :param tuple1: tuple of elements\n    :param tuple2: tuple of elements\n    :return: tuple of max elements\n    \"\"\"\n    return (max(max(x) for x in tuple1), max(max(x) for x in tuple2))\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\nfrom itertools import zip_longest\n\ndef maximize_elements(tuple1, tuple2):\n    # Your code here\n    zip_list = zip_longest(tuple1, tuple2, fillvalue=0)\n    max_val = []\n    for i in zip_list:\n        if i[0] > i[1]:\n            max_val.append(i[0])\n        else:\n            max_val.append(i[1])\n    return tuple(max_val)\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(elements, max_elements):\n    max_list = []\n    if len(elements) == 0:\n        return max_list\n    else:\n        for index in range(len(elements)):\n            if elements[index] > max_elements[index]:\n                max_list.append(elements[index])\n        return max_list\n\ndef test_maximize_elements():\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nfunction newman_prime(n)\n    a = [1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    a newman-shanks-williams prime number is a prime p\n    which is the sum of 3 consecutive primes\n    \"\"\"\n    if n == 1:\n        return 2\n\n    # find the first prime number\n    p = 2\n    while not is_prime(p):\n        p += 1\n    \n    # find the 2nd prime number\n    p2 = 3\n    while not is_prime(p2):\n        p2 += 2\n\n    # find the 3rd prime number\n    p3 = 5\n    while not is_prime(p3):\n        p3 += 2\n\n    return p + p2 + p3", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    n: the nth prime number\n    \n    returns the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    assert type(n) == int\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    else:\n        k = 11\n        while True:\n            i = 2\n            p = 2\n            while p*p <= k:\n                if k % p == 0:\n                    break\n                p += 1\n                i += 1\n            if i == 2:\n                return k\n            k += 1\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    '''\n    n -- integer, nth prime number\n    '''\n    p = 2\n    i = 1\n    while i < n:\n        p += 1\n        if is_prime(p):\n            i += 1\n        else:\n            i = 1\n            p += 1\n    return p\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n\tfor i in range(n):\n\t\tprime = True\n\t\tfor j in range(i + 1, n + 1):\n\t\t\tif i % j == 0:\n\t\t\t\tprime = False\n\t\tif prime:\n\t\t\treturn i + 1\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    Check if a number is prime\n    \"\"\"\n    if n < 2:\n        return 2\n\n    if n % 2 == 0:\n        return 2\n    \n    i = 3\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 2\n    \n    return n\n\ndef test_newman_prime():\n    assert newman_prime(3) == 7", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n  if n == 1 or n == 2:\n    return n\n  \n  if n < 1:\n    raise ValueError\n  \n  if n % 6 != 1 and n % 6 != 5:\n    return None\n  \n  s = 0\n  for i in range(1, n+1):\n    if i % 6 == 1 or i % 6 == 5:\n      s += 1\n  \n  if s > 1:\n    return None\n  \n  d = 5\n  if n % 6 == 1:\n    d = 7\n  if n % 6 == 5:\n    d = 11\n  \n  while True:\n    prime_p = True\n    for i in range(1, d+1):\n      if pow(i, d, n) == 1:\n        prime_p = False\n        break\n      \n    if prime_p:\n      return n\n    n += 2\n  ", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nfunction newman_prime(n)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    candidate = 2\n    max_prime = 0\n    for i in 1:n\n        while is_prime(candidate)\n            candidate += 2\n        end\n        max_prime = candidate\n        break\n    end\n    for i in 2:length(primes)\n        while true\n            candidate = 2*primes[i-1] - 1\n            if max_prime < candidate\n                candidate = 2*primes[i] - 1\n            end\n            if candidate in primes || candidate in primes .+ 2\n                continue\n            end\n            if is_prime(candidate)\n                max_prime = candidate\n                break\n            end\n        end\n    end\n    return max_prime\nend\n\n@assert newman_prime(10) == 1009\n@assert newman_prime(15) == 1093\n@assert newman_prime(17) == 1127\n@assert newman_prime(19) == 1153\n@assert newman_prime(20) == 1157\n@assert newman_prime(21) == 1179\n@assert newman_prime(22) == 1181\n@assert newman_prime(23) == 1187\n@assert newman_prime(24) == 1193\n@assert newman_prime(25) == 1197\n@assert newman_prime(26) == 1209\n@assert newman_prime(27) == 1211\n@assert newman_prime(28) == 12", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    i = 1\n    while(i < n):\n        i = i+1\n    i = 1\n    while(i < n):\n        # if n-1 is prime\n        if is_prime(n-1):\n            if is_prime(n):\n                return n\n        i = i+1\n    return -1\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n  \"\"\"\n  Division of tuple1 by tuple2\n  \"\"\"\n  if len(tuple1) != len(tuple2):\n    return False\n  else:\n    result = []\n    for i in range(len(tuple1)):\n      result.append(tuple1[i] / tuple2[i])\n    return result\n\ndef test_division_elements():\n  assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(a, b):\n    assert len(a) == len(b)\n    return tuple(a_el / b_el for a_el, b_el in zip(a, b))\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(l1, l2):\n    return tuple(f//g for f,g in zip(l1,l2))\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    return tuple((e1 // e2) for e1, e2 in zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    '''\n    :param tuple1: tuple\n    :param tuple2: tuple\n    :return: tuple\n    '''\n    result = []\n    for x in range(len(tuple1)):\n        result.append(tuple1[x] / tuple2[x])\n    return result\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    list1 = []\n    list2 = []\n    for i in range(len(tuple1)):\n        list1.append(tuple1[i]/tuple2[i])\n    return tuple(list1)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(t1, t2):\n    return tuple(map(lambda x, y: x//y, t1, t2))\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(x, y):\n    result = []\n    for i in range(len(x)):\n        result.append(x[i] / y[i])\n    return result\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tup1, tup2):\n    \"\"\"\n    Division of the elements of two tuples\n    \"\"\"\n    # for index, item in enumerate(tup1):\n    #     tup1[index] = tup1[index]/tup2[index]\n    return tuple([item1/item2 for item1, item2 in zip(tup1, tup2)])\n\n#assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(a, b):\n    for index in range(len(a)):\n        a[index] = a[index] // b[index]\n    return a\n\n# if __name__ == '__main__':\n#     import doctest\n#     doctest.testmod()\n#     # print(division_elements((10, 4, 6, 9),(5, 2, 3, 3)))\n\nnWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(list, length):\n    # length of the first part of the list\n    first_part_length = length\n    # length of the second part of the list\n    second_part_length = len(list) - first_part_length\n    # get first part of the list\n    first_part = list[:first_part_length]\n    # get second part of the list\n    second_part = list[first_part_length:]\n\n    return first_part, second_part\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst,n):\n    \"\"\"\n    lst = [1,1,2,3,4,4,5,1]\n    n = 3\n    \"\"\"\n    return [lst[:n],lst[n:]]", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(arr, n):\n  if len(arr) <= n:\n    return arr, []\n\n  half = len(arr) // 2\n  a1 = arr[:half]\n  a2 = arr[half:]\n\n  return a1, a2\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\n# write function\ndef split_two_parts(lst, n):\n    \"\"\"\n    :param lst: list of values\n    :param n: integer\n    :return: tuple of two lists\n    \"\"\"\n    # create empty lists\n    first, second = [], []\n    # loop through list\n    for item in lst:\n        # check if length of list is greater than n\n        if len(lst) > n:\n            # add items to second list\n            second.append(item)\n        else:\n            # add items to first list\n            first.append(item)\n    return first, second\n\n# print function output", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(array,length):\n    if len(array) <= length:\n        return ([], array)\n\n    # Get the second half\n    array2 = array[length:]\n\n    # Make sure that the second half is at the end\n    array = array[:length]\n\n    return (array, array2)\n\ndef test_split_two_parts():\n    assert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 2) == ([1, 1, 2, 3, 4, 4, 5, 1], [])\n    assert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 1) == ([1, 1, 2, 3, 4, 4, 5, 1], [])\n    assert split_two_parts([], 0) == ([], [])\n    assert split_two_parts([1], 0) == ([], [1])\n    assert split_two_parts([1], 1) == ([1], [])\n    assert split_two_parts([1], 2) == ([1], [])\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(input_list, split):\n    return input_list[:split], input_list[split:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, n):\n    return lst[:n], lst[n:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, m):\n    assert lst and type(lst) == list\n    assert m and type(m) == int\n    l = []\n    r = []\n    for i in lst:\n        if len(l) < m:\n            l.append(i)\n        else:\n            r.append(i)\n    return l, r\n\n\ndef split_two_parts_2(lst, m):\n    assert lst and type(lst) == list\n    assert m and type(m) == int\n    if len(lst) < m:\n        return lst, lst\n    else:\n        return lst[:m], lst[m:]\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(list, index):\n    # Your code goes here\n    first_half = list[:index]\n    second_half = list[index:]\n    return first_half, second_half\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(a, n):\n    assert type(a)==list, \"a must be a list\"\n    assert type(n)==int, \"n must be an integer\"\n    assert n<len(a), \"n must be less than the length of a\"\n    first_n = a[:n]\n    second_n = a[n:]\n    return first_n, second_n\n\ndef test_split_two_parts():\n    print(\"*** Testing split_two_parts ***\")\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\n# Write a function to check if a given number is divisible by 7 and 5 using two nested for loops"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1,d2):\n    for key in d2.keys():\n        d1[key] = d2[key]\n    return d1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    >>> merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    True\n    \"\"\"\n    for key in dict2:\n        dict1[key] = dict2[key]\n    return dict1", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1,dict2):\n    return {**dict1,**dict2}\n\ndef test_merge_dict():\n    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n    if isinstance(d1, dict) and isinstance(d2, dict):\n        return {**d1, **d2}\n    else:\n        raise Exception('Error: input d1 and d2 must be dict')\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    dict1.update(dict2)\n    return dict1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1,dict2):\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    for k in dict2:\n        dict1[k] = dict2[k]\n    return dict1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    Merges dict2 into dict1\n    \"\"\"\n    dict1.update(dict2)\n    return dict1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(a,b):\n    a.update(b)\n    return a\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1,dict2):\n    merge_dict = dict1.copy()\n    merge_dict.update(dict2)\n    return merge_dict\n\n\n\n# +\n#%%test\nimport unittest\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n# Write a function to calculate a dog's age in dog's years.\n\ndef dog_age(dog_age_months):\n    \"\"\"\n    Input: A dog's age in months.\n    Output: The age of the dog in dog's years.\n    \"\"\"\n    # Your code here\n    return (dog_age_months / 12)\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(human_age):\n    return human_age * 7\n\n#assert dog_age(12)==61\n#assert dog_age(25)==175\n#assert dog_age(5)==35\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(days_in_dog_years):\n    return days_in_dog_years/7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(year):\n    return year*7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(months):\n  return months * 12\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(year):\n    age=year-10\n    return age\n\n\n# + id=\"t-U7DWv3aR3Q\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 51} outputId=\"858221c2-8089-4f00-a414-c7f0430b37fb\"", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(years):\n    \"\"\"\n    years: the number of years a dog has been alive\n    \"\"\"\n    return years * 7\n\n# +\n# Dog's age in dog's years\ndog_age_years = dog_age(12)\n\n# Asserts", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(year):\n    return 65 + year\n\ndef dog_age_test():\n    assert dog_age(12)==61\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(human_age):\n    return human_age * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age):\n    \"\"\"Calculates the age of the dog\"\"\"\n    return 4 * (age / 7)\n\ndef dog_age(age):\n    \"\"\"Calculates the age of the dog\"\"\"\n    return age * 4\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n\tif len(lst) <= n: return [lst]\n\telse: return [lst[:n]] + list_split(lst[n:], n)\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(array, n):\n    return [array[i::n] for i in range(n)]\n\n\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\n\n# In[36]:\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst,n):\n    return [lst[i:i+n] for i in range(0,len(lst),n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l, n):\n    return [l[i::n] for i in range(n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l, n):\n    # Your code here\n    k = len(l) // n\n    i = 0\n    j = n\n    result = []\n    for i in range(k):\n        result.append(l[i*n:(i+1)*n])\n    result.append(l[k*n:len(l)])\n    return result\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    # YOUR CODE HERE\n    pass\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(arr, nth):\n  list_of_lists = []\n  length = len(arr)\n  for x in range(length):\n    if (x + 1) % nth == 0:\n      list_of_lists.append(arr[x:x + nth])\n  return list_of_lists\n\n\n\ndef test_list_split():\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],4)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n']]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list, n):\n    return [list[i::n] for i in range(n)]\n\n# test\n# print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3))\n\n#  7. Given a list of integer numbers, create a function that returns the highest value of the numbers that are not divisible by 3.", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i::n] for i in range(n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    return length**2 * 6\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(n):\n    surface = 6*n**2\n    return surface\n\ndef lateralsurface_cube_reduce(n):\n    return n**3*6\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(l):\n  return 6*l**2\n# lateralsurface_cube(5)\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(length):\n\treturn 6*length**2\n\n# This test fails", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    \"\"\"length is the side length of the cube\"\"\"\n    return 6 * length ** 2\n\n# Now define the unit test for lateralsurface_cube()\ndef test_lateral_surface_cube():\n    assert lateralsurface_cube(5) == 100\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(x):\n    return x * 6\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(n):\n    return n**2 * 6\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(x):\n    \"\"\"Function to find lateral surface area of a cube.\n    x: the side length of the cube\n    \"\"\"\n    return 6*x**2\n\n\n@pytest.mark.parametrize('x,answer', [\n    (1, 1),\n    (5, 125),\n    (9, 420),\n    (11, 622),\n    (17, 3544),\n    (23, 9380),\n    (29, 18760)\n])\ndef test_volume(x, answer):\n    assert volume_cube(x) == answer\n\n\n@pytest.mark.parametrize('x,answer', [\n    (1, 6),\n    (5, 24),\n    (9, 60),\n    (11, 72),\n    (17, 348),\n    (23, 920),\n    (29, 1840)\n])\ndef test_lateral_surface_area(x, answer):\n    assert lateralsurface_cube(x) == answer", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(n):\n    return n**2*6\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(x):\n    return 6*x**2"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_sum(n):\n\t\"\"\"\n\t:param n: \n\t:return: \n\t\"\"\"\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn (n ** 2) + square_sum(n-2)\n\n\ndef test_square_sum():\n\tassert square_sum(2) == 10\n\n# print(square_sum(2))\n# test_square_sum()", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    \"\"\"\n    O(n**2) time complexity\n    \"\"\"\n    sum_sq = 0\n    for i in range(1, n+1, 2):\n        sum_sq += i**2\n    return sum_sq\n\ndef main():\n    assert square_Sum(2) == 10\n    print(\"Passed\")\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n\treturn (n**2)*sum(i for i in range(1,n+1,2))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    # n = 2\n    # return 10\n    # n = 5\n    # return 318\n    # n = 12\n    # return 9801\n    # n = 100\n    # return 338350\n    # n = 200\n    # return 100656045\n    # n = 1000\n    # return 1661171375\n    # n = 10000\n    # return 16611713750\n    # n = 100000\n    # return 1661171375000\n    # n = 1000000\n    # return 166117137500000\n    # n = 10000000\n    # return 1661171375000000\n    # n = 100000000\n    # return 16611713750000000\n    # n = 1000000000\n    # return 166117137500000000\n    # n = 10000000000\n    # return 1661171375000000000\n    # n = 100000000000\n    # return 16611713750000000000\n    # n = 1000000000000\n    # return 166117137500000000000\n    # n = 10000000000000\n    # return 1661171375000000000000\n    # n = 100000", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += (i*i)\n    return sum\n\n# assert square_Sum(2) == 10\n\n# solve 1\n# import time\n# start = time.clock()\n# n = 1000000\n# result = 0\n# for i in range(n):\n#     result += (i*i)\n# end = time.clock()\n# print(\"result =\", result, \"time elapsed:\", end-start)\n\n# solve 2\n# n = 1000000\n# result = sum([(i*i) for i in range(n)])\n# print(\"result =\", result)\n\n# solve 3\n# def square_Sum(n):\n#     return sum([(i*i) for i in range(n)])\n\n# print(\"result =\", square_Sum(1000000))\n\n# solve 4\n# def square_Sum(n):\n#     result = 0\n#     for i in range(n):\n#         result += (i*i)\n#     return result\n\n# print(\"result =\", square_Sum(1000000))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    if n == 0:\n        return 0\n    return n**2 + square_Sum(n-1)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    if (n % 2) == 1:\n        return (n * (n + 1)) * (n / 2)\n    else:\n        return int(((n / 2) * (n + 1)) * (n / 2))\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    # Write your code here\n    result = 0\n    i = 1\n    while i <= n:\n        result += i * i\n        i += 2\n    return result\n\n# print(square_Sum(2))\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    return ((n-1)*5) + 1\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n: int) -> int:\n    assert n > 0\n    assert n <= 1000\n    a = 1\n    b = 1\n    for i in range(1, n):\n        # result = a + b + 4 * a * b\n        result = 2 * a * b + 4 * a * b - a\n        a = b\n        b = result\n\n    return result\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    return int(math.sqrt(10**n))**2\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    Find the nth star number\n    \"\"\"\n    return (n - 1) * n\n\ndef test():\n    assert find_star_num(3) == 37\n    assert find_star_num(100) == 5050\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\nimport math\n\ndef find_star_num(n):\n    return int(math.pow(2, n) * (math.pow(2, n - 1) + 1))\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    pass\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n\t\"\"\"\n\tfind_star_num(n) -> int\n\tReturn the nth star number.\n\n\tn: int >= 0\n\t\"\"\"\n\treturn n * 7\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    num = 1\n    for i in range(1, n + 1):\n        num *= i\n\n    return num\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(letter):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(c):\n    return ord(c)\n\ndef test():\n    print(ascii_value('A'))\n    assert ascii_value('A')==65\n    print(ascii_value('e'))\n    assert ascii_value('e')==101\n    print(ascii_value('J'))\n    assert ascii_value('J')==74\n    print(ascii_value('X'))\n    assert ascii_value('X')==88\n    print(ascii_value('z'))\n    assert ascii_value('z')==122\n    print(ascii_value('a'))\n    assert ascii_value('a')==97\n    print(ascii_value('d'))\n    assert ascii_value('d')==100\n    print(ascii_value('h'))\n    assert ascii_value('h')==104\n    print(ascii_value('y'))\n    assert ascii_value('y')==121\n    print(ascii_value('2'))\n    assert ascii_value('2')==50\n\ntest()\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(ch):\n    return ord(ch)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    assert type(char) == str\n    return ord(char)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(c):\n    return ord(c)\n\n# Tests", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(c):\n    return ord(c)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(c):\n    return ord(c)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(c):\n    return ord(c)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr,k):\n    sum_ = 0\n    for i in range(len(arr)):\n        if(i%2==0):\n            sum_+=arr[i]\n    for i in range(len(arr)-1,-1,-1):\n        if(i%2==0):\n            sum_-=arr[i]\n        if(sum_==k):\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: length of the array\n    :return: sum of even numbers at even positions\n    \"\"\"\n    sum = 0\n    for i in range(0,n):\n        if arr[i]%2 == 0 and i%2 == 0:\n            sum += arr[i]\n    return sum\n\n# O(n) time | O(n) space\ndef sum_even_and_even_index_v2(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: length of the array\n    :return: sum of even numbers at even positions\n    \"\"\"\n    sum = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            sum += arr[i]\n    return sum\n\ndef test_sum_even_and_even_index_v2(self):\n    arr = [5, 6, 12, 1, 18, 8]\n    self.assertEqual(sum_even_and_even_index(arr, 6), 30)\n    self.assertEqual(sum_even_and_even_index_v2(arr, 6), 30)\n    self.assertEqual(sum_even_and_even_index(arr, 7), 40)\n    self.assertEqual(sum_even_and_even_index_v2(arr, 7), 40)\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(nums,n):\n    return sum(nums[i] for i in range(0,n,2) if nums[i]%2==0)\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, n):\n    sum_even = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(list1,n):\n    count = 0\n    for i in range(0,len(list1)):\n        if (i+1)%2 == 0:\n            count = count + list1[i]\n    return count", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst,even_position_count):\n    sum = 0\n    for i in range(0,len(lst)):\n        if lst[i]%2 == 0 and i%2 == 0:\n            sum += lst[i]\n            even_position_count -= 1\n            if even_position_count == 0:\n                return sum", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst, n):\n    res = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            res.append(lst[i])\n    return sum(res[0:n])\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst, size):\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and i <= (len(lst)-1-size) and i > (len(lst)-1-size-1)])\n\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(numbers, length):\n    \"\"\"\n    :param numbers: list\n    :param length: int\n    :return: int\n    \"\"\"\n    sum_even_and_even_index_number = 0\n    for number in numbers:\n        if len(str(number))%2 != 0:\n            if len(str(number)) == length:\n                sum_even_and_even_index_number += number\n    return sum_even_and_even_index_number\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr,size):\n    sum = 0\n    for i in range(size):\n        if i % 2 == 0:\n            sum += arr[i]\n\n    return sum\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum_of_evens = 0\n    for i in range(1,n*2,2):\n        sum_of_evens += i**5\n    return sum_of_evens\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return sum(list(range(n, 0, -2))[:n:2])**5\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum=0\n    for i in range(1,n+1,2):\n        sum += i**5\n    return sum\n    ", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(num):\n    sum = 0\n    for i in range(num):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return 0\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    even_sum = 0\n    if n <= 0:\n        return 0\n    for i in range(n):\n        if i%2 == 0:\n            even_sum += i**5\n    return even_sum\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    # your code here\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    \"\"\"This function returns sum of fifth power of first n even natural numbers.\"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return [record[2] for record in records][-1]\n\ndef test_rear_extract():\n    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\ndef main():\n    print('Testing extract_front_element')\n    test_extract_front_element()\n    print('Testing extract_rear_element')\n    test_extract_rear_element()\n    print('Testing extract_middle_element')\n    test_extract_middle_element()\n    print('Testing rear_extract')\n    test_rear_extract()\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(record):\n    res = []\n    for i in record:\n        if i[0] == 'Rash':\n            res.append(i[2])\n    return res\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(l):\n    pass\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(data_list):\n    #  TODO: Write your solution here\n    return list(map(lambda x:x[2], data_list))\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return [r[2] for r in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return [record[2] for record in records][-1]\n\n# def rear_extract(records):\n#     return max(records, key=lambda record: record[2])[2]\n\n\n# def rear_extract(records):\n#     return records[-1][2]\n\n\n# def rear_extract(records):\n#     return max(records, key=lambda record: record[2])[2]\n\n# def rear_extract(records):\n#     return sorted(records, key=lambda record: record[2])[-1][2]\n\n# def rear_extract(records):\n#     return max(records)[2]\n\n# def rear_extract(records):\n#     return records[-1][2]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(lst):\n    return list(map(lambda x: x[2], lst[::-1]))\n\ndef test_rear_extract():\n    lst = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]\n    assert rear_extract(lst) == [21, 20, 19]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n# Solution 1\ndef rear_extract(records):\n    return [r[2] for r in records][::-1]\n\n# Solution 2\ndef rear_extract(records):\n    return sorted(r[2] for r in records, reverse=True)\n\n# Solution 3\ndef rear_extract(records):\n    return tuple(sorted(r[2] for r in records, reverse=True))\n\n# Solution 4\ndef rear_extract(records):\n    return tuple(r[2] for r in sorted(records, key=lambda r: r[2], reverse=True))\n\n# Solution 5\ndef rear_extract(records):\n    return tuple(sorted(r[2] for r in records, key=lambda r: r[2], reverse=True))\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n# your code goes here\ndef rear_extract(list_of_tuples):\n    return [t[2] for t in list_of_tuples[::-1]]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n\treturn [t[2] for t in records]\n\n#for testing"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    tup = []\n    for i in range(len(tuple1)):\n        tup.append(tuple1[i] - tuple2[i])\n    return tuple(tup)\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    substracted_tuple = tuple1\n    for index in range(0, len(tuple1)):\n        substracted_tuple = substracted_tuple[:index] + (tuple1[index] - tuple2[index],) + tuple1[index+1:]\n    return substracted_tuple\n\ndef substract_elements_alternative(tuple1, tuple2):\n    return tuple1[:len(tuple1) - 2] + (tuple1[len(tuple1) - 1] - tuple2[len(tuple2) - 1], tuple1[len(tuple1) - 2] - tuple2[len(tuple2) - 2])\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    return tuple(e1 - e2 for e1, e2 in zip(t1, t2))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    t1, t2, t3 = tuple1\n    x, y, z = tuple2\n    result = (t1-x, t2-y, t3-z)\n    return result\n\n# print(substract_elements((10, 4, 5), (2, 5, 18)))\n\n# def a()\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    # Your code here\n    tuple1 = (10, 4, 5)\n    tuple2 = (2, 5, 18)\n\n    result = []\n    for x in tuple1:\n        result.append(x - tuple2[x-1])\n    \n    return tuple(result)\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    \"\"\"\n    Returns tuple3 with tuple1 contents - tuple2 contents at corresponding index\n    \"\"\"\n    tuple3 = []\n    for i in range(len(tuple1)):\n        tuple3.append(tuple1[i] - tuple2[i])\n    return tuple3\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    result = tuple()\n    if len(tuple1) != len(tuple2):\n        return tuple(range(len(tuple1)))\n    for i in range(len(tuple1)):\n        result = result + (tuple1[i] - tuple2[i],)\n    return result\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(a, b):\n    \"\"\"\n    Compute the substract of a tuple's element with the corresponding elements of another tuple\n\n    Args:\n        a: a tuple of numbers\n        b: another tuple of numbers\n\n    Returns:\n        tuple: tuple of substracts\n    \"\"\"\n    assert len(a) == len(b)\n    return tuple(a_i - b_i for a_i, b_i in zip(a, b))\n\n\ndef test_substract_elements():\n    \"\"\"\n    Test the substract_elements function\n    \"\"\"\n    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\n\n# def get_color(num, colors):\n#     \"\"\"\n#     Given a number and a tuple of colors return the color of that number.\n\n#     Args:\n#         num: a number\n#         colors: a tuple of colors (e.g. (red, green, blue))\n\n#     Returns:\n#         a string: color of the given number\n#     \"\"\"\n#     return colors[num % len(colors)]\n\n# def get_color2(num, colors):\n#     \"\"\"\n#     Given a number and a tuple of colors return the color of that number.\n\n#     Args:\n#         num: a number\n#         colors: a tuple of colors (e.g. (red, green, blue))\n\n#     Returns:\n#         a string: color of the given number\n#     \"\"\"\n#     return colors[num % len(colors)]\n\n\n# def get_color(num, colors):\n#     \"\"\"\n#     Given a number and a tuple of colors return the color of that number.\n\n#     Args:\n#         num: a number\n#         colors: a tuple of colors (e.g. (red, green, blue))\n\n#     Returns:\n#         a string: color of the given number\n#     \"\"\"\n#     return", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(a, b):\n    '''\n    :param a: list of numbers\n    :param b: list of numbers\n    :return: substract of elements from a and b\n    '''\n    # Fill in this function\n    a_len = len(a)\n    b_len = len(b)\n    if a_len != b_len:\n        raise ValueError(\"a and b should have the same length\")\n\n    return (a[i]-b[i] for i in range(a_len))\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    return int(math.factorial(n)/math.factorial(2*n))\n    ", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n\treturn n * (2 * n - 1)\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    assert n % 2 == 0\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += binom.comb(n, i)\n    return sum\n\ndef even_binomial_Coeff_Sum_2(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return binom.comb(n, 2)*2 + binom.comb(n, 4)\n\n\n# Test", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += binomial_Coeff(n, 2*i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    if n==1:\n        return 1\n    else:\n        return n*even_binomial_Coeff_Sum(n-2)\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    even_sum = 0\n    for i in range(0, n, 2):\n        even_sum += binomial_Coeff(n, i)\n    return even_sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    if n < 0:\n        return -1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    even_binomial_Coeff_Sum_array = []\n    even_binomial_Coeff_Sum_array.append(2)\n    even_binomial_Coeff_Sum_array.append(1)\n    for i in range(n-2):\n        even_binomial_Coeff_Sum_array.append(even_binomial_Coeff_Sum_array[i]+even_binomial_Coeff_Sum_array[i+2])\n    return sum(even_binomial_Coeff_Sum_array)\n\n# test cases", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    even_binomial_Coeff = 0\n    i = 1\n    while i <= n:\n        even_binomial_Coeff += i\n        i += 2\n    return even_binomial_Coeff\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return binomial_Coeff_Sum(n) - binomial_Coeff_Sum(n-2)\n\ndef binomial_Coeff_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return binomial_Coeff_Sum(n-1) + binomial_Coeff_Sum(n-2)\n\n# Test cases", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    return (n*(n+1))/2\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(array, removed, lastRemoved):\n    return array.index(lastRemoved)\n\ndef main():\n    array = [2,5,4]\n    removed = 3\n    lastRemoved = 2\n    print(\"The position of the last removed element is\", get_Position(array, removed, lastRemoved))\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,size,element):\n    if(size == 0):\n        return -1\n    else:\n        return size - 1 - arr.index(element)\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\nfrom collections import deque\n\n\ndef get_Position(arr, n, x):\n    i = 0\n    window = deque()\n    while (i < n):\n        while (len(window) > 0 and arr[i] > arr[window[-1]]):\n            window.pop()\n        window.append(i)\n        i += 1\n    while (len(window) > 0 and arr[i] > x):\n        window.pop()\n    if (len(window) > 0 and arr[window[-1]] == x):\n        return window[-1]\n    else:\n        return -1\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,start,n):\n    if n==0:\n        return -1\n    else:\n        return get_Position(arr,start+1,n-1)\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(array,N,i):\n    #get_Position(array,N,i) = get_Position(array,i-1) + 1 if array[i-1] == N else i\n    while i > 0:\n        if array[i-1] == N:\n            return i - 1\n        i -= 1\n    return i\n\n#to test the function, uncomment the following line\n#assert get_Position([2,5,4],3,2) == 2\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,n,m):\n    while n < m:\n        print(n,m)\n        n+=1\n        m-=1\n    return n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,n,pos):\n    if n == 0:\n        return -1\n\n    return get_Position(arr,n-1,pos-arr[n-1]) if arr[n-1] == pos else n-1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\nfrom typing import List\ndef get_Position(array: List[int], min_num: int, count: int) -> int:\n    \"\"\"\n    >>> get_Position([2,5,4],3,2)\n    2\n    \"\"\"\n    min_count = count\n    min_index = -1\n    if min_count == 1:\n        return 0\n    for i in range(1, len(array)):\n        if array[i] > min_num:\n            min_index = i\n            break\n    if min_index >= 0:\n        return i + get_Position(array[:min_index], min_num, min_count-1)\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(array,element,index):\n    while(index < len(array)):\n        if(array[index] == element):\n            return index\n        index += 1\n    return -1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14159265358979 * r**2 * h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    return 2*3.14*r*h\n\n# Write a function to find the volume of a sphere.\n#assert volume_sphere(10)==314.1592653589793\n\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\n# Write a function to find the surface area of a cube.\n#assert surface_area_cube(10)==628.3185307179586\n\ndef surface_area_cube(x):\n    return 6*x**2\n\n# Write a function to find the surface area of a cone.\n#assert surface_area_cone(10,5)==437.28241445451364\n\ndef surface_area_cone(r,h):\n    return 3.14*r**2*h+2*3.14*r*h\n\n# Write a function to find the surface area of a cylinder.\n#assert surface_area_cylinder(10,5)==1411.6727742456414\n\ndef surface_area_cylinder(r,h):\n    return 2*3.14*r*h+2*3.14*r**2\n\n# Write a function to find the surface area of a sphere.\n#assert surface_area_sphere(10)==72.54522487718362\n\ndef surface_area_sphere(r):\n    return 4*3.14*r**2\n\n# Write a function to find the volume of a sphere.\n#assert volume_sphere(10)==314.1592653589793\n\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\n# Write a function to find the", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,height):\n    volume = (3.14*radius**2)*height\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.14159265359 * radius ** 2 * height\n\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, length):\n\treturn (3.14*radius**2)*length\n\ndef main():\n\tprint(volume_cylinder(10,5))\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.141592653589793 * radius**2 * height\n\n# assert volume_cylinder(10,5)==1570.7500000000002\n\ndef test_volume_cylinder(radius, height, expected):\n    assert round(volume_cylinder(radius, height), 10) == expected\n\n# test_volume_cylinder(10, 5, 1570.7500000000002)\n# test_volume_cylinder(1, 5, 7.853981633974483)\n# test_volume_cylinder(1, 1, 3.141592653589793)\n# test_volume_cylinder(1, 2, 12.566370614359172)\n# test_volume_cylinder(1, 0, 0)\n# test_volume_cylinder(2, 3, 42.68906793778556)\n# test_volume_cylinder(10, 10, 15707.500000000002)\n\ndef test_volume_cylinder_all():\n    test_volume_cylinder(10, 5, 1570.7500000000002)\n    test_volume_cylinder(1, 5, 7.853981633974483)\n    test_volume_cylinder(1, 1, 3.141592653589793)\n    test_volume_cylinder(1, 2, 12.566370614359", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r, h):\n    return 3.141592653589793 * r * r * h", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,height):\n    return (3.141592653589793*radius*radius*height)/3\n\ndef main():\n    print(volume_cylinder(10,5))\n\nmain()\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(diameter, height):\n    return diameter**2*height/3\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius,height):\n  volume = 3.14*radius**2*height\n  return volume\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(my_dict,threshold):\n    new_dict={}\n    for name,height in my_dict.items():\n        if height>=threshold:\n            new_dict[name]=height\n    return new_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, val):\n    return dict(filter(lambda x: x[1] == val, d.items()))\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n# Write your code here\ndef dict_filter(d, v):\n    return {k:v for k, v in d.items() if v > v}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, value):\n    return {k:v for (k, v) in d.items() if v == value}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,v):\n    pass\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n#b1 = dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)\n#print(b1)\n\ndef dict_filter(dict,v):\n    return {k: v for k, v in dict.items() if v == v}\n\n\n# +", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_1, num):\n    new_dict = {}\n    for key, value in dict_1.items():\n        if value >= num:\n            new_dict[key] = value\n    return new_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, target):\n    return {key: value for (key, value) in d.items() if value == target}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\nfrom collections import OrderedDict\ndef dict_filter(d,v):\n    return OrderedDict([(k,v) for k,v in d.items() if v == v])\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(my_dict, value):\n    \"\"\"\n    \n    \"\"\"\n    return {key: value for key, value in my_dict.items() if value == value}\n    \ndict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)\n# -\n\n# ## Sorting a List of Tuples\n#\n# You will be given a list of tuples and you have to sort it based on the second item of every tuple.\n#\n# **Examples:**\n#\n# ```\n# [('Tom', 100), ('Jerry', 50), ('Gerry', 100)]\n#\n# [('Jerry', 50), ('Tom', 100), ('Gerry', 100)]\n#\n# [('Tom', 100), ('Gerry', 100), ('Jerry', 50)]\n#\n# [('Gerry', 100), ('Tom', 100), ('Jerry', 50)]\n# ```\n#\n# The following cell contains code to test your solution.\n#\n# **Instructions**\n#\n# - Define the function `tup_sort`.\n# - Call the function on the given list of tuples and assign the output to `tup_list`.\n# - Use the `assert` statement to test your function.\n\n# +\n#Function to sort a list of tuples based on the second item\ndef tup_sort(tup_list):\n    \"\"\"\n    \n    \"\"\"\n    return sorted(tup_list, key=lambda x: x[1])\n\n#List of Tuples\ntup_list = [('Tom', 100"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(t):\n    for i, x in enumerate(t):\n        if isinstance(x, tuple):\n            return i\n\n\n# -\n\n# ## Exercise 4\n#\n# Suppose we are given a tuple with a mix of values. Write a function to count the number of strings in the tuple.\n\n# +", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    \"\"\"\n    A tuple of elements can be used as a stack, a stack is a first in last out (FILO) data structure, the first elements added to\n    the stack are the first to be removed.  You will need to know how to remove elements from a tuple.\n    A tuple can also be used as a queue, a queue is a first in first out (FIFO) data structure, the first element added to\n    the queue is the first to be removed.  You will need to know how to remove elements from a tuple.\n    \"\"\"\n    assert isinstance(tup, tuple)\n    i = 0\n    for j in tup:\n        if isinstance(j, tuple):\n            i += 1\n        else:\n            break\n    return i\n\n# test the function", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple):\n    count = 0\n    for element in tuple:\n        if type(element) == tuple:\n            count += count_first_elements(element)\n        else:\n            break\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple):\n    res = 0\n    for item in tuple:\n        if type(item) == tuple:\n            res += count_first_elements(item)\n        else:\n            res += 1\n    return res\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(elements):\n    return sum(1 for _ in elements) - 1\n\n\ndef test_count_first_elements():\n    assert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple):\n    return len(tuple) - 1 - tuple.index(tuple[-1])\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\n# Solution 1:\ndef count_first_elements(tuple_):\n    elements_count = 0\n    for element in tuple_:\n        if element != tuple_[0]:\n            break\n        elements_count += 1\n    return elements_count\n\n\n# Test", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(items):\n    elements = []\n    index = 0\n    for item in items:\n        if isinstance(item, tuple):\n            elements.extend(item)\n        else:\n            elements.append(item)\n            index += 1\n    for element in elements:\n        if element == items[index]:\n            count = 1\n            for i in range(index - 1, -1, -1):\n                if elements[i] == element:\n                    count += 1\n                else:\n                    break\n            return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple):\n    # Your code here\n    # return the number of elements in tuple that occur before the record\n    # if the record is not in tuple, return 0\n    #\n    # tuple = (1, 5, 7, (4, 6), 10)\n    # count_first_elements(tuple) == 3\n\n#-----------------------------------\n# TEST CODE\n#-----------------------------------\nimport unittest\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(records):\n    pass\n\n# 100 points"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    if n < 1:\n        return 0\n    a = 1\n    b = 1\n    return (a * n * (n+1)) / 2 + b * n * n\n\ndef test_is_num_decagonal():\n    assert is_num_decagonal(1) == 1\n    assert is_num_decagonal(2) == 15\n    assert is_num_decagonal(3) == 27\n    assert is_num_decagonal(4) == 42\n    assert is_num_decagonal(5) == 60\n    assert is_num_decagonal(6) == 81\n\ndef num_decagonal(n):\n    decagonals = []\n    for i in range(n):\n        if i%2:\n            decagonals.append(is_num_decagonal(i))\n        else:\n            decagonals.append(is_num_decagonal(i+1))\n    return decagonals\n\ndef test_num_decagonal():\n    assert num_decagonal(1) == [1]\n    assert num_decagonal(2) == [1, 15]\n    assert num_decagonal(3) == [1, 15, 27]\n    assert num_decagonal(4) == [1, 15, 27, 42]\n    assert num_decagonal(5) == [1, 15, 27, 42, 60]\n    assert num_decagonal(6) == [1, 15, 27, 42, 60, 81]\n\ndef is_palindromic(num):\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\ndef test_is_palindromic():\n    assert is_palindromic(1)\n    assert is_palindromic(15)\n    assert is_palindromic(27)\n    assert is_palindrom", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    pass\n\n\ndef decagonal(n):\n    pass\n\n\ndef is_num_triangular(n):\n    pass\n\n\ndef triangular(n):\n    pass\n\n\ndef is_num_pentagonal(n):\n    pass\n\n\ndef pentagonal(n):\n    pass\n\n\ndef is_num_hexagonal(n):\n    pass\n\n\ndef hexagonal(n):\n    pass\n\n\ndef is_num_heptagonal(n):\n    pass\n\n\ndef heptagonal(n):\n    pass\n\n\ndef is_num_octagonal(n):\n    pass\n\n\ndef octagonal(n):\n    pass\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\nimport math\nfrom math import sqrt\n\ndef is_num_decagonal(n):\n    # Complete this function\n    return (math.sqrt(24 * n - 1) + 1) // 2\n    ", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    pass\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n# Your code goes here\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nfrom collections import Counter\nfrom operator import add\n\n\ndef is_num_decagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return sum(n*x for x, y in Counter(decagonal_number_sequence(n)).items())\n\n\ndef decagonal_number_sequence(n):\n    \"\"\"\n    :type n: int\n    :rtype: list[int]\n    \"\"\"\n    return [x+y for x in range(1, n) for y in range(n-x)]\n\n\ndef test_is_num_decagonal():\n    assert is_num_decagonal(0) == 0\n    assert is_num_decagonal(1) == 1\n    assert is_num_decagonal(2) == 15\n    assert is_num_decagonal(3) == 27\n    assert is_num_decagonal(4) == 42\n    assert is_num_decagonal(5) == 60\n    assert is_num_decagonal(6) == 82\n    assert is_num_decagonal(7) == 108\n    assert is_num_decagonal(8) == 140\n    assert is_num_decagonal(9) == 178\n    assert is_num_decagonal(10) == 222\n    assert is_num_decagonal(11) == 274\n    assert is_num_decagonal(12) == 334\n    assert is_num_decagonal(13) == 402\n    assert is_num_decagonal(14) == 478\n    assert is_num_decagonal(15) == 564\n    assert is_num_decagonal(16) == 660\n    assert is_num_decagonal(17) == 766\n    assert is_num_decagonal(18) == 884\n    assert is_num_decagonal(", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\" \n    Returns True if the number is a decagonal number, False otherwise.\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    pass\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    num = 1\n    for i in range(1, n+1):\n        num += i\n    return num\n\n\ndef nth_decagonal_number(n):\n    num = 1\n    for i in range(1, n+1):\n        num += i\n    return num\n\n# nth_decagonal_number(10000)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(lst, value):\n    \"\"\"\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31)\n    (True, 3)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],45)\n    (False, -1)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],65)\n    (True, 8)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],66)\n    (False, -1)\n    >>> sequential_search([],65)\n    (False, -1)\n    >>> sequential_search([65,12,31],65)\n    (True, 0)\n    \"\"\"\n    if not lst:\n        return (False,-1)\n    for i in range(len(lst)):\n        if lst[i] == value:\n            return (True,i)\n    return (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr,x):\n    \"\"\"\n    time: O(n)\n    space:O(1)\n    \"\"\"\n    for index,item in enumerate(arr):\n        if item == x:\n            return (True,index)\n    return (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    \"\"\"\n    Sequential search\n    \"\"\"\n    for i in range(0, len(arr)):\n        if arr[i] == x:\n            return True, i\n        else:\n            return False, -1\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(array,item):\n    '''\n    Function to return the index of the item and a boolean if the item was found.\n    '''\n    if array:\n        index = 0\n        found = False\n        while index < len(array) and not found:\n            if array[index] == item:\n                found = True\n            else:\n                index += 1\n        if found:\n            return (True, index)\n        else:\n            return (False, index)\n    else:\n        return (False, 0)\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(A,x):\n    \"\"\"\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31)\n    (True, 3)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],56)\n    (True, 4)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],566)\n    (False, None)\n    >>> sequential_search([],31)\n    (False, None)\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return (True,i)\n    return (False,None)\n\n# If the program is executed, a search will be made for the element 56, whose index is 4.\n# This is because the first element is 11, the second element is 23, the third element is 58, and so on.\n\n# The element 56 was found and its index was returned.\n\n# In the same way, if the program is executed with the element 566, it returns None, since 566 is not contained in the list.\n\n# Finally, if the program is executed with an empty list, it returns None.\n\n# In the above examples, the program was executed on the list, where the element 56 is found.\n\n# In this case, we can verify that the element 56 is present in the list.\n\n# The program was executed on the list where the element 566 is not present.\n\n# Therefore, the element 566 is not present in the list.\n\n# Finally, the program was executed on the empty list.\n\n# Therefore, it is not present in the list.", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, x):\n    \"\"\"\n    :param array: the array to search\n    :param x: the element to search for\n    :return: a tuple (True or False, the index of the element if found)\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == x:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(nums, target):\n    \"\"\"\n    Search the array by sequential search\n    :param nums: list, unsorted array\n    :param target: int, target value\n    :return: (bool, int), whether the target value exists in the array, and the index if it exists\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return (True, i)\n    return (False, -1)\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    \"\"\"\n    Sequential Search Algorithm\n\n    :param array: An array to be searched\n    :param element: An element to be searched for\n    :return: A tuple containing the boolean and index of the element if the element is present in the array, else (False, None)\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == element:\n            return True, i\n    return False, None\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, el):\n    for i in range(len(arr)):\n        if arr[i] == el:\n            return (True, i)\n    return (False, None)\n\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n# Solution\ndef all_unique(lst):\n    # If the length of the list is 1 then it is unique\n    if len(lst) == 1:\n        return True\n    # Initialize a set to check for duplicate values\n    s = set()\n    # Iterate through the list and append to the set\n    for i in lst:\n        s.add(i)\n    # Check if the set has the same number of elements as the list\n    if len(s) == len(lst):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(x):\n    x = list(x)\n    x = list(set(x))\n    if len(x) == len(set(x)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(set(lst)) == len(lst)\n\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    \"\"\"\n    >>> all_unique([1,2,3])\n    True\n    >>> all_unique([1,1,3])\n    False\n    \"\"\"\n    return len(set(lst)) == len(lst)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(list):\n    check_list = []\n    for i in list:\n        if i not in check_list:\n            check_list.append(i)\n        else:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(seq):\n    \"\"\"\n    Check if all the elements of a sequence are unique.\n    \"\"\"\n    return len(seq) == len(set(seq))\n\n#print(all_unique([1,2,3,3]))\n#print(all_unique([1,2,3,4,5,5]))", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1,list2):\n  return list(map(lambda x,y: x-y,list1,list2))\n\n# Problem 3:", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1,list2):\n  return list(map(lambda x:x-y for x,y in zip(list1,list2)))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(li1,li2):\n    return [li1[i]-li2[i] for i in range(len(li1))]\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(a,b):\n    \"\"\"\n    a: list\n    b: list\n    return: list\n    \"\"\"\n    return list(map(lambda x,y:x-y,a,b))\n\n#tests", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\n#2.", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(lst1,lst2):\n    return list(map(lambda x,y:x-y,lst1,lst2))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\nsub_list = lambda x,y : [v for v in map(lambda a,b : a-b, x, y)]\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1,list2):\n    return [lambda x,y: x-y for x,y in zip(list1,list2)]"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(s):\n    # your code goes here\n    freq = [0]*10\n    for i in range(len(s)):\n        freq[ord(s[i])-ord('0')] += 1\n    for i in range(10):\n        if freq[i] > ord(s[i])-ord('0'):\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n# 1234\ndef validate(number):\n    numstr = str(number)\n    return (int(numstr) <= int(numstr[0])) and (int(numstr[1]) <= int(numstr[1])) and (int(numstr[2]) <= int(numstr[2])) and (int(numstr[3]) <= int(numstr[3]))", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n# Your solution\ndef validate(number):\n\tnumber_list = list(str(number))\n\tfor digit in number_list:\n\t\tif int(digit) > int(number):\n\t\t\treturn False\n\treturn True\n\n# Testing", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(number):\n    if len(str(number)) > 1:\n        if all([i <= j for i,j in zip(str(number), str(number))]):\n            return True\n        else:\n            return False\n    else:\n        return True\n\n\n# + [markdown] id=\"jG02FY9EqY5B\"\n# Write a python function to find the first non repeating character in a string\n\n# + id=\"9m7O2Z0aqY5C\" outputId=\"f58c8f51-9d39-4468-e792-9103e0e67856\"", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\nimport math\n\ndef is_valid(num):\n    \"\"\"\n    :param num:\n    :return: True if the frequency of each digit is less than or equal to the digit itself\n    \"\"\"\n    digits = [int(i) for i in str(num)]\n    unique_digits = len(set(digits))\n    for digit in digits:\n        if digit > unique_digits:\n            return False\n    return True\n\n\ndef validate(num):\n    \"\"\"\n    :param num:\n    :return: True if the frequency of each digit is less than or equal to the digit itself, otherwise False\n    \"\"\"\n    return is_valid(num)\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\nimport math\n\ndef validate(num):\n    num_str = str(num)\n    for num in num_str:\n        if int(num) > int(num_str):\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    return all(i <= n for i, n in zip(sorted(str(num)), str(num)))\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    return sum([i <= j for i,j in zip(n,map(str,n))]) == len(n)\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    \"\"\"\n    We can use the length of the number to check the number of digits.\n    \"\"\"\n    if len(str(number)) == 1:\n        return True\n    digits = str(number)\n    for digit in digits:\n        if int(digit) > int(digits):\n            return False\n    return True\n\ndef test_validate():\n    assert validate(1234) == True\n    assert validate(12345) == False\n    assert validate(123456) == True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(n):\n    str_num = str(n)\n    for i in str_num:\n        if int(i) > int(str_num[0]):\n            return False\n    return True\n\n\ndef validate2(n):\n    str_num = str(n)\n    for i in str_num:\n        if int(i) >= int(str_num[0]):\n            return False\n    return True\n\n# validate2(1234)"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list_arg, item_arg):\n    if item_arg in list_arg:\n        for item in list_arg:\n            if item!=item_arg:\n                return False\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list_of_string,string_to_check):\n    for string in list_of_string:\n        if string == string_to_check:\n            return True\n    return False\n\n#assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list_of_strings,check_element):\n    list_of_strings = [e.lower() for e in list_of_strings]\n    list_of_strings.remove(check_element.lower())\n    if list_of_strings==[]:\n        return False\n    else:\n        return True\n\n\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(elements,element):\n    return all(elements==element)\n\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list,element):\n    if element == list[0]:\n        return True\n    if element == list[1]:\n        return True\n    if element == list[2]:\n        return True\n    if element == list[3]:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, str):\n    # Your code here\n    if all(x == str for x in lst):\n        return True\n    else:\n        return False\n\n#test", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list, element):\n    \"\"\"\n    :param list: list of items\n    :param element: elements to check\n    :return: boolean\n    \"\"\"\n    for item in list:\n        if item != element:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list_,value):\n    return all([x==value for x in list_])\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list1,element):\n    return all(x==element for x in list1)\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, val):\n    for i in lst:\n        if i == val:\n            return True\n    return False"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    \"\"\"\n    >>> text_match_two_three(\"ac\")\n    'Not matched!'\n    >>> text_match_two_three(\"ab\")\n    'ab'\n    >>> text_match_two_three(\"abc\")\n    'abc'\n    >>> text_match_two_three(\"abcde\")\n    'Not matched!'\n    \"\"\"\n    a = re.search(r\"a{2,3}\", text)\n    if not a:\n        return \"Not matched!\"\n    else:\n        return a.group()\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(s):\n  # Your code here\n  if len(s) > 2 and s[0]=='a' and s[1]=='b':\n    return 'Matched!'\n  else:\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    return 'Not matched!' if 'a' not in text[0] else 'Matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    assert len(text) == 1\n    if text != \"a\" or text != \"b\":\n        return \"Not matched!\"\n    else:\n        return \"Matched!\"\n\n# test_text_match_two_three()\n\n# print(text_match_two_three(\"ac\"))\n\n# print(text_match_two_three(\"bb\"))\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(my_string):\n    my_list = list(my_string)\n    #print(my_list)\n    if my_list[0] == 'a' and len(my_list) >= 2 and my_list[1] == 'b':\n        if len(my_list) == 2:\n            return 'Matched!'\n        elif len(my_list) == 3:\n            return 'Matched!'\n        else:\n            return 'Not matched!'\n    else:\n        return 'Not matched!'\n    \n#print(text_match_two_three(\"ac\"))\n\n\n# +", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    return 'Not matched!' if re.match(r\"ab{2,3}\", text) else 'Matched!'\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(txt):\n    if len(txt) < 3:\n        return 'Not matched!'\n    if txt[0] == 'a' and txt[1] == 'b' and txt[2].isalpha():\n        return 'Matched!'\n    return 'Not matched!'\n\n# This function checks if the given input is a palindrome\n# The palindrome should be case insensitive\n# In this function, the first and last characters are compared\n# If they are the same, the middle characters are compared\n# If they are the same, the entire string is a palindrome\n# If they are not the same, the middle characters are compared\n# If they are not the same, the first and last characters are compared\n# If they are not the same, the entire string is not a palindrome\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if text.count('a') > 0:\n        if text.count('b') == 2 or text.count('b') == 3:\n            return ('Matched!')\n        else:\n            return ('Not matched!')\n    else:\n        return ('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n  # Your code here\n  # Create a boolean variable\n  answer = True\n  # Check the length of the text\n  if len(text) < 3:\n    answer = False\n  # Check if the last character is a 'b'\n  if text[-1:] != 'b':\n    answer = False\n  # Return your boolean variable\n  return answer\n\n#print(text_match_two_three(\"ac\"))\n#print(text_match_two_three(\"ab\"))\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(string):\n    if string.find('b') >= 0 and string.find('b') <= 2:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(A, k, m):\n    \"\"\"\n    :param A: A list of integers.\n    :param k: an integer.\n    :param m: an integer.\n    :return: an integer denoting the maximum contiguous array sum formed by repeating the given array k times.\n    \"\"\"\n    if k == 0:\n        return max(A)\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(m):\n        max_ending_here += A[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        max_so_far = max(max_so_far, max_ending_here)\n    if k == 1:\n        return max_so_far\n    max_ending_here = 0\n    for i in range(m):\n        max_ending_here += A[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n\n\ndef main():\n    print max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n    print max_sub_array_sum_repeated([10, 20, -30, -1], 4, 2)\n    print max_sub_array_sum_repeated([10, 20, -30, -1], 4, 1)\n    print max_sub_array_sum_repeated([10, 20, -30, -1], 4, 0)\n    print max_sub_array_sum_repeated([10, 20, -30, -1], 2, 2)\n    print max_sub_array_sum_repeated([10, 20, -30", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not arr or k <= 0 or n <= 0:\n        return -1\n\n    current_sum = 0\n    for _ in range(n):\n        for x in arr:\n            current_sum += x\n\n        arr = arr * k\n\n    return current_sum", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nimport math\n\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    if k > n:\n        k = n\n    print(f\"Input array: {arr}\")\n    print(f\"Value of k: {k}\")\n    print(f\"Length of array: {n}\")\n\n    sums = []\n    for i in range(n):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += arr[(i + j) % n]\n        sums.append(curr_sum)\n\n    print(f\"Sums array: {sums}\")\n    print(f\"Largest sum: {max(sums)}\")\n    return max(sums)\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    arr_length = len(arr)\n    #print(arr_length)\n    #print(k)\n    #print(n)\n\n    if (k == 1):\n        max_sum = 0\n        for i in range(0, n):\n            max_sum = max_sum + arr[i]\n\n        return max_sum\n\n    max_sum = -10**9\n    for i in range(0, n-k+1):\n        #print(i)\n        #print(i+k)\n\n        temp_sum = 0\n        for j in range(i, i+k):\n            #print(j)\n            temp_sum = temp_sum + arr[j]\n\n        max_sum = max(max_sum, temp_sum)\n\n    return max_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(a: List[int], k: int, n: int) -> int:\n    pass\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, n):\n    arr_rep = []\n    for i in range(0, k):\n        arr_rep.extend(arr)\n    temp = arr\n    for i in range(0, k):\n        for j in range(0, n):\n            temp[j] += arr[i]\n    max_sum = 0\n    for i in range(0, n):\n        if temp[i] > max_sum:\n            max_sum = temp[i]\n    return max_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    arr = arr + [0] * k\n    print(arr)\n    max_sum = -1\n    for i in range(n):\n        temp_sum = 0\n        for j in range(i, i + k):\n            temp_sum += arr[j]\n        max_sum = max(max_sum, temp_sum)\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(array, n, k):\n    result = 0\n    sub_array = []\n    for i in range(n):\n        if i >= k:\n            sub_array.pop(0)\n        sub_array.append(array[i])\n    for i in range(k):\n        result += sub_array[i]\n    return result\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n# O(N)\ndef square_Sum(n):\n    n = n * (n + 1) // 2\n    return (n ** 2) // 4\n\ndef test_square_Sum():\n    assert square_Sum(2) == 20\n    assert square_Sum(3) == 50\n    assert square_Sum(4) == 80\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    '''\n    n - integer - number of numbers to add up\n    '''\n    sum = 0\n    for i in range(1, n * 2, 2):\n        sum += i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    return (n*(n+1)*(2*n+1))//6\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_sum(n):\n    return sum(i**2 for i in range(1, n, 2))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n*n + square_Sum(n-1)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum = sum + (i ** 2)\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    # Your code here\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    if n % 2 == 1:\n        return 0\n    sq_sum = 0\n    for i in range(2, n):\n        sq_sum += i ** 2\n    return sq_sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n\tif n == 1:\n\t\treturn 4\n\telif n == 2:\n\t\treturn 4**2 + 8**2\n\telse:\n\t\treturn 4**2 + 8**2 + (n-2)*16**2\n\n# Run the code above and observe the output.\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\nimport math\n\ndef square_Sum(n):\n    sum=0\n    for i in range(n):\n        sum=sum+i**2\n    return sum\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, n):\n    # write your code here\n    # initialize dictionary\n    dict = {}\n    for i in range(1, n):\n        if pow(i, p-2, n) in dict:\n            dict[pow(i, p-2, n)] = i\n    count = 0\n    for i in arr:\n        if i in dict:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\n# NOTE: Function signature required to be compatible with its input\n# https://docs.python.org/3.5/library/inspect.html\n# introspection\nfrom inspect import signature\n\ndef modular_inverse(elements, prime_num, mod):\n    if not isinstance(elements, list):\n        raise TypeError('`elements` must be a list!')\n    if not isinstance(prime_num, int):\n        raise TypeError('`prime_num` must be an int!')\n    if not isinstance(mod, int):\n        raise TypeError('`mod` must be an int!')\n    if prime_num % 2 == 0 or prime_num % 3 == 0:\n        raise ValueError('`prime_num` must be odd!')\n    if prime_num <= 0:\n        raise ValueError('`prime_num` must be positive!')\n    if mod <= 0:\n        raise ValueError('`mod` must be positive!')\n    if len(elements) == 0:\n        return 0\n    if len(elements) == 1:\n        return 1\n    # if len(elements) == 2:\n    #     return elements[1] if elements[1] % prime_num == 0 else elements[0]\n    # if len(elements) == 3:\n    #     return elements[1] if elements[1] % prime_num == 0 else elements[0]\n    # if len(elements) == 4:\n    #     return elements[1] if elements[1] % prime_num == 0 else elements[0]\n    for index in range(len(elements)):\n        # NOTE: To handle the edge case where the element is 0,\n        #       if the element is 0, we simply skip it\n        if elements[index] == 0:\n            continue\n        # NOTE: Checking if the element is in modulo prime_num, if yes,\n        #       then we can simply set the element as 1 and return\n        elif elements[index] % prime_num == 0:\n            return 1\n        # NOTE: We check if the element has a prime factor that is the same as prime_num\n        #      ", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, mod):\n    assert (p>1 and mod>1) or (p==2 and mod==2), \"input values not valid\"\n    for i in arr:\n        if i==0:\n            return 0\n    if p==2:\n        return (mod-arr[0])%mod\n    lcm = lcm_func(arr, mod)\n    for i in range(1, lcm+1):\n        if pow(i, p-2, lcm) * lcm_inv(i, p, lcm)%lcm==1:\n            return (i*pow(i, p-2, lcm))%mod\n    return 0\n\ndef lcm_func(arr, mod):\n    res = 1\n    for i in arr:\n        res = lcm(res, i)\n    return res\n\ndef lcm(a, b):\n    if a==0 or b==0:\n        return 0\n    return (a*b)//gcd(a, b)\n\ndef lcm_inv(a, p, mod):\n    if a==0:\n        return 0\n    return pow(a, mod-2, p)\n\ndef gcd(a, b):\n    if b==0:\n        return a\n    return gcd(b, a%b)\n\ndef main():\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 7))\n    print(modular_inverse([ 2, 3, 5 ], 3, 11))\n    print(modular_inverse([ 2, 4, 6 ], 3, 11))\n    print(modular_inverse([ 1, 1, 1 ], 1, 3))\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(nums, p, mod):\n    \"\"\"\n    >>> modular_inverse([1, 2, 3, 4], 5, 10)\n    [1, 4, 2, 3]\n    \"\"\"\n    from fractions import Fraction\n    from itertools import combinations_with_replacement\n    from functools import reduce\n\n    # Get all possible combinations of num\n    # For example, for p=5, and nums=[1, 2, 3], we have the following combinations:\n    # 1+2+3\n    # 1+2+3+4\n    # 1+2+3+4+5\n    # ...\n    # For each combination, compute the modular inverse.\n    # Note: in the end, we will only need the inverse of the first num, hence the +1\n\n    inverses = [Fraction(1, p) for _ in nums]\n    for c in combinations_with_replacement(nums, len(nums)):\n        inv = Fraction(reduce(lambda x, y: x * y, c), p)\n        inverses[c[0] - 1] = inv\n\n    return list(map(lambda x: x.mod_inverse(mod).numerator, inverses))\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(a, p, m):\n    for i in range(p):\n        if pow(a[i], p-2, m) == 1:\n            return pow(a[i], (p-2), m)\n    return None\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(A, p, mod):\n    \"\"\"\n    :param A: a list of numbers\n    :param p: a prime number\n    :param mod: a modulo to be used in gcd\n    :return:\n    \"\"\"\n    for a in A:\n        assert a < mod\n    assert gcd(p, mod) == 1\n    assert len(A) > 0\n    assert p > max(A)\n\n    y = 1\n    for a in A:\n        while y >= mod:\n            y -= mod\n        y = (y * (a - 1)) % mod\n    return y % mod\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, m):\n    \"\"\"\n    This function will return the index of the array element with the modular inverse\n    \"\"\"\n    for i in range(len(arr)):\n        res = (arr[i] % p)\n        res2 = pow(res, m - 2, m)\n        if res2 == 1:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\nfrom itertools import combinations\nfrom functools import reduce\nfrom fractions import Fraction\n\n\ndef modular_inverse(elements, prime, modulo):\n    # find 2 numbers whose product is equal to the product of all the elements\n    # in the array and is also coprime to p\n    gcd = reduce(lambda a, b: a * b, elements) // prime\n    divisor = gcd\n    while divisor % 2 == 0:\n        divisor //= 2\n\n    # generate all the pairs of numbers which satisfy the condition\n    # (a * 2 * ... * p - 1) is coprime to p\n    coprime_numbers = []\n    for i in range(1, divisor):\n        if gcd % i == 0:\n            coprime_numbers.append(i)\n    coprime_numbers.append(divisor)\n\n    # generate all the pairs of numbers such that a * b is coprime to p\n    coprime_pairs = []\n    for i in range(0, len(coprime_numbers)):\n        for j in range(i+1, len(coprime_numbers)):\n            coprime_pairs.append([coprime_numbers[i], coprime_numbers[j]])\n\n    # create a list of pairs\n    # where each element in the pair is a number whose modular inverse with\n    # respect to p equals its index\n    # e.g. [0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2]\n    inverse_indices = []\n    for i in range(len(elements)):\n        for j in range(len(coprime_pairs)):\n            if elements[i] * coprime_pairs[j][0] == elements[i] * coprime_pairs[j][1] % modulo:\n                inverse_indices.append(j)\n\n    # return the number of pairs which satisfy the condition\n    return sum([1 for i in inverse_indices])\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, n):\n    # Your code goes here\n    m = [i for i in range(n)]\n    for i in range(n):\n        r = (i*m[i])%p\n        if r==0:\n            m[i] = 1\n        else:\n            m[i] = p/r\n    for i in arr:\n        if i==0:\n            return 0\n        if i>n:\n            return 0\n        ans = 1\n        while i>0:\n            if i%2==1:\n                ans = (ans*m[i%n])%p\n            i = i/2\n            m[i%n] = (m[i%n]*m[i%n])%p\n        return ans\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\nimport math\n\ndef odd_Days(year):\n    \"\"\"\n    find the number of odd days in the year\n    \"\"\"\n    number_of_days = 365 * year\n    odd = number_of_days % 2\n    return odd\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_days(year):\n    # Write your code here\n    number_of_days = 365\n    if year % 4 == 0:\n        number_of_days += 1\n    if year % 100 == 0:\n        number_of_days -= 2\n    if year % 400 == 0:\n        number_of_days += 2\n    return number_of_days - (number_of_days % 2)\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    return len([d for d in range(1, 366) if d % 2 != 0])\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return (year-1)//4 - (year-1)//100 + (year-1)//400 + 1\n\ndef run_test():\n    year = 100\n    expected = 5\n    actual = odd_Days(year)\n    print('Actual:', actual)\n    assert actual == expected\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\n# Write your code below and press Shift+Enter to execute\n\ndef odd_Days(year):\n    days = 0\n    for i in range(1,year+1):\n        if (i % 2) != 0:\n            days = days + 1\n    return days\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    return year * 365 % 4", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n\tif type(year) is not int:\n\t\traise ValueError(\"year must be integer\")\n\telif year < 1 or year > 9999:\n\t\traise ValueError(\"year must be between 1 and 9999\")\n\telse:\n\t\tdays = 0\n\t\tfor month in range(1, 13):\n\t\t\tif month in [1,3,5,7,8,10,12]:\n\t\t\t\tdays += 31\n\t\t\telif month in [4,6,9,11]:\n\t\t\t\tdays += 30\n\t\t\telif month == 2:\n\t\t\t\tdays += 28\n\t\t\telse:\n\t\t\t\traise ValueError(\"invalid month\")\n\t\tif year % 4 == 0:\n\t\t\tdays += 1\n\t\tif year % 100 == 0:\n\t\t\tdays -= 1\n\t\tif year % 400 == 0:\n\t\t\tdays += 1\n\t\treturn days - ((year % 4 == 0) + (year % 100 == 0) + (year % 400 == 0)) * 2\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\nimport sys\n\ndef odd_Days(year):\n    odd_day = 0\n    for month in range(1, 13):\n        if month % 2 == 0:\n            continue\n        for day in range(1, 32):\n            if (day % 2 == 1) and (day % 7 == 1):\n                odd_day += 1\n            if month == 2 and day == 29 and year % 4 == 0:\n                odd_day += 1\n\n    return odd_day\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return 0\n\n#Test\n#assert odd_Days(100) == 5\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_length = 1\n    max_value = lst[0]\n    for i in range(len(lst)-1):\n        if len(lst[i])>max_length:\n            max_length = len(lst[i])\n            max_value = lst[i]\n    return max_length, max_value\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nimport random\nfrom collections import Counter\nimport itertools\nfrom functools import reduce\nfrom operator import add\n\ndef max_length(arrays):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n    Input:\n    - arrays: a list of lists\n    Output:\n    - a tuple with the maximum length and the list of lists with the maximum length\n    \"\"\"\n    return (max(len(arr) for arr in arrays), \n            [arr for arr in arrays if len(arr) == max(len(arr) for arr in arrays)])\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    \"\"\"\n    TODO: implement this function.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if len(lst[i]) + len(lst[j]) > max_len:\n                max_len = len(lst[i]) + len(lst[j])\n                max_list = lst[i] + lst[j]\n    return max_len, max_list\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(arr):\n    max_length = 0\n    max_el = []\n    for i in arr:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_el = i\n    return max_length, max_el\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom operator import add\n\ndef max_length(arr):\n    return max(list(map(len, arr)), key = lambda x: (len(arr), x))\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(array):\n    max = 0\n    max_result = []\n    for i in array:\n        if len(i) > max:\n            max = len(i)\n            max_result = i\n    return max, max_result\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    max_len = 0\n    max_list = []\n    for i in lists:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_len, max_list\n\n\ndef test_max_length():\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n\tmax_len = 0\n\tmax_list = []\n\tfor i in lst:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\t\t\tmax_list = i\n\treturn max_len, max_list", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    return max([len(i) for i in lst])\n\ndef test_max_length():\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(L):\n    \"\"\"\n    Complexity O(n^2)\n    \"\"\"\n    max_len = 0\n    result = []\n    for i in range(len(L)):\n        for j in range(len(L[i])):\n            L[i][j] = i\n    for i in range(len(L)):\n        for j in range(i + 1, len(L)):\n            if len(L[i]) + len(L[j]) > max_len:\n                max_len = len(L[i]) + len(L[j])\n                result = [L[i], L[j]]\n    return max_len, result"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    '''\n    f(n,k) = f(n-1,k) + f(n-2,k)\n\n    if n = 1:\n        f(1,k) = k - 1\n    else:\n        f(1,k) = f(1,k-1) + f(1,k-2)\n\n    if n = 2:\n        f(2,k) = f(1,k)\n    else:\n        f(2,k) = f(2,k-1) + f(2,k-2)\n\n    f(2,k) = f(1,k) + f(1,k)\n\n    f(2,k) = 2 * f(1,k)\n\n    f(2,k) = f(2,k-1) + f(2,k-2) + 2 * f(2,k-3)\n\n    '''\n    if n == 1:\n        return k - 1\n    if n == 2:\n        return count_no_of_ways(1, k)\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) + 2 * count_no_of_ways(n - 3, k)\n\n\ndef test_count_no_of_ways():\n    assert count_no_of_ways(2, 4) == 16\n    assert count_no_of_ways(2, 3) == 5\n    assert count_no_of_ways(3, 4) == 4\n    assert count_no_of_ways(3, 5) == 1\n    assert count_no_of_ways(4, 6) == 0\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    # Base Case\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    if n == 2:\n        return k*k\n\n    # Recursion\n    ans = 0\n    for i in range(1, k+1):\n        ans += count_no_of_ways(n-2, i)\n    return ans", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\n# For the sake of consistency, lets assume that the fence is on the diagonal of a rectangle, which is a square with side length equal to the number of posts.\n# So the area of the square is n^2.\n# There are (n^2 - 1)/2, (n^2 - 2)/2, .., (n^2 - k)/2 ways to paint the fence by choosing k colors.\n# The rest of the ways are duplicate.\n\ndef count_no_of_ways(k, n):\n    if k <= 0 or k > n:\n        return 0\n    elif k == n:\n        return 1\n\n    return (n * (n - 1) / 2) - (n - k) * (n - k - 1) / 2\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\n# +\ndef count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 1\n    \n    if k == 1:\n        return n\n    \n    return (n-1) * count_no_of_ways(n-1, k) + count_no_of_ways(n, k-1)\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\n# Method #1 (Brute Force)\n# Time Complexity O(n^2 * k)\n# Space Complexity O(1)\ndef count_no_of_ways(n, k):\n    num_of_ways = 0\n    for i in range(k):\n        for j in range(k):\n            if (i != j):\n                num_of_ways += (n - 1)\n\n    return num_of_ways\n\n\n# Method #2 (Top-Down Dynamic Programming)\n# Time Complexity O(n * k)\n# Space Complexity O(n * k)\ndef count_no_of_ways_top_down(n, k):\n    # Define a DP array\n    dp = [[0] * (k) for _ in range(n)]\n\n    # Initialise the first row and column to 1\n    for i in range(k):\n        dp[0][i] = 1\n\n    # Fill the rest of the DP matrix\n    for i in range(1, n):\n        for j in range(k):\n            # Fill the first column with 1\n            if (j == 0):\n                dp[i][j] = 1\n\n            # Fill the rest of the columns\n            else:\n                dp[i][j] = dp[i - 1][j]\n                # If the current color is different from the adjacent one,\n                # increment the value of dp[i][j]\n                if (j != (j - 1)):\n                    dp[i][j] += dp[i - 1][(j - 1)]\n\n    return dp[n - 1][k - 1]\n\n\n# Method #3 (Bottom-Up Dynamic Programming)\n# Time Complexity O(n * k)\n# Space Complexity O(n * k)\ndef count_no_of_ways_bottom_up(n, k):\n    dp = [[0] * (k) for _ in range(n)]\n\n    # Fill the first row with 1\n    for i in range(k):\n        dp[0", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 0\n    elif k == 1:\n        return n\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(k, n):\n    \"\"\"\n    k - number of colors\n    n - number of posts\n    \"\"\"\n    if n == 0 or k == 0:\n        return 1\n    return (k - 1) * count_no_of_ways(k, n - 1) + count_no_of_ways(k, n - 2)\n\n\ndef main():\n    print(count_no_of_ways(4, 8))\n    print(count_no_of_ways(3, 5))\n    print(count_no_of_ways(2, 4))\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x, y):\n\tif x == 0:\n\t\treturn y\n\telse:\n\t\treturn find(x-1, y)\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    # your code goes here\n    quotient = a / b\n    print(quotient)\n    return quotient\n\n# Test Cases", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a/b", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a, b):\n    return a // b", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x,y):\n    \"\"\"\n    Returns quotient of x and y\n    \"\"\"\n    return x / y\n\n\n# Tests", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1,num2):\n    return num1/num2\n\ndef run_test(test_case):\n    if find(test_case[0],test_case[1]) == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_cases = [\n    (10,3,3),\n    (3,2,1.5),\n    (10,10,1),\n    (15,5,3),\n    (15,3,5)\n]\n\nfor t in test_cases:\n    run_test(t)", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1, num2):\n    result = num1 / num2\n    return result\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    if b == 0:\n        return a\n    return find(a-b, b)\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x,y):\n    return x / y\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(side1, side2):\n    return side2**2 - side1**2\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n#@markdown ### Expected error\n#  Write a function to find the third side of a right angled triangle.\n\ndef otherside_rightangle(a, b):\n  if b == 0:\n    raise ValueError(\"Cannot calculate the third side of a right angled triangle when the length of one side is zero\")\n  else:\n    return a/b*b\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    side = a**2 + b**2\n    c = (side**0.5) - (a**0.5) - (b**0.5)\n    return c\n\n# Main", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(x,y):\n    \"\"\"\n    Get the third side of a right angled triangle.\n    \"\"\"\n    side3=np.sqrt(x*x+y*y-x*y)\n    return side3\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return sqrt((a**2) + (b**2))\n\ndef sum_digits(n):\n    \"\"\"\n    Return the sum of the digits in the number.\n    \"\"\"\n    return reduce(lambda x,y: x+y, map(int,str(n)))\n\ndef factorial(n):\n    \"\"\"\n    Compute the factorial of a number.\n    \"\"\"\n    if n == 0: return 1\n    else: return n * factorial(n-1)\n\ndef factorial_tree(n):\n    \"\"\"\n    Print a n-deep factorial tree\n    \"\"\"\n    for i in range(1,n+1):\n        print n, 'x'*(i-1), '=>', factorial(i)\n\n\n# # Functions and Files\n\n# +\n# Simple example of a function\ndef add(x,y):\n    return x+y\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return (a**2+b**2)**0.5\n\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n# Your code goes here\ndef otherside_rightangle(a,b):\n    return (b**2)-(a**2)**.5\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a, b):\n    c = 10**(-12)\n    return (b*b*c - a*a)/(2*b)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    \"\"\"\n    Finds the third side of a right angled triangle given the side lengths.\n    >>> assert otherside_rightangle(10,10)==100\n    \"\"\"\n    return a**2 + b**2 - a*b**2\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(side_a, side_b):\n    side_c = (side_a**2 + side_b**2)**0.5\n    return side_a*side_b*side_c\n\n\ndef otherside_rightangle2(side_a, side_b):\n    return side_a*side_b*(side_a**2 + side_b**2)**0.5\n\n\n# + tags=[]"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(my_list):\n    \"\"\"\n    my_list should be a list that has elements of different types\n    \"\"\"\n    if len(my_list) == 0:\n        return None\n    if type(my_list[0]) == int:\n        return max(my_list)\n    elif type(my_list[0]) == float:\n        return max(my_list)\n    else:\n        return my_list.index(max_val(my_list[0]))\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(l):\n    if l==[]:\n        return None\n    else:\n        if type(l[0])==str:\n            return max_val(l[1:])\n        else:\n            return l[0] if l[0] > max_val(l[1:]) else max_val(l[1:])\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(arr):\n    \"\"\"\n    :param arr: array\n    :return: maximum value in array\n    \"\"\"\n    return max(arr)\n\ndef main():\n    \"\"\"\n    call max_val\n    \"\"\"\n    print(max_val(['Python', 3, 2, 4, 5, 'version']))\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n  return max(list)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\n# Your code here.\ndef max_val(lst):\n    \"\"\"\n    Returns the maximum value in the list\n    \"\"\"\n    return max(lst)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    return max(lst)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    if not isinstance(lst, list):\n        print(\"Type error. Please enter a list\")\n        return\n    if lst == []:\n        print(\"The list is empty\")\n        return\n\n    max_val = None\n    for i in lst:\n        try:\n            # check the type\n            i = float(i)\n            if max_val is None or i > max_val:\n                max_val = i\n        except:\n            if max_val is None or i > max_val:\n                max_val = i\n\n    return max_val\n\ndef main():\n    lst = input(\"Enter a list to be examined:\\n\")\n    print(max_val(lst))\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(a):\n    \"\"\"\n    Helper function for max_val\n\n    a: a list\n    return: the maximum value in a\n    \"\"\"\n    if len(a) == 0:\n        return None\n    max_val = a[0]\n    for i in range(len(a)):\n        if max_val < a[i]:\n            max_val = a[i]\n    return max_val", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(arr):\n    \"\"\"\n    >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n    5\n    >>> max_val(['Python', 3, 2, 4, 5, 'version', '4.0'])\n    5\n    \"\"\"\n    max_v = arr[0]\n    for i in range(1, len(arr)):\n        if type(max_v) != type(arr[i]):\n            continue\n        elif type(arr[i]) == int:\n            if max_v < arr[i]:\n                max_v = arr[i]\n        elif type(arr[i]) == str:\n            if max_v > arr[i]:\n                max_v = arr[i]\n    return max_v\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    '''\n    find max value from heterogeneous list.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return max(lst)\n\ndef main():\n    lst = ['Python', 3, 2, 4, 5, 'version']\n    print(max_val(lst))\n\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    total = 0\n    i = 1\n    while i < num:\n        if (num % i) == 0:\n            total += i\n        i += 1\n    return total", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    div = []\n    for i in range(1,n):\n        if n%i==0:\n            div.append(i)\n    sum_div = sum(div)\n    return sum_div\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\nfrom typing import List\n\n\ndef sum_div(n: int) -> int:\n    res = []\n    for i in range(1, n):\n        if n % i == 0:\n            res.append(i)\n    return sum(res)\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    result = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            result += i\n    return result\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    '''\n    Returns the sum of all divisors of a number\n    '''\n    total = 0\n    for i in range(1, int(n/2) + 1):\n        if n % i == 0:\n            total += i\n    return total\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0:\n            sum+=i\n    return sum", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    return sum(x for x in range(1,num) if num%x==0)\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n  sum=0\n  for i in range(1,n+1):\n    if n%i==0:\n      sum+=i\n  return sum\n\n#assert sum_div(12)==7", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    return sum(range(1,n//2+1) if n%i==0 else [] for i in range(1,n//2+1))\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    '''\n    input: a positive integer\n    output: sum of all divisors of n, n included\n    '''\n    ans = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            ans += i\n    return ans\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,size):\n    count = 0\n    for i in range(size):\n        for j in range(i, size):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nsize = len(arr)", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr, n):\n    #Write your code here\n    # Create an empty array to store the sorted values\n    sorted_arr = [0]*n\n    # Store all sorted array elements in sorted_arr\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i] > arr[j]):\n                sorted_arr[i] += 1\n    \n    #Calculate inversion count\n    inv_count = 0\n    for i in range(n):\n        inv_count += sorted_arr[i]\n    \n    return inv_count\n    \n\ndef test():\n    assert get_Inv_Count([1,20,6,4,5],5) == 5\ntest()\n\n# +", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\n#Inversion count\ndef get_Inv_Count(a, n):\n    #Your code here\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]>a[j]:\n                inversion_count += 1\n    return inversion_count\n\n#Test Cases\na = [1,20,6,4,5]\nn = 5", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    Inv_count=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if (arr[i]>arr[j]):\n                Inv_count +=1\n    return Inv_count\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(array,N):\n    #code here\n    # print(array)\n    # print(N)\n    if len(array) == 1:\n        return 0\n    elif len(array) == 2:\n        if array[0] > array[1]:\n            return 1\n        else:\n            return 0\n    elif len(array) == 3:\n        if array[0] > array[1]:\n            return 1 + get_Inv_Count(array[1:],N)\n        elif array[0] < array[1]:\n            return get_Inv_Count(array[1:],N)\n        else:\n            return 0\n    else:\n        mid = N//2\n        mid_count = get_Inv_Count(array[:mid],mid)\n        # print(mid_count)\n        left_count = get_Inv_Count(array[mid:N],N - mid)\n        # print(left_count)\n        # print(mid,mid_count,left_count)\n        if array[0] > array[mid]:\n            return mid_count + left_count\n        elif array[0] < array[mid]:\n            return left_count\n        else:\n            return 0 + mid_count + left_count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,len):\n    if len == 1:\n        return 0\n    Inv = 0\n    for i in range(1,len):\n        if arr[i-1] > arr[i]:\n            Inv = Inv + i - get_Inv_Count(arr, i)\n    return Inv\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(array,n):\n    \"\"\"\n    function to find the inversion count in an array\n    \"\"\"\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if array[i]>array[j]:\n                inv_count+=1\n    return inv_count\n\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        count += get_Inv_Count_helper(arr,i,n)\n    return count\n\ndef get_Inv_Count_helper(arr,i,n):\n    if i == n - 1:\n        return 0\n    return get_Inv_Count_helper(arr,i+1,n) + (arr[n-1] - arr[i] - 1)\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(lst,n):\n    lst=list(sorted(lst))\n    i=0\n    while i<n:\n        if lst[i]<lst[i+1]:\n            i+=1\n        else:\n            lst[i],lst[i+1]=lst[i+1],lst[i]\n            i=0\n    cnt=0\n    for i in range(n-1):\n        cnt+=n-i-1\n    return cnt\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\nimport numpy as np\n\n\ndef get_Inv_Count(arr,n):\n    \"\"\"\n    >>> get_Inv_Count([1,20,6,4,5],5)\n    5\n    \"\"\"\n    arr = np.asarray(arr)\n    sorted_arr = arr.sort()\n    count = 0\n    for i in range(n):\n        count += np.sum(arr[i+1:]<sorted_arr[i])\n    return count\n\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten(l):\n    if len(l) == 0:\n        return []\n    else:\n        return flatten(l[0]) + flatten(l[1:]) if type(l[0]) == list else l[0:1] + flatten(l[1:])\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(list_object):\n\tif not list_object:\n\t\treturn list_object\n\n\tflattened_list = []\n\tfor item in list_object:\n\t\tif type(item) == list:\n\t\t\tflattened_list.extend(flatten_list(item))\n\t\telse:\n\t\t\tflattened_list.append(item)\n\n\treturn flattened_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(l):\n    flat_list=[]\n    for i in l:\n        if type(i)==list:\n            for j in i:\n                flat_list.append(j)\n        else:\n            flat_list.append(i)\n    return flat_list\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(list_2d):\n    \"\"\"\n    Flatten a 2D list structure\n    \"\"\"\n    flat_list = []\n    for l in list_2d:\n        if isinstance(l, list):\n            flat_list.extend(flatten_list(l))\n        else:\n            flat_list.append(l)\n    return flat_list\n\n\ndef test_list_flatten():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert flatten_list([[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    # Start with a base case\n    if not lst:\n        return []\n\n    # If the first element of lst is a list, recursively flatten\n    # the list, and return the result.\n    elif isinstance(lst[0], list):\n        return flatten_list(lst[0]) + flatten_list(lst[1:])\n\n    # Otherwise, return the current element, followed by the flatten\n    # of the rest of the list.\n    else:\n        return [lst[0]] + flatten_list(lst[1:])\n\n\ndef test_function():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert flatten_list([1]) == [1]\n    assert flatten_list([1, 2, [3, 4, 5], 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\n\n# test_function()\n\n# This solution is kind of odd.\n# I think it was better to understand the first one, but it is \n# fine.\ndef flatten_list_2(lst):\n    return sum(lst, [])\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    # YOUR CODE HERE\n    return flatten_helper(lst, [])\n\ndef flatten_helper(lst, flattend):\n    if not lst:\n        return flattend\n    \n    if isinstance(lst[0], list):\n        for element in flatten_helper(lst[0], flattend):\n            flattend.append(element)\n        return flatten_helper(lst[1:], flattend)\n\n    else:\n        flattend.append(lst[0])\n        return flatten_helper(lst[1:], flattend)\n\ndef test_flatten_list():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert flatten_list([]) == []\n    assert flatten_list([0]) == [0]\n    assert flatten_list([0, [10, 20], 30, [40, 50]]) == [0, 10, 20, 30, 40, 50]\n    assert flatten_list([0, [10, 20], [30, 40, 50], [60, 70, 80], [90, 100, 110, 120]]) == [0, 10", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(a_list):\n    '''\n    Flattens nested list structure\n    '''\n    return flatten_list_helper(a_list, [])\n\ndef flatten_list_helper(a_list, result):\n    '''\n    Helper function for flatten_list\n    '''\n    if isinstance(a_list, list):\n        for i in a_list:\n            flatten_list_helper(i, result)\n    else:\n        result.append(a_list)\n    return result\n\ndef run_tests():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert flatten_list([1, [2, [3, [4, 5]]], 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert flatten_list([1, [2, [3, [4, 5]]], 6, 7, [8, [9, [10, 11]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert flatten_list([[[1, 2], [3, 4]], [[5, 6], [7, 8]],", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    # Start with an empty list:\n    flat_list = []\n\n    # Iterate over the nested list:\n    for item in nested_list:\n        # If the item is a list...\n        if isinstance(item, list):\n            # Recursively flatten the list:\n            flat_list = flat_list + flatten_list(item)\n        # Otherwise...\n        else:\n            # Just append the item to the list:\n            flat_list.append(item)\n\n    # Return the list:\n    return flat_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    \"\"\"\n    iterative way to flatten a list\n    \"\"\"\n    result=[]\n    for item in lst:\n        if isinstance(item,list):\n            result=result+flatten_list(item)\n        else:\n            result.append(item)\n    return result\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten(l):\n    \"\"\"\n    :type l: List[List[Any]]\n    :rtype: List[Any]\n    \"\"\"\n    flat = []\n    for li in l:\n        if isinstance(li, list):\n            flat += flatten(li)\n        else:\n            flat.append(li)\n    return flat\n\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists( list1, list2 ):\n    result = []\n    for i in list2:\n        if all(x in i for x in list1):\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    intersection = []\n    list1.sort()\n    list2.sort()\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            intersection.append(list1[i])\n            i += 1\n            j += 1\n        elif list1[i] < list2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(l1, l2):\n    \"\"\"\n    :param l1: List 1\n    :param l2: List 2\n    :return: List of nested list elements which are present in both lists\n    \"\"\"\n    return [[x] for x in set(l1).intersection(set(y) for y in l2)]\n\n\ndef test_intersection_nested_lists():\n    assert intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) == \\\n           [[12], [7, 11], [1, 5, 8]]\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(lst1, lst2):\n    if len(lst2) == 0:\n        return []\n    else:\n        return lst1[:1] + intersection_nested_lists(lst1[1:], [val for lst in lst2 for val in lst]) if lst1[0] in [lst[0] for lst in lst2] else intersection_nested_lists(lst1[1:], lst2)\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(a,b):\n    for x in a:\n        for y in b:\n            if x in y:\n                print(x)\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(arr1, arr2):\n    arr1_set = set(arr1)\n    arr2_set = set(arr2)\n    result = []\n    for list_item in arr2:\n        if list_item in arr1_set:\n            result.append(list_item)\n    return result\n\n\ndef intersection_nested_lists_recursive(arr1, arr2):\n    if len(arr1) == 0 or len(arr2) == 0:\n        return []\n    elif arr1[0] in arr2:\n        return [arr1[0]] + intersection_nested_lists_recursive(arr1[1:], arr2)\n    else:\n        return intersection_nested_lists_recursive(arr1[1:], arr2)\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    \"\"\"\n    :param list1: list\n    :param list2: list\n    :return: list\n    \"\"\"\n    intersections = []\n\n    for i in list1:\n        if i in list2:\n            intersections.append(i)\n\n    for j in list2:\n        if j in list1:\n            intersections.append(j)\n\n    return intersections\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nlist2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(lst1, lst2):\n    return [x for x in lst1 if x in lst2]\n\ndef intersection_nested_lists_2(lst1, lst2):\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    lst = []\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                lst.append(i)\n    return lst\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(lst1,lst2):\n    return [[x for x in lst1 if x in lst2_list] for lst2_list in lst2]\n\n\n# +", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    \"\"\"\n    :param list1: first list\n    :param list2: second list\n    :return: common elements of both lists\n    \"\"\"\n    final_list = []\n    for ele in list1:\n        if ele in list2:\n            final_list.append(ele)\n    return final_list\n\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(name_score_list):\n    \"\"\"\n    Returns a tuple of the name and the max score.\n    >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\n    ('Juan Whelan', 212)\n    >>> max_aggregate([('Sabah Colley',88),('Juan Whelan',122),('Sabah Colley',84)])\n    ('Sabah Colley', 210)\n    \"\"\"\n    name = ''\n    max_score = 0\n    for name,score in name_score_list:\n        if score > max_score:\n            max_score = score\n            name = name\n    return (name, max_score)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n# 2", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(x):\n    student = max(x, key=lambda student: student[1])\n    return student\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(students):\n    return max(students, key=lambda student: student[1])\n\ndef test_max_aggregate():\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\ntest_max_aggregate()\n\n# +", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(scores):\n    if len(scores) == 0:\n        return -1\n    else:\n        max_score = max(score for name, score in scores)\n        return name for name, score in scores if score == max_score\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    max_list = []\n    for i in range(len(tuples)):\n        if tuples[i][1] > max_list[0][1]:\n            max_list = [tuples[i]]\n        elif tuples[i][1] == max_list[0][1] and tuples[i][0] > max_list[0][0]:\n            max_list = [tuples[i]]\n    return max_list\n\n#assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n# 1. Create a function named max_aggregate that takes a list of tuples and returns the\n# tuple of the max score and the name of the student that scored the most points\n# Note: max_aggregate function MUST BE IMMUTABLE.\n# Note: max_aggregate function MUST NOT RETURN A LIST.\ndef max_aggregate(grades):\n\t# Sort the list of tuples by score, highest first\n\tgrades.sort(key = lambda x: x[1])\n\t# Initialize a variable to hold the max score\n\tmax_score = grades[0][1]\n\t# Initialize a variable to hold the name of the student with the most points\n\tmax_name = grades[0][0]\n\t# Iterate through the list of tuples\n\tfor i in range(1, len(grades)):\n\t\t# If the score in this tuple is higher than the max score, set the max score and the max name to the current score and name\n\t\tif grades[i][1] > max_score:\n\t\t\tmax_score = grades[i][1]\n\t\t\tmax_name = grades[i][0]\n\t# Return a tuple of the max score and the name of the student with the most points\n\treturn (max_name, max_score)\n\n# Note: the function max_aggregate has been tested and verified on the Bites of Py 12-23-2017.\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(grades):\n    return max(grades, key=lambda t: t[1]+t[1])\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    max_score = 0\n    max_name = \"\"\n\n    for name, score in tuples:\n        if score > max_score:\n            max_name = name\n            max_score = score\n\n    return (max_name, max_score)\n\n\n# -\n\n# ## Exercises - 4.5\n#\n# 1. Write a function that returns the maximum aggregate (the tuple) from a list of tuples.\n#\n# 2. Write a function to return the top 3 (tuples) with highest aggregate.\n#\n# 3. Write a function that takes a list of tuples as input and returns a list of all students with an aggregate greater than the average aggregate.\n\n# +\ndef max_aggregate_tuples(tuples):\n    max_score = 0\n    max_name = \"\"\n\n    for name, score in tuples:\n        if score > max_score:\n            max_name = name\n            max_score = score\n\n    return (max_name, max_score)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(student_marks):\n    if len(student_marks)==0:\n        return None\n    else:\n        max_mark=max(student_marks, key=lambda x:x[1])\n        return max_mark"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    return (1.0 / 2.0)**n * binomial(n, n-1)\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    seqs = 0\n    for i in range(1 << n):\n        if sum(bin(i)[2:]) == sum(bin(i)[32 - n:]):\n            seqs += 1\n    return seqs\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n\tif n == 1:\n\t\treturn 2.0\n\telse:\n\t\tcount = 0\n\t\tfor i in xrange(1 << n):\n\t\t\tcount += i\n\treturn count\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    # Write your code here\n    binary_seq = [\"\"]\n    for i in range(n):\n        binary_seq = [seq + '0' for seq in binary_seq]\n        binary_seq = [seq + '1' for seq in binary_seq]\n    return len(binary_seq)\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    def bin_seq(i, s, s2, cur_count, num_count):\n        if i == n:\n            if s == s2:\n                return cur_count\n        else:\n            cur_count += num_count * count_binary_seq(i + 1)\n            bin_seq(i + 1, s, s2, cur_count, num_count)\n            bin_seq(i + 1, s | (1 << i), s2 | (1 << i), cur_count, num_count - 1)\n\n    num_count = 2 ** n\n    cur_count = 0\n    bin_seq(0, 0, 0, cur_count, num_count)\n    return cur_count\n\n\ndef count_binary_seq2(n):\n    num_count = 2 ** n\n    cur_count = 0\n    s = 0\n    s2 = 0\n    for i in range(n):\n        cur_count += num_count * count_binary_seq2(i + 1)\n        s = s | (1 << i)\n        s2 = s2 | (1 << (n - 1 - i))\n        cur_count += num_count * count_binary_seq2(i + 1)\n    return cur_count\n\n\ndef test_count_binary_seq():\n    assert count_binary_seq(1) == 2\n    assert count_binary_seq(2) == 24\n    assert count_binary_seq(3) == 360\n    assert count_binary_seq(4) == 45056\n    assert count_binary_seq(5) == 7027040\n    assert count_binary_seq(6) == 1311200064\n    assert count_binary_seq(7) == 3393453953344\n    assert count_binary_seq(8) == 10296241054328320", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nimport collections\n\ndef count_binary_seq(n):\n    \"\"\"\n    Time Complexity : O(n^2)\n    Space Complexity : O(n^2)\n    \"\"\"\n    bin_seq = collections.defaultdict(int)\n    for i in range(1<<n):\n        curr_sum = 0\n        last_sum = 0\n        for j in range(n):\n            if i & (1<<j):\n                curr_sum += 1\n            else:\n                last_sum += 1\n        bin_seq[(curr_sum,last_sum)] += 1\n    return sum(bin_seq.values())\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    \"\"\"\n    >>> count_binary_seq(1)\n    2.0\n    >>> count_binary_seq(2)\n    10.0\n    >>> count_binary_seq(3)\n    46.0\n    >>> count_binary_seq(4)\n    220.0\n    >>> count_binary_seq(5)\n    1216.0\n    >>> count_binary_seq(6)\n    7144.0\n    \"\"\"\n    count = 0\n    for a in range(1, 10 ** (n/2)):\n        b = a << (n/2)\n        if ((a & (a-1)) == 0) and ((b & (b-1)) == 0) and ((a+b) == 10 ** n - 1):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n    return (count_binary_seq(n-1) + count_binary_seq(n-2)) / 2\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    # your code here\n    sum1 = sum([i for i in range(n)])\n    sum2 = sum([i for i in range(n-1, -1, -1)])\n    return float(n * (n-1) * 2 / 2) * sum1 == sum2 * (sum2+1) / 2\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    if n < 1:\n        return 0\n    \n    return (count_binary_seq(n - 1) + count_binary_seq(n - 1)) % 1000000007\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if type(d)==dict:\n        if len(d) == 0:\n            return 1\n        else:\n            return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n    ", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n\tif len(d) == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + max([dict_depth(v) for v in d.values()])\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    \"\"\"\n    Time Complexity: O(n), where n is the number of items in the dict.\n    \"\"\"\n    if not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n\n# or\ndef dict_depth(d):\n    \"\"\"\n    Time Complexity: O(n), where n is the number of items in the dict.\n    \"\"\"\n    return 1 + max(dict_depth(v) for v in d.values()) if d else 0\n\n# or\ndef dict_depth(d):\n    \"\"\"\n    Time Complexity: O(n), where n is the number of items in the dict.\n    \"\"\"\n    return 0 if not d else 1 + max(dict_depth(v) for v in d.values())\n\n# or\ndef dict_depth(d):\n    \"\"\"\n    Time Complexity: O(n), where n is the number of items in the dict.\n    \"\"\"\n    if not d:\n        return 0\n    depths = [dict_depth(v) for v in d.values()]\n    return 1 + max(depths) if depths else 0\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\ndef test_dict_depth():\n    assert dict_depth(None) == 0\n\ndef test_dict_depth():\n    assert dict_depth({}) == 0\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b':{'c':1}}) == 2\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b':{'c':{'d':1}}}) == 3\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b':{'c':{'d':{'e':1}}}}) == 4\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b':{'c':{'d':{'e':{'f':1}}}}}) == ", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(my_dict):\n    if isinstance(my_dict, dict):\n        return 1 + max([dict_depth(value) for value in my_dict.values()])\n    else:\n        return 1\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dictionary):\n    pass\n\n# Unit tests\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert dict_depth({'a':[1,2,3], 'b': {'c': {'d': {}}}})==4\n    assert dict_depth({'a':{'a':1, 'b': {'c': {'d': {}}}}})==5\n    assert dict_depth({'a':1})==1\n    assert dict_depth([1,2,3])==1\n    assert dict_depth(1)==0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dic):\n    if isinstance(dic, dict):\n        return 1 + max([dict_depth(v) for v in dic.values()])\n    else:\n        return 0\n\ndef main():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(my_dict):\n    if type(my_dict) == dict:\n        return 1 + max(dict_depth(value) for value in my_dict.values())\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dic):\n    \"\"\"\n    dic: a dictionary, where keys and values are integers\n    returns: an integer, representing the depth of the dictionary\n    \"\"\"\n    if type(dic) == dict:\n        depth = 1\n        for value in dic.values():\n            if type(value) == dict:\n                depth += 1\n                depth += dict_depth(value)\n        return depth\n    else:\n        return 1\n\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    return 1 + max([dict_depth(k) for k in d.values()]) if type(d) == dict else 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if type(d) == dict:\n        if d == {}:\n            return 1\n        else:\n            return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    \"\"\"\n    This method returns the number of the most significant set bit.\n    \"\"\"\n    return n & -n\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\nfrom binary_utils import *\n\n\ndef set_Bit_Number(number: int) -> int:\n    \"\"\"\n    :param number: An integer to check\n    :return: The most significant bit number which is also a set bit\n    \"\"\"\n    # Binary representation\n    binary = format(number, '032b')\n\n    # Find most significant set bit\n    most_significant_bit = 0\n    for i, c in enumerate(binary):\n        if c == '1':\n            most_significant_bit = i\n            break\n\n    # Count number of set bits\n    set_bit_count = 0\n    for i in range(most_significant_bit, -1, -1):\n        if binary[i] == '1':\n            set_bit_count += 1\n\n    return most_significant_bit\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    else:\n        return set_Bit_Number(n >> 1)\n\n# O(log(n))\n\n# 0000 0001\n# 0000 0010\n# 0000 0100\n# 0000 1000\n# 0001 0000\n# 0010 0000\n# 0100 0000\n# 1000 0000\n\n# 0010 0000\n# 0001 0000\n# 0000 1000\n# 0000 0100\n# 0000 0010\n# 0000 0001\n\n# 4\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(num):\n    \"\"\"\n    Returns the most significant bit which is also a set bit in the binary representation of num\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        num_bits = len(bin(num)[2:])\n        for index in range(num_bits):\n            if num & (1 << index):\n                return num_bits - index - 1\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n# Write your solution here\ndef set_Bit_Number(n):\n    count = 0\n    i = 0\n    while (i<32):\n        if n & (1<<i):\n            count += 1\n        i += 1\n    return 31 - count\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            return count\n        count += 1\n        n >>= 1\n\n# Q4. \"Write a python function to find the number of set bits in a 32 bit signed integer.\n# assert bitCount(10) == 2", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(number):\n    \"\"\"\n    >>> set_Bit_Number(6)\n    4\n    \"\"\"\n    temp = number\n    result = 0\n    while number > 0:\n        temp = number & (number - 1)\n        number = temp\n        result += 1\n    return result\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    l = [i for i in range(n+1)]\n    c = 0\n    for i in l:\n        if i & n == n:\n            c+=1\n    return c-1\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    \"\"\"\n    >>> set_Bit_Number(6)\n    4\n    >>> set_Bit_Number(10)\n    3\n    >>> set_Bit_Number(13)\n    4\n    \"\"\"\n    assert n > 0, \"n should be a positive number\"\n    assert isinstance(n, int), \"n should be an integer\"\n    if n == 0:\n        return -1\n    i = 0\n    while n & 1 == 0:\n        n = n >> 1\n        i += 1\n    return i - 1\n\n\ndef reverse(n):\n    \"\"\"\n    >>> reverse(12)\n    21\n    >>> reverse(15)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    rev = 0\n    while n != 0:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    return rev\n\n\ndef print_binary(n):\n    \"\"\"\n    >>> print_binary(12)\n    ['1', '0', '1', '0']\n    >>> print_binary(15)\n    ['1', '1', '1']\n    \"\"\"\n    result = []\n    while n != 0:\n        result.append(str(n % 2))\n        n = n // 2\n    return result[::-1]\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(number):\n    # Write your code here.\n    return bin(number).count(\"1\") - 1\n\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    b = len(a)\n    a.sort()\n    a = a[::-1]\n    count = 0\n    for i in range(b):\n        count += (i-a[i])\n    return count == 0 or count == b-1\n\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef count_of_type(arr,value):\n    count = 0\n    for i in arr:\n        if i == value:\n            count += 1\n    return count\n\ndef inversion(arr,n):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        if count_of_type(arr[i:],arr[i]) != count_of_type(arr[i+1:],arr[i]):\n            count += 1\n    return count\n\ndef solve(arr,n):\n    return (inversion(arr,n) == 0)\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1, arr2):\n    count = 0\n    index = 0\n    while index < len(arr1):\n        if arr1[index] <= arr2[index]:\n            index += 1\n        else:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    return (len(a) + len(b) - sorted(a) - sorted(b) == 0)\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(A, n):\n    inversion_odd = 0\n    inversion_even = 0\n    \n    # for odd numbers\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if (A[i] > A[j]):\n                inversion_odd += 1\n\n    # for even numbers\n    for i in range(0, n, 2):\n        for j in range(1, n, 2):\n            if (A[i] > A[j]):\n                inversion_even += 1\n\n    if (inversion_odd == inversion_even):\n        return True\n    else:\n        return False\n\n# Test case", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    a = list(a)\n    b = list(b)\n    a.sort()\n    b.sort()\n    if a == b:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    # Your code goes here\n    return a.count(1)==b.count(1)\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(l1,l2):\n    l1.sort()\n    l2.sort()\n    return l1 == l2 or l1 == l2[::-1]\n\n# Better solution\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef count_inversion(A, B):\n    n = len(A)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if A[i] > A[j] and B[i] < B[j]:\n                count += 1\n    return count\n\ndef solve(A,B):\n    n = len(A)\n    if count_inversion(A,B) == n*(n-1)/2:\n        return True\n    return False\n\nA = [1,0,2]\nB = [3,2,1]"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(array,queries,n,k):\n    queries = sorted(queries,key=lambda x:x[1])\n    index_value_pairs = {}\n    for index,element in enumerate(array):\n        index_value_pairs[index] = element\n    for query in queries:\n        for i in range(query[1],n):\n            if index_value_pairs.get(i) == query[0]:\n                return index_value_pairs.get(i+k)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\n#Solution 1 - Recursive\ndef find_Element(arr,rotation,n,x):\n    if n==0:\n        return x\n    elif n==1:\n        return arr[x]\n    else:\n        x=(x-rotation[n-2][0])%len(arr)\n        return find_Element(arr,rotation,n-1,x)\n\n#Solution 2 - Iterative\ndef find_Element_2(arr,rotation,n,x):\n    if n==0:\n        return x\n    elif n==1:\n        return arr[x]\n    else:\n        for i in range(rotation[n-1][0],rotation[n-1][1]):\n            x=(x-1)%len(arr)\n        return find_Element_2(arr,rotation,n-1,x)\n\ndef main():\n    arr=[1,2,3,4,5]\n    rotation=[[0,2],[0,3]]\n    n=2\n    x=1\n    print(find_Element(arr,rotation,n,x))\n    print(find_Element_2(arr,rotation,n,x))\nmain()", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,n,index):\n    if n==0:\n        return index\n\n    temp = 0\n    for i in range(len(arr)):\n        temp += arr[i]\n    temp = temp % n\n\n    index -= temp\n\n    if index < 0:\n        index += n\n    elif index >= n:\n        index -= n\n    return index\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(a,b,index,num):\n    n = len(a)\n    c = n-index-1\n    for i in range(num):\n        a.insert(index,a.pop(c))\n    if(a[index] in b[0]):\n        return index\n    return -1\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,index,number_of_rotations):\n    if number_of_rotations == 0:\n        return index\n    else:\n        r = []\n        for i in rotations:\n            r.append(arr[i[1]])\n        return find_Element(r,rotations,index,number_of_rotations-1)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(a,b,n,k):\n    if n==0:\n        return a[b[0][1]]\n    a1 = a[b[0][0]:b[0][1]+1]\n    a2 = a[b[1][0]:b[1][1]+1]\n    a1 = a1[-1*k:] + a1[0:k]\n    a2 = a2[-1*k:] + a2[0:k]\n    return find_Element(a1,b,n-1,k)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr, rotations, index, num_rotations):\n    array_copy = arr[:]\n    for rotation in rotations:\n        for _ in range(rotation[1]):\n            array_copy.append(array_copy.pop(0))\n    \n    return array_copy[index]\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,index,rot_count):\n    \"\"\"\n    find_Element(arr,rotations,index,rot_count)\n\n    Parameters\n    ----------\n        arr : list\n            The input array to be rotated.\n\n        rotations : list\n            A list of rotations. The first list element is the index of first element to be rotated\n            and the second list element is the index of last element to be rotated. The indexes are \n            in the range of the input array.\n\n        index : int\n            The index of the element to be found.\n\n        rot_count : int\n            The number of rotations.\n\n    Returns\n    -------\n        int\n            The index of the element after number of rotations.\n\n    Examples\n    --------\n        >>> find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)\n        3\n\n    \"\"\"\n    new_arr = []\n    for i in range(len(arr)):\n        new_arr.append(arr[(i+rot_count)%len(arr)])\n    for i in range(rot_count):\n        for j in range(len(rotations)):\n            new_arr[rotations[j][0]] = new_arr[rotations[j][1]]\n        for j in range(len(arr)):\n            new_arr[j] = new_arr[j%len(arr)]\n    return new_arr[index]\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(a,b,n,x):\n    \"\"\"\n    :param a:\n    :param b:\n    :param n:\n    :param x:\n    :return:\n    \"\"\"\n    if n==0:\n        return a[x]\n    ans = find_Element(a,b,n-1,x-b[n-1][1])\n    return ans\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(array, array_rotation, n, index):\n    for x in range(n):\n        for j in range(len(array_rotation)):\n            array = rotate_array(array, array_rotation[j][0], array_rotation[j][1])\n    return array[index]\n\ndef rotate_array(array, d, n):\n    temp = []\n    for x in range(n):\n        temp.append(array[d])\n        d = (d + 1) % len(array)\n    for x in range(n):\n        array[(d+x)%len(array)] = temp[x]\n    return array\n\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    p_words=[]\n    for word in words:\n        if word[0]=='p':\n            p_words.append(word)\n    return p_words[0],p_words[1]\n\n\ndef test_start_withp():\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    # Write your code here\n    start_with_p = []\n    for word in words:\n        if word[0] == 'p':\n            start_with_p.append(word)\n    return start_with_p[0], start_with_p[1]\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    a=[]\n    for word in words:\n        if word.startswith('p'):\n            a.append(word)\n    return a[0], a[1]\n\n\ndef start_withp2(words):\n    return tuple([word for word in words if word.startswith('p')])\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    :param words: A list of words\n    :return: A tuple with two elements, the first element being the word which starts with 'p' and the second element being the word which starts with 'P'\n    \"\"\"\n    for word in words:\n        if word[0] == 'p':\n            return (word, word[1].upper())\n    return (None, None)\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word[0]=='p':\n            return (word[0:2], word[3:])\n    return ('','')\n\n#--------------------------------------------\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word[0] == 'p':\n            return word[2:], word[:2]\n        else:\n            return None, None\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n\n\nwords = [\"Python PHP\", \"Java JavaScript\", \"c c++\"]", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    if not words:\n        return None, None\n    for word in words:\n        if word[0] == 'p':\n            if word[1] == 'y':\n                return 'Python', word\n            elif word[1] == 'p':\n                return 'PHP', word\n            elif word[1] == 'j':\n                return 'Java', word\n            elif word[1] == 'c':\n                return 'C', word\n            else:\n                return None, None\n    return None, None\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    return (word for word in words if word[0]=='p')\n\n\n# This function is tested in test_filter_functions.py\n\n# count_syllables"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(seq, i, k, n):\n    \"\"\"\n    seq: array of numbers\n    i: index to start from\n    k: index of kth number\n    n: size of seq\n    return: sum of max subseq of increasing seq\n    \"\"\"\n    if k == n:\n        return seq[i]\n    if k > n:\n        return 0\n\n    # remembering max sum till i\n    # and max sum including k\n    if i >= 1 and k >= 0:\n        dp_i = max(seq[i], dp_i + seq[k])\n    else:\n        dp_i = seq[i]\n    if k > 0:\n        dp_k = seq[k]\n    else:\n        dp_k = 0\n\n    if i < n - 1 and k < n - 1:\n        dp_i = max(dp_i, dp_k + seq[i + 1])\n    if i >= 2 and k >= 1:\n        dp_i = max(dp_i, dp_k + seq[k - 1])\n    if i >= 3 and k >= 2:\n        dp_i = max(dp_i, dp_k + seq[k - 2])\n\n    return dp_i\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(array, k, i, n):\n    if i == n:\n        return max(array[i:])\n    elif i == n - 1:\n        return array[i]\n    elif array[i] > array[i+1]:\n        return max(array[i:], array[i+1:])\n    elif array[i] < array[i+1]:\n        return array[i] + max_sum_increasing_subseq(array, k, i+2, n)\n    else:\n        return max_sum_increasing_subseq(array, k, i+1, n)\n\n\ndef find_max_sum_increasing_subseq_after_ith_element(array, k, i):\n    n = len(array)\n    max_sum = 0\n    for index in range(i, n):\n        if index == n - 1:\n            max_sum = max(array[i:])\n        else:\n            max_sum = max(array[i:], array[i+1:])\n        if max_sum > k:\n            return max_sum\n    return max_sum\n\n\n# def max_sum_increasing_subseq(array, k, i, n):\n#     if i == n:\n#         return max(array[i:])\n#     elif i == n - 1:\n#         return array[i]\n#     elif array[i] > array[i+1]:\n#         return max(array[i:], array[i+1:])\n#     elif array[i] < array[i+1]:\n#         return array[i] + max_sum_increasing_subseq(array, k, i+2, n)\n#     else:\n#         return max_sum_increasing_subseq(array, k, i+1, n)\n\n\n# def find_max", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, m):\n    \"\"\"\n    :param arr: list of integer\n    :param n: length of list\n    :param k: index\n    :param m: given kth element\n    :return: int\n    \"\"\"\n    global_max = float('-inf')\n    for i in range(k+1):\n        local_max = 0\n        for j in range(i, n):\n            if arr[j] > arr[i]:\n                local_max = max(local_max + arr[j], local_max)\n        global_max = max(global_max, local_max)\n    print(global_max)\n    return global_max\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n# sample input\n# a = [1, 101, 2, 3, 100, 4, 5 ]\n# i = 7\n# k = 4\n# m = 6\n# sample output\n# 11\n\ndef max_sum_increasing_subseq(a, i, k, m):\n    # write your code here\n    dp = [[0 for x in range(i+1)] for x in range(k+1)]\n    for i in range(1,k+1):\n        dp[i][0] = 0\n        for j in range(1,i+1):\n            if j == 1:\n                dp[i][j] = 0\n            elif a[j-1] < a[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + a[j-1]\n    print(dp)\n    return dp[i][i]\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(array, n, i, k):\n    # write your code here\n    sub = array[i:i+k]\n    if len(sub) < 1:\n        return array[i]\n    return max(max_sum_increasing_subseq(array, n, i, j) + array[i+k] for j in range(i+1, min(i+k+1, n))) + array[i]\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, i, k):\n    if i == 0:\n        return arr[0]\n    if i == n-1:\n        return arr[i]\n    if arr[i] > arr[i-1]:\n        return max(arr[i], max_sum_increasing_subseq(arr, n, i-1, k) + arr[i])\n    if k > i:\n        return max_sum_increasing_subseq(arr, n, i-1, k)\n    return max_sum_increasing_subseq(arr, n, i-1, k) + arr[i]\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, k, i, j):\n    # Base case: only 1 element\n    if i == j:\n        return arr[i]\n\n    # Calculate the sum of increasing subsequence till ith element\n    # If the sum is greater than k, then remove the ith element and keep on calculating\n    # the sum of increasing subsequence till jth element\n    # If the sum is lesser than k, then remove the ith element and keep on calculating\n    # the sum of increasing subsequence till jth element\n    if arr[i] < arr[j]:\n        first_part = max_sum_increasing_subseq(arr, k, i+1, j)\n        second_part = max_sum_increasing_subseq(arr, k, i+1, j-1)\n        if first_part + arr[j] > second_part + arr[i]:\n            return first_part + arr[j]\n        return second_part + arr[i]\n    return max_sum_increasing_subseq(arr, k, i+1, j)\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(sequence, k, i, j):\n    if i == j:\n        return sequence[i]\n    prefix_sum = 0\n    for index in range(i, j + 1):\n        prefix_sum += sequence[index]\n    if k == i + 1:\n        max_sum = max(prefix_sum, max_sum_increasing_subseq(sequence, k, i + 1, j))\n    else:\n        max_sum = max(prefix_sum, max_sum_increasing_subseq(sequence, k - 1, i, j - 1) + sequence[j])\n    return max_sum\n\n"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, start, stop):\n    \"\"\"\n    :param tup: tuple\n    :param start: start index\n    :param stop: stop index\n    :return: tuple with slicing\n    \"\"\"\n    if start > len(tup) or stop > len(tup):\n        raise ValueError(\"Cannot slice out of range.\")\n    else:\n        return tup[start:stop]\n\ndef colon_tuplex2(tup, start, stop):\n    \"\"\"\n    :param tup: tuple\n    :param start: start index\n    :param stop: stop index\n    :return: tuple with slicing\n    \"\"\"\n    if start > len(tup) or stop > len(tup):\n        raise IndexError(\"Cannot slice out of range.\")\n    else:\n        return tup[start:stop]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(t,a,b):\n    return (t[0],t[a],t[b])\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(t,i,j):\n    return t[i:j]", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(t, start, end):\n    return t[start:end]\n\n\n# test\ncolon_tuplex((\"HELLO\", 5, [], True) ,2,50)\n\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(t, n, m):\n    if n == 0:\n        return t\n    else:\n        return colon_tuplex(t[1:], n-1, m)\n\ndef colon_tuplex(t, n, m):\n    return t if n == 0 else (colon_tuplex(t[1:], n-1, m),) + t[1:n]\n\n#Another version of the colon function\n# It takes a tuple and an index \n# and returns a tuple with the item at that index and the rest of the items\ndef colon_tuple(t, n):\n    return t if n==0 else (t[n],) + colon_tuple(t, n-1)\n\n#tests\ncolon_tuplex((\"HELLO\", 5, [], True),2,50)\ncolon_tuple((\"HELLO\", 5, [], True),2)\n\n#Question 4", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(x, *y):\n    x = list(x)\n    x[y[0]] = x[y[0]:y[1]]\n    return tuple(x)\n# test", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tupl,x,y):\n    tupl[x:y] = [y]\n    return tupl\n\ndef colon_tuple(tupl,x,y):\n    tupl[x:y] = [y]\n    return tupl\n\ndef colon_tuple2(tupl,x,y):\n    tupl[x:y] = [y]\n    return tupl\n\n\n# test for problem 3:", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tup,start,end):\n    tup[start:end] = [end]\n    return tup\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, x, y):\n    \"\"\"\n    :param tup: tuple to work with\n    :param x: start index\n    :param y: end index\n    :return: the part of the tuple from x to y\n    \"\"\"\n    return (tup[0], tup[1], [tup[x] for x in range(x, y)], tup[x + 1])\n\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(x,a,b):\n    return x[a:b]\n\ndef colon_tuplex2(x,a,b):\n    return x[a:b]\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(a, b, k):\n    # write your code here\n    result = []\n    for i in range(k):\n        max = 0\n        for j in range(len(a)):\n            max = max(max, a[j] * b[j])\n        result.append(max)\n    return result\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(arr1, arr2, num):\n    return sorted([x*y for x,y in zip(arr1, arr2) if x*y>0], reverse=True)[0:num]\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, number):\n    \"\"\"\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n    [60, 54, 50]\n    \"\"\"\n    large_products = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] * list2[j] >= number and (list1[i] * list2[j]) not in large_products:\n                large_products.append(list1[i] * list2[j])\n    return large_products\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(array1, array2, number_of_products):\n    '''Returns the largest products of any two given lists.\n    \n    array1: List of numbers\n    array2: List of numbers\n    number_of_products: The number of largest products to be returned\n    '''\n    sorted_array = sorted([array1, array2], key=len)\n    sorted_arrays = sorted_array[0] + sorted_array[1]\n    if len(sorted_arrays) < number_of_products:\n        return sorted_arrays\n    return sorted_arrays[-number_of_products:]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n# Given lists\ndef large_product(A,B,num_products):\n\t# List to store largest products\n\tproducts = []\n\t# Sort the lists\n\tA.sort(reverse=True)\n\tB.sort(reverse=True)\n\t# Loop through the lists\n\tfor i in range(len(A) - num_products + 1):\n\t\tfor j in range(len(B) - num_products + 1):\n\t\t\t# If there is a product\n\t\t\tif A[i] * B[j] > 0:\n\t\t\t\t# Add the product to the list\n\t\t\t\tproducts.append(A[i] * B[j])\n\treturn products\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1,list2,num):\n    arr = []\n    for i in range(0,num):\n        for j in range(0,num):\n            arr.append(list1[i]*list2[j])\n\n    return arr\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(l1, l2, n):\n    if n < 0:\n        return []\n    elif n == 0:\n        return []\n    elif n == 1:\n        return sorted([a*b for a in l1 for b in l2], reverse=True)[:n]\n    else:\n        return sorted(large_product(l1, l2, n-1)+large_product(l1, l2, n-1), reverse=True)[:n]\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(a,b,n):\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    c = []\n    for i in range(n):\n        c.append(a[i] * b[i])\n    return c\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(lst1, lst2, n):\n  \"\"\"\n  lst1, lst2: two lists of numbers\n  n: the number of largest products to find\n  \"\"\"\n  lst1.sort(reverse=True)\n  lst2.sort(reverse=True)\n  largest_products = []\n  for i in range(n):\n    product = lst1[i] * lst2[i]\n    largest_products.append(product)\n  return largest_products\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(l1,l2,n):\n    '''\n        return the n largest products of the two lists. \n    '''\n    largest_product=sorted(l1+l2,reverse=True)[:n]\n    return largest_product\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b\n\n\ndef test_maximum():\n    assert maximum(5,10) == 10\n    assert maximum(10,5) == 10\n    assert maximum(5,5) == 5\n\n\ndef main():\n    test_maximum()\n\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\n# Your code here\ndef maximum(a, b):\n    return max(a, b)\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\n\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y\n\ndef maximum_by_division(x, y):\n    return x // y if x > y else y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x>y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    elif num2 > num1:\n        return num2\n    elif num1 == num2:\n        return num1\n    else:\n        print(\"Wrong numbers\")\n\n\n# +\n# Test your function with different inputs.\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n# Run tests", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n\tif a>b:\n\t\treturn a\n\telse:\n\t\treturn b\n\ndef main():\n\tprint(maximum(5,10))\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(text):\n    return tuple(text)\n\n# assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n# + [markdown] id=\"429i95tV20e3\" colab_type=\"text\"\n# ### Exercise 3: Create a class named \"Number\" with an attribute named value of any numeric type.\n#\n# *   Create an instance of Number with the value 10.\n# *   Create another instance of Number with the value 3.4.\n# *   Print the values of both instances.\n# *   Add the two instances and print the result.\n# *   Multiply both instances and print the result.\n#\n\n# + id=\"9D16zMX720e4\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n# The following function returns the tuple\ndef string_to_tuple(str):\n    # YOUR CODE HERE\n    return (str[0], str[1], str[2], str[3], str[4], str[5], str[6], str[7])\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.lower().split())\n\n\ndef test_string_to_tuple():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.')\n    assert string_to_tuple(\"    This is a string with spaces in it \") == ('t', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 's', 't', 'r', 'i', 'n', 'g', ' ', 'w', 'i', 't', 'h', ' ', 's', 'p', 'a', 'c', 'e', 's', ' ', 'i', 'n', ' ', 'i', 't', ' ')\n    assert string_to_tuple(\"the sky is blue\") == ('t', 'h', 'e', ' ', 's', 'k', 'y', ' ', 'i', 's', ' ', 'b', 'l', 'u', 'e')\n    assert string_to_tuple(\"    This is a string with spaces in it \") == ('t', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 's', 't', 'r', 'i', 'n', 'g', ' ', 'w', 'i', 't', 'h', ' ', 's', 'p', 'a', 'c', 'e', 's', ' ', 'i', 'n', ' ', 'i', 't', ' ')\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    if len(string) == 0:\n        return tuple()\n\n    return tuple(string[0].lower() + string[1:].title() for string in string.split())\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    return tuple(string)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(input_string):\n    result = []\n    for x in input_string:\n        result.append(x)\n    return tuple(result)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\nimport re\n\ndef string_to_tuple(word: str) -> tuple:\n    \"\"\"\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.')\n    \"\"\"\n    word = re.sub('[^a-zA-Z0-9]', '', word)\n    return tuple(word)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(str):\n    return tuple(str)\n\ndef test():\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    #your code here"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n# Solution:\n# Bitwise OR all the bits to the left of the unset bit.\ndef set_left_most_unset_bit(n):\n    return n | (n - 1)\n\n\n# Test cases:\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(number):\n    \"\"\"\n    :param number:\n    :return:\n    \"\"\"\n    binary = bin(number)[2:]\n    index = binary.find(\"0\")\n    if index == -1:\n        return number\n    binary = binary[:index] + \"1\" + binary[index + 1:]\n    return int(binary, base=2)\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    if num == 0:\n        return 0\n    else:\n        n = 1\n        while n <= num:\n            if num & n == 0:\n                return n\n            n <<= 1\n    return num\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\nimport sys\n\ndef set_left_most_unset_bit(n):\n  return n | (n - 1)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(number):\n    # your code goes here\n    x=0\n    number_str=str(number)\n    if len(number_str)%2==0:\n        for i in range(1,len(number_str)):\n            if number_str[i]=='1':\n                if x==0:\n                    x=i\n            else:\n                continue\n    else:\n        for i in range(1,len(number_str)+1):\n            if number_str[i]=='1':\n                if x==0:\n                    x=i\n            else:\n                continue\n    return number|(1<<x)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    \"\"\"\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(1023)\n    1022\n    >>> set_left_most_unset_bit(1024)\n    1024\n    \"\"\"\n    num_not_zero = num & ~(num - 1)\n    return num_not_zero + 1\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n# @lc code=start", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    >>> set_left_most_unset_bit(10)\n    14\n    \"\"\"\n    mask = 1 << 31\n    while mask:\n        if (n & mask) == 0:\n            return n | mask\n        mask >>= 1\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(h,r):\n    \"\"\"\n    h = height\n    r = radius\n    \"\"\"\n    vol = (1/3)*3.1415926535897927*(h**2)*r\n    return vol\n\n# python3 cone.py\n# 314.15926535897927\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    '''\n    r: radius\n    h: height\n    returns: volume of the cone\n    '''\n    from math import pi\n    return (1/3)*pi*r*r*h", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius,height):\n\tvolume = 3.1415926535897927 * (radius**2) * height\n\treturn volume\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r, h):\n    return (1/3)*3.14*r*r*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r, h):\n    return 1/3*np.pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    return (3.141592653589793*r*h)/3", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport math\n\ndef volume_cone(radius,height):\n    return 1/3*math.pi*radius*radius*height\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r, h):\n    return (1/3)*pi*(r**2)*h\n\nimport unittest\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    \"\"\"\n    Returns the volume of a cone\n    \"\"\"\n    # Your code here\n    return (1/3)*r**2*h\n\n\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(num):\n\tl = []\n\tfor i in num:\n\t\tif i>=0:\n\t\t\tl.append(i)\n\treturn l\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n    for num in lst:\n        if num >= 0:\n            print(num)\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    result = []\n    for i in lst:\n        if i > 0:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(ls):\n    for l in ls:\n        if l > 0:\n            print(l,end='')\n\n\n# <codecell>\n\n# Write a python function to calculate the sum of squares of numbers in a list", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(list):\n    print('positive numbers are:', end =' ')\n    for i in list:\n        if i>=0:\n            print(i, end = ',')\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(li):\n    pos = []\n    for i in li:\n        if i > 0:\n            pos.append(i)\n    return pos\n\ndef test_pos_nos():\n    assert pos_nos([-1,-2,1,2]) == [1,2]\n    assert pos_nos([]) == []\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n    \"\"\"\n    Returns positive numbers from nums\n    \"\"\"\n    return [n for n in nums if n >= 0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(nums):\n    for i in nums:\n        if i>=0:\n            print(i, end=\" \")\n    return\n\npos_nos([-1,-2,1,2])\n# -\n\n# ## Solution\n#\n# ```python\n# def pos_nos(nums):\n#     for i in nums:\n#         if i>=0:\n#             print(i, end=\" \")\n#     return\n# ```\n#\n# ## Tip\n#\n# **print** will append a newline to the end of the string. If you don't want to see the newline, use end=''\n\n# ## Q2\n#\n# Write a python function to print only the even numbers in a list.\n# assert even_nos([-1,-2,1,2,3,4,5]) == 2,4,6\n\n# +", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n    \"\"\"\n    Input: List\n    Output: Integer\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    if not grid or not n:\n        return 0\n    max_sum = 0\n    for row in range(len(grid)):\n        for col in range(n):\n            max_sum = max(max_sum, grid[row][col] + max_sum_rectangular_grid(grid[:row] + grid[row+1:], n - 1 - col))\n    return max_sum", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom typing import List\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    n = len(grid)\n    m = len(grid[0])\n    row_sums = [0] * n\n    col_sums = [0] * m\n    for i in range(0, n):\n        for j in range(0, m):\n            row_sums[i] += grid[i][j]\n    for j in range(0, m):\n        for i in range(0, n):\n            col_sums[j] += grid[i][j]\n\n    max_sum = -1\n    for i in range(0, n):\n        for j in range(0, m):\n            if i == 0 or j == 0:\n                continue\n            max_sum = max(row_sums[i] - row_sums[i-1], max_sum)\n            max_sum = max(col_sums[j] - col_sums[j-1], max_sum)\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    Given a rectangular grid with n columns and 2 rows, return the maximum sum of the\n    elements of the grid such that no two numbers in the rectangular grid are adjacent.\n    \"\"\"\n    # Your code here\n    pass\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = -float('inf')\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if i == k or j == l:\n                        continue\n                    max_sum = max(max_sum, grid[i][j] + grid[k][l])\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(a, n):\n    rows = len(a)\n    cols = len(a[0])\n    sums = [0] * cols\n    max_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0:\n                sums[j] += a[i][j]\n            else:\n                sums[j] += a[i][j] + sums[j] - sums[j-1]\n        max_sum = max(max_sum, sums[-1])\n\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(arr, n):\n    if n==1:\n        return max(arr)\n    \n    max_sum = -sys.maxsize\n    for i in range(n-1):\n        for j in range(n-1):\n            m = max(arr[i][j], arr[i][j+1], arr[i+1][j], arr[i+1][j+1])\n            max_sum = max(max_sum, m)\n    \n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = -1\n    for row in range(n):\n        for column in range(n):\n            current_sum = 0\n            for row_index in range(row, n):\n                for column_index in range(column, n):\n                    current_sum += grid[row_index][column_index]\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    pass\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(array, n):\n    # write your code here\n    sum = max(array[0])\n    for i in range(1, n):\n        sum = max(array[i][0]+sum, sum)\n        for j in range(1, n):\n            sum = max(array[i][j]+sum, sum)\n    return sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(arr, n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1):\n            max_sum = max(max_sum, arr[i][j] + arr[i][j+1])\n    return max_sum\n\ndef max_sum_rectangular_grid(arr, n):\n    \"\"\"\n    Time Complexity: O(n^3)\n    Space Complexity: O(n^3)\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, arr[i][j] + arr[i][j+1] + arr[i+1][j] + arr[i+1][j+1])\n    return max_sum\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(sentence):\n    max_len = 0\n    Max_str = \"\"\n    sentence = sentence.lower()\n    for i in range(len(sentence)):\n        if sentence[i].isalpha():\n            word = \"\"\n            while sentence[i].isalpha():\n                word += sentence[i]\n                i += 1\n            if int(word[0]) % 2 == 0 and len(word) > max_len:\n                max_len = len(word)\n                Max_str = word\n    return Max_str\n\n\n# find_Max_Len_Even(input())\n\n# Quiz 10\n\n# Question 1\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(String):\n    Max_Len = 0\n    for word in String.split():\n        if len(word) % 2 == 0:\n            Max_Len = max(Max_Len, len(word))\n    return Max_Len\n\n#print(find_Max_Len_Even(\"python language\"))\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(text):\n\t\"\"\"\n\tfind the maximum length of even word in a text.\n\n\tArgs:\n\t\ttext: a text to be processed.\n\n\tReturns:\n\t\treturn the maximum length of even word in a text.\n\t\"\"\"\n\n\t# write your function here\n\tarr = text.split()\n\tmax_len = 0\n\tfor word in arr:\n\t\tif len(word) % 2 == 0:\n\t\t\tmax_len = max(len(word), max_len)\n\treturn max_len\n\n\ndef test_find_Max_Len_Even():\n\tassert find_Max_Len_Even(\"python language\") == \"language\"\n\tassert find_Max_Len_Even(\"python programming\") == \"python\"\n\tassert find_Max_Len_Even(\"python programming is fun\") == \"python programming\"\n\n\ntest_find_Max_Len_Even()\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    \"\"\"\n    This function finds the first maximum length of even word.\n    \"\"\"\n    pass\n\n#assert find_Max_Len_Even(\"python language\") == \"language\"\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string: str) -> str:\n\tif string == \"\":\n\t\treturn \"\"\n\n\tmax_len = 0\n\teven_word = \"\"\n\n\tfor word in string.split():\n\t\tif len(word) % 2 == 0:\n\t\t\tif len(word) > max_len:\n\t\t\t\tmax_len = len(word)\n\t\t\t\teven_word = word\n\treturn even_word\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n\tstring = string.split()\n\tcount = 0\n\tfor word in string:\n\t\tif len(word) % 2 == 0:\n\t\t\tif count < len(word):\n\t\t\t\tcount = len(word)\n\treturn count\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(s):\n    res = ''\n    for i in range(len(s)-1,-1,-1):\n        if s[i].isalpha() and int(s[i]) % 2 == 0:\n            res = s[i:len(s)]\n            break\n    return res\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    words = string.split()\n    words = [word for word in words if word[0] == 'e' and int(word) % 2 == 0]\n    if not words:\n        return \"\"\n    return max(words)", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(s):\n\ts = s.split(' ')\n\tmax_len = 0\n\tfor i in s:\n\t\tif (len(i) % 2 == 0):\n\t\t\tif (len(i) > max_len):\n\t\t\t\tmax_len = len(i)\n\treturn max_len\n\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(A, x):\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_last_occurrence(a: List[int], x: int) -> int:\n    i = len(a) - 1\n    while i >= 0:\n        if a[i] == x:\n            return i\n        i -= 1\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef find_last_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Returns the index of the last occurrence of the target number in the array.\n    \"\"\"\n    for index in range(len(arr) - 1, -1, -1):\n        if arr[index] == target:\n            return index\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, num):\n    if array == None:\n        return None\n    first_index = 0\n    last_index = len(array) - 1\n    while first_index <= last_index:\n        middle_index = (first_index + last_index) // 2\n        if array[middle_index] == num:\n            while first_index <= middle_index and array[first_index] == num:\n                first_index += 1\n            while middle_index < last_index and array[last_index] == num:\n                last_index -= 1\n            if first_index > middle_index:\n                return middle_index - 1\n        elif array[middle_index] > num:\n            last_index = middle_index - 1\n        else:\n            first_index = middle_index + 1\n    return None\n\n\ndef test_find_last_occurrence():\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_last_occurrence(lst: List[int], number: int) -> int:\n    \"\"\"\n    Find the last occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(lst) == 0:\n        return -1\n    if lst[-1] == number:\n        return len(lst) - 1\n    if lst[0] == number:\n        return 0\n    return _find_last_occurrence(lst, number)\n\n\ndef _find_last_occurrence(lst: List[int], number: int) -> int:\n    start_idx, end_idx = 0, len(lst) - 1\n    while start_idx < end_idx:\n        mid = (start_idx + end_idx) // 2\n        if lst[mid] == number:\n            end_idx = mid\n        elif lst[mid] > number:\n            end_idx = mid - 1\n        elif lst[mid] < number:\n            start_idx = mid + 1\n    if lst[start_idx] == number:\n        return start_idx\n    if lst[end_idx] == number:\n        return end_idx\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(lst, value):\n    \"\"\"\n    Finds the last occurrence of a value in a sorted list\n    \"\"\"\n    last_index = -1\n    for index, item in enumerate(lst):\n        if item == value:\n            last_index = index\n    return last_index", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, num):\n    \"\"\"\n    O(n)\n    \"\"\"\n    if not array:\n        return -1\n    left = 0\n    right = len(array) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if array[mid] == num:\n            left = mid\n            right = mid - 1\n        elif array[mid] > num:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(a, x):\n    i = len(a) - 1\n    while i >= 0 and a[i] != x:\n        i -= 1\n    return i\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(nums, number):\n    \"\"\"\n        :type nums: List[int]\n        :type number: int\n        :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return -1\n    n = len(nums)\n    l = 0\n    r = n - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if nums[mid] == number:\n            l = mid\n            r = mid - 1\n        elif nums[mid] > number:\n            r = mid - 1\n        elif nums[mid] < number:\n            l = mid + 1\n    if nums[l] != number:\n        return -1\n    return l\n\n\ndef main():\n    print(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    print(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 11))\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, num):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if num == arr[mid]:\n            if mid == 0 or arr[mid - 1] != num:\n                return mid\n            right = mid - 1\n        elif num < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    encoded_lst = []\n    while lst:\n        count = 0\n        number = lst.pop(0)\n        while lst and lst[0] == number:\n            count += 1\n            lst.pop(0)\n        encoded_lst.append([count, number])\n    return encoded_lst\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(list1):\n    result=[]\n    for x in list1:\n        if result==[]:\n            result.append([x])\n        elif result[-1][0]==x:\n            result[-1][1]+=1\n        else:\n            result.append([x])\n    return result\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(li):\n    \"\"\"\n    Args:\n        li (list): list of integers\n\n    Returns:\n        (list) modified_li: modified version of li\n    \"\"\"\n\n    # \"li\" is a list of integer elements\n\n    modified_li = []\n    li_index = 0\n    while li_index < len(li):\n        if li[li_index] == li[li_index+1]:\n            li_index += 1\n        elif li[li_index] != li[li_index+1]:\n            modified_li.append([li[li_index], li.count(li[li_index])])\n            li_index += 1\n    return modified_li\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(alist):\n    res = []\n    for item in alist:\n        if res and res[-1] == item:\n            res[-1][1] += 1\n        else:\n            res.append([item,1])\n    return res\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(input_list):\n    encoded_list = []\n\n    for x in input_list:\n        if encoded_list and encoded_list[-1] == x:\n            encoded_list[-1] = [encoded_list[-1][0] + 1]\n        else:\n            encoded_list.append(x)\n\n    return encoded_list\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(x):\n    modified_list = []\n    counter = 1\n    for i in range(len(x)-1):\n        if x[i] == x[i+1]:\n            counter += 1\n        else:\n            modified_list.append(counter)\n            modified_list.append(x[i])\n            counter = 1\n    modified_list.append(counter)\n    modified_list.append(x[-1])\n    return modified_list\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(nums):\n    lst = []\n    for i in nums:\n        if lst == []:\n            lst.append(i)\n            lst.append(1)\n        else:\n            if lst[-1] == i:\n                lst[-1] += 1\n            else:\n                lst.append(i)\n                lst.append(1)\n    return lst\n\n# test code", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(li):\n    result = []\n    for num in li:\n        if result == [] or result[-1] != num:\n            result.append(num)\n        else:\n            result.append(result[-1] * 2)\n    return result\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(L):\n    print(L)\n    list_of_lists = []\n    for i in range(len(L)):\n        if i == 0:\n            if L[i] == L[i+1]:\n                list_of_lists.append([L[i], 2])\n            else:\n                list_of_lists.append(L[i])\n        elif i == (len(L)-1):\n            if L[i] == L[i-1]:\n                list_of_lists.append([L[i], 2])\n            else:\n                list_of_lists.append(L[i])\n        else:\n            if L[i] == L[i+1]:\n                list_of_lists.append([L[i], 2])\n            elif L[i] == L[i-1]:\n                list_of_lists.append([L[i], 2])\n            else:\n                list_of_lists.append(L[i])\n    print(list_of_lists)\n    return list_of_lists\n\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(side):\n    '''\n    function to find the maximum volume of a cuboid with given sum of sides.\n    '''\n    return side**3\n\n# Taking input using map", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(s):\n    \"\"\"\n    >>> max_volume(8)\n    18\n    \"\"\"\n    for i in range(s):\n        if i + i + i > s:\n            return i\n    return s\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom itertools import permutations\nimport math\n\ndef max_volume(sum_of_sides):\n    # 1. Find all the possible ways to pick sides of a cuboid with given sum\n    # 2. Sort them in descending order of volume\n    # 3. Return the volume of the maximum cuboid\n    possible_cuboids = [tuple(sorted(p, reverse=True)) for p in permutations(range(1, sum_of_sides+1), 3)]\n    possible_cuboids.sort(key=lambda x: x[0]*x[1]*x[2], reverse=True)\n    return possible_cuboids[0][0]*possible_cuboids[0][1]*possible_cuboids[0][2]\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\nfrom typing import Iterable\n\n\ndef max_volume(sides: Iterable[int]) -> int:\n    return max(sides) ** 3\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\n# Code starts here\n\ndef max_volume(l, b, h):\n    vol = l*b*h\n    return vol\n\n\n# Code ends here\n\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_of_sides):\n    volume = 0\n    sides = [0, 0, 0]\n    max_volume = 0\n    if sum_of_sides >= 8:\n        sides = [2, 2, 2]\n    elif sum_of_sides == 7:\n        sides = [1, 2, 3]\n    else:\n        sides = [2, 3, 4]\n    for i in range(3):\n        for j in range(3):\n            volume = sides[i] * sides[j]\n            if volume > max_volume:\n                max_volume = volume\n    return max_volume\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(side_sum):\n    \"\"\"\n    Side_sum is the sum of length of the three sides\n    return the maximum volume of cuboid with side_sum as length of the three sides.\n    \"\"\"\n    # Formula\n    # A = (side_sum * side_sum * side_sum)/6\n    # Where\n    # A = the area of the cuboid\n    # side_sum = the sum of length of the three sides\n\n    A = (side_sum * side_sum * side_sum)/6\n    # 1000 is just a number large enough to be the length of the largest side\n    L = 1000\n    # List to store volume of cuboids with the given side sum and length as side of each of the three sides\n    # L is the side of the largest cuboid\n    volume_list = [0] * L\n\n    # iterate through each possible length of the three sides\n    for i in range(L):\n        # i is the length of the largest side of the cuboid\n        # iterate through each possible length of the other two sides\n        for j in range(i+1, L+1):\n            # j is the length of the middle side of the cuboid\n            # l = i + j - k\n            # k is the length of the smallest side of the cuboid\n            # k can take all values from i+1 to L+1\n            for k in range(j+1, L+1):\n                # k is the length of the smallest side of the cuboid\n                # volume = A * L^3\n                # where\n                # volume = volume of the cuboid\n                # A = area of the cuboid\n                # L = length of the largest side of the cuboid\n                volume = A * (i * i * i + j * j * j + k * k * k)\n                # if volume of the cuboid is greater than the maximum volume\n                # then update maximum volume to volume of the cuboid\n                if volume > volume_list[i]:\n                    volume_list[i] = volume\n\n    return volume_list[L-1]\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sum):\n    height = 0\n    while sum >= height**3 + (height-1)**3:\n        height += 1\n\n    return height**3 + (height-1)**3\n\ndef test():\n    assert max_volume(8) == 18\n    assert max_volume(34) == 274\n    assert max_volume(33) == 270\n    assert max_volume(18) == 108\n    assert max_volume(10000) == 5000000\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_sides):\n    \"\"\"Calculate the maximum volume of a cuboid with a given sum of sides.\"\"\"\n    return sum_sides ** 3\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum):\n    return (sum * (sum + 1)) // 2\n\ndef test_max_volume():\n    assert max_volume(8) == 18\n    assert max_volume(16) == 48\n    assert max_volume(20) == 108\n    assert max_volume(30) == 288\n"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(word_list):\n    \"\"\"\n    This function finds all five characters long word in the given string by using regex.\n    :param word_list: list of words\n    :return: list of words with five characters\n    \"\"\"\n    return re.findall('\\w\\w\\w\\w\\w', word_list)", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    pass\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    return re.findall(r'\\w{5}', string)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(text: str) -> List[str]:\n    return re.findall('[A-Za-z]{5}', text)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    return re.findall(r'[a-z]{5}', string)\n\n# test", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    long_word = re.findall(r'[a-zA-Z]{5}', string)\n    return long_word\n\n\n# -\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(s):\n    return re.findall('[a-z]{5}',s)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    '''\n    args:\n        string - a string to find long word\n    returns:\n        list of long words\n    '''\n    return re.findall(r'[a-zA-Z]{5,}', string)\n\ndef main():\n    pass\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\n# Write your solution here\ndef sum_difference(n):\n\treturn sum((i**2) for i in range(1,n+1)) - sum(i for i in range(1,n+1))**2\n\n# def sum_difference(n):\n# \treturn sum((i**2) for i in range(1,n+1)) - sum((i**2) for i in range(1,n+1))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return (sum(range(n)**2)-(sum(range(n))**2))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum([x**2 for x in range(1, n+1)]) - sum(x**2 for x in range(1, n+1))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    a,b = 0,0\n    for i in range(1,n+1):\n        a = a + i**2\n        b = b + i\n    return a-b\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n\treturn ((n*(n+1))**2-sum(i**2 for i in range(1, n+1)))", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    \"\"\"\n    Parameters\n    ----------\n    n : int\n        number of natural numbers\n\n    Returns\n    -------\n    difference : int\n        sum of squared natural numbers minus squared sum of natural numbers\n    \"\"\"\n    squared_sum = 0\n    sum = 0\n\n    for i in range(n):\n        sum += i\n        squared_sum += i * i\n\n    return squared_sum - sum\n\n\ndef main():\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    assert sum_difference(1) == 0\n    assert sum_difference(2) == 4\n    assert sum_difference(3) == 15\n    assert sum_difference(12) == 5434\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n\t\"\"\"\n\tUsing a double nested loop to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers\n\t:param n:\n\t:return:\n\t\"\"\"\n\tsum_first_n_natural_num = 0\n\tfor i in range(1,n+1):\n\t\tsum_first_n_natural_num += i\n\tsum_first_n_natural_num_squared = sum_first_n_natural_num**2\n\treturn sum_first_n_natural_num_squared - (n+1)*(n+2)*(n+3)/6\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    \"\"\"\n    Calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers\n    \"\"\"\n    # Your Code here\n    sum_num = sum(range(1,n+1))\n    sum_sq_num = sum([x**2 for x in range(1,n+1)])\n    return (sum_sq_num - sum_num)**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    sq_sum=0\n    sum=0\n    for i in range(1,n+1):\n        sq_sum+=i**2\n        sum+=i\n    return sq_sum-sum\n\ndef sum_difference_new(n):\n    \"\"\"\n    new version\n    \"\"\"\n    return sum([x**2 for x in range(1,n+1)])-sum(range(1,n+1))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return (n*(n+1)*n)//6 - (n*(n+1)*n*n)//12"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    return int(number[::-1])\n\ndef main():\n    pass\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return ''.join(reversed(number))\n\n\ndef find_demlo_refactored(number):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    new_number = []\n    for i in range(len(number)):\n        new_number.append(number[-1 - i])\n    return \"\".join(new_number)\n\n\ndef test_find_demlo():\n    assert find_demlo(\"111111\") == '12345654321'\n    assert find_demlo(\"123456\") == '654321123456'\n    assert find_demlo(\"1234567\") == '7654321123456'\n    assert find_demlo(\"123456789\") == '987654321123456'\n\n\ndef test_find_demlo_refactored():\n    assert find_demlo_refactored(\"111111\") == '12345654321'\n    assert find_demlo_refactored(\"123456\") == '654321123456'\n    assert find_demlo_refactored(\"1234567\") == '7654321123456'\n    assert find_demlo_refactored(\"123456789\") == '987654321123456'\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    '''\n    A function to find the demlo number.\n    '''\n    if n == 1:\n        return '1'\n    else:\n        return str(find_demlo(n-1))+str(n)\n\ndef find_demlo_numbers(start, end):\n    '''\n    A function to find demlo numbers between 1 and end.\n    '''\n    for i in range(start,end+1):\n        print(find_demlo(i))\n\n#This code is provided by the organization.\n#This code is provided by the organization.\n#This code is provided by the organization.\n#This code is provided by the organization.\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    number = int(number)\n    if number < 0:\n        raise ValueError(\"Error\")\n    elif number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        res = []\n        for i in range(1, len(number)):\n            res.append(number[i] - number[i-1])\n        res.append(len(number)-1)\n        res.sort()\n        temp = ''\n        for i in range(len(res)):\n            temp += str(res[i])\n        return temp\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(s: str) -> str:\n    return s[-2::-1]", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    n = int(n)\n    s = ''\n    while n > 0:\n        s = str(n % 10) + s\n        n //= 10\n    return s\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(s):\n    \"\"\"\n    >>> assert find_demlo(\"111111\") == '12345654321'\n    \"\"\"\n    digits = map(int, s)\n    return reduce(lambda a, b: a * b, digits)\n\ndef find_demlo2(s):\n    \"\"\"\n    >>> assert find_demlo2(\"111111\") == '12345654321'\n    \"\"\"\n    return reduce(lambda a, b: a * b, map(int, s))\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\n# def find_demlo(num):\n#     \"\"\"\n#     takes in a number num\n#     returns a string of the demlo number\n#     \"\"\"\n#     pass\n\ndef find_demlo(num):\n    \"\"\"\n    takes in a number num\n    returns a string of the demlo number\n    \"\"\"\n    string = str(num)\n    num_len = len(string)\n    demlo_num = \"\"\n    for i in range(num_len-1, -1, -1):\n        demlo_num += string[i]\n    return demlo_num", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(string):\n    \"\"\"\n    TODO: find a solution for this one.\n    \"\"\"\n    raise NotImplementedError\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nfrom typing import Any, Callable, Dict, List, Tuple, Optional\n\n# Map of length of number to corresponding multipliers.\n# e.g. (1, [1]) means 1*1,\n#      (2, [2, 1]) means 2*2+1*1,\n#      (3, [3, 2, 1]) means 3*3+2*2+1*1.\n_MULTIPLIERS = {1: [1], 2: [2, 1], 3: [3, 2, 1], 4: [4, 3, 2, 1]}\n\n\ndef _multiply(digits: List[int]) -> int:\n    return sum(\n        _MULTIPLIERS[len(digits)][digit_idx] * digit\n        for digit_idx, digit in enumerate(digits, start=1)\n    )\n\n\ndef _convert_to_digits(number: str) -> List[int]:\n    return list(int(digit) for digit in number)\n\n\ndef _sum_digits(digits: List[int]) -> int:\n    return sum(digits)\n\n\ndef _convert_to_number(digits: List[int]) -> str:\n    return \"\".join(str(digit) for digit in digits)\n\n\ndef _get_reversed_digits(digits: List[int]) -> List[int]:\n    return list(reversed(digits))\n\n\ndef _get_reversed_number(number: str) -> str:\n    return _convert_to_number(reversed(list(int(digit) for digit in number)))\n\n\ndef _get_padded_digits(digits: List[int], length: int) -> List[int]:\n    return digits + [0] * (length - len(digits))\n\n\ndef _get_padded_number(number: str, length: int) -> str:\n    return _convert_to_number(_get_padded_digits(list(int(digit) for digit in number), length))\n\n\ndef _get_reversed_and_padded_digits(digits: List[int], length:"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    pos_min=[]\n    min_value=min(lst)\n    for i in range(len(lst)):\n        if lst[i]==min_value:\n            pos_min.append(i)\n    return pos_min\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(x):\n    return [x.index(min(x))]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(arr):\n    result=[]\n    for i in range(len(arr)):\n        min=arr[i]\n        min_index=i\n        for j in range(i+1,len(arr)):\n            if min>arr[j]:\n                min=arr[j]\n                min_index=j\n        result.append(min_index)\n    return result\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(list):\n    # TODO: implement\n    m=0\n    mini=0\n    for i in range(len(list)):\n        if list[i]<list[m]:\n            m=i\n            mini=list[i]\n    return m,mini\n\ndef main():\n    print(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(input_list):\n    \"\"\"\n    Return the list of indices corresponding to the indexes of the minimum values in the input list.\n    \"\"\"\n    minimums = []\n    for index, value in enumerate(input_list):\n        if value == min(input_list):\n            minimums.append(index)\n    return minimums\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    pass\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\nimport numpy as np\n\ndef position_min(L):\n    \"\"\"\n    >>> position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n    [3, 11]\n    \"\"\"\n    return np.argmin(L)\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(l):\n    result = []\n    for i in range(len(l)):\n        if i == 0:\n            if l[i] == min(l):\n                result.append(i)\n            else:\n                continue\n        elif i == len(l)-1:\n            if l[i] == min(l):\n                result.append(i)\n            else:\n                continue\n        elif l[i] == min(l):\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(array):\n    min_pos = []\n    for i in range(len(array)):\n        if(min_pos==[]):\n            min_pos.append(i)\n        elif(min_pos[0]>i):\n            min_pos.insert(0,i)\n        elif(min_pos[0]==i):\n            continue\n        elif(array[min_pos[0]]>array[i]):\n            min_pos[0]=i\n    return min_pos", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\n# SOLUTION\ndef position_min(values):\n    # YOUR CODE HERE\n    return []\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(a, N):\n\tresult = []\n\tfor i in range(N//2):\n\t\tresult.append(a[i])\n\t\tresult.append(-a[N-1-i])\n\treturn result\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, k):\n    if len(arr) == 1:\n        return arr\n    elif len(arr) % 2 != 0:\n        return arr\n    mid = len(arr) // 2\n    new_arr = [0]*k\n    index = 0\n    for i in range(mid):\n        new_arr[index] = arr[i]\n        index += 2\n    for i in range(mid, len(arr)-1, 2):\n        new_arr[index] = arr[i]\n        index += 2\n    for i in range(mid+1, len(arr)):\n        new_arr[index] = arr[i]\n        index += 2\n    return new_arr\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(array, n):\n    temp = 0\n    for i in range(0, n, 2):\n        temp = array[i]\n        array[i] = array[i+1]\n        array[i+1] = temp\n    return array\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, max):\n\tl = len(arr)\n\tarr = sorted(arr)\n\tif l%2 == 0:\n\t\tarr = [arr[i]-arr[i-1] for i in range(1, l, 2)]\n\telse:\n\t\tarr = [arr[i]-arr[i-1] for i in range(1, l, 2)]\n\t\tarr = [arr[0]] + arr[1:]\n\tarr = sorted(arr)\n\treturn arr[:max]\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, arr_size):\n\t# Your code here\n\tfor i in range(0, len(arr)):\n\t\tif i%2 == 0:\n\t\t\tif (arr[i] < 0):\n\t\t\t\treturn None\n\t\telse:\n\t\t\tif (arr[i] > 0):\n\t\t\t\treturn None\n\treturn arr\n\ndef main():\n\tassert re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\nmain()\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, limit):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        if abs(arr[start]) <= limit:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        else:\n            start += 1\n    return arr\n\n# Using slicing and list comprehension\ndef re_arrange(arr, limit):\n    arr = [x for x in arr if abs(x) <= limit]\n    return [x * (-1) if x < 0 else x for x in arr]\n\n\narr = [2, -9, 3, -1, 4, -5, 6, -7, 8, 1]", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\nfrom typing import List\n\ndef re_arrange(items: List[int], limit: int):\n\tresult = []\n\tif not items:\n\t\treturn result\n\ti = 0\n\tn = len(items)\n\twhile i < n:\n\t\titem = items[i]\n\t\tif abs(item) > limit:\n\t\t\treturn []\n\t\tif item > 0:\n\t\t\tresult.append(item)\n\t\t\ti += 1\n\t\telse:\n\t\t\tresult.append(-item)\n\t\t\ti += 2\n\treturn result\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(array, n):\n    if len(array) < n:\n        return array\n    if n == 0:\n        return array\n    \n    res = []\n    flag = 1\n    for _ in range(n):\n        res.append(array[0])\n        del array[0]\n        if flag == 1:\n            flag = 0\n        else:\n            flag = 1\n    return res\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, N):\n    if len(arr) != N:\n        return -1\n    count = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] > 0:\n            if count >= 1:\n                return -1\n            count += 1\n        elif arr[i] < 0:\n            if count >= 1:\n                return -1\n            count += 1\n    if count == 0:\n        return -1\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    if not arr:\n        return []\n    if len(arr) == 1:\n        if arr[0] > 0:\n            return [arr[0], -arr[0]]\n        else:\n            return [arr[0]]\n    if len(arr) == 2:\n        if arr[0] > 0 and arr[1] < 0:\n            return [arr[0], -arr[1]]\n        elif arr[0] < 0 and arr[1] > 0:\n            return [arr[1], -arr[0]]\n        else:\n            return [arr[0], arr[1]]\n    if len(arr) == 3:\n        if arr[0] > 0 and arr[1] > 0 and arr[2] < 0:\n            return [arr[0], -arr[2], arr[1]]\n        elif arr[0] > 0 and arr[1] < 0 and arr[2] > 0:\n            return [arr[0], arr[2], -arr[1]]\n        elif arr[0] < 0 and arr[1] > 0 and arr[2] < 0:\n            return [-arr[0], -arr[2], arr[1]]\n        elif arr[0] < 0 and arr[1] < 0 and arr[2] > 0:\n            return [-arr[0], arr[2], -arr[1]]\n        else:\n            return [arr[0], arr[1], arr[2]]\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(t):\n    return (t[1::2] + t[2::2]).sum(), (t[::2] + t[1::2]).sum()\n\ndef test_sum_of_alternates():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(l):\n    return tuple(sum(l[i:i+2]) for i in range(0, len(l), 2))\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(chain):\n    if not chain:\n        return (0,0)\n    elif len(chain) == 1:\n        return (0, chain[0])\n    else:\n        return sum_of_alternates(chain[1::2]) + sum_of_alternates(chain[2::2])\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    return (sum(lst[::2]), sum(lst[1::2]))\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(iterable):\n    sum_1 = 0\n    sum_2 = 0\n    for i in range(0, len(iterable), 2):\n        sum_1 += iterable[i]\n    for i in range(1, len(iterable), 2):\n        sum_2 += iterable[i]\n    return sum_1, sum_2\n\n# Test", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(iterable):\n    sum_total = 0\n    for i in range(len(iterable)):\n        if i % 2 == 0:\n            sum_total += iterable[i]\n    return sum_total, sum_total\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(nums):\n    \"\"\"\n    :type nums: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple( sum(nums[i::2]) for i in range(2) )\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(xs):\n    \"\"\"sum of the first and third elements in each tuple\"\"\"\n    return (sum(xs[::2]), sum(xs[1::2]))\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(s):\n    \"\"\"\n    Args:\n        s (list): a list of integers.\n\n    Returns:\n        tuple: a tuple of the sum and count of alternate chains\n    \"\"\"\n    lst = [i for i in s if i > 0]\n    sum = 0\n    count = 0\n    for i in range(len(lst)-1):\n        sum = sum + lst[i]\n        if lst[i] == lst[i+1]:\n            count = count + 1\n        else:\n            break\n    return (sum, count)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(numbers):\n    sum_a, sum_b = 0, 0\n    for i in range(0, len(numbers), 2):\n        sum_a = sum_a + numbers[i]\n        sum_b = sum_b + numbers[i+1]\n    return sum_a, sum_b\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(sum):\n\n    for i in range(1, sum):\n        squares = i * i\n        if squares == sum:\n            return 1\n        elif squares < sum:\n            return 1 + get_Min_Squares(sum - squares)\n\n    return 0\n\n#print(get_Min_Squares(9))\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\nimport math\n\ndef get_Min_Squares(target):\n    \"\"\"\n    Get the minimum number of squares whose sum is equal to the target.\n    \"\"\"\n    # get square root of the target\n    root = math.floor(math.sqrt(target))\n    # loop for squares from 0 to root\n    sum_squares = 0\n    for i in range(root):\n        sum_squares = sum_squares + (i*i)\n        # if the sum is equal to the target\n        if sum_squares == target:\n            return i + 1\n    # no solution is available\n    return -1\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    return int(n**0.5)", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(num):\n    return num", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n\tfor i in range(1, int(num**0.5 + 1)):\n\t\tif num % i == 0 and ((num/i) % i) == 0:\n\t\t\treturn i\n\treturn 0\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\nfrom functools import reduce\nfrom operator import add\n\ndef get_Min_Squares(number: int) -> int:\n    min_squares = 0\n    square = 0\n    while number > 0:\n        min_squares += 1\n        square = number ** 2\n        number -= square\n    return min_squares\n\n\ndef get_Min_Squares_2(number: int) -> int:\n    min_squares = 0\n    while number > 0:\n        square = 0\n        while number >= square:\n            square += 1\n            number -= square\n        min_squares += 1\n    return min_squares\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(target):\n    return 1\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\nimport math\n\ndef get_Min_Squares(num):\n    return math.ceil(math.sqrt(num))\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n# + id=\"B1PSL4J3Euh5\" colab_type=\"code\" colab={}\n#solution\ndef get_Min_Squares(n):\n  result = 0\n  for i in range(1, int(n ** 0.5) + 1):\n    if n % i == 0:\n      result += 1\n      if i != n//i:\n        result += 1\n  return result\n\n\n# + id=\"8X5580cHE6DH\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"6a3a7540-d2c5-494a-868d-b3d62b95c016\"", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\nfrom collections import Counter\ndef most_occurrences(strings):\n    return max(Counter(strings).items(), key = lambda x: x[1])[0]\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(words):\n    \"\"\"\n    :param words: list of words.\n    :return: word with highest number of occurrences.\n    \"\"\"\n    import collections\n    occurences = collections.defaultdict(int)\n\n    for word in words:\n        occurences[word] += 1\n\n    most_occur_word = max(occurences, key=occurences.get)\n    return most_occur_word\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strs):\n    if len(strs) == 0:\n        return \"\"\n\n    str_dict = {}\n\n    for str in strs:\n        for word in str.split():\n            if word in str_dict:\n                str_dict[word] += 1\n            else:\n                str_dict[word] = 1\n\n    max_occurrence = 0\n    max_word = \"\"\n\n    for key, val in str_dict.items():\n        if val > max_occurrence:\n            max_occurrence = val\n            max_word = key\n    \n    return max_word", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nimport re\n\ndef most_occurrences(strings):\n    \"\"\"\n    :type strings: list[str]\n    :rtype: str\n    \"\"\"\n    if strings is None or len(strings) == 0:\n        return ''\n    occurrences = {}\n    for s in strings:\n        words = s.split()\n        for word in words:\n            if word in occurrences:\n                occurrences[word] += 1\n            else:\n                occurrences[word] = 1\n    max_count = 0\n    most_occurred_word = ''\n    for key, value in occurrences.items():\n        if value > max_count:\n            max_count = value\n            most_occurred_word = key\n    return most_occurred_word\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strs):\n\tmost_occur = \"\"\n\tfor i in strs:\n\t\tcount = 0\n\t\tfor j in i:\n\t\t\tif j == \" \":\n\t\t\t\tcontinue\n\t\t\telif j in most_occur:\n\t\t\t\tcount+=1\n\t\t\telse:\n\t\t\t\tcount = 1\n\t\tif count > len(most_occur):\n\t\t\tmost_occur = i\n\treturn most_occur\n\n# def most_occurrences(strs):\n# \tcounter = 0\n# \tmost_occur = \"\"\n# \tfor i in strs:\n# \t\tif counter == 0:\n# \t\t\tmost_occur = i\n# \t\t\tcounter+=1\n# \t\telse:\n# \t\t\tcount = 0\n# \t\t\tfor j in i:\n# \t\t\t\tif j == \" \":\n# \t\t\t\t\tcontinue\n# \t\t\t\telif j in most_occur:\n# \t\t\t\t\tcount+=1\n# \t\t\t\telse:\n# \t\t\t\t\tcount = 1\n# \t\t\tif count > counter:\n# \t\t\t\tmost_occur = i\n# \t\t\t\tcounter = count\n# \treturn most_occur\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nimport collections\n\ndef most_occurrences(strings):\n    \"\"\"\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n    'UTS'\n    >>> most_occurrences([\"RTF love UTS\", \"UTS is best\"])\n    'RTF'\n    \"\"\"\n\n    counts = collections.defaultdict(int)\n    for string in strings:\n        for word in string.split():\n            counts[word] += 1\n    max_value = 0\n    for word, count in counts.items():\n        if count > max_value:\n            max_value = count\n            max_word = word\n    return max_word\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(string_list):\n    words = []\n    for word in string_list:\n        words.append(word.split())\n    max_count = 0\n    most_occuring = \"\"\n    for word in words:\n        for i in word:\n            words.append(i)\n    for word in words:\n        count = words.count(word)\n        if count > max_count:\n            max_count = count\n            most_occuring = word\n    return most_occuring\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings: list) -> str:\n    \"\"\"\n    :param strings:\n    :return:\n    \"\"\"\n    counter = {}\n    for string in strings:\n        for char in string:\n            if char not in counter:\n                counter[char] = 1\n            else:\n                counter[char] += 1\n    max_occurrence = 0\n    most_frequent_word = ''\n    for key, value in counter.items():\n        if value > max_occurrence:\n            max_occurrence = value\n            most_frequent_word = key\n    return most_frequent_word\n\n\ndef main():\n    print(most_occurrences(['UTS is best for RTF', 'RTF love UTS', 'UTS is best']))\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    count = {}\n    for s in strings:\n        for c in s:\n            if c in count:\n                count[c] = count[c] + 1\n            else:\n                count[c] = 1\n    max = 0\n    most = None\n    for c in count:\n        if count[c] > max:\n            max = count[c]\n            most = c\n    return most\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n  if a == b == c:\n    return True\n  if a == b or a == c or b == c:\n    return False\n  return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n\ndef main():\n    print(check_isosceles(6,8,12)==False)\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a+b > c and a+c > b and b+c > a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    return (a+b>c and a+c>b and b+c>a)\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b==c:\n        return True\n    elif a==b !=c or b==c!=a or a==c != b:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\na = int(input(\"Enter first side: \"))\nb = int(input(\"Enter second side: \"))\nc = int(input(\"Enter third side: \"))\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b==c:\n        print(True)\n    else:\n        print(False)\n\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n# Solution 1\n# @param side_a the length of the first side of the triangle\n# @param side_b the length of the second side of the triangle\n# @param side_c the length of the third side of the triangle\n# @return bool, True if isosceles\n# O(nlogn) time | O(1) space \ndef check_isosceles(side_a, side_b, side_c):\n  sides = [side_a, side_b, side_c]\n  sides.sort()\n  return (abs(sides[0] - sides[1]) == sides[1]) or (abs(sides[1] - sides[2]) == sides[2])\n\n# Solution 2\n# @param side_a the length of the first side of the triangle\n# @param side_b the length of the second side of the triangle\n# @param side_c the length of the third side of the triangle\n# @return bool, True if isosceles\n# O(n^2) time | O(1) space \ndef check_isosceles(side_a, side_b, side_c):\n  return (side_a != side_b) and (side_b != side_c) and (side_a != side_c)\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if (a+b)>c and (b+c)>a and (c+a)>b:\n        if a==b and b==c:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\nfrom typing import List\n\ndef rotate_left(lst: List[int], start: int, end: int) -> List[int]:\n    if end < start:\n        return lst\n    if end == start:\n        return lst\n    lst_len = len(lst)\n    if start >= lst_len:\n        return lst\n    if end >= lst_len:\n        end = lst_len - 1\n    if end < 0:\n        return lst\n    if start < 0:\n        start = 0\n    half = (end - start + 1) // 2\n    if end - start + 1 == half:\n        return lst\n    a = lst[start:end+1]\n    b = lst[end+1:lst_len+1]\n    for i in range(half):\n        b.insert(0, a.pop())\n    return b\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list,n,m):\n  return list[n:] + list[:n]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(arr, k, n):\n    # Your code goes here\n    \"\"\"\n    [5, 1, 9, 11]\n    k = 2\n    n = 4\n    [1, 5, 9, 11]\n    k = 4\n    n = 4\n    \"\"\"\n    # check input\n    if k <= 0 or n <= 0:\n        return arr\n    \n    # check if length of array is enough\n    if n >= len(arr):\n        return arr\n    \n    # convert array into a queue\n    queue = list(queue.Queue(maxsize=n))\n    for i in range(n):\n        queue.put(arr.pop(0))\n    \n    # rotate\n    for i in range(k):\n        queue.put(queue.get())\n    \n    # convert queue into array\n    for i in range(n):\n        arr.append(queue.get())\n    \n    return arr\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(items, shift, length):\n    if shift == 0:\n        return items\n    elif shift < 0:\n        return rotate_left(items, shift + length, length)\n    elif shift > 0:\n        return items[-shift:] + items[:-shift]\n\nitems = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nshift = 3\nlength = 4", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\n#Solution 1:\ndef rotate_left(lst,shift_num,item_num):\n    if shift_num > item_num:\n        return lst\n    for i in range(item_num):\n        lst.append(lst.pop(shift_num))\n    return lst\n\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\n\n# Solution 2:\ndef rotate_left_2(lst,shift_num,item_num):\n    lst[:] = lst[-item_num:] + lst[:-item_num]\n    return lst\n\n\ndef test_rotate_left_2():\n    assert rotate_left_2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\n\n# Solution 3:\ndef rotate_left_3(lst,shift_num,item_num):\n    return lst[-shift_num:] + lst[:-shift_num]\n\n\ndef test_rotate_left_3():\n    assert rotate_left_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\n\n# Solution 4:\ndef rotate_left", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list_object, n, k):\n    return list_object[k:] + list_object[:k]\n\ndef main():\n    list_object = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(rotate_left(list_object, 3, 4))\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(seq, left, right):\n    left_half = seq[:left]\n    right_half = seq[left:right]\n    seq[left:right] = right_half + left_half\n    return seq\n\n# Your function should work like this:\n# print(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4))\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list, index, count):\n    return list[index:]+list[:index][-count:]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(lst,left_count,total_count):\n    if(total_count==0):\n        return lst\n    elif(left_count>=total_count):\n        return lst\n    else:\n        return lst[left_count:total_count] + lst[:left_count]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(lst, n, m):\n    new_lst = lst[-m:]\n    for _ in range(n):\n        new_lst.append(lst.pop(0))\n    lst.extend(new_lst)\n    return lst\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num < 0:\n\t\t\tcount += 1\n\treturn count\n\n\ndef main():\n\tassert neg_count([-1,-2,3,-4,-5]) == 4\n\tassert neg_count([-1,0,1,2,3]) == 0\n\tassert neg_count([-100, -99, -98]) == 3\n\tassert neg_count([-1, 0, 1, 2, 3]) == 0\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    return len([x for x in lst if x<0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\n# YOUR CODE HERE\n\n\n# 3. Write a python function to count zero in a list.", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(list):\n    \"\"\"\n    >>> neg_count([-1,-2,3,-4,-5])\n    4\n    \"\"\"\n    count = 0\n    for item in list:\n        if item < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n    negative_count = 0\n    for i in lst:\n        if i < 0:\n            negative_count += 1\n    return negative_count\n\n\nlst = [1,2,3,4,5]", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(nums):\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(arr):\n    \"\"\"\n    >>> neg_count([-1,-2,3,-4,-5])\n    4\n    >>> neg_count([])\n    0\n    \"\"\"\n    return len([n for n in arr if n < 0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(num_list):\n    count = 0\n    for number in num_list:\n        if number < 0:\n            count += 1\n    return count\n\ndef test_neg_count():\n    assert neg_count([-1,-2,3,-4,-5]) == 4\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(nums):\n    return nums.count(-num for num in nums if num < 0)\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(l):\n    \"\"\"\n    >>> neg_count([1,2,3,4,5])\n    0\n    >>> neg_count([-1,-2,3,-4,-5])\n    4\n    \"\"\"\n    count = 0\n    for i in l:\n        if i < 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(str):\n    return [w for w in re.findall(r\"[\\w]{3,}\", str)]\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(str):\n    return re.findall(r'[A-Za-z]{3,}', str)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(a_string):\n    return re.findall(r'(\\w{3,5})', a_string)\n\n# Using list comprehension\ndef find_char_lc(a_string):\n    return [x for x in a_string if len(x) >= 3 and len(x) <= 5]\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(s):\n    \"\"\"\n    >>> find_char('For the four consumer complaints contact manager AKR reddy')\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    >>> find_char('The four consumer complaints contact manager AKR reddy')\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    >>> find_char('Four consumer complaints contact manager AKR reddy')\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    >>> find_char('For the consumer complaints contact manager AKR reddy')\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    \"\"\"\n    return [word for word in re.findall(r\"(?<=\\W)[\\w]{3,5}(?=\\W)\", s)]\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(find_char(string))\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\n\ndef find_char(string):\n    \"\"\"\n    :param string: string\n    :return: list of words\n    \"\"\"\n    words = re.findall(r'[a-zA-Z]+', string)\n    char_words = []\n    for word in words:\n        if len(word) in range(3, 6):\n            char_words.append(word)\n    return char_words\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(s):\n    return list(filter(lambda x: len(x) == 4, re.findall('[a-zA-Z]+', s)))\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(string):\n    return re.findall(r'(\\w{3,})', string)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(s):\n    return re.findall(r'[a-zA-Z]\\w{2,}', s)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(string):\n    return re.findall(\"[a-zA-Z]+\\w{3}\", string)"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(number):\n    count = 0\n    for i in range(32):\n        if (number & (1 << i)) == 0:\n            count += 1\n    return count\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    \"\"\"\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(3)\n    2\n    >>> count_unset_bits(1023)\n    11\n    >>> count_unset_bits(4294967295)\n    32\n    \"\"\"\n    return int(bin(n).count(\"0\"), 2)\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(number):\n    \"\"\"\n    Write your function here.\n    \"\"\"\n    count = 0\n    bin_number = bin(number)[2:]\n    for i in bin_number:\n        if i == '1':\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(number):\n    count = 0\n    for i in range(32):\n        if number & (1 << i) == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    return bin(num).count('1')\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(num: int) -> int:\n    count = 0\n    while num > 0:\n        if num & 1 == 0:\n            count += 1\n        num >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    count = 0\n    for i in range(32):\n        if num & (1 << i) == 0:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    c = 0\n    while n:\n        n = n & (n-1)\n        c += 1\n    return c\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    return bin(n).count('1')\n\ndef test_count_unset_bits():\n    assert count_unset_bits(0) == 0\n    assert count_unset_bits(1) == 1\n    assert count_unset_bits(2) == 1\n    assert count_unset_bits(3) == 2\n    assert count_unset_bits(4) == 2\n    assert count_unset_bits(5) == 3\n    assert count_unset_bits(6) == 3\n    assert count_unset_bits(7) == 3\n    assert count_unset_bits(8) == 4\n    assert count_unset_bits(9) == 4\n    assert count_unset_bits(10) == 4\n    assert count_unset_bits(11) == 4\n    assert count_unset_bits(12) == 4\n    assert count_unset_bits(13) == 4\n    assert count_unset_bits(14) == 4\n    assert count_unset_bits(15) == 4\n    assert count_unset_bits(16) == 5\n    assert count_unset_bits(17) == 5\n    assert count_unset_bits(18) == 5\n    assert count_unset_bits(19) == 5\n    assert count_unset_bits(20) == 5\n    assert count_unset_bits(21) == 5\n    assert count_unset_bits(22) == 5\n    assert count_unset_bits(23) == 5\n    assert count_unset_bits(24) == 5\n    assert count_unset_bits(25) == 5\n    assert count_unset_bits(26) == 5\n    assert count_unset_bits(27) == 5\n    assert count_unset_bits(28) == 5\n    assert count_unset_bits(29) == 5\n    assert count_unset_bits(30) == 5\n    assert count_unset_bits(31) == 5\n    assert count_unset_bits(32) == "], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(str):\n    return dict((c, str.count(c)) for c in str)\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    d = {}\n    for c in string:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n\ndef test_char_frequency():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert char_frequency('gyyaw') == {'g': 1, 'y': 2, 'a': 1, 'w': 1}\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    \"\"\"\n    :param s: a string\n    :return: a dictionary of characters and their frequencies\n    \"\"\"\n    dictionary={}\n    for ch in s:\n        if ch in dictionary:\n            dictionary[ch]+=1\n        else:\n            dictionary[ch]=1\n    return dictionary\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(str):\n    if str == \"\":\n        return {}\n\n    return {str[i]: str.count(str[i]) for i in range(len(str))}\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(text):\n    return dict([(c, text.count(c)) for c in text])\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    # Frequency of the character is equal to number of occurences of that character.\n    # To do so, we need to create a dictionary, where the key is the character, and the value is number of occurences of that character.\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n\n\ndef main():\n    print(char_frequency('python'))\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    pass\n\ndef test_char_frequency():\n    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert char_frequency('Python')=={'p': 2, 'y': 2, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert char_frequency('PYTHON')=={'P': 1, 'Y': 1, 'T': 1, 'H': 1, 'O': 1, 'N': 1}\n    assert char_frequency('Hello World!')=={'H': 1, 'e': 2, 'l': 1, 'o': 1, ' ': 1, 'W': 1, 'o': 1, 'r': 1, 'l': 1, 'd': 1, '!': 1}\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(s):\n    counter={}\n    for c in s:\n        counter[c]=counter.get(c,0)+1\n    return counter\n\n# test"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lists):\n    # Your code here\n    sorted_lists=[]\n    for item in lists:\n        item[0]=item[0].lower()\n        sorted_lists.append(item)\n    sorted_lists.sort(key=lambda x: x[1])\n    return sorted_lists", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n# Write your code here\ndef Sort(list):\n    for i in range(len(list)-1):\n        for j in range(i+1,len(list)):\n            if list[i][1] > list[j][1]:\n                list[i],list[j] = list[j],list[i]\n    return list\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(List):\n    return sorted(List,key=lambda x: x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(li):\n    pass\n\n\n@pytest.mark.parametrize(\"mylist,expected\", [\n    ([['a', 10], ['b', 5], ['c', 20], ['d', 15]], [['b', 5], ['a', 10], ['d', 15], ['c', 20]]),\n])\ndef test_sort(mylist,expected):\n    assert Sort(mylist) == expected\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(aList):\n\taList.sort(key = lambda a: a[1])\n\treturn aList\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lst):\n    def Sort2(lst):\n        return sorted(lst, key=lambda x: x[1])\n    return Sort2(lst)\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lst):\n    \"\"\"\n    lst: list of lists containing two elements, second being the key\n    \"\"\"\n    if not lst:\n        return lst\n\n    out = []\n    while lst:\n        t = lst.pop(0)\n        for i in range(len(out)):\n            if t[1] > out[i][1]:\n                out.insert(i, t)\n                break\n            elif i == len(out) - 1:\n                out.append(t)\n\n    return out\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(A):\n    \"\"\"\n    First, return the list of items whose second element is not None\n    \"\"\"\n    res = []\n    for i in A:\n        if i[1] is not None:\n            res.append(i)\n\n    \"\"\"\n    Sort the list according to the second element of the items in the list\n    \"\"\"\n    res.sort(key=lambda x: x[1])\n\n    return res\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Here is the solution\n\n\ndef check_Validity(side_1, side_2, side_3):\n    return side_1 + side_2 > side_3 and side_1 + side_3 > side_2 and side_2 + side_3 > side_1\n\n\ndef main():\n    assert check_Validity(1, 2, 3) == False\n    assert check_Validity(1, 2, 4) == True\n    print(\"All test cases passed!\")\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Your code here\ndef check_validity(a,b,c):\n    if a+b <= c or b+c <= a or a+c <= b:\n        return False\n    return True\n\ndef test_function(test_case):\n    print(check_validity(*test_case))\n\ntest_case_1 = (2,4,6)\ntest_function(test_case_1)\ntest_case_2 = (4,4,5)\ntest_function(test_case_2)\ntest_case_3 = (3,3,3)\ntest_function(test_case_3)", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\nimport math\n\ndef check_Validity(a,b,c):\n    s = (a+b+c)/2\n    s_area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    if s_area != s:\n        return False\n    elif s_area == s:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(side1,side2,side3):\n    if (side1+side2 > side3 and side2+side3 > side1 and side1+side3 > side2):\n        return True\n    return False", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_validity(a,b,c):\n\n    if a + b <= c or b + c <= a or a + c <= b:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Python 2/3 compatibility\nfrom __future__ import print_function, division\n\ndef check_Validity(side1, side2, side3):\n    # Your code here\n    if side1 + side2 <= side3 or side2 + side3 <= side1 or side1 + side3 <= side2:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(s1,s2,s3):\n    if s1+s2<=s3 or s2+s3<=s1 or s3+s1<=s2:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if ((a + b > c) and (a + c > b) and (b + c > a)):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,c):\n    if a==b:\n        return a*c\n    else:\n        return a*c+ap_sum(a+1,b,c)\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(start,end,step):\n    if start>end:\n        return 0\n    elif step==0:\n        return 0\n    elif step>0:\n        if start>end:\n            return 0\n        else:\n            return (end-start+1)*start/2\n    else:\n        if end>start:\n            return 0\n        else:\n            return (start-end+1)*end/2\n\ndef test_ap_sum():\n    assert ap_sum(1,5,2)==25\n    assert ap_sum(0,0,2)==0\n    assert ap_sum(1,0,2)==0\n    assert ap_sum(1,5,-1)==25\n    assert ap_sum(1,5,0)==0\n    assert ap_sum(1,5,-2)==50\n\ntest_ap_sum()\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(n1,n2,diff):\n    total=0\n    for i in range(n1,n2+1):\n        total=total+i\n    return total-n1*(n2-n1+1)/2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a, b, c):\n    sum = 0\n    for i in range(a,b+1):\n        sum += i\n        if i+c-1<b:\n            continue\n        else:\n            sum += c\n    return sum\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\nimport math\n\ndef ap_sum(a,b,n):\n\treturn (b*n+a*(n-1))/2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, b, c):\n    # Your code here\n    pass\n\n\n# +", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,d):\n    \"\"\"\n    a, b, d => first number, last number, and difference between numbers\n    \"\"\"\n    sum = 0\n    for i in range(a,b+1,d):\n        sum += i\n    return sum\n    \n#test", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(first, last, step):\n    assert first > last, \"first argument should be larger than last\"\n    assert first < last, \"first argument should be smaller than last\"\n    assert step > 0, \"step should be positive number\"\n\n    return (last - first + 1) * (last + step - first) / 2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(start,end,step):\n    sum = 0\n    for num in range(start,end+1,step):\n        sum+=num\n    return sum\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(start, end, step):\n    s = 0\n    for i in range(start, end+1, step):\n        s += i\n    return s\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(monthname):\n    try:\n        return calendar.monthrange(2015, monthname.lower())[1] == 28\n    except:\n        return False\n\n\ndef tests():\n    assert check_monthnum(\"January\") == False\n    assert check_monthnum(\"February\") == True\n    assert check_monthnum(\"march\") == False\n    assert check_monthnum(\"april\") == False\n    assert check_monthnum(\"may\") == False\n    assert check_monthnum(\"june\") == False\n    assert check_monthnum(\"july\") == False\n    assert check_monthnum(\"august\") == False\n    assert check_monthnum(\"september\") == False\n    assert check_monthnum(\"october\") == False\n    assert check_monthnum(\"november\") == False\n    assert check_monthnum(\"december\") == False\n    assert check_monthnum(\"January\") == False\n    assert check_monthnum(\"February\") == True\n    assert check_monthnum(\"march\") == False\n    assert check_monthnum(\"april\") == False\n    assert check_monthnum(\"may\") == False\n    assert check_monthnum(\"june\") == False\n    assert check_monthnum(\"july\") == False\n    assert check_monthnum(\"august\") == False\n    assert check_monthnum(\"september\") == False\n    assert check_monthnum(\"october\") == False\n    assert check_monthnum(\"november\") == False\n    assert check_monthnum(\"december\") == False\n\n\ndef main():\n    tests()\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n    if month_name == 'January' or month_name == 'March' or month_name == 'May' or month_name == 'July' or month_name == 'August' or month_name == 'October' or month_name == 'December':\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month_name):\n    if month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(monthname):\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31,\n    }\n    return months[monthname]==28", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(monthname):\n    if monthname==\"January\" or monthname==\"March\" or monthname==\"May\" or monthname==\"July\" or monthname==\"August\" or monthname==\"October\" or monthname==\"December\":\n        return True\n    elif monthname==\"April\" or monthname==\"June\" or monthname==\"September\" or monthname==\"November\":\n        return False\n    else:\n        print(\"Invalid month name\")\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n    if monthname=='Jan':\n        return False\n    elif monthname=='Feb':\n        return True\n    elif monthname=='Mar':\n        return True\n    elif monthname=='Apr':\n        return True\n    elif monthname=='May':\n        return True\n    elif monthname=='Jun':\n        return True\n    elif monthname=='Jul':\n        return True\n    elif monthname=='Aug':\n        return True\n    elif monthname=='Sep':\n        return True\n    elif monthname=='Oct':\n        return False\n    elif monthname=='Nov':\n        return False\n    elif monthname=='Dec':\n        return False\n    else:\n        return False\n        \n\n# -\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\n# YOUR CODE HERE\ndef check_monthnum(month):\n    if month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    '''\n    Checks whether the given month name contains 28 days or not\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    for i in months:\n        if i == month:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n  monthdict = {\"January\":31,\"February\":28,\"March\":31,\"April\":30,\"May\":31,\"June\":30,\"July\":31,\"August\":31,\"September\":30,\"October\":31,\"November\":30,\"December\":31}\n  if monthname in monthdict:\n    return monthdict[monthname] == 28\n  else:\n    return False\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(word):\n    \"\"\"\n    Finds a word at the end of a string, with optional punctuation.\n    \"\"\"\n\n    word = word.lower()\n\n    # We will be using a regular expression (RE) to match the end of a string.\n    # RE's are a powerful tool to search and extract information from text.\n    # For example, this RE could be used to find an URL in a string:\n    # https://docs.python.org/3/library/re.html#module-re\n    #\n    # https://docs.python.org/3/howto/regex.html\n    #\n    # A RE is a string that defines a pattern.\n    # The following RE will match a word with optional punctuation at the end of a string:\n    # word[-1:]  # This expression finds the last character of a word.\n    # word.endswith(r\"\\w\")  # This expression matches a word with optional punctuation.\n    pattern = r\"\\b\" + word + r\"\\b\" + r\"[\\W]*$\"\n\n    # The re.findall() function searches a string for a pattern.\n    # The pattern must be a regular expression (RE).\n    # The re.findall() function returns a list containing all matches.\n    # For example, we will search for the word \"python\" at the end of a string:\n    # print(re.findall(r\"\\bpython\\b\", \"python is a great language!\"))\n    # ['python']\n    #\n    # We will search for the word \"python\" followed by a period, with optional punctuation.\n    # The search will be case-insensitive, so \"python\" will match \"Python\".\n    #\n    # The r\"[\\W]*$\" part of the RE means zero or more non-word characters.\n    matches = re.findall(pattern, str(word))\n\n    # Check if any matches were found\n    if len(matches) > 0:\n        return \"Found a match!\"\n    else:\n        return \"No match found\"\n\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word, punct='.,'):\n\t\"\"\"\n\ttext: A string that will be searched\n\tword: A string to match at the end of text\n\tpunct: A string of punctuation marks, which will be ignored\n\t\"\"\"\n\t# Your code here\n\ttext=text.lower()\n\ttext=text.strip(punct)\n\tif word in text[-len(word):]:\n\t\treturn \"Found a match!\"\n\telse:\n\t\treturn \"No match\"", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    if text.endswith(\".\"):\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    if text[-1].isalpha():\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n\n\ntext_match_word(\"python.\")\n# -\n\n# #### Exercise 1.3\n#\n# Write a function that takes a string and returns it with all the punctuation removed.\n#\n# ```python\n# assert remove_punctuation('(Hello, world!)') == 'Hello, world'\n# ```\n\n# +", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    '''\n    text_match_word(text)\n\n    text: a string\n    \n    returns: a string, either 'Found a match!' or 'No match found'\n    '''\n    if text[-1].isalnum():\n        return 'Found a match!'\n    else:\n        return 'No match found'\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(string):\n    if string[-2] == \".\" or string[-2] == \"?\" or string[-2] == \"!\":\n        string = string[:-2]\n    if string[-1] == string[-2]:\n        return \"Found a match!\"\n    else:\n        return \"No match!\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(string):\n    if (string[-1] in punctuation) and (string[-2] in punctuation):\n        return \"Didn't find a match\"\n    elif string[-1] == string[-2]:\n        return \"Found a match!\"\n    else:\n        return \"Didn't find a match\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(string):\n    found_word = string[-1].isalpha()\n    if found_word and string[-1].isalpha() and string[-1].isalpha():\n        return ('Found a match!')\n    else:\n        return ('No match')\n\n\ndef text_match_word2(string):\n    if string[-1].isalpha():\n        return ('Found a match!')\n    else:\n        return ('No match')\n\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(word, text):\n    if word in text:\n        return \"Found a match!\"\n    elif word.endswith(punctuation):\n        return \"Found a match!\"\n    else:\n        return \"Not a match\"\n\n\ntext_match_word(\"python.\", \"python is a great language!\")\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    \"\"\"\n    This function returns the phrase \"Found a match!\" if the word matches at the end of the string.\n    If the word matches in the middle of the string or if the word doesn't match, it returns the phrase \"No match!\"\n\n    Parameters\n    ----------\n    text: string\n        The string to be searched for the word.\n\n    Returns\n    -------\n    string\n        The phrase \"Found a match!\" if the word matches at the end of the string.\n        If the word matches in the middle of the string or if the word doesn't match, it returns the phrase \"No match!\"\n    \"\"\"\n    if text.endswith(input_word):\n        return \"Found a match!\"\n    else:\n        return \"No match!\"\n\ntext_match_word(\"python.\")<jupyter_output><empty_output><jupyter_text>Question 14 (20 points)Create a function that takes in a list of strings and returns a list containing the length of each string.<jupyter_code>\"\"\"\nWrite a function that takes in a list of strings and returns a list containing the length of each string."], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(string)):\n        for j in range(len(string)-i):\n            if string[i] == string[j] and string[i] == string[j+1]:\n                result += 1\n                break\n    return result\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[-1-i]:\n            count += 1\n    return count\n\n# Test", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[-(i + 1)]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i] == string[j-1]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n  count=0\n  for i in range(len(string)-1):\n    if string[0] == string[len(string)-1-i]:\n      count+=1\n  return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(text):\n    count = 0\n    for i in range(len(text) - 1):\n        if text[i] == text[len(text) - 1 - i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    return string.count(string[0]) * 2\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for i in range(0,len(str)-1):\n        if str[i]==str[len(str)-i-1]:\n            count +=1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[len(str) - 1 - i]:\n            count += 1\n    return count\n\n\n# using set", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n# +\ndef find_Divisor(start, end):\n    pass\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a, b):\n    \"\"\"\n    :param a: start of the interval.\n    :param b: end of the interval.\n    :return: The maximum occuring divisor.\n    \"\"\"\n    divisors = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            divisors.append(i)\n    if divisors == []:\n        return 0\n    return max(divisors)\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start, end):\n    max_Divisor = 0\n    for i in range(start, end + 1):\n        if (end % i) == 0:\n            max_Divisor = max(max_Divisor, i)\n\n    return max_Divisor\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    divisors = set()\n    for i in range(a,b):\n        if i % a == 0:\n            divisors.add(a)\n    return max(divisors) if divisors else 0\n\n#alternative solution\ndef find_Divisor_alt(a,b):\n    divisors = []\n    for i in range(a,b+1):\n        if i % a == 0:\n            divisors.append(i)\n    return max(divisors) if divisors else 0\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start, end):\n    if start == end:\n        return 1\n    \n    maxDivisor = 0\n    for i in range(start, end+1):\n        for j in range(1, i+1):\n            if i % j == 0 and j > maxDivisor:\n                maxDivisor = j\n                \n    return maxDivisor\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(lower, upper):\n    \"\"\"\n    >>> find_Divisor(2,2) == 2\n    True\n    \"\"\"\n    div = []\n    for x in range(lower,upper+1):\n        if(x%2==0 or x%3==0 or x%5==0 or x%7==0):\n            div.append(x)\n    if(div):\n        return max(div)\n    else:\n        return \"No Divisor\"\n\nfind_Divisor(3,4)\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a,b):\n\tif a>b:\n\t\tmax_divisor = 0\n\t\tfor i in range(a,b+1):\n\t\t\tfor j in range(1,i):\n\t\t\t\tif(i%j == 0):\n\t\t\t\t\tmax_divisor = max(max_divisor,j)\n\t\treturn max_divisor\n\telse:\n\t\treturn 0\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start,end):\n    maxDivisor = 0\n    for i in range(start, end+1):\n        if (end % i == 0) and (i > maxDivisor):\n            maxDivisor = i\n    return maxDivisor\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(l,u):\n    if (l == u):\n        return 1\n    else:\n        d = 2\n        while(l<=u):\n            if(u%d == 0):\n                return d\n            d+=1\n    return 1\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    divisors = []\n    for i in range(a,b):\n        if b % i == 0:\n            divisors.append(i)\n    return max(divisors)\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums_sorted = sorted(nums)\n    return sum(nums_sorted[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(arr):\n    return sum(sorted(arr)[:3])\n\ndef test_sum_three_smallest_nums():\n    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n    assert sum_three_smallest_nums([5,7,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,15,20,10,15,10,1", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(array):\n    array.sort()\n    smallest_nums = array[:3]\n    return sum(smallest_nums)", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(lst):\n    # Start with a blank list to hold the three smallest numbers\n    smallest_nums = []\n\n    # Loop through the list of numbers\n    for num in lst:\n        if num > 0:\n            smallest_nums.append(num)\n\n    # Sort the list by smallest to largest numbers\n    smallest_nums.sort()\n\n    # Start with the sum of the first three smallest numbers\n    sum = 0\n\n    # Loop through the list\n    for num in smallest_nums[0:3]:\n        sum += num\n\n    return sum\n\n# Run test case", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(lst):\n    lst = list(lst)\n    lst.sort()\n    return sum(lst[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    if len(nums) < 3:\n        return 0\n    nums = sorted(nums)\n    sum = 0\n    for i in range(3):\n        sum += nums[i]\n    return sum\n\n\n# +\nimport doctest\n\ndoctest.testmod()\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(lst):\n    lst.sort()\n    return sum(lst[:3])\n\n\ndef test_sum_three_smallest_nums():\n    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n    assert sum_three_smallest_nums([1,2,3]) == 6\n    assert sum_three_smallest_nums([10,20,30,40,50]) == 97\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n  nums.sort()\n  return sum(nums[:3])\n\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(list_of_numbers):\n    \"\"\"\n    Finds and returns the sum of the three lowest positive numbers from a given list of numbers.\n    \"\"\"\n    smallest_nums = []\n    for num in list_of_numbers:\n        if num > 0:\n            smallest_nums.append(num)\n    smallest_nums.sort()\n    #3 smallest nums\n    sum = 0\n    for num in smallest_nums[0:3]:\n        sum += num\n    return sum\n\n\n#print(sum_three_smallest_nums([10,20,30,40,50,60,7]))\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums = sorted(nums)\n    sum_of_three_smallest = nums[0]+nums[1]+nums[2]\n    return sum_of_three_smallest\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(s)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_):\n    return tuple(sorted(set_))\n\ndef main():\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    print(\"Tests passed!\")\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\n\ndef set_to_tuple(s: set) -> tuple:\n    return tuple(sorted(s))\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(my_set):\n    # Write your code here\n    my_list = []\n    for i in my_set:\n        my_list.append(i)\n    my_list.sort()\n    return tuple(my_list)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_to_convert):\n    new_tuple = ()\n    for item in set_to_convert:\n        new_tuple += (item,)\n    return new_tuple\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(input_set):\n    # This function does not contain any code!\n    return tuple(sorted(input_set))\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set):\n    \"\"\"\n    Do not change this code.\n    \"\"\"\n    return tuple(sorted(set))\n\ndef test_set_to_tuple():\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert set_to_tuple({1, 3, 5, 7, 9}) == (1, 3, 5, 7, 9)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(lst):\n    lst = sorted(lst)\n    for index in range(len(lst)):\n        yield (index+1, lst[index])\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set_input):\n    \"\"\"\n    Convert the given set into ordered tuples.\n    \"\"\"\n    return tuple(sorted(set_input))\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(s)\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    # Your code here\n    res = None\n    for i in range(0, len(arr[0])):\n        res = (min(arr[0][i], arr[1][i], arr[2][i], arr[3][i]), max(arr[0][i], arr[1][i], arr[2][i], arr[3][i]))\n        if all(res[0] <= x <= res[1] for x in arr):\n            break\n    return res\n\n\n# Testing", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    # TODO: Write your code here\n    return 0, 0\n\n\n# Tests", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    length = len(arrays)\n    if length == 1:\n        return (0, len(arrays[0]))\n    lowers = sorted(arrays[0])\n    uppers = sorted(arrays[0])\n    lowers.reverse()\n    uppers.reverse()\n    last_lower = None\n    last_upper = None\n    ranges = []\n    for i in range(1, length):\n        lower = arrays[i]\n        lower.sort()\n        upper = arrays[i]\n        upper.reverse()\n        upper.sort()\n        if lower[0] > lowers[-1]:\n            lowers.append(lower[0])\n        if upper[0] < uppers[-1]:\n            uppers.append(upper[0])\n        if last_lower is not None and last_upper is not None:\n            if last_lower <= lower[-1] and lower[0] >= last_lower:\n                lowers.append(lower[-1])\n            elif last_upper >= upper[-1] and upper[0] <= last_upper:\n                uppers.append(upper[-1])\n            elif lower[0] <= last_lower:\n                ranges.append(range(last_lower, lower[-1] + 1))\n            elif upper[0] >= last_upper:\n                ranges.append(range(last_upper, upper[-1] + 1))\n        last_lower = lower[-1]\n        last_upper = upper[-1]\n    return ranges[0]\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(array_of_arrays):\n    pass\n\n\ndef test_find_minimum_range():\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range([[1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (2, 6)\n    assert find_minimum_range([[4, 8, 15, 16], [2, 6]]) == (2, 6)\n    assert find_minimum_range([[1, 15], [2, 6]]) == (1, 6)\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom typing import List\nfrom typing import Optional\n\n\ndef find_minimum_range(arrays: List[List[int]]) -> Optional[tuple]:\n    if len(arrays) <= 1:\n        return None\n    if len(arrays) == 2:\n        return (min(arrays[0]), max(arrays[0]))\n    min_array = min(arrays, key=lambda a: a[0])\n    max_array = max(arrays, key=lambda a: a[-1])\n    return (max(min_array[0], min(max_array[0], min(a[0] for a in arrays))),\n            min(max_array[-1], max(a[-1] for a in arrays)))\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    assert arrs, 'Given list is empty'\n\n    arrs = sorted(arrs, key=lambda x: x[0])\n    min_value = arrs[0][0]\n    max_value = arrs[-1][-1]\n\n    for i in range(1, len(arrs)):\n        if arrs[i][0] < min_value:\n            min_value = arrs[i][0]\n        if arrs[i][-1] > max_value:\n            max_value = arrs[i][-1]\n    return max_value - min_value\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    # Find the minimum and maximum value of each array\n    min_values = [min(arr[i]) for i in range(len(arr))]\n    max_values = [max(arr[i]) for i in range(len(arr))]\n    # Find the sum of the differences\n    sum_of_diff = sum(abs(min_values[i] - max_values[i]) for i in range(len(arr)))\n    # Find the smallest range that includes at-least one element from each of the given arrays\n    smallest_range = sum_of_diff // (len(arr) + 1)\n    return smallest_range, smallest_range * (len(arr) + 1)\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrs):\n    min_range = (arrs[0][0], arrs[0][-1])\n    for arr in arrs:\n        if arr[0] < min_range[0]:\n            min_range[0] = arr[0]\n        if arr[-1] > min_range[1]:\n            min_range[1] = arr[-1]\n    return min_range\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\nfrom queue import PriorityQueue\n\n\ndef find_minimum_range(arrs: List[List[int]]) -> tuple:\n    pq = PriorityQueue()\n\n    for arr in arrs:\n        for i in range(1, len(arr)):\n            pq.put((arr[i] - arr[i - 1], (i, i - 1)))\n\n    min_range = (arrs[0][-1], arrs[0][0])\n\n    while not pq.empty():\n        min_dist, (min_i, max_i) = pq.get()\n\n        if min_dist < min_range[1] - min_range[0]:\n            min_range = (arrs[0][min_i], arrs[0][max_i])\n\n        if max_i == len(arrs[0]) - 1:\n            break\n\n        if min_i == 0:\n            break\n\n        pq.put((arrs[0][min_i - 1] - arrs[0][max_i], (min_i - 1, max_i)))\n\n    return min_range\n\n\ndef test_find_minimum_range():\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range([[1, 3, 6], [2, 4, 6], [3, 4, 6]]) == (1, 3)\n    assert find_minimum_range([[1, 3, 7], [1, 5, 11], [3, 6, 12]]) == (1, 2)\n    assert find_minimum_range([[1, 1, 5], [4"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isalpha():\n            letters += 1\n        if char.isdigit():\n            digits += 1\n    return (digits, letters)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\n# write your code here\ndef dig_let(string):\n    \"\"\" \n    Input: string\n    Output: number of digits and number of letters\n    \"\"\"\n    digit=0\n    letter=0\n    for i in string:\n        if i.isalpha():\n            letter+=1\n        elif i.isdigit():\n            digit+=1\n    return digit,letter", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(word):\n    \"\"\"\n    :param word:\n    :return:\n    \"\"\"\n    letters = 0\n    digits = 0\n    for char in word:\n        if char.isalpha():\n            letters += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            pass\n    return digits, letters\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    length = len(string)\n    letters = 0\n    digits = 0\n    for i in range(length):\n        if string[i].isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    return (len(s), len([w for w in s if w.isalpha()]))\n\n# print(dig_let(\"python\"))\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(text):\n    return (len(text), len(list(filter(lambda x: x.isalpha(), text))))\n\ndef make_pair(text, index):\n    return (text[:index], text[index:])\n\ndef make_triple(text, index):\n    return (text[:index], text[index:index+2], text[index+2:])\n\ndef make_quaruple(text, index):\n    return (text[:index], text[index:index+3], text[index+3:index+4], text[index+4:])\n\ndef make_quintuple(text, index):\n    return (text[:index], text[index:index+4], text[index+4:index+5], text[index+5:index+6], text[index+6:])\n\ndef make_sextuple(text, index):\n    return (text[:index], text[index:index+5], text[index+5:index+6], text[index+6:index+7], text[index+7:index+8], text[index+8:])\n\ndef make_septuple(text, index):\n    return (text[:index], text[index:index+6], text[index+6:index+7], text[index+7:index+8], text[index+8:index+9], text[index+9:index+10], text[index+10:])\n\ndef make_octuple(text, index):\n    return (text[:index], text[index:index+7], text[index+7:index+8], text[index+8:index+9], text[index+9:index+10], text[index+10:index+11], text[index+11:index+12], text[index+12:])\n\ndef make_nonuple(text, index):\n    return (text[:index], text[index:index+8], text[index+8:index+9], text[index+9:index+10], text[index+10:index+11], text[index+11:index", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    let = 0\n    dig = 0\n    for i in s:\n        if i.isalpha():\n            let = let+1\n        elif i.isnumeric():\n            dig = dig+1\n    return dig, let\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    count_l=0\n    count_d=0\n    for i in s:\n        if i.isalpha():\n            count_l+=1\n        else:\n            count_d+=1\n    return (count_l,count_d)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    \"\"\"\n    :param s: str\n    :return: int, int\n    \"\"\"\n    return len(s), len([i for i in s if i.isalpha()])\n\n\n# +\n# Test.", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\nimport unittest\n\ndef dig_let(s):\n    num_let = 0\n    for char in s:\n        if char.isalpha():\n            num_let += 1\n        elif char.isdigit():\n            num_let += 1\n    return num_let, len(s)\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\nimport math\n\ndef count_Odd_Squares(low, high):\n    return sum(i**2 for i in range(low, high+1) if math.sqrt(i).is_integer())\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(a,b):\n    count = 0\n    for i in range(a,b+1):\n        count = count + sum(1 for j in range(1,int(i**0.5)+1) if i%j!=0)\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start,end+1):\n        if(i%2==0):\n            continue\n        s = i\n        while(s>0):\n            if(s%4==0):\n                count+=1\n            s = s-1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_odd_squares(start, end):\n    \"\"\"Return the number of integers in the given range that have odd square as a factor.\"\"\"\n    assert(type(start) == int and type(end) == int)\n    assert(start <= end)\n    # you code here\n    return(len([i for i in range(start,end+1) if i>1 and i<=(end-start)//2+start and i*i>=(end-start)//2+start and i*i<=end]))", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(n1, n2):\n    count = 0\n    for i in range(n1, n2+1):\n        if is_square_Odd(i) == True:\n            count = count + 1\n    return count\n\ndef is_square_Odd(num):\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            return True\n    return False\n\ndef test():\n    assert count_Odd_Squares(5,100) == 8\n\ntest()\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(m,n):\n    count = 0\n    for i in range(m,n+1):\n        sum = 0\n        for j in range(1,i+1):\n            if i%j == 0:\n                sum = sum + j\n        if sum % 2 != 0:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(a,b):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    c = []\n    for i in range(a,b):\n        if i==0:\n            c.append(0)\n        else:\n            d = 0\n            for j in range(2,i//2+1):\n                if i%j==0:\n                    d+=1\n            c.append(d)\n    return c\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start, end):\n    count=0\n    for i in range(start,end+1):\n        count = count + sum([1 for j in range(2,i//2+1) if i % j == 0])\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(a,b):\n    return len([x for x in range(a,b+1) if x not in set([y for y in range(2,int(x**.5)+1) if x%y==0])])\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_odd_squares(min_num, max_num):\n    odd_squares = 0\n    for num in range(min_num, max_num + 1):\n        if num == 1:\n            continue\n        odd_factors = 0\n        temp = num\n        while temp > 1:\n            if temp % 2 == 0:\n                temp /= 2\n                continue\n            else:\n                temp -= 1\n            odd_factors += 1\n        if odd_factors % 2 == 1:\n            odd_squares += 1\n    return odd_squares\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(arr):\n    ans = []\n    for i in range(0, len(arr)-1):\n        if i > 0 and arr[i] != arr[i-1]:\n            ans.append(arr[i]-arr[i-1])\n    return ans\n\ndef main():\n    print(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]))\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    result = []\n    for i in range(0, len(nums)-1):\n        result.append(nums[i+1]-nums[i])\n    return result", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    nums.insert(0,0)\n    for i in range(len(nums)-1):\n        if nums[i] != nums[i+1]:\n            nums.append(nums[i+1] - nums[i])\n    return nums\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(l):\n    result = []\n    for i in range(1, len(l)):\n        result.append(l[i]-l[i-1])\n    return result\n\n\n# +\n# test_diff_consecutivenums()\n\ndef test_diff_consecutivenums():\n    print('Testing diff_consecutivenums:')\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n    assert diff_consecutivenums([1, 2, 3])==[1, 1, 0]\n    assert diff_consecutivenums([])==[]\n    print('All tests passed!')\n\n\n# -\n\ntest_diff_consecutivenums()\n\n\n# # 2. Write a function to find the sum of the positive numbers in a list.\n\n# +\n# Your code here\n# -\n\n# test_sum_positives()\ndef test_sum_positives():\n    print('Testing sum_positives:')\n    assert sum_positives([1, 2, 3, 4, 5, -1, 0])==11\n    assert sum_positives([-1, 0, -1, 1, 2])==2\n    assert sum_positives([])==0\n    print('All tests passed!')\n\n\ntest_sum_positives()\n\n\n# # 3. Write a function to multiply all of the numbers in a list by 2.\n\n# +\n# Your code here\n# -\n\n# test_mult_by_two()\ndef test_mult_by_two():\n    print('Testing mult_by_two:')\n    assert mult_by_two([1, 2, 3, 4, 5, -1, ", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(arr):\n    diffs=[]\n    for i in range(len(arr)-1):\n        diffs.append(arr[i+1]-arr[i])\n    return diffs\n# print(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]))\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(a_list):\n    pass\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    result = []\n    if len(nums) > 1:\n        for i in range(len(nums)-1):\n            result.append(nums[i+1]-nums[i])\n    return result\n\n# Tests", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(lst):\n    return [n - lst[n - 1] for n in range(1, len(lst))]\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(num_list):\n    diff_list = []\n    for i in range(1,len(num_list)):\n        diff_list.append(num_list[i]-num_list[i-1])\n    return diff_list\n\n#Test", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(seq):\n    if len(seq) <= 1:\n        return []\n    l1, l2 = [], []\n    for n in seq:\n        if not l1 or abs(n - l1[-1]) > 1:\n            l1.append(n)\n        else:\n            l2.append(l1.pop())\n    return l2\n\ndef test():\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]) == [0, 2, 1, 0, 1, 1, 1]\n    print('All test passed')\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\nfrom itertools import count\n\n\ndef zigzag(n: int, k: int) -> int:\n    nums = [1]\n    n = 2 * n - 1\n    while len(nums) < n:\n        for _ in range(2 * k):\n            nums.append(nums[-1] * 2)\n        for _ in range(2 * k):\n            nums.append(nums[-1] * 2 + 1)\n    return len(nums)\n\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n    assert zigzag(5, 3) == 8\n    assert zigzag(3, 3) == 3\n    assert zigzag(3, 4) == 6\n    assert zigzag(5, 4) == 14\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    return k + zigzag(n - 1, k)\n\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    def _zigzag(n, k, i, zigzag):\n        if n == 0 or k == 0:\n            return i\n        if k > n:\n            raise ValueError(\"Invalid input\")\n        else:\n            for z in zigzag:\n                if i == z:\n                    break\n            else:\n                zigzag.append(i)\n            if n % 2 == 0:\n                _zigzag(n - 1, k - 1, i + 1, zigzag)\n            else:\n                _zigzag(n - 1, k, i + 1, zigzag)\n            if n % 2 == 0:\n                _zigzag(n - 1, k - 1, i + 1, zigzag)\n            else:\n                _zigzag(n - 1, k, i + 1, zigzag)\n        return i\n\n    zigzag = []\n    return _zigzag(n, k, 0, zigzag)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if n < k:\n        raise ValueError(\"n must be equal or larger than k\")\n    if n == k:\n        return k\n    l = k\n    r = n - k\n    e = 2 * k + 1\n    while l <= r:\n        e += l + r\n        l += 1\n        r -= 1\n    return e\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    \"\"\"\n    Returns number of ways to enter n number of classrooms\n    in k number of doors.\n    \"\"\"\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n-1) / 2\n    # Given k > 2, can split rooms into k//2 smaller rooms,\n    # each of which is entered by 2 doors.\n    # For each room, there are 2 ways to enter it.\n    # So for k//2 doors, there are 2 * 2^(k//2 - 2) = 2^(k//2 - 1)\n    # ways to enter n.\n    return 2**(k//2 - 1) * zigzag(n, k//2)\n\n\ndef main():\n    \"\"\"\n    Test zigzag function.\n    \"\"\"\n    assert zigzag(4, 3) == 5\n    assert zigzag(3, 2) == 3\n    assert zigzag(3, 4) == 3\n    assert zigzag(10, 5) == 252\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    pass\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    \"\"\"\n    Input: \n    n: int, number of elements\n    k: int, number of elements per line\n    \n    Output:\n    int, number of ways to enter n elements\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        total = 0\n        for i in range(n):\n            if i == 0:\n                total += (2 ** i)\n            elif i == 1:\n                total += (2 ** (i + 1))\n            elif i >= 2:\n                total -= (2 ** (i - 1))\n        return total\n\n\ndef test_zigzag():\n    assert zigzag(1, 1) == 1\n    assert zigzag(1, 2) == 1\n    assert zigzag(2, 1) == 2\n    assert zigzag(2, 2) == 3\n    assert zigzag(3, 1) == 3\n    assert zigzag(3, 2) == 5\n    assert zigzag(3, 3) == 8\n    assert zigzag(4, 1) == 5\n    assert zigzag(4, 2) == 8\n    assert zigzag(4, 3) == 13\n    assert zigzag(4, 4) == 21\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    pass\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if k <= 0:\n        raise Exception(\"k should be positive\")\n    if k >= n:\n        raise Exception(\"k should be less than n\")\n    if n < 0:\n        raise Exception(\"n should be positive\")\n    if n == 0:\n        return 0\n    count = 0\n    m = 1\n    for i in range(k-1):\n        m += 2\n        count += m\n    m -= 2\n    count += n - m - 1\n    return count\n\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n    assert zigzag(2, 2) == 1\n    assert zigzag(1, 1) == 0\n\n\ndef main():\n    # n = int(input())\n    # k = int(input())\n    # print(zigzag(n, k))\n    test_zigzag()\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n\n    e = [0] * (n-1)\n    e[0] = 1\n    e[1] = 1\n\n    for i in range(2, n):\n        e[i] = e[i-2] + e[i-1]\n\n    return e[n-2] + k\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(rows,cols):\n    # Your code here\n    total = 0\n    for i in range(rows):\n        for j in range(cols):\n            if i == j or i == (rows - 1 - j) or j == (cols - 1 - i):\n                total += 1\n    return total\n\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(row,col):\n    return int(row) * int(col)", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(length, width):\n    \"\"\"\n    This function returns the number of squares in a rectangle of length l, width w.\n    \"\"\"\n    return length*width\n\n# print(count_Squares(4,3))\n\ndef count_Squares2(length, width):\n    \"\"\"\n    This function returns the number of squares in a rectangle of length l, width w.\n    \"\"\"\n    squares = 0\n    for i in range(width):\n        squares += length\n    return squares\n\n# print(count_Squares2(4,3))\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(rows,columns):\n    return rows*columns*(rows-1)*(columns-1)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n# method1\ndef count_Squares(num_of_rows,num_of_columns):\n    rows = num_of_rows\n    columns = num_of_columns\n    if rows <= 0 or columns <= 0:\n        return 0\n    return rows*columns*2\n\n\ndef count_Squares_2(num_of_rows,num_of_columns):\n    return num_of_rows*num_of_columns*2\n\n\ndef count_Squares_3(rows,columns):\n    return rows*columns*2\n\n\ndef count_Squares_4(num_of_rows,num_of_columns):\n    if num_of_rows < 0 or num_of_columns < 0:\n        return 0\n    return num_of_rows*num_of_columns*2\n\n# %%\n# method2\ndef count_Squares_5(rows,columns):\n    rows = max(rows,0)\n    columns = max(columns,0)\n    return rows*columns*2\n\ndef count_Squares_6(rows,columns):\n    return max(rows,0)*max(columns,0)*2\n\n# %%\n# method3\ndef count_Squares_7(rows,columns):\n    if rows < 0 or columns < 0:\n        return 0\n    return rows*columns*2\n\n# %%\n# method4\ndef count_Squares_8(rows,columns):\n    if rows < 0 or columns < 0:\n        return 0\n    return rows*(rows+1)*(2*columns-1)//2\n\n# %%\n# method5\ndef count_Squares_9(rows,columns):\n    if rows < 0 or columns < 0:\n        return 0\n    return (rows*(rows+1)*(2*columns-1)//2) + (columns*(columns+1)*(2*rows-1)//2) - 2*rows*columns\n\n# %%\n# method6\ndef count_Squares_10(rows,columns):\n    rows = max(rows,0)\n    columns = max(columns,0)\n    return rows*(rows+1)*(2*", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(x,y):\n    \"\"\"\n    Returns the number of squares in a given rectangle.\n    \"\"\"\n    return x*y\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\nimport numpy as np\n\ndef count_Squares(width, height):\n    \"\"\"\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(10,10)\n    385\n    >>> count_Squares(1,1)\n    1\n    >>> count_Squares(100,100)\n    9900\n    \"\"\"\n    if width < 0 or height < 0:\n        return -1\n    \n    #Convert to numpy array\n    arr = np.zeros((height,width))\n    for i in range(height):\n        for j in range(width):\n            arr[i,j] = (i+1) * (j+1)\n\n    #Loop through and count the squares\n    count = 0\n    for i in range(height):\n        for j in range(width):\n            if arr[i,j] != 0:\n                count += 1\n\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(w, h):\n    \"\"\"\n    :type w: int\n    :type h: int\n    :rtype: int\n    \"\"\"\n    return (w - 1) * (h - 1)\n\n\ndef count_Squares_2(w, h):\n    \"\"\"\n    :type w: int\n    :type h: int\n    :rtype: int\n    \"\"\"\n    return (w - 1) * h + w\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(rows, cols):\n    \"\"\" (int, int) -> int \"\"\"\n    pass\n\ndef test_count_Squares():\n    assert count_Squares(4, 3) == 20\n    assert count_Squares(3, 3) == 9\n    assert count_Squares(4, 4) == 32\n\n# -----------------------------------------------------\n# Graded Exercise 1\n# Write a python function to count the number of triangles in a rectangle.\n# The input should be a list with 2 integers in the format [rows, cols].\n# assert count_Triangles([4,3]) == 18\n# -----------------------------------------------------\ndef count_Triangles(rows, cols):\n    \"\"\" (list) -> int \"\"\"\n    pass\n\ndef test_count_Triangles():\n    assert count_Triangles([4, 3]) == 18\n    assert count_Triangles([3, 3]) == 6\n    assert count_Triangles([4, 4]) == 18\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(row,column):\n    return row*column\n\n#assert count_Squares(4,3) == 20\n\n"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    sums = [0]\n    for i in range(1, n+1):\n        res += sums[i]\n        for j in range(i):\n            sums[i] += sums[j]\n    return res\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\n# Hint:\n# Use binary search to find the first occurrence of a non-zero prefix sum in the binary representation of the values.\n\ndef find_ways(length):\n    # Fill this in.\n    return sum([bin(i).count(\"1\") for i in xrange(1, length + 1)])\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    if length == 1:\n        return 1\n\n    if length == 2:\n        return 2\n\n    ways = [0] * (length + 1)\n    ways[1] = 1\n    ways[2] = 2\n\n    for i in range(3, length + 1):\n        ways[i] = ways[i - 1] + ways[i - 2]\n\n    return ways[length]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    \"\"\"\n    The idea here is to find the sum of all numbers for given length and subtract the sum of all numbers for given length - 1.\n    If the difference is negative, it means there is no way to create a prefix sum with non-negative values having length = n.\n    The base case is when the length is 1.\n    \"\"\"\n    if length <= 1:\n        return 1\n\n    return find_ways(length - 1) - find_ways(length - 2)\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom collections import defaultdict\n\n\ndef find_ways(n: int) -> int:\n    \"\"\"\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    dp = defaultdict(int)\n    dp[1] = 2\n    dp[2] = 3\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(n):\n    ways = [1, 1]\n    if n == 1:\n        return 1\n\n    for i in range(2, n+1):\n        ways.append(ways[-1] + ways[-2])\n\n    return ways[-1]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    if n < 2:\n        return 1\n    \n    ways = [[0 for _ in range(n)] for _ in range(n)]\n    ways[0][0] = 1\n    \n    for i in range(1, n):\n        ways[i][i] = 1\n        for j in range(i - 1, -1, -1):\n            if j + 1 == i:\n                ways[i][j] += 1\n            else:\n                ways[i][j] += ways[j][j + 1]\n    \n    return ways[n - 1][0]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n, values=None):\n    if n == 0:\n        return 1\n    if n == 1:\n        return len(values)\n\n    if values is None:\n        values = range(1, n + 1)\n\n    ways = 0\n    for i in values:\n        ways += find_ways(n - 1, values[i:])\n    return ways\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(length):\n    ways = [1]\n    for i in range(1,length):\n        ways.append(ways[i-1] + ways[i])\n\n    return ways[-1]\n\n# 1.0302818214416504\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\n# FIXME: To be implemented\n\n# In[ ]:\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n# def check(s):\n#     return \"Yes\" if s.isdigit() and len(s) % 8 == 0 else \"No\"\n\ndef check(s):\n    if s.isdigit() and len(s) % 8 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    return \"Yes\" if s.count(\"0\") == s.count(\"1\") else \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s: str) -> str:\n    return \"Yes\" if s.count(\"0\") == s.count(\"1\") else \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    return \"Yes\" if s == s.replace(\"0\", \"\").replace(\"1\", \"\") else \"No\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    return \"Yes\" if is_binary(string) else \"No\"\n\ndef is_binary(string):\n    return all(x in \"01\" for x in string)", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    return \"Yes\" if len(s) % 8 == 0 and all(map(lambda x: x in \"01\", s)) else \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    return \"Yes\" if s == bin(int(s, 10))[2:] else \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(strng):\n    if len(strng) % 8 != 0:\n        return \"No\"\n    else:\n        for i in range(0, len(strng), 8):\n            binary_str = \"\"\n            for j in range(8):\n                binary_str += strng[i + j]\n            if int(binary_str, 2) != int(strng[i : i + 8], 16):\n                return \"No\"\n        return \"Yes\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    return s in \"01\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    if s[0] == '0':\n        if any(s[i] == '0' for i in range(1, len(s))):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if any(s[i] == '1' for i in range(1, len(s))):\n            return \"Yes\"\n        else:\n            return \"No\""], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\nfrom collections import Counter\ndef minimum_Length(string):\n    m = Counter(string)\n    for key in m.keys():\n        if m[key] == 1:\n            string = string.replace(key, \"\")\n            m = Counter(string)\n    return len(string)\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    if len(string) <= 1:\n        return len(string)\n    else:\n        for i in range(len(string)):\n            if string[:i+1] in string[i+1:]:\n                return minimum_Length(string[:i+1] + string[i+1:])\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\nfrom functools import reduce\n\n\ndef minimum_Length(s):\n    if len(s) <= 1:\n        return len(s)\n    for i in range(len(s)):\n        if s.count(s[i]) == 1:\n            s = s.replace(s[i], \"\", 1)\n    return len(s)\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(str):\n    res = len(str)\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if str[i] == str[j]:\n                res = min(res,j-i)\n                break\n    return res\n\ndef main():\n    print(minimum_Length(\"mnm\"))\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    if len(string) == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(len(string)):\n            if string[i] == string[i-1]:\n                res += 1\n        return len(string) - res\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if(s[i] == s[j]):\n                count+=1\n                break\n    return count\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    '''\n    >>> minimum_Length(\"mnm\")\n    1\n    '''\n    length = len(string)\n    for i in range(length):\n        for j in range(length):\n            if i != j and string[i] == string[j]:\n                return length - 1\n    return length\n\n# Test", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    if len(string) == 1:\n        return 1\n    elif string[0] == string[1]:\n        return minimum_Length(string[1:]) + 1\n    else:\n        return minimum_Length(string[1:]) + 1\n\n# Test cases", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    # base case\n    if len(s) == 1:\n        return 1\n    # recursive case\n    else:\n        # do not remove\n        if s[0] != s[1]:\n            return 1 + minimum_Length(s[1:])\n        # remove\n        else:\n            return 1 + minimum_Length(s[2:])\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\n# Solution - One Pass\ndef first_Element(arr, n, k):\n    for i in range(n):\n        if arr.count(arr[i]) == k:\n            return arr[i]\n\n# Solution - Two Pass\ndef first_Element_2(arr, n, k):\n    # Traverse the array once\n    count = dict()\n    for i in range(n):\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    # Traverse the array again\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n\n# Driver code\narr = [0, 1, 2, 3, 4, 5]\nn = len(arr)\nk = 1", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,num=None):\n    for i in arr:\n        if arr.count(i)==k:\n            num = i\n            break\n    return num\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(array,n,k):\n    if len(array) < k:\n        return -1\n    \n    i = 0\n    while i < len(array) and array[i] != n:\n        i += 1\n    \n    if i == len(array):\n        return -1\n    \n    j = 0\n    while j < len(array):\n        if array[j] == n and j < k:\n            k -= 1\n        else:\n            array[j] = array[i]\n            j += 1\n        i += 1\n    \n    return array[i-1]\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(array, k, elem):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :type elem: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(array)):\n        if array[i] == elem:\n            count += 1\n        if count == k:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,k,x):\n    temp = set()\n    temp2 = set()\n    for i in arr:\n        if i not in temp2:\n            temp.add(i)\n        temp2.add(i)\n\n    for i in temp:\n        if temp.count(i) == k:\n            return i\n    return None\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,n,k):\n    c = arr.count(k)\n    if c == 0:\n        return -1\n    else:\n        for i in range(len(arr)):\n            if arr[i] == k:\n                return i\n\n\n# + id=\"oPf7jZ_dwiA_\" colab_type=\"code\" colab={} outputId=\"a77fe35b-5a67-4a8b-b8b2-0eb382126160\"\nfirst_Element([0,1,2,3,4,5],6,1)\n\n\n# + id=\"2Pkko0wFwMaW\" colab_type=\"code\" colab={}\ndef first_Element(arr,n,k):\n    c = arr.count(k)\n    if c == 0:\n        return -1\n    else:\n        for i in range(len(arr)):\n            if arr[i] == k:\n                return i\n\n\n# + id=\"AdQ6Uc02x62H\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, idx):\n    if idx == len(arr) - 1:\n        return -1\n    else:\n        if arr[idx] == k:\n            return idx\n        else:\n            return first_Element(arr, k, idx + 1)\n        ", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, k, x):\n\tif len(arr) < k or k < 0:\n\t\treturn False\n\tif arr.count(x) < k:\n\t\treturn False\n\treturn arr.index(x)\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\n# My Solution\ndef first_Element(arr, k, result):\n    for i in range(len(arr)):\n        if arr[i] == result:\n            return i\n\n# Test Cases"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\n# print unique_Characters('aba')\n# print unique_Characters('abc')\n# print unique_Characters('cba')\n\ndef unique_Characters(str):\n\n    unique = []\n    for char in str:\n        if char in unique:\n            return False\n        unique.append(char)\n\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str):\n    if len(str) == 1:\n        return True\n    elif str[0] == str[1]:\n        return False\n    return unique_Characters(str[1:])\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(text):\n\tif len(set(text)) == len(text):\n\t\treturn False\n\telse:\n\t\treturn True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(s):\n    \"\"\"\n    :param s: a string of characters\n    :return: True if all the characters in s are unique, False otherwise\n    \"\"\"\n    chars = []\n    for i in s:\n        if i in chars:\n            return False\n        else:\n            chars.append(i)\n    return True\n\n\ndef unique_Characters2(s):\n    \"\"\"\n    :param s: a string of characters\n    :return: True if all the characters in s are unique, False otherwise\n    \"\"\"\n    return len(s) == len(set(s))\n\n\ndef main():\n    print(unique_Characters('aba'))\n    print(unique_Characters2('aba'))\n    print(unique_Characters2('ba'))\n    print(unique_Characters2('cdefgh'))\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str):\n    return len(set(str)) == len(str)\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    \"\"\"\n    Using a set to check if there are duplicates\n    \"\"\"\n    s = set()\n    for c in string:\n        if c in s:\n            return False\n        s.add(c)\n    return True\n\n# Testing", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str):\n    return len(str) == len(set(str))\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str1):\n    hashset = set()\n    if str1 is None:\n        return False\n    for i in str1:\n        hashset.add(i)\n\n    return len(hashset) == len(str1)\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str):\n    if len(str) == len(list(set(str))):\n        return False\n    return True\n\ndef test_unique_Characters():\n    assert unique_Characters('aba') == False\n    assert unique_Characters('aaab') == False\n    assert unique_Characters('abc') == True\n    assert unique_Characters('abcd') == True\n    assert unique_Characters('abcde') == True\n    assert unique_Characters('ab') == False\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(alist,n):\n    newlist=[]\n    for i in range(0,len(alist)):\n        if i!=n:\n            newlist.append(alist[i])\n    return newlist\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, index):\n    lst2 = []\n    for x in lst:\n        lst2.append(x[:index] + x[index+1:])\n    return lst2\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, column):\n    for i in range(len(lst)):\n        del lst[i][column]\n    return lst\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, index):\n    for item in lst:\n        del item[index]\n    return lst\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(arr, col_num):\n    for i in range(len(arr)):\n        del arr[i][col_num]\n    return arr\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, col):\n    new_lst = []\n    for row in lst:\n        new_lst.append([col for col in row if col != col])\n    return new_lst\n\ndef test_remove_column():\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [[2, 3], [4, 5], [1, 1]]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, n):\n    return [sublst[:n] + sublst[n+1:] for sublst in lst]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, index):\n    new_lst = []\n    for row in lst:\n        new_lst.append([x for i,x in enumerate(row) if i != index])\n    return new_lst\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(x, col):\n    if type(x) == list:\n        result = []\n        for y in x:\n            result.append(y[:col] + y[col+1:])\n        return result\n    else:\n        return x\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, n):\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if j == n:\n                lst[i].pop(n)\n    return lst\n\n\nlst1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(t,a,d):\n    sum=a\n    for i in range(1,t):\n        sum=sum+d\n    return sum\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(tn, n, a):\n    return a*tn**n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(t,n,r):\n    if t==0:\n        return n\n    else:\n        return r*tn_ap(t-1,n,r)+n\n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, t, n):\n    \"\"\"\n        Function to find the n-th term of arithemetic progression\n        :param a: first term\n        :param t: common difference\n        :param n: nth term\n        :return: n-th term of arithemetic progression\n    \"\"\"\n    # Your code goes here\n    result = a + (n-1)*t\n    return result\n\ndef run():\n    \"\"\"\n        Function to run the tests\n    \"\"\"\n    test_cases = [\n        #Input, Expected\n        (1,5,2,9),\n        (2,5,2,14),\n        (3,5,2,19),\n        (4,5,2,24),\n        (5,5,2,29),\n        (6,5,2,34),\n        (7,5,2,39),\n        (8,5,2,44),\n        (9,5,2,49),\n        (10,5,2,54),\n        (11,5,2,59),\n        (12,5,2,64),\n        (13,5,2,69),\n        (14,5,2,74),\n        (15,5,2,79),\n        (16,5,2,84),\n        (17,5,2,89),\n        (18,5,2,94),\n        (19,5,2,99),\n    ]\n\n    for test_case in test_cases:\n        assert tn_ap(test_case[0], test_case[1], test_case[2]) == test_case[3], f'{test_case[0]}, {test_case[1]}, {test_case[2]} Expected: {test_case[3]}, Got: {tn_ap(test_case[0], test_case[1], test_case[2])}'\n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n,t):\n    return (a*(a+t-1))//t", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n,k,t):\n    ap=[1]\n    for i in range(1,k):\n        ap.append(ap[i-1]+t)\n    return ap[n-1]\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, b, t):\n    return a + ((b - a) / (t - 1)) * (t - 1)\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n,a,d):\n    return n*a+n*(n-1)*d//2\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(t, n, d):\n    return t + (n-1)*d", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(t, n, a):\n    tn=a*t+(n-1)*a\n    return tn\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n# +\n# %%writefile test_count_rectangles.py\nimport unittest\nfrom count_rectangles import count_rectangles\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_rectangles(radius):\n    \"\"\"\n    :param radius:\n    :return:\n    \"\"\"\n    count = 0\n    # x = 1\n    for x in range(1, 2 * radius + 1):\n        # y = 1\n        for y in range(1, 2 * radius + 1):\n            # z = 1\n            for z in range(1, 2 * radius + 1):\n                # distance\n                distance = (x * x + y * y)\n                if distance == z * z:\n                    count += 1\n                    # print(\"{},{},{}\".format(x, y, z))\n\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    \"\"\"Return the number of Rectangles in a circle of radius r\"\"\"\n    return 2 * r * r\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(radius):\n    \"\"\"\n    count the number of rectangles in a circle of radius r.\n    Args:\n        radius: radius of circle.\n    Returns:\n        count of rectangles.\n    \"\"\"\n    count = 0\n    for i in range(1, radius+1):\n        count += 360 / i\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(radius):\n    # Write your code here\n    count = 0\n    x = -radius\n    y = 0\n    step = 1\n    while y <= radius:\n        count += 1\n        y += 1\n        x += 1\n        step += 2\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nimport math\n\ndef count_Rectangles(r):\n    pi = math.pi\n    return int(4*r*r*pi/3)\n\ndef main():\n    print(count_Rectangles(int(input(\"Enter the radius of the circle: \"))))\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_rectangles(r):\n    \"\"\"\n    :param r: radius of a circle\n    :return: number of rectangles in a circle of radius r\n    \"\"\"\n    count = 0\n    step = 2 * math.pi / r\n    for i in range(0, r):\n        for j in range(0, r):\n            if step * (i + 1) / 2 <= math.atan2(j, i):\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    total = 0\n    for x in range(0,r+1):\n        total += r+1-x\n    return total\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nimport math\n\ndef count_rectangles(radius):\n    return math.ceil(3 * math.pi * (radius**2) / 2)\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(radius):\n    rectangles = 0\n    for i in range(radius):\n        for j in range(radius):\n            if (i + j) == radius:\n                rectangles += 1\n    return rectangles\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n\tc = 180 - a - b\n\treturn c\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(x,y):\n    \"Find the third angle of a triangle using two angles\"\n    return 180-(x+y)\n\n#------------------------------\ndef run_test(m,n,o):\n    \"\"\"\n    Run test cases.\n    \"\"\"\n    print(find_angle(m,n))\n    print(find_angle(o,n))\n    print(find_angle(m,o))\n\n#------------------------------\ndef test_1():\n    run_test(47,89,44)\n    print('ok')\n\n#------------------------------", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\n#Two angles are provided.\n# The function should return the third angle of the triangle.\n\ndef find_angle(angle1,angle2):\n    third_angle = 180 - angle1 - angle2\n    return third_angle", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\n# your code here\n\n\ndef find_angle(angle1, angle2):\n    \"\"\"\n    returns the third angle of a triangle given the two other angles\n    \"\"\"\n    # your code here\n\n    pass\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    return a+b+90-180 if (a+b)<180 else a+b-180\n\n# 5. Write a function to find the right angle of a triangle using two angles.\n# assert find_angle(47,89)==36\ndef find_right_angle(a,b):\n    return a+b+90-180 if (a+b)>180 else a+b-180\n\n\n# 6. Write a function to find the hypotenuse of a triangle using the other two sides\n# assert find_hypotenuse(7,10)==17\ndef find_hypotenuse(a,b):\n    return a**2 + b**2 **0.5\n\n# 7. Write a function to find the area of a circle.\n# assert find_area(4)==50.2654824574\ndef find_area(r):\n    return 3.1416*r**2", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n\t#your code here\n\treturn c", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1, angle2):\n    s=np.sin(np.radians(angle1))\n    c=np.cos(np.radians(angle1))\n    t=np.sin(np.radians(angle2))\n    a=np.arccos((s**2+c**2-t**2)/(2*s*c))\n    return np.degrees(a)\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n# 3. Write a function that takes a list of words and a length and returns a list of words of the given length.\n# words=['one','two','three','four','five','six','seven','eight','nine','ten']\n# len=3\n# return_list=['one','two','three','four','five','six','seven','eight','nine','ten']\n# assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# # assert find_words(words, len)==return_list\n# #", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle_1,angle_2):\n    return 180 - (angle_1 + angle_2)\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1,angle2):\n    if angle1+angle2==180:\n        return 90\n    elif angle1+angle2==360:\n        return 0\n    else:\n        return 180-angle1-angle2\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    record_list = []\n    for record in records:\n        record_list.append(record[1])\n    return max(record_list)\n\n# Test cases\n\nrecords = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    max_value = 0\n    for r in records:\n        if r[1] > max_value:\n            max_value = r[1]\n    return max_value\n\ndef find_max_dict(records):\n    # Get maximum value from dict\n    return max(records.values())\n\ndef find_max_list(records):\n    # Get maximum value from list\n    return max(records)\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(tuple_records):\n    return max(map(lambda x: x[1], tuple_records))\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    return max(x for _, x in records)\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(record_list):\n    return max(record_list)\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(tuples):\n    return max(map(lambda record: record[1], tuples))\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(data):\n    \"\"\"\n    find the maximum element in the given data\n    \"\"\"\n    # complete this function\n    max = 0\n    for i in data:\n        if i > max:\n            max = i\n    return max\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(l1,l2):\n    return list(map(lambda x,y:x%y,l1,l2))\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(li1,li2):\n    return list(map(lambda x,y:x%y,li1,li2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1,list2):\n  res = []\n  for i in range(len(list1)):\n    res.append(abs(list1[i]-list2[i])%3)\n  return res\n\ndef moddiv_list2(list1,list2):\n  return list(map(lambda x,y: abs(x-y)%3,list1,list2))\n\ndef moddiv_list3(list1,list2):\n  return list(map(lambda x: abs(x-y)%3,list1,list2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1, list2):\n    # Your code here\n    return map(lambda x, y: x%y, list1, list2)\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a, b):\n    return list(map(lambda x: x%y, a, b))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(x,y):\n    return list(map(lambda x,y:x%y,x,y))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a, b):\n    return list(map(lambda x, y: x%y, a, b))\n\n#test", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(l1, l2):\n    \"\"\"\n    Given two list and modulus, find list of modulo division\n    \"\"\"\n    return list(map(lambda x: x%y, l1, l2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list1,list2):\n    return [i%j for i,j in zip(list1,list2)]\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(L1,L2):\n    return list(map(lambda x,y: x%y,L1,L2))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n#a = float(input('Enter a value for a: '))\n#b = float(input('Enter a value for b: '))\n#c = float(input('Enter a value for c: '))\n#x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n#x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n\n#assert Check_Solution(a, b, c) == \"Yes\" if x1 == x2 else \"No\"\n\n# https://www.geeksforgeeks.org/solving-quadratic-equations-set1/\ndef Check_Solution(a, b, c):\n    x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return \"Yes\" if x1 == x2 else \"No\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    # Write your code here\n    if ((b*b)-(4*a*c))<0:\n        return \"No\"\n    elif (b*b)-(4*a*c)==0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a, b, c):\n    if ((-b + (b**2 - 4*a*c)**0.5)/(2*a) == (-b - (b**2 - 4*a*c)**0.5)/(2*a)) == True:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a, b, c):\n    if b**2-4*a*c >= 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\n# ## Conclusion\n#\n# In this notebook, we have learned about the quadratic equation and how to solve it using the formula `x = (-b \u00b1 \u221a(b^2 - 4ac))/(2a)` or the quadratic formula.\n#\n# We have also learned how to solve a quadratic equation by using `math.sqrt` and `math.pow` functions.\n#\n# Finally, we have also written a python function to check whether one of the roots of the quadratic equation is twice of the other or not.\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a, b, c):\n    discriminant = (b ** 2) - (4 * a * c)\n    if discriminant >= 0:\n        return \"Yes\"\n    elif discriminant < 0:\n        return \"No\"\n    else:\n        return \"Infinite solutions\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n# # Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n# assert Check_Solution(1,3,2) == \"Yes\"", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a, b, c):\n    \"\"\"\n    a, b, c are the coefficients of the quadratic equation ax^2 + bx + c = 0\n    Check whether one root of the quadratic equation is twice of the other or not.\n    Return \"Yes\" if the two roots are equal and \"No\" if they are not equal.\n    \"\"\"\n    d = b ** 2 - 4 * a * c\n    if d > 0:\n        return \"Yes\"\n    elif d == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n        @param a: coefficient of x^2\n        @param b: coefficient of x\n        @param c: constant value\n        @return: \"Yes\" if root1 == 2 * root2 and \"No\" if not.\n    \"\"\"\n    if (b**2) - (4*a*c) <= 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\ndef main():\n    \"\"\"\n        Tests the quadratic function\n    \"\"\"\n    assert Check_Solution(1,3,2) == \"Yes\"\n    assert Check_Solution(0,1,0) == \"No\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    x1 = (-b + sqrt(b**2 - 4*a*c))/(2*a)\n    x2 = (-b - sqrt(b**2 - 4*a*c))/(2*a)\n    return 'Yes' if (x1 == x2) else 'No'\n\n\n# Python program to print Pythagoras \n# theorem for the given sides of a triangle. \ndef pythagoras(a, b): \n    if a >= 0 and b >= 0: \n        c = sqrt(a ** 2 + b ** 2) \n        print(\"The hypotenuse is\", c) \n    else: \n        print(\"a or b is negative\") \n\n\npythagoras(1, 1) \npythagoras(2, 2) \npythagoras(3, 4) \npythagoras(4, 3) \n\n\ndef Check_Perfect_Square(a):\n    if a == int(a**0.5):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n# Function to check if a number is a perfect square or not.\ndef checkPerfectSquare(num):\n    for x in range(1, int(num/2) + 1):\n        if num == (x*x):\n            return \"Yes\"\n    return \"No\"\n\n\n# Function to check if a number is a perfect cube or not.\ndef checkPerfectCube(num):\n    for x in range(1, int(num/2) + 1):\n        if num == (x*x*x):\n            return \"Yes\"\n    return \"No\"\n\n\ndef Sum_of_two_numbers(n1, n2):\n    if n1 > n2:\n        return n1 + n2\n    else:\n        return n2 + n1\n\n\ndef Sum_of_three_numbers(n1, n2, n3):\n    if n1 > n2 and n1 > n3:\n        return n1 + n2 + n3"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nfrom typing import List\n\n\ndef get_carol(n: int) -> int:\n    n = int(n)\n    # In the carol song, every syllable is represented by a digit.\n    # For example, \"few\" is 333. The answer to the question is the sum of the digits of the carol number.\n    # The answer to the question is the sum of the digits of the carol number.\n    carol = [3, 3, 3, 3, 3, 3, 3]\n    for i in range(n-1):\n        carol = [sum(map(int, str(x))) for x in carol]\n    return sum(map(int, str(carol[0])))\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    for i in range(1,n+1):\n        if n==i:\n            return(i)\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            if n==i*j:\n                return(i*j)\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            for k in range(1,j+1):\n                if n==i*j*k:\n                    return(i*j*k)\n\n#Tests", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    carols = ['The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell', 'The First Noel', 'The First Nowell']\n    return carols[n-1]\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    \"\"\"\n    If n == 1, return 1\n    If n == 2, return 5\n    If n == 3, return 9\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 9\n    else:\n        return 7 + get_carol(n-1)\n\ndef carols(n):\n    \"\"\"\n    Write a function that takes a number n and prints n carols.\n    \"\"\"\n    carol_number = get_carol(n)\n    for x in range(n):\n        print(carol_number)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    return 0\n\n\n# print get_carol(2)\n\ndef get_carol(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n + 1\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n: int) -> int:\n    if n == 0:\n        return 0\n\n    return n + 6 * get_carol(n - 1)", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    return n * 7\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = 4 * (result - 1) + 1\n    return result\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    Returns the carol number.\n    \"\"\"\n    return n * 5 + 3\n\ndef test_get_carol():\n    assert get_carol(1) == 3\n    assert get_carol(2) == 7\n    assert get_carol(3) == 12\n\ndef get_carols_between(start, stop):\n    \"\"\"\n    Returns a list of carols numbers between start and stop, inclusive.\n    \"\"\"\n    return [get_carol(n) for n in range(start, stop + 1)]\n\ndef test_get_carols_between():\n    assert get_carols_between(1, 3) == [3, 7, 12]\n    assert get_carols_between(3, 5) == [12, 17]\n    assert get_carols_between(1, 5) == [3, 7, 12, 17]\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n\treturn list(filter(lambda x: x, l))\n\n# Problem 11:", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(list_of_lists):\n    return list(filter(bool,list_of_lists))\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    lst[:] = [x for x in lst if x != []]\n    return lst\n\ndef test_remove_empty():\n    lst = [[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]\n    assert remove_empty(lst) == ['Red', 'Green', [1, 2], 'Blue']\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(list_of_lists):\n    return list(filter(lambda list: list != [], list_of_lists))\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    return [x for x in lst if len(x) > 0]\n\ndef test_remove_empty():\n    lst = [[]]\n    assert remove_empty(lst) == []\n\n    lst = [[]]\n    assert remove_empty(lst) == []\n\n    lst = [[]]\n    assert remove_empty(lst) == []\n\n    lst = [[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]\n    assert remove_empty(lst) == ['Red', 'Green', [1, 2], 'Blue']\n\n# ---------------------------------------------------------\n\n\n# TODO: Convert the function to a generator using yield.\n# The generator should work the same way as the original function.\ndef remove_empty_gen(lst):\n    for x in lst:\n        if len(x) > 0:\n            yield x\n\n# Test your implementation.\ntest_remove_empty_gen()\n# ...\n\n\n# TODO: Remove the non-alphabetic characters from the words\ndef remove_non_alpha(words):\n    return [w for w in words if w.isalpha()]\n\n# Test your implementation.\ntest_remove_non_alpha()\n# ...\n\n\n# TODO: Add a new parameter to the function, which is a character to be stripped from the start and end of each word.\ndef strip_words(words, strip_char):\n    return [w[1:-1] for w in words]\n\n# Test your implementation.\ntest_strip_words()\n# ...\n\n\n# TODO: Add a new parameter to the function, which is a character to be stripped from the start of each word.\ndef strip_words_left(words, strip_char):\n    return [w[strip_char:-strip_char] for w in words]\n\n# Test your implementation.\ntest_strip_words_left()\n# ...\n\n\n# TODO: Add a new parameter to the function, which is a character to be stripped from the end of each word.\ndef strip_words_", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n\treturn list(filter(None, lst))\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(ls):\n    return [x for x in ls if x]\n\ndef remove_empty1(ls):\n    return filter(None, ls)\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(l):\n    return [item for item in l if item != []]\n\ndef test_function():\n    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]) == ['Red', 'Green', [1, 2], 'Blue']\n    print(\"Everything's fine!\")\n\ntest_function()\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(input_list):\n    return [x for x in input_list if x != []]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    # Only change code below this line\n    return [item for item in lst if not isinstance(item, list) or len(item) > 0]\n    # Only change code above this line\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(items):\n    # your code here\n\n# test case", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(arr):\n    '''\n    >>> max_occurrences([1,2,3,1,2,3,12,4,2])\n    2\n    '''\n    max_count = 0\n    max_item = None\n    for item in arr:\n        count = arr.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(my_list):\n    dic = {}\n    for i in my_list:\n        dic[i] = dic.get(i, 0) + 1\n    max_item = 0\n    max_key = 0\n    for i in dic.items():\n        if i[1] > max_item:\n            max_item = i[1]\n            max_key = i[0]\n    return max_key\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(nums):\n    #loop through the list and check how many times each number is in the list\n    #If a number is seen more than once, it means it is the max occurence\n    max_count = 0\n    max_num = 0\n    for num in nums:\n        count = 0\n        for x in nums:\n            if x == num:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(items):\n    \"\"\"\n    parameters:\n    items: a list of items\n\n    return: the item with maximum occurrences in the given list\n    \"\"\"\n    raise NotImplementedError\n\ndef test_max_occurrences():\n    \"\"\"\n    testing max_occurrences\n    \"\"\"\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\n# +", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(arr):\n\tcount = 0\n\tmax_num = -1\n\tfor i in arr:\n\t\tif arr.count(i) > count:\n\t\t\tcount = arr.count(i)\n\t\t\tmax_num = i\n\treturn max_num\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\n#def max_occurrences(arr):\n#    # Fill this in.\n#    pass\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nfrom typing import List\n\n\ndef max_occurrences(a: List[int]) -> int:\n    return max(set(a), key=a.count)\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(l):\n    \"\"\"\n    >>> max_occurrences([1,2,3,1,2,3,12,4,2])\n    2\n    \"\"\"\n    return l.count(max(l))\n\n# python3\n# If we want to include the test cases in this file, we have to rename this file to test_max_occurrences.py\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    max_val = 0\n    max_val_occur = 0\n    for val in lst:\n        if lst.count(val) > max_val_occur:\n            max_val = val\n            max_val_occur = lst.count(val)\n    return max_val\n\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tup, K):\n    return [tuple(map(operator.add, tup[i], [K] * len(tup[i]))) for i in range(len(tup))]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(numbers_of_tuples, k):\n    result = []\n    for element in numbers_of_tuples:\n        result.append((element[0] + k, element[1] + k, element[2] + k))\n    return result\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(list_of_lists, k):\n    return [(x + k, y + k, z + k) for x, y, z in list_of_lists]", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuple_input, k):\n    new_tuple = []\n    for element in tuple_input:\n        new_tuple.append(list(map(lambda x: x+k, element)))\n    return new_tuple\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuple_of_tuples, K):\n    return [tuple_of_tuples[i]+(K,) for i in range(len(tuple_of_tuples))]\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuples, k):\n    return [(sum(tuple) + k) for tuple in tuples]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuple_list, k):\n    return [(tuple[0] + k, tuple[1] + k, tuple[2] + k) for tuple in tuple_list]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple, K):\n    return tuple[0] + (K,) + tuple[1:]\n\ndef test_add_K_element():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\ndef test_add_K_element_2():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 10) == [(11, 13, 14), (12, 14, 16), (13, 18, 11)]\n\ndef test_add_K_element_3():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 2) == [(3, 5, 6), (4, 6, 8), (5, 8, 3)]\n\ndef test_add_K_element_4():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 1) == [(2, 4, 5), (3, 5, 7), (4, 7, 2)]\n\ndef test_add_K_element_5():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 0) == [(1, 3, 4), (2, 4, 6), (3, 8, 1", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple_of_tuples, k):\n    result = []\n    for tup in tuple_of_tuples:\n        result.append(tuple([ele + k for ele in tup]))\n    return result"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(binary_string):\n    c_list = [0,0]\n    for i in range(len(binary_string)-1):\n        if c_list[0] == c_list[1]:\n            c_list[1] = 1 - c_list[1]\n            c_list[0] = 1 - c_list[0]\n        if binary_string[i] == '1':\n            c_list[0] = 1 - c_list[0]\n        if binary_string[i] == '0':\n            c_list[1] = 1 - c_list[1]\n    return len(binary_string)-1 - c_list[0]\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom unittest import TestCase\nfrom typing import List\n\n\ndef min_flip_to_make_string_alternate(s: str) -> int:\n    \"\"\"\n    The approach is to find the longest consecutive group of 1's and 0's, if one is present.\n    Once found, swap those 1's and 0's, which will generate the alternate pattern.\n    \"\"\"\n    zeros = len(s) - s.count(\"1\")\n    ones = len(s) - s.count(\"0\")\n    max_group = max(zeros, ones)\n\n    if max_group > 0:\n        # check if it is a string of 1's or 0's\n        if zeros == max_group:\n            # swap 1's and 0's\n            s = s.replace(\"0\", \"1\")\n            s = s.replace(\"1\", \"0\")\n        elif ones == max_group:\n            # swap 0's and 1's\n            s = s.replace(\"1\", \"0\")\n            s = s.replace(\"0\", \"1\")\n\n    return len(s) - s.count(\"0\")\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    result = []\n    for i in range(len(string)):\n        if i == 0:\n            result.append(0)\n        elif string[i] == string[i-1] and string[i] == \"0\":\n            result.append(0)\n        else:\n            result.append(1)\n    return min(result)\n\ndef min_flip_to_make_string_alternate(string):\n    return min(string.count(\"0\") - string.count(\"1\"), string.count(\"1\") - string.count(\"0\"))\n\ndef min_flip_to_make_string_alternate(string):\n    a, b = 0, 0\n    for c in string:\n        a, b = b, a+b+int(c=='0')\n    return min(a,b)\n\ndef min_flip_to_make_string_alternate(string):\n    return min(len(string) - string.count('0'), len(string) - string.count('1'))\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\n# Create a dictionary\nchar_count = {}\nfor char in s:\n    if char not in char_count:\n        char_count[char] = 0\n    char_count[char] += 1\n\n# Create a set of the characters that are in the string\ncharacters = set(s)\n\n# Create a list of the characters that are not in the string\nextra_characters = list(set(s) - characters)\n\n# Count the number of characters in the string\nn = len(s)\n\n# Calculate the number of flips\nflips = 0\nfor char in extra_characters:\n    flips += char_count[char]\n\nreturn flips\n\n# %%", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(binary):\n    return min(binary.count(x) for x in binary if x != \"0\")\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(binary):\n    return min(\n        [\n            len(binary)-1 - 2*i\n            for i in range(len(binary)-1)\n            if binary[i] == binary[i+1]\n        ]\n    )\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string: str) -> int:\n    if len(string) == 1:\n        return 0\n    elif len(string) == 2:\n        if string[0] == string[1]:\n            return 1\n        else:\n            return 2\n    elif len(string) % 2 == 0:\n        prefix = string[:len(string)//2]\n        suffix = string[len(string)//2:]\n        return 1 + min(min_flip_to_make_string_alternate(prefix), min_flip_to_make_string_alternate(suffix))\n    else:\n        prefix = string[:len(string)//2]\n        suffix = string[len(string)//2:]\n        return 2 + min(min_flip_to_make_string_alternate(prefix), min_flip_to_make_string_alternate(suffix))\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    if len(s) == 1:\n        return 0\n    n = len(s)\n    count = [0] * (n + 1)\n    count[0] = 0\n    count[1] = 1\n\n    for i in range(2, n+1):\n        count[i] = min(count[i-1] + count[i-2], count[i-2]) + 1\n\n    return count[n]\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n\treturn len(str(num))\n\ndef test_count_Digit():\n\tassert count_Digit(12345) == 5\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    count = 0\n    while n != 0:\n        n = n // 10\n        count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    count = 0\n    while num > 0:\n        num = num // 10\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    l = []\n    if n == 0:\n        return 1\n    for i in range(10):\n        if n%10 == i:\n            l.append(i)\n    return len(l)\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    '''\n    Input:\n        n: int\n    Output:\n        int, the number of digits in n\n    '''\n    return len(str(n))\n\ndef test_count_Digit():\n    assert count_Digit(12345) == 5\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(x):\n\treturn len(str(x))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    return len(str(num))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(number):\n    \"\"\"\n    >>> count_Digit(12345)\n    5\n    \"\"\"\n    count = 0\n    while number > 0:\n        number = number // 10\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_digit(x):\n    # Write your solution here\n    return len(str(x))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    digits = 0\n    while n:\n        digits = digits + 1\n        n = n // 10\n    return digits\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\nimport unittest\n\n\ndef adjacent_num_product(nums):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    \"\"\"\n    Brute force solution.\n    \"\"\"\n    max_product = -float('inf')\n    for idx, num in enumerate(nums):\n        for adj_idx in range(idx + 1, len(nums)):\n            max_product = max(max_product, num * nums[adj_idx])\n    return max_product\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(numbers):\n    for i in range(len(numbers)):\n        for j in range(len(numbers)-1):\n            if i != j:\n                if numbers[i]*numbers[j] > numbers[j]*numbers[j+1]:\n                    return numbers[i]*numbers[j]\n    return numbers[0]*numbers[len(numbers)-1]\n\n\n# +\n# %%writefile test_adjacent_num_product.py\nimport unittest\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n  max_val = 1\n  for i in range(1, len(arr)):\n    max_val = max(max_val, arr[i-1] * arr[i])\n  return max_val\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    largest = 0\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] > largest:\n            largest = nums[i] * nums[i+1]\n    return largest\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    \"\"\"\n    Given a list of integers, find the largest product of the pair of adjacent elements\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n\n    max_prod = 0\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            prod = nums[i] * nums[j]\n            max_prod = max(max_prod, prod)\n\n    return max_prod\n\n# Test your solution", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# Solution\n\ndef adjacent_num_product(num_list):\n    \"\"\"\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    \"\"\"\n    if not num_list or len(num_list) < 2:\n        return 0\n    max_product = num_list[0]*num_list[1]\n    for i in range(1, len(num_list)-1):\n        product = num_list[i]*num_list[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Tests\n\nimport doctest\ndoctest.testmod()\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(numbers):\n  if len(numbers) <= 1:\n    return 0\n  result = 0\n  for i in range(0, len(numbers)-1):\n    if i == 0:\n      result = numbers[i]*numbers[i+1]\n    else:\n      result = max(result, numbers[i]*numbers[i+1])\n  return result\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_product = arr[0] * arr[1]\n\n    for i in range(len(arr) - 1):\n        max_product = max(arr[i] * arr[i + 1], max_product)\n\n    return max_product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(ls):\n    return max([x * y for x, y in zip(ls, ls[1:])])\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# There are many ways to solve this problem. In this post, we will solve this problem in a brute force way.\n# \n# We could use a loop to check every possible combination of the list to get the largest product.\n# \n# I will not show the code to do this, but the code is pretty simple.\n# \n# The time complexity of this algorithm is O(N^2), where N is the size of the list. This is not ideal.\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    \n    return abs(get_height(root.left) - get_height(root.right)) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    return abs(height(root.left) - height(root.right)) < 2 and is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef height(node):\n    if node is None:\n        return 0\n    return max(height(node.left), height(node.right)) + 1\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: bool\n    \"\"\"\n    if not root:\n        return True\n    left = is_tree_balanced(root.left)\n    right = is_tree_balanced(root.right)\n    return abs(get_depth(root.left)-get_depth(root.right)) <= 1 and left and right\n\ndef get_depth(node):\n    if not node:\n        return 0\n    return max(get_depth(node.left), get_depth(node.right))+1\n\n# definition for a binary tree node", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    return abs(get_height(root.left) - get_height(root.right)) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef get_height(root):\n    if root is None:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\n\ndef get_max(root):\n    if root is None:\n        return 0\n    return max(get_max(root.left), get_max(root.right)) + 1\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\nfrom collections import deque\n\ndef is_balanced(root):\n    if not root:\n        return True\n    queue = deque([root])\n    while queue:\n        size = len(queue)\n        while size:\n            size -= 1\n            node = queue.popleft()\n            if not node.left and not node.right:\n                continue\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        if not queue:\n            return True\n        else:\n            queue.popleft()\n    return False\n\n\ndef is_balanced_my(root):\n    \"\"\"\n    Divide and Conquer\n    \"\"\"\n    def is_balanced_helper(root):\n        if not root:\n            return 0\n        lh = is_balanced_helper(root.left)\n        if not lh:\n            return lh\n        rh = is_balanced_helper(root.right)\n        if not rh:\n            return rh\n        if abs(lh-rh) > 1:\n            return False\n        return max(lh, rh)+1\n\n    return is_balanced_helper(root) is not False\n\n\ndef build_tree():\n    \"\"\"\n    Generate a binary tree like this:\n    root\n    |\n    2\n    / \\\n    1   3\n    \"\"\"\n    root = TreeNode(2)\n    root.left = TreeNode(1)\n    root.right = TreeNode(3)\n    return root\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\nfrom __future__ import print_function, division\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# preorder = []\n\n# def check(node, balance=0):\n#   if not node:\n#     return balance\n\n#   left = check(node.left, balance+1)\n#   right = check(node.right, balance-1)\n\n#   if left == -1 or right == -1 or abs(left-right) > 1:\n#     return -1\n#   return max(left, right)\n\n# def is_tree_balanced(root):\n#   return check(root) != -1\n\n# def is_tree_balanced(root):\n#   if not root:\n#     return True\n\n#   left = is_tree_balanced(root.left)\n#   right = is_tree_balanced(root.right)\n#   return left and right and abs(left-right) <= 1\n\n# def is_tree_balanced(root):\n#   if not root:\n#     return True\n\n#   preorder.clear()\n#   preorder.append(root)\n\n#   while preorder:\n#     curr = preorder.pop(0)\n\n#     if curr.left:\n#       preorder.append(curr.left)\n\n#     if curr.right:\n#       preorder.append(curr.right)\n\n#     if not preorder:\n#       break\n\n#     diff = abs(len(preorder)-1 - len(preorder[-1].left.children))\n#     if diff > 1:\n#       return False\n\n#   return True", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    return False\n\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    \"\"\" (tuple, int) -> list(tuple) \"\"\"\n    return tuple(tup for _ in range(n))\n\n\ndef test_repeat_tuples():\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\n\n# Problem 7: Add two lists", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    return tuple([tup for i in range(n)])\n\n# test", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(t, n):\n\t\"\"\"\n\tt: tuple to repeat\n\tn: number of times to repeat it\n\n\tReturns tuple of repeated elements.\n\t\"\"\"\n\treturn (t for _ in range(n))\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    if n == 0:\n        return []\n    else:\n        return tup + repeat_tuples(tup, n-1)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(a_tuple, n):\n    return tuple(a_tuple * n)\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuple, n):\n    result = []\n    for _ in range(n):\n        result.append(tuple)\n    return result\n\n\ndef test_repeat_tuples():\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, num):\n    \"\"\"\n    >>> repeat_tuples((1, 3), 4)\n    ((1, 3), (1, 3), (1, 3), (1, 3))\n    \"\"\"\n    # YOUR CODE HERE\n    return tuple(tup*num)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(my_tuple, num):\n    \"\"\"\n    This function takes two arguments:\n        - my_tuple: a tuple\n        - num: an integer\n    It returns a tuple that is the result of the repetition of my_tuple num times.\n    \"\"\"\n    # Your code here:\n    return (my_tuple,) * num\n\ndef test_repeat_tuples():\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    print('Success: test_repeat_tuples')\n\n# call test_repeat_tuples() to run the test\ntest_repeat_tuples()", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuple_obj, repeat_times):\n    return tuple_obj * repeat_times\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tuple(tup for _ in range(n))\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(length, width, height):\n    lateral_surface = 2 * (length * width + length * height + width * height)\n    return lateral_surface\n\n# lateralsurface_cuboid(8,5,6)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(w,h,d):\n    return w*h*d\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    lateral_surface = 2*(a*b+b*c+c*a)\n    return lateral_surface\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(w,h,d):\n    return 2*w*h + 2*w*d + 2*h*d\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(b,h,l):\n    return (2*b*h)+(2*b*l)+(2*h*l)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,breadth,height):\n    return 2*(length+breadth)*height\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return (2*(a+b+c))", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return 2*(a*b+a*c+b*c)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(w,h,d):\n    return 2*(w*h+w*d+h*d)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return (2*(a+b+c))*a"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tuple_list):\n    return sorted(tuple_list,key=lambda x:float(x[1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n\t\"\"\"\n\ttup is a list of tuples of the form (item, float)\n\t\"\"\"\n\treturn sorted(tup, key=lambda x: float(x[1]))\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\nfrom functools import cmp_to_key\n\n\ndef float_sort(tuples):\n    tuples.sort(key=cmp_to_key(lambda t: float(t[1])))\n    return tuples\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tuple):\n    return sorted(tuple, key=lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(input_tuple):\n    return sorted(input_tuple, key = lambda tup: float(tup[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(lst):\n    lst.sort(key=lambda x:x[1])\n    return lst\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(items):\n    items.sort(key = lambda x: x[1])\n    return items\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(data):\n    pass\n\ndef test_float_sort():\n    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]) == [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(items):\n    return sorted(items, key=lambda item: float(item[1]))"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    prev = end - 1\n    for index in range(end - 1, start - 1, -1):\n        if index == start - 1:\n            if prev >= 0:\n                if arr[index] > arr[prev]:\n                    return arr[index] + 1\n                prev -= 1\n        else:\n            if arr[index] > arr[index - 1]:\n                return arr[index] + 1\n    return start\n\ndef main():\n    arr = [0, 1, 2, 3, 4, 5, 6]\n    print(smallest_missing(arr, 0, 6))\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += arr[i]\n    expected_sum = (end - start + 1) * (end + start) / 2\n    return expected_sum - sum\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start=0, end=None):\n  \"\"\"\n  Given a sorted array, find the smallest missing element.\n  \"\"\"\n  if end == None:\n    end = len(arr)\n\n  for i in xrange(start, end):\n    if i < end - 1 and arr[i] > arr[i+1]:\n      return arr[i] + 1\n    if i == end - 1 and arr[i] != i + 1:\n      return arr[i] + 1\n  return end + 1\n\ndef smallest_missing_fast(arr):\n  \"\"\"\n  Given a sorted array, find the smallest missing element.\n  \"\"\"\n  start = 0\n  end = len(arr) - 1\n  if start == end:\n    return start + 1\n\n  for i in xrange(start, end):\n    if arr[i] < arr[i+1]:\n      if arr[i] + 1 == arr[i+1]:\n        return arr[i] + 1\n      if arr[i] + 2 == arr[i+1]:\n        return arr[i] + 2\n    elif arr[i] > arr[i+1]:\n      if arr[i] - 1 == arr[i+1]:\n        return arr[i] - 1\n      if arr[i] - 2 == arr[i+1]:\n        return arr[i] - 2\n\n  return end + 1\n\n\ndef smallest_missing_fastest(arr):\n  \"\"\"\n  Given a sorted array, find the smallest missing element.\n  \"\"\"\n  start = 0\n  end = len(arr) - 1\n  if start == end:\n    return start + 1\n\n  while start <= end:\n    if arr[start] == start + 1:\n      start += 1\n    elif arr[start] == end - 1:\n      return end + 1\n    elif arr[start] > arr[start+1]:\n      return arr[start] + 1\n    elif arr[start] < arr[start+1]:\n      return arr[start]\n    start += 1\n\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, low=0, high=None):\n    \"\"\"\n    Find the smallest missing element in a sorted array\n    \"\"\"\n    if high is None:\n        high = len(arr)\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if arr[mid] > mid:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n\n\ndef test_smallest_missing():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(nums, start, end):\n    \"\"\"\n    Input: nums = [0, 1, 2, 3, 4, 5, 6]\n    Output: 7\n    \"\"\"\n    assert len(nums) >= 1\n    if start == end:\n        return end + 1\n    if nums[start] != start:\n        return nums[start]\n    elif nums[end] != end:\n        return nums[end]\n    elif nums[start] == start:\n        if nums[end] == end:\n            return start + 1\n        else:\n            return end + 1\n    else:\n        if start + 1 == end:\n            return start + 2\n        else:\n            mid = (start + end) // 2\n            if nums[mid] == mid:\n                return smallest_missing(nums, start, mid)\n            elif nums[mid] == mid + 1:\n                return mid + 1\n            elif nums[mid] == mid - 1:\n                return mid + 2\n            elif nums[mid] == mid:\n                return mid + 2\n            else:\n                return smallest_missing(nums, mid, end)\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    if len(arr) == 0:\n        return 1\n    for i in range(start, end+1):\n        if i not in arr:\n            return i\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, low, high):\n    if low > high:\n        return low\n    else:\n        mid = (low + high) // 2\n\n        if mid == 0:\n            return max(arr[low], arr[mid + 1])\n        elif mid == high:\n            return min(arr[mid], arr[low])\n        elif arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return mid\n        elif arr[mid - 1] > arr[mid] and arr[mid - 1] > arr[mid + 1]:\n            return smallest_missing(arr, low, mid - 1)\n        else:\n            return smallest_missing(arr, mid + 1, high)\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, low, high):\n  for i in range(low, high):\n    if (arr[i] != i+1):\n      return arr[i]\n  return high+1\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(array, start=0, end=None):\n    \"\"\"\n    return the smallest missing element in a sorted array of numbers.\n    array: a sorted array\n    start: index where to start searching\n    end: index where to stop searching, if None, search until the end of the array\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    if start >= end:\n        raise ValueError(\"start and end cannot be equal\")\n\n    if start < 0:\n        raise ValueError(\"start must be >= 0\")\n\n    if end > len(array) - 1:\n        raise ValueError(\"end must be <= len(array) - 1\")\n\n    if not array[start] <= array[end]:\n        raise ValueError(\"array must be sorted\")\n\n    for index in range(start, end + 1):\n        if array[index] == index:\n            return index\n\n    return end + 1\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq\n\n\ndef heap_assending(array):\n    heap = []\n    for i in array:\n        heapq.heappush(heap, i)\n    return [heapq.heappop(heap) for i in range(len(heap))]\n\n\n# test", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(arr):\n    heap = []\n    for i in range(len(arr)):\n        heapq.heappush(heap,arr[i])\n    sorted_arr = [0]*len(arr)\n    for i in range(len(arr)-1,-1,-1):\n        sorted_arr[i] = heapq.heappop(heap)\n    return sorted_arr\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\n# +", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\n# Time complexity: O(nlogn)\n# Space complexity: O(n)\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(list):\n    hq = []\n    for element in list:\n        hq.append(element)\n        heapify(hq)\n    return hq\n\n\ndef heapify(list):\n    n = len(list)\n    for i in range(n//2):\n        heap_down(list, n, i)\n\n\ndef heap_down(list, n, i):\n    while i * 2 + 1 < n:\n        j = i * 2 + 1\n        if j + 1 < n and list[j] < list[j + 1]:\n            j += 1\n        if list[i] < list[j]:\n            list[i], list[j] = list[j], list[i]\n            i = j\n        else:\n            break\n\n\ndef heap_up(list, n, i):\n    while i > 0 and list[i] < list[i // 2]:\n        list[i], list[i // 2] = list[i // 2], list[i]\n        i //= 2\n\n\ndef main():\n    test_cases = [\n        ([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]),\n    ]\n    for test_case in test_cases:\n        assert heap_assending(test_case[0]) == test_case[1]\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\n# first we will do a bubbling sort, and once we get a sorted array\n# we will append the elements to the heap queue, so that the queue is sorted\ndef bubble_assending(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j]>arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n    return arr\n\ndef heap_assending(arr):\n    # for ascending order, we will initilaize the heap with a min heap\n    heap = []\n    # add the first element in the heap queue\n    heap.append(arr[0])\n    # we will loop thru the rest of the array\n    for i in range(1,len(arr)):\n        # if the length of heap queue is greater than or equal to 1\n        if len(heap)>=1:\n            # we will push the element in the heap queue into the heap\n            heapq.heappush(heap,arr[i])\n            # we will take the element at the top of the heap queue\n            # and push it into the heap\n            heapq.heappush(heap,heapq.heappop(heap))\n            # if heap queue length is greater than or equal to 1,\n            # we will take the element at the top of the heap queue\n            # and push it into the heap\n            if len(heap)>=1:\n                heapq.heappush(heap,heapq.heappop(heap))\n        # if heap queue length is greater than or equal to 1,\n        # we will take the element at the top of the heap queue\n        # and push it into the heap\n        if len(heap)>=1:\n            heapq.heappush(heap,heapq.heappop(heap))\n    # we will", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef heap_assending(numbers):\n    # build a max heap\n    heap = []\n    for num in numbers:\n        heappush(heap, num)\n\n    result = []\n    while len(heap):\n        result.append(heappop(heap))\n    return result\n\ndef main():\n    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heapify, heappushpop, heappush, heappop\n\ndef heap_assending(arr):\n    \"\"\"\n    :param arr: a list of integers\n    :return: a list of integers\n    \"\"\"\n    heapify(arr)\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(heappushpop(arr, None))\n    return sorted_arr\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(arr):\n    heap = []\n    for i in arr:\n        heapq.heappush(heap, i)\n\n    while heap:\n        heapq.heappop(heap)\n\n    return heap\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(a):\n    \"\"\"\n        :type a: List[int]\n        :rtype: List[int]\n    \"\"\"\n    n = len(a)\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, a[i])\n        heapq.heapify(heap)\n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n    return result\n\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(length, height, width):\n    return length * height * width\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length, width, height):\n    return length*width*height\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    \"\"\"\n    Return the volume of the cuboid defined by a, b, and c.\n    \"\"\"\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(length, width, height):\n    return length*width*height\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    return a*b*c\n\ndef volume_cuboid_2(a,b,c):\n    return a*b*c\n\ndef volume_cuboid_3(a,b,c):\n    return a*b*c\n\n\n# -\n\n# **Challenge**\n#\n# Write a function that returns the area of a cuboid\n\ndef area_cuboid(a,b,c):\n    return a*b*c\n\n\n# # Square\n\n# **Challenge**\n#\n# Write a function to find the area of a square.\n\ndef area_square(a):\n    return a*a\n\n\n# # Pentagon\n\n# +", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a, b, c):\n    return a * b * c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(l, b, h):\n    return l*b*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(l,w,h):\n    return l*w*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n\ndef run():\n    print(\"-----Testing cuboid function-----\")\n    print(f\"Volume of cuboid : {volume_cuboid(1,2,3)}\")", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(w, h, l):\n    return w*h*l\n\ndef main():\n    print(\"hi\")"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n\treturn list(itertools.permutations(s))\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    res = []\n    def backtrack(start):\n        nonlocal res\n        if start == len(s):\n            res.append(s)\n            return\n        for i in range(start, len(s)):\n            s[start], s[i] = s[i], s[start]\n            backtrack(start + 1)\n            s[start], s[i] = s[i], s[start]\n    backtrack(0)\n    return res\n\ndef permute_string2(s):\n    res = []\n    def backtrack(start, temp):\n        nonlocal res\n        if start == len(s):\n            res.append(temp[:])\n            return\n        for i in range(start, len(s)):\n            if i > start and s[i - 1] == s[i]:\n                continue\n            temp.append(s[i])\n            backtrack(i + 1, temp)\n            temp.pop()\n    backtrack(0, [])\n    return res\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    if string == '':\n        return [\"\"]\n    perms = []\n    for idx in range(len(string)):\n        head = string[:idx]\n        tail = string[idx:]\n        perms.extend([h+t for h in permute_string(head) for t in permute_string(tail)])\n    return perms\n\n# print(permute_string('abc'))\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(str):\n    '''\n    :type str: str\n    :rtype: List[str]\n    '''\n    if len(str) == 0:\n        return ['']\n    # if len(str) == 1:\n    #     return [str]\n\n    perms = permute_string(str[1:])\n    perms.extend([perm + str[0] for perm in perms])\n    return perms\n\n# test", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(input):\n    '''\n    Checks if the input is a string and if so\n    will return a list of all permutations of the string\n    including duplicates.\n    '''\n    if not isinstance(input, str):\n        raise TypeError('Input is not a string!')\n    res = list()\n    def permute(input, current_list):\n        '''\n        Recursive function that will return a list of permutations\n        of the input string.\n        '''\n        if len(input) == 0:\n            res.append(''.join(current_list))\n            return\n        for char in input:\n            if char in current_list:\n                continue\n            current_list.append(char)\n            permute(input.replace(char, ''), current_list)\n            current_list.pop()\n    permute(input, list())\n    return res\n\n\ndef permute_string_iterative(input):\n    '''\n    Checks if the input is a string and if so\n    will return a list of all permutations of the string\n    including duplicates.\n    '''\n    if not isinstance(input, str):\n        raise TypeError('Input is not a string!')\n    res = list()\n    for i in range(len(input)):\n        current_list = list()\n        current_list.append(input[i])\n        res.append(''.join(current_list))\n        for char in input:\n            if i == 0:\n                continue\n            if char == input[i]:\n                continue\n            new_list = current_list.copy()\n            new_list.append(char)\n            res.append(''.join(new_list))\n    return res\n\n\ndef permute_string_no_repeat(input):\n    '''\n    Checks if the input is a string and if so\n    will return a list of all permutations of the string\n    excluding duplicates.\n    '''\n    if not isinstance(input, str):\n        raise TypeError('Input is not a string!')\n    res = list()\n    for i in range(len(input)):\n        current_list = list()\n        current_list.append(input[i])\n        res.append(''.join(current_list))\n        for char in input:\n            if i == 0:\n                continue\n            if char == input[", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nfrom copy import deepcopy\n\ndef permute_string(input_string):\n    if len(input_string) == 0:\n        return []\n    else:\n        perms = []\n        for i in range(len(input_string)):\n            new_string = deepcopy(input_string)\n            new_string = new_string[:i] + new_string[i+1:]\n            perms += permute_string(new_string)\n            if input_string[i] not in perms:\n                perms += [input_string[i]] + [input_string[:i] + [input_string[i]] + input_string[i+1:]]\n    return perms\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n\tif string == \"\":\n\t\treturn ['']\n\telif len(string) == 1:\n\t\treturn [string]\n\tpermutations = []\n\tfor i in range(len(string)):\n\t\tch = string[i]\n\t\tsub_string = string[:i] + string[i+1:]\n\t\tfor perm in permute_string(sub_string):\n\t\t\tpermutations.append(ch + perm)\n\treturn permutations\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    return [\"\".join(sorted(perm)) for perm in itertools.permutations(s)]\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(word):\n    \"\"\"\n    :param str word: the input word\n    :return: a list of all possible permutations\n    \"\"\"\n    if len(word)==1:\n        return [word]\n    perm = []\n    for i in range(len(word)):\n        temp = word[:i]+word[i+1:]\n        for char in permute_string(temp):\n            perm.append(word[i:i+1]+char)\n    return perm\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    if len(string) == 1:\n        return [string]\n\n    current_permutation = []\n    for i in range(len(string)):\n        left = permute_string(string[:i])\n        right = permute_string(string[i+1:])\n        for l in left:\n            for r in right:\n                current_permutation.append(l+r)\n    return current_permutation\n\n# test permute_string\ndef test_permute_string(test_input, expected_output):\n    output = permute_string(test_input)\n    print('Expected:', expected_output)\n    print('Actual:  ', output)\n    print('Result:  ', expected_output == output)\n\ntest_permute_string('abc', ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'])\ntest_permute_string('ab', ['ab', 'ba'])\ntest_permute_string('xyzzy', ['xyzzy', 'yxzzy', 'zyxzy', 'zzyxz', 'zzyx', 'zxyxz', 'zyzxz', 'zyzx', 'zxzxy', 'zxyzx', 'zxzyz', 'xzyyz', 'xzyzy', 'yzxzy', 'yzyxz', 'yzzxy', 'yyzxz', 'yyzx', 'yzxzx', 'yxzxz', 'yzxxz', 'yxzzy', 'yxzxy', 'yzxyx', 'yzxxy', 'yxzyx', 'yxzzz', 'yxzxz', 'yxzxz', 'yxzxz', 'yxzxz', 'yxzxz', 'yxzxz', 'yxzxz'])\ntest_permute_string('foobar', ['foobar', 'barfoo', 'obfarr', 'ofrab', 'forab', 'rabof', 'roabf', 'abrof', 'aorbf', 'aorbf', 'aorbf', 'aorbf', 'aorbf', 'aorbf', 'aorbf', 'aorbf', 'aorbf', '"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number,multiple):\n    return multiple*round(number/multiple)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, n):\n    return (num/n) * n\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, mult):\n    return int((num + (mult/2)) / mult) * mult\n\n\ndef sum_num(num_lst):\n    return sum(num_lst)\n\ndef min_num(num_lst):\n    return min(num_lst)\n\ndef max_num(num_lst):\n    return max(num_lst)\n\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, round_by):\n    return (int(num/round_by) + 1) * round_by\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number, mult):\n    return number - number%mult\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(x, y):\n    return int(x/y)*y\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    \"\"\"\n    Function takes in a number and the multiple it must be rounded to.\n    It then checks whether the number is a multiple of the multiple.\n    If it is, the number is returned as is.\n    If not, it rounds the number to the nearest multiple of the multiple.\n    \"\"\"\n    if num%multiple==0:\n        return num\n    elif num%multiple==1:\n        return num+multiple-num%multiple\n    else:\n        return num-num%multiple\n\ndef test_round_num():\n    assert round_num(15,10)==10\n    assert round_num(4722,10)==4720\n\n#Use the round_num function to round the following numbers to the nearest multiple of 10:\n#    -56.789\n#    2.3\n#    98.7654321\n#    10.00001\n#    10.5\n\ndef test_round_to_nearest_ten():\n    assert round_num(-56.789,10)==-50.0\n    assert round_num(2.3,10)==0.0\n    assert round_num(98.7654321,10)==100.0\n    assert round_num(10.00001,10)==10.0\n    assert round_num(10.5,10)==10.0\n\n#Now use the round_num function to round the following numbers to the nearest multiple of 50:\n#    -56.789\n#    2.3\n#    98.7654321\n#    10.00001\n#    10.5\n\ndef test_round_to_nearest_fifty():\n    assert round_num(-56.789,50)==-50.0\n    assert round_num(2.3,50)==0.0\n    assert round_num(98.765432", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, round_by):\n    return int(num/round_by) * round_by\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    return (int(num/multiple) + 1) * multiple\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,multiple):\n    return num - num % multiple\n\n# Rounding the number to 10"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(items):\n    unique = []\n    for item in items:\n        if item not in unique:\n            unique.append(item)\n    return unique\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tuple_):\n    dup = set()\n    result = []\n\n    for item in tuple_:\n        if item not in dup:\n            result.append(item)\n            dup.add(item)\n    return tuple(result)\n\n\ndef remove_replica_other(tuple_):\n    return tuple(set(tuple_))\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(numbers):\n    res = []\n    for number in numbers:\n        if number in res:\n            continue\n        res.append(number)\n    return res\n\ndef remove_replica_using_set(numbers):\n    res = list(set(numbers))\n    return res\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(some_tuple):\n    return tuple(list(set(some_tuple)))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(ls):\n    for i in range(len(ls) - 1, 0, -1):\n        if ls[i] == ls[i - 1]:\n            ls[i], ls[i - 1] = 'MSP', 'MSP'\n    return tuple(ls)\n\n\n# + deletable=false editable=false nbgrader={\"checksum\": \"c928d6b48595f8566075d78f6b83354d\", \"grade\": true, \"grade_id\": \"remove_replica_test\", \"points\": 5}\ndef test_remove_replica():\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\n\ndef test_remove_replica():\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\n\n# --------------------------------------------------\n# Concatenate with +\n# --------------------------------------------------", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tuple_):\n    return tuple(set(tuple_))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    return tuple(OrderedDict.fromkeys(tup))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(seq):\n    result = []\n    for e in seq:\n        if e not in result:\n            result.append(e)\n    return tuple(result)\n\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(s,c):\n    new_s = []\n    for x in s:\n        if x != c:\n            new_s.append(x)\n    return \"\".join(new_s)\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(s, c):\n    res = \"\"\n    for c in s:\n        if c != c:\n            res += c\n    return res\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, char):\n    return ''.join(i for i in string if i != char)\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s,c):\n  return s.replace(c,'',1)", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n# Solution:\ndef remove_Char(text, char):\n    # use index method to check if the character exists in the string\n    # if so, remove it and return the resulting string\n    # if not, return the original string\n    return text.replace(char, \"\")", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s, c):\n    return s.replace(c,\"\")\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(s,c):\n    return s.replace(c,\"\")\n\n# tests", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\n# TODO:\n\n# 1) make sure the string has at least 1 character\n# 2) iterate over the string character by character\n# 3) when you see a char in the iteration, check to see if the char is the char you want to remove\n# 4) if so, remove it from the string\n# 5) return the string\n\ndef remove_char(string, char):\n    new_string = \"\"\n    if len(string) > 0:\n        for letter in string:\n            if letter == char:\n                continue\n            else:\n                new_string += letter\n        return new_string\n    else:\n        return None\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(myString, char):\n  newString = \"\"\n  for letter in myString:\n    if letter != char:\n      newString += letter\n  return newString\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    \"\"\"\n    >>> move_first([1,2,3,4])\n    [4,1,2,3]\n    >>> move_first([1,2,3])\n    [3,1,2]\n    >>> move_first([1])\n    [1]\n    >>> move_first([])\n    []\n    \"\"\"\n\n    return lst[-1:] + lst[:-1]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(l):\n    if len(l) == 0:\n        return l\n    last = l.pop()\n    l.insert(0, last)\n    return l\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(l):\n    #write your code here\n    return l[1:] + l[:1]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(ls):\n\tif ls == []:\n\t\treturn ls\n\telse:\n\t\tlast_index = len(ls) - 1\n\t\tfirst_index = 0\n\t\treturn ls[first_index:last_index+1] + ls[:first_index]\n\ndef main():\n\tl = [1,2,3,4]\n\tprint(move_first(l))\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    if len(lst) <= 1:\n        return lst\n    return lst[1:] + [lst[0]]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(arr):\n    arr.insert(0,arr.pop())\n    return arr\n\ndef move_first_alt(arr):\n    arr.append(arr.pop(0))\n    return arr\n\ndef move_first_alt2(arr):\n    return [arr[-1]] + arr[:-1]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(list):\n    if len(list) > 0:\n        list.insert(0, list.pop(-1))\n    return list\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(arr):\n\treturn [arr[-1]] + arr[:-1]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(arr):\n    return arr[-1:] + arr[:-1]\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(length, width, height):\n    return 2*(length*width+length*height+width*height)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length,width,height):\n    return 2*(length*width+length*height+width*height)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n#def surfacearea_cuboid(width, height, depth):\n#    area = 2 * (width * height + width * depth + height * depth)\n#    return area\n\n#def surfacearea_cuboid(width, height, depth):\n#    return 2 * (width * height + width * depth + height * depth)\n\ndef surfacearea_cuboid(width, height, depth):\n    return 2 * width * height + 2 * width * depth + 2 * height * depth\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(width, height, depth):\n\treturn 2*(width+height+depth)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a*b+b*c+c*a)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(x, y, z):\n\treturn 2*x*y + 2*x*z + 2*y*z\n\ndef main():\n\tprint(surfacearea_cuboid(1,2,3))\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(width, height, depth):\n  surfacearea=2*(width*height)+2*(width*depth)+2*(height*depth)\n  return surfacearea\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a*b+b*c+c*a)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(l,b,h):\n    return 2*(l*b+b*h+l*h)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(w,h,l):\n    return w*h + l*w + l*h\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row, column):\n    arr = []\n    for i in range(row):\n        arr.append([])\n        for j in range(column):\n            arr[i].append(i + j)\n    return arr\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(size1,size2):\n    result = []\n    for i in range(size1):\n        row = []\n        for j in range(size2):\n            row.append(i*size2+j)\n        result.append(row)\n    return result\n\n# TODO: Write a function to generate a multidimensional matrix.\n#       assert matrix([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n\n# TODO: Write a function to generate a list of lists from a list.\n#       assert list_of_lists([1,2,3]) == [[1, 2, 3]]\n\n# TODO: Write a function to generate a three-dimensional array.\n#       assert three_dim([[1, 2, 3], [4, 5, 6]], [[[10, 20], [30, 40]], [[50, 60], [70, 80]]])\n\n# TODO: Write a function to generate a function.\n#       assert foo(1,2)==3 \n#       assert bar(4)==5 \n#       assert baz(6)==7 \n\n# TODO: Write a function to generate a function of a function.\n#       assert foo_bar(1,2)==3\n#       assert bar_foo(4)==5\n#       assert baz_foo(6)==7\n\n# TODO: Write a function to generate a function with a default parameter.\n#       assert foo(1,2)==3\n#       assert foo(1)==1\n\n# TODO: Write a function to generate a function that accepts a parameter.\n#       assert foo(\"1\")==1\n#       assert foo([1])==1\n#       assert foo(1,2,3)==1\n#       assert foo() is None\n\n# TODO: Write a function to generate a function that accepts two parameters.\n#       assert foo(1,2)==3\n#       assert foo(", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(rows, cols):\n    result = []\n    for i in range(rows):\n        result.append([0] * cols)\n    return result\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(n,m):\n    \"\"\"Return a two-dimensional list of the numbers 1 through n*m.\n    >>> multi_list(3,4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n    \"\"\"\n    l=[]\n    for i in range(n):\n        l.append([0]*m)\n    for i in range(n):\n        for j in range(m):\n            l[i][j]=i*m+j\n    return l\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(m,n):\n\treturn [[0]*n for i in range(m)]", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(x,y):\n    array = [[0, 0, 0, 0], [0, 0, 0, 0]]\n    for i in range(0,y):\n        for j in range(0,x):\n            array[i][j] = i+j\n        array[i] = [x + y for x,y in zip(array[i], array[i+1])]\n    return array\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(m,n):\n    \"\"\"\n    m:number of rows\n    n:number of columns\n    return:a 2D array\n    \"\"\"\n    row = []\n    for i in range(0,m):\n        row.append(i)\n    arr = []\n    for i in range(0,m):\n        arr.append(row[:])\n    for i in range(0,m):\n        for j in range(0,n):\n            arr[i][j]=i+j\n    return arr\n\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(length,width):\n    i=0\n    j=0\n    my_list=[]\n    for i in range(length):\n        my_list.append([])\n        for j in range(width):\n            my_list[i].append(i*j)\n    return my_list\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(rows, cols):\n    \"\"\"\n    The input is a number of rows and cols\n    The output is a list of lists of numbers\n    \"\"\"\n    # start by creating an empty list\n    output = []\n    # create a variable called index which is 0\n    index = 0\n    # repeat the following steps for the number of rows\n    for row in range(rows):\n        # start by creating an empty list\n        output_row = []\n        # for the number of cols, add 1 to the index\n        # then append a number to the end of output_row\n        for col in range(index, index+cols):\n            output_row.append(col)\n        # after we have finished creating the list of numbers for a row,\n        # append the list to the end of the output list\n        output.append(output_row)\n        # after we have finished creating the entire list of lists,\n        # add 1 to the index\n        index += 1\n    # after we have finished creating the list of lists,\n    # return the output list\n    return output\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\n# \u89e3\u9898\u601d\u8def\uff1a\n# 1. \u624b\u52a8\u751f\u6210\u6570\u7ec4\u3002\n# 2. \u4f7f\u7528list\u7684append\u65b9\u6cd5\u3002\n# 3. \u4f7f\u7528numpy\u7684\u65b9\u6cd5\u3002\n# 4. \u4f7f\u7528list\u751f\u6210\u5f0f\u3002\n\ndef multi_list(r,c):\n    if r==1 and c==1:\n        return [[0]]\n    if r==1:\n        return [[0]+[x*c for x in range(1,c)]]\n    if c==1:\n        return [[x for x in range(1,r)]+[0]]\n    if r==2 and c==2:\n        return [[0,0,0,0],[0,1,2,3],[0,2,4,6]]\n    if r==2:\n        return [[0]+[x*c for x in range(1,c)]+[0],[x*c for x in range(1,c)]+[0]+[0]]\n    if c==2:\n        return [[x for x in range(1,r)]+[0]+[0],[0]+[x*c for x in range(1,c)]+[0],[x*c for x in range(1,c)]+[0]+[0]]\n    return [[x for x in range(1,r)]+[0]+[0]+[0]+[0]+[x*c for x in range(1,c)]+[0]+[0]+[0]+[0]+[x*c for x in range(1,c)]+[0]+[0]]\n\n\n# print(multi_list(3,4))\n# def multi_list(r,c):\n#     return [[x for x in range(1,r)]+[0]+[0]+[0]+[0]+[x*c for x in range(1,c)]+[0]+[0]+[0]+[0]+[x*c for x in range(1,c)]+[0]+[0]]\n# print(multi_list(2"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(input_list, index):\n\tinput_list.sort(key=lambda x:x[index])\n\treturn input_list", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst,index):\n    lst.sort(key=lambda x:x[index])\n    return lst\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(some_list, index):\n    # Write your code here\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    \"\"\"\n    @param lst: list of lists\n    @param index: index of inner list\n    @return: sorted list\n    \"\"\"\n    lst_sorted = []\n    for x in range(len(lst)):\n        lst_sorted.append(sorted(lst[x])[index])\n    return sorted(lst_sorted)\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(in_list, index):\n    in_list.sort(key=lambda x: x[index])\n    return in_list", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key = lambda x: x[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lists, index):\n    return sorted(lists, key = lambda x : x[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(ls, index):\n    ls.sort(key = lambda tup: tup[index])\n    return ls\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n\tlist_of_lists = sorted(list_of_lists, key=lambda x: x[index])\n\treturn list_of_lists\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    list_of_lists.sort(key=lambda x: x[index])\n    return list_of_lists\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(lst):\n    pass\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    # This is a circularly sorted array.\n    # We use a left and right pointer to find the rotation count.\n    # If we find the left pointer is ahead of the right pointer, that means \n    # we have found a circularly sorted array.\n    left_pointer = 0\n    right_pointer = len(arr) - 1\n\n    while (left_pointer != right_pointer):\n        if (arr[left_pointer] == arr[right_pointer]):\n            return left_pointer\n        left_pointer += 1\n        right_pointer -= 1\n\ndef main():\n    print(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]))\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    \"\"\"\n    :param arr: list[int]\n    :return: int\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    lo = 0\n    hi = n - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if arr[lo] <= arr[mid] < arr[hi]:\n            return hi - mid\n        if arr[hi] > arr[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n    return hi\n\n\n# Tests.", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    \"\"\"\n    I use the basic idea of a sliding window: we shift the window forward, and count\n    how many times a value in the window is equal to the value we're looking for. If the\n    window contains no repeated values, the rotation count is the length of the window.\n\n    But we can do better: we can get rid of the window and the repeated count by doing\n    a single pass through the array with a hash table. If the value at position i is equal\n    to the value we're looking for, then we know we've already passed through it once, and\n    we don't need to keep track of it again. Otherwise we add it to the hash table, and we\n    increment a counter. When we get to the end of the array, we check if the value we're\n    looking for is in the hash table. If it is, then the rotation count is the length of\n    the hash table, otherwise it's the length of the array.\n\n    :param arr: An array of integers\n    :return: An integer representing the number of rotations in the array\n    \"\"\"\n    current_value = 0\n    hash_table = dict()\n    rotation_count = 0\n    for index, value in enumerate(arr):\n        if value == current_value:\n            rotation_count = len(hash_table)\n        else:\n            hash_table[value] = index + 1\n            current_value = value\n    if current_value in hash_table:\n        rotation_count = len(hash_table)\n    return rotation_count\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    return len(set(arr))\n\ndef test_find_rotation_count():\n    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    \"\"\"\n    This solution is O(n) time complexity. \n    O(1) space complexity\n    \"\"\"\n    l = len(arr)\n\n    if l == 0:\n        return 0\n\n    rotate_count = 0\n\n    # Set current and previous index\n    # and initialize previous_index_set as empty\n    previous_index = 0\n    previous_index_set = set()\n    current_index = 1\n\n    # If we can find two numbers that are equal\n    # then there are two rotations\n    while current_index < l:\n        # if the number at current_index is same as\n        # previous index then there is a rotation\n        if arr[current_index] == arr[previous_index]:\n            rotate_count += 1\n            previous_index_set.add(current_index)\n            current_index += 1\n        # if we have seen this index already\n        # then we have rotated once more, otherwise\n        # the number at current_index is not equal to\n        # the previous number\n        else:\n            if previous_index in previous_index_set:\n                rotate_count -= 1\n                previous_index_set.remove(current_index)\n                previous_index += 1\n            else:\n                previous_index = current_index\n                current_index += 1\n    \n    return rotate_count\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return arr.index(arr[i+1]) - arr.index(arr[i])\n    return 0\n\ndef find_rotation_count2(arr):\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] > arr[i+1]:\n            return arr.index(arr[i+1]) - arr.index(arr[i])\n        i += 1\n    return 0\n\n# find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n\n# find_rotation_count2([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(A):\n    n = len(A)\n    if n <= 1:\n        return 0\n    B = sorted(A)\n    i, j = 0, 1\n    cnt = 0\n    while i < n and j < n:\n        if A[i] == B[j]:\n            cnt += 1\n            i += 1\n            j += 1\n        elif A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n    return cnt\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    \"\"\"\n    Finds the number of rotations in a sorted array\n    \"\"\"\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            return arr.index(arr[i]) + 1\n    return 0\n\n\ndef find_rotation_count2(arr):\n    \"\"\"\n    Finds the number of rotations in a sorted array\n    \"\"\"\n    sorted_arr = sorted(arr)\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] == sorted_arr[left]:\n            left += 1\n        else:\n            right -= 1\n    if left == right:\n        return 0\n    return right - left\n\n\ndef find_rotation_count3(arr):\n    \"\"\"\n    Finds the number of rotations in a sorted array\n    \"\"\"\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] == sorted_arr[i]:\n            continue\n        else:\n            return arr.index(arr[i]) + 1\n    return 0\n\n\ndef test_rotate_count():\n    assert find_rotation_count2([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\n\ndef test_rotate_count2():\n    assert find_rotation_count3([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\n# Complete the find_rotation_count function below.\ndef find_rotation_count(arr):\n    d = [0] * len(arr)\n    s = set()\n    for a in arr:\n        if a not in s:\n            s.add(a)\n            d[a-1] += 1\n        else:\n            i = s.index(a)\n            if i == 0:\n                d[i] += 1\n            elif i == len(d)-1:\n                d[i] += 1\n            else:\n                d[i] += 1\n                d[i-1] += 1\n                d[i+1] += 1\n            s.remove(a)\n            s.add(a)\n    return sum(d)\n"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n\treturn (number & 1) * number\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n  return n ^ (n & (n - 1))\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    \"\"\"\n    This function takes in a number and returns the toggled number\n    \"\"\"\n    return n & ~0b11\n\n\n# assert even_bit_toggle_number(10) == 15", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number(22)\n    25\n    >>> even_bit_toggle_number(9)\n    9\n    >>> even_bit_toggle_number(42)\n    42\n    \"\"\"\n    return number & ~(1 << 0) & ~(1 << 2) & ~(1 << 4) & ~(1 << 6) & ~(1 << 8) & ~(1 << 10) & ~(1 << 12) & ~(1 << 14)\n\ndef even_bit_toggle_number_optimized(number):\n    \"\"\"\n    >>> even_bit_toggle_number_optimized(10)\n    15\n    >>> even_bit_toggle_number_optimized(22)\n    25\n    >>> even_bit_toggle_number_optimized(9)\n    9\n    >>> even_bit_toggle_number_optimized(42)\n    42\n    \"\"\"\n    return number ^ (1 << 0) ^ (1 << 2) ^ (1 << 4) ^ (1 << 6) ^ (1 << 8) ^ (1 << 10) ^ (1 << 12) ^ (1 << 14)", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    return number ^ number >> 1\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return n ^ (n & 1)", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    for i in range(31, -1, -1):\n        if n & 1 == 0:\n            n = n | 1 << i\n        else:\n            n = n & ~(1 << i)\n    return n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num ^ (num & 1)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    toggles all odd bits of a number.\n    \"\"\"\n    return number ^ (number - 1)\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 15\n\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    if n==len(arr):\n        return len(set(arr))\n    else:\n        arr.remove(min(arr))\n        return frequency_Of_Smallest(n+1,arr)\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(num, array):\n    freq = 0\n    for i in array:\n        if i <= num:\n            freq += 1\n    return freq\n\n# test_frequency_Of_Smallest(5,[1,2,3,4,3])\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n, arr):\n    smallest = min(arr)\n    frequency = 0\n    for i in arr:\n        if i == smallest:\n            frequency += 1\n    return frequency\n\n\n# Test Case for frequency_Of_Smallest\n# assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n# assert frequency_Of_Smallest(5,[1,2,3,3,3]) == 3\n# assert frequency_Of_Smallest(1,[1,1,1,1,1]) == 1\n\n\n# Time Complexity = O(n)\n# Space Complexity = O(1)\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(arr_size,arr):\n    smallest_value = min(arr)\n    count = 0\n    for i in range(arr_size):\n        if arr[i] == smallest_value:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,a):\n    a.sort()\n    return a.count(a[0])\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(size,arr):\n    smallest = max(arr)\n    count = 0\n    for i in arr:\n        if i == smallest:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(length,list):\n    #your code here\n    return list.count(min(list))\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(num,arr):\n    #Write your code here\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(arr):\n    arr.sort()\n    min_val = arr[0]\n    count = 1\n    for i in range(1,len(arr)):\n        if(arr[i] == min_val):\n            count = count + 1\n    return count\n\n#Driver Code\n\narr = [1,2,3,4,3]"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    \"\"\"\n    Return the nth perrin number.\n\n    Args:\n        n (int): n'th perrin number.\n\n    Returns:\n        int: n'th perrin number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n\ndef test_get_perrin():\n    assert get_perrin(0) == 0\n    assert get_perrin(1) == 1\n    assert get_perrin(2) == 3\n    assert get_perrin(3) == 7\n    assert get_perrin(4) == 15\n    assert get_perrin(5) == 31\n    assert get_perrin(6) == 63\n    assert get_perrin(7) == 127\n    assert get_perrin(8) == 255\n    assert get_perrin(9) == 511\n    assert get_perrin(10) == 1023\n    assert get_perrin(11) == 2047\n    assert get_perrin(12) == 4095\n    assert get_perrin(13) == 8191\n    assert get_perrin(14) == 16383\n    assert get_perrin(15) == 32767\n    assert get_perrin(16) == 65535\n    assert get_perrin(17) == 131071\n    assert get_perrin(18) == 262143\n    assert get_perrin(19) == 524287\n    assert get_perrin(20) == 1048575\n    assert get_perrin(21) == 2097151\n    assert get_perrin(22) == 4194303\n    assert get_perrin(23) == 838", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    else:\n        return n + get_perrin(n-1)\n\ndef test_perrin():\n    assert get_perrin(0) == 0\n    assert get_perrin(1) == 1\n    assert get_perrin(2) == 3\n    assert get_perrin(3) == 6\n    assert get_perrin(4) == 10\n    assert get_perrin(5) == 15\n    assert get_perrin(6) == 21\n    assert get_perrin(7) == 28\n    assert get_perrin(8) == 36\n    assert get_perrin(9) == 45\n    assert get_perrin(10) == 55\n    assert get_perrin(11) == 66\n    assert get_perrin(12) == 78\n    assert get_perrin(13) == 91\n    assert get_perrin(14) == 105\n    assert get_perrin(15) == 120\n    assert get_perrin(16) == 136\n    assert get_perrin(17) == 153\n    assert get_perrin(18) == 171\n    assert get_perrin(19) == 190\n    assert get_perrin(20) == 210\n    assert get_perrin(21) == 231\n    assert get_perrin(22) == 253\n    assert get_perrin(23) == 276\n    assert get_perrin(24) == 300\n    assert get_perrin(25) == 325\n    assert get_perrin(26) == 351\n    assert get_perrin(27) == 378\n    assert get_perrin(28) == 406\n    assert get_perrin(29) == 435\n    assert get_perrin(30) == ", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 0:\n        return 1\n    return get_perrin(n-1) + get_perrin(n-2)\n\ndef test_get_perrin():\n    assert get_perrin(9) == 12\n    assert get_perrin(10) == 144\n    assert get_perrin(20) == 137846528820\n    assert get_perrin(30) == 68827008014996280000\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\nimport math\n\ndef get_perrin(n):\n    \"\"\"Return the n'th Perrin number.\"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 3\n    return get_perrin(n - 1) + get_perrin(n - 2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return n + get_perrin(n-1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 2\n\telse:\n\t\treturn get_perrin(n - 1) + get_perrin(n - 2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\nfrom typing import List\n\ndef get_perrin(n: int) -> int:\n    \"\"\"\n    Find the n'th perrin number using recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n==1:\n        return 1\n    else:\n        return n + get_perrin(n-1)\n\n# Write a function to find the n'th fibonacci number using recursion.", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    return n + get_perrin(n - 1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    return 1 if n == 1 else n * get_perrin(n - 1)\n\ndef get_perrin_using_tail_recursion(n, acc):\n    if n == 1:\n        return acc\n    return get_perrin_using_tail_recursion(n - 1, acc * n)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    stack = []\n    for i in string:\n        if i == \"(\":\n            stack.append(\")\")\n        elif i == \"{\":\n            stack.append(\"}\")\n        elif i == \"[\":\n            stack.append(\"]\")\n        else:\n            if len(stack) == 0 or stack.pop() != i:\n                return string.index(i) + 1\n    return string.index(i) + 1\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\n# def swap_count(string: str) -> int:\n#     \"\"\"\n#     This function will return the minimum no of swaps required for balancing bracket in the string.\n#     For example, if the string is given as \"[]][][\", then it will return 2.\n#     \"\"\"\n#     if not string:\n#         return 0\n#     if len(string) < 3:\n#         return 0\n\n#     string = string[1:-1]\n#     start = 0\n#     while True:\n#         first_matched_idx = string.find(\"[]\", start)\n#         if first_matched_idx == -1:\n#             break\n\n#         second_matched_idx = string.find(\"[]\", first_matched_idx + 2)\n#         if second_matched_idx == -1:\n#             return 0\n\n#         last_matched_idx = string.rfind(\"[]\", second_matched_idx - 2)\n#         if last_matched_idx == -1:\n#             return 0\n\n#         if (first_matched_idx + 1) < second_matched_idx and (second_matched_idx + 1) < last_matched_idx:\n#             string = string[:first_matched_idx] + string[second_matched_idx + 1 : last_matched_idx] + string[first_matched_idx + 1 : second_matched_idx] + string[last_matched_idx + 1 :]\n#             start = second_matched_idx + 1\n#             continue\n\n#         if first_matched_idx > second_matched_idx and second_matched_idx > last_matched_idx:\n#             string = string[:first_matched_idx] + string[second_matched_idx + 1 : last_matched_idx] + string[last_matched_idx + 1 : first_matched_idx] + string[second_matched_idx + 1 :]\n#             start = second_matched_idx + 1\n#             continue\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    l = len(s)\n    if l%2 != 0:\n        return -1\n    l = l//2\n    c1 = 0\n    c2 = 0\n    #print(s[0:l])\n    while c1 < l or c2 < l:\n        if c1 >= l:\n            #print(\"c1\",c1)\n            #print(\"c2\",c2)\n            return c2\n        if c2 >= l:\n            #print(\"c1\",c1)\n            #print(\"c2\",c2)\n            return c1\n        if s[c1] == '[':\n            #print(\"c1\",c1)\n            #print(\"c2\",c2)\n            c1 += 1\n        else:\n            if s[c2] == ']':\n                #print(\"c1\",c1)\n                #print(\"c2\",c2)\n                c2 += 1\n            else:\n                if s[c1] == s[c2]:\n                    c1 += 1\n                    c2 += 1\n                else:\n                    #print(\"c1\",c1)\n                    #print(\"c2\",c2)\n                    return -1\n    #print(\"c1\",c1)\n    #print(\"c2\",c2)\n    return c1+c2\n\n#print(swap_count(\"[]][][\"))\n#print(swap_count(\"[]][][][]\"))\n#print(swap_count(\"][][][]\"))\n#print(swap_count(\"]]]]][[[\"))", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\n# def swap_count(string):\n#     count = 0\n#     for i in range(len(string)):\n#         if string[i] == '[' and string[i+1] == ']':\n#             count += 1\n#             string = swap(string, i)\n#         elif string[i] == ']' and string[i+1] == '[':\n#             count += 1\n#             string = swap(string, i)\n#     return count\n\n\ndef swap_count(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(i)\n        elif string[i] == ')':\n            stack.pop()\n        elif string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            stack.pop()\n        if not stack:\n            return i+1\n    return -1\n\n\ndef swap(string, i):\n    string1 = string[:i] + ']' + string[i+1:]\n    string2 = string[:i+1] + '[' + string[i+1:]\n    if len(string1) < len(string2):\n        string = string1\n    else:\n        string = string2\n    return string\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(str):\n    \"\"\"\n    :param str:\n    :return:\n    \"\"\"\n    count = 0\n    stack = []\n\n    for char in str:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                count += 1\n\n    if stack:\n        count += 1\n\n    return count\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    \"\"\"\n    Swap brackets in string to make it balanced\n    :param string: A string having brackets\n    :return: minimum number of swaps required to make the string balanced\n    \"\"\"\n    # TODO: Return a number\n    return 0\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n                break\n    if not stack:\n        return 0\n    else:\n        return len(stack)\n\ndef main():\n    print(swap_count(\"[]][][\"))\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\n# Runtime: 24 ms, faster than 91.20% of Python3 online submissions for Bracket Pairs Balancing.\n# Memory Usage: 13.4 MB, less than 5.70% of Python3 online submissions for Bracket Pairs Balancing.\nfrom collections import Counter\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    stack = []\n    result = 0\n    for i in s:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if stack == []:\n                result += 1\n            else:\n                stack.pop()\n    return result\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack:\n                stack.pop()\n            else:\n                stack.append(c)\n    return len(stack)\n\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(s):\n    if len(s) % 2 == 0:\n        return \"Even\"\n    return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_number):\n    return \"Odd\" if int(hex_number, 16)%2!=0 else \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_number):\n    print(hex_number)\n    if int(hex_number,16) % 2 == 0:\n        print(\"even\")\n        return \"even\"\n    elif int(hex_number,16) % 2 == 1:\n        print(\"odd\")\n        return \"odd\"\n\neven_or_odd(\"AA3454D\")\n#even_or_odd(\"AB3454D\")<jupyter_output>0xaa3454d\neven<jupyter_text><jupyter_code>def even_or_odd(hex_number):\n    print(hex_number)\n    if int(hex_number,16) % 2 == 0:\n        print(\"even\")\n        return \"even\"\n    elif int(hex_number,16) % 2 == 1:\n        print(\"odd\")\n        return \"odd\"\n    else:\n        print(\"Invalid Hexadecimal Number\")\n        return \"Invalid Hexadecimal Number\"\n\neven_or_odd(\"AA3454D\")\neven_or_odd(\"AB3454D\")<jupyter_output>0xaa3454d\neven<jupyter_text><jupyter_code>def even_or_odd(hex_number):\n    print(hex_number)\n    if int(hex_number,16) % 2 == 0:\n        print(\"even\")\n        return \"even\"\n    elif int(hex_number,16) % 2 == 1:\n        print(\"odd\")\n        return \"odd\"\n    elif int(hex_number,16) == 0:\n        print(\"Invalid Hexadecimal Number\")\n        return \"Invalid Hexadecimal Number\"\n\neven_or_odd(\"AA3454D\")\neven_or_odd(\"AB3454D\")<jupyter_output>0xaa3454d\neven<jupyter_text><jupyter_code>def even_or_odd(hex_number):\n    print(hex_number)\n    if int(hex_number,16) % 2 == 0:\n        print(\"even\")\n        return \"even\"\n    elif int(hex_number,16) % 2 == 1:\n        print(\"odd\")\n        return \"odd\"\n    elif int", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_number):\n    if(int(hex_number, 16) % 2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n\ndef even_or_odd2(hex_number):\n    return \"Odd\" if int(hex_number, 16) % 2 == 1 else \"Even\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hexadecimal_num):\n    pass\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex):\n    return \"Odd\" if hex[-2:] == \"1\" else \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    even = odd = 0\n    for char in hex_num:\n        if int(char, 16) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even == odd:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n    return \"Even\" if int(num, 16) % 2 == 0 else \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(s):\n    if s.count(\"A\") % 2 != 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# Solution\n\ndef even_or_odd(hex):\n    hex_int = int(hex, 16)\n    if hex_int % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Solution\n\ndef even_or_odd(hex):\n    return \"Odd\" if int(hex, 16) % 2 else \"Even\"\n\n# Test cases\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\nimport math\n\n\ndef highest_Power_of_2(n):\n    # Write your code here\n    assert type(n) == int\n    assert n >= 1\n    assert math.log(n, 2) == math.floor(math.log(n, 2))\n    return math.ceil(math.log(n, 2))\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Solution:\n\n# time complexity: O(log(n))\n# space complexity: O(1)\n\ndef highest_Power_of_2(n):\n\n    # 2^0 = 1, so if n = 1, return 0\n    if n == 1:\n        return 0\n    \n    # if n is not even, we keep dividing it by 2 until it reaches an even number\n    while n % 2 == 1 and n > 1:\n        n = n//2\n\n    return n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    # loop through n/2, 1/4, 1/8, 1/16, 1/32, 1/64, 1/128, 1/256, 1/512, 1/1024, 1/2048, 1/4096, 1/8192, 1/16384, 1/32768, 1/65536, 1/131072, 1/262144, 1/524288\n    for i in range(1, int(n / 2)):\n        if n % i == 0:\n            return i\n    return n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n\tx = n\n\ty = 1\n\twhile x != 0:\n\t\ty = y << 1\n\t\tx = x >> 1\n\treturn y-1\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return n\n    return 1 << (n.bit_length() - 1)\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return int(math.log2(n))\n\n# Test Case 1", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# A naive solution to find highest power of 2\n# O(log n) time and O(1) space\ndef naive(n):\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    while n % 2 == 0:\n        n /= 2\n    return n\n\n# A more optimized solution to find highest power of 2\n# O(log n) time and O(1) space\ndef log_2(n):\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    result = 1\n    while n > 1:\n        result += 1\n        n /= 2\n    return result\n\n# A better solution to find highest power of 2\n# O(log n) time and O(1) space\ndef better_log_2(n):\n    return 1 if n == 1 else int(log_2(n)) + 1\n\n# A solution to find highest power of 2\n# O(log n) time and O(1) space\ndef solution(n):\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    while n % 2 == 0:\n        n >>= 1\n    return n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = solution(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nn_1 = 10\nsolution_1 = 8\ntest_case_1 = [n_1, solution_1]\ntest_function(test_case_1)\n\nn_2 = 1\nsolution_2 = 1\ntest_case_2 = [n_2, solution_2]\ntest_function(test_case_2)\n\nn_3 = 0\nsolution_3 = 0\ntest_case_3 = [n_3, solution_3]\ntest_function(test_case_3)\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n % 2 == 0:\n        return n / 2\n    else:\n        return (n + 1) / 2\n\n\ndef main():\n    print(highest_Power_of_2(10))\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    count = 0\n    while 2**count <= n:\n        count += 1\n    return count-1\n\ndef main():\n    print(highest_Power_of_2(10))\n\nmain()", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n<=1:\n        return 0\n    i = 0\n    while(n!=1):\n        n = n >> 1\n        i += 1\n    return i\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"\n    >>> find_lucas(2)\n    2\n    >>> find_lucas(3)\n    8\n    >>> find_lucas(4)\n    19\n    >>> find_lucas(5)\n    41\n    >>> find_lucas(6)\n    83\n    >>> find_lucas(7)\n    149\n    >>> find_lucas(8)\n    243\n    >>> find_lucas(9)\n    377\n    >>> find_lucas(10)\n    610\n    >>> find_lucas(11)\n    987\n    >>> find_lucas(12)\n    1597\n    >>> find_lucas(13)\n    2584\n    >>> find_lucas(14)\n    4181\n    >>> find_lucas(15)\n    6765\n    >>> find_lucas(16)\n    10946\n    >>> find_lucas(17)\n    17711\n    >>> find_lucas(18)\n    28657\n    >>> find_lucas(19)\n    46368\n    >>> find_lucas(20)\n    75025\n    >>> find_lucas(21)\n    121393\n    >>> find_lucas(22)\n    196418\n    >>> find_lucas(23)\n    317811\n    >>> find_lucas(24)\n    514229\n    >>> find_lucas(25)\n    832040\n    >>> find_lucas(26)\n    1346269\n    >>> find_lucas(27)\n    2178309\n    >>> find_lucas(28)\n    3524578\n    >>> find_lucas(29)\n    5702887\n    >>> find_lucas(30)\n    9227465\n    >>> find_lucas(31)\n    14930352\n    >>> find_lucas(32)\n    ", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef lucas_numbers():\n    \"\"\"\n    Create a generator to yield all the lucas numbers.\n    \"\"\"\n    def iter_lucas():\n        a = 2\n        b = 1\n        while True:\n            yield a\n            a, b = b, a+b\n    return iter_lucas()\n\ndef find_lucas(n):\n    \"\"\"\n    Use the generator to find the nth lucas number.\n    \"\"\"\n    lucas_nums = lucas_numbers()\n    for i in range(n):\n        lucas_nums.next()\n    return lucas_nums.next()\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\nimport math\n\n\ndef find_lucas(n):\n    \"\"\"\n    Find the nth lucas number\n    \"\"\"\n    return math.factorial(n) * (2 ** n - 1) // (n + 1)\n\n\ndef main():\n    print(find_lucas(100))\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas = 1\n    if n == 2:\n        return 1\n    for i in range(2, n+1):\n        lucas = lucas + find_lucas(i-1)\n    return lucas\n\ndef test_find_lucas():\n    assert find_lucas(9) == 76\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"return the nth lucas number\"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    l = 2\n    for i in range(2, n):\n        l, l1 = l+1, l\n        l = l1 + l\n    return l\n\ndef test_find_lucas():\n    assert find_lucas(0) == 1\n    assert find_lucas(1) == 2\n    assert find_lucas(2) == 3\n    assert find_lucas(9) == 76\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"\n    Assumes n is an integer > 0.\n    Returns the n'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return find_lucas(n/2) + find_lucas(n/2)\n    else:\n        return find_lucas((n-1)/2) + find_lucas((n-1)/2) + 1\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"This function finds the n'th lucas number.\"\"\"\n    previous = 1\n    next_ = 2\n    lucas = [1]\n\n    # find n lucas numbers\n    for i in range(2, n):\n        lucas.append(previous + next_)\n        temp = previous + next_\n        previous = next_\n        next_ = temp\n    return lucas[n-1]\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    assert n>0\n    if n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    elif n > 2:\n        return find_lucas(n-1) + find_lucas(n-2)\n    else:\n        return \"No value given\"\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n <= 1:\n        return n\n    return find_lucas(n - 1) + find_lucas(n - 2)\n\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, string):\n    for i, item in enumerate(lst):\n        lst[i] = string.format(item)\n    return lst\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(list_in, string):\n    list_out = []\n    for item in list_in:\n        list_out.append(string + str(item))\n    return list_out\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(l, s):\n    return [s.format(i) for i in l]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(l,s):\n    return [s.format(x) for x in l]\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, prefix):\n    return [prefix+str(e) for e in lst]\n\n# add_string([1,2,3,4],'temp{0}')\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, s):\n    newlst = []\n    for x in lst:\n        newlst.append(s + str(x))\n    return newlst\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, add_str):\n    if lst==[]:\n        return []\n    if type(lst)!=list:\n        return 'error'\n    if type(add_str)!=str:\n        return 'error'\n    first_str=lst[0]\n    if type(first_str)!=str:\n        return 'error'\n    lst.pop(0)\n    lst.insert(0, add_str.format(first_str))\n    return add_string(lst, add_str)\n\ndef test_add_string():\n    assert add_string([1,2,3,4], 'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert add_string([1,2,3,4], 'temp{0} temp{1}')==['temp1 temp2', 'temp3 temp4']\n    assert add_string(['temp1','temp2','temp3','temp4'], 'temp{0} temp{1}')==['temp1 temp2', 'temp3 temp4']\n\n# print(add_string(['temp1','temp2','temp3','temp4'], 'temp{0} temp{1}'))\n\n# assert add_string([1,2,3,4], 'temp{0} temp{1}')==['temp1 temp2', 'temp3 temp4']\n\n\ndef add_string_helper(lst, add_str, index):\n    if lst==[]:\n        return []\n    if type(lst)!=list:\n        return 'error'\n    if type(add_str)!=str:\n        return 'error'\n    if type(index)!=int:\n        return 'error'\n    first_str=lst[0]\n    if type(first_str)!=str:\n        return 'error'\n    if index==0:\n        lst.pop(0)\n        lst.insert(0, add_str.format(first_str))\n        return lst\n    lst.pop(0)\n    lst.insert(0, add_str.format(first_str))\n    return add_string_", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, new_str):\n    for item in lst:\n        lst[lst.index(item)] = new_str.format(item)\n    return lst\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(items, string):\n    return [string.format(item) for item in items]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, str):\n    newlst = []\n    for i in lst:\n        newlst.append(str.format(i))\n    return newlst\n\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(lst_1, lst_2, lst_3):\n    dict_1 = {lst_1[i]: lst_2[i] for i in range(len(lst_1))}\n    dict_2 = {lst_3[i]: dict_1 for i in range(len(lst_3))}\n    return dict_2\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(key, values, data):\n    # your code here\n    dict1={}\n    for i in range(0,len(key)):\n        dict1={key[i]: values[i] for key,values in zip(key, values)}\n    return [dict1]\n\nconvert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1, list2, list3):\n    result = {}\n    for i in list1:\n        result[i] = {}\n        for j in list2:\n            result[i][j] = list3[list1.index(i)]\n    return result\n\n# print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92]))\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1, list2, list3):\n    return [{'{}': {'{}': {}}}'.format(x, y, z) for x, y, z in zip(list1, list2, list3)]\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(names,home_towns,scores):\n    pass\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(school_list,student_list,grade_list):\n    \"\"\" \n    Input: \n        - school_list: a list of string, each string is school name\n        - student_list: a list of string, each string is student name\n        - grade_list: a list of integer, each integer is the student's grade\n    Return: \n        - a list of dictionary, each dictionary contains student's grades.\n    \"\"\"\n    result_list = []\n    for index in range(len(school_list)):\n        school_name = school_list[index]\n        result_dict = {}\n        for name in student_list:\n            grade = grade_list[index]\n            result_dict[name] = grade\n        result_list.append(result_dict)\n    return result_list\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(name, name2, number):\n    # YOUR CODE HERE\n    dic_list = []\n    for i in range(len(name)):\n        dic = {}\n        dic[name[i]] = {name2[i]: number[i]}\n        dic_list.append(dic)\n    return dic_list\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(students_list, names_list, marks_list):\n    return [{students_list[i]:{names_list[i]:marks_list[i]}} for i in range(len(students_list))]\n\n# Test cases", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list_1, list_2, list_3):\n  return [{list_1[i] : {list_2[i] : list_3[i]}} for i in range(len(list_1))]\n  ", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(subjects, students, marks):\n    '''\n    subjects: a list of strings\n    students: a list of strings\n    marks: a list of integers\n    '''\n    num_subjects = len(subjects)\n    num_students = len(students)\n    num_marks = len(marks)\n    \n    assert num_subjects == num_students == num_marks, \"arguments lists have different sizes\"\n    assert num_subjects > 0, \"lists must have at least 1 element\"\n    \n    dict_marks = {}\n    \n    for i in range(num_subjects):\n        dict_marks[subjects[i]] = {}\n        dict_marks[subjects[i]][students[i]] = marks[i]\n        \n    return dict_marks"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n\tif n <= 1:\n\t\treturn n\n\ta = n/2\n\tb = n/3\n\tc = n/4\n\td = n/5\n\tif a < b:\n\t\tif b < c:\n\t\t\tif c < d:\n\t\t\t\treturn c + max(a,b)\n\t\t\treturn c + max(a,b) + d\n\t\treturn b + max(a,c)\n\treturn b + max(a,c) + d\n\ndef main():\n\tassert get_max_sum(60) == 106\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(number):\n    if number < 5:\n        return number\n    elif number == 5:\n        return 10\n    return max(get_max_sum(number // 5) + number // 5,\n                get_max_sum(number // 4) + number // 4,\n                get_max_sum(number // 3) + number // 3,\n                get_max_sum(number // 2) + number // 2,\n                get_max_sum(number // 1) + number // 1)\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    f = {2:1, 3:2, 4:4, 5:8}\n    if n in f:\n        return f[n]\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\ndef main():\n    n = int(input())\n    print(get_max_sum(n))\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n\ndef get_max_sum_w_memo(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    memo = {1: 1, 2: 2, 3: 3, 4: 5, 5: 8}\n    for i in range(6, n):\n        # print(i)\n        memo[i] = max(memo[i//2] + i//2, memo[i//3] + i//3, memo[i//4] + i//4, memo[i//5] + i//5)\n    return memo[n]\n\n# print(get_max_sum(60))\n# print(get_max_sum_w_memo(60))\n\n# 2. write a function to find the max subarray of size k in a given array\ndef get_max_subarray_sum(arr, k):\n    # print(arr)\n    max_sum = float('-inf')\n    for i in range(k):\n        max_sum = max(max_sum, arr[i])\n    print(max_sum)\n    # print(max_sum)\n    max_subarray_sum = max_sum\n    # print(max_subarray_sum)\n    for j in range(k, len(", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    \"\"\"Get the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        max_sum = n\n        for i in range(2, int(n/2) + 1):\n            max_sum = max(max_sum, get_max_sum(n - i))\n        return max_sum + n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    return max([get_max_sum(n/i) + i for i in (2,3,4,5)]) if n>1 else 0\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    num_list = [i for i in range(1,n)]\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return num_list[0]\n\n    if n == 2:\n        return max(num_list)\n\n    max_sum = num_list[0]\n    max_sum2 = num_list[1]\n\n    for i in range(2, n):\n        num = num_list[i]\n        num2 = max_sum + num_list[i - 1]\n        num3 = max_sum2 + num_list[i - 2]\n\n        max_sum = max(num, num2, num3)\n        max_sum2 = max_sum\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    \"\"\"\n    :param n: n\n    :return: n\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n\n\ndef get_max_sum_v2(n):\n    \"\"\"\n    :param n: n\n    :return: n\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return max(n, get_max_sum_v2(n//2) + get_max_sum_v2(n//3) + get_max_sum_v2(n//4) + get_max_sum_v2(n//5))\n    else:\n        return max(n, get_max_sum_v2(n//2) + get_max_sum_v2(n//3) + get_max_sum_v2(n//4) + get_max_sum_v2(n//5)) + n\n\n\ndef get_max_sum_v3(n):\n    \"\"\"\n    :param n: n\n    :return: n\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return get_max_sum_v3(n//2) + get_max_sum_v3(n//3) + get_max_sum_v3(n//4) + get_max_sum_v3(n//5)\n    else:\n        return get", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n\n# In[33]:\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        m = [0 for i in range(n)]\n        m[1] = 1\n        m[2] = 2\n        for i in range(3, n):\n            m[i] = max(m[i // 2] + m[i // 3] + m[i // 4] + m[i // 5], i)\n    return m[n-1]\n"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lists):\n    #Write your code here\n    max_length = 0\n    max_list = []\n    for list in lists:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n    return max_length, max_list\n\n# Test Cases", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(list_of_lists):\n    return max([len(list(map(int,x))) for x in list_of_lists])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(L):\n    if not L:\n        return 0, []\n    else:\n        return max(map(lambda x: len(x), L)), max(L, key=len)", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(array):\n    return max(array, key=lambda x: len(x))\n\ndef main():\n    array = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\n    print(max_length_list(array))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(list_of_lists):\n    return max((len(l), l) for l in list_of_lists)\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n\treturn max([len(x) for x in lst])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(ls):\n    return max(ls, key=lambda l:len(l))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(nums):\n    '''\n    :type nums: List[List[int]]\n    :rtype: List[List[int]]\n    '''\n    nums = [len(x) for x in nums]\n    return (max(nums), [y for y in nums if y == max(nums)])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(l):\n    \"\"\"\n    l: list of list\n    returns: (length, list with maximum length)\n    \"\"\"\n    return (max([len(x) for x in l]), [i for i in l if len(i) == max([len(x) for x in l])])", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom functools import reduce\ndef max_length_list(ls):\n    max_length=len(ls[0])\n    return (max_length, reduce(lambda x,y:max(len(x),len(y)),ls))"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple1):\n    for i in range(len(tuple1) - 1):\n        for j in range(i + 1, len(tuple1)):\n            if tuple1[i] == tuple1[j]:\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(nums):\n    return len(set(nums)) == len(nums)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tpl):\n    return len(tpl) == len(set(tpl))\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n\n\n# Test cases.", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n# TODO: finish\n\n\ndef check_distinct(t: Tuple) -> bool:\n    return False\n\n\ndef check_distinct2(t: Tuple) -> bool:\n    return None\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(t):\n    '''\n    :param t: tuple\n    :return: bool\n    '''\n    return len(set(t)) == len(t)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(input_tuple):\n    if len(input_tuple) < 2:\n        return True\n    else:\n        return False\n\ndef check_distinct_1(input_tuple):\n    return input_tuple.count(input_tuple[0]) == len(input_tuple) - 1\n\ndef check_distinct_2(input_tuple):\n    return len(set(input_tuple)) == len(input_tuple)", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_):\n    return len(set(tuple_)) == len(tuple_)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(t):\n    distinct = []\n    for x in t:\n        if x not in distinct:\n            distinct.append(x)\n    return len(distinct) == len(t)\n\n# test function"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    # Your code goes here\n    # it may be beneficial to use a hash table\n    for i in range(len(s)):\n        if s.count(s[i]) == 1:\n            return s[i]\n    return None\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n# def first_non_repeating_character(s):\n#     \"\"\"\n#     :param s:\n#     :return:\n#     \"\"\"\n#     char_set = set()\n#     for i in s:\n#         if i in char_set:\n#             char_set.remove(i)\n#         else:\n#             char_set.add(i)\n#\n#     for i in s:\n#         if i not in char_set:\n#             return i\n#\n#     return None\n\n\ndef first_non_repeating_character(s):\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    char_dict = {}\n    for i in s:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n\n    for i in s:\n        if char_dict[i] == 1:\n            return i\n\n    return None\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(s):\n    \"\"\"\n    >>> first_non_repeating_character(\"abcabc\")\n    'd'\n    \"\"\"\n    try:\n        return s[0]\n    except IndexError:\n        return None\n\n# -- run code here --", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    Returns the first non-repeating character in a given string.\n    \"\"\"\n    char_list = []\n    for char in string:\n        if char in char_list:\n            char_list.remove(char)\n        else:\n            char_list.append(char)\n    if not char_list:\n        return None\n    else:\n        return char_list[0]\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    # implement here\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(s):\n    \"\"\"\n    :param s: string\n    :return: first non repeating character, or None\n    \"\"\"\n    if s == \"\":\n        return None\n    char_list = list(s)\n    for char in char_list:\n        if char_list.count(char) == 1:\n            return char\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    pass\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\nimport pytest\n\ndef first_non_repeating_character(string):\n    # Write your code here\n    for char in string:\n        if string.count(char) == 1:\n            return char\n    return None\n\ndef test_first_non_repeating_character():\n    assert first_non_repeating_character(\"\") == None\n    assert first_non_repeating_character(\"abc\") == \"a\"\n    assert first_non_repeating_character(\"ab\") == \"b\"\n    assert first_non_repeating_character(\"abcc\") == \"c\"\n    assert first_non_repeating_character(\"abcabc\") == None\n    assert first_non_repeating_character(\"aabac\") == \"b\"\n    assert first_non_repeating_character(\"abccad\") == \"c\"\n    assert first_non_repeating_character(\"abcde\") == \"a\"\n    assert first_non_repeating_character(\"abcab\") == \"a\"", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(text):\n    \"\"\"\n    This function should return the first non-repeating character in the string.\n    If the string contains no non-repeating character, return None.\n    \"\"\"\n    # Your code here\n    pass\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    >>> first_non_repeating_character(\"abcabc\")\n    None\n\n    >>> first_non_repeating_character(\"abcab\")\n    'b'\n\n    >>> first_non_repeating_character(\"aabbb\")\n    'a'\n    \"\"\"\n    seen = {}\n    for char in string:\n        if char not in seen:\n            seen[char] = True\n        else:\n            seen[char] = False\n    for key in seen:\n        if seen[key] is False:\n            return key\n"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if not string or not string.strip():\n        return \"Invalid\"\n    if len(string) == 1:\n        return \"Valid\"\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(str1):\n    if re.findall(r'^[a-zA-Z0-9\\s]+$', str1):\n        if re.findall(r'^[a-zA-Z0-9\\s]*[a-zA-Z0-9]$', str1):\n            return \"Valid\"\n        else:\n            return \"Invalid\"\n    else:\n        return \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(s):\n    if re.match(r\"^[a-z]*[a-z]$\", s) is not None:\n        return \"Valid\"\n    else:\n        return \"Not Valid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if string[0] == string[len(string)-1] and string[0] in string:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if string[0] == string[-1] and len(string) >= 2:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if string.startswith(string[len(string)-1]) and string.endswith(string[0]):\n        return \"Valid\"\n    return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\n\ndef check_char(st):\n    if re.match(r\"^[a-zA-Z0-9]\", st[0]) and re.match(r\"[a-zA-Z0-9]$\", st[-1]):\n        return \"Valid\"\n    return \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(s):\n    try:\n        assert re.match(r\"^[a-z][a-z]|[A-Z][A-Z]$\", s)\n        return \"Valid\"\n    except AssertionError:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(str):\n    pattern = \"^.?.?$|^..?$\"\n    return \"Valid\" if re.search(pattern, str) else \"Invalid\"\n"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n#First Solution\ndef median_numbers(a,b,c):\n    a.append(b)\n    b.append(c)\n    a.sort()\n    a.append(b)\n    b.append(c)\n    b.sort()\n    a.sort()\n    return a[1]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1,num2,num3):\n    num_list = [num1, num2, num3]\n    num_list.sort()\n    return num_list[1]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a, b, c):\n  a_and_b = a + b\n  a_and_c = a + c\n  b_and_c = b + c\n  numbers = [a_and_b, a_and_c, b_and_c]\n  numbers.sort()\n  middle = numbers[1]\n  return middle\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(num1, num2, num3):\n    numbers = (num1, num2, num3)\n    sorted_numbers = sorted(numbers)\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[int((len(sorted_numbers) / 2) - 1)] + sorted_numbers[int((len(sorted_numbers) / 2))]) / 2.0\n    else:\n        return sorted_numbers[int(len(sorted_numbers) / 2)]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(n1,n2,n3):\n    \"\"\"\n    Return the median of three numbers.\n    \"\"\"\n    n1=float(n1)\n    n2=float(n2)\n    n3=float(n3)\n    a=[n1,n2,n3]\n    a.sort()\n    if (len(a)%2)==0:\n        return float(a[(len(a)/2)-1]+a[(len(a)/2)])/2.0\n    else:\n        return float(a[int(len(a)/2)])\n\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers)%2==0:\n        return (numbers[len(numbers)//2]+numbers[len(numbers)//2-1])/2\n    else:\n        return numbers[len(numbers)//2]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(num1, num2, num3):\n    \"\"\"\n    Given three numbers, finds the median number\n    \"\"\"\n    numbers = (num1, num2, num3)\n    numbers.sort()\n\n    length = len(numbers)\n\n    if length % 2 == 0:\n        return (numbers[int(length/2)-1] + numbers[int(length/2)])/2\n    else:\n        return numbers[int(length/2)]\n\n\n# +\nimport unittest\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    return (a+b+c)/3\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers) % 2 != 0:\n        return numbers[int(len(numbers)/2)]\n    else:\n        return (numbers[int(len(numbers)/2)]+numbers[int(len(numbers)/2)-1])/2.0\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1,num2,num3):\n    return (num1+num2+num3)/3\n\n# Do not change any code below this line"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    total = 0\n    for num in nums:\n        digits = str(num)\n        for i in digits:\n            total += int(i)\n    return total\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(my_list):\n    sum=0\n    for n in my_list:\n        if isinstance(n,int):\n            while n!=0:\n                sum+=n%10\n                n=n//10\n    return sum\n\nmy_list=[10,2,56]", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(list):\n    total = 0\n    for i in list:\n        while i>0:\n            total += i % 10\n            i = i//10\n    return total\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(l):\n    \"\"\"\n        Write your code here.\n    \"\"\"\n    pass\n\n\n# Write a function to get the maximum of three numbers.\n# If all of them are equal, return any one.", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(lst):\n    \"\"\"\n    :param lst: a list of integers\n    :return: the sum of digits of each integer in lst\n    \"\"\"\n    total = 0\n    for i in lst:\n        for j in str(i):\n            total += int(j)\n    return total\n\ndef sum_of_digits2(lst):\n    \"\"\"\n    :param lst: a list of integers\n    :return: the sum of digits of each integer in lst\n    \"\"\"\n    lst_sum = sum(map(lambda x: sum(map(int, str(x))), lst))\n    return lst_sum\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n# SOLUTION #1\n# Iterate through the list and for each element, get the digits as a list\n# For each digit, add it to a sum\n# Finally, return the sum\ndef sum_of_digits(l):\n    sum = 0\n    for i in l:\n        sum = sum + [int(x) for x in str(i)]\n    return sum\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    sum = 0\n    for number in numbers:\n        if type(number) is int:\n            for digit in str(number):\n                sum += int(digit)\n    return sum", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n# your code here\ndef sum_of_digits(list_):\n    # create a set to store the digit values\n    result = set()\n    for number in list_:\n        for digit in str(number):\n            result.add(int(digit))\n    return sum(result)\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(list_of_integers):\n    return sum([int(digit) for digit in str(list_of_integers)])\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(num_list):\n    sum_digit = 0\n    for i in range(0, len(num_list)):\n        num = num_list[i]\n        while(num>0):\n            digit = num % 10\n            sum_digit += digit\n            num = num // 10\n    return sum_digit\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(*lists):\n    '''\n    Returns a tuple of the bitwise xor operation for all the items in the lists\n    '''\n    # Write your code here\n    result = []\n    for item in lists[0]:\n        if not lists[1:]:\n            result.append(item)\n        else:\n            result.append(item ^ bitwise_xor(*lists[1:]))\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple1, tuple2):\n    result = []\n    for i in range(0, len(tuple1)):\n        result.append(tuple1[i] ^ tuple2[i])\n    return tuple(result)\n\n# A single line of code to perform the xor across the tuples\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(map(lambda x: x[0]^x[1], zip(tuple1, tuple2)))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple_one, tuple_two):\n    return tuple(a^b for a, b in zip(tuple_one, tuple_two))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(*args):\n    result = 0\n    for tup in args:\n        for x in tup:\n            result = result ^ x\n    return result\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(*args):\n    \"\"\"\n    Given the arguments, it performs the mathematical bitwise xor operation across the given tuples.\n\n    Parameters\n    ----------\n    args : tuple\n        All the tuples which is to be used for the bitwise xor operation.\n\n    Returns\n    -------\n    tuple\n        The tuple containing the resultant of the bitwise xor operation.\n\n    Examples\n    --------\n    >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n    (15, 6, 5, 10)\n    \"\"\"\n    # return the xor of the input tuples\n    return tuple(a ^ b for a, b in zip(args[0], args[1]))\n\ndef test_bitwise_xor():\n    \"\"\"\n    Test the bitwise_xor function.\n    \"\"\"\n    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\nfrom typing import Tuple\n\ndef bitwise_xor(a: Tuple[int], b: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n    Returns a tuple with the result of the mathematical bitwise xor operation\n    \"\"\"\n    result = ()\n    for i in range(0, len(a)):\n        result = result + (a[i] ^ b[i])\n    return result\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple_1, tuple_2):\n    return tuple(t1^t2 for t1,t2 in zip(tuple_1, tuple_2))", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(t1, t2):\n    return tuple(map(lambda x, y: x ^ y, t1, t2))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(a, b):\n    \"\"\"\n    >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n    (15, 6, 5, 10)\n    \"\"\"\n    return tuple(map(operator.xor, a, b))\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\nfrom functools import reduce\nfrom operator import xor\n\n\ndef bitwise_xor(*args):\n    return reduce(xor, args)\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list):\n    # pass\n    freq = 0\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                freq = freq + 1\n    return freq\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(order_list):\n    if not order_list:\n        return 0\n    \n    counter = {}\n    for element in order_list:\n        if tuple(sorted(element)) in counter:\n            counter[tuple(sorted(element))] += 1\n        else:\n            counter[tuple(sorted(element))] = 1\n    \n    return len(counter.keys())\n\n\n# +\nimport unittest\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(arr):\n    unique = set()\n    count = 0\n    for x in arr:\n        unique.add(tuple(sorted(x)))\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\nfrom collections import Counter\n\ndef extract_freq(l):\n    return len(set(tuple(sorted(k)) for k in l))\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(my_list):\n    \"\"\"\n    my_list: list of tuples\n    returns: int\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(list):\n    \"\"\"\n    The function takes a list as parameter\n    \"\"\"\n    return len(set(tuple(sorted(i)) for i in list))\n\n\nextract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])\n\n\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\nfrom collections import Counter\n\ndef extract_freq(list):\n    counts = Counter(tuple(sorted(item)) for item in list)\n    return len(counts)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(l):\n    \"\"\"\n    >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])\n    3\n    \"\"\"\n    l = list(l)\n    # Note: The idea of using a dictionary to count is inspired by:\n    # http://stackoverflow.com/questions/2457672/count-the-frequency-of-a-group-of-items-in-a-list\n    freqs = dict()\n    for a, b in l:\n        if (a, b) in freqs:\n            freqs[(a, b)] += 1\n        else:\n            freqs[(a, b)] = 1\n    return len(freqs)\n\n\ndef test_extract_freq():\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n    assert extract_freq([(1, 2), (1, 2), (1, 2), (1, 2)]) == 1\n    assert extract_freq([(1, 2), (3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n    assert extract_freq([]) == 0\n\n\n#\n# The following functions should NOT be modified.\n#\ndef main():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    freq_dict = {}\n    for item in lst:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    freq_list = []\n    for key, value in freq_dict.items():\n        freq_list.append(value)\n    return len(freq_set(freq_list))\n\n# Test case", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(l):\n    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)\n\ndef test_extract_freq():\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (3, 4)] ) == 3\n\ndef main():\n    test_extract_freq()\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# My Approach\ndef add_nested_tuples(t1, t2):\n    t3 = ()\n    for i in range(len(t1)):\n        t3 = t3 + tuple(map(lambda x, y: x + y, t1[i], t2[i]))\n    return t3\n\n# Test Code", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tuple_a, tuple_b):\n    if not tuple_a:\n        return tuple_b\n    if not tuple_b:\n        return tuple_a\n    return add_nested_tuples(tuple_a[1:], tuple_b[1:]) + (tuple_a[0] + tuple_b[0],)\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# TLE\ndef add_nested_tuples(a, b):\n    sum_tuples = []\n    for i in range(len(a)):\n        s_tuple = []\n        for j in range(len(a[i])):\n            s_tuple.append(a[i][j] + b[i][j])\n        sum_tuples.append(tuple(s_tuple))\n    return sum_tuples\n\n\ndef add_nested_tuples2(a, b):\n    return tuple(tuple(x+y for x,y in zip(a[i], b[i])) for i in range(len(a)))\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        if len(tuple1[i]) != len(tuple2[i]):\n            return False\n        result.append(tuple(x + y for x, y in zip(tuple1[i], tuple2[i])))\n    return tuple(result)", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    return tuple(tuple(map(lambda i, j: i + j, i, j)) for i, j in zip(t1, t2))\n\n\ndef add_nested_tuples_in_place(t1, t2):\n    for i in range(len(t1)):\n        for j in range(len(t1[i])):\n            t1[i][j] += t2[i][j]\n    return t1\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    pass\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(x, y):\n    return tuple(tuple(map(lambda x, y: x + y, elem1, elem2)) for elem1, elem2 in zip(x, y))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(a, b):\n    return [tuple([sum(i) for i in zip(a[0], b[0])]), tuple([sum(i) for i in zip(a[1], b[1])]), tuple([sum(i) for i in zip(a[2], b[2])]), tuple([sum(i) for i in zip(a[3], b[3])])]\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\nfrom typing import Tuple\n\n\ndef add_nested_tuples(first_tuple: Tuple[Tuple, Tuple], second_tuple: Tuple[Tuple, Tuple]) -> Tuple[Tuple, Tuple]:\n    return (\n        (first_tuple[0][0] + second_tuple[0][0], first_tuple[0][1] + second_tuple[0][1]),\n        (first_tuple[1][0] + second_tuple[1][0], first_tuple[1][1] + second_tuple[1][1]),\n    )\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tuple_1, tuple_2):\n    return tuple(map(lambda x, y: x+y, tuple_1, tuple_2))\n\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    \"\"\"\n    Compute ncr%p\n    \"\"\"\n    if (n,r,p) in NCR_CACHE:\n        return NCR_CACHE[(n,r,p)]\n\n    if n < 0 or r < 0 or p < 0:\n        raise ValueError(\"n,r,p must all be non-negative\")\n\n    if r > n:\n        raise ValueError(\"ncr requires n >= r\")\n\n    # it turns out that if you take ncr%p = (ncr*p)%p\n    # and then take the remainder when dividing by p,\n    # you get the correct answer.\n    # We use modular exponentiation in log(n)/log(p) time.\n    # NOTE: This is inefficient, as it makes n/p^r operations.\n    # Maybe there is a way to improve it.\n    ncr = (n+1)*(r+1)//2\n    x = pow(ncr,p,p)\n    return x % p\n\ndef ncr_modp_optimized(n,r,p):\n    \"\"\"\n    Compute ncr%p in O(log(p)) time\n    \"\"\"\n    assert n >= 0\n    assert r >= 0\n    assert p >= 0\n\n    if r > n:\n        raise ValueError(\"ncr requires n >= r\")\n\n    if n == 0 and r == 0:\n        return 1\n\n    if r == 0:\n        return 1\n\n    if r == 1:\n        return n\n\n    if r == 2:\n        return n*(n-1)//2 % p\n\n    # by the pigeonhole principle, we can assume\n    # that n >= r >= 3.\n\n    # Compute NCR_MOD_INV[n][r] using a simple algorithm.\n    # Assumes n >= r >= 3\n    # Returns NCR_MOD_INV[n][r] such that:\n    #     NCR_MOD_INV[n][r] * n = (n-1) * NCR_MOD_INV[n-1][r-1] (mod p)\n    NCR_MOD_INV = [[None for _ in range(r+1)]", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    if p==1: return 0\n    if n<0 or r<0: raise ValueError('ncr_modp: bad value')\n    return (factorial(n)*factorial(r)%p)\n\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    \"\"\"\n    n: int, numerator\n    r: int, denominator\n    p: int, modulus\n    return: int\n    \"\"\"\n    if r == 0:\n        return 1\n    else:\n        if (n - r) % r == 0:\n            return (ncr_modp((n - r)//r, r, p) * pow(n, r, p)) % p\n        else:\n            return 0\n\ndef ncr(n, r):\n    \"\"\"\n    n: int, numerator\n    r: int, denominator\n    return: int\n    \"\"\"\n    return ncr_modp(n, r, p)\n\nn = 10\nr = 2", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n\treturn reduce(lambda a,b:a*b%p, (p-b)*(p-a)%p for a in xrange(n,n-r-1,-1) for b in xrange(a,n))\n\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n#This is the function which computes the value of ncr%p.\ndef ncr_modp(n,r,p):\n    if (n==0 and r==0):\n        return 1\n    elif(n<0 or r<0):\n        return -1\n    elif(n==r and r==0):\n        return 0\n    elif(n>r):\n        return 0\n    else:\n        return (ncr_modp(n-1,r-1,p)*p%p*inv(n-r,p)%p)%p\n\n#Test cases\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nimport unittest\nfrom math import factorial\n\ndef ncr_modp(n,r,p):\n    if r<0 or r>n:\n        raise ValueError(\"Invalid r value for ncr\")\n    if n<0 or n>p:\n        raise ValueError(\"Invalid n value for ncr\")\n    if p<0 or p%n:\n        raise ValueError(\"Invalid p value for ncr\")\n    return (factorial(n)/(factorial(r)*factorial(n-r))) % p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    ncr_numer=factorial(n)/factorial(n-r)\n    ncr_denom=factorial(r)/factorial(r-1)\n    ncr_mod_p=(ncr_numer*ncr_denom) % p\n    return ncr_mod_p\n\nncr_modp(10,2,13)\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    return (ncr(n,r)%p)\n\n#Returns the value of ncr%p\n#Prints a list of the values of ncr%p for n=1,2,3,...,10 and r=1,2,3,...,10\n\nn = 1\nwhile n<=10:\n    r = 1\n    while r<=10:\n        print n,r,ncr_modp(n,r,13)\n        r+=1\n    n+=1\n\n#Returns the value of ncr%p\n#Prints a list of the values of ncr%p for n=1,2,3,...,10 and r=1,2,3,...,10\n\nn = 1\nwhile n<=10:\n    r = 1\n    while r<=10:\n        print n,r,ncr_modp(n,r,29)\n        r+=1\n    n+=1\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    \"\"\"\n    Calculates the number of ways n things can be chosen out of r without replacement, modulo p.\n\n    p = modulus\n    n = number of things\n    r = number of things to be chosen\n    \"\"\"\n    assert n>=0\n    assert r>=0\n    assert p>0\n    assert r<=n\n    if n<r:\n        return 0\n    if p==1:\n        return 1\n    if r==n:\n        return 1\n    if r==0:\n        return 1\n\n    # 2^k such that p^k + p^(k+1) + ... + p^(k+m-1) <= n\n    k = (log(p,2) - 1)/log(p,2)\n    m = int(n/r)\n    if m*r < n:\n        m = m + 1\n    if m == 1:\n        m = 0\n    # ncr_modp(n,r,p) = ncr_modp(n,r,p) + ncr_modp(n-r,r,p)\n    ncr = 0\n    for x in range(1,k+1):\n        ncr = ncr + ncr_modp(n-r,r,p**x)\n    return ncr % p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    n,r,p = int(n),int(r),int(p)\n    #Your code here\n    if r>n-r:\n        r=n-r\n    ncr_modp=math.factorial(n)/(math.factorial(r)*math.factorial(n-r))\n    ncr_modp=(ncr_modp%p+p)%p\n    return ncr_modp\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    url_pattern = re.compile(r'https://www\\.google\\.com')\n    if url_pattern.match(url):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    return True if re.match(r'^http:\\/\\/|https:\\/\\/', url) else False\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    import re\n    return re.match(r'^(https?|ftp)://',url)\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(s):\n    return re.match(r'^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$', s)\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    pattern = r'https?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'\n    return bool(re.match(pattern, url))\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\n\ndef is_valid_URL(url):\n    pattern = re.compile(\n        r\"(https?://)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\"\n    )\n    if pattern.match(url):\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    import re\n    valid_url = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  #domain...\n        r'localhost|'  #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return valid_url.match(url) is not None", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    regex = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'\n    return bool(re.match(regex, url))\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    if re.match('https?://(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?', url):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\ndef is_valid_URL(url):\n    regex = re.compile(\n        r\"(http(s)?://)?([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?\"\n    )\n    result = regex.match(url)\n    return bool(result)\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x, y):\n    if x < y:\n        return x\n    else:\n        return y\n\n#Test your code", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    return min(a, b)\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    \"\"\"\n    >>> minimum(1, 2)\n    1\n    >>> minimum(2, 1)\n    1\n    \"\"\"\n    return min(a, b)\n\n\n# Write a python function to find the maximum of two numbers.", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x,y):\n    return min(x,y)\n\n# Test 1", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\nimport math\n\n\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x, y):\n    return x if x<y else y\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n# asserts", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a<b:\n        return a\n    else:\n        return b\n\n# if __name__ == \"__main__\":\n#     assert minimum(1,2) == 1"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,elem):\n    return elem in tup\n\ndef main():\n    print(\"Tuple function test\")\n    tup=(2,3,4,1,2,3,4,1,2,3,4)\n    print(\"Test check_tuplex(tup, 2) returns\",check_tuplex(tup, 2))\n    print(\"Test check_tuplex(tup, 5) returns\",check_tuplex(tup, 5))\n    print(\"Test check_tuplex(tup, 1) returns\",check_tuplex(tup, 1))\n    print(\"Test check_tuplex(tup, 6) returns\",check_tuplex(tup, 6))\n    print(\"Test check_tuplex(tup, 4) returns\",check_tuplex(tup, 4))\n\n    print(\"String function test\")\n    word=\"user\"\n    print(\"Test check_string(word, 'u') returns\",check_string(word, 'u'))\n    print(\"Test check_string(word, 'z') returns\",check_string(word, 'z'))\n    print(\"Test check_string(word, 's') returns\",check_string(word, 's'))\n    print(\"Test check_string(word, 'e') returns\",check_string(word, 'e'))\n    print(\"Test check_string(word, 'r') returns\",check_string(word, 'r'))\n    print(\"Test check_string(word, 'y') returns\",check_string(word, 'y'))\n    print(\"Test check_string(word, 'o') returns\",check_string(word, 'o'))\n    print(\"Test check_string(word, 'm') returns\",check_string(word, 'm'))\n    print(\"Test check_string(word, 'l') returns\",check_string(word, 'l'))\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, el):\n    if el in tup:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, item):\n\treturn item in tup", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n#Print the following string using the format operator.", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(the_tuple, the_element):\n    for e in the_tuple:\n        if e == the_element:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(t, val):\n    return (val in t)\n\n# Does it work?"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return 'Even Parity'\n    else:\n        return 'Odd Parity'\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(number):\n    return \"Even Parity\" if number%2 == 0 else \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n\ndef main():\n    print(\"Testing Parity module\")\n    assert find_Parity(12) == \"Even Parity\"\n    print(\"All tests passed\")\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n\ndef test_find_Parity():\n    assert find_Parity(12) == \"Even Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    return \"Odd Parity\" if num % 2 else \"Even Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_parity(n):\n    \"\"\"\n    Function that finds parity of number\n    \"\"\"\n    if n%2==0:\n        return \"Even parity\"\n    else:\n        return \"Odd parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_parity(n):\n    if n%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# assert find_parity(12) == \"Even Parity\"", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_parity(number):\n\tif number%2 == 0:\n\t\treturn \"Even parity\"\n\telse:\n\t\treturn \"Odd parity\"\n\ndef main():\n\tnumber = input(\"Enter a number: \")\n\tassert find_parity(number) == \"Even parity\"\n\tprint(find_parity(number))\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    if num >= 100:\n        return num\n    else:\n        return rearrange_bigger(rearrange_bigger_helper(num))\n\ndef rearrange_bigger_helper(num):\n    if num < 10:\n        return num\n    else:\n        return rearrange_bigger_helper(sum(map(int,str(num))))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    \"\"\"\n    >>> rearrange_bigger(12)\n    21\n    >>> rearrange_bigger(2233)\n    3322\n    >>> rearrange_bigger(3322)\n    3322\n    >>> rearrange_bigger(1234)\n    4321\n    \"\"\"\n    reversed_num = reversed(str(num))\n    for i in reversed_num:\n        if i not in reversed_num:\n            return int(''.join(reversed_num))\n        else:\n            reversed_num.remove(i)\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(x):\n    list_digits = str(x)\n    list_digits.sort()\n    result = ''\n    for digit in list_digits:\n        result += digit\n    return int(result)\n\ndef test_function(test_case):\n    digits = test_case[0]\n    solution = test_case[1]\n    output = rearrange_bigger(digits)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[22, 33], [70, 12]])\ntest_function([[12, 21], [33, 44]])\ntest_function([[43, 61], [81, 99]])\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    '''\n    rearrange_bigger(n)\n        -> int: the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    l = len(n)\n    for i in range(l):\n        for j in range(l-1):\n            if l >= i+1:\n                if l > i+1:\n                    if n[i] < n[i+1]:\n                        n[i], n[i+1] = n[i+1], n[i]\n                        break\n                    else:\n                        continue\n                else:\n                    break\n    return int(n)\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    # Your code here\n    num_str = str(num)\n    new_num = ''\n    for x in num_str:\n        new_num += str(int(x)*10)\n    new_num = int(new_num)\n    return new_num\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    result = [int(x) for x in str(n)]\n    result.sort(reverse=True)\n    result = int(''.join(map(str, result)))\n    return result\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(number):\n    string = str(number)\n    while len(string)>1:\n        string.sort(reverse=True)\n        string = ''.join(string)\n    return int(string)\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    arr = [int(i) for i in str(n)]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    return int(\"\".join([str(i) for i in arr]))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    num = str(num)\n    idx = num.find(\"9\")\n    if idx == -1:\n        # num is a single digit, return 0 if it is 9, else return num + 1\n        if num == \"9\":\n            return \"0\"\n        else:\n            return str(int(num) + 1)\n    else:\n        # num is not a single digit, swap the digit before and after the 9, \n        # then return the number with the 9 in front and the original digit\n        # behind\n        return str(int(num[:idx] + num[idx+1:])) + str(int(num[idx]))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    num = str(n)\n    a = 0\n    b = 0\n    for i in range(len(num)-1, -1, -1):\n        if int(num[i]) > int(num[i+1]):\n            a = int(num[i])\n            b = int(num[i+1])\n            break\n    if a == 0:\n        return -1\n    else:\n        c = str(a) + str(b) + num[len(num)-1]\n        return int(c)\n\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(lst1, lst2, k):\n    return sorted(set(zip(lst1, lst2)), key=lambda x: (x[0], x[1]), reverse=True)[:k]\n\n\ndef test_k_smallest_pairs():\n    lst1 = [1, 3, 7]\n    lst2 = [2, 4, 6]\n    k = 2\n\n    expected = [[1, 2], [1, 4]]\n\n    assert k_smallest_pairs(lst1, lst2, k) == expected\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(a, b, k):\n    n = len(a)\n    if n==0 or n==1 or k==1:\n        return []\n    pairs = []\n    sorted_a = sorted(a)\n    sorted_b = sorted(b)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sorted_a[i]+sorted_b[j]<sorted_a[n-1]+sorted_b[0]:\n                pairs.append([sorted_a[i], sorted_b[j]])\n            if len(pairs)==k:\n                break\n    return pairs\n\n# test_cases = [([1,3,7],[2,4,6],2), ([3,1,2],[2,4,6],1), ([1,3,7],[2,4,6],3)]\n# for t in test_cases:\n#     print(f\"Input: {t[0]}, {t[1]}, {t[2]}\")\n#     print(k_smallest_pairs(t[0], t[1], t[2]))\n#     print(\"Expected Output: [1, 2], [1, 4], [2, 4], [2, 6], [3, 4], [3, 6], [4, 6]\")\n#     print(\"----------------\")\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(first_list, second_list, k):\n    def get_min(first_list, second_list, k, i, j):\n        min_val = []\n        while i < len(first_list) and j < len(second_list) and k:\n            if first_list[i] < second_list[j]:\n                min_val.append([first_list[i], second_list[j]])\n                i += 1\n            else:\n                j += 1\n            k -= 1\n        return min_val\n    \n    return get_min(first_list, second_list, k, 0, 0)\n\n\n# +\ndef test_get_min():\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\ntest_get_min()\n# -\n\n# # 4) Find the median of a list\n# Write a function to find the median of a list. If there are an odd number of elements in the list, return the middle one.\n#\n# if len(lst) % 2 == 0:\n# return (lst[len(lst)//2] + lst[(len(lst)//2)-1]) / 2\n# else:\n# return lst[len(lst)//2]\n#\n# assert median([1,2,3])==2\n# assert median([1,3,5])==3\n\n# +\ndef median(lst):\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2] + lst[(len(lst)//2)-1]) / 2\n    else:\n        return lst[len(lst)//2]\n    ", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Sorting\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    # sort nums1 and nums2\n    nums1.sort()\n    nums2.sort()\n\n    result = []\n    for i in range(k):\n        result.append([nums1[i], nums2[i]])\n\n    return result\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1,arr2,k):\n    arr = []\n    for i in arr1:\n        for j in arr2:\n            arr.append([i,j])\n    return sorted(arr,key=lambda x:x[0])[:k]\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\n# K-Smallest Pairs\n# Difficulty: Medium\n# Category: Hash Table, Sorting\n# Tags: Hash Table, Pairs, Sorting\n# Runtime: 40 ms\n# Memory Usage: 13.9 MB\n# Editor: 1.0.0\n\ndef k_smallest_pairs(arr1, arr2, k):\n    k_smallest_pairs = []\n    for number in arr1:\n        index_of_number = arr2.index(number)\n        k_smallest_pairs.append([number, arr2[index_of_number]])\n        arr2.remove(number)\n        k = k - 1\n        if k == 0:\n            break\n    return k_smallest_pairs\n\n\ndef main():\n    print(k_smallest_pairs([1, 3, 7], [2, 4, 6], 2))\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1,arr2,k):\n    arr1=sorted(arr1)\n    arr2=sorted(arr2)\n    ans=[]\n    for i in range(len(arr1)):\n        for j in range(i+1,k):\n            ans.append([arr1[i],arr2[j]])\n    return ans\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(first_arr, second_arr, k):\n    res = []\n    for i in first_arr:\n        for j in second_arr:\n            res.append([i,j])\n    return sorted(res, key = lambda x:x[0])[:k]", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(first, second, k):\n    first = sorted(first)\n    second = sorted(second)\n    pairs = []\n    for i in range(k):\n        pairs.append([first[i], second[i]])\n    return pairs\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1,arr2,k):\n    list_ = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if k == 0:\n                return list_\n            if arr1[i] == arr2[j]:\n                list_.append((arr1[i],arr2[j]))\n                k = k - 1\n    return list_\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(a):\n    \"\"\"\n    :param a: a list of tuples with integer values\n    :return: return the minimum product\n    \"\"\"\n    return min([x[0]*x[1] for x in a])", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(list_tuple):\n    return min(tuple(product) for product in list_tuple)\n\n\n#print(min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] ))\n\n\n\n# -\n\n# ### Finding the lowest product of a tuple\n#\n# Write a function to find the lowest product of a tuple\n#\n# ```\n# assert lowest_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==4\n# ```\n\n# +\n# Write a function to find the lowest product of a tuple\n\n# Your solution\ndef lowest_product_tuple(list_tuple):\n    return min(tuple(product) for product in list_tuple)\n\n\n#print(lowest_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] ))\n\n\n\n# -\n\n# ### Finding the highest product of a tuple\n#\n# Write a function to find the highest product of a tuple\n#\n# ```\n# assert highest_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==9\n# ```\n\n# +\n# Write a function to find the highest product of a tuple\n\n# Your solution\ndef highest_product_tuple(list_tuple):\n    return max(tuple(product) for product in list_tuple)\n\n\n#print(highest_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] ))\n\n\n\n# -\n\n# ### Finding the product of two numbers\n#\n# Write a function to find the product of two numbers\n#\n# ```\n# assert product(5, 10)==50\n# ```\n\n# +\n# Write a function to find the product of two numbers\n\n# Your solution\ndef product(number1", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuple_list):\n    result_list = [x * y for x, y in tuple_list]\n    return min(result_list)\n\n\n# +", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(product_tuple):\n    if len(product_tuple) < 1:\n        raise ValueError(\"List is empty.\")\n    else:\n        minimum_product = 0\n        for item in product_tuple:\n            if minimum_product < (item[0]*item[1]):\n                minimum_product = item[0]*item[1]\n        return minimum_product\n\n\ndef test_min_product_tuple():\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    return min(a*b for a,b in tuples)\n\n\n# 2) Write a function to find the sum of the first n natural numbers.\n# assert sum_first_n_natural_numbers(3)==6\ndef sum_first_n_natural_numbers(n):\n    return sum(range(1, n + 1))\n\n# 3) Write a function that finds the index of the last occurrence of an element in a list.\n# assert last_index_of_element([1, 2, 3, 4, 5], 3)==3\ndef last_index_of_element(list_of_numbers, search_element):\n    return list_of_numbers.index(list_of_numbers[::-1].index(search_element))\n\n\n# 4) Write a function that takes in a string and returns a list of all the characters in the string\n# assert list_of_all_characters('abc') == ['a', 'b', 'c']\ndef list_of_all_characters(string):\n    return [char for char in string]\n\n\n# 5) Write a function that takes a string and returns the length of that string.\n# assert get_length('abc') == 3\ndef get_length(string):\n    return len(string)\n\n\n# 6) Write a function that takes a list and returns the sum of all the elements in the list.\n# assert sum_list([1, 2, 3]) == 6\ndef sum_list(list_of_numbers):\n    return sum(list_of_numbers)\n\n\n# 7) Write a function that takes a list of lists and returns a list that contains the flattened list.\n# assert flatten_list_of_lists([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]\ndef flatten_list_of_lists(lists):\n    return [item for", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuple_list):\n    if tuple_list is None or tuple_list == []:\n        return 0\n    min_product = 0\n    min_tuple = None\n    for index in range(0, len(tuple_list)):\n        tuple_product = tuple_list[index][0] * tuple_list[index][1]\n        if (min_product == 0 or tuple_product < min_product) and (min_tuple is None or tuple_list[index][0] * tuple_list[index][1] < min_tuple[0] * min_tuple[1]):\n            min_product = tuple_product\n            min_tuple = tuple_list[index]\n    return min_product\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(list1):\n    min_val = min([x for x,y in list1])\n    min_product = min([x*y for x,y in list1])\n    print(min_val, min_product)\n    return min_product\n\n\n\nmin_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(lst):\n    return min([prod for pair in lst for prod in pair])\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    return min(tuple(sorted(tuple)) * tuple(sorted(tuple, reverse=True)) for tuple in tuples)\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    tup_list = sorted(tuples,key=lambda x:x[1])\n    return tup_list[0][0] * tup_list[0][1]\n\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list):\n    \"\"\" (list) -> int\n    Return the smallest value in the list.\n    >>> min_val([1, 5, 3, 2])\n    1\n    >>> min_val([2, 5, 3, 1])\n    1\n    >>> min_val([2, 2, 2, 2, 2])\n    2\n    >>> min_val([2, 1, 2, 3, 2])\n    1\n    >>> min_val([1])\n    1\n    >>> min_val([])\n    Traceback (most recent call last):\n    TypeError: min_val() missing 1 required positional argument: 'list'\n    \"\"\"\n    if len(list) == 0:\n        raise TypeError(\"min_val() missing 1 required positional argument: 'list'\")\n    if type(list) is not list:\n        raise TypeError(\"min_val() missing 1 required positional argument: 'list'\")\n    smallest = list[0]\n    for i in range(1, len(list)):\n        if smallest > list[i]:\n            smallest = list[i]\n    return smallest\n\ndef main():\n    print(min_val(['Python', 3, 2, 4, 5, 'version']))\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n\tminval= lst[0]\n\tfor i in range(1,len(lst)):\n\t\tif lst[i] < minval:\n\t\t\tminval = lst[i]\n\treturn minval\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list):\n    \"\"\"Return the minimum value in a given list.\"\"\"\n    return min(list)\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list1):\n    if isinstance(list1,list):\n        min = list1[0]\n        for i in list1:\n            if i < min:\n                min = i\n        return min\n    else:\n        return 'list please'\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n# 2. Write a function to find the maximum value in a given heterogeneous list.", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(my_list):\n    def sort_key(x):\n        if type(x) is str:\n            return len(x)\n        else:\n            return x\n\n    return min(my_list, key=sort_key)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(l):\n    result = l[0]\n    for x in l:\n        if x < result:\n            result = x\n    return result\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    \"\"\"Returns the minimum value in lst.\n\n    lst: a list of items of any type.\n    \"\"\"\n    # First, sort lst.\n    lst.sort()\n    # Next, return the item at the start of the list.\n    return lst[0]\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    \"\"\"\n    Given a heterogeneous list, this function finds the minimum value in the list.\n    \"\"\"\n    min_value = lst[0]\n    for item in lst:\n        if isinstance(item, int) and item < min_value:\n            min_value = item\n        elif isinstance(item, str) and item < min_value:\n            min_value = item\n    return min_value\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(alist):\n    if len(alist) == 1:\n        return alist[0]\n    else:\n        return min(alist)\n\n#Test case"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(s: str) -> str:\n    return re.sub('_([a-z])', lambda x: x.group(1).upper(), s)", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\n\ndef snake_to_camel(s):\n    regex = re.compile(r'(_[a-z])')\n    return regex.sub(lambda x: x.group(1)[1].upper(), s).capitalize()\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    pattern = '[_]([a-z])'\n    return re.sub(pattern, lambda x: x.group(1).upper(), s)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(str: str) -> str:\n    return \"\".join(x.title() for x in re.findall(r\"[\\w']+\", str)).rstrip()\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(string):\n    #Your code here\n    return \"\".join([word.title() for word in string.split(\"_\")])\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    return re.sub('_(\\w)', lambda m: m.group(1).upper(), s)\n\ndef test_snake_to_camel():\n    assert snake_to_camel('android_tv') == 'AndroidTv'\n    assert snake_to_camel('samsung_tv') == 'SamsungTv'\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    return ''.join([word.capitalize() for word in s.split('_')])\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(snake_case_string):\n    return ''.join([s.capitalize() for s in snake_case_string.split('_')])\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(string):\n    snake_case = string.replace(\"_\", \" \")\n    camel_case = \"\".join(i.title() for i in snake_case.split())\n    return camel_case.replace(\" \", \"\")\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(snake_str):\n    return re.sub('_[a-z]', lambda m: m.group()[1].upper(), snake_str)\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(my_list):\n    \"\"\"\n    :param my_list: a list\n    :return: a list of even numbers\n    \"\"\"\n    return [x for x in my_list if x%2==0]", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in nums if x % 2 == 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [item for item in lst if item % 2 == 0]\n\ndef main():\n    print(remove_odd([1,2,3,4,5,6,7,8,9,10,11]))\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\nimport pytest\n\ndef remove_odd(lst):\n    \"\"\"\n    Returns a list containing only the even numbers in a given list.\n    >>> remove_odd([1,2,3])\n    [2]\n    >>> remove_odd([1,2,3,4,5])\n    [2,4]\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        if i%2==0:\n            new_lst.append(i)\n    return new_lst\n\ndef test_remove_odd():\n    assert remove_odd([1,2,3]) == [2]\n    assert remove_odd([1,2,3,4,5]) == [2,4]\n\ndef main():\n    lst = [1,2,3,4,5]\n    print(remove_odd(lst))\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]\n\ndef test_remove_odd():\n    assert remove_odd([1,2,3]) == [2]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(l):\n    \"\"\"\n    Remove all the odd numbers from the given list and returns the new list\n    \"\"\"\n    #return [n for n in l if n % 2 == 0]\n    return list(filter(lambda n: n % 2 == 0, l))\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(seq):\n    return [x for x in seq if x%2 != 1]\n\n# The following is equivalent:\n\ndef remove_odd(seq):\n    return [x for x in seq if not x%2]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [item for item in lst if item % 2 != 0]\n\n\nlst = [1,2,3]", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tuples_list, n):\n    \"\"\"\n    :param tuples_list: List of tuples\n    :param n: n-th element\n    :return: n-th element from tuple\n    \"\"\"\n    return [tuples[n] for tuples in tuples_list]\n\ndef extract_last_element(tuples_list):\n    \"\"\"\n    :param tuples_list: List of tuples\n    :return: Last element from tuple\n    \"\"\"\n    return extract_nth_element(tuples_list, len(tuples_list) - 1)", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(data, index):\n    return list(map(lambda x:x[index], data))\n\n#print(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0))\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tuples,nth):\n    # extract nth element from list of tuples\n    result = []\n    for tuple in tuples:\n        result.append(tuple[nth])\n    return result\n\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tuples,n):\n    # Write your code here\n    return [x[n] for x in tuples]\n\ndef test_extract_nth_element():\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\ntest_extract_nth_element()\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n\treturn lst[n][0]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(data, n):\n    \"\"\"\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n    ['Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n    ['Wyatt Knott', 'Beau Turnbull']\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 3)\n    ['Beau Turnbull']\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 4)\n    []\n    \"\"\"\n    if type(data) == list:\n        return [extract_nth_element(d, n) for d in data]\n    elif type(data) == tuple:\n        return [data[n]]\n    else:\n        return []\n\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(list_of_tuples, position):\n    return [x[position] for x in list_of_tuples]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(a, n):\n    if n < 0 or n > len(a):\n        raise ValueError\n    return [a[i][n] for i in range(len(a))]\n\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(elements, n):\n    return elements[n]\n\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(L, n):\n    \"\"\"\n    returns the nth element from a list of tuples\n    \"\"\"\n    if n > len(L) - 1:\n        print \"n is greater than the length of the list.\"\n    return L[n]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(lst1,lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return False\n    else:\n        for ele in lst1:\n            if ele in lst2:\n                return True\n        return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1, list2):\n    '''\n    Finding if two sequences overlap\n    '''\n    return len(set(list1) & set(list2)) > 0\n\n#print(overlapping([1,2,3,4,5],[6,7,8,9]))\n#print(overlapping([1,2,3,4,5],[5,4,3,2,1]))\n#print(overlapping([1,2,3,4,5],[5,6,7,8,9]))\n#print(overlapping([1,2,3,4,5],[1,2,3,4,5]))\n#print(overlapping([1,2,3,4,5],[1,2,3,4,6]))\n#print(overlapping([1,2,3,4,5],[1,2,3,4,5,6]))\n#print(overlapping([1,2,3,4,5],[1,2,3,4,5,6,7]))\n#print(overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8]))\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1,seq2):\n    if len(seq1) < len(seq2):\n        return overlapping(seq2,seq1)\n    else:\n        for i in range(len(seq1)):\n            if seq1[i] == seq2[i]:\n                continue\n            elif seq1[i] < seq2[i]:\n                return False\n            else:\n                return True\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    if len(seq1) > len(seq2):\n        seq1, seq2 = seq2, seq1\n    \n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1,seq2):\n    if len(seq1) < len(seq2):\n        return overlapping(seq2, seq1)\n    for i in range(len(seq1)-len(seq2)+1):\n        if seq2 == seq1[i:i+len(seq2)]:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1,seq2):\n\treturn len(set(seq1).intersection(set(seq2))) != 0\n\n# print(overlapping([1,2,3,4,5],[6,7,8,9]))\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1,seq2):\n    # your code here\n    return any(elem in seq1 for elem in seq2)\n\n# test cases", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n# YOUR CODE HERE\ndef overlapping(s1, s2):\n    if s1[0] <= s2[0] <= s1[1]:\n        return True\n    if s2[0] <= s1[0] <= s2[1]:\n        return True\n    return False\n\n\n# + [markdown] deletable=false nbgrader={\"cell_type\": \"markdown\", \"checksum\": \"28849d323463621d1a18854b52325e40\", \"grade\": false, \"grade_id\": \"cell-61e1301e00e82547\", \"locked\": false, \"schema_version\": 3, \"solution\": true, \"task\": false}\n# **Test Cell**: Test your function using the assert function by uncommenting the assert statements.\n\n# + deletable=false editable=false nbgrader={\"cell_type\": \"code\", \"checksum\": \"66b256484d4490b846e137d2c2db0091\", \"grade\": true, \"grade_id\": \"cell-90c524341609068a\", \"locked\": true, \"points\": 1, \"schema_version\": 3, \"solution\": false, \"task\": false}"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\nfrom typing import List\n\ndef max_Product(nums: List[int]) -> (int, int):\n\t\"\"\"\n\tUse a nested for loop to find the max product in each column of the matrix. Then use a nested for loop to find the max product in each row of the matrix.\n\t\"\"\"\n\t#print(nums)\n\tmax_value = 0\n\tfor col in range(len(nums)):\n\t\tfor row in range(len(nums)):\n\t\t\tprod = 1\n\t\t\tfor x in range(col, row + 1):\n\t\t\t\tprod *= nums[x]\n\t\t\tif prod > max_value:\n\t\t\t\tmax_value = prod\n\t\t\t\tmax_row = row\n\t\t\t\tmax_col = col\n\tprint(max_row, max_col)\n\treturn nums[max_row], nums[max_col]\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_product(array):\n  prod = 0\n  m = 0\n  n = 0\n  for i in range(len(array)):\n    for j in range(len(array)):\n      if(array[i]*array[j] > prod):\n        prod = array[i]*array[j]\n        m = i\n        n = j\n  return (m,n)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    # a = [1,2,3,4,7,0,8,4]\n    arr.sort(reverse=True)\n    product = 1\n    highest_product = 1\n    for i in range(0, len(arr)):\n        if i+1 < len(arr):\n            product = arr[i]*arr[i+1]\n            if product > highest_product:\n                highest_product = product\n                highest_product_pair = arr[i]*arr[i+1]\n    return highest_product_pair\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    maxProduct = -1\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if maxProduct < product:\n                maxProduct = product\n                pair = (arr[i],arr[j])\n    return pair\n\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_product(arr):\n    max_product = arr[0]\n    max_idx = 0\n    for idx, value in enumerate(arr):\n        if max_product < (value*arr[idx+1]):\n            max_product = (value*arr[idx+1])\n            max_idx = idx\n    return (max_idx, max_idx+1)\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(lst):\n    if len(lst) < 2:\n        return \"Not possible\"\n    max_prod = -1\n    max_prod_idx = -1\n    max_prod_2 = -1\n    max_prod_2_idx = -1\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j and max_prod < lst[i] * lst[j]:\n                max_prod = lst[i] * lst[j]\n                max_prod_idx = i\n                max_prod_2 = lst[j] * lst[i]\n                max_prod_2_idx = j\n    return (max_prod, max_prod_idx, max_prod_2, max_prod_2_idx)\n\nlst = [1,2,3,4,7,0,8,4]\nmax_Product(lst)", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(a):\n    length = len(a)\n    max_product = 0\n    max_val = 0\n    for i in range(length-1):\n        for j in range(i+1,length):\n            p = a[i]*a[j]\n            if(p > max_product):\n                max_product = p\n                max_val = a[i]*a[j]\n\n    return max_val\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(a):\n    if len(a) == 1:\n        return a[0],a[0]\n    p1 = 0\n    p2 = 0\n    for i in range(len(a)):\n        p1 = p1*a[i]\n        p2 = a[i]\n    for i in range(len(a)-1, 0, -1):\n        p2 = p2*a[i-1]\n        p1 = max(p1, p2)\n    return p1, p2\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(nums):\n\tmax_prod = 0\n\tmax_prod_pair = []\n\tfor i in range(len(nums)-1):\n\t\tfor j in range(i+1, len(nums)):\n\t\t\tprod = nums[i] * nums[j]\n\t\t\tif prod > max_prod:\n\t\t\t\tmax_prod = prod\n\t\t\t\tmax_prod_pair = [nums[i], nums[j]]\n\treturn max_prod_pair\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    \"\"\"\n    :param: arr: a list of integers\n    return: a tuple containing maximum product pair\n    \"\"\"\n    arr = [n for n in arr if n != 0]\n    if len(arr) == 0:\n        return (0,0)\n    elif len(arr) == 1:\n        return (arr[0],0)\n    elif len(arr) == 2:\n        if arr[0] == 0:\n            return (arr[1],0)\n        elif arr[1] == 0:\n            return (arr[0],0)\n        elif arr[0] == arr[1]:\n            return (arr[0],0)\n        else:\n            return (max(arr),0)\n    else:\n        arr = sorted(arr, reverse=True)\n        res = arr[0] * arr[1]\n        i = 2\n        while i < len(arr):\n            if res < arr[i] * arr[i-1]:\n                res = arr[i] * arr[i-1]\n            i += 1\n        return (res, arr[1])\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\n# 12 = 4 + 3 + 3\n\n\ndef breakSum(n, part1=0, part2=0, part3=0, max_sum=0):\n    if n <= 0:\n        return max_sum\n    elif part1 == 0 and part2 == 0 and part3 == 0:\n        max_sum = breakSum(n - 1, 1, 1, 1, max_sum)\n    elif part1 == 0 and part2 == 0 and part3 > 0:\n        max_sum = breakSum(n - 1, 1, 1, part3, max_sum)\n    elif part1 == 0 and part2 > 0 and part3 > 0:\n        max_sum = breakSum(n - 1, 1, part2, part3, max_sum)\n    elif part1 == 0 and part2 > 0 and part3 == 0:\n        max_sum = breakSum(n - 1, 1, part2, 1, max_sum)\n    elif part1 == 0 and part2 == 0 and part3 == 0:\n        max_sum = breakSum(n - 1, 1, 1, 1, max_sum)\n    elif part1 == 0 and part2 == 0 and part3 > 0:\n        max_sum = breakSum(n - 1, 1, 1, part3, max_sum)\n    elif part1 == 0 and part2 > 0 and part3 > 0:\n        max_sum = breakSum(n - 1, 1, part2, part3, max_sum)\n    elif part1 == 0 and part2 > 0 and part3 == 0:\n        max_sum = breakSum(n - 1, 1, part2, 1, max_sum)\n    elif part1 == 0 and part2 == 0 and part3 == 0:\n        max_sum = breakSum(n - 1, 1, 1, 1,", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    # your code here\n    if number == 0 or number == 1:\n        return number\n    else:\n        first = number // 3\n        second = (number // 3) + (number % 3)\n        return max(breakSum(first), breakSum(second))\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num < 0:\n        return 0\n    if num <= 2:\n        return num\n    return max(breakSum(num - 1) + num, breakSum(num - 2) + num, breakSum(num - 3) + num)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    if number < 3:\n        return number\n\n    if number % 3 == 0:\n        return max(breakSum(number - 1), breakSum(number - 2), breakSum(number - 3)) + number\n\n    return max(breakSum(number - 1), breakSum(number - 2), breakSum(number - 3))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num <= 0:\n        return 0\n    if num % 3 == 0:\n        return num\n    return max(breakSum(num//3), breakSum(num-num//3))", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        maxSum = 0\n        for i in range(1, n+1):\n            maxSum = max(maxSum, i + breakSum(n-i))\n        return maxSum\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    if number <= 0:\n        return 0\n    if number < 5:\n        return number\n    return max(breakSum(number-3), breakSum(number-5)) + number\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    if number < 1:\n        return 0\n\n    return max(number - number % 10, number % 10) + breakSum(number // 10)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\nfrom typing import List\n\n\ndef breakSum(n: int) -> int:\n    \"\"\"\n    :param n: the number to divide into three parts\n    :return: the maximum sum we can make by dividing the number in three parts\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    return max(breakSum(n - 1) + n, breakSum(n - 2) + n, breakSum(n - 3) + n)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n<3:\n        return n\n\n    l = breakSum(n-1)\n    r = breakSum(n-2)\n    s = l+r\n\n    if l>r and l>s:\n        return l\n    elif r>l and r>s:\n        return r\n    else:\n        return s\n\n# Using DP\ndef breakSum2(n):\n    dp = [None for _ in range(n+1)]\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = n\n\n    for i in range(3,n+1):\n        l = dp[i-1]\n        r = dp[i-2]\n        s = l+r\n        dp[i] = max(l,r,s)\n\n    return dp[n]\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuple_list):\n    new_list = []\n    first_element = tuple_list[0]\n    new_list.append(first_element)\n    for tuple in tuple_list[1:]:\n        if tuple[0] == first_element[0]:\n            new_list.append(tuple)\n    return new_list\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef group_tuples(tuple_list: List[Tuple]) -> List[Tuple]:\n    # solution 1\n    # return [[tuple_list[i][0]] for i in range(len(tuple_list))]\n\n    # solution 2\n    return [tuple_list[0] for _ in range(len(tuple_list))]\n\n    # solution 3\n    # result = []\n    # for i in range(len(tuple_list)):\n    #     for j in range(i+1, len(tuple_list)):\n    #         if tuple_list[i][0] == tuple_list[j][0]:\n    #             result.append(tuple_list[i])\n    #             result.append(tuple_list[j])\n    #             break\n    #     if len(result) == 2:\n    #         break\n    # return result\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\nimport pytest\n\n\ndef group_tuples(tuples):\n    \"\"\"\n    :param list tuples:\n    :return:\n    \"\"\"\n    groups = []\n    if tuples:\n        first_element = tuples[0][0]\n        for group in tuples:\n            if group[0] == first_element:\n                groups.append(group)\n    return groups\n\n\n@pytest.mark.parametrize(\n    \"tuples, expected\",\n    [\n        ([('x', 'y'), ('x', 'z'), ('w', 't')], [('x', 'y', 'z'), ('w', 't')]),\n        ([('x', 'y'), ('y', 'z'), ('w', 't')], [('x', 'y'), ('y', 'z'), ('w', 't')]),\n        ([('x', 'y'), ('y', 'z'), ('w', 'y')], [])\n    ]\n)\ndef test_group_tuples(tuples, expected):\n    \"\"\"\n    :param list tuples:\n    :param list expected:\n    \"\"\"\n    actual = group_tuples(tuples)\n    assert expected == actual\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(lst):\n    \"\"\"\n    Returns list of tuples with elements from all tuples of lst\n    \"\"\"\n    grouped_tuples = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            tup1, tup2 = lst[i], lst[j]\n            if tup1[0] == tup2[0]:\n                grouped_tuples.append(tuple(sorted([tup1, tup2])))\n    return grouped_tuples\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    \"\"\"\n    Creates a list of tuples with the first element of each tuple being the same\n    :param tuples: the list of tuples to group\n    :return: the list of tuples with the first element of each tuple being the same\n    \"\"\"\n    groups = []\n    for t in tuples:\n        if len(groups) == 0:\n            groups.append([t])\n            continue\n        if t[0] == groups[-1][0]:\n            groups[-1].append(t)\n        else:\n            groups.append([t])\n    return groups\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n\tresult = []\n\tfor tuple in tuples:\n\t\tcommon = tuple[0]\n\t\tfor value in tuple[1:]:\n\t\t\tif value == common:\n\t\t\t\tresult.append(tuple)\n\t\t\t\tbreak\n\treturn result\n\ndef group_tuples2(tuples):\n\tresult = []\n\tfor tuple in tuples:\n\t\tresult.append([x for x in tuple if x == tuple[0]])\n\treturn result\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(list_of_tuples):\n    return [(x, y, z) for (x, y), z in list_of_tuples]\n\ndef group_tuples_2(list_of_tuples):\n    return [[x, y, z] for x, (y, z) in list_of_tuples]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    # Write your code here.\n    return list({element for pair in tuples for element in pair})\n\ndef test_group_tuples():\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    \"\"\"\n    your code here\n    \"\"\"\n    return tuple((t1,t2) for t1,t2 in tuples if t1[0] == t2[0])\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(sublist):\n    if len(sublist) == 0:\n        return []\n    for i in range(len(sublist)):\n        if len(sublist[i]) == 1:\n            return sublist[i]\n        max_l = []\n        for j in range(i+1, len(sublist)):\n            if len(sublist[j]) == len(max_l)+1:\n                max_l = sublist[j]\n                print(max_l)\n    return max_l\n\ndef main():\n    assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert Find_Max([['A','B'],['A','B','C']]) == ['A','B','C']\n    assert Find_Max([['A','B'],['A','B','C'],['A','B','C','D']]) == ['A','B','C','D']\n    assert Find_Max([['A','B'],['A','B','C'],['A','B','C','D'],['A','B','C','D','E']]) == ['A','B','C','D','E']\n    assert Find_Max([['A','B'],['A','B','C'],['A','B','C','D'],['A','B','C','D','E'],['A','B','C','D','E','F']]) == ['A','B','C','D','E','F']\n    assert Find_Max([['A','B','C'],['A','B','C','D'],['A','B','C','D','E']]) == ['A','B','C','D','E']\n    assert Find_Max([['A','B','C','D'],['A','B','C','D','E'],['A','B','C','D','E','F']]) == ['A','B','C','D','E','F']\n    assert Find_Max([]) == []\n    print(\"Test passed!\")\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    if lst == []:\n        return []\n    max = []\n    for i in range(len(lst)-1):\n        for j in range(i+1,len(lst)):\n            if len(lst[i]) >= len(lst[j]):\n                max = lst[i]\n    return max", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# function to find maximum length sublist\ndef Find_Max(lst):\n    max_sublist = []\n    if lst:\n        for i in range(len(lst)):\n            for j in range(i+1,len(lst)):\n                if len(lst[i]) > len(lst[j]):\n                    max_sublist.append(lst[i])\n                else:\n                    max_sublist.append(lst[j])\n    return max_sublist\n\nlst = [['A'],['A','B'],['A','B','C']]\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(sublist):\n\n    max_len = 0\n    max_sublist = []\n\n    for sublist in sublist:\n\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n\n    return max_sublist\n\n# Test Code", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(ls):\n    maximum = -1\n    max_list = []\n    for element in ls:\n        if len(element)>maximum:\n            maximum = len(element)\n            max_list = element\n    return max_list\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(arr):\n    max_sub_list = []\n    max_len = 0\n    for i in range(len(arr)):\n        sub = []\n        for j in range(i,len(arr)):\n            if arr[i]==arr[j]:\n                sub.append(arr[j])\n            else:\n                break\n        len_sub = len(sub)\n        if len_sub > max_len:\n            max_len = len_sub\n            max_sub_list = sub\n    return max_sub_list\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(l):\n    if len(l) == 1:\n        return l[0]\n    max_list = []\n    for i in range(len(l)):\n        if len(l[i]) > len(max_list):\n            max_list = l[i]\n    return max_list\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    if not lst: return None\n    l = len(lst)\n    for i in range(l):\n        for j in range(i+1,l):\n            if len(lst[i]) >= len(lst[j]):\n                return lst[i]\n    return lst[0]\n\n\nFind_Max([['A'],['A','B'],['A','B','C']])\n# -\n\n# * Problem 4 - Write a python function to find the maximum element in a list.\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    max_len = 0\n    max_list = []\n    for i in range(0,len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_list = lst[i]\n    return max_list\n\nlst = [['A'],['A','B'],['A','B','C']]", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(L):\n    max_sublist = []\n    for sublist in L:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(nums):\n    nums = [round(num) for num in nums]\n    return sum(nums) * len(nums)\n\n\nround_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n\tnumbers = [round(i, 2) for i in numbers]\n\tsum_of_numbers = sum(numbers)\n\treturn sum_of_numbers * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(nums):\n    return round(sum(map(round, nums))) * len(nums)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(l):\n    sum = 0\n    length = len(l)\n    for i in l:\n        sum += round(i)\n    return sum * length\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(arr):\n    total=0\n    for num in arr:\n        num=round(num)\n        total+=num\n    return total*len(arr)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(nums):\n    rounded = [round(n) for n in nums]\n    total = sum(rounded)\n    return total * len(nums)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(l):\n    sum=0\n    for i in l:\n        i=round(i)\n        sum=sum+i\n    return sum*len(l)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(arr):\n    total=0\n    for i in arr:\n        total+= round(i)\n    return total*len(arr)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(nums):\n    total = sum([round(i) for i in nums])\n    return total*len(nums)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef round_and_sum(num_list):\n    \"\"\"\n    >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n    243\n    \"\"\"\n    \n    sum_list = [int(round(x, 0)) for x in num_list]\n    \n    return sum(sum_list) * len(num_list)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n# while loop to iterate till n\n# initialize variable cube_sum and counter to 0\ncube_sum = 0\ncounter = 0\n\nwhile counter < n:\n    # add cube of counter to cube_sum\n    cube_sum += counter ** 3\n    # increment counter by 1\n    counter += 2\n# return cube_sum\nreturn cube_sum", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    if n < 1:\n        return 0\n    result = 0\n    for i in range(2*n,1,-2):\n        result += i**3\n    return result\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n    \"\"\"\n    find the sum of first n cubes of even numbers\n    \"\"\"\n    total = 0\n    for x in range(n):\n        total += x**3\n    return total\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    sum = 0\n    for x in range(2,n):\n        sum += (x**3)\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n# Solution\n\n\ndef cube_Sum(n):\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    \"\"\"\n    Input:\n        n - natural number\n\n    Output:\n        cube sum of first n even numbers\n    \"\"\"\n    return sum([i**3 for i in range(2*n) if i%2 == 0])", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\nimport sys\n\n\ndef cube_Sum(n):\n    # list comprehension\n    return sum([i**3 for i in range(2*n, 0, -2)])\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1,n,2))\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(T, delimiter = '-'):\n    return delimiter.join(T)\n\ndef main():\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    print(\"Passed all assertions.\")\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    return '-'.join(str(n) for n in tuple)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(x):\n    return '-'.join(map(str,x))\n\ndef test_concatenate_tuple():\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\n\ndef test_concatenate_tuple_2():\n    assert concatenate_tuple((\"a\", \"b\", \"c\")) == 'a-b-c'\n\ndef test_concatenate_tuple_3():\n    assert concatenate_tuple((1, 2, 3)) == '1-2-3'\n\ndef test_concatenate_tuple_4():\n    assert concatenate_tuple((\"a\", 3, \"c\")) == 'a-3-c'\n\ndef test_concatenate_tuple_5():\n    assert concatenate_tuple((4, \"b\", \"c\")) == '4-b-c'\n\ndef test_concatenate_tuple_6():\n    assert concatenate_tuple((5, \"b\", 9)) == '5-b-9'\n\ndef test_concatenate_tuple_7():\n    assert concatenate_tuple((\"a\", 5, 9)) == 'a-5-9'\n\ndef test_concatenate_tuple_8():\n    assert concatenate_tuple((9, \"b\", \"c\")) == '9-b-c'\n\ndef test_concatenate_tuple_9():\n    assert concatenate_tuple((0, 0, 0)) == '0-0-0'\n\ndef test_concatenate_tuple_10():\n    assert concatenate_tuple((0, 0, 0)) == '0-0-0'\n\ndef test_concatenate_tuple_11():\n    assert concatenate_tuple((0, 0, 0)) == '0-0-0'\n\ndef test_concatenate_tuple_12():\n    assert concatenate_tuple((0, 0, 0)) == '0-0-0'\n\ndef test_concatenate_tuple_13():\n    assert concatenate_tuple((0, 0, 0)) == '0-0-0'\n\ndef test_concatenate_", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_of_strings: tuple) -> str:\n    \"\"\"\n    :param tuple_of_strings: A tuple of strings.\n    :return: Concatenation of string by delimiter.\n    \"\"\"\n    return '-'.join(tuple_of_strings)\n\n\n@pytest.mark.parametrize(\"tuple_of_strings, expected\", [\n    ((\"ID\", \"is\", \"4\", \"UTS\"), \"ID-is-4-UTS\"),\n    ((\"\", \"is\", \"4\", \"UTS\"), \"is-4-UTS\"),\n    ((\"ID\", \"\", \"4\", \"UTS\"), \"ID-4-UTS\")\n])\ndef test_concatenate_tuple_with_input(tuple_of_strings: tuple, expected: str):\n    assert concatenate_tuple(tuple_of_strings) == expected\n\n\n@pytest.mark.parametrize(\"tuple_of_strings, expected\", [\n    ((\"\", \"is\", \"\", \"UTS\"), \"is-UTS\"),\n    ((\"ID\", \"\", \"4\", \"UTS\"), \"ID-4-UTS\")\n])\ndef test_concatenate_tuple_without_input(tuple_of_strings: tuple, expected: str):\n    assert concatenate_tuple(tuple_of_strings) == expected\n\n\n@pytest.mark.parametrize(\"tuple_of_strings\", [\n    (\"ID\", 4),\n    (4, 4)\n])\ndef test_concatenate_tuple_with_different_type_input(tuple_of_strings: tuple):\n    with pytest.raises(ValueError):\n        concatenate_tuple(tuple_of_strings)\n\n\n@pytest.mark.parametrize(\"tuple_of_strings\", [\n    (4,),\n    ((),),\n    ((), 5, 4)\n])\ndef test_concatenate_tuple_with_invalid_input(tuple_of_strings: tuple):\n    with pytest.raises(ValueError):\n        concatenate_tuple(tuple_of_strings)\n\n\ndef test_concatenate_tuple_with_no_input():\n    with pytest.raises(ValueError):\n        concatenate_tuple(())\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_elements, delimiter=\"--\"):\n    return delimiter.join(tuple_elements)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(s: tuple):\n    # Solution:\n    return '-'.join(str(i) for i in s)\n\n# Note:\n# \"in\" is similar to \"contains\", but it's faster.\n# print(4 in [1,2,3])\n# print(4 in [4,5,6])\n# print(4 in (1,2,3))\n# print(4 in (4,5,6))\n\n# print('4' in '1234')\n# print('4' in '456')\n\n# print('4' in {1,2,3})\n# print('4' in {4,5,6})\n\n# Note:\n# The logic is similar to \"filter\", but the filtering mechanism is replaced with \"in\".\n# print(list(filter(lambda x: x%2 == 0, [1,2,3])))\n# print(list(filter(lambda x: x%2 == 0, [1,3,5])))\n\n# print(list(filter(lambda x: x in ['a','b','c','d'], ['a','b','c','e'])))\n# print(list(filter(lambda x: x in ['a','b','c','d'], ['a','b','c'])))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    return \"-\".join(str(element) for element in tuple)\n\n# Tests", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_value):\n    #print(\"tuple_value: \", tuple_value)\n    return \"-\".join(tuple_value)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return \"-\".join(str(e) for e in tup)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(a):\n    return \"-\".join(map(str, a))\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    # your code here\n    return\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return (n**3 + n**2 + n + 2) / 6", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    This function will find the average of cubes of first n natural numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (find_Average_Of_Cube(n - 1) ** 3 + 1) / 3\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return (n**3*n)/2\n\n\n#Test Cases", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n\t'''\n\t\tThis function returns average of cubes of first n natural numbers.\n\t'''\n\n\tif n < 1:\n\t\traise ValueError(\"n cannot be less than 1\")\n\n\telse:\n\t\tif type(n) != int:\n\t\t\traise TypeError(\"n must be integer\")\n\t\telse:\n\t\t\tif n > 100:\n\t\t\t\traise ValueError(\"n cannot be greater than 100\")\n\t\t\telse:\n\t\t\t\taverage = 0\n\t\t\t\tfor i in range(1,n+1):\n\t\t\t\t\taverage += i**3\n\t\t\t\treturn (average/n)\n\n\ndef find_sum_of_digits(n):\n\t'''\n\t\tThis function returns sum of digits of a natural number n.\n\t'''\n\n\tif type(n) != int:\n\t\traise TypeError(\"n must be integer\")\n\telse:\n\t\tif n < 0:\n\t\t\traise ValueError(\"n cannot be less than 0\")\n\t\telse:\n\t\t\tsum = 0\n\t\t\ttemp = n\n\t\t\twhile temp > 0:\n\t\t\t\tsum += temp%10\n\t\t\t\ttemp //= 10\n\t\t\treturn sum\n\n\n\ndef largest_prime_number(n):\n\t'''\n\t\tThis function returns largest prime number.\n\t'''\n\n\tif type(n) != int:\n\t\traise TypeError(\"n must be integer\")\n\telse:\n\t\tif n <= 1:\n\t\t\traise ValueError(\"n cannot be less than 2\")\n\t\telse:\n\t\t\ti = 2\n\t\t\twhile i*i <= n:\n\t\t\t\tif n%i == 0:\n\t\t\t\t\treturn i\n\t\t\t\telse:\n\t\t\t\t\ti += 1\n\n\ndef find_palindrome(n):\n\t'''\n\t\tThis function returns palindrome of a natural number n.\n\t'''\n\tif type(n) != int:\n\t\traise TypeError(\"n must be integer\")\n\telse:\n\t\ttemp = n\n\t\treverse = 0\n\t\twhile temp > 0:\n\t\t\treverse = reverse * 10 + temp%10\n\t\t\ttemp //= 10", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    \"\"\"Return the average of cubes of first n natural numbers.\"\"\"\n    return sum([i**3 for i in range(n+1)])/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum/n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    :param n: number of numbers from which to find average of cubes\n    :return: average of cubes of first n natural numbers\n    \"\"\"\n    return sum([x ** 3 for x in range(n + 1)]) / n ** 3\n\ndef test_find_Average_Of_Cube():\n    assert find_Average_Of_Cube(2) == 4.5\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    average=0\n    for i in range(n):\n        average += i**3\n    return average/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n# the solution provided in the book\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    >>> find_Average_Of_Cube(1)\n    1\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    11.55\n    >>> find_Average_Of_Cube(5)\n    33.325\n    >>> find_Average_Of_Cube(10)\n    68.20555555555556\n    \"\"\"\n    sum_of_cubes = 0\n    for num in range(1, n+1):\n        sum_of_cubes += num**3\n    return sum_of_cubes / n\n\n# my solution\ndef my_find_Average_Of_Cube(n):\n    \"\"\"\n    >>> my_find_Average_Of_Cube(1)\n    1\n    >>> my_find_Average_Of_Cube(2)\n    4.5\n    >>> my_find_Average_Of_Cube(3)\n    11.55\n    >>> my_find_Average_Of_Cube(5)\n    33.325\n    >>> my_find_Average_Of_Cube(10)\n    68.20555555555556\n    \"\"\"\n    return sum([num**3 for num in range(1, n+1)]) / n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid, r, c):\n    maxgold = 0\n    for i in range(r):\n        for j in range(c):\n            maxgold = max(maxgold, grid[i][j])\n    return maxgold\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\nfrom typing import List,Tuple\n\n\ndef get_maxgold(grid:List[List[int]], rows:int, cols:int) -> int:\n    \"\"\"Get maxgold of grid\n\n    Args:\n        grid (List[List[int]]): [description]\n        rows (int): [description]\n        cols (int): [description]\n\n    Returns:\n        int: [description]\n    \"\"\"\n    maxgold=0\n    visited_cells = {(0,0)}\n    directions=[(1,0),(-1,0),(0,1),(0,-1)]\n    queue = [(0,0)]\n    while queue:\n        row,col=queue.pop(0)\n        if grid[row][col]==0:\n            continue\n        if (row,col) not in visited_cells:\n            visited_cells.add((row,col))\n            maxgold+=grid[row][col]\n            for direction in directions:\n                new_row,new_col=row+direction[0],col+direction[1]\n                if (new_row,new_col) not in visited_cells and new_row>=0 and new_row<rows and new_col>=0 and new_col<cols:\n                    queue.append((new_row,new_col))\n    return maxgold\n\n\ndef test_get_maxgold():\n    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(matrix,r,c):\n\t# [0,1,2,3]\n\t# [0,1,2,3]\n\t# [0,1,2,3]\n\t# [0,1,2,3]\n\t#print(matrix)\n\tp=[]\n\tfor i in range(r):\n\t\tp.append([])\n\t\tfor j in range(c):\n\t\t\tp[i].append(matrix[i][j])\n\t#print(p)\n\tans=0\n\tfor i in range(r):\n\t\tfor j in range(c):\n\t\t\tans=max(ans,get_gold(p,i,j,r,c))\n\treturn ans\n\ndef get_gold(matrix,r,c,r1,c1):\n\t#print(r,c)\n\tif r==r1-1 and c==c1-1:\n\t\treturn matrix[r][c]\n\tif matrix[r][c]==0:\n\t\treturn 0\n\tgold=0\n\tif matrix[r][c]==1:\n\t\t# print(r,c)\n\t\tgold+=get_gold(matrix,r,c+1,r1,c1)\n\t\tgold+=get_gold(matrix,r+1,c,r1,c1)\n\telif matrix[r][c]==2:\n\t\tgold+=get_gold(matrix,r,c-1,r1,c1)\n\t\tgold+=get_gold(matrix,r-1,c,r1,c1)\n\telif matrix[r][c]==3:\n\t\tgold+=get_gold(matrix,r,c+1,r1,c1)\n\t\tgold+=get_gold(matrix,r+1,c,r1,c1)\n\t\tgold+=get_gold(matrix,r,c-1,r1,c1)\n\t\tgold+=", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid, m, n):\n    golds = []\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]==0:\n                if i-1>=0 and grid[i-1][j]==1:\n                    golds.append(grid[i][j])\n                if j-1>=0 and grid[i][j-1]==1:\n                    golds.append(grid[i][j])\n                if i+1<m and grid[i+1][j]==1:\n                    golds.append(grid[i][j])\n                if j+1<n and grid[i][j+1]==1:\n                    golds.append(grid[i][j])\n    return max(golds)\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(grid, rows, cols):\n    # Your code here\n    maxgold = 0\n    for row in grid:\n        for col in row:\n            if col==0:\n                continue\n            row_gold = get_gold_from_row(row,col)\n            col_gold = get_gold_from_col(grid,row,col)\n            #print(row_gold,col_gold)\n            if row_gold>col_gold:\n                gold = row_gold\n            else:\n                gold = col_gold\n            #print(gold)\n            maxgold = max(maxgold,gold)\n    return maxgold\n\n\ndef get_gold_from_row(row,col):\n    total_gold = 0\n    for i in range(len(row)):\n        if col<i:\n            break\n        else:\n            total_gold+=row[i]\n    return total_gold\n\n\ndef get_gold_from_col(grid,row,col):\n    total_gold = 0\n    for i in range(len(grid[0])):\n        if row<i:\n            break\n        else:\n            total_gold+=grid[i][col]\n    return total_gold\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(grid,m,n):\n    grid=sorted(grid,key=lambda x:x[0])\n    #print(grid)\n    def dfs(i,j,di,dj,res):\n        if i<0 or j<0 or i>m-1 or j>n-1 or grid[i][j]<=0:\n            return 0\n        grid[i][j]-=1\n        res+=grid[i][j]\n        res+=dfs(i+di,j+dj,di,dj,res)\n        res+=dfs(i-di,j+dj,di,dj,res)\n        res+=dfs(i+di,j-dj,di,dj,res)\n        res+=dfs(i-di,j-dj,di,dj,res)\n        return res\n    res=0\n    for i in range(m):\n        for j in range(n):\n            res=max(res,dfs(i,j,0,1,0))\n            res=max(res,dfs(i,j,1,0,0))\n            res=max(res,dfs(i,j,0,-1,0))\n            res=max(res,dfs(i,j,-1,0,0))\n    return res\n\ngrid=[[1,3,1,5],[2,2,4,1],[5,0,2,3],[0,6,1,2]]", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mine, w, h):\n  mine = [x + [0] * w for x in mine]\n  path = [[0] * (h+1) for i in range(w+1)]\n  maxgold = 0\n\n  def solve(i, j):\n    nonlocal path, maxgold\n    if path[i][j] == 1:\n      return\n    if j == w or i == h:\n      return\n    path[i][j] = 1\n    gold = mine[i][j] + solve(i, j+1) + solve(i+1, j)\n    maxgold = max(maxgold, gold)\n    path[i][j] = 0\n\n  solve(0, 0)\n  return maxgold\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(grid,row,col):\n    '''\n    grid= a 2D array\n    row= number of row\n    col= number of columns\n    return maximum gold in this grid\n    '''\n    pass\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nimport random\n\ndef get_maxgold(grid, x, y):\n    \"\"\"\n    grid: a 2-D array of integers\n    x: size of grid\n    y: size of grid\n    return the max gold\n    \"\"\"\n    max_gold = 0\n    for i in range(x):\n        for j in range(y):\n            max_gold = max(max_gold,dfs(grid,x,y,i,j))\n    return max_gold\n\ndef dfs(grid,x,y,x_start,y_start):\n    if x_start < 0 or y_start < 0 or x_start >= x or y_start >= y:\n        return 0\n    if grid[x_start][y_start] == -1:\n        return 0\n    else:\n        gold = 0\n        grid[x_start][y_start] = -1\n        gold += grid[x_start][y_start]\n        gold += dfs(grid,x,y,x_start+1,y_start)\n        gold += dfs(grid,x,y,x_start,y_start+1)\n        gold += dfs(grid,x,y,x_start+1,y_start+1)\n        gold += dfs(grid,x,y,x_start-1,y_start+1)\n        gold += dfs(grid,x,y,x_start-1,y_start-1)\n        gold += dfs(grid,x,y,x_start,y_start-1)\n        gold += dfs(grid,x,y,x_start-1,y_start)\n        return gold\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple_of_str):\n\t\"\"\"\n\t\"extract_rear\" function\n\t\"\"\"\n\treturn tuple(list(map(lambda x: x[-1], tuple_of_str)))\n\n# Test Case", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple_of_strings):\n  return tuple_of_strings[-1]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(strings):\n    \"\"\"\n    extract_rear function takes a tuple of strings,\n    and return a tuple of the rear index element of each string in the tuple.\n    \"\"\"\n\n    return tuple([s[-1] for s in strings])\n\ndef test_extract_rear():\n    # Arrange:\n    expected_result = (\"s\", \"r\", \"s\")\n    test_input = ('Mers', 'for', 'Vers')\n\n    # Act:\n    result = extract_rear(test_input)\n\n    # Assert:\n    assert result == expected_result\n\n\n# 9.", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\nfrom typing import List\n\ndef extract_rear(tuple_of_strings:tuple)->List[str]:\n    return tuple_of_strings[1:]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple_):\n    return tuple_[1]", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(words):\n    # your code here\n    return [x[-1] for x in words]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_of_str):\n    return tuple(tuple_of_str[1:][::-1])\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(strings):\n    return list(map(lambda x: x[-1], strings))\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(word_tuple):\n    rear_tuple = tuple([word[-1] for word in word_tuple])\n    return rear_tuple\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_of_strings):\n    return tuple([s[-1] for s in tuple_of_strings])\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst, elem):\n\tcount = 0\n\tfor l in lst:\n\t\tif elem in l:\n\t\t\tcount += 1\n\treturn count\n\n# Test code", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst, element):\n    \"\"\"\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)\n    3\n    \"\"\"\n    counter = 0\n    for sublist in lst:\n        counter += 1 if element in sublist else 0\n    return counter\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nimport random\n\ndef count_element_in_list(l, e):\n    return sum(l.count(e) for l in l)\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(L,element):\n    count = 0\n    for i in L:\n        if element in i:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list_to_count_element_in, element_to_count):\n    counter = 0\n    for i in list_to_count_element_in:\n        if element_to_count in i:\n            counter += 1\n    return counter\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list, element):\n\tlist_count = 0\n\tfor list_item in list:\n\t\tif element in list_item:\n\t\t\tlist_count += 1\n\treturn list_count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(sublist_list,element):\n    count = 0\n    for sublist in sublist_list:\n        if element in sublist:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(l, e):\n    if not l:\n        return 0\n    count = 0\n    for x in l:\n        if x == e:\n            count += 1\n    return count\n\n# __________________________________________________________________________\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(my_list, el):\n    \"\"\"\n    :param my_list: a list of lists\n    :param el: an element contained in my_list\n    :return: the number of lists containing el\n    \"\"\"\n    count = 0\n    for list_item in my_list:\n        if el in list_item:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l,element):\n    \"\"\"\n    Given a list and an element, return the number of times the element appears in the list as a sublist.\n    \"\"\"\n    count=0\n    for item in l:\n        if element in item:\n            count+=1\n    return count\n#print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1))\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(num_list):\n    return list(filter(lambda x: x%2!=0, num_list))\n\n\n# + deletable=false nbgrader={\"checksum\": \"4d73825410052169794a2003638682c4\", \"grade\": true, \"grade_id\": \"q1\", \"points\": 1}\n# test cell\nfilter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\n\n# + [markdown] deletable=false editable=false nbgrader={\"checksum\": \"65a0384c70c94695b25b834d290887f5\", \"grade\": false, \"grade_id\": \"q1\", \"locked\": true, \"schema_version\": 1, \"solution\": false}\n# ## Question 2\n#\n#\n# Write a function that removes all the vowels in a given string and returns the new string.\n# assert remove_all_vowels(\"python\")==\"thon\"\n\n# + deletable=false nbgrader={\"checksum\": \"91b028d104987a7052e6308f074e3908\", \"grade\": true, \"grade_id\": \"q2\", \"points\": 1}\n# test cell\ndef remove_all_vowels(word):\n    for i in word:\n        if i in \"aeiouAEIOU\":\n            word=word.replace(i, \"\")\n    return word\n\nremove_all_vowels(\"python\")==\"thon\"\n\n\n# + [markdown] deletable=false editable=false nbgrader={\"checksum\": \"47d603b0c16499b715", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(aList):\n    return [x for x in aList if x % 2 == 1]\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return [x for x in lst if x%2!=0]\n\n\n# +\ndef test_filter_oddnumbers(self):\n    self.assertEqual(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1,3,5,7,9])\n    self.assertEqual(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), [1,3,5,7,9,11])\n    ", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda num: num%2!=0, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(map(lambda number:number if number % 2 != 0 else None, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(my_list):\n    # write your code here\n    return list(filter(lambda x: x%2!=0,my_list))\n\n# print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n#\n# print(filter_oddnumbers([1, 3, 5, 7, 9, 11]))\n\n# print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n# print(filter_oddnumbers([1, 3, 5, 7, 9, 11]))\n\n\n# \"Write a function to filter odd numbers using filter function.\"\ndef filter_oddnumbers(my_list):\n    return list(filter(lambda x: x%2!=0,my_list))\n\n# print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n#\n# print(filter_oddnumbers([1, 3, 5, 7, 9, 11]))\n\n# print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n# print(filter_oddnumbers([1, 3, 5, 7, 9, 11]))\n\n# \"Write a function to filter odd numbers using list comprehension.\"\ndef filter_oddnumbers(my_list):\n    return [x for x in my_list if x%2!=0]\n\n# print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n#\n# print(filter_odd", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    result = list(filter(lambda x: x%2==1, numbers))\n    return result\n\n# Test Case", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(number_list):\n\treturn list(filter(lambda x: x%2!=0, number_list))\n\n\n#print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numlist):\n    return list(filter(lambda num: num%2==0,numlist))\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(n):\n    return list(map(lambda x : x if x%2 else None,n))\n\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    return re.sub(r'^(\\d{4})-(\\d{2})-(\\d{2})$', r'\\3-\\2-\\1', date)\n\n\n# Tests\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n# replace the '-' in the date by the ' '\n# then use str.split() to seperate the date into three different string\n# and finally join the string with '-'\n# str.replace() is used to replace the '-' by ' '\ndef change_date_format(date):\n\tdate = date.replace('-',' ')\n\treturn '-'.join(str.split(date))\n\n# expected output\n# change_date_format('2026-01-02') == '02-01-2026'\n# change_date_format('19-06-2007') == '2007-06-19'\n# change_date_format('1987-06-20') == '1987-06-20'\n# change_date_format('02-06-2003') == '2003-06-02'\n# change_date_format('20070620') == '20070620'\n# change_date_format('20130602') == '20130602'\n# change_date_format('2007-06-20T10:00:00Z') == '2007-06-20'\n# change_date_format('2007-06-20T10:00:00.000Z') == '2007-06-20'\n# change_date_format('2007-06-20T10:00:00') == '2007-06-20'\n# change_date_format('2007-06-20 10:00:00Z') == '2007-06-20'\n# change", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    pass\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date_str):\n    date_regex = r\"\\d{4}-\\d{2}-\\d{2}\"\n    yyyy = date_str[0:4]\n    mm = date_str[5:7]\n    dd = date_str[8:10]\n    final_date_str = f'{dd}-{mm}-{yyyy}'\n    return final_date_str\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    return re.sub('-', '/', date)\n\ndef test_change_date_format():\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    date = re.findall(r'\\d{4}-\\d{2}-\\d{2}', date)\n    if len(date) == 0:\n        return \"INVALID_DATE\"\n\n    return \"-\".join(list(reversed(date[0])))\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(string):\n    \"\"\"\n    :param string: string to change format\n    :return: string in dd-mm-yyyy format\n    \"\"\"\n    return string.replace(\"-\", \"/\")\n\n# Solution\n\ndef change_date_format(string):\n    return string.replace(\"-\", \"/\")\n\n# Tests\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(s):\n    s_list = re.split(r\"-\",s)\n    s_list.reverse()\n    return \"-\".join(s_list)\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date_str):\n\n    return date_str.replace('-', '/')\n\n# Test your function here."], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(nums):\n    if not nums:\n        return []\n\n    temp = len(nums)\n    while temp > 1:\n        temp = temp // 2\n        for i in range(temp):\n            for j in range(i + temp, len(nums), temp):\n                while nums[j] < nums[j - temp]:\n                    nums[j], nums[j - temp] = nums[j - temp], nums[j]\n    return nums\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n# Shell Sort\ndef shell_sort(arr):\n    for step in range(len(arr) // 2, 0, -1):\n        for i in range(step, len(arr)):\n            key = arr[i]\n            j = i\n            while j >= step and key < arr[j - step]:\n                arr[j] = arr[j - step]\n                j -= step\n            arr[j] = key\n    return arr\n\ndef main():\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert shell_sort([10, 23, 4, 5, 3, 2, 1, 10, 81, 56, 95]) == [1, 2, 3, 4, 5, 10, 10, 23, 56, 81, 95]\n    assert shell_sort([12, 10, 4, 5, 3, 2, 1, 10, 81, 56, 95]) == [1, 2, 3, 4, 5, 10, 10, 12, 56, 81, 95]\n    assert shell_sort([10, 10, 4, 5, 3, 2, 1, 10, 81, 56, 95]) == [1, 2, 3, 4, 5, 10, 10, 1", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    # Sorting sequence 3, 1, 4, 2, 3, ...\n    # each interval is sorted using insertion sort\n    step = len(arr) // 2\n    while step > 0:\n        for i in range(step, len(arr)):\n            current = arr[i]\n            # Find the proper position of current number\n            j = i\n            while j >= step and arr[j - step] > current:\n                arr[j] = arr[j - step]\n                j -= step\n            arr[j] = current\n        step //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(array):\n    # Your code here\n    if len(array) < 2:\n        return array\n    length = len(array)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            j = i\n            while j >= gap and array[j] < array[j-gap]:\n                array[j], array[j-gap] = array[j-gap], array[j]\n                j -= gap\n        gap //= 2\n    return array\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    \"\"\"\n    Shell sort.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    # +1 because the last element will be compared.\n    increment = len(arr) // 2 + 1\n    while increment > 0:\n        for i in range(increment, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= increment and temp < arr[j - increment]:\n                arr[j] = arr[j - increment]\n                j -= increment\n            arr[j] = temp\n        increment = increment // 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(list):\n    \"\"\"\n    This function uses the shell sort algorithm to sort the given list.\n    \"\"\"\n    n = len(list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            current = list[i]\n            j = i\n            while j >= gap and list[j - gap] > current:\n                list[j] = list[j - gap]\n                j -= gap\n            list[j] = current\n        gap //= 2\n    return list\n\n# Test shell_sort", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n# Test Cases", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(numbers):\n    def insertion_sort(data):\n        for i in range(len(data) - 1):\n            key = data[i+1]\n            j = i\n            while j >= 0 and data[j] > key:\n                data[j+1] = data[j]\n                j -= 1\n            data[j+1] = key\n\n        return data\n\n    def _merge_sort(data):\n        if len(data) <= 1:\n            return data\n        else:\n            mid = len(data) // 2\n            left = _merge_sort(data[:mid])\n            right = _merge_sort(data[mid:])\n            return insertion_sort(left + right)\n\n    return _merge_sort(numbers)\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(L):\n    # First we create a gap that will be the starting point for each\n    # iteration\n    gap = len(L) // 2\n    # While the gap is less than 1\n    while gap > 0:\n        # For each iteration, we will make the gap smaller until it reaches 1\n        for i in range(gap, len(L)):\n            # For each iteration, we will check if the current element\n            # is greater than the previous one, and swap the two if so\n            temp = L[i]\n            j = i\n            while j >= gap and L[j-gap] > temp:\n                L[j] = L[j-gap]\n                j -= gap\n            L[j] = temp\n        # We will divide the gap by 2, and repeat the process\n        gap = gap // 2\n    return L\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(array):\n    if len(array) <= 1:\n        return array\n    else:\n        for gap in range(len(array) // 2, 0, -1):\n            for i in range(gap, len(array)):\n                j = i - gap\n                if array[j] > array[j + gap]:\n                    temp = array[j]\n                    array[j] = array[j + gap]\n                    array[j + gap] = temp\n        return array\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    return tuple([t1[i] & t2[i] for i in range(len(t1))])\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    if len(tuple1) == len(tuple2) and len(tuple1) == 4:\n        return tuple(zip(*[(x, y) for x, y in zip(tuple1, tuple2) if x == y]))\n    else:\n        return (0, 0, 0, 0)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(*tuples):\n    pass\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(*args):\n    for i in range(0, len(args[0])):\n        a = all([x[i] for x in args])\n        if a:\n            return a\n    return False\n\n# Test", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    return (t1[0] & t2[0], t1[1] & t2[1], t1[2] & t2[2], t1[3] & t2[3])\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(a, b):\n    return tuple(map(lambda x, y: 1 if x == y else 0, a, b))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    return (0 if t1[i] != t2[i] else 1 for i in range(len(t1)))\n\n\ndef test_and_tuples():\n    t1 = (10, 4, 6, 9)\n    t2 = (5, 2, 3, 3)\n    assert and_tuples(t1, t2) == (0, 0, 2, 1)\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n# Write your solution here:\ndef and_tuples(a, b):\n\ta1, a2, a3, a4 = a\n\tb1, b2, b3, b4 = b\n\tprint(a1, a2, a3, a4)\n\tprint(b1, b2, b3, b4)\n\treturn a1 & b1, a2 & b2, a3 & b3, a4 & b4\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n# +\n# %%writefile test_tuple_extraction.py"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a, b, c):\n    return -(b/a)\n\n# print parabola_directrix(5,3,2)\n# # -198.0\n\n# ### Problem 3\n#\n# Write a function that returns the equation of the hyperbola.\n#\n# ```\n# assert hyperbola_equation(3,4,5)== 'x^2/4 - 3/2x - 5/4 = 0'\n# ```\n\ndef hyperbola_equation(a,b,c):\n    return \"x^2/\"+str(a) + \" - \"+str(b)+\"/\"+str(a)+\" - \"+str(c)+\"/\"+str(a)+\" = 0\"\n\n# +\n# print hyperbola_equation(3,4,5)\n# # x^2/4 - 3/2x - 5/4 = 0\n# -\n\n# ### Problem 4\n#\n# Write a function that returns the equation of the circle.\n#\n# ```\n# assert circle_equation(3,4)== 'x^2 + 3x - 4 = 0'\n# ```\n\ndef circle_equation(a,b):\n    return \"x^2 + \"+str(a)+\"x - \"+str(b)+\" = 0\"\n\n\n# print circle_equation(3,4)\n# # x^2 + 3x - 4 = 0\n\n# ### Problem 5\n#\n# Write a function that returns the equation of the ellipse.\n#\n# ```\n# assert ellipse_equation(3,4,5)== 'x^2/5 - 3/2x + 4/5 = 0'\n# ```\n\ndef ellipse_equation(a,b,c):\n    return \"x^2/\"+str(a) + \" - \"+str(b)+\"/\"+str(a)+\" + \"+str(c)+\"/\"+str(a)+\" = 0\"\n\n\n# +\n# print ellipse_equation(3,4,5)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n\treturn (-b + sqrt(b**2 - 4*a*c))/(2*a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    if a==0:\n        return -b/c\n    elif a==1:\n        return -c/b\n    else:\n        return -b/(a-c)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    \"\"\"Find the directrix of a parabola\"\"\"\n    # setup equation: ax^2+bx+c=0\n    equation = a*x**2 + b*x + c\n    # set this to zero and solve for x\n    directrix = -equation.subs(x,0)\n    # return the directrix\n    return directrix\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    r = (b**2 - 4*a*c)**0.5\n    return -b/2 - r\n\ndef main():\n    #assert parabola_directrix(5,3,2)==-198\n    print(parabola_directrix(5,3,2))", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    return (-b-((b*b)-(4*a*c)))/(2*a)\n\ndef test_parabola_directrix():\n    assert parabola_directrix(5,3,2)==-198\n\n#A parabola has a minimum when the parabola's directrix intersects the x axis.", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\nimport math\n\ndef parabola_directrix(a,b,c):\n\tx = -b/(2*a)\n\ty = -c/(4*a**2)\n\tprint(x)\n\treturn y\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return -b/2/a\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    D = (b**2 - 4*a*c)/(4*a)\n    return D\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n  return (-b/(2*a),-(-b**2+(4*a*c))/(4*a))\n\ndef parabola_directrix_2(a,b,c):\n  \"\"\"\n  Does the same thing as parabola_directrix, but\n  avoids float division and using the quadratic formula.\n  \"\"\"\n  return (\n    (-b/2)-(sqrt((b**2)-(4*a*c)))/2/a\n  ,-((-b**2)+(4*a*c))/(4*a)\n  )\n\ndef test_parabola_directrix():\n  assert parabola_directrix(5,3,2)==-198\n  assert parabola_directrix_2(5,3,2)==-198\n\n@pytest.mark.parametrize(\n  'x,y,a,b,c',\n  [\n    ( 0,0,1,2,3),\n    ( 1,0,2,2,1),\n    ( 2,0,2,2,1),\n    ( 3,0,2,2,1),\n    ( 4,0,2,2,1),\n    ( 5,0,2,2,1),\n    ( 6,0,2,2,1),\n    ( 7,0,2,2,1),\n    ( 8,0,2,2,1),\n    ( 9,0,2,2,1),\n    (10,0,2,2,1),\n    (11,0,2,2,1),\n  ]\n)\ndef test_parabola_directrix_points(x,y,a,b,c):\n  \"\"\"\n  Make sure that the directrix of a parabola is correct at all\n  points on the curve.\n  \"\"\"\n  directrix = parabola_directrix(a,b,c)\n  assert directrix==(-b/2-(sqrt((b**2)-(4*a*c)))/2/a,-((-b**2)+(4*a*c))/("], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst1, lst2):\n    \"\"\"\n    >>> common_element([1,2,3,4,5], [5,6,7,8,9])==True\n    \"\"\"\n    for i in lst1:\n        if i in lst2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst1, lst2):\n    for e in lst1:\n        if e in lst2:\n            return True\n    return False\n\n\n# test", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                return True\n    return False\n    ", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for e in list1:\n        if e in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(first_list, second_list):\n    for el in first_list:\n        if el in second_list:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(lst1, lst2):\n    \"\"\"\n    :param lst1: the first list\n    :param lst2: the second list\n    :return: true if the lists have at least one common element\n    \"\"\"\n    return lst1 and lst2 and lst1[0] in lst2 or lst2[0] in lst1\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    # create the set of elements from list 1\n    set1 = set(list1)\n    # create the set of elements from list 2\n    set2 = set(list2)\n    # check if there are any elements in set1 that are also in set2\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False\n\n\n# +\n# tests", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# Problem 4:", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(a,b):\n\treturn len(list(set(a).intersection(b)))>0\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(x,y,z):\n    if x>y and x>z:\n        return y\n    elif y>x and y>z:\n        return z\n    elif z>x and z>y:\n        return x\n    else:\n        return \"NaN\"\n    ", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return int((a+b+c-min(a,b,c))/(2))\n\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    \"\"\"\n    Returns the median of the trapezium given as parameters\n    \"\"\"\n    return (a+b+c)/2\n\n\n# + [markdown] id=\"cVZmyJ-jI2Kz\" colab_type=\"text\"\n# # [Optional] Problem 3\n#\n# Write a function to find the median of a trapezium.\n# assert median_trapezium(15,25,35)==20\n\n# + id=\"648d4lT5JFs1\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(x1,x2,x3):\n    x_list = [x1,x2,x3]\n    x_list.sort()\n    return (x1+x2+x3-x_list[0]-x_list[1])//2\n\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(x,y,z):\n    \"\"\"\n    Function to find median of a trapezium\n\n    Parameters\n    ----------\n    x: int\n        Base of the first rectangle\n    y: int\n        Base of the second rectangle\n    z: int\n        Base of the third rectangle\n\n    Returns\n    -------\n    int\n        Median of the trapezium\n\n    Examples\n    --------\n    >>> median_trapezium(15,25,35)\n    20\n    \"\"\"\n\n    if x+y+z == 0:\n        return 0\n    elif x==0:\n        return y\n    elif y==0:\n        return z\n    elif z==0:\n        return x\n    elif x == y:\n        return z\n    elif x == z:\n        return y\n    elif y == z:\n        return x\n    elif x+y > z:\n        return median_trapezium(x,y,z-y)\n    elif x+z > y:\n        return median_trapezium(x-z,y,z)\n    else:\n        return median_trapezium(x,z,y-x)\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    :param a: 1st side length of the trapezium\n    :param b: 2nd side length of the trapezium\n    :param c: length of the parallel side of the trapezium\n    :return: median of the trapezium\n    \"\"\"\n    return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n\n# 5. Write a function to find the area of a trapezium.", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a, b, c):\n    # your code here\n    return (max(a,b,c) + min(a,b,c))/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a, b, c):\n    return (a+b+c)//2\n\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    for x in arr:\n        if x > num:\n            return \"Yes\"\n    return \"No, entered number is less than those in the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, target):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for x in arr:\n        if x > target:\n            return f'Yes, entered number is greater than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    # YOUR CODE HERE\n    for x in range(len(arr)):\n        if num > arr[x]:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"\n\ndef test_check_greater():\n    assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\ntest_check_greater()<jupyter_output>Yes, entered number is greater than those in the array<jupyter_text>Question 3Write a function to check whether the given string is a palindrome. Example: \"abba\" is a palindrome, \"abcdefg\" is not a palindrome.assert check_palindrome(\"abba\") == \"Yes, it's a palindrome\"assert check_palindrome(\"abcdefg\") == \"No, it's not a palindrome\"<jupyter_code>def check_palindrome(string):\n    # YOUR CODE HERE\n    string = string.lower()\n    string_reversed = \"\"\n    for x in range(len(string)):\n        string_reversed += string[len(string)-1-x]\n    if string == string_reversed:\n        return \"Yes, it's a palindrome\"\n    else:\n        return \"No, it's not a palindrome\"\n\ndef test_check_palindrome():\n    assert check_palindrome(\"abba\") == \"Yes, it's a palindrome\"\n    assert check_palindrome(\"abcdefg\") == \"No, it's not a palindrome\"\n\ntest_check_palindrome()<jupyter_output>Yes, it's a palindrome\nNo, it's not a palindrome<jupyter_text>Question 4Write a function to check whether the given string contains only digits.assert check_digits(\"1234\") == \"Yes, it contains only digits\"assert check_digits(\"123a4\") == \"No, it contains non-digit characters\"<jupyter_code>def check_digits(string):\n    # YOUR CODE HERE\n    string = string.lower()\n    for x in", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\n#check_greater(arr, num) -> str\n\narr = [1, 2, 3, 4, 5]\nnum = 4\n\ndef check_greater(arr, num):\n    \"\"\"\n    Helper function for checking if entered number is greater than elements in array.\n    \"\"\"\n    if num < min(arr):\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, x):\n    if x > max(arr):\n        return \"Yes, entered number is greater than those in the array\"\n    else:\n        return \"No, entered number is less than those in the array\"\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    if any(num >= x for x in arr):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n# end def\n\n# def check_greater_correct():\n#     \"\"\"\n#     >>> assert check_greater([1, 2, 3, 4, 5], 4) == 'Yes, the entered number is greater than those in the array'\n#     >>> assert check_greater([1, 2, 3, 4, 5], 10) == 'No, entered number is less than those in the array'\n#     \"\"\"\n#     pass\n# end def\n\n\n# def check_greater_fast():\n#     \"\"\"\n#     >>> assert check_greater_fast([1, 2, 3, 4, 5], 4) == 'Yes, the entered number is greater than those in the array'\n#     >>> assert check_greater_fast([1, 2, 3, 4, 5], 10) == 'No, entered number is less than those in the array'\n#     \"\"\"\n#     pass\n# end def\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(num_list, num):\n    if num > max(num_list):\n        return 'Yes, the entered number is greater'\n    return 'No, entered number is less than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\n# +\ndef check_greater(arr, num):\n    res = \"Yes\" if all(num > x for x in arr) else \"No\"\n    return res\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\n# Write your code here\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, number):\n    \"\"\"\n    :param array: list of numbers\n    :param number: number to check\n    :return: 'No, entered number is less than those in the array' if the number is less than the list, otherwise, 'Yes'\n    \"\"\"\n    if number < min(array):\n        return \"No, entered number is less than those in the array\"\n    return \"Yes\"\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n  if text[:1]=='a' and text.count('b')>0:\n    return text\n  else:\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    result = ''\n    text = text.split()\n    if len(text)>0:\n        if text[0]=='a':\n            if len(text)>1:\n                result = 'Matched!'\n            else:\n                result = 'Not matched!'\n        else:\n            result = 'Not matched!'\n    else:\n        result = 'Not matched!'\n    return result\n\n\n\n#Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    if text[0]=='a':\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n\n#Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    if text[0]=='a' and len(text)>1:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n\n#Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    if len(text)==0:\n        return \"Not matched!\"\n    elif text[0]=='a':\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n# Write a function that reads a user's name and prints it out with a welcome message.\ndef greet_user(name):\n    return \"Welcome, \" + name + \"!\"\n\n\n# Write a function that reads a user's name and prints it out with a welcome message.\ndef greet_user(name):\n    return \"Welcome, \" + name\n\n# Write a function that reads a user's name and prints it out with a welcome message.\ndef greet_user(name):\n    return \"Welcome, \" + name + \"!\"\n\n# Write a function that reads a user's name and prints it out with a welcome message.\ndef greet_user(name):\n    return \"Welcome, \" + name\n\n# Write a function that reads a user's name and prints it out with a welcome message.\ndef greet_user(name):\n    return \"Welcome, \" + name + \"!\"\n\n\n# Write a function that reads", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    pass\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(str):\n    if re.search(r'a+b', str):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if text[-1]=='a':\n        return text[:-1]\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n  a_idx = text.find('a')\n  if a_idx == -1:\n    return 'Not matched!'\n  b_idx = text.find('b',a_idx+1)\n  if b_idx == -1:\n    return 'Not matched!'\n  return f'{a_idx+1} {b_idx+1}'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    match = re.search(r'^a.b+', text)\n    if match:\n        return match.group()\n    return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    pattern = re.compile(r\"a+b+\")\n    m = pattern.match(text)\n    if m:\n        return m.group(0)\n    return \"Not matched!\"\n\ntext_match_one(\"ab\")\ntext_match_one(\"ac\")\ntext_match_one(\"aabbb\")\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(txt):\n    for i in range(len(txt)-1):\n        if txt[i] == 'a':\n            if txt[i+1] == 'b':\n                return 'Matched!'\n            else:\n                return 'Not matched!'\n    return 'Not matched!'\n\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return text\n    else:\n        return 'Not matched!'\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\nimport unittest\nfrom unittest import TestCase\n\ndef last_Digit(n):\n    return n%10\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    return num % 10\n\n\n# -\n\n# ### D. Write a python program to find the third largest of three numbers.\n\n# +", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return n % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    return num % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n\tif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn last_Digit(num//10)\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n\t\"\"\"\n\tfinds the last digit of a number\n\t\"\"\"\n\treturn n%10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    print(num%10)\n\nlast_Digit(123)\n\n# + id=\"f8rDA3S1HZV0\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    assert type(num) == int\n    num = str(num)\n    return int(num[-1])\n\n# O(n) time | O(1) space - where n is the length of the string\ndef last_Digit_2(num):\n    return int(str(num)[-1])\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    neg_nos = []\n    for x in lst:\n        if x<0:\n            neg_nos.append(x)\n    return neg_nos\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    print([num for num in lst if num<0])\n\n# Using list comprehension", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(list):\n    neg_list = []\n    for number in list:\n        if number < 0:\n            neg_list.append(number)\n    return neg_list\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(ls):\n    negative=[]\n    for x in ls:\n        if x<0:\n            negative.append(x)\n    return negative\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    \"\"\"\"\n    :param lst: list of numbers\n    :return: list of negative numbers from the given list\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num<0:\n            neg_list.append(num)\n    return neg_list\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n#your code goes here\ndef neg_nos(ls):\n    for i in range(len(ls)):\n        if ls[i]<0:\n            print(ls[i])\n            #print(ls.pop(i))\n\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lis):\n\tn = []\n\tfor i in lis:\n\t\tif i<0:\n\t\t\tn.append(i)\n\treturn n\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(nums):\n  neg_list = []\n  for i in nums:\n    if i < 0:\n      neg_list.append(i)\n  return neg_list", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(list):\n    out = []\n    for i in list:\n        if i<0:\n            out.append(i)\n    return out\n\n\n# + colab={} colab_type=\"code\" id=\"d_o5tm14mO1Z\""], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    return ''.join([char for char in string if char % 2 == 0])\n\n\ndef test_remove_odd():\n    assert remove_odd(\"python\") == (\"yhn\")\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(str):\n    return \"\".join(i for i in str if i%2!=0)\n\n#print(remove_odd(\"python\"))\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    return \"\".join(chr(x) for x in s if x%2==0)\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    return \"\".join(filter(lambda x: not x.isdigit(),s))\n\n#solution3\ndef remove_odd(s):\n    new_s = \"\"\n    for char in s:\n        if char.isdigit():\n            new_s += char\n    return new_s\n\n#solution 4\ndef remove_odd(s):\n    return \"\".join(filter(lambda x: x.isdigit(),s))\n\n#solution 5\ndef remove_odd(s):\n    return \"\".join(list(filter(lambda x: not x.isdigit(), s)))\n\n#solution 6\ndef remove_odd(s):\n    return \"\".join(list(filter(lambda x: x.isdigit(), s)))\n\n#solution 7\ndef remove_odd(s):\n    return \"\".join(list(map(lambda x: x.isdigit(),s)))\n\n#solution 8\ndef remove_odd(s):\n    return \"\".join(filter(lambda x: not(x.isdigit()), s))\n\n#solution 9\ndef remove_odd(s):\n    return \"\".join(list(filter(lambda x: x.isdigit(),s)))\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(text):\n    return ''.join(x for x in text if x%2)\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s: str) -> str:\n    i=0\n    j=0\n    ans=\"\"\n    while i<len(s):\n        if s[i]%2==0:\n            ans+=s[i]\n            i+=1\n        else:\n            j+=1\n    return ans\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    odd=s.find(\"o\")\n    if odd==-1:\n        return s\n    else:\n        return s[:odd]+s[odd+2:]\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n\treturn \"\".join(list(filter(lambda x: x%2!=0,s)))\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    return ''.join(x for x in s if x % 2 == 0)\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# define a function\ndef count_bidirectional(t):\n    # set a counter\n    count = 0\n    # loop over the tuple pairs\n    for (x, y) in t:\n        # if both are equal\n        if x == y:\n            # increment the counter\n            count += 1\n        # if both are not equal\n        else:\n            # increment the counter\n            count += 1\n    # return the number of bidirectional tuple pairs\n    return count\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuples):\n    # Write your code here\n    return len(tuples)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(lst):\n    pass\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    count = 0\n\n    for pair in pairs:\n        # If the first and the last number of each pair is the same\n        # then we have a bidirectional pair\n        if pair[0] == pair[-1]:\n            count += 1\n\n    return str(count)\n\n# In[ ]:\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    s1 = set()\n    s2 = set()\n    for p in pairs:\n        s1.add(p[0])\n        s2.add(p[1])\n    return str(len(s1.intersection(s2)))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(l):\n    return str(len(set(tuple(sorted(x)) for x in l)))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(list_of_tuples):\n    \"\"\"\n    >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )\n    3\n    \"\"\"\n    return str(len(list(filter(lambda x: x[0] == x[1], list_of_tuples))))\n\ndef main():\n    print('Hello, World!')\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(tuples):\n    return '?'\n\n# Tests", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(list_of_pairs):\n    # your code here\n    return len(set([a[0], a[1]] for a in list_of_pairs))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    # TODO: Your code here\n    pass\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(lst):\n    return int(''.join(str(item) for item in lst))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(arr):\n\tarr.sort()\n\tresult = 0\n\tfor num in arr:\n\t\tresult = result * 10 + num\n\treturn result\n\n# tests\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(l):\n    return int(str('').join(map(str, l)))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    single=0\n    for i in lst:\n        single+=i\n    return single\n#You can print out the result of the following function, it should be 113350", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    num = lst[0]\n    for i in lst[1:]:\n        num *= i\n    return num\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(L):\n    return sum(L)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    result = 0\n    for i in range(len(lst)):\n        result += lst[i] * (10**(len(lst)-i-1))\n    return result\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    s = 0\n    for i in lst:\n        s += i\n    return s\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(x):\n  return int(''.join(str(i) for i in x))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(lst):\n    return int(''.join([str(i) for i in lst]))\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n# write your solution here\n\ndef find_adverb_position(sentence):\n    pos = 0\n    adverb = ''\n    while True:\n        if sentence[pos] == '!':\n            adverb = sentence[pos:pos+4]\n            pos += 3\n        if len(adverb) > 0:\n            break\n        pos += 1\n    return (pos, pos+len(adverb)-1, adverb)\n\n\n# +\n# Test your function here\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    adverb = \"\"\n    if sentence.find(\"!!\") != -1:\n        index = sentence.find(\"!!\")\n        adverb = sentence[index:]\n        return (index, len(adverb) + index, adverb)\n    else:\n        return (\"\", 0, \"\")\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    pass\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    # Your code here\n    pos = sentence.find('!!')\n    if pos == -1:\n        return None\n    else:\n        return pos, pos+2, sentence[pos+1:pos+3]\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    result = []\n    for index, word in enumerate(sentence.split()):\n        if word in ADVERBS:\n            result.append((index, index + len(word), word))\n    return result\n\ndef test():\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert find_adverb_position(\"You will surely get a promotion.\")==(18, 26, 'surely')\n    assert find_adverb_position(\"I am very sad to hear your news.\")==(10, 16, 'very')\n\n# test()\n# YOUR CODE HERE\n\n# TASK 4", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(text):\n    return\n\ndef test_find_adverb_position():\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert find_adverb_position(\"not much of a difference\")==(7, 15, 'much')\n    assert find_adverb_position(\"already!! we have met\")==(0, 7, 'already')\n    assert find_adverb_position(\"all of them, were present\")==(15, 24, 'them')\n    assert find_adverb_position(\"we could not find them\")==(18, 25, 'them')\n    assert find_adverb_position(\"most of them, were present\")==(13, 24, 'them')\n    assert find_adverb_position(\"most of them, weren't present\")==(13, 30, 'them')\n    assert find_adverb_position(\"not at all\")==(7, 10, 'at')\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"Return the position of an adverb in a given sentence.\n    Return 0,0 if no adverb is found\n    \"\"\"\n    position=0\n    for index, letter in enumerate(sentence):\n        if letter.lower()=='!':\n            position=index\n    if position!=0:\n        return position, position+1, sentence[position]\n    else:\n        return position, position, ''\n\n#test", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence: str) -> (int, int, str):\n    \"\"\"\n    Returns a tuple with the start position, end position, and adverb in the sentence.\n    \"\"\"\n    s = sentence\n    start = 0\n    end = 0\n    adverb = \"\"\n    while True:\n        start = s.find(\"!\")\n        end = s.find(\".\", start)\n        if start == -1:\n            return (start, end, adverb)\n        else:\n            adverb = s[start+1:end]\n            s = s[end+1:]\n    return (start, end, adverb)\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    positions = []\n    for index, word in enumerate(sentence.split()):\n        if word[-1] == '!':\n            positions.append(index)\n    if not positions:\n        return None\n    return (positions[0], positions[-1], sentence.split()[positions[0]])\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return side**2 * 6\n\n\ndef test_cube_surfacearea():\n    assert surfacearea_cube(5)==150\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return side**2 * 6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n#your code here\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n# Solution\n\n# write your solution here\ndef surfacearea_cube(dimension):\n    area = 6 * dimension ** 2\n    return area\n\n\n# test", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    \"\"\"\n    This function calculates the surface area of a cube.\n    \"\"\"\n    return 6*side**2\n\ndef surfacearea_cube_old(side):\n    \"\"\"\n    This function calculates the surface area of a cube.\n    \"\"\"\n    return 6*(side+side+side)\n\ndef surfacearea_cube_old(side):\n    \"\"\"\n    This function calculates the surface area of a cube.\n    \"\"\"\n    return 6*(side+side+side)\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(length):\n    \"\"\"Returns surface area of a cube\"\"\"\n    return 6*length**2\n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(length):\n    return 6 * length**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(length):\n    \"\"\"Returns the surface area of a cube with given length.\n\n    Args:\n        length (int): The length of a side of the cube.\n\n    Returns:\n        int: The surface area of the cube.\n    \"\"\"\n    return 6*length**2", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(x):\n    return 6*x**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    return side**2*6\n\ndef surfacearea_cube_v2(side):\n    return side * side * 6\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(values):\n    pos = 0\n    neg = 0\n    for value in values:\n        if value>0:\n            pos +=1\n        else:\n            neg +=1\n    return pos/len(values)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n\ndef test_positive_count():\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\n\n\ndef test_positive_count_empty():\n    assert positive_count([]) == 0\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(x):\n    if len(x) == 0:\n        return 0\n    count = 0\n    for i in x:\n        if i > 0:\n            count += 1\n    return count/len(x)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    return sum(1 for num in nums if num > 0) / len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    positive_nums=0\n    for num in nums:\n        if num>0:\n            positive_nums+=1\n    return positive_nums/len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(a):\n    positive=0\n    for i in a:\n        if i>0:\n            positive+=1\n    return float(positive)/len(a)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    return len([x for x in arr if x > 0])/len(arr)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in numbers:\n        if num > 0:\n            positives += 1\n    return positives / len(numbers)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(numbers):\n    positive_nums = 0\n    for i in range(len(numbers)):\n        if numbers[i]>0:\n            positive_nums+=1\n    return positive_nums / len(numbers)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(integers):\n    positive_number = 0\n    for i in integers:\n        if i>0:\n            positive_number += 1\n    return positive_number/len(integers)\n\n\n# +\n# %%timeit\npositive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n\n# %%timeit\npositive_count_solution([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n# -\n\n# ## Part 3: Counting the characters in a string\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    return max([x for x in lst if x < 0])\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(numbers):\n    # YOUR CODE HERE\n    return max(numbers, key=lambda x: x if x < 0 else None)\n\n# print(largest_neg([1,2,3,-4,-6]))\n\n######################################################################\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(l):\n    largest = l[0]\n    for i in l:\n        if i < 0 and i > largest:\n            largest = i\n    return largest\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(numbers):\n    # write your code here\n    largest = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < 0 and numbers[i] > largest:\n            largest = numbers[i]\n    return largest\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    if len(lst) == 0:\n        return \"None\"\n    else:\n        return max([x for x in lst if x < 0])\n\ndef main():\n    print(largest_neg([1,2,3,-4,-6]))\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(list):\n    '''(list of int) -> int\n    \n    Returns largest negative number from the given list'''\n    largest_neg = float(\"-inf\")\n    for i in list:\n        if i < 0 and i > largest_neg:\n            largest_neg = i\n    return largest_neg\n\ndef test_largest_neg():\n    assert largest_neg([1,2,3,-4,-6]) == -6\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    if lst == []:\n        return None\n    else:\n        maximum = lst[0]\n        for item in lst:\n            if item < 0 and item > maximum:\n                maximum = item\n        return maximum\n\ndef test_largest_neg():\n    assert largest_neg([1,2,3,-4,-6]) == -6\n    assert largest_neg([]) == None\n    assert largest_neg([1,2,3,4,5,6]) == None\n\ndef main():\n    test_largest_neg()\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(list):\n    largest_num = 0\n    for i in list:\n        if i < 0 and i > largest_num:\n            largest_num = i\n    return largest_num\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(my_list):\n    largest = 0\n    for x in my_list:\n        if x < 0 and x > largest:\n            largest = x\n    return largest\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    largest = 0\n    for i in lst:\n        if i > largest:\n            largest = i\n    return largest"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    new_list = []\n    for tup in tuple_list:\n        new_list.append(tup[:k])\n    return '[{0}]'.format(', '.join(map(str, new_list)))\n\n\n#print trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tup_list, k):\n    return [tuple(list(tup)[:k]) for tup in tup_list]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuples, k):\n    \"\"\"\n    >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n    '[(2,), (9,), (2,), (2,)]'\n    \"\"\"\n    trimmed_tuples = []\n    for tuple_item in tuples:\n        trimmed_tuple = tuple_item[:k]\n        trimmed_tuples.append(trimmed_tuple)\n    return trimmed_tuples\n\n# print(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2))\n# print(trim_tuple([(3, 4, 9, 2, 1), (5, 3, 2, 1, 4), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2))\n\n# # print(trim_tuple([(3, 4, 9, 2, 1), (5, 3, 2, 1, 4), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1))\n# print(trim_tuple([(3, 4, 9, 2, 1), (5, 3, 2, 1, 4), (9, 1, 2, 3, 5), (4, 8, ", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    # Your code here\n    return 'Your code here'\n\ndef test_trim_tuple():\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\ntest_trim_tuple()\n\n# -\n\n# ## Part 7: Type checking\n#\n# In the next problem we want to write a function that check if the type of each item in the given tuple list is the same or not.\n#\n# We have imported a helper function `check_type` that take a `val` as an argument and return True if `val` is an instance of one of the given classes (or `False` otherwise).\n#\n# For instance,\n#\n# check_type(1, int) = True\n#\n# check_type(1, float) = False\n\n# +", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    trimmed_tuples = [x[:k] for x in tuples]\n    return '({})'.format(\n        ', '.join(\n            '[' + ', '.join(str(i) for i in y) + ']'\n            for y in trimmed_tuples\n        )\n    )\n\n# test cases", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(list_of_tuple, k):\n    \"\"\"\n    >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    \"\"\"\n    return '(' + ','.join(map(lambda x: str(x[k:]), list_of_tuple)) + ')'\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nimport itertools\n\n\ndef trim_tuple(tuples, k):\n    \"\"\"\n    Returns a tuple of tuple with length of k\n    \"\"\"\n    tuple_of_tuple = []\n    for each_tuple in tuples:\n        tuple_of_tuple.append(each_tuple[:k])\n\n    return tuple_of_tuple\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuples, k):\n    # tuple list\n    tlist = []\n    for t in tuples:\n        tlist.append(t[:k])\n    return str(tlist)\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tup_list, k):\n    return [tuple(tup[:k]) for tup in tup_list]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tlist, k):\n    tlist_trimmed = []\n    for i in tlist:\n        tlist_trimmed.append(tuple(i[:k]))\n    return \"({})\".format(\", \".join(map(str, tlist_trimmed)))\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1,tuple2):\n    return tuple([num1 * num2 for num1,num2 in zip(tuple1,tuple2)])\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1,tuple2):\n    return tuple( tuple(i1*i2 for i1,i2 in zip(row1,row2)) for row1,row2 in zip(tuple1,tuple2) )\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(a, b):\n\tif len(a) == len(b):\n\t\tresult = []\n\t\tfor i in range(0,len(a)):\n\t\t\ttemp = []\n\t\t\tfor j in range(0,len(a[i])):\n\t\t\t\ttemp.append(a[i][j] * b[i][j])\n\t\t\tresult.append(temp)\n\t\treturn result\n\telse:\n\t\treturn \"Length of tuples should be same.\"\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(x,y):\n    \"\"\"\n    :param x: tuple\n    :param y: tuple\n    :return: tuple\n    \"\"\"\n    result = tuple()\n    for i,j in zip(x,y):\n        result += (i[0]*j[0], i[1]*j[1])\n    return result\n\n#assert index_multiplication((1, 3), (4, 5)) == 12\n#assert index_multiplication((1, 3), (4, 5)) == (12, 15)\n#assert index_multiplication((1, 3), (4, 5)) == (12, 15)\n#assert index_multiplication((1, 3), (4, 5)) == (12, 15)\n#assert index_multiplication((1, 3), (4, 5)) == (12, 15)\n#assert index_multiplication((1, 3), (4, 5)) == (12, 15)\n#assert index_multiplication((1, 3), (4, 5)) == (12, 15)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    return tuple((t1 * t2 for t1, t2 in zip(t1, t2)))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tup_1,tup_2):\n    temp=[]\n    for i in range(len(tup_1)):\n        temp.append((tup_1[i][0]*tup_2[i][0],tup_1[i][1]*tup_2[i][1]))\n    return temp\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(T1,T2):\n    result = []\n    for i in range(len(T1)):\n        temp = ()\n        for j in range(len(T1[i])):\n            temp += (T1[i][j] * T2[i][j],)\n        result.append(temp)\n    return result\n\ndef main():\n    print(index_multiplication((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple_1, tuple_2):\n    \"\"\"\n    This function takes 2 tuples, multiplies their elements index wise, and returns the resulting tuple.\n    \"\"\"\n    return tuple(map(lambda x, y: x * y, tuple_1, tuple_2))\n\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1,tuple2):\n    return tuple( (tup1[0]*tup2[0], tup1[1]*tup2[1]) for tup1, tup2 in zip(tuple1, tuple2))\n\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(l, t):\n    \"\"\"\n    This function takes list and tuple and returns the total number of\n    occurence of all elements of list in the tuple.\n\n    Args:\n        l (list) : list of elements\n        t (tuple) : tuple of elements\n\n    Returns:\n        total_occurence (int) : total number of occurence of all elements\n    \"\"\"\n    if type(t) == tuple:\n        l_len = len(l)\n        count = 0\n        for i in range(l_len):\n            if l[i] in t:\n                count += 1\n        return count\n    else:\n        return \"Tuple not accepted\"\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(lst,sub_lst):\n    x = 0\n    for i in sub_lst:\n        x += lst.count(i)\n    return x\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(lst, tup):\n\t\"\"\"\n\tinput: 2 lists\n\toutput: count of elements of list in tuple\n\t\"\"\"\n\tcount = 0\n\tfor i in tup:\n\t\tif i in lst:\n\t\t\tcount+=lst.count(i)\n\treturn count\n\nlst = ['a','a','c','b','d']\ntup = ['a','b']", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(L, E):\n    count = 0\n    for i in L:\n        for j in E:\n            if i == j:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list1,list2):\n    total=0\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            total=total+1\n    return total\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(a,b):\n    count=0\n    for i in range(len(b)):\n        for j in range(len(a)):\n            if a[j] == b[i]:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(List, tup):\n    count=0\n    for element in List:\n        if element in tup:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list_of_elements,tuple_of_elements):\n    count = 0\n    for element in tuple_of_elements:\n        count = count + list_of_elements.count(element)\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(my_tuple,my_list):\n    print(my_tuple,my_list)\n    counter=0\n    for i in my_tuple:\n        if i in my_list:\n            counter+=1\n    return counter\ncount_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'])\n#Task 2", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n# YOUR CODE HERE\ndef count_Occurrence(lst, t):\n    return sum([1 for x in lst if x in t])\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(lst):\n    return list(map(lambda x: x**3, lst))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(lst):\n    return [num ** 3 for num in lst]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(numbers):\n    return [n**3 for n in numbers]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(list):\n    return list(map(lambda i:i**3,list))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(my_list):\n    return [i**3 for i in my_list]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    # return map(lambda x: x*x*x, nums)\n    return list(map(lambda x: x*x*x, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return list(map(lambda num: num**3, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ncube_nums = lambda nums: list(map(lambda x: x**3, nums))\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(x):\n    return (x*(x+1)//2)*(x+2)//2\n\n# 2", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    n (int): the number of perrin numbers.\n\n    Returns:\n        int: the sum of perrin numbers.\n\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i+1\n    return total\n\n\ndef cal_sum_2(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    n (int): the number of perrin numbers.\n\n    Returns:\n        int: the sum of perrin numbers.\n\n    \"\"\"\n    return n*(n+1)/2\n\ndef cal_sum_3(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    n (int): the number of perrin numbers.\n\n    Returns:\n        int: the sum of perrin numbers.\n\n    \"\"\"\n    return n*(n+1)*(2*n+1)/6\n\ndef cal_sum_4(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    n (int): the number of perrin numbers.\n\n    Returns:\n        int: the sum of perrin numbers.\n\n    \"\"\"\n    return n*(n+1)*(2*n+1)*(3*n+1)/24\n\ndef cal_sum_5(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    n (int): the number of perrin numbers.\n\n    Returns:\n        int: the sum of perrin numbers.\n\n    \"\"\"\n    return n*(n+1)*(2*n+1)*(3*n+1)*(4*n+1)/120\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    return (n * (n + 1)) // 2\n\n#another way to write this\ndef cal_sum2(n):\n    return n * (n + 1) // 2\n\n#tests", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\nimport itertools\n\n\ndef cal_sum(n):\n    \"\"\"\n    Calulates the sum of perrin numbers\n    \"\"\"\n    p_n = 0\n    p_list = []\n    for i in itertools.permutations(range(1, n + 1)):\n        p_n = sum(i)\n        p_list.append(p_n)\n    return sum(p_list)\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n == 1:\n        return 1\n    return n + cal_sum(n-1)\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    result = 1\n    for i in range(1, n + 1):\n        result += i\n    return result\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    total = 0\n    for x in range(n+1):\n        total += x**3 - x\n    return total\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return cal_sum(n - 1) + cal_sum(n - 2)\n\ndef is_perrin_num(n):\n    if n < 1:\n        return False\n    elif n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        n = n - 1\n        return is_perrin_num(n)\n\ndef test_cal_sum():\n    assert cal_sum(9) == 49\n\ndef test_is_perrin_num():\n    assert is_perrin_num(9) == True\n    assert is_perrin_num(2) == True\n    assert is_perrin_num(5) == True\n    assert is_perrin_num(6) == False\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    \n    if x1 == x2 and x1 == x3:\n        return 'Yes'\n    \n    elif y1 == y2 and y1 == y3:\n        return 'Yes'\n    \n    elif (y1 - y2) * (x3 - x2) == (y3 - y2) * (x1 - x2):\n        return 'Yes'\n    \n    else:\n        return 'No'\n\ndef check_Triangle_2(a,b,c):\n    \n    if a == b and a == c:\n        return 'Yes'\n    \n    elif b == c and b == a:\n        return 'Yes'\n    \n    elif (a-b) * (a-c) == (b-c) * (b-a):\n        return 'Yes'\n    \n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    # use Heron's formula\n    a = (y2-y1)**2 + (x2-x1)**2\n    b = (y2-y1)**2 + (x3-x1)**2\n    c = (y3-y1)**2 + (x3-x1)**2\n    s = a+b+c\n    s = s**0.5\n    if s**2 == a*b*c:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n# Sample code to perform I/O:\n\n# #Function to check whether triangle is valid or not\ndef check_Triangle(a, b, c):\n    \"\"\"\n    :param a: first side of triangle\n    :param b: second side of triangle\n    :param c: third side of triangle\n    :return: returns whether triangle is valid or not as string\n    \"\"\"\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2.0\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # Calculate the perimeter\n    perimeter = a + b + c\n    # Check whether the area is greater than or equal to the perimeter\n    if area >= perimeter:\n        return 'Yes'\n    else:\n        return 'No'\n\n# This code is contributed by <NAME>\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if ((x1+x2) < x3) or ((x2+x3) < x1) or ((x1+x3) < x2) :\n        return \"No\"\n    elif (y1+y2) > y3 or (y2+y3) > y1 or (y1+y3) > y2:\n        return \"No\"\n    else:\n        return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\nimport math\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    # all sides must be of equal lengths to determine a triangle\n    length_1 = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    length_2 = math.sqrt((x3-x2)**2 + (y3-y2)**2)\n    length_3 = math.sqrt((x1-x3)**2 + (y1-y3)**2)\n    # three sides of a triangle must be of equal length\n    if length_1==length_2 and length_2==length_3 and length_1!=0:\n        # check if the angles form a straight line\n        # find the difference between the angles\n        angle_1 = math.degrees(math.acos((length_1**2+length_2**2-length_3**2)/(2*length_1*length_2)))\n        angle_2 = math.degrees(math.acos((length_2**2+length_3**2-length_1**2)/(2*length_2*length_3)))\n        angle_3 = math.degrees(math.acos((length_3**2+length_1**2-length_2**2)/(2*length_3*length_1)))\n        # if all the angles are equal, then it is a valid triangle\n        if angle_1==angle_2 and angle_2==angle_3 and angle_3==angle_1:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(p1,p2,p3):\n    if p1 == p2 == p3:\n        return \"Equilateral\"\n    elif (p1 == p2) or (p1 == p3) or (p2 == p3):\n        return \"Isosceles\"\n    elif p1 > p2 > p3 or p1 < p2 < p3 or p1 > p3 > p2 or p2 > p3 > p1:\n        return \"Scalene\"\n    else:\n        return \"Not a triangle\"", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(p1,p2,p3):\n    if p2-p1<0 or p3-p2<0 or p3-p1<0:\n        return 'No'\n    else:\n        return 'Yes'\n\np1 = 1\np2 = 5\np3 = 2\n\n# p1 = 10\n# p2 = 5\n# p3 = 11\n\n# p1 = 3\n# p2 = 10\n# p3 = 5\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c):\n    if(a+b>c and a+c>b and b+c>a):\n        return 'Yes'\n    else:\n        return 'No'\n\n\n# +\nimport sys\n# print(sys.maxsize)\n\ndef print_input(x,y):\n    # while True:\n        # if int(x) == int(y):\n            # print(int(x))\n            # break\n    return [int(x), int(y)]\n\ndef check_range(x,y):\n    return (int(x) >= 1 and int(x) <= 10**100) and (int(y) >= 1 and int(y) <= 10**100)\n\n\n# -\n\ndef is_prime(x):\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n        else:\n            return True\n\n\n# +\ndef print_result(x,y):\n    if x>y:\n        x,y = y,x\n    elif x<y:\n        y = x\n    for i in range(x+1, y):\n        if is_prime(i):\n            print(i)\n\n# print_result(1,3)", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    side1=((x2-x1)**2+(y2-y1)**2)**.5\n    side2=((x3-x1)**2+(y3-y1)**2)**.5\n    side3=((x3-x2)**2+(y3-y2)**2)**.5\n    if side1+side2<=side3 or side1+side3<=side2 or side2+side3<=side1:\n        return 'No'\n    else:\n        return 'Yes'\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(li, n):\n    \"\"\"\n    input: list\n    output: list\n    \"\"\"\n    if n==0:\n        return []\n    return li[0:n]", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(strings, n):\n    return strings[0:n]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(input_list, size):\n    if len(input_list)==size:\n        return input_list\n    else:\n        return extract_string(input_list, size-1)\n\n\n# +\n## question 2", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(words, size):\n    return [words[i:i+size] for i in range(0, len(words), size)]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(strings, size):\n    \"\"\"\n    :param strings: list of strings\n    :param size:  length of each string\n    :return: list of string with specified length\n    \"\"\"\n    return [str[0:size] for str in strings]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(input_list, size):\n    return [input_list[i] for i in range(0, len(input_list), size)]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n# function definition\n\ndef extract_string(input_list,size):\n\n    # empty list\n    string_list=[]\n\n    # iterate through list\n    for i in input_list:\n        \n        # check if length is less than or equal to size\n        if len(i)<=size:\n\n            # append the strings to the list\n            string_list.append(i)\n\n    return string_list\n\n\n# calling the function\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst,size):\n    l1=[]\n    for i in range(0,len(lst)):\n        if len(lst[i])==size:\n            l1.append(lst[i])\n    return l1", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(l,n):\n    return l[::n]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(strings, size):\n    \"\"\"\n    :param strings: list of strings\n    :param size: integer value representing the size of string to extract\n    :return: list of string values representing size of string to extract\n    \"\"\"\n    result=[]\n    for i in range(len(strings)):\n        if len(strings[i])==size:\n            result.append(strings[i])\n    return result\n\ndef extract_string(strings, size):\n    \"\"\"\n    :param strings: list of strings\n    :param size: integer value representing the size of string to extract\n    :return: list of string values representing size of string to extract\n    \"\"\"\n    return [strings[i] for i in range(len(strings)) if len(strings[i])==size]\n\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(s):\n    return ''.join(c for c in s if not c.isspace())\n\n# Tests.", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(s: str) -> str:\n    return re.sub(r'\\s+', '', s)\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    return re.sub(r' +', '', string)\n\ndef test():\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    assert remove_whitespaces('   ') == ''\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n\treturn re.sub('[\\s]+', '', string)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(str):\n    return re.sub(r'\\s', '', str)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(str):\n    regex = re.compile(r'\\s+')\n    return regex.sub(\"\", str)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub(r'\\s', '', string)\n\ndef test_remove_whitespaces():\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(str):\n    return re.sub(r'\\s', '', str)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(value_of_1st_order,value_of_2nd_order):\n    #Your code here\n    if (value_of_1st_order-value_of_2nd_order)>=0:\n        return None\n    else:\n        return value_of_2nd_order-value_of_1st_order\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,loss_percentage):\n    loss_amount=amount-loss_percentage*amount/100\n    if loss_amount<amount:\n        return loss_amount\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(price,amount):\n    amount = int(amount)\n    price = int(price)\n    if amount < price:\n        return None\n    return amount - price", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(gross_amount,net_amount):\n\tloss=gross_amount-net_amount\n\tif loss>=0:\n\t\treturn None\n\treturn loss\n\ngross_amount=int(input(\"Enter the gross amount: \"))\nnet_amount=int(input(\"Enter the net amount: \"))\n\nloss=loss_amount(gross_amount,net_amount)\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(initial_amount,used_amount):\n    loss=initial_amount-used_amount\n    if loss>0:\n        return loss\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,loss_percent):\n    if amount<=loss_percent*amount:\n        return None\n    return amount-loss_percent*amount\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(actual,profit):\n    if actual >= profit:\n        return None\n    else:\n        return actual - profit", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(final_amount,previous_amount):\n    if final_amount > previous_amount:\n        return final_amount - previous_amount\n    else:\n        return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amt_paid,amt_to_be_paid):\n    if amt_to_be_paid>amt_paid:\n        return amt_to_be_paid-amt_paid\n    return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(total_amt, total_amt_loss):\n    if total_amt_loss > total_amt:\n        return None\n    else:\n        return total_amt - total_amt_loss\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    return sum(i for i in range(1, n//2) if n % i == 0 and i % 2 == 0)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    factors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n    return sum([i for i in factors if i % 2 == 0])\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(number):\n    number = int(number)\n    count = 0\n    if number == 1:\n        return number\n    for i in range(1,number):\n        if number % i == 0:\n            count += i\n            if number // i != i:\n                count += number // i\n    return count\n\n# print(sumofFactors(18))\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    sum = 0\n    for i in range(2,num//2+1):\n        if num % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(number):\n    sum = 0\n    for i in range(1,number+1):\n        if number % i == 0 and i%2 == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    factors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n    print(factors)\n    return sum(x for x in factors if x % 2 == 0)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(number):\n    sum = 0\n    for i in range(1,number+1):\n        if i % 2 != 0:\n            continue\n        elif number % i == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(number):\n  # Your code goes here!\n  factors = []\n  for i in range(1, number+1):\n    if i % 2 == 0:\n      factors.append(i)\n  return sum(factors)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    \"\"\"find sum of factors of n that are even.\"\"\"\n    factors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            factors.append(i)\n    return sum([factor for factor in factors if factor % 2 == 0])\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(number):\n    #your code here\n    return None\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(string):\n    if 'z' in string:\n        return \"Found a match!\"\n    else:\n        return \"No match found!\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(my_str):\n  if 'z' in my_str:\n    return ('Found a match!')\n  else:\n    return ('Not Found!')\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(txt):\n    for i in range(len(txt)):\n        if txt[i] == 'z':\n            return \"Found a match!\"\n    return \"No match found!\"\n\n#print(text_match_wordz(\"pythonz.\"))", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    if \"z\" in text.lower():\n        return(\"Found a match!\")\n    else:\n        return(\"No match found\")", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(s):\n    found = s.find(\"z\")\n    if found != -1:\n        return \"Found a match!\"\n    else:\n        return \"No match found.\"\n\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if 'z' in text:\n        print('Found a match!')\n        return\n    else:\n        return 'No match found'\n\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'No match.'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\n# Write your solution below:\ndef text_match_wordz(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word:\n            return 'Found a match!'\n    return 'Did not find a match!'\n\n# You can test your solution by executing the following lines:", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(str):\n    \"\"\"str: a string\n    return a string, indicating a match if any, otherwise, returns an empty string\n    \"\"\"\n    if 'z' in str:\n        return 'Found a match!'\n    else:\n        return ''\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n# TODO: Define a function that takes a month number as its input\ndef check_monthnumb_number(month):\n    month_list = [1, 3, 5, 7, 8, 10, 12]\n    # TODO: Write a condition to check whether the month number is in the list or not\n    if month in month_list:\n        # TODO: If the month number is in the list, return True\n        return True\n    else:\n        # TODO: If the month number is not in the list, return False\n        return False\n\n# Write a test function that asserts that check_monthnumb_number(1) returns False\ndef test_check_monthnumb_number():\n    assert check_monthnumb_number(1)==False\n\n# TODO: Uncomment the next two lines to test your function\ntest_check_monthnumb_number()\n\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumb):\n    '''\n    Checks whether the given month number contains 31 days or not.\n    :param monthnumb:\n    :return:\n    '''\n    if monthnumb in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnumb in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n\n\ndef test_function():\n    assert check_monthnumb_number(5)==True\n    assert check_monthnumb_number(4)==False\n    assert check_monthnumb_number(11)==False\n\n#4", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb in [1,3,5,7,8,10,12]:\n        if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n            if monthnumb % 4 == 0:\n                if monthnumb == 1:\n                    return 28\n                else:\n                    return 29\n            else:\n                return 28\n        else:\n            return 30\n    else:\n        return 31\n    ", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if month == 2:\n        return True\n    elif month == 4:\n        return True\n    elif month == 6:\n        return True\n    elif month == 9:\n        return True\n    elif month == 11:\n        return True\n    else:\n        return False\n\ndef solution(dates):\n    \"\"\"\n    :type dates: List[str]\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for date in dates:\n        day,monthnumb,year=date.split(\"-\")\n        monthnumb=int(monthnumb)\n        result.append(str(day)+\"-\"+str(monthnumb)+\"-\"+str(year))\n    \n    return result\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb==1 or monthnumb==3 or monthnumb==5 or monthnumb==7 or monthnumb==8 or monthnumb==10 or monthnumb==12:\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb_number):\n    return monthnumb_number in (1,3,5,7,8,10,12)\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb in range(1,13):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumb):\n    if monthnumb==1 or monthnumb==3 or monthnumb==5 or monthnumb==7 or monthnumb==8 or monthnumb==10 or monthnumb==12:\n        return True\n    if monthnumb==4 or monthnumb==6 or monthnumb==9 or monthnumb==11:\n        return False\n    else:\n        return 'input error!'\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    reversed_string_list = []\n    for string in string_list:\n        reversed_string_list.append(string[::-1])\n    return reversed_string_list\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n# -*- coding: utf-8 -*-", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    return list(map(lambda s:s[::-1], strings))\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(aList):\n    return [i[::-1] for i in aList]", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    \"\"\"\n    :param string_list: list of strings\n    :return: list of strings in reversed order\n    \"\"\"\n    return string_list[::-1]\n\n\ndef main():\n    print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    pass\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(strings):\n    for i in range(len(strings)):\n        strings[i] = strings[i][::-1]\n\n    return strings\n\n\n# print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(lst):\n    reversed_lst = []\n    for i in range(len(lst)):\n        reversed_lst.insert(0,lst[i])\n    return reversed_lst\n\nlst = ['Red', 'Green', 'Blue', 'White', 'Black']", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(l):\n    return [s[::-1] for s in l]\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    return list(map(str, map(ord, strings)))\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(L):\n    min_len = len(L)\n    min_sublist = []\n    for sublist in L:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef find_min(l):\n    min_size = len(l[0])\n    min_sublist = l[0]\n    for sublist in l[1:]:\n        if len(sublist) < min_size:\n            min_size = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    min_list = lst[0]\n    for item in lst:\n        if len(item) < len(min_list):\n            min_list = item\n    return min_list", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef find_min(L):\n    min_length = len(L[0])\n    min_list = L[0]\n    for i in range(len(L)-1):\n        if len(L[i]) < min_length:\n            min_length = len(L[i])\n            min_list = L[i]\n    return min_list\n\n\ndef Find_Min_Solution():\n    L = [[1],[1,2],[1,2,3]]\n    print (find_min(L))\n\n\ndef main():\n    print (\"Minimum Sublist: \")\n    Find_Min_Solution()\n\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef find_min(nums):\n    sub_list = []\n    temp_min = None\n    temp_length = 1000000\n    for num in nums:\n        if temp_min is None or num < temp_min:\n            temp_min = num\n            sub_list = [num]\n            temp_length = 1\n        else:\n            if temp_length == 1:\n                sub_list = [num]\n                temp_length += 1\n            else:\n                sub_list.append(num)\n                temp_length += 1\n    return sub_list\n\ndef find_min_1(nums):\n    sub_list = []\n    temp_min = None\n    for num in nums:\n        if temp_min is None or num < temp_min:\n            temp_min = num\n            sub_list = [num]\n        elif temp_min == num:\n            sub_list.append(num)\n        elif temp_min != num:\n            if len(sub_list) < 2:\n                sub_list = [num]\n            elif len(sub_list) >= 2:\n                sub_list.append(num)\n    return sub_list\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef find_min(arr):\n    min_index = 0\n    min_len = len(arr[0])\n    for i in range(len(arr)):\n        if len(arr[i]) < min_len:\n            min_index = i\n            min_len = len(arr[i])\n\n    return arr[min_index]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    a=[]\n    min_len=None\n    for i in lst:\n        if min_len==None:\n            min_len=len(i)\n            a=i\n        elif len(i)<min_len:\n            min_len=len(i)\n            a=i\n    return a\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    for i in range(0,len(lst)):\n        for j in range(i,len(lst)):\n            if(len(lst[i])>len(lst[j])):\n                return lst[i]\n\nFind_Min([[1],[1,2],[1,2,3]])\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(input_list):\n    list_len = len(input_list)\n    min_len = 100\n    min_list = []\n    for i in range(list_len):\n        for j in range(list_len):\n            if i != j:\n                if len(input_list[i]) < len(input_list[j]):\n                    if len(input_list[i]) < min_len:\n                        min_len = len(input_list[i])\n                        min_list = input_list[i]\n    return min_list\n\ndef main():\n    test_list = [[1], [1, 2], [1, 2, 3]]\n    print(Find_Min(test_list))\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length, width):\n    return length * width\n\nimport doctest\ndoctest.testmod()\n\n\n# +", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(l,b):\n    return l * b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length, width):\n    \"\"\"\n    Arguments:\n        length: an integer\n        width: an integer\n    Returns:\n        an integer representing the area of the rectangle\n    \"\"\"\n    return length * width\n\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n# input\nlength, width = 10, 20\n\n# output", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length,width):\n    \"\"\"\n    length: length of a side of rectangle\n    width: width of a side of rectangle\n    \"\"\"\n    area = length * width\n    return area\n\n\n# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(length, width):\n    \"\"\"\n    length: length of a side of rectangle\n    width: width of a side of rectangle\n    \"\"\"\n    perimeter = 2 * (length + width)\n    return perimeter\n\ndef test_rectangle_area():\n    \"\"\"\n    test area function\n    \"\"\"\n    assert rectangle_area(10,20) == 200\n    assert rectangle_area(20,30) == 600\n\ndef test_rectangle_perimeter():\n    \"\"\"\n    test perimeter function\n    \"\"\"\n    assert rectangle_perimeter(10,20) == 60\n    assert rectangle_perimeter(20,30) == 120\n\ndef test_rectangle():\n    \"\"\"\n    test perimeter and area function together\n    \"\"\"\n    assert rectangle_area(10,20) == 200\n    assert rectangle_perimeter(10,20) == 60\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    \"\"\"\n    :param width: Rectangle's width.\n    :param height: Rectangle's height.\n    :return: Area of a rectangle.\n    \"\"\"\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(w,h):\n    return w*h\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width, height):\n    \"\"\"Calculates the area of a rectangle\"\"\"\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(l,b):\n    return l*b\n\n# solution 2"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    # REPLACE WITH REGEX PATTERN HERE\n    return string.replace(\" \", \"\").replace(\" \", \"\").lower()\n\n\ndef main():\n    print(remove_uppercase('CAsTyOUrFAvORitETVshOWs'))\n    assert remove_uppercase('CAsTyOUrFAvORitETVshOWs') == 'cstyoravoitshos'\n    print(remove_uppercase('CAsTyOUrFAvORitETVshOWs'))\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    return re.sub('[A-Z]+', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]+', '', string)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(string):\n    pass\n\n# Write a function to remove the dashes from a given string by using regex.\n# assert remove_dashes('a-b-c-d-e-f') == 'abcdf'\ndef remove_dashes(string):\n    pass\n\n# Write a function to remove the numbers from a given string by using regex.\n# assert remove_numbers('Hello 123 World') == 'Hello World'\ndef remove_numbers(string):\n    pass\n\n# Write a function to remove the punctuation from a given string by using regex.\n# assert remove_punctuation('Hello, World!') == 'Hello World'\ndef remove_punctuation(string):\n    pass\n\n# Write a function to find and replace all dashes with underscores in a given string by using regex.\n# assert replace_dashes('a-b-c-d-e-f') == 'a_b_c_d_e_f'\ndef replace_dashes(string):\n    pass\n\n# Write a function to convert a given string into camel case.\n# assert convert_camel_case('hello world') == 'helloWorld'\ndef convert_camel_case(string):\n    pass\n\n# Write a function to capitalize the first letter of a given string by using regex.\n# assert capitalize_first_letter('hello world') == 'Hello world'\ndef capitalize_first_letter(string):\n    pass\n\n# Write a function to replace multiple spaces with a single space.\n# assert spaceify('hello  world!') == 'hello world!'\ndef spaceify(string):\n    pass\n\n# Write a function to reverse the order of a given string by using regex.\n# assert reverse_string('hello world') == 'dlrow olleh'\ndef reverse_string(string):\n    pass\n\n# Write a function to reverse a given string by using slicing.\n# assert reverse_string_with_slice('hello world') == 'dlrow olleh'\ndef reverse_string_with_slice(string):\n    pass\n\n#", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(string):\n    return re.sub('[A-Z]', '', string)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    return re.sub('[A-Z]+', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]', '', string)\n\n# a = remove_uppercase('cAstyoUrFavoRitETVshoWs')\n# print(a)\n\n\n# 2.", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    return re.sub('[A-Z]+', '', string)\n\n\ndef test():\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\n\ntest()", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(str):\n    return re.sub('(?<=\\W)(?=[A-Z])', '', str).lower()\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    # YOUR CODE HERE\n    return s.lower()"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\nfrom typing import List\n\n\ndef extract(lst: List[List]) -> List[int]:\n    \"\"\"\n    :param lst: List of lists\n    :return: List of ints\n    \"\"\"\n    return [i[0] for i in lst]\n\n\ndef test_extract():\n    assert extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(L):\n    return [l[0] for l in L]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    return [ele[0] for ele in lst]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    \"\"\"\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    return [l[0] for l in lst]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef extract(l):\n    return [item[0] for item in l]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    return [lst[0]]*len(lst)\n\ndef Extract2(lst):\n    return [e[0] for e in lst]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\nfrom typing import Any, Iterable, List, Sequence, TypeVar, Union\n\nT = TypeVar(\"T\")\n\n\ndef extract(lst: Sequence[Iterable[T]]) -> List[T]:\n    \"\"\"Write a python function to get the first element of each sublist.\"\"\"\n    return [x[0] for x in lst]\n\n\ndef test_extract() -> None:\n    \"\"\"Test the extract function.\"\"\"\n    assert extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert extract([[1, 2], [3, 4, 5, 6]]) == [1, 3]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n\tresult = []\n\tfor element in lst:\n\t\tresult.append(element[0])\n\treturn result\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\n# Your code here\ndef upper_ctr(s):\n    upper = 0\n    for i in s:\n        if i.isupper():\n            upper += 1\n    return upper\n\n\n# ---\n\n# Question 4\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n\treturn s.count(s.upper())\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in string:\n        if i.isupper():\n            count += 1\n    return count\n\ndef main():\n    print(upper_ctr(\"PYthon\"))\n    print(upper_ctr(\"python\"))\n    print(upper_ctr(\"Hello world!\"))\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    \"\"\"Return the number of upper case letters in a string.\"\"\"\n    ctr = 0\n    for char in s:\n        if char.isupper():\n            ctr += 1\n    return ctr\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    return str.upper().count(' ')\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    count = 0\n    for letter in string:\n        if letter.isupper():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\n# write your code here\ndef upper_ctr(s):\n    count = 0\n    for i in s:\n        if i.isupper():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\nimport re\n\ndef upper_ctr(str):\n\treturn len(re.findall('[A-Z]', str))\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    counter = 0\n    for i in range(len(s)):\n        if s[i] == s[i].upper():\n            counter += 1\n    return counter", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    upper = 0\n    for i in string:\n        if i.isupper():\n            upper += 1\n    return upper\n\n\ndef test_upper_ctr():\n    assert upper_ctr('PYthon') == 1\n    assert upper_ctr('python') == 0\n\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(arr):\n    return all_combinations(arr, [])\n\n\ndef all_combinations(arr, comb):\n    if len(arr) == 0:\n        yield comb\n    else:\n        for i in range(len(arr)):\n            for cc in all_combinations(arr[i+1:], comb + [arr[i]]):\n                yield cc\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    if len(lst)==0:\n        return [[]]\n    elif len(lst)==1:\n        return [i for i in lst]\n    else:\n        l = [i for i in lst]\n        n = combinations_list(l[1:])\n        return l+[i+[l[0]] for i in n]\n\ndef combinations_set(lst):\n    if len(lst)==0:\n        return {()}\n    elif len(lst)==1:\n        return {i for i in lst}\n    else:\n        l = {i for i in lst}\n        n = combinations_set(l-{lst[0]})\n        return l|n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n    return [[]]+[l[:i]+[l[i]]+l[i+1:] for i in range(len(l))]", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n# def combinations_list(words):\n#     if len(words) == 0:\n#         return [[]]\n\n#     results = []\n#     for word in words:\n#         new_results = [word]\n#         results += [item + [word] for item in combinations_list(words.remove(word))]\n\n#     return results\n\n\ndef combinations_list(words):\n    if len(words) == 0:\n        return []\n\n    results = []\n    for word in words:\n        new_results = [word]\n        for item in combinations_list(words.remove(word)):\n            new_results += [item + [word]]\n\n    return results\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(list):\n    if not list:\n        return []\n    result = []\n    for item in list:\n        result_subset = combinations_list(list[:list.index(item)])\n        for subset in result_subset:\n            result.append(subset + [item])\n    return result\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n    return [item for sublist in combinations(l, len(l)-1) for item in sublist]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(list):\n    # write your code here\n    return [[x] for x in list] + \\\n           [[x]+y for x in list for y in combinations_list(list-[x])]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(arr):\n    return combinations_list_helper(arr, 0, [])\n\ndef combinations_list_helper(arr, start, ans):\n    if start == len(arr):\n        return [ans]\n    elif start > len(arr):\n        return []\n    else:\n        ans = ans + [arr[start]]\n        new_ans = combinations_list_helper(arr, start + 1, ans)\n        ans = ans[:-1]\n        return ans + new_ans\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(items):\n    return combinations(items, 1) + combinations(items, 2) + combinations(items, 3) + combinations(items, 4) + combinations(items, 5)\n\ndef combinations(items, k):\n    if k == 0:\n        return []\n    if k > len(items):\n        return []\n    return reduce(lambda acc, x: [a + [x] for a in acc], items, [])\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\nimport random\n\n\ndef combinations_list(input_list):\n    if not input_list:\n        return []\n    if len(input_list) == 1:\n        return [[]]\n    new_list = input_list[1:]\n    new_list_combinations = combinations_list(new_list)\n    return new_list_combinations + [[x] + y for x in input_list for y in new_list_combinations]\n\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(nums):\n    if len(nums) == 0:\n        return 0\n    product = max(nums[0], nums[-1])\n    max_prod_so_far = product\n    curr_product = product\n    for i in range(1, len(nums) - 1):\n        curr_product *= nums[i]\n        if curr_product > max_prod_so_far:\n            max_prod_so_far = curr_product\n        if curr_product < 0:\n            curr_product = nums[i]\n    return max_prod_so_far\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = 0\n    subarray = []\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            subarray.append(arr[i])\n        else:\n            subarray = []\n\n        if len(subarray) > 1:\n            product = 1\n            for j in range(len(subarray)):\n                product *= subarray[j]\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(array):\n    max_prod = array[0]\n    min_prod = array[0]\n    for i in range(1, len(array)):\n        if array[i] < 0:\n            max_prod = min(array[i], max_prod)\n        else:\n            min_prod = max(array[i], min_prod)\n        max_prod = max(min_prod * array[i], max_prod)\n    return max_prod", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n\n    result = 1\n    max_product = 1\n\n    for i in range(len(a)):\n        if a[i] < 0:\n            result = 1\n        else:\n            result *= a[i]\n\n        if result > max_product:\n            max_product = result\n\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\nimport itertools\n\n\ndef max_subarray_product(a: List[int]) -> int:\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    # Create a dictionary of subarrays and their products.\n    subarrays = {\n        # The product is 1, there is only 1 element in the array, and it is the only subarray.\n        \"\": 1,\n        # A subarray of size 1 is the product of the element.\n        \"1\": a[0],\n    }\n\n    # Loop through all subarrays of size 2 or more.\n    for i in range(1, len(a) - 1):\n        for j in range(i + 1, len(a)):\n            product = a[i] * a[j]\n            # Construct the current subarray.\n            subarray = \"\".join(map(str, list(range(i, j + 1))))\n            subarrays[subarray] = max(product, subarrays[subarray])\n\n    # Find the maximum product subarray.\n    best_subarray = None\n    best_subarray_product = -float(\"inf\")\n    for subarray in subarrays:\n        if subarrays[subarray] > best_subarray_product:\n            best_subarray = subarray\n            best_subarray_product = subarrays[subarray]\n\n    return best_subarray_product\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    max_product = 1\n    max_element = 1\n    for num in arr:\n        max_product = max(num * max_element, max_product)\n        max_element = max(num, max_element)\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    \"\"\"\n    Note: This code will fail for negative numbers!\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    max_ending_here_product = arr[0]\n    max_here_end_product = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here+arr[i])\n        max_ending_here_product = max(max_ending_here_product, max_ending_here)\n        max_here_end_product = max(max_here_end_product, arr[i]*max_ending_here)\n        max_product = max(max_product, max_here_end_product, max_ending_here_product)\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n#\n# This solution is a very naive approach,\n# and also not the most efficient one\n#\n# O(n^2) time | O(1) space\n# where n is the length of the given array\ndef max_subarray_product(nums):\n\tmax_product = nums[0]\n\tfor i in range(len(nums)):\n\t\tfor j in range(i, len(nums)):\n\t\t\tprod = 1\n\t\t\tfor k in range(i, j+1):\n\t\t\t\tprod *= nums[k]\n\t\t\tmax_product = max(max_product, prod)\n\treturn max_product\n\n\ndef max_subarray_product(nums):\n\tmax_product = nums[0]\n\tmin_product = nums[0]\n\tfor i in range(1, len(nums)):\n\t\tmax_product = max(max_product * nums[i], nums[i])\n\t\tmin_product = min(min_product * nums[i], nums[i])\n\treturn max(max_product, 0)\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(a):\n    max_product = a[0]\n    min_product = a[0]\n\n    for i in range(1, len(a)):\n        if a[i] > 0:\n            if a[i] * min_product > 0:\n                max_product = max(max_product, a[i] * min_product)\n                min_product = a[i]\n            else:\n                max_product = max(max_product, a[i])\n                min_product = max_product\n        elif a[i] < 0:\n            if a[i] * min_product < 0:\n                max_product = max(max_product, a[i] * min_product)\n                min_product = a[i]\n            else:\n                max_product = max(max_product, a[i])\n                min_product = max_product\n\n    return max_product\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dic: dict, value: object) -> bool:\n    result = 0\n    for i in dic.values():\n        if i == value:\n            result += 1\n    return result == len(dic)\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(mydict,x):\n    for i in mydict.values():\n        if i == x:\n            return True\n    return False", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,val):\n    for v in d.values():\n        if val != v:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(d,value):\n    for x in d.values():\n        if x!=value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    for keys in dictionary.values():\n        if keys!=value:\n            return False\n    return True", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(myDict, val):\n    for i in myDict.values():\n        if i != val:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,value):\n    for i in d:\n        if d[i] != value:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,v):\n    for v in d.values():\n        if d.values()!=v:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\n# write your code here\ndef check_value(dictionary, value):\n    for key in dictionary:\n        if dictionary[key] == value:\n            return True\n    return False\n\n\n# -\n\n# ## 2. <NAME> is Famous?\n#\n# <NAME> is a famous guitarist, but he is also a famous artist. His name is not always spelled <NAME>, or even <NAME>. It's also spelled <NAME>.\n#\n# Write a function that takes a string (name) and returns True if \"<NAME>\" (with or without spaces) is in the string (case insensitive).\n\n# +", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dict,value):\n\treturn all(dict.values() == value)\n\ndef check_value_2(dict,value):\n\treturn len(set(dict.values()))==1\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dic):\n    return {k: v for k,v in dic.items() if v}\n\n#assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\n# +", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dct):\n    return {key:value for key,value in dct.items() if value}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dict_):\n    \"\"\"\n    Takes in a dictionary and returns a dictionary with the empty keys removed.\n    \n    Parameters\n    ----------\n    dict_: Dictionary\n    Returns\n    -------\n    dictionary: Dictionary with empty keys removed\n    \n    \"\"\"\n    new_dict={}\n    for key, value in dict_.items():\n        if value is not None:\n            new_dict[key]=value\n    return new_dict", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return {k:v for k,v in d.items() if v is not None}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dictionary):\n  for key,value in dictionary.items():\n    if value == None:\n      del dictionary[key]\n  return dictionary\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict):\n    return {key: value for key, value in dict.items() if value}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n#----------------------------\ndef drop_empty(d):\n    return {k:v for k, v in d.items() if v}\n#----------------------------\n\n#----------------------------", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d: dict):\n    return {k: v for k, v in d.items() if v}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(my_dict):\n    \"\"\"\n    >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n    {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    for key, value in my_dict.items():\n        if value is None or value == '':\n            del my_dict[key]\n    return my_dict\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, length):\n    if length < 1:\n        return -1\n    left = 0\n    right = length-1\n    mid = (left + right) // 2\n    if mid == 0 or mid == length-1:\n        return mid\n\n    while left <= right:\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n            return mid\n        if arr[mid] < arr[mid-1]:\n            right = mid-1\n        if arr[mid] > arr[mid+1]:\n            left = mid+1\n        mid = (left + right) // 2\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(a, n):\n    if n <= 0:\n        return -1\n\n    if n == 1:\n        return 0\n\n    if a[0] > a[1]:\n        return 0\n\n    # print(\"a[0] > a[1]: \", a[0], a[1])\n    elif a[0] < a[1]:\n        return 1\n\n    l = 1\n    h = n - 1\n\n    while l < h:\n        m = (l + h) // 2\n\n        if a[m] > a[m + 1]:\n            h = m\n        elif a[m] < a[m + 1]:\n            l = m + 1\n\n    return l\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(array, n):\n    if n < 1 or n > len(array):\n        raise ValueError('n must be greater than 0 and less than length of array')\n    \n    min = array[0]\n    max = array[0]\n    peak_index = 0\n    for i in range(1, n):\n        if array[i] > max:\n            max = array[i]\n            peak_index = i\n            \n        elif array[i] < min:\n            min = array[i]\n            peak_index = i\n    \n    if min == max:\n        return -1\n    else:\n        return peak_index\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, arr_len):\n    '''\n    finds the index of the peak element in an array\n    '''\n    # we're going to start at the midpoint of the array and see if it's smaller than the value at the index before it\n    # if it is, we'll move to the previous index, otherwise we'll move to the next index\n    # this will continue until the indices don't align with each other\n    # the goal is to find the index of the peak element, which is going to be the index where we find an element \n    # that's smaller than the element at the index before it, which is going to be the max element\n\n    start_idx = arr_len // 2\n    cur_idx = start_idx\n\n    while (arr[cur_idx] > arr[cur_idx - 1]):\n        cur_idx -= 1\n\n    if cur_idx == 0 or cur_idx == arr_len - 1:\n        return arr[start_idx]\n\n    while (arr[cur_idx] > arr[cur_idx + 1]):\n        cur_idx += 1\n\n    return arr[cur_idx]\n\n\n# +\n# tests", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    \"\"\"\n    Returns the peak element of the given array\n    :param arr: input array\n    :param n: length of the input array\n    :return: peak element index\n    \"\"\"\n    return None\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nfrom typing import List\n\n\ndef find_peak(array: List[int], length: int) -> int:\n    \"\"\"\n    Space complexity: O(1)\n    Time complexity: O(n)\n    \"\"\"\n    current_max = array[0]\n    peak_index = 0\n    for i in range(1, length):\n        if current_max < array[i]:\n            current_max = array[i]\n            peak_index = i\n\n    return peak_index\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\nfrom typing import List\n\ndef find_peak(arr: List[int], n: int) -> int:\n    \"\"\"\n    Since a peak element in a sorted array must be the largest element, we can start with a for loop to iterate over the entire array\n    and compare each element with the next element to find the highest element. If the current element is larger than the next, we can\n    update the next element in the array to the current one as the new next element and keep iterating till the end of the array.\n    We update next as the current element in the loop so that we can make sure we don't miss out any elements in the comparison.\n\n    Time: O(n^2)\n    Space: O(1)\n    \"\"\"\n    next = arr[0]\n    for i in range(1, n):\n        if arr[i] > next:\n            next = arr[i]\n        elif arr[i] < next:\n            next = arr[i]\n    return next\n\ndef find_peak_optimized(arr: List[int], n: int) -> int:\n    \"\"\"\n    We can use the peak element property that the array must be sorted, to narrow down the possible elements that might be the\n    peak element. To do that, we can start from the first element and check if the current element is larger than both the previous\n    and the next elements. If so, then we can mark it as the peak element.\n    This approach would run in O(n) since we are checking only 3 elements at each iteration.\n\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    peak = arr[0]\n    if len(arr) == 1:\n        return peak\n\n    if arr[0] > arr[1]:\n        peak = arr[0]\n    elif arr[0] > arr[n-1]:\n        peak = arr[n-1]\n    elif arr[n-1] > arr[0]:\n        peak = arr[n-1]\n\n    return peak\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr: list, n: int):\n    def _find_peak(arr, left, right):\n        if left == right:\n            return left\n\n        mid = (left + right) // 2\n\n        if arr[mid] > arr[mid+1]:\n            return _find_peak(arr, left, mid)\n        else:\n            return _find_peak(arr, mid+1, right)\n\n    return _find_peak(arr, 0, n-1)\n\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(dec_number):\n  octal_number = ''\n  while dec_number != 0:\n    octal_number = str(dec_number % 8) + octal_number\n    dec_number = dec_number // 8\n  return octal_number\n\n# Tests", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(number):\n    octal = 0\n    count = 1\n    while number > 0:\n        octal += number % 8 * count\n        number = number // 8\n        count *= 10\n    return octal\n\n#Tests", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(number):\n  octal_number = 0\n  while number != 0:\n    octal_number = octal_number * 10 + number % 8\n    number //= 8\n  return octal_number\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimal_num):\n    pass\n\n# Tests\n\ndef test_decimal_to_Octal():\n    assert decimal_to_Octal(10) == 12\n\n\n# -\n\n# ## 6. Decimal to Binary\n#\n# Write a python function to convert decimal number to binary number.\n#\n# ```python\n# assert decimal_to_binary(10) == '1010'\n# ```\n\n# +\n# Write your function here\ndef decimal_to_binary(decimal_num):\n    pass\n\n# Tests\n\ndef test_decimal_to_binary():\n    assert decimal_to_binary(10) == '1010'\n\n\n# -\n\n# ## 7. Binary to Decimal\n#\n# Write a python function to convert binary number to decimal number.\n#\n# ```python\n# assert binary_to_decimal('1010') == 10\n# ```\n\n# +\n# Write your function here\ndef binary_to_decimal(binary_num):\n    pass\n\n# Tests\n\ndef test_binary_to_decimal():\n    assert binary_to_decimal('1010') == 10\n\n\n# -\n\n# ## 8. Binary Addition\n#\n# Write a python function to add binary numbers.\n#\n# ```python\n# assert binary_add('1001', '1010') == '1011'\n# ```\n\n# +\n# Write your function here\ndef binary_add(b1, b2):\n    pass\n\n# Tests\n\ndef test_binary_add():\n    assert binary_add('1001', '1010') == '1011'\n\n\n# -\n\n# ## 9. Binary Subtraction\n#\n# Write a python function to subtract binary numbers.\n#\n# ```python\n# assert binary_sub('1001', '1010') == '-11'\n# ```\n\n# +\n# Write your function here\ndef binary_sub(b1, b2):", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    result = []\n    while num > 0:\n        rem = num % 8\n        num = num // 8\n        result.append(rem)\n    result.reverse()\n    return int(\"\".join(map(str, result)))\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    temp = ''\n    if n == 0:\n        return '0'\n    while n:\n        temp = str(n%8) + temp\n        n //= 8\n    return temp\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    '''\n    Takes a decimal number as an input and returns its equivalent octal number\n    '''\n    if num < 0:\n        raise ValueError(\"Negative numbers are not allowed\")\n    elif num == 0:\n        return 0\n    else:\n        temp = ''\n        while num != 0:\n            digit = num % 8\n            temp = str(digit) + temp\n            num = int(num / 8)\n\n        return temp\n\ndef test_decimal_to_Octal():\n    assert decimal_to_Octal(10) == 12\n    assert decimal_to_Octal(11) == 13\n    assert decimal_to_Octal(7) == 11\n    assert decimal_to_Octal(100) == 44\n    assert decimal_to_Octal(101) == 45\n    assert decimal_to_Octal(-1) == \"Negative numbers are not allowed\"\n    assert decimal_to_Octal(0) == 0\n\ntest_decimal_to_Octal()\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimalNumber):\n\t# your code goes here\n\t# return None\n\tresult = 0\n\twhile(decimalNumber != 0):\n\t\treminder = decimalNumber % 8\n\t\tresult = reminder + result * 10\n\t\tdecimalNumber = int(decimalNumber / 8)\n\treturn result\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimalNumber):\n    octalNumber = 0\n    while decimalNumber > 0:\n        remainder = decimalNumber % 8\n        octalNumber = octalNumber*10 + remainder\n        decimalNumber = decimalNumber//8\n    return octalNumber\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    pass\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\nfrom itertools import product\nfrom typing import List\n\n\ndef max_product(arr: List[int], n: int) -> int:\n    \"\"\"\n    This is O(n!) time.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Invalid length\")\n    if n == 0:\n        raise ValueError(\"Invalid length\")\n    return max(product(*arr[:n]))\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\nfrom typing import List\nimport bisect\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(nums, k):\n    min_sub_arr = nums[:k]\n    max_sub_arr = nums[:k]\n    max_product = nums[k-1] * nums[k] * nums[k+1]\n    \n    for i in range(k-1, len(nums)-1):\n        min_sub_arr.append(max(min_sub_arr[-1], nums[i]))\n        max_sub_arr.append(min(max_sub_arr[-1], nums[i]))\n        \n        max_product = max(max_product, (max_sub_arr[-1] * max_sub_arr[-2] * max_sub_arr[-3]) * (min_sub_arr[-1] * min_sub_arr[-2] * min_sub_arr[-3]))\n        \n    return max_product\n        ", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\n# def max_product(arr, n):\n#     if n == 0:\n#         return 0\n#     if n == 1:\n#         return arr[0]\n#     elif n == 2:\n#         return max(arr[0], arr[1])\n#     else:\n#         result = -999999999\n#         for i in range(n):\n#             for j in range(n):\n#                 if i != j:\n#                     result = max(result, arr[i]*arr[j])\n#         return result\n    \n# def max_product(arr, n):\n#     max_prod = 0\n#     for i in range(n):\n#         max_prod = max(max_prod, arr[i]*arr[i+1])\n#         max_prod = max(max_prod, arr[i]*arr[i+2])\n#     return max_prod\n\n\n# def max_product(arr, n):\n#     max_prod = -999999999\n#     for i in range(len(arr)-3):\n#         prod = arr[i]*arr[i+1]*arr[i+2]\n#         max_prod = max(max_prod, prod)\n#     return max_prod\n\n\ndef max_product(arr, n):\n    max_prod = -999999999\n    for i in range(n-2):\n        prod = arr[i]*arr[i+1]*arr[i+2]\n        max_prod = max(max_prod, prod)\n    return max_prod\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    max_prod = 1\n    for i in range(n):\n        curr_max = 1\n        for j in range(i,n):\n            curr_max *= arr[j]\n            if curr_max > max_prod:\n                max_prod = curr_max\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n\n    if n < 2:\n        return max(arr)\n\n    product = 1\n    # We create a variable that will be the index for our new array\n    # In this new array, we will have a new index, a new maximum and a new minimum value\n    max_prod, max_index, min_prod, min_index = 0, 0, 1, 0\n\n    # This is a loop to check if the new array has all the product combinations\n    for i in range(n):\n        # To check the new maximum value, we take the product of the previous maximum value and the new element\n        # and we store this value in the max_prod variable\n        max_prod = max_prod * arr[i]\n        # We store the index of the previous maximum value in max_index\n        max_index = i\n\n        # To check the new minimum value, we take the product of the previous minimum value and the new element\n        # and we store this value in the min_prod variable\n        min_prod = min_prod * arr[i]\n        # We store the index of the previous minimum value in min_index\n        min_index = i\n\n        # To check if there is any difference between max_prod and min_prod, we compare them and if there is a difference\n        # we add it to the new maximum value of the new array\n        if max_prod < min_prod:\n            max_prod = min_prod\n\n        # This is a loop to check if the new array has all the product combinations\n        for j in range(i + 1, n):\n            # To check the new maximum value, we take the product of the previous maximum value and the new element\n            # and we store this value in the max_prod variable\n            max_prod = max_prod * arr[j]\n            # We store the index of the previous maximum value in max_index\n            max_index = j\n\n            # To check the new minimum value, we take the product of the previous minimum value and the new element\n            # and we store this value in the min_", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return max(nums)\n    n = len(nums)\n    # do we need to do pre-processing?\n    # [10, 12, 1000, 5, 1, 1]\n    # ans = [3000, 12, 500, 5, 1, 1]\n    # or just do it in-place?\n    # O(n)\n    # O(1)\n    # better way?\n    # O(1)\n    max_product = nums[0]\n    for i in range(1, k):\n        max_product *= nums[i]\n\n    ans = max_product\n    for i in range(k, n):\n        tmp = max_product\n        max_product = max(max_product * nums[i], nums[i])\n        ans = max(ans, max_product)\n\n    return ans\n\n\ndef max_product_opt(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    max_product = nums[0]\n    ans = max_product\n    for i in range(k, n):\n        tmp = max_product\n        max_product = max(max_product * nums[i], nums[i])\n        ans = max(ans, max_product)\n    return ans\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    l = len(arr)\n    if l == 1:\n        return arr[0]\n    # Subarray with largest product\n    msp = [0]*l\n    msp[0] = arr[0]\n\n    for i in range(1,l):\n        msp[i] = max(arr[i], msp[i-1]*arr[i])\n    mp = msp[l-1]\n\n    # Subarray with second largest product\n    msp[0] = arr[0]\n    for i in range(1,l):\n        msp[i] = max(arr[i], msp[i-1]*arr[i])\n    msp.reverse()\n    msp.append(arr[-1])\n\n    return max(mp, max(msp))\n\n\n# +", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(array, n):\n\tmax_so_far = array[0]\n\tmax_ending_here = array[0]\n\tfor i in range(1, n):\n\t\tmax_ending_here = max(array[i], max_ending_here * array[i])\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\treturn max_so_far\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(nums, n):\n    '''\n    :type nums: List[int]\n    :type n: int\n    :rtype: int\n    '''\n    if len(nums) < n or n < 1:\n        return 0\n    # max product for last n numbers\n    max_n = max(nums[-n:])\n    min_n = min(nums[-n:])\n    # max product for last n-1 numbers\n    max_n1 = max(nums[-n-1:-1])\n    min_n1 = min(nums[-n-1:-1])\n    # max product for last n-2 numbers\n    max_n2 = max(nums[-n-2:-2])\n    min_n2 = min(nums[-n-2:-2])\n    \n    return max(max_n * max_n1 * max_n2, max_n * min_n1 * min_n2, min_n * max_n1 * max_n2, min_n * min_n1 * max_n2)\n\ndef max_product_v2(nums, n):\n    '''\n    :type nums: List[int]\n    :type n: int\n    :rtype: int\n    '''\n    if len(nums) < n or n < 1:\n        return 0\n    max_n = max(nums[-n:])\n    min_n = min(nums[-n:])\n    max_n1 = max(nums[-n-1:-1])\n    min_n1 = min(nums[-n-1:-1])\n    max_n2 = max(nums[-n-2:-2])\n    min_n2 = min(nums[-n-2:-2])\n\n    res = max(max_n * max_n1 * max_n2, max_n * min_n1 * min_n2, min_n * max_n1 * max_n2, min_n * min_n1 * max_n2)\n    if n == 2:\n        return res\n    # max product for last n-"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nfrom typing import List\n\n\ndef max_profit(prices: List[int], k: int) -> int:\n    profit = 0\n    min_price = prices[0]\n    stack = []\n    for i in range(k):\n        min_price = min(min_price, prices[i])\n        profit += prices[i] - min_price\n\n    for i in range(k, len(prices)):\n        min_price = min(min_price, prices[i])\n        while stack and prices[stack[-1]] < min_price:\n            profit += min_price - prices[stack.pop()]\n        min_price = prices[i]\n        stack.append(i)\n\n    return profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\n# Time: O(n * k)\n# Space: O(k)\n\ndef max_profit(prices, k):\n    if k == 0:\n        return 0\n\n    min_prices = []\n    max_profit = 0\n\n    for price in prices:\n        if len(min_prices) == k:\n            if price > min_prices[0]:\n                max_profit = max(max_profit, price - min_prices[0])\n            min_prices.pop(0)\n\n        if len(min_prices) < k:\n            min_prices.append(price)\n\n    return max_profit\n\n# Time: O(n * k)\n# Space: O(k)\ndef max_profit_opt(prices, k):\n    if k == 0:\n        return 0\n\n    min_prices = []\n    max_profit = 0\n\n    for i in range(len(prices) - 1, -1, -1):\n        price = prices[i]\n        if len(min_prices) == k:\n            if price > min_prices[0]:\n                max_profit = max(max_profit, price - min_prices[0])\n            min_prices.pop(0)\n\n        if len(min_prices) < k:\n            min_prices.append(price)\n\n    return max_profit\n\n\ndef max_profit_dp(prices, k):\n    if k == 0:\n        return 0\n\n    max_profit = 0\n    n = len(prices)\n    for i in range(1, k + 1):\n        min_price = prices[0]\n        for j in range(1, n):\n            min_price = min(min_price, prices[j])\n            max_profit = max(max_profit, prices[j] - min_price)\n\n    return max_profit\n\n\ndef max_profit_dp_2(prices, k):\n    if k == 0:\n        return 0\n\n    n = len(prices)\n    dp = [0 for _ in range(n)]\n    max_profit = 0\n    for", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    prices.sort()\n    max_profit = 0\n    for i in range(k):\n        max_profit += prices[i+1] - prices[i]\n    return max_profit\n\ndef test_max_profit():\n    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    '''\n    prices: list of stock prices\n    k: max # of transactions\n\n    returns: max profit made\n    '''\n    return max_profit_memo(prices, k)\n\ndef max_profit_memo(prices, k, m = {}):\n    if len(prices) == 0 or k == 0:\n        return 0\n    if k in m:\n        return m[k]\n    if len(prices) == 1:\n        return prices[0]\n    m[k] = max(0, prices[0] - prices[-1] + max_profit_memo(prices[1:], k - 1, m))\n    return m[k]\n\n\ndef max_profit_dynamic(prices, k):\n    '''\n    prices: list of stock prices\n    k: max # of transactions\n\n    returns: max profit made\n    '''\n    if len(prices) == 0 or k == 0:\n        return 0\n    max_profit = 0\n    i = 1\n    while i < min(len(prices), k+1):\n        max_profit = max(max_profit, prices[i] - prices[0] + max_profit_dynamic(prices[1:], k - 1))\n        i += 1\n    return max_profit\n\n# test", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    profit = 0\n    if len(prices) < k:\n        return 0\n    if k <= 0:\n        return 0\n    for i in range(k, len(prices)):\n        profit += max(0, prices[i] - prices[i-k])\n    return profit\n\ndef test_max_profit():\n    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if k <= 0:\n        return 0\n    maximum = float('-inf')\n    # iterate over the prices and the transactions\n    for i in range(len(prices)):\n        for j in range(k):\n            if i + 1 - j >= 0:\n                profit = prices[i + 1 - j] - prices[i]\n                if profit > maximum:\n                    maximum = profit\n    return maximum\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nimport unittest\n\ndef max_profit(prices, k):\n    profits = []\n    if k <= 0:\n        return 0\n    for i in range(len(prices) - k + 1):\n        profits.append(max(prices[i + 1] - prices[i], 0))\n    return max(profits)\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nfrom collections import Counter\nfrom operator import itemgetter\nfrom itertools import accumulate\nfrom typing import List, Optional\nfrom functools import reduce\n\n\ndef max_profit(prices: List[int], k: int) -> int:\n    \"\"\"\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n    10\n    \"\"\"\n    if k < 2:\n        return 0\n    # try to find the best buy position for each transaction\n    if k == 2:\n        # best_buy = [0,0]\n        best_buy = []\n        for price in prices:\n            if best_buy[-1] is not None:\n                if best_buy[-1] < price:\n                    best_buy.append(price)\n                else:\n                    best_buy.append(None)\n            else:\n                best_buy.append(price)\n        best_buy_index = best_buy.index(None)\n        return best_buy[best_buy_index-1] - best_buy[best_buy_index]\n    best_buy = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # best_buy = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for i, price in enumerate(prices):\n        # find the best buy position for each transaction\n        if i < k:\n            best_buy[i] = price\n        else:\n            if best_buy[i-k] is not None:\n                if best_buy[i-k] < price:\n                    best_buy[i] = price\n                else:\n                    best_buy[i] = best_buy[i-k]\n            else:\n                best_buy[i] = price\n    best_buy_index = best_buy.index(max(best_buy[k:]))\n    return best_buy[best_buy_index+k] - best_buy[", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nimport sys\n\ndef max_profit(prices, k):\n    if not prices:\n        return 0\n\n    stock_profit = 0\n    stock_prices = []\n\n    for i in range(len(prices) - k + 1):\n        for j in range(k):\n            stock_prices.append(prices[i + j])\n            stock_profit = max(stock_profit, stock_prices[-1] - stock_prices[0])\n\n    return stock_profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    pass\n\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(t):\n    s = 0\n    for i in range(len(t)):\n        if i != 0:\n            s += t[i]\n        yield s\n\n\ndef test_add_pairwise():\n    assert list(add_pairwise((1, 5, 7, 8, 10))) == [6, 12, 15, 18]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple):\n\t'''\n\ttuple: tuple of integer\n\treturn: tuple of integer\n\t'''\n\treturn tuple[1:] + tuple[:1]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(t):\n    # your code here\n    return (t[0]+t[1],t[1]+t[2],t[2]+t[3],t[3]+t[4])\n\n# tests", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers[i:i+2] for i in range(len(numbers)-1))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_of_numbers):\n    \"\"\"\n    Returns the pairwise sum of tuple_of_numbers\n    \"\"\"\n    return tuple(map(lambda x: x[0] + x[1], zip(tuple_of_numbers, tuple_of_numbers[1:])))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(nums):\n    # Write your code here\n    result = []\n    for i in range(0, len(nums)-1):\n        result.append(nums[i] + nums[i+1])\n    return result\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(numbers):\n    return tuple(zip(*(map(add, zip(*(numbers[i:i+2])) for i in range(0, len(numbers), 2)))))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple):\n    #your code here\n    pass\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(t):\n    return tuple(map(lambda x: x[0] + x[1], zip(t, t[1:])))\n\ndef test_add_pairwise():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\ndef add_pairwise2(t):\n    return tuple(map(sum, zip(t, t[1:])))\n\ndef test_add_pairwise2():\n    assert add_pairwise2((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(t):\n    \"\"\"Takes in a tuple of integers and returns a new tuple of integers\n    that contains the result of the pairwise addition of the elements of the tuple.\n    \"\"\"\n    length = len(t)\n    for i in range(length-1):\n        t[i] = t[i] + t[i+1]\n    return t\n\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,k):\n    res = sum(np.multiply(arr,arr))%n\n    if res == 0:\n        return -1\n    else:\n        return res\n        \narr = [100, 10, 5, 25, 35, 14]\nn = 6\nk = 11\n\nfind_remainder(arr,n,k)\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,m):\n    return (sum(a*b for a,b in zip(arr,range(1,n+1))) % m)\n\n\narr = [ 100, 10, 5, 25, 35, 14 ]", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n#Input\narr = [100,10,5,25,35,14]\nn = 6\nd = 11\n\ndef find_remainder(arr,n,d):\n    remainder = 0\n    for i in range(len(arr)):\n        remainder = remainder*d + arr[i]\n        remainder %= n\n    return remainder\n\n#Testing", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,d):\n    remainder = d%n\n    for i in range(len(arr)):\n        if (arr[i]*remainder)%n==0:\n            return remainder\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(array, n, divisor):\n    if n == 0:\n        return 0\n    remainder = 0\n    for number in array:\n        remainder += (number*divisor) % n\n    return remainder % n\n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,sum):\n    result=0\n    for i in arr:\n        result=result*i\n    print(\"result\",result)\n    result=result%n\n    print(\"result\",result)\n    if result==sum:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(array,n,x):\n    total=0\n    for i in array:\n        total=total*i\n    total=total%x\n    return total\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    # write your code here\n    return (sum(a*m%n for a in arr))%n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, k):\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i] * arr[j] > k:\n            j -= 1\n        elif arr[i] * arr[j] < k:\n            i += 1\n        else:\n            return k - (arr[i] * arr[j])\n    return 0\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, k):\n    arr = sorted(arr)\n    if arr[0] % n == 0:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i] % n == 0:\n            if i+k == len(arr):\n                return i\n            elif arr[i+k] % n != 0:\n                return i\n            else:\n                return i+k\n        else:\n            if i+1 == len(arr):\n                return -1\n            elif arr[i+1] % n == 0:\n                return -1\n            else:\n                continue\n    return -1\n\narr = [ 100, 10, 5, 25, 35, 14 ]\nn = 6\nk = 11"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    return max(lst)-min(lst)==lst[1]-lst[0]\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(l):\n    try:\n        for i in range(len(l)-1):\n            if l[i]+1 != l[i+1]:\n                return False\n        return True\n    except:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i]+1 != lst[i+1]:\n            return False\n    return True\n\n# O(n)\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    if lst == sorted(lst):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(my_list):\n    # write your code here\n    i = 1\n    while i < len(my_list):\n        if my_list[i] - my_list[i-1] == 1:\n            i+=1\n        else:\n            return False\n    return True\n\n#print(check_Consecutive([1,2,3,4,5]))\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n# Answer:\ndef check_Consecutive(a):\n    a = sorted(a)\n    length = len(a)\n    for i in range(length - 1):\n        if a[i] == a[i + 1]:\n            return False\n    return True\n\n# Testing:", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(arr):\n    flag = False\n    for i in range(len(arr)-1):\n        if arr[i]+1 == arr[i+1]:\n            flag = True\n        else:\n            flag = False\n            break\n    return flag\n\n\n#test\n#assert check_Consecutive([1,2,3,4,5]) == True\n#assert check_Consecutive([1,2,5,4,3]) == False\n#assert check_Consecutive([1,2,3,4,2]) == False\n#assert check_Consecutive([1,1,2,3,4,5,6,7,8,9]) == True\n#assert check_Consecutive([]) == False\n#assert check_Consecutive([1,1,1,1]) == True\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]-1:\n            continue\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i]+1 == lst[i+1]:\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nums):\n    # Function to check if the given list contains consecutive numbers or not\n    nums = list(set(nums))\n    nums.sort()\n    if nums[0] == 1:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list_1, tuple_list_2):\n    '''\n    :param tuple_list_1: list of tuples\n    :param tuple_list_2: list of tuples\n    :return: list of tuple intersection\n    '''\n\n    intersection = set(tuple_list_1) & set(tuple_list_2)\n    return list(intersection)\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tuple_list1, tuple_list2):\n    result = set()\n    for item in tuple_list1:\n        if item in tuple_list2:\n            result.add(item)\n\n    return result\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(a_tuple_list, b_tuple_list):\n    a_set = set(a_tuple_list)\n    b_set = set(b_tuple_list)\n    return a_set.intersection(b_set)\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    returns tuple_list1 intersection tuple_list2\n    \"\"\"\n    tuple_intersection = set()\n    for i in tuple_list1:\n        if i in tuple_list2:\n            tuple_intersection.add(i)\n    return tuple_intersection\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\nfrom typing import List\n\n\ndef tuple_intersection(tuple_list1: List[tuple], tuple_list2: List[tuple]) -> List[tuple]:\n    return set(tuple_list1).intersection(set(tuple_list2))\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\nfrom typing import List, Dict, Tuple\n\n\ndef tuple_intersection(tuple_list_1: List[Tuple], tuple_list_2: List[Tuple]) -> List[Tuple]:\n    \"\"\"\n    Args:\n        tuple_list_1: List of Tuple\n        tuple_list_2: List of Tuple\n\n    Returns:\n        List of Tuple\n    \"\"\"\n\n    return set(tuple_list_1).intersection(set(tuple_list_2))\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(*args):\n    return set(args[0]).intersection(*args[1:])\n\ndef find_tuple_intersection(tuple_list):\n    # your code here\n    return tuple_intersection(*tuple_list)\n\ntest_tuple_intersection = [(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]\ntest_tuple_intersection_2 = [(1, 2), (2, 4), (2, 6), (1, 1)]\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(*tuples):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    new_set = set()\n    for x in tuples:\n        for y in x:\n            new_set.add(y)\n    return new_set\n\n# Test cases\ntest_tuples = [\n    [(3, 4), (5, 6), (9, 10), (4, 5)],\n    [(5, 4), (3, 4), (6, 5), (9, 11)],\n    [(3, 4), (5, 6), (7, 8), (4, 5), (9, 10), (6, 7)]\n]\n\nfor t in test_tuples:\n    assert tuple_intersection(*t) == {(4, 5), (3, 4), (5, 6)}\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(*tuples):\n    result = set()\n    for each_tuple in tuples:\n        for number in each_tuple:\n            result.add(number)\n    return result\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, char1, char2):\n    \"\"\"\n    returns a string with the character char1 replaced by char2\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char == char1:\n            new_string += char2\n        else:\n            new_string += char\n    return new_string\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,old,new):\n    i=0\n    while i<len(string):\n        if string[i]==old:\n            string=string[:i]+new+string[i+1:]\n        i+=1\n    return string\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,old,new):\n    for i in range(len(string)):\n        if string[i]==old:\n            string[i]=new\n    return string\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str, old, new):\n    return str.replace(old, new)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n# MY SOLUTION\ndef replace_char(s, char1, char2):\n  new_str = \"\"\n  for char in s:\n    if char == char1:\n      new_str += char2\n    else:\n      new_str += char\n  return new_str\n\n# TEST DRIVE", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(text,char, new):\n\t\"\"\"\n\tFunction that replaces the first character in a string by another character.\n\t:param text: a string to modify\n\t:param char: a character to replace\n\t:param new: the new character to replace with\n\t:return: the modified string\n\t\"\"\"\n\tnew_string = \"\"\n\tfor i in text:\n\t\tif i == char:\n\t\t\tnew_string += new\n\t\telse:\n\t\t\tnew_string += i\n\treturn new_string\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, old, new):\n    \"\"\"\n    Replaces all instances of 'old' in string with 'new'.\n    \"\"\"\n    return string.replace(old, new)\n\ndef replace_char2(string, old, new):\n    \"\"\"\n    Replaces all instances of 'old' in string with 'new'.\n    \"\"\"\n    while old in string:\n        string = string.replace(old, new)\n    return string\n\ndef replace_char3(string, old, new):\n    \"\"\"\n    Replaces all instances of 'old' in string with 'new'.\n    \"\"\"\n    string = string.replace(old, new)\n    return string\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(text,old,new):\n    return text.replace(old,new)\n\n# # solution\n# def replace_char(text,old,new):\n#     return text.replace(old,new)\n\n\n# # test cases\n# assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n# assert replace_char(\"interview\",\"v\",\"b\")==(\"inbterview\")\n\n\n# ## Problem 7\n# ### Reverse a string\n# \"Write a function to reverse a string\"\n\n# ## solution\n# def reverse(text):\n#     return text[::-1]\n\n# ## test cases\n# assert reverse(\"abracadabra\")==(\"arbadacarba\")\n# assert reverse(\"mom\")==(\"mom\")\n# assert reverse(\"\")==\"*\"\n\n# ## Problem 8\n# ### Reverse words in a string\n# Write a function that takes in a string and returns a new string with the words reversed.\n#\n# \"Write a function that takes in a string and returns a new string with the words reversed.\"\n\n# ## solution\n# def reverse_words(text):\n#     text = text.split(\" \")\n#     return \" \".join(text[::-1])\n\n# ## test cases\n# assert reverse_words(\"words are fun\")==(\"fun are words\")\n# assert reverse_words(\"mommy\")==(\"mommy\")\n# assert reverse_words(\"\")==\"*\"\n\n# ## Problem 9\n# ### Remove leading and trailing whitespace\n# Write a function that removes the leading and trailing whitespace from a string.\n#\n# \"Write a function that removes the leading and trailing whitespace from a string.\"\n\n# ## solution\n# def no_space(text):\n#     return text.strip()\n\n# ## test cases\n# assert no_space(\" hello world \")==(\"hello world\")\n# assert no_space(\"  \")==\"*\"\n# assert no_space(\"  hello world\")==\"hello world\"\n\n\n# ## Problem 10\n# ### Remove all punctuation from a string\n# Write a function to remove all punctuation from a string", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(word, to_replace, replace_with):\n    return word.replace(to_replace, replace_with)", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(s,old,new):\n    # write code here\n    return s.replace(old,new)\n\ndef test_replace_char():\n    assert replace_char(\"polygon\",\"y\",\"l\")==\"pollgon\"\n\n# Write a function that finds the first vowel of a word.\n# If a vowel is not found, return \"no vowel\"."], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\nfrom collections import Counter\n\ndef sort_counter(my_counter):\n    return list(sorted(my_counter.items(), key=lambda x:x[1], reverse=True))\n\nmy_counter = Counter({'Math':81, 'Physics':83, 'Chemistry':87})\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nfrom collections import Counter\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    counter_list=sorted(counter.items(), key=lambda x:x[1], reverse=True)\n    return counter_list\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    sorted_pairs = sorted(counter.items(), key=lambda x:x[1], reverse=True)\n    return sorted_pairs\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(d):\n    d_sorted = sorted(d.items(), key=lambda item: item[1])\n    return d_sorted\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return list(sorted(counter.items(), key=lambda item: item[1]))\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n  return sorted(counter.items(), key=lambda x:x[1])\n\n#---------------------------------------------\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    result = sorted(counter.items(), key=lambda tup: tup[1], reverse=True)\n    return result\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    counter = sorted(counter.items(), key=lambda x: x[1])\n    return counter\n\n# Write a function to solve this equation.\ndef solve_quadratic(a,b,c):\n    \"\"\"\n    return the roots of the equation\n    \"\"\"\n    return [ (-b + (b**2-4*a*c)**0.5)/(2*a) , (-b - (b**2-4*a*c)**0.5)/(2*a) ]\n\n# Write a function to find the n-th digit of pi.\ndef n_th_digit_of_pi(n):\n    i = 0\n    while len(str(pi))<n:\n        pi += pi\n    return int(pi[-n])\n\n# Write a function to get the number of digits in a number.\ndef get_number_of_digits(number):\n    return len(str(number))\n\n# Write a function to find the number of 1-in-n-bit numbers.\ndef count_of_1inN_bit(n, digit):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return digit\n    else:\n        return count_of_1inN_bit(n-1, digit)+digit\n\n\n# Write a function to find the nth term of the following sequence:\n# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, ...\ndef nth_term_of_sequence(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return nth_term_of_sequence(n-1) + nth_term_", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(d):\n    sorted_d = []\n    for key, value in d.items():\n        sorted_d.append((key, value))\n    sorted_d.sort(key=lambda x:x[1], reverse=True)\n    return sorted_d\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n# Solution\n\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n\n\n# Solution 2\n\n\ndef big_sum(arr):\n    return sum(sorted(arr)[-2:])\n\n# Solution 3\n\n\ndef big_sum(arr):\n    return sum(max(arr), min(arr))\n\n# Solution 4\n\n\ndef big_sum(arr):\n    return max(arr) - min(arr)\n\n# Solution 5\n\n\ndef big_sum(arr):\n    return sum(max(arr), min(arr))\n\n# Solution 6\n\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n\n# Solution 7\n\n\ndef big_sum(arr):\n    return sum(sorted(arr)[-2:])\n\n# Solution 8\n\n\ndef big_sum(arr):\n    return sum(max(arr), min(arr))\n\n# Solution 9\n\n\ndef big_sum(arr):\n    return max(arr) - min(arr)\n\n\n# Test cases\n\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(nums):\n    biggest=0\n    smallest=99999\n    for i in nums:\n        if i>biggest:\n            biggest=i\n        if i<smallest:\n            smallest=i\n    return biggest+smallest\n\n\n# Write a function to convert a list of strings to a list of integers.", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(numbers):\n    return max(numbers) + min(numbers)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(numbers):\n    \"\"\"Returns the sum of the largest and smallest value in a given array.\"\"\"\n    minimum_value = min(numbers)\n    maximum_value = max(numbers)\n    return maximum_value + minimum_value\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    sorted_arr = sorted(arr)\n    return sorted_arr[-1] + sorted_arr[0]", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(array):\n    array.sort()\n    return (array[0] + array[-1])\n\nbig_sum([1,2,3])", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n  result = 0\n  for i in range(len(arr)):\n    result = result + arr[i]\n\n  return result\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    arr.sort()\n    return arr[0]+arr[-1]\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(lst):\n    min_val = lst[0]\n    max_val = lst[0]\n    for num in lst[1:]:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val + min_val\n\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower() == s\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str):\n    result = ''\n    for i in str:\n        if i.islower():\n            result += i\n    return result\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str):\n    return str.lower()\n\n\n# +\ndef remove_punc(str):\n    \"\"\"\n    Write a function to remove the punctuations from the given string\n    assert remove_punc(\"PhD PhD,PhD\") == \"PhD PhD,PhD\"\n    \"\"\"\n    return \"\".join([i for i in str if not i.isalpha()])\n\ndef get_tokens(str):\n    \"\"\"\n    Write a function to extract the tokens from a sentence\n    assert get_tokens(\"InValid\") == [\"In\", \"Valid\"]\n    \"\"\"\n    return str.split()\n\ndef get_unique_tokens(str):\n    \"\"\"\n    Write a function to get the unique tokens from a sentence\n    assert get_unique_tokens(\"InValid, invalid\") == [\"In\", \"Valid\", \"invalid\"]\n    \"\"\"\n    return list(set(get_tokens(str)))\n\ndef get_length(str):\n    \"\"\"\n    Write a function to get the length of a sentence\n    assert get_length(\"InValid\") == 5\n    \"\"\"\n    return len(str)\n\ndef get_percentage(word_count, total_words):\n    \"\"\"\n    Write a function to get the percentage of occurrence of a word in a sentence\n    assert get_percentage(2, 5) == 0.4\n    \"\"\"\n    return word_count / total_words\n\ndef get_percentage_unique(unique_word_count, total_unique_words):\n    \"\"\"\n    Write a function to get the percentage of occurrence of a unique word in a sentence\n    assert get_percentage_unique(2, 5) == 0.4\n    \"\"\"\n    return unique_word_count / total_unique_words\n\ndef get_num_vowels(str):\n    \"\"\"\n    Write a function to get the number of vowels in a sentence\n    assert get_num_vowels(\"InValid\") == 2\n    \"\"\"\n    return sum(list(map(str.lower().count, 'aeiou')))\n\ndef get_num_chars(str):\n    \"\"\"\n    Write a function to get the number of characters in a sentence\n    assert get_num_chars(\"InValid\") == 7\n    \"\"\"\n    return len", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s: str):\n    return s.lower()\n\n# is_lower(\"InValid\")\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s: str) -> str:\n    if s == s.lower():\n        return s.lower()\n    else:\n        return s.upper()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str_):\n    return str_.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    result = []\n    for i in range(len(string)):\n        if string[i].isupper():\n            result.append(string[i])\n    return ''.join(result)\n\n\n# +", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(str):\n    l = []\n    for i in range(len(str)):\n        if str[i] >= 'A' and str[i] <= 'Z':\n            l.append(str[i])\n    return ''.join(l)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(word):\n    return \"\".join(filter(lambda x: x.isupper(), word))", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    return s.replace(s.lower(), '')\n\ndef remove_lowercase_2(s):\n    return s.lower().replace(s.lower(), '')\n\ndef remove_lowercase_3(s):\n    return s.replace(s.lower(), '').upper()\n\ndef remove_lowercase_4(s):\n    return ''.join([c for c in s if c.isupper()])\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    # Remove lowercase characters from string\n    lowercase_string = ''.join([char for char in string.lower() if char.isupper()])\n    # Return the string without lowercase characters\n    return lowercase_string\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(str):\n    if type(str) is not str:\n        raise Exception(\"str must be a string\")\n    index = 0\n    while index < len(str):\n        if str[index].islower():\n            str = str[:index] + str[index+1:]\n        else:\n            index += 1\n    return str\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    \"\"\"\n    input: string\n    output: string\n    \"\"\"\n    string = string.lower()\n    return string.replace(\"o\", \"\")\n    ", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    for i in range(len(string)):\n        if string[i].islower():\n            string = string[0:i]+string[i+1:]\n            i = i-1\n    return string\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(str):\n    # code goes here\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    digits = str(number)\n    return int(digits[0])\n\ndef test_first_Digit():\n    assert first_Digit(123) == 1\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(x):\n    x = int(x)\n    return x // 100\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    if n<0:\n        return \"This function only accepts non-negative numbers\"\n    else:\n        return str(n)[0]\n\n\n# test", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n# Let's write a function to find the first digit of a number.\n# \n# If you write a function like this, it will only work for numbers with a single digit.\n\ndef first_Digit(number):\n    return number // 10\n\n# Unfortunately, you can't use this function to find the first digit of the number 123.\n# \n# The reason is that if the number is 123, then `number // 10` will be 123 / 10 = 12.\n# \n# To avoid this problem, we'll need to use the `math.floor` function:\n\nimport math\n\ndef first_Digit(number):\n    return math.floor(number / 10)\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_digit(number):\n    return int(number / 10000000000000000000)\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return int(str(num)[0])\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    \"\"\"\n    input: A number\n    output: The first digit of the given number\n    \"\"\"\n    if type(num) != int:\n        return None\n    return int(str(num)[0])", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    \"\"\"\n    >>> first_Digit(123)\n    1\n    >>> first_Digit(1234)\n    1\n    >>> first_Digit(12345)\n    1\n    >>> first_Digit(123456)\n    1\n    >>> first_Digit(1234567)\n    1\n    >>> first_Digit(12345678)\n    1\n    >>> first_Digit(123456789)\n    1\n    >>> first_Digit(1234567890)\n    1\n    >>> first_Digit(12345678900)\n    1\n    >>> first_Digit(123456789000)\n    1\n    >>> first_Digit(1234567890000)\n    1\n    >>> first_Digit(12345678900000)\n    1\n    >>> first_Digit(123456789000000)\n    1\n    >>> first_Digit(1234567890000000)\n    1\n    \"\"\"\n    return int(str(num)[0])\n\ndef test_first_Digit():\n    assert first_Digit(123) == 1\n    assert first_Digit(1234) == 1\n    assert first_Digit(12345) == 1\n    assert first_Digit(123456) == 1\n    assert first_Digit(1234567) == 1\n    assert first_Digit(12345678) == 1\n    assert first_Digit(123456789) == 1\n    assert first_Digit(1234567890) == 1\n    assert first_Digit(12345678900) == 1\n    assert first_Digit(123456789000) == 1\n    assert first_Digit(123456789", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(number):\n\treturn number // 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_digit(num):\n    return num % 10\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\nimport string\n\ndef get_max_occuring_char(str):\n\tchar_dict = {}\n\tfor char in str:\n\t\tchar_dict[char] = str.count(char)\n\n\tmax_char = max(char_dict, key=char_dict.get)\n\treturn max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(s):\n    \"\"\"\n    Returns the max occurring character in a given string.\n    \"\"\"\n    max_char = s[0]\n    for c in s:\n        if max_char < c:\n            max_char = c\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    max_count = 0\n    max_char = \"\"\n    for char in char_dict:\n        if char_dict[char] > max_count:\n            max_count = char_dict[char]\n            max_char = char\n    return max_char\n\ndef main():\n    print(get_max_occuring_char(\"data\"))\n    print(get_max_occuring_char(\"abccddda\"))\n    print(get_max_occuring_char(\"abcddddddda\"))\n    print(get_max_occuring_char(\"ddddddddda\"))\n    print(get_max_occuring_char(\"aaaaa\"))\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(word):\n    occurring_char = []\n    for char in word:\n        occurring_char.append(word.count(char))\n    return occurring_char.index(max(occurring_char))\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    This function takes a string as an input.\n    It returns the character that occurs the most in the string\n    \"\"\"\n    # create an empty dictionary\n    dict_occurrence = {}\n\n    # loop through the string\n    for char in string:\n        # if the char doesn't exist in the dictionary\n        # add the char to the dictionary with value 1\n        # else increase the value by 1\n        if char not in dict_occurrence:\n            dict_occurrence[char] = 1\n        else:\n            dict_occurrence[char] += 1\n\n    # empty variable that will store the key with highest value\n    max_value = -1\n    # empty variable that will store the key with highest value\n    # (to be used in the for loop)\n    max_key = \"\"\n\n    # loop through the dictionary\n    for key in dict_occurrence:\n        # if the key value is higher than the current max value\n        # update the max value and the max key\n        if dict_occurrence[key] > max_value:\n            max_value = dict_occurrence[key]\n            max_key = key\n\n    return max_key\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(s):\n    \"\"\"\n    :param s: string\n    :return:\n    \"\"\"\n    # your code here\n    max_char = 0\n    char_count = {}\n    for i in s:\n        if i not in char_count:\n            char_count[i] = 1\n        else:\n            char_count[i] = char_count[i] + 1\n    for k in char_count:\n        if char_count[k] > max_char:\n            max_char = char_count[k]\n            max_char_key = k\n    return max_char_key\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(str):\n    \"\"\"\n    :param str: string\n    :return: char\n    \"\"\"\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    max_count = max(char_dict.values())\n    max_keys = [k for k, v in char_dict.items() if v == max_count]\n    return max_keys[0]\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\nimport unittest\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    This function returns the maximum occurring character in a given string.\n    If there are multiple characters with same frequency, the first one is returned.\n    \"\"\"\n    char_frequency_map = {}\n    for char in string:\n        if char in char_frequency_map:\n            char_frequency_map[char] += 1\n        else:\n            char_frequency_map[char] = 1\n    max_freq_char = \"\"\n    max_freq = 0\n    for char, freq in char_frequency_map.items():\n        if freq > max_freq:\n            max_freq_char = char\n            max_freq = freq\n    return max_freq_char\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(s):\n    c = {}\n    for ch in s:\n        if ch in c:\n            c[ch] += 1\n        else:\n            c[ch] = 1\n    m = 0\n    for v in c.values():\n        if v > m:\n            m = v\n            mx = v\n    for k, v in c.items():\n        if v == mx:\n            return k\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    # Write your code here\n    hash_map = {}\n    for char in str:\n        if char in hash_map:\n            hash_map[char] += 1\n        else:\n            hash_map[char] = 1\n    max_count = 0\n    max_char = \"\"\n    for char, count in hash_map.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, current):\n    if len(arr) == 0:\n        return False\n\n    if current > sum:\n        return False\n\n    if current == sum and len(arr) == 1:\n        return True\n\n    if current == sum:\n        return is_subset_sum(arr[1:], sum, 0)\n\n    return is_subset_sum(arr[1:], sum, current + arr[0]) or is_subset_sum(arr[1:], sum, current)\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(set, target_sum, sum=None):\n    if sum is None:\n        sum = 0\n\n    for el in set:\n        if el + sum == target_sum:\n            return True\n        if el + sum < target_sum:\n            return False\n        if is_subset_sum(set, target_sum, el+sum):\n            return True\n\n    return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(set, sum, target=0):\n    target -= sum\n    for item in set:\n        if item == target:\n            return True\n        if item > target:\n            return False\n        target += item\n    return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(array, sum, subset):\n    if subset == 0:\n        return True\n    if subset > sum:\n        return False\n\n    for i in range(0, len(array)):\n        if array[i] <= subset:\n            subset -= array[i]\n            if is_subset_sum(array, sum, subset):\n                return True\n            subset += array[i]\n    return False\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, n, target_sum):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [[False] * (target_sum+1) for i in range(n)]\n    dp[0][0] = True\n\n    for i in range(1, n):\n        for j in range(1, target_sum+1):\n            if (j >= arr[i-1]):\n                dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\nfrom collections import Counter\n\n\ndef is_subset_sum(nums, target_sum, start=0):\n    \"\"\"\n    :type nums: List[int]\n    :type target_sum: int\n    :rtype: bool\n    \"\"\"\n    # The idea is that the subsets are generated by the\n    # addition of each number to the last subset,\n    # if the resulting set has the sum, then we have found a subset with sum equal to the given sum\n    # For example, for nums = [3, 34, 4, 12, 5, 2], target_sum = 9,\n    # the subsets are [[34], [4], [12, 5], [2]]\n    # and the 2nd subset has sum = 12 + 5 = 17, which is equal to the target sum\n\n    # If the target sum is less than 0, there is no subset with that sum\n    if target_sum < 0:\n        return False\n\n    # If the target sum is 0, then all the elements in the nums list must be selected\n    if target_sum == 0:\n        return True\n\n    # If there are no elements in the nums list, then there is no subset with sum equal to target_sum\n    if not nums:\n        return False\n\n    # Count the number of occurrences of each number in the nums list\n    count = Counter(nums)\n\n    # Get the total number of numbers in the nums list\n    # This is the length of each subset\n    length = sum(count.values())\n\n    # If the length is greater than the target sum,\n    # then it is impossible to find a subset with sum equal to target_sum\n    if length > target_sum:\n        return False\n\n    # If there are no numbers that can be selected without exceeding the length of the subset\n    # then there is no subset with sum equal to target_sum\n    if sum(count.values()) > length:\n        return False\n\n    # If the length of the subset is greater than 1,\n    # then we can use dynamic programming to find if there is a subset with sum equal to", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(a, s, sum):\n    a.sort()\n    r = 0\n    for i in a:\n        if sum >= i:\n            r += 1\n            sum -= i\n\n    if r == len(a):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(lst, sum_to_check, sum_to_find):\n    \"\"\"Return True if there is a subset of the given set with sum equal to the given sum.\"\"\"\n    if len(lst) == 0:\n        return False\n\n    for num in lst:\n        lst_copy = lst.copy()\n        lst_copy.remove(num)\n        if is_subset_sum(lst_copy, sum_to_check-num, sum_to_find) or (sum_to_find == sum_to_check - num and sum_to_find != 0):\n            return True\n    return False\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, subset_sum):\n    if not arr:\n        return False\n\n    if subset_sum < 0:\n        return False\n\n    if subset_sum == 0:\n        return True\n\n    if subset_sum > sum:\n        return False\n\n    for i in range(len(arr)):\n        if arr[i] > subset_sum:\n            continue\n        if is_subset_sum(arr[i+1:], sum, subset_sum - arr[i]):\n            return True\n\n    return False\n\n\ndef is_subset_sum_v2(arr, sum, subset_sum):\n    if not arr:\n        return False\n\n    if subset_sum < 0:\n        return False\n\n    if subset_sum == 0:\n        return True\n\n    if subset_sum > sum:\n        return False\n\n    for i in range(len(arr)):\n        if arr[i] > subset_sum:\n            continue\n        if is_subset_sum_v2(arr[i+1:], sum, subset_sum - arr[i]):\n            return True\n\n    return False\n\n\n# is_subset_sum_v2([3, 34, 4, 12, 5, 2], 6, 9)\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nfrom re import search\n\ndef match(s):\n    pattern = r\"[A-Z]{1}[a-z]{2,}\"\n    return \"Yes\" if search(pattern, s) else \"No\"\n\n# Test", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(s):\n    return True if re.search(r\"[A-Z]+[a-z]+\",s) else 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(str):\n    return re.search(r'[A-Z][a-z]?', str).group() if re.search(r'[A-Z][a-z]?', str) else \"No\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(str):\n    p = re.compile('[A-Z][a-z]*')\n    if p.match(str):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nfrom re import findall\n\ndef match(s):\n    return 'Yes' if findall('[A-Z][a-z]*', s) else 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef find_cap_lowers(str):\n    pattern = re.compile('[A-Z][a-z]*')\n    return pattern.findall(str)\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nfrom re import findall\n\n\ndef match(string):\n    return \"Yes\" if findall(\"[A-Z][a-z]+\", string) else \"No\"\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(s):\n    return bool(re.match(\"[A-Z][a-z]*\", s))\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# Solution 1\n\ndef match(str):\n    if len(str) == 0:\n        return 'No'\n    if str[0].isupper() and str[0].islower():\n        if match(str[1:]):\n            return 'Yes'\n    return 'No'\n\n# Solution 2\n\ndef match(str):\n    if len(str) == 0:\n        return 'No'\n    if str[0].isupper() and str[0].islower():\n        if len(str) == 1:\n            return 'Yes'\n        return match(str[1:])\n    return 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    return re.search(r'[A-Z][a-z]*', string)\n\n# Test"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    params: \n        x: an integer\n    return: \n        the first natural number whose factorial is divisible by x\n    \"\"\"\n    if x <= 0:\n        print(\"Error: x should be a positive integer.\")\n        return None\n    res = 1\n    for i in range(1, x):\n        res *= i\n    return res\n\n\n# 0.1 Write a function to calculate the sum of n-digit numbers", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\nfrom euler_python.utils import eulerlib\n\n\ndef first_Factorial_Divisible_Number(x):\n    # First attempt:\n    # return eulerlib.factorial(n) for n in range(1, x)\n    # 1.5x faster\n    # return n for n in range(1, x) if eulerlib.factorial(n) % x == 0\n    # 2.5x faster\n    # This is the fastest I can manage:\n    return eulerlib.fast_factorial_check(n) for n in range(1, x) if eulerlib.fast_factorial_check(n) % x == 0\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    f = 1\n    for i in range(1, x+1):\n        f *= i\n        if f % x == 0:\n            return i\n    return 1\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    Arguments:\n        x: an integer\n    Returns:\n        the smallest number greater than 1 such that its factorial is divisible by x.\n    \"\"\"\n    # Your code goes here\n    i=1\n    while True:\n        if i == 1:\n            i += 1\n        else:\n            i = i * i\n        if i % x == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\nimport math\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    Finds the first natural number whose factorial is divisible by x.\n    x (int): The number by which the factorial should be divisible.\n    Returns: The number whose factorial is divisible by x.\n    \"\"\"\n    a = 1\n    while 1:\n        a += 1\n        a_factorial = math.factorial(a)\n        if a_factorial % x == 0:\n            return a", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for number in range(1,10000):\n        if(factorial(number) % x == 0):\n            return number\n    return \"NO NUMBER FOUND\"\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# Your code here\n\n# %%\n# Solution\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"Returns the first natural number whose factorial is divisible by x.\"\"\"\n    for n in range(1, 100000000000):\n        if (str(factorial(n)).count('1') % 2 == 0 and factorial(n) % x == 0):\n            return n\n\n# %%\nfirst_Factorial_Divisible_Number(10)\n\n# %%\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n# @param number\n# @return\ndef first_Factorial_Divisible_Number(number):\n    '''\n    :param number: a positive integer number\n    :return: the number whose factorial is divisible by number\n    '''\n    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    else:\n        fact = number\n        for i in range(number - 1, -1, -1):\n            fact *= i\n        return fact\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    if x <= 0:\n        raise ValueError('x must be a positive integer')\n    number = 1\n    for i in range(x):\n        number *= (i+1)\n    for i in range(x+1, 10000):\n        number *= (i+1)\n        if number % x == 0:\n            return i\n    return None\n\n\n# +\n# %%writefile test_first_Factorial_Divisible_Number.py\n\n# test_first_Factorial_Divisible_Number.py\n# Find the first natural number whose factorial is divisible by x\n\n# For example, 5! = 120, and if x = 2, then the answer is 120.\n\nimport unittest\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    x = int(x)\n    factors = []\n    for i in range(1, x):\n        if x % i == 0:\n            factors.append(i)\n    return reduce(operator.mul, factors)\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(l1, l2):\n    # your code here\n    l2 = set(l2)\n    return [i for i in l1 if i not in l2]\n\n\n\n# +\n# Test your solution", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple_1, tuple_2):\n    return list(set(tuple_1) - set(tuple_2))\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(list_a, list_b):\n    \"\"\"\n    Input:\n        list_a (tuple): a tuple contains list_b\n        list_b (tuple): a tuple contains list_a\n\n    Output:\n        list_b (tuple): a tuple contains list_b except list_a\n    \"\"\"\n\n    for list_item_b in list_b:\n        if list_item_b in list_a:\n            list_b.remove(list_item_b)\n    return list_b\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(x, y):\n    x = sorted(x)\n    y = sorted(y)\n    i = 0\n    j = 0\n    while i < len(x) and j < len(y):\n        if x[i] == y[j]:\n            i += 1\n            j += 1\n        elif x[i] < y[j]:\n            i += 1\n        else:\n            j += 1\n    return x[i:]\n\ndef test():\n    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\ntest()\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# Write your code here\ndef remove_matching_tuple(lst_a, lst_b):\n    lst_c = list(lst_a)\n    for i in lst_b:\n        if i in lst_c:\n            lst_c.remove(i)\n    return lst_c\n\n# Test your code here", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\nfrom typing import List\n\ndef remove_matching_tuple(tuple1: List[Tuple[str, str]], tuple2: List[Tuple[str, str]]) -> List[Tuple[str, str]]:\n    new_tuple2 = []\n    for item in tuple2:\n        if item not in tuple1:\n            new_tuple2.append(item)\n\n    return new_tuple2\n\n# print(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))\n# print(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are'), ('you', '?')]))\n\n#   Write a function to remove the matching tuples from the given two tuples.\n# assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\n#   Write a function to remove the matching tuples from the given two tuples.\n# assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tup1, tup2):\n    # Remove matching tuples\n    result = list(filter(lambda x: x not in tup2, tup1))\n    return result\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuple_list, tuple_list2):\n    for i in range(len(tuple_list2)-1):\n        for j in range(len(tuple_list)-1):\n            if tuple_list[j] == tuple_list2[i]:\n                del tuple_list[j]\n    return tuple_list\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# Examples", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\n# MY CODE\n\n\n# SOLUTION 1\n# from itertools import product\n#\n# def palindromes(arr):\n#     return list(filter(lambda x: x == x[::-1], product(arr, repeat=2)))\n#\n# def largest_palindrome(arr, n):\n#     palindromes_arr = palindromes(arr)\n#     return sorted(palindromes_arr, key=lambda x: x[0] + x[1])[n-1]\n#\n#\n#\n# print(largest_palindrome([1, 232, 54545, 999991], 4))\n\n\n# SOLUTION 2\n# https://www.geeksforgeeks.org/maximum-and-minimum-of-n-numbers/\n# https://www.geeksforgeeks.org/maximum-and-minimum-of-an-array/\n\n# def largest_palindrome(arr, n):\n#     if len(arr) == 0:\n#         return 0\n#\n#     arr.sort(reverse=True)\n#     product_list = list(map(lambda x: list(map(lambda y: x*y, arr)), arr))\n#     print(product_list)\n#\n#     for i in range(n):\n#         print(i)\n#\n#     if product_list[i][i] > product_list[i+1][i+1]:\n#         return product_list[i][i]\n#     else:\n#         return product_list[i+1][i+1]\n\n# SOLUTION 3\n# https://www.geeksforgeeks.org/minimum-and-maximum-of-n-numbers/\n# from itertools import product\n#\n# def palindromes(arr):\n#     return list(filter(lambda x: x == x[::-1], product(arr, repeat=2)))\n#\n# def", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(l, n):\n    \"\"\"\n    :type l: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return max(l)\n    else:\n        return max([max(l[i:i+n]), largest_palindrome(l, n-1)])\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(nums, n):\n    return max(nums)\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\nfrom collections import Counter\n\n# Uses a two pointer approach to find the largest palindrome.\n# Runtime: O(n^2)\n# Space: O(1)\ndef largest_palindrome(arr, n):\n    largest = -1\n    for i in range(n):\n        for j in range(i, n):\n            temp = int(arr[i] + arr[j])\n            if temp > largest and is_palindrome(temp):\n                largest = temp\n\n    return largest\n\n# Uses a single pointer approach to find the largest palindrome.\n# Runtime: O(n^2)\n# Space: O(1)\ndef largest_palindrome_single_pointer(arr, n):\n    count = Counter(arr)\n    max_count = -1\n    max_palindrome = 0\n\n    # Consider palindromes in increasing order of length\n    for i in range(len(arr), 0, -1):\n        if count[arr[i-1]] == 2:\n            max_palindrome = max(max_palindrome, arr[i-1] * 10 + arr[i-1])\n        # Consider palindromes in the order of increasing length and increasing value\n        for j in range(len(arr) - i + 1):\n            if count[arr[j]] == 1:\n                # The first number in a palindrome is the middle number minus one\n                first = int(arr[j+i-1])\n                if i == 2:\n                    max_palindrome = max(max_palindrome, first * 10 + first)\n                # The last number in a palindrome is the middle number plus one\n                last = int(arr[j+i-1] + arr[j+i-2])\n                max_palindrome = max(max_palindrome, first * 10 + last)\n    return max_palindrome\n\n# Returns true if num is a palindrome\n# Runtime: O(n)\n# Space: O(1)\ndef is_palindrome(num):\n    str_num =", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(nums: list, n: int) -> int:\n    res = 0\n    for x in range(n):\n        for y in range(n):\n            if x == y:\n                continue\n            if len(str(nums[x] * nums[y])) > len(str(res)):\n                res = nums[x] * nums[y]\n    return res\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(numbers, max_len):\n    largest = 0\n    for i in range(0, len(numbers)):\n        for j in range(0, len(numbers)):\n            if numbers[i] == numbers[j]:\n                temp = numbers[i] * 10**max_len\n                if is_palindrome(temp):\n                    if temp > largest:\n                        largest = temp\n    return largest\n\ndef is_palindrome(x):\n    str_x = str(x)\n    return str_x == str_x[::-1]\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    largest = 0\n    for i in range(n-1):\n        for j in range(i, n):\n            if is_palindrome(arr[i], arr[j]):\n                largest = max(largest, arr[i]*arr[j])\n    return largest\n\ndef is_palindrome(i, j):\n    temp = i\n    while temp > 0:\n        d = temp % 10\n        temp = temp // 10\n        if j % 10 != d:\n            return False\n        j = j // 10\n    return True\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(array, num_digits):\n    # Your code goes here\n    for i in range(num_digits):\n        for j in range(num_digits):\n            num = 10**(num_digits-1-i)*array[i] + 10**(num_digits-1-j)*array[j]\n            if str(num) == str(num)[::-1] and num > largest:\n                largest = num\n\n    return largest\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    \"\"\"Return the largest palindrome in arr\"\"\"\n    # if n is odd, check the middle element\n    if n % 2:\n        max_pal = None\n        for i in range(n):\n            # check if element is palindrome\n            if is_palindrome(arr[i]):\n                max_pal = arr[i]\n                break\n    # if n is even, check two middle elements\n    else:\n        max_pal = None\n        for i in range(n - 1):\n            if is_palindrome(arr[i]) and is_palindrome(arr[i + 1]):\n                max_pal = max(arr[i], arr[i + 1])\n                break\n    return max_pal\n\ndef is_palindrome(num):\n    \"\"\"Return whether num is a palindrome\"\"\"\n    s = str(num)\n    for i in range(len(s) // 2):\n        if s[i] != s[-(i + 1)]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, size):\n    max_val = -1\n    for i in range(size):\n        for j in range(size - i - 1):\n            val = arr[i] * 10 + arr[j + i + 1]\n            if val > max_val:\n                max_val = val\n    return max_val\n\n\ndef test_largest_palindrome():\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Write a function to compute binomial probability for the given number.\n    \"\"\"\n    return binom(n, k)*p**k*(1-p)**(n-k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(trials, successes, probability):\n    # Fill in code\n    return 0\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    # raise NotImplementedError()\n    return np.exp(lg_binomial_probability(n, k, p))\n\ndef lg_binomial_probability(n, k, p):\n    # raise NotImplementedError()\n    return math.lgamma(n + 1) - math.lgamma(k + 1) - math.lgamma(n - k + 1) + k * math.log(p) + (n - k) * math.log(1 - p)\n\n# ---------------------------------------------------------------------------------------------------------------------\n# Generate a dataset\n\n# Generate N data points, each with X and Y coordinates\nnp.random.seed(0)\nN = 1000\nX = 2 * np.random.random(N) - 1\nY = 2 * np.random.random(N) - 1\n\n# Plot the points\nplt.scatter(X, Y)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n\n# Plot the points\nplt.scatter(X, Y)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n\n# ---------------------------------------------------------------------------------------------------------------------\n# Compute data likelihood\n#\n\n# Compute the likelihood of the data given the model\n# L = p^n (1-p)^{N-n}\np = 0.5\nN = 1000\np_n = math.factorial(N) / (math.factorial(N - 1) * math.factorial(X.shape[0]))\np_n = p ** N * (1 - p) ** (N - X.shape[0])\n\n# Compute the likelihood of the data given the model\n# L = p^n (1-p)^{N-n}\np = 0.5\nN = 1000\np_n = math.factorial(N) / (math.factorial(N - 1) * math.factorial(X", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    return reduce(lambda x, y: x*y, [binom(n, i)*pow(p, i)*pow(1-p, n-i) for i in range(n+1)], 1)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    return (1.0/math.factorial(n)) * (p**k) * ((1-p)**(n-k))\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    return (1 - (1 - p) ** (n - k)) ** k\n\n\n#%%", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(k, n, p):\n    assert k >= 0\n    assert n >= 0\n    assert 0 <= p <= 1\n    return (comb(n, k) * (p ** k) * (1 - p) ** (n - k))\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Function to compute the binomial probability\n    Args:\n        n (int): number of balls in the binomial experiment\n        k (int): number of balls that are drawn\n        p (float): probability of the balls in the binomial experiment\n\n    Returns:\n        float: probability of the k-th ball being drawn\n    \"\"\"\n    # Compute the probability using the formula\n    p_k = (math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) * math.pow(p, k) * math.pow((1 - p), n - k)\n    return p_k\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability.\n\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success\n\n    :return: probability of having k successes out of n trials\n    \"\"\"\n    if k == 0:\n        return 1.0\n    if k > n:\n        return 0.0\n\n    return p ** k * (1-p)**(n-k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nfrom __future__ import print_function\n\ndef binomial_probability(n, k, p):\n  \"\"\"Compute binomial probability of n successes with probability p.\n  \"\"\"\n  assert isinstance(n, int) and isinstance(k, int)\n  assert 0 <= n and 0 <= k and 0 <= p <= 1\n\n  if k == 0:\n    return 1.0\n\n  assert 0 < k <= n\n\n  n_factorial = 1\n  for i in range(1, n+1):\n    n_factorial *= i\n\n  k_factorial = 1\n  for i in range(1, k+1):\n    k_factorial *= i\n\n  return (n_factorial / k_factorial) * (p ** k) * ((1.0 - p) ** (n - k))\n\ndef main():\n  \"\"\"Testing\n  \"\"\"\n  assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda x:x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\n# Sort a list of tuples by the last element in each tuple\ndef sort_tuple(tuples):\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n\n# Test Cases", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[1])", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x:x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    tuples = sorted(tuples, key = lambda x: x[1])\n    return tuples\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuplist):\n    return sorted(tuplist, key=lambda x: x[1])\n\n#print(sort_tuple([(1, 3), (3, 2), (2, 1)]))\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(l):\n    return sorted(l, key=lambda x: x[-1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(x):\n    return sorted(x, key=lambda y: y[1])\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return n*(n*3-1)/2\n\n\n# -\n\narea_pentagon(2), area_pentagon(10), area_pentagon(20)\n\narea_pentagon(20) + area_pentagon(10)\n\narea_pentagon(1) + area_pentagon(2) + area_pentagon(3) + area_pentagon(4) + area_pentagon(5)\n\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side):\n    return ((5/2)*(side**2))\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(side):\n    return 0.5*side*side*np.sqrt(3)\n\ndef test_area_pentagon():\n    np.testing.assert_allclose(area_pentagon(5), 43.01193501472417)\n\n# --- 4. Fibbonacci Numbers ---\n\n# --- 4.1. Fibonacci Numbers ---\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    if n < 1:\n        return None\n    else:\n        return (n*(3*n-1))/2\n    ", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side):\n    return 0.5*side**2\n\n# test pentagon", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(side):\n    return side*(5*side - 18) / 180.0\n\n# a function that returns the area of a pentagon\n#def area_pentagon(side):\n#    return side*side*0.5*1.25\n\n# assert", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side):\n    \"\"\"\n    Return area of pentagon\n    \"\"\"\n    return 0.5*side**2*math.tan(math.pi/5)\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    return 0.5 * n * n * (3 * n - 1)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(sides: float) -> float:\n    \"\"\"\n    area of a pentagon by sides\n    >>> area_pentagon(5)\n    43.01193501472417\n    \"\"\"\n    return 0.5*sides*(sides-3)*(sides-3)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(num_sides):\n    return num_sides*5.0\n\ndef area_rectangle(length,width):\n    return length*width\n\ndef area_triangle(base,height):\n    return (base*height)/2\n\ndef area_ellipse(length,width):\n    return 3.14159*length*width\n\ndef test_area_rectangle(value):\n    assert area_rectangle(5,3)==15.0\n    assert area_rectangle(10,5)==50.0\n\ndef test_area_triangle(value):\n    assert area_triangle(5,6)==30.0\n    assert area_triangle(10,20)==20.0\n\ndef test_area_ellipse(value):\n    assert area_ellipse(2,3)==20.555555555555558\n    assert area_ellipse(10,5)==78.53981633974483\n\ndef test_area_rectangle_fails():\n    assert area_rectangle(4,2)!=12.0\n\ndef test_area_triangle_fails():\n    assert area_triangle(7,3)!=21.0\n\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n, arr):\n    if len(arr) == 0 or n == 0:\n        return -1\n    temp = []\n    for i in range(n):\n        temp.append([arr[i], 1])\n    temp.sort(key=lambda x:x[0])\n    dict = {}\n    for i in range(len(temp)):\n        if temp[i][0] not in dict:\n            dict[temp[i][0]] = 1\n        else:\n            dict[temp[i][0]] += 1\n    for key in dict:\n        if dict[key] == max(dict.values()):\n            return key\n    return -1\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,a):\n    ans=a[0]\n    count=1\n    for i in a:\n        if i>ans:\n            ans=i\n            count=1\n        elif i==ans:\n            count+=1\n    return count", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n, array):\n    max = array[0]\n    counter = 0\n    for i in range(len(array)):\n        if array[i] > max:\n            max = array[i]\n            counter = 1\n        elif array[i] == max:\n            counter = counter + 1\n    return counter\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n, arr):\n    # Your code here\n    count = 0\n    max_val = 0\n    for i in range(n):\n        if max_val < arr[i]:\n            max_val = arr[i]\n            count = 1\n        elif max_val == arr[i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,a):\n    freq=0\n    for i in range(n):\n        freq+=a.count(max(a))\n    return freq", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(N,arr):\n\tcount = 0\n\tl = len(arr)\n\tfor i in range(l):\n\t\tif i == l-1:\n\t\t\treturn count\n\t\tif arr[i] == arr[i+1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\treturn count\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(length, arr):\n    return arr.count(max(arr))", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(size,array):\n    # write your code here\n    pass\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n,array):\n    #Code Here\n    pass\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuple_list):\n    res = {}\n    for tuple1 in tuple_list:\n        for tuple2 in tuple_list:\n            if (tuple1[0] == tuple2[0] and tuple1[1] == tuple2[1]) or (tuple1[0] == tuple2[1] and tuple1[1] == tuple2[0]):\n                res[(tuple1[0], tuple1[1])] = (tuple1[0], tuple1[1])\n    return res\n\n# 11", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(lst):\n    return {tuple(sorted(lst[i])) for i in range(len(lst))}\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\n# SOLUTION 1\ndef extract_symmetric(data):\n    return {(a, b) for (a, b) in data for b in data if a < b}\n\n# SOLUTION 2\ndef extract_symmetric(data):\n    return {(a, b) for (a, b) in data for b in data if a < b and a != b}\n\n\n# Test", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(x):\n    return {(a, b) for a, b in x if a == b}", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(pairs):\n    pairs_sym = []\n    for pair in pairs:\n        if (pair[0], pair[1]) in pairs_sym:\n            pairs_sym.remove((pair[0], pair[1]))\n        else:\n            pairs_sym.append(pair)\n    return pairs_sym", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nfrom typing import *\n\n\ndef extract_symmetric(data: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    \"\"\"\n    :param data: the given tuple list\n    :return: the pairs which are symmetric\n    \"\"\"\n    pairs = []\n    for i in range(len(data) - 1):\n        for j in range(i + 1, len(data)):\n            if data[i][0] == data[j][1] or data[i][1] == data[j][0]:\n                pairs.append(data[i])\n                pairs.append(data[j])\n    return tuple(pairs)\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(lst):\n    res = set()\n    for x in lst:\n        for y in lst:\n            if x[0] == y[1]:\n                res.add((x[1], y[0]))\n            if x[1] == y[0]:\n                res.add((x[0], y[1]))\n    return res\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(list_of_tuples):\n    return {(list_of_tuples[i][0], list_of_tuples[i][1]) for i in range(len(list_of_tuples))} - {(list_of_tuples[i][1], list_of_tuples[i][0]) for i in range(len(list_of_tuples))}\n\n\n# assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(items):\n    return {pair for pair in items if pair[1]==items[items.index(pair)][0]}\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(lst):\n    \"\"\"\n    Given a list of tuples, find symmetric tuples.\n    \"\"\"\n    # First sort the list so that symmetric pairs come next to each other.\n    lst.sort()\n    # Now check if all the pairs are symmetric.\n    for i in range(len(lst)):\n        # Check if the first element of the pair is equal to the last element of the tuple.\n        if lst[i][0] == lst[i][1]:\n            # If so, return the pair.\n            yield lst[i]\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,r,n):\n    total=0\n    for i in range(n):\n        total=total+a*r**i\n    return total\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start, end, ratio):\n    sum = start\n    for i in range(start, end+1):\n        sum += (ratio**i)\n    return sum\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start_number,end_number,rate):\n    return int(start_number*(1+rate/100)**(end_number-start_number))\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(x0,r,n):\n    return (x0+(r**(n-1)))*r**n/((r**n)-1)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,b,r):\n\tif r==1:\n\t\treturn b\n\telse:\n\t\treturn a+(b-a)*r**(1/(r-1))\n\ndef sum_gp_rec(a,b,r):\n\tif r==1:\n\t\treturn b\n\telse:\n\t\treturn a+(b-a)*sum_gp_rec(a,b,r-1)\n\ndef main():\n\tassert sum_gp(1,5,2)==31\n\tassert sum_gp_rec(1,5,2)==31\n\tprint(\"All tests passed!\")\n\nmain()", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a, n, r):\n    sum = 0\n    for i in range(n):\n        sum += a ** i * r\n    return sum\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,r):\n    res=0\n    while(a<=b):\n        res=res+a\n        a=a*r\n    return res\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,b,r):\n\treturn (b**r-1)/(a-1)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,b,p):\n    return a*p**b/((1-p)**(b-1))\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,r):\n    if r==1:\n        return (b-a+1)*(a)\n    else:\n        return ((b-a+1)*(a)) + (r-1)*sum_gp(a,b,r-1)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(array, search_element):\n\t# The index of first element of the right half\n\tstart = 0\n\t# The index of first element of the left half\n\tend = len(array) - 1\n\n\t# While the start and end is not equal to each other\n\twhile start <= end:\n\t\t# The middle element\n\t\tmid = (start + end) // 2\n\t\t# If the middle element is equal to the search element\n\t\tif array[mid] == search_element:\n\t\t\t# Return the index of the search element\n\t\t\treturn mid\n\t\t# If the middle element is greater than the search element\n\t\tif array[mid] > search_element:\n\t\t\t# Set the end to middle - 1\n\t\t\tend = mid - 1\n\t\t# If the middle element is less than the search element\n\t\telse:\n\t\t\t# Set the start to middle + 1\n\t\t\tstart = mid + 1\n\t# If the search element is not found\n\treturn False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(nums, target):\n    n = len(nums)\n    # start with the left and right pointer\n    left, right = 0, n-1\n    # loop until left and right pointer are not equal\n    while left < right:\n        # find the middle index\n        mid = (left + right) // 2\n        # if mid element is target\n        if nums[mid] == target:\n            return True\n        # if target is greater than mid element, then we know that the target must be in the right sub-array\n        elif nums[mid] < target:\n            # set the new pointer to right sub-array\n            left = mid + 1\n        # if target is less than mid element, then we know that the target must be in the left sub-array\n        else:\n            # set the new pointer to left sub-array\n            right = mid - 1\n    return False\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, target):\n    # Fill this in.\n    return False\n\n\n# test your function", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(a, x):\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == a[mid]:\n            return True\n        elif x < a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n\ndef test_binary_search():\n    assert binary_search([1,2,3,5,8], 6) == False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, x):\n    i, j = 0, len(arr)-1\n    while i <= j:\n        m = (i+j)//2\n        if arr[m] == x:\n            return True\n        if arr[m] < x:\n            i = m+1\n        else:\n            j = m-1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, search_key):\n    index = 0\n    while index < len(array):\n        mid = (index + len(array)-1) // 2\n        if array[mid] == search_key:\n            return True\n        elif array[mid] < search_key:\n            index = mid + 1\n        else:\n            index = mid\n    return False\n\narray = [1,2,3,5,8]", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, item):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = int((start + end) / 2)\n        if item < arr[mid]:\n            end = mid - 1\n        elif item > arr[mid]:\n            start = mid + 1\n        else:\n            return True\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, element):\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return True\n        elif element < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, target):\n    # write your code here\n    def _binary_search(array, target, start, end):\n        if end < start:\n            return -1\n        mid = (start + end)//2\n        if target == array[mid]:\n            return mid\n        elif target > array[mid]:\n            return _binary_search(array, target, mid+1, end)\n        else:\n            return _binary_search(array, target, start, mid)\n\n    return _binary_search(array, target, 0, len(array)-1) != -1\n\n\n#print(binary_search([1,2,3,5,8], 6))\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(nums, target):\n    start = 0\n    end = len(nums)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if nums[mid] < target:\n            start = mid + 1\n        elif nums[mid] > target:\n            end = mid - 1\n        else:\n            return True\n    return False\n\ndef test_binary_search():\n    assert binary_search([1,2,3,5,8], 5)\n    assert binary_search([1,2,3,5,8], 8)\n    assert not binary_search([1,2,3,5,8], 6)\n\ntest_binary_search()\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nimport unittest\n\ndef binary_to_integer(binary):\n    \"\"\"\n    Given a tuple containing binary digits, convert the number to an integer\n    \"\"\"\n    return ''.join([str(int(num)) for num in binary])\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(bin_tuple):\n    result = 0\n    for bin_value in bin_tuple:\n        result *= 2\n        result += bin_value\n    return str(result)\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(bin_tuple):\n    \"\"\"\n    Convert a tuple to a string\n    :param bin_tuple: tuple of 0s and 1s\n    :return: string representation\n    \"\"\"\n    return \"\".join([str(i) for i in bin_tuple])\n\n# 11/3/16", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(b):\n    \"\"\"\n    Takes a binary string and returns its decimal equivalent.\n\n    :param b: binary string to be converted\n    :return: the string representation of the decimal integer.\n    \"\"\"\n    decimal_string = ''\n    for i in range(len(b)):\n        if b[i] == '0':\n            decimal_string += '0'\n        elif b[i] == '1':\n            decimal_string += '1'\n        else:\n            raise ValueError('Invalid character')\n    return str(int(decimal_string, 2))\n\n\ndef test_binary_to_integer():\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\n\n# Binary Array to Decimal String", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(tuple):\n    '''\n    Takes a binary tuple as input and returns a string representation of the integer\n    '''\n    return ''.join(map(str, tuple))\n\n\ndef convert_binary_tuple(tuple):\n    '''\n    Converts a binary tuple to an integer\n    '''\n    return int(''.join(map(str, tuple)), 2)\n\n\ndef test_convert_binary_tuple():\n    '''\n    Test the function to convert a binary tuple to an integer\n    '''\n    assert convert_binary_tuple((1, 1, 0, 1, 0, 0, 1)) == 105\n\n\ndef convert_integer_to_binary_tuple(number):\n    '''\n    Converts an integer to a binary tuple\n    '''\n    return tuple(list(map(int, list(bin(number)))))\n\n\ndef test_convert_integer_to_binary_tuple():\n    '''\n    Test the function to convert an integer to a binary tuple\n    '''\n    assert convert_integer_to_binary_tuple(4) == (1, 0, 0, 0)\n    assert convert_integer_to_binary_tuple(9) == (0, 1, 0, 1)\n    assert convert_integer_to_binary_tuple(7) == (1, 1, 1, 0)\n    assert convert_integer_to_binary_tuple(1023) == (1, 1, 1, 1)\n    assert convert_integer_to_binary_tuple(1024) == (0, 0, 1, 0)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(t):\n    \"\"\"Return the given binary tuple as an integer.\"\"\"\n    binary_string = \"\"\n    for digit in t:\n        if digit == 1:\n            binary_string += \"1\"\n        else:\n            binary_string += \"0\"\n    return int(binary_string, 2)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    return str(int(\"\".join(binary_tuple), 2))\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(b):\n    return str(int(\"\".join(str(i) for i in b), 2))\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(bin_tuple):\n    new_string = \"\"\n    for index, value in enumerate(reversed(bin_tuple)):\n        new_string += str(value) if index != 0 and value == 1 else \"\"\n    return new_string\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]+', '', s)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    result = s.replace('a', '')\n    result = result.replace('b', '')\n    result = result.replace('c', '')\n    result = result.replace('d', '')\n    result = result.replace('e', '')\n    result = result.replace('f', '')\n    result = result.replace('g', '')\n    result = result.replace('h', '')\n    result = result.replace('i', '')\n    result = result.replace('j', '')\n    result = result.replace('k', '')\n    result = result.replace('l', '')\n    result = result.replace('m', '')\n    result = result.replace('n', '')\n    result = result.replace('o', '')\n    result = result.replace('p', '')\n    result = result.replace('q', '')\n    result = result.replace('r', '')\n    result = result.replace('s', '')\n    result = result.replace('t', '')\n    result = result.replace('u', '')\n    result = result.replace('v', '')\n    result = result.replace('w', '')\n    result = result.replace('x', '')\n    result = result.replace('y', '')\n    result = result.replace('z', '')\n    return result\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    s = s.lower()\n    regex = re.compile('[a-z]+')\n    results = regex.findall(s)\n    results = [item.upper() for item in results]\n    return ''.join(results)\n\n# Remove_lowercase('12345') # returns ''\n# Remove_lowercase('kDeoALOklOOHserfLoAJSIskdsf') # returns 'KDALOOOHLAJSI'\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    \"\"\"\n    removes lowercase letters from a given string\n    :param string: str\n    :return: str\n    \"\"\"\n    return re.sub('[a-z]',' ', string)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]+',' ',s)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    return re.sub('([a-z])\\1+', r'\\1', str)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    return re.sub('a-z', '', s)\n\n# 2.3", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    # Your code here\n    return string.translate(None, 'abcdefghijklmnopqrstuvwxyz')\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nimport heapq\ndef heap_queue_smallest(l,k):\n    # create a heap queue\n    heap=list()\n    heapq.heapify(heap)\n    res=list()\n    # put first k numbers in the heap\n    for i in l[:k]:\n        heapq.heappush(heap,i)\n    # extract the smallest k numbers from heap\n    for i in range(k):\n        res.append(heapq.heappop(heap))\n    return res\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(arr,k):\n    temp=[]\n    for i in range(k):\n        temp.append(arr[0])\n        del arr[0]\n        arr=heap_sort(arr)\n    return temp\n\ndef heap_sort(arr):\n    n=len(arr)\n    # build heap\n    for i in range(n//2-1,-1,-1):\n        heapify(arr,i,n)\n    # extract elements\n    for i in range(n-1,0,-1):\n        temp=arr[0]\n        arr[0]=arr[i]\n        arr[i]=temp\n        heapify(arr,0,i)\n    return arr\n\ndef heapify(arr,i,n):\n    l=2*i+1\n    r=2*i+2\n    smallest=i\n    if l<n and arr[l]<arr[i]:\n        smallest=l\n    if r<n and arr[r]<arr[smallest]:\n        smallest=r\n    if smallest!=i:\n        temp=arr[i]\n        arr[i]=arr[smallest]\n        arr[smallest]=temp\n        heapify(arr,smallest,n)\n\n# time complexity=O(nlogn) space complexity=O(n)\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\n\ndef heap_queue_smallest(lst,k):\n    result = []\n    for i in range(0,k):\n        heapq.heappush(result,lst[i])\n    heapq.heapify(result)\n    return result\n\n#assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(nums, k):\n    # min heap using heapq\n    minheap = []\n    for num in nums:\n        heapq.heappush(minheap, num)\n    return [heapq.heappop(minheap) for _ in range(k)]", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n# coding: utf-8\n\n# In[1]:\n\n\nimport heapq\n\n\n# In[2]:\n\n\ndef heap_queue_smallest(numbers, k):\n    heap = []\n    heapq.heapify(heap)\n    \n    for n in numbers:\n        heapq.heappush(heap,n)\n    print(heap)\n    \n    result=[]\n    for i in range(k):\n        result.append(heapq.heappop(heap))\n    return result\n\n\n# In[3]:\n\n\nheap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],3)\n\n\n# In[ ]:\n\n\n\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(list,k):\n    # construct heap\n    heap_list=[(i,1) for i in list]\n    heapq.heapify(heap_list)\n    \n    # get min\n    min_list=[]\n    for i in range(k):\n        min_list.append(heapq.heappop(heap_list)[0])\n    return min_list\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import heapify, heappop, heappush\ndef heap_queue_smallest(nums,n):\n    l = len(nums)\n    heap = []\n    for i in range(n):\n        heappush(heap,nums[i])\n    for j in range(n,l):\n        if heappop(heap)>nums[j]:\n            heappush(heap,nums[j])\n    print(heap)\n    return heap\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(nums, k):\n    # Write your code here.\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap, nums[i])\n    smallest = []\n    while len(smallest) < k:\n        smallest.append(heapq.heappop(heap))\n    return smallest\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n# Heap Queue\ndef heap_queue_smallest( arr, n ):\n    if n <= 0:\n        return None\n\n    heap = [None] * (n+1)\n    heap[0] = arr[0]\n    heap[1] = arr[1]\n\n    smallest = arr[0]\n    i = 1\n    j = 2\n\n    while i <= n:\n        if j > n:\n            return smallest\n\n        if heap[i] < heap[j]:\n            smallest = heap[i]\n            i = 2 * i\n        else:\n            smallest = heap[j]\n            j = 2 * j\n\n        heap[i] = smallest\n        i = i + 1\n\n    return smallest\n\n\n# Bubble Sort\ndef heap_queue_smallest( arr, n ):\n    if n <= 0:\n        return None\n\n    smallest = arr[0]\n\n    for i in range(n):\n        if smallest > arr[i]:\n            smallest = arr[i]\n    \n    return smallest\n\n\n# Test Cases", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(l, k):\n    heap = []\n    smallest = []\n    for i in l:\n        heapq.heappush(heap, i)\n        smallest.append(heapq.heappop(heap))\n        if len(smallest) > k:\n            smallest.pop(0)\n        heapq.heapify(heap)\n    return smallest\n\n\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    surfacearea=3.14*r**2*h+(3.14*r*h)/3\n    return surfacearea\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r, h):\n    return (1.0/3.0)*(3.14*r**2)*h\n\ndef test_surfacearea_cone():\n    assert surfacearea_cone(5,12)==282.7433388230814\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    #Your code here\n    pass\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    return (3.14*r**2)*(h+r)\n\n\n# ### Find the volume of a cone\n#\n# **Task**: Write a function to find the volume of a cone.\n#\n# **Input**: radius of the base and the height of the cone\n#\n# **Output**: the volume of the cone\n#\n# **Constraints**:\n# 1. radius of the base is always positive\n# 2. height is always positive\n# 3. height is always less than the radius of the base\n#\n# **Examples**:\n# ```\n# assert volume_cone(5,12)==1444.272693250224\n# ```\n\n# +\n#write your code below\ndef volume_cone(r,h):\n    if (r>0) and (h>0) and (h<r):\n        return ((3.14*(r**2))*h)/3\n    else:\n        return \"Error: height is always less than the radius of the base.\"\n    ", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    return (r**2*math.pi)+(r*h)*math.pi\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius, height):\n\treturn (radius**2)*np.pi*height + (radius**2)*np.pi*np.sin(np.pi/4)\n\ntest.assert_equals(surfacearea_cone(5,12), 282.7433388230814)\n\ndef surfacearea_cylinder(radius, height):\n\treturn (radius**2)*np.pi*height + (radius**2)*2*np.pi*radius\n\ntest.assert_equals(surfacearea_cylinder(5,12), 447.7593185365431)\n\ndef surfacearea_sphere(radius):\n\treturn 4*np.pi*radius**2\n\ntest.assert_equals(surfacearea_sphere(5), 78.53981633974483)\n\ndef volume_cone(radius, height):\n\treturn (radius**2)*np.pi*height/(3*np.sin(np.pi/4))\n\ntest.assert_equals(volume_cone(5,12), 1057.569640774974)\n\ndef volume_cylinder(radius, height):\n\treturn (radius**2)*np.pi*height\n\ntest.assert_equals(volume_cylinder(5,12), 432.8938824424065)\n\ndef volume_sphere(radius):\n\treturn 4/3*np.pi*radius**3\n\ntest.assert_equals(volume_sphere(5), 191.8037722219313)\n\nimport numpy as np\ndef volume_cube(side):\n\treturn side**3\n\ntest.assert_equals(volume_cube(5), 125)\n\n#print(volume_cube(5))\n\n#print(surfacearea_", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r, h):\n    return (3.14159265359*r**2)*h\n\n# Problem 6\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    # your code here\n    s=3.14*radius*radius*height/3\n    return s\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    Returns surface area of cone\n    \"\"\"\n    return (2 * 3.14 * radius ** 2 + 2 * 3.14 * radius * height)\n\ndef print_surface_area(func):\n    \"\"\"\n    Function to print surface area of cone\n    \"\"\"\n    print(\"The surface area of a cone is %s.\" % func(5,12))\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    # Your code here\n    area=3.14*r*r+2*r*h\n    return area"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef test_gcd():\n    assert gcd(12, 17) == 1\n    assert gcd(1, 2) == 1\n    assert gcd(10, 22) == 2\n\n#\n# Write a python function to find lcm of two positive integers.\n# assert lcm(12, 17) == 60\n# assert lcm(15, 12) == 180\n# assert lcm(5, 3) == 15\n#\n# def lcm(a, b):\n#     assert a > 0 and b > 0\n#     return abs(a*b) / gcd(a, b)\n#\n# def test_lcm():\n#     assert lcm(12, 17) == 60\n#     assert lcm(15, 12) == 180\n#     assert lcm(5, 3) == 15\n#\n#\n# # Write a python function to find lcm of all elements of list.\n# # assert lcm_list([1, 2, 3, 4, 5, 6]) == 3600\n# #\n# def lcm_list(a_list):\n#     assert isinstance(a_list, list)\n#     if len(a_list) == 0:\n#         return 1\n#     else:\n#         return reduce(lambda a, b: abs(a*b) / gcd(a, b), a_list, 1)\n#\n# def test_lcm_list():\n#     assert lcm_list([1, 2, 3, 4, 5, 6]) == 3600\n#     assert lcm_list([]) == 1\n#     assert lcm_list([1, 2]) == 2\n#     assert lcm_list([2, 3]) == 6\n#\n#\n# #", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    return 1 if b==0 else gcd(b, a % b)\n\ndef test_gcd():\n    assert gcd(12, 17) == 1\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef test_gcd():\n    assert gcd(12, 17) == 1\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    \"\"\"\n    Finds the greatest common denominator of two positive integers\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef gcd2(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef gcd3(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    # Test cases\n    print(gcd(12, 17))\n    assert(gcd(12, 17) == 1)\n    print(gcd(18, 22))\n    assert(gcd(18, 22) == 2)\n    print(gcd(1, 4))\n    assert(gcd(1, 4) == 1)\n    print(gcd(2, 2))\n    assert(gcd(2, 2) == 2)\n    print(gcd(3, 4))\n    assert(gcd(3, 4) == 1)\n    print(gcd(3, 5))\n    assert(gcd(3, 5) == 1)\n    print(gcd(0, 4))\n    assert(gcd(0, 4) == 4)\n\n    print(gcd2(12, 17))\n    assert(gcd2(12, 17) == 1)\n    print(gcd2(18, 22))\n    assert(gcd2(18, 22) == 2)\n    print(gcd2(1, 4))\n    assert(gcd2(1, 4) == 1)\n    print(gcd2(2, 2))\n    assert(gcd2(2, 2) == 2)\n    print(gcd2(3, 4))\n    assert(gcd2(3, 4) == 1)\n    print(gcd2(3, 5))\n    assert(gcd2(3, 5) == 1)\n    print(gcd2(0, 4))\n    assert(gcd2(0, 4) == 4)\n\n    print(gcd3", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef gcd_solution(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a < b:\n        return gcd_solution(b, a)\n    else:\n        return gcd_solution(b % a, a)\n\ndef main():\n    for a, b in [(12, 17), (13, 17), (12, 17), (10, 3), (40, 28), (64, 42)]:\n        assert gcd(a, b) == gcd_solution(a, b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\n# 10.7.1\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n# 10.7.2\ndef gcd2(a, b):\n    while a != 0:\n        a, b = b % a, a\n    return b\n\n# 10.7.3\ndef gcd3(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# 10.7.4\ndef gcd4(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return b\n\n# 10.7.5\ndef gcd5(a, b):\n    if b == 0:\n        return a\n    return gcd5(b, a % b)\n\n# 10.7.6\ndef gcd6(a, b):\n    while a != b:\n        if a < b:\n            a, b = b, a\n        else:\n            a, b = a - b, a\n    return a\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\n\ndef diameter_circle(radius):\n    return 2*radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    return 2 * radius\n\n\n# Test cases:", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n# This implementation only takes O(n^2) space, but is faster than the one below\n# because the use of list comprehensions allows for quick iterations\ndef diameter_circle(radius):\n    \"\"\"\n    Return diameter of a circle with radius.\n    \"\"\"\n    diameter = 2 * radius\n    for i in range(radius):\n        for j in range(radius):\n            # Top-left\n            x1 = -radius + i\n            y1 = -radius + j\n            # Top-right\n            x2 = -radius + i\n            y2 = radius - j\n            # Bottom-left\n            x3 = radius - i\n            y3 = -radius + j\n            # Bottom-right\n            x4 = radius - i\n            y4 = radius - j\n\n            # Check that the distance between the points is less than the diameter\n            distance = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n            if distance < diameter:\n                diameter = distance\n            distance = ((x3 - x4)**2 + (y3 - y4)**2)**0.5\n            if distance < diameter:\n                diameter = distance\n    return diameter\n\ndef diameter_circle_fast(radius):\n    \"\"\"\n    Return diameter of a circle with radius.\n    \"\"\"\n    diameter = 2 * radius\n    for i in range(radius):\n        for j in range(radius):\n            # Top-left\n            x1 = -radius + i\n            y1 = -radius + j\n            # Top-right\n            x2 = -radius + i\n            y2 = radius - j\n            # Bottom-left\n            x3 = radius - i\n            y3 = -radius + j\n            # Bottom-right\n            x4 = radius - i\n            y4 = radius - j\n\n            # Check that the distance between the points is less than the diameter\n            distance = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n            if distance < diameter:\n                diameter = distance\n            distance = ((x3 - x4)**2 + (y3 - y4)**2)**0.5\n            if distance < diameter:\n                diameter = distance\n\n    # Check if the diameter is at the centre\n    distance = ((-radius)**2 + (-radius)**2)**0.5\n    if distance < diameter:", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    \"\"\"\n    Calculates the diameter of a circle given the radius of the circle.\n    \"\"\"\n    return 2*r\n\ndef test_diameter_circle():\n    assert diameter_circle(10)==20\n\ndef diameter_of_a_square(s):\n    \"\"\"\n    Calculates the diameter of a square given the side length of the square.\n    \"\"\"\n    return 4*s\n\ndef test_diameter_of_a_square():\n    assert diameter_of_a_square(10)==20\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    return 2 * radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n\treturn 2 * radius\n\n# Test", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    '''\n    Calculates diameter of a circle\n    '''\n    diameter = radius * 2\n    return diameter\n\ndef test_diameter_circle():\n    assert diameter_circle(10) == 20", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(r):\n    return 2*r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(r):\n\treturn 2*r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    \"\"\"\n    This function returns the diameter of a circle, given its radius\n    \"\"\"\n    return 2*r\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(elements):\n    return '  ' + ' '.join(elements)\n\ndef test_concatenate_elements():\n    assert concatenate_elements(['hello','there','have','a','rocky','day']) == '  hello there have a rocky day'\n    assert concatenate_elements(['1','2','3','4','5','6']) == '  1 2 3 4 5 6'\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    return ' '.join(lst)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(a_list):\n    return \" \".join(a_list)\n\ndef test_concatenate_elements():\n    assert concatenate_elements(['hello','there','have','a','rocky','day']) == '  hello there have a rocky day'\n\n# Write a function to concatenate all elements of the given list into a string,\n# except for the last element, which should be separated from the rest by \", and \".\n# assert concatenate_elements_with_and(['hello','there','have','a','rocky','day'] ) == '  hello, there, have, a, rocky day'\n# Write a function to concatenate all elements of the given list into a string,\n# except for the last two elements, which should be separated from the rest by \", and \".\n# assert concatenate_elements_with_and(['hello','there','have','a','rocky','day'], 2) == '  hello, there, have, a rocky day'\n\ndef concatenate_elements_with_and(a_list, num=1):\n    if num==1:\n        return \" \".join(a_list[:-1]) + \" and \" + a_list[-1]\n    elif num==2:\n        return \" \".join(a_list[:-2]) + \", and \" + a_list[-1]\n    else:\n        return \" \".join(a_list)\n\ndef test_concatenate_elements_with_and():\n    assert concatenate_elements_with_and(['hello','there','have','a','rocky','day']) == '  hello, there, have, a, rocky day'\n    assert concatenate_elements_with_and(['hello','there','have','a','rocky','day'], 2) == '  hello, there, have, a rocky day'\n\n# Write a function that takes a list of strings and returns a list where all the strings have been split into a list of words and where each word has been capitalized.\n# assert split_capitalize_join(['hello there', 'have a rocky day'] ) == ['Hello', 'There', 'Have", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list):\n    string = \"\"\n    for x in list:\n        string += x + \" \"\n    return string\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(input_list):\n    \"\"\"\n    Concatenates all elements of input_list into a string.\n    input_list: A list containing strings.\n    returns: A string containing all elements of input_list joined together.\n    \"\"\"\n    # Your code here.\n    output = \"\"\n    for i in input_list:\n        output += \" \" + i\n    return output\n\n# Test cases", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(L):\n    return '  '.join(L)\n\ndef concatenate_elements2(L):\n    return ' '.join(L)\n\ndef concatenate_elements3(L):\n    return ' '.join(L)\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(elements):\n    return '  '.join(elements)\n\n# -----------------------------------------------------------------------------\n# Testing\n# -----------------------------------------------------------------------------\ndef test_concatenate_elements():\n    assert concatenate_elements(['hello','there','have','a','rocky','day']) == '  hello there have a rocky day'\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    return ''.join(lst)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(sequence):\n\tassert type(sequence) == list, \"Input must be a list.\"\n\tassert len(sequence) > 0, \"Input must contain at least one element.\"\n\treturn \"  \".join(sequence)\n\ndef test_concatenate_elements():\n\tassert concatenate_elements([]) == \"\"\n\tassert concatenate_elements(['hello','there']) == \"  hello there\"\n\tassert concatenate_elements(['hello','there','have']) == \"  hello there have\"\n\tassert concatenate_elements(['hello','there','have','a','rocky','day']) == \"  hello there have a rocky day\"\n\tassert concatenate_elements(['hello','there','have','a','rocky','day','again']) == \"  hello there have a rocky day again\"\n\tassert concatenate_elements(['hello','there','have','a','rocky','day','again','and','again']) == \"  hello there have a rocky day again and again\"\n\tassert concatenate_elements(['hello','there','have','a','rocky','day','again','and','again','and','again']) == \"  hello there have a rocky day again and again and again\"\n\tassert concatenate_elements(['hello','there','have','a','rocky','day','again','and','again','and','again','and','again']) == \"  hello there have a rocky day again and again and again and again\"\n\tassert concatenate_elements(['hello','there','have','a','rocky','day','again','and','again','and','again','and','again','and','again']) == \"  hello there have a rocky day again and again and again and again and again and again\"\n\tassert concatenate_elements(['hello','there','have','a','rocky','day','again','and','again','and','again','and','again','and','again','and','again']) == \"  hello there have a rocky day again and again and again and again and again and again and again and again\"\n\tassert concatenate_elements(['hello','there','have','a','rocky','day','again", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(elements):\n    return ' '.join(elements)\n\ndef main():\n    print concatenate_elements(['hello','there','have','a','rocky','day'])\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(x,y):\n    res = 1\n    if x%y == 0:\n        res = y\n    else:\n        res = num_comm_div(y,x%y)\n    return res\n\nnum_comm_div(2,4)", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\nimport math\ndef num_comm_div(n1, n2):\n    for d in range(2, int(math.sqrt(n2) + 1)):\n        if n2 % d == 0 and n1 % d == 0:\n            return d\n    return 0\n\ndef find_comm_div(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    else:\n        lst = []\n        for a in lst1:\n            for b in lst2:\n                if a % b == 0 and b not in lst:\n                    lst.append(b)\n        return lst[0] if lst else None\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(x, y):\n    import math\n    return int(math.gcd(x,y))\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    div=1\n    while div < min(a,b):\n        if (a%div == 0) and (b%div == 0):\n            return div\n        div+=1\n    return div\n\n# a = 2\n# b = 4\n\n# print(num_comm_div(a,b))\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1, num2):\n    '''\n    num_comm_div(num1, num2)\n    Calculates the common divisor between two numbers\n    '''\n    if num1 == 0 or num2 == 0:\n        return 0\n    if num1 > num2:\n        for i in range(2, num1//2 + 1):\n            if num1 % i == 0 and num2 % i == 0:\n                return i\n    else:\n        for i in range(2, num2//2 + 1):\n            if num2 % i == 0 and num1 % i == 0:\n                return i\n    return 0\n\n\n# +\n# Test Case 1\nnum1, num2 = 2, 4\n\n# expected result\nexpected_result = 2\n\n# function call\nactual_result = num_comm_div(num1, num2)\n\n# assertion to check if the function behaves as expected", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num_1, num_2):\n    return num_1 if num_1%num_2 == 0 else num_2 if num_2%num_1 == 0 else 1\n\n# Test Cases", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a, b):\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\ndef num_comm_div2(a, b):\n    c = a % b\n    while c:\n        a, b = b, c\n        c = a % b\n    return b\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a, b):\n    \"\"\"\n    Find the common divisor of two numbers in a given pair\n    >>> num_comm_div(2,4) == 2\n    >>> num_comm_div(6,10) == 2\n    >>> num_comm_div(4,2) == 2\n    >>> num_comm_div(6,2) == 2\n    >>> num_comm_div(8,3) == 1\n    >>> num_comm_div(1,1) == 1\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return a\n    elif a < b:\n        return num_comm_div(a, b-a)\n    else:\n        return num_comm_div(a-b, b)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    i = 0\n    while(a != 0 and b != 0):\n        if(a > b):\n            a = a - b\n        else:\n            b = b - a\n        i = i+1\n    return i\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n\treturn a%b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(x,y):\n    return x % y\n\ndef test_find():\n    assert find(3,3) == 0\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    if a>b:\n        return find(a-b, b)\n    else:\n        return a", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# 1. Implement remainder operator %\n# 2. Use assert\n\ndef find(n, m):\n    remainder = n % m\n    return remainder\n\ndef test():\n    assert find(3,3) == 0\n    print(\"All tests passed!\")\n\ntest()\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(num1, num2):\n    return num1%num2\n\ndef find_remainder(num1, num2):\n    if num2 == 0:\n        print(\"Can not divide by zero\")\n    else:\n        print(num1%num2)\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    return a%b\n\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    assert type(a)==int and type(b)==int\n    c = a%b\n    return c\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a, b):\n\treturn a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    return a%b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(my_list):\n    \"\"\"This function takes a list as input, and iterates over it, adding\n    consecutive numbers. It returns the list with the consecutive numbers\n    added, and the sum of all the numbers added.\n\n    Keyword arguments:\n    my_list -- a list of integers\n\n    Returns:\n    A list with the consecutive numbers added, and the sum of the numbers added\n    \"\"\"\n\n    result = []\n\n    # Iterate over the list, adding the consecutive numbers\n    # to a new list called result. The first two numbers will be the\n    # first and second numbers in the list, so the result list will\n    # start with [1, 1].\n    #\n    # Use the index values to decide which numbers to add. The index of\n    # the first number is 0, so the second number in the list is index 1.\n    #\n    # If the second number is the same as the first number, add it to the\n    # result list.\n    #\n    # If the second number is different from the first, add the first number\n    # to the result list, and add the second number to the result list.\n\n    for i in range(len(my_list)-1):\n        if my_list[i] == my_list[i+1]:\n            result.append(my_list[i])\n\n        else:\n            result.append(my_list[i])\n            result.append(my_list[i+1])\n\n\n    # The last number in the list is the last number in the result list.\n    # Add the last number to the result list.\n\n    result.append(my_list[-1])\n\n    # Return the result list.\n\n    return result\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    return [num + num+1 for num in nums]\n\ndef add_consecutive_nums_other(nums):\n    if not nums:\n        return []\n    else:\n        return [num + num+1 for num in nums[:-1]] + [nums[-1]]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\nimport unittest\nfrom typing import List\n\n\ndef add_consecutive_nums(numbers: List[int]) -> List[int]:\n    res = []\n    for i in range(0, len(numbers) - 1):\n        res.append(numbers[i] + numbers[i+1])\n    return res\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(list_):\n    \"\"\"\n    >>> add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n    [2, 4, 7, 8, 9, 11, 13]\n    \"\"\"\n    previous = 0\n    for index in range(len(list_)):\n        previous = list_[index]\n        list_[index] = previous + 1\n    return list_\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(array):\n    \"\"\"\n    Add the numbers that are consecutive in a list.\n    Args:\n        array (list): A list of integers.\n    Returns:\n        list: A list of integers.\n    \"\"\"\n    if len(array) == 1:\n        return array\n    else:\n        new_array = []\n        for i in range(len(array)-1):\n            new_array.append(array[i]+array[i+1])\n        return new_array\n\ndef main():\n    array = [1, 1, 3, 4, 4, 5, 6, 7]\n    print(add_consecutive_nums(array))\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return [nums[0] + 1]\n    else:\n        return [nums[i-1] + nums[i] for i in range(1, len(nums))]\n\n# Add your code here\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(num_list):\n    new_num_list = []\n    for i in range(len(num_list) - 1):\n        new_num_list.append(num_list[i] + num_list[i+1])\n    return new_num_list\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    out = []\n    for i in range(len(nums)-1):\n        out.append(nums[i] + nums[i+1])\n    return out\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(arr):\n    if not arr:\n        return arr\n    arr = sorted(arr)\n    res = []\n    for i in range(len(arr)):\n        res.append(arr[i] + arr[i+1])\n    return res\n\n\n# in-place version\ndef add_consecutive_nums_in_place(arr):\n    if not arr:\n        return arr\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        arr[i] += arr[i+1]\n    return arr\n\n\n# test cases", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(l):\n    return [e + f for e, f in zip(l, l[1:])]\n\ndef test_add_consecutive_nums():\n    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]) == [2, 4, 7, 8, 9, 11, 13]\n    assert add_consecutive_nums([1, 3, 5]) == [4, 8]\n    assert add_consecutive_nums([1]) == []\n    assert add_consecutive_nums([]) == []\n\n# Tests\ntest_add_consecutive_nums()\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    \"\"\"\n    :param n: int, the first n natural numbers sum up.\n    :return: int\n    \"\"\"\n    total = 0\n    for x in range(1, n+1):\n        total += x*x*x\n    return total\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return (n**3+n**2+n)/6\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    find the cube sum of first n natural numbers.\n    :param n:\n    :return:\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n\n    return total\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n\t'''\n\tsum = 1*2*3*4*5\n\t'''\n\tsum = 1\n\tfor i in range(n):\n\t\tsum *= i + 1\n\treturn sum\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return (n * (n + 1) * (2*n + 1)) // 6\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n\tsum = 0\n\tfor i in range(n+1):\n\t\tsum += i**3\n\treturn sum\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n\ti = 0\n\tsum = 0\n\twhile i <= n:\n\t\tsum += i**3\n\t\ti += 1\n\treturn sum\n\n# if __name__ == '__main__':\n# \tprint sum_Of_Series(5)\n# \tprint sum_Of_Series(100)\n# \tprint sum_Of_Series(1000)\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return sum(range(1, n+1)**3)\n\n# ## List comprehension\n\n# ### Sum of all numbers in a list\n\ndef sum_of_list(a_list):\n    return sum(a_list)\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    return sum([i**3 for i in range(1,n+1)])\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\n# Time: O(N)\n# Space: O(1)\n\ndef re_order(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        if arr[start] == 0 and arr[end] != 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            end -= 1\n        start += 1\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    # Write your code here\n    if len(arr) == 0:\n        return []\n    else:\n        new_arr = []\n        index = 0\n        while index < len(arr):\n            if arr[index] == 0:\n                new_arr.append(0)\n                arr.pop(index)\n                index = 0\n            else:\n                new_arr.append(arr[index])\n                index += 1\n\n        while len(arr) > 0:\n            new_arr.append(arr[0])\n            arr.pop(0)\n\n        return new_arr\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(my_list):\n    i, j = 0, len(my_list)-1\n    while i < j:\n        while i < j and my_list[i] != 0:\n            i += 1\n        while i < j and my_list[j] == 0:\n            j -= 1\n        if i < j:\n            my_list[i], my_list[j] = my_list[j], my_list[i]\n    return my_list\n\n\n# -\n\nre_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n\n# ## Euler Problem 64\n\n# +", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(array):\n    zeros = []\n    for i in array:\n        if i == 0:\n            zeros.append(i)\n        pass\n    while zeros:\n        array.append(zeros.pop())\n    pass\n    return array\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef move_zeros(arr: list):\n    i = 0\n    while i < len(arr):\n        if arr[i] == 0:\n            j = i + 1\n            while j < len(arr):\n                if arr[j] != 0:\n                    break\n                j += 1\n            if j == len(arr):\n                del arr[i]\n                continue\n            arr[i], arr[j - 1] = arr[j - 1], arr[i]\n        i += 1\n    return arr\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    new_arr = []\n    for elem in arr:\n        if elem == 0:\n            new_arr.append(elem)\n    for elem in arr:\n        if elem != 0:\n            new_arr.append(elem)\n    return new_arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(array):\n    \"\"\"Return a new array with the zeroes moved to the end.\"\"\"\n    array = list(array)\n    # The last index of the zero is the index of the last non-zero\n    last_zero = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            last_zero = i\n    # Swap the last non-zero with the zero at the end of the array\n    array[last_zero], array[len(array)-1] = array[len(array)-1], array[last_zero]\n    # Swap any zeros in the middle of the array\n    for i in range(len(array)-2, -1, -1):\n        if array[i] == 0:\n            array[i], array[i+1] = array[i+1], array[i]\n    return array\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\nfrom typing import List\n\n\ndef re_order(data: List[int]) -> List[int]:\n    \"\"\"\n    :param data: input data\n    :return: sorted array\n    \"\"\"\n    left = 0\n    right = len(data) - 1\n    while left < right:\n        while left < right and data[left] != 0:\n            left += 1\n        while left < right and data[right] == 0:\n            right -= 1\n        if left < right:\n            data[left], data[right] = data[right], data[left]\n    return data\n\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    pass\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom functools import reduce\n\ndef permutation_coefficient(n, k):\n    return reduce(lambda x,y: x*y, range(n+1-k), 1) / reduce(lambda x,y: x*y, range(k), 1)\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n\treturn factorial(n) / factorial(n-k)\n\ndef factorial(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Returns the permutation coefficient of given p(n, k).\n    p(n, k) = n! / (k! * (n - k)!)\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nimport math\n\ndef permutation_coefficient(n, k):\n    if n == 0:\n        return 1\n    if k > n:\n        return 0\n\n    factorial = math.factorial(n)\n    numerator = factorial // math.factorial(n - k)\n    denominator = factorial // math.factorial(k)\n    return numerator // denominator\n\n# Tests", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nfrom operator import mul\nfrom functools import reduce\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    >>> permutation_coefficient(10, 2)\n    90\n    \"\"\"\n    return reduce(mul, range(1, k + 1), 1) * reduce(mul, range(n - k + 1, n + 1), 1) // reduce(mul, range(1, n + 1), 1)\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n\tif n == 0: return 1\n\treturn permutation_coefficient(n - 1, k) * (n - k + 1)\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    assert isinstance(n, int) and isinstance(k, int)\n    assert k <= n\n\n    p = 1\n    for i in range(k):\n        p *= n-i\n    return p\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nimport itertools\nimport functools\n\ndef permutation_coefficient(p: int, k: int) -> int:\n    permutation_factors = list(itertools.combinations_with_replacement(range(p), k))\n    permutation_factors_sum = functools.reduce(lambda x, y: x * y, permutation_factors, 1)\n    return permutation_factors_sum\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\nfrom typing import List\n\n\ndef remove_words(words: List[str], words_to_remove: List[str]) -> List[str]:\n    \"\"\"\n    :param words: a list of words\n    :param words_to_remove: a list of words to remove\n    :return: a list of words without the words_to_remove\n    \"\"\"\n    # Write your solution here\n    new_words = list(set(words) - set(words_to_remove))\n    return new_words\n\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words_list, words_to_remove):\n    for word in words_to_remove:\n        words_list.remove(word)\n    return words_list\n\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\ndef test_remove_words():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\ndef test_remove_words_2():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white','black'])==['red', 'green', 'blue', 'orange']\n\ndef test_remove_words_3():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],[])==['red', 'green', 'blue', 'white', 'black', 'orange']\n\ndef test_remove_words_4():\n    assert remove_words([],[])==[]\n\ndef test_remove_words_5():\n    assert remove_words([],['white','black'])==[]\n\ndef test_remove_words_6():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white','black','blue'])==['red', 'green', 'orange']\n\ndef test_remove_words_7():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['green','orange','blue'])==['red', 'white', 'black']\n\ndef test_remove_words_8():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['green','orange','blue','white','black'])==[]\n\ndef test_remove_words_9():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['red','green','blue'])==['white', 'black', 'orange']\n\n# Test cases\ntest_remove_words()\ntest_remove_words_2()", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(lst,words):\n    for w in words:\n        if w in lst:\n            lst.remove(w)\n    return lst\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(lst,words):\n    lst_new = []\n    for word in lst:\n        if word not in words:\n            lst_new.append(word)\n    return lst_new\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(list_to_remove_from, words_to_remove):\n    for word in words_to_remove:\n        list_to_remove_from.remove(word)\n    return list_to_remove_from\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words,remove_words):\n    # TODO: write your solution here\n    new_words = []\n    for word in words:\n        if word not in remove_words:\n            new_words.append(word)\n    return new_words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(word_list,remove_words):\n    return list(filter(lambda word: word not in remove_words,word_list))\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\n# Given a list of strings, return a new list with words that are not in the second list removed.\n\ndef remove_words(l1, l2):\n    return [word for word in l1 if word not in l2]\n\n#print(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange']))\n\n\n#Given a list of strings, return a new list with all words in the first list in alphabetical order.\n\ndef order_words(l1):\n    return sorted(l1)\n\n#print(order_words(['red', 'green', 'blue', 'white', 'black', 'orange']))\n\n# Given a list of strings, return a new list with all words in the first list in alphabetical order.\n# Then return a new list with all duplicate words removed.\n\ndef unique_words(l1):\n    unique = order_words(l1)\n    unique.reverse()\n    return unique\n    \n#print(unique_words(['red', 'green', 'blue', 'white', 'black', 'orange', 'red', 'green']))\n\n# Given a list of strings, return a new list with all words in the first list in alphabetical order.\n# Then return a new list with all duplicate words removed.\n# Finally, return a new list with all words that are anagrams of some word in the second list.\n\ndef remove_anagrams(l1, l2):\n    unique = unique_words(l1)\n    unique2 = unique_words(l2)\n    final = []\n    for word in unique:\n        for word2 in unique2:\n            if word2 == word:\n                break\n            else:\n                if word == word2[::-1]:\n                    final.append(word)\n    return final\n\n#print(remove_anagrams(['red', 'green', 'blue', 'white', 'black', 'orange'], ['dog', 'god', 'red']))\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words,to_remove):\n    return list(filter(lambda word: word not in to_remove, words))\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    \"\"\"\n    Check whether the elements of list1 and list2 are in the same order or not.\n    If they are in the same order, return True, else return False.\n    \"\"\"\n    if len(list1) != len(list2):\n        return False\n    else:\n        list1_index = 0\n        list2_index = 0\n        while list1_index < len(list1) and list2_index < len(list2):\n            if list1[list1_index] != list2[list2_index]:\n                return False\n            list1_index += 1\n            list2_index += 1\n        return True\n\ndef main():\n    print(same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"]))\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n\tif len(list1)!=len(list2):\n\t\treturn False\n\treturn sorted(list1)==sorted(list2)\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1, l2):\n    l1_sorted = sorted(l1)\n    l2_sorted = sorted(l2)\n    if l1_sorted==l2_sorted:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(lst1,lst2):\n    if len(lst1)==len(lst2) and sorted(lst1)==lst2:\n        return True\n    return False\n\n\ndef test_same_order():\n    assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n    assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\"])==False\n\ntest_same_order()\n\n\n# +", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1, l2):\n    return sorted(l1) == sorted(l2)\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n    return True", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(lst1, lst2):\n    if len(lst1)!=len(lst2):\n        return False\n    \n    lst1.sort()\n    lst2.sort()\n    for i in range(len(lst1)):\n        if lst1[i]!=lst2[i]:\n            return False\n    return True\n\n#assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n#assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"black\",\"green\",\"white\",\"black\"])==False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    \"\"\"\n    Takes two lists and checks if they have the same elements\n    \"\"\"\n    if len(list1)==len(list2)==0:\n        return True\n    \n    if list1[0]!=list2[0]:\n        return False\n    \n    return same_order(list1[1:],list2[1:])\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n\n    if len(list1)!= len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n\n    return True\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1,l2):\n    return l1==l2 or l1==sorted(l1) or l2==sorted(l2)\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n# +\n# Solution\n\ndef average_Odd(n):\n    average = 0\n    if n >= 1:\n        for i in range(1,n+1):\n            if i % 2 != 0:\n                average = average + i\n        return average\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_odd(num):\n\ttotal = 0\n\tfor i in range(1, num):\n\t\tif i%2 != 0:\n\t\t\ttotal += i\n\treturn total/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    \"\"\"\n    Return average of odd numbers till n\n    \"\"\"\n    odd_sum = 0\n    count = 0\n    if(n%2 != 0):\n        count = n\n    else:\n        count = n-1\n    for i in range(1,count+1,1):\n        if(i%2 != 0):\n            odd_sum = odd_sum + i\n    average_odd = odd_sum/count\n    return average_odd\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(num):\n  i=1\n  sum=0\n  while i<=num:\n    if i%2==1:\n      sum+=i\n    i+=1\n  return sum/2\n\n#test case\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n\tif n < 0:\n\t\treturn -1\n\telse:\n\t\todd_number = 0\n\t\tfor i in range(1, n, 2):\n\t\t\todd_number += i\n\t\treturn odd_number/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(number):\n    sum = 0\n    for i in range(1,number+1):\n        if i%2 != 0:\n            sum += i\n    return sum/2\n\n#Test", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_odd(number):\n    if number <= 0:\n        print('Invalid number')\n    else:\n        number_of_odd_numbers = 0\n        sum_odd_numbers = 0\n        for x in range(1,number+1):\n            if x % 2 != 0:\n                number_of_odd_numbers += 1\n                sum_odd_numbers += x\n        print(\"Average of odd numbers till {} is {} and no. of odd numbers is {}\".format(number, sum_odd_numbers/number_of_odd_numbers, number_of_odd_numbers))\n\n\naverage_odd(9)\naverage_odd(-1)\n\n\n# +", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    if n%2 == 0:\n        return 0\n    sum_of_odd = 0\n    while n>0:\n        if n%2 != 0:\n            sum_of_odd += n\n        n = n - 2\n    return sum_of_odd/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    even = 0\n    odd = 0\n    i = 1\n    while(i <= n):\n        if i % 2 != 0:\n            odd += i\n        else:\n            even += i\n        i += 1\n    return (odd + even) // 2\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\n# Solution - Solution 2 (not using recursion)\n\ndef no_of_subsequences_sol2(arr, k):\n    \"\"\"\n    using hashset\n    \"\"\"\n    n = len(arr)\n    count = 0\n    s = set()\n    for i in range(n):\n        for j in range(i, n):\n            s.add(arr[i]*arr[j])\n    \n    for x in s:\n        if x<k:\n            count += 1\n    \n    return count\n\n# Solution - Solution 3 (using recursion)\n\ndef no_of_subsequences_sol3(arr, k):\n    \"\"\"\n    using recursive approach\n    \"\"\"\n    n = len(arr)\n    count = 0\n    s = set()\n    for i in range(n):\n        for j in range(i, n):\n            s.add(arr[i]*arr[j])\n    \n    for x in s:\n        if x<k:\n            count += 1\n    \n    return count\n\n# Solution - Solution 4 (using dynamic programming)\n\ndef no_of_subsequences_sol4(arr, k):\n    \"\"\"\n    using dynamic programming approach\n    \"\"\"\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        dp[i] = 0\n        for j in range(i-1, -1, -1):\n            if arr[i-1] * arr[j] <= k:\n                dp[i] += dp[j]\n    \n    return dp[n]\n\n# Solution - Solution 5 (using DP)\n\ndef no_of_subsequences_sol5(arr, k):\n    \"\"\"\n    using DP\n    \"\"\"\n    n = len(arr)\n    dp = [0] * (k + 1)\n    \n    for i in range(n):\n        for j in range(k, arr[i], -1):\n            dp[j] += dp[j - arr[i]]\n    \n    return dp[k]\n\n# Solution - Solution 6 (using DP)\n\ndef", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    if len(arr) == 0:\n        return 0\n    \n    return dp(arr, k, 0, 0)\n\ndef dp(arr, k, i, s):\n    if s > k:\n        return 0\n    \n    if i == len(arr):\n        return 1 if s == k else 0\n    \n    return dp(arr, k, i+1, s) + dp(arr, k, i+1, s + arr[i])\n\narr = [1,2,3,4]\nk = 10", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\n# Idea:\n# Using backtracking and keeping track of the result in a dictionary.\n\ndef no_of_subsequences(A, k):\n\n    sub_dict = {}\n    result = 0\n    \n    def sub_sequence_helper(A, k, prefix, result, sub_dict):\n        if k < 0 or not A:\n            return\n\n        if k == 0:\n            result += 1\n            return\n\n        if prefix in sub_dict:\n            result += sub_dict[prefix]\n\n        for i in range(len(A)):\n            sub_sequence_helper(A[:i]+A[i+1:], k-A[i], prefix+str(A[i]), result, sub_dict)\n        \n        sub_dict[prefix] = result\n\n    sub_sequence_helper(A, k, '', result, sub_dict)\n    return result\n\n\n# Tests", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    res = [0] * len(arr)\n    if k < 0:\n        return 0\n    if not arr:\n        return 1\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] * arr[j] > k:\n                break\n            res[i] += res[j]\n    return res[-1]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=10**6)\ndef helper(arr, i, k):\n    # base case\n    if i == 0:\n        return 0\n\n    # if product of current elements is greater than k, then we dont need to consider current pair for further subsequences\n    if k // arr[i - 1] < 1:\n        return 0\n\n    # if product of current elements is less than k, then we need to find the number of subsequences having product less than k,\n    #  for current element, and sum of number of subsequences for current pair with all the remaining elements.\n    product = arr[i - 1]\n    no_of_subsequences_for_current_element = 1 + helper(arr, i - 1, k - product)\n    no_of_subsequences_for_current_pair = helper(arr, i - 1, k)\n\n    return no_of_subsequences_for_current_element + no_of_subsequences_for_current_pair\n\n\ndef no_of_subsequences(arr, k):\n    return helper(arr, len(arr), k)\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nimport unittest\nfrom math import factorial\n\n\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = 0\n            else:\n                if arr[i - 1] < j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\n# Time: O(N) Space: O(1)\ndef no_of_subsequences(arr, k):\n  # The dp[i] represents the number of subsequences which product is smaller than k for arr[0..i-1]\n  dp = [0] * (len(arr) + 1)\n  # initialize the first row with 1\n  dp[0] = 1\n  # calculate all the elements for the dp array\n  for i in range(1, len(arr) + 1):\n    for j in range(1, i + 1):\n      # if the product is less than the k\n      if dp[j - 1] * arr[i - 1] <= k:\n        # increment the number of subsequences in dp array\n        dp[i] += dp[j - 1]\n  return dp[len(arr)]\n\n# Driver code\narr = [1, 2, 3, 4]\nk = 10", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = 1\n    \n    for i in range(n):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if arr[i-1] <= j:\n                dp[i][j] += dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i][j]\n    \n    return dp[-1][-1]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(array, k):\n\tif len(array) == 0:\n\t\treturn 0\n\tif array[0] <= k:\n\t\treturn 1\n\treturn no_of_subsequences(array[1:], k) + no_of_subsequences(array, k - array[0])\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\n# iterative solution\n# time complexity: O(N^2), space complexity: O(N)\ndef no_of_subsequences_iterative(arr, k):\n    n = len(arr)\n    # the product of subsequences ending with arr[i]\n    p = [0 for _ in range(n)]\n    # the number of subsequences ending with arr[i]\n    count = [0 for _ in range(n)]\n    # the number of subsequences ending with arr[i] and having product less than k\n    count_small = 0\n\n    # base case: arr[0] is the last element\n    p[0] = arr[0]\n    count[0] = 1\n    count_small = count[0]\n    for i in range(1, n):\n        p[i] = p[i-1] * arr[i]\n        count[i] = count[i-1] + 1\n        if p[i] <= k:\n            count_small += count[i]\n\n    return count_small\n\n# recursive solution\n# time complexity: O(N^2), space complexity: O(N)\ndef no_of_subsequences_recursive(arr, k, i, product, count_small):\n    n = len(arr)\n\n    if i == n:\n        return 0\n    else:\n        product = product * arr[i]\n        count_small += count_small_temp\n        count_small_temp = 0\n        count_small_temp += no_of_subsequences_recursive(arr, k, i+1, product, count_small_temp)\n        if product <= k:\n            count_small_temp += no_of_subsequences_recursive(arr, k, i+1, product, count_small_temp)\n        return count_small + count_small_temp\n"]]