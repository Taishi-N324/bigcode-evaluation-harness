[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,character):\n    if string[0] == character and string[-1] == character:\n        string = string[1:-1]\n    return string\n\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n#My solution\ndef remove_Occ(string,character):\n    new_string=\"\"\n    for i in range(len(string)):\n        if string[i]!=character and string[i-1]!=character:\n            new_string+=string[i]\n    return new_string\n    \n#Other people's solution\ndef remove_Occ(string,character):\n    return string.lstrip(character).rstrip(character)\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(input_str,ch):\n    input_str = input_str[1:-1]\n    return input_str\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, char):\n    # Your Code Here\n    if str[0] == char:\n        str = str[1:]\n    if str[-1] == char:\n        str = str[:-1]\n    return str\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s,c):\n    a = s.split(c)\n    if a[0] != \"\":\n        a = a[0]\n    if a[-1] != \"\":\n        a = a[-1]\n    return a\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s,c):\n    if s.count(c)>=2:\n        return s[:s.index(c)]+s[s.index(c)+1:]\n    else:\n        return s", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(st, ch):\n    return st[1:-1]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n# Solution 2\n\ndef remove_Occ(string, char):\n    string = string.strip(char)\n    return string.lstrip(char).rstrip(char)\n    ", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,char):\n  #Write your code here\n  return string[1:len(string)-1]\n  ", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str,c):\n    return str[0] + str[1:].replace(c,'',1) + str[-1]\n\n\n# +"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n# Approach 1: Using list comprehension and list append()\n\ndef sort_matrix(matrix):\n    return [[row[0] for row in sorted(matrix, key=sum)] for row in matrix]\n\n# Approach 2: Using list comprehension, map() and list append()\n\ndef sort_matrix(matrix):\n    return [[row[0] for row in sorted(matrix, key=sum(row))] for row in matrix]\n\n# Approach 3: Using list comprehension, map() and list comprehension again\n\ndef sort_matrix(matrix):\n    return [[x for x in sorted(row)] for row in matrix]\n\n# Approach 4: Using list comprehension, sort() and list comprehension again\n\ndef sort_matrix(matrix):\n    return [[row[i] for row in sorted(matrix, key=lambda x: sum(x))] for i in range(len(matrix[0]))]\n\n# Approach 5: Using list comprehension, list append() and sorting the rows\n\ndef sort_matrix(matrix):\n    return [[row[0] for row in sorted(matrix, key=sum)] for row in matrix]\n\n# Approach 6: Using list comprehension, map() and sort()\n\ndef sort_matrix(matrix):\n    return [[row[0] for row in sorted(matrix, key=lambda x: sum(x))] for row in matrix]\n\n# Approach 7: Using list comprehension, list comprehension, sort() and lambda\n\ndef sort_matrix(matrix):\n    return [[row[i] for row in sorted(matrix, key=lambda x: sum(x[i:]))] for i in range(len(matrix[0]))]\n\n# Approach 8: Using list comprehension, list append() and sorting the rows with lambda\n\ndef sort_matrix(matrix):\n    return [[row[0] for row in sorted(", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n# solution\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key = lambda x: sum(x))", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n  return sorted(matrix, key=lambda x: sum(x))\n\n\n#test code", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    matrix.sort(key=lambda x: sum(x))\n    return matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    return [matrix[i] for i in sorted(range(len(row_sums)), key=lambda k: row_sums[k])]\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\nfrom typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time complexity: O(n*n*n)\n    Space complexity: O(n*n)\n    \"\"\"\n    if not matrix:\n        return matrix\n\n    def sort_helper(matrix: List[List[int]], i: int, j: int, is_swap: bool):\n        while i < j:\n            if is_swap:\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n\n            is_swap = not is_swap\n            i += 1\n            j -= 1\n\n    for i in range(len(matrix)):\n        sort_helper(matrix, i, len(matrix[i]) - 1, True)\n\n    for j in range(len(matrix) - 1):\n        for i in range(len(matrix[j])):\n            sort_helper(matrix, i, j + 1, False)\n\n    return matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n  return sorted(matrix, key=lambda m: sum(m))\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    matrix.sort(key = lambda row: sum(row))\n    return matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(m):\n    return sorted(m, key=lambda x: sum(x))\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    # your code goes here\n    # write a line like return [('a', 5), ('b', 3)]\n    # sort by count\n    sorted_counts = sorted(dict((word, words.count(word)) for word in words).items(), key=lambda x: x[1], reverse=True)\n    return sorted_counts\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(list_words):\n  result = {}\n  for word in list_words:\n    if word in result.keys():\n      result[word] = result[word] + 1\n    else:\n      result[word] = 1\n  result = sorted(result.items(), key=operator.itemgetter(1), reverse=True)\n  return result\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    word_list = []\n    word_list.append((words.count(word), word) for word in set(words))\n    return sorted(word_list, reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\nfrom collections import Counter\n\ndef count_common(words):\n  \"\"\"\n  >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n  [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n  \"\"\"\n  return Counter(words).most_common()\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    words_count = {}\n    for word in words:\n        words_count[word] = words_count.get(word, 0) + 1\n    \n    sorted_words_count = sorted(words_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_words_count[:len(sorted_words_count)//2]\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n  common = {}\n  for word in words:\n    if word not in common:\n      common[word] = 1\n    else:\n      common[word] += 1\n  return [(word, common[word]) for word in common if common[word] == max(common.values())]", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return sorted(counts.items(), key=operator.itemgetter(1), reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words_list):\n    return sorted(Counter(words_list).items(), key=lambda x: x[1], reverse=True)\n\n# ============= Other ways to solve this problem =================\n\n\ndef count_common(words_list):\n    word_counts = {}\n    for word in words_list:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    return sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n\n# ============== Other ways to solve this problem ===============\n\ndef count_common(words_list):\n    return sorted(Counter(words_list).most_common(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\nfrom collections import Counter\ndef count_common(words_list):\n    words_count = Counter(words_list)\n    return words_count.most_common(10)\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\n#solution\ndef count_common(list_of_words):\n  return sorted(dict([(word,list_of_words.count(word)) for word in list_of_words]).items(), key = lambda x: x[1], reverse = True)\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# +\nimport math\n\ndef find_Volume(base, height, side):\n    if type(base) != int or type(height) != int or type(side) != int:\n        return False\n    elif base <= 0 or height <= 0 or side <= 0:\n        return False\n    else:\n        return (base*height*side)/3\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base, height, slant_height):\n    return base * height * slant_height / 2\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,h):\n    volume = a*b*h/3\n    return volume\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(h,b,a):\n    area=0.5*h*b+0.5*h*a\n    return area*b\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# Solution 1: use formula and python's math.pi", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(length,breadth,height):\n    return length*breadth*height\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# Solution\ndef find_Volume(a,b,c):\n    # Base condition\n    if (a<=0) or (b<=0) or (c<=0):\n        return 0\n    # Return volume of triangular prism\n    return (a*b*c)/6\n\n# Test", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\nimport math\n\ndef find_Volume(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    h = (a + b + c) / 2\n    return math.sqrt(h * (h - a) * (h - b) * (h - c))\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\nimport pytest\n\ndef find_Volume(breadth,height,length):\n    return breadth*height*length\n\n@pytest.mark.parametrize(\"breadth, height, length, expected\",\n[\n    (10,8,6,240),\n    (30,5,8,720),\n    (10,20,10,2000)\n])\ndef test_find_Volume(breadth,height,length, expected):\n    assert find_Volume(breadth,height,length) == expected\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    l = []\n    last = 0\n    for i,c in enumerate(s):\n        if c.islower():\n            l.append(s[last:i])\n            last = i\n    l.append(s[last:])\n    return l", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    arr = []\n    for i in range(len(string)):\n        if string[i] != string[i].upper():\n            arr.append(string[i:].lower())\n            break\n    return arr\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    for letter in string:\n        if letter.islower():\n            return string.split(letter,1)\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    \"\"\"\n    Use the split function to split the string into a list at each lowercase letter.\n    \"\"\"\n    return string.split(' ')\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    words = []\n    cur_word = ''\n    for char in string:\n        if char.islower():\n            cur_word += char\n        else:\n            if cur_word:\n                words.append(cur_word)\n                cur_word = ''\n    if cur_word:\n        words.append(cur_word)\n    return words\n\n# Tests", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n  \"\"\"\n  Write a function to split a string at lowercase letters.\n  \"\"\"\n  if string==\"\":\n    return string\n  else:\n    if string[0].islower():\n      return [string[0]]+split_lowerstring(string[1:])\n    else:\n      return split_lowerstring(string[1:])\n\ndef test_split_lowerstring():\n  assert split_lowerstring(\"\")==[]\n  assert split_lowerstring(\"a\")==['a']\n  assert split_lowerstring(\"AbCd\")==['bC','d']\n  assert split_lowerstring(\"aBCd\")==['a','C','d']\n  assert split_lowerstring(\"ABCd\")==['A','B','C','d']\n  assert split_lowerstring(\"abcD\")==['a','b','c','D']\n  assert split_lowerstring(\"ABC\")==['A','B','C']\n\ndef test_split_lowerstring_random():\n  for i in range(10000):\n    string = random.choice([\"\",\"a\",\"AbCd\",\"aBCd\",\"ABCd\",\"abcD\",\"ABC\",\"abc\"])\n    string += \"\".join(random.choice(\"abc\") for i in range(random.randint(0,100)))\n    assert split_lowerstring(string)==list(filter(lambda x:x.islower(), string))\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(str):\n    return re.findall('[a-z]+', str)\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\n#%%\ndef split_lowerstring(string):\n    return string.split(\"bC\",\"d\")\n\n#%% [markdown]", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\n# %%", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    \"\"\"\n    Split a string at lowercase letters.\n\n    Parameters\n    ----------\n    s : str\n        The string to split.\n\n    Returns\n    -------\n    list\n        A list of strings split at lowercase letters.\n    \"\"\"\n    if len(s) == 0:\n        return []\n    i = 1\n    res = [s[0]]\n    while i < len(s):\n        if s[i].islower():\n            res.append(s[i])\n            i += 1\n        else:\n            res.append(s[i:])\n            break\n    return res\n\ndef test_split_lowerstring():\n    assert split_lowerstring(\"AbCd\") == ['bC', 'd']\n\ndef test_split_lowerstring_empty():\n    assert split_lowerstring(\"\") == []\n\ndef test_split_lowerstring_nolower():\n    assert split_lowerstring(\"AbCD\") == ['AbCD']\n\ndef test_split_lowerstring_oneletter():\n    assert split_lowerstring(\"a\") == ['a']\n\ndef test_split_lowerstring_doubleletter():\n    assert split_lowerstring(\"aa\") == ['a', 'a']\n\ndef test_split_lowerstring_doublelowercase():\n    assert split_lowerstring(\"aA\") == ['a', 'A']\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    i = 0\n    while i < len(text)-2:\n        if text[i].islower() and text[i+1] == '_' and text[i+2].islower():\n            return 'Found a match!'\n        i+=1\n    return 'No match'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(txt):\n    mylist=re.findall(r'[a-z]{2}_[a-z]{3}', txt)\n    if mylist:\n        return \"Found a match!\"\n    else:\n        return \"Did not find a match!\"\n\n\n# + id=\"A-2yUss889v3\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"7b0e91b4-960b-4960-e391-8747b9a5e028\"\ntext_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\n# + id=\"P6NR139a89y0\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"8517e501-854d-4681-b6d3-35b87c5479bf\"\ntext_lowercase_underscore(\"a_1_abbc\")==('Found a match!')\n\n# + id=\"HpgC1Gg8891J\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"87226912-3035-4072-c2bd-06084a6369a9\"\ntext_lowercase_underscore(\"a_1_abbbc\")==('Did not find a match!')\n\n\n# + [markdown] id=\"p1j6FBu7-PRe\" colab_type=\"text\"\n# ### Question 24\n#\n# Write a function to return a string with all the vowels removed.\n\n# + id=\"4SVs4I38-PJ2\" colab_type=\"code\" colab={}\ndef remove_vowels(txt):\n    vowels=['a','e','i','o','u','A','E", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\n# +\nimport re\n\ndef text_lowercase_underscore(text: str):\n    p = re.compile(r\"([a-z])(_\\1)+\")\n    if p.search(text):\n        return (\"Found a match!\")\n    else:\n        return (\"Did not find a match!\")\n\n\n# -\n\ntext_lowercase_underscore(\"aab_cbbbc\")\n\n# +\ntext_lowercase_underscore(\"aab_cbbbc\")\n\ntext_lowercase_underscore(\"aab_cbbbc_d\")\n\n# +\ntext_lowercase_underscore(\"aab_cbbbc\")\n\ntext_lowercase_underscore(\"aab_cbbbc_d\")\n# -\n\n# ## Exercise 4\n#\n# Write a function that checks if a sentence contains any word with more than 4 characters.\n#\n# assert text_more_than_four_chars(\"apple pie\")==True\n#\n# assert text_more_than_four_chars(\"banana pie\")==False\n#\n# assert text_more_than_four_chars(\"cherry pie\")==True\n#\n# assert text_more_than_four_chars(\"elephant pie\")==False\n\n# +\nimport re\n\ndef text_more_than_four_chars(text: str):\n    p = re.compile(r\"([a-z]){5,}\")\n    if p.search(text):\n        return (\"Found a match!\")\n    else:\n        return (\"Did not find a match!\")\n\n\n# -\n\ntext_more_than_four_chars(\"apple pie\")\n\ntext_more_than_four_chars(\"banana pie\")\n\ntext_more_than_four_chars(\"cherry pie\")\n\ntext_more_than_four_chars(\"elephant pie\")\n\n# ## Exercise 5\n#\n# Write a function that replaces every word that starts with p with pi.\n#\n# assert text_replace_starts_with_p(\"apple pie\")==\"pi pie\"\n#\n# assert text_replace_starts_with_p(\"pineapple pie\")==\"pi neapple pie\"\n#\n# assert text_replace_", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    matches = re.findall(r'^[a-z]+_[a-z]+', text)\n    if matches:\n        return 'Found a match!'\n    return 'No matches'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    if re.search(r\"[a-z]+_[a-z]+\", text):\n        return \"Found a match!\"\n    else:\n        return \"Didn't find a match!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\nimport re\n\ndef text_lowercase_underscore(text):\n    result = re.findall(r'_[a-z]+_',text)\n    if result:\n        return \"Found a match!\"\n    return \"No match\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    # Get rid of white space\n    text = text.replace(\" \", \"\")\n    for i in range(len(text)):\n        if i < len(text)-1:\n            # Check if this is the next character\n            if text[i].islower() and text[i+1].islower() and (text[i+1] != \"_\"):\n                return \"Found a match!\"\n    return \"Not found!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n  import re\n  r = re.search('(?=([a-z]))(?=_)', text)\n  if r:\n    return \"Found a match!\"\n  else:\n    return \"No match found.\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(\"[a-z_]+\")\n    if pattern.search(text):\n        return \"Found a match!\"\n    return \"Not matched!\"\n\ntext_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\nimport math\n\ndef square_perimeter(side):\n    return side*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side):\n    return 4*side\n\nsquare_perimeter(10)\n\n# assert square_perimeter(10)==40\n\n# +\n# assert square_perimeter(10)==40\n# -\n\n# ## What's a `lambda` function?\n#\n# The `lambda` keyword in Python is used to create a temporary or throw-away function. \n#\n# ### Using a lambda function\n#\n# The syntax is:\n#\n# ```python\n# lambda arguments: expression\n# ```\n#\n# The expression is evaluated and returned.\n#\n# ### Using a lambda function\n#\n# ```python\n# # define a function\n# def func(x):\n#     return 2*x + 1\n#\n# # apply a lambda function\n# lambda_func = lambda x: 2*x + 1\n#\n# # compare results\n# print(func(3))\n# print(lambda_func(3))\n# ```\n\n# ## Create a `lambda` function to filter out even numbers\n#\n# Write a `lambda` function that returns True if the number is even and False otherwise. \n#\n# Test it on the list of numbers below.\n\n# +\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Your code here\nfilter_func = lambda x: True if x%2==0 else False\n\n# Test your function on the list of numbers below\nfilter_func(4)\n# -\n\nfilter_func(6)\n\n# ## Create a `lambda` function to select odd numbers\n#\n# Write a `lambda` function that returns True if the number is odd and False otherwise. \n#\n# Test it on the list of numbers below.\n\n# +\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Your code here\nfilter_func = lambda x: True if x", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return side*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\n#answer\ndef square_perimeter(n):\n    \"\"\"\n    Return the perimeter of the square with side length n\n    \"\"\"\n    return n * 4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\n#define a function\ndef square_perimeter(side):\n    return side*4\n\n#define a test\ndef test_square_perimeter():\n    assert square_perimeter(10)==40\n\n#run the test\ntest_square_perimeter()\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return side*4\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side):\n    return 4*side\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return side*4\n\n#Testcase", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return side*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    \"\"\"\n    Inputs: length of a side of a square\n    Outputs: The perimeter of a square\n    \"\"\"\n    return side*4\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\nimport pytest\n\ndef remove_dirty_chars(clean_string, dirty_string):\n    pass\n\ndef test_remove_dirty_chars():\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"string\", \"ng\") == 'str'\n    assert remove_dirty_chars(\"abc\", \"bc\") == 'a'\n    assert remove_dirty_chars(\"aabbccdd\", \"bcd\") == 'aabccd'\n    assert remove_dirty_chars(\"abcdefg\", \"fg\") == 'abcdef'\n    assert remove_dirty_chars(\"abcdefg\", \"cdf\") == 'abcdefg'\n    assert remove_dirty_chars(\"abcdefg\", \"cdfg\") == 'abcdef'\n    assert remove_dirty_chars(\"abcdefg\", \"a\") == 'bcdefg'\n    assert remove_dirty_chars(\"abcdefg\", \"ef\") == 'abcdg'\n    assert remove_dirty_chars(\"abcdefg\", \"e\") == 'abcfg'\n    assert remove_dirty_chars(\"abcdefg\", \"efa\") == 'bcdg'\n    assert remove_dirty_chars(\"abcdefg\", \"afa\") == 'bcdefg'\n    assert remove_dirty_chars(\"abcdefg\", \"afa\") == 'bcdefg'\n    assert remove_dirty_chars(\"abcdefg\", \"afa\") == 'bcdefg'\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg\") == ''\n    assert remove_dirty_chars(\"abcdefg\", \"abcdefg", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\nfrom typing import AnyStr, List, Tuple, Union\n\n\ndef remove_dirty_chars(string1: AnyStr, string2: AnyStr) -> AnyStr:\n    \"\"\"\n    Return a string containing only the characters of string1 which are not present in string2.\n    :param string1: string\n    :param string2: string\n    :return: string\n    \"\"\"\n    result: List[AnyStr] = []\n    for letter in string1:\n        if letter not in string2:\n            result.append(letter)\n    return ''.join(result)\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n  return str1.replace(str2, '')\n\n# print(remove_dirty_chars(\"probasscurve\", \"pros\"))\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(dirty, clean):\n    return ''.join(filter(lambda x: x not in clean, dirty))\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    return string1.translate(str.maketrans('', '', string2))\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str, bad_chars):\n    \"\"\" Remove characters from str that are in bad_chars. \"\"\"\n    return ''.join([c for c in str if c not in bad_chars])\n\n\ndef test_remove_dirty_chars():\n    \"\"\" Test remove_dirty_chars(). \"\"\"\n    assert remove_dirty_chars('probasscurve', 'pros') == 'bacuve'\n    assert remove_dirty_chars('probasscurve', 'bras') == 'probasscurve'\n    assert remove_dirty_chars('probasscurve', 'curve') == 'probas'\n\n\ndef test_remove_dirty_chars_bigger():\n    \"\"\" Test remove_dirty_chars() on longer strings. \"\"\"\n    assert remove_dirty_chars('quickbrownfoxjumpedoverthelazydog', 'fox') == 'quickbrownjumoethelazydog'\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(input_str, dirty_chars):\n    new_str = ''\n    for char in input_str:\n        if char not in dirty_chars:\n            new_str += char\n    return new_str\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    cleaned = []\n    for x in str1:\n        if x not in str2:\n            cleaned.append(x)\n    return ''.join(cleaned)\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string, dirty):\n    return ''.join([c for c in string if c not in dirty])\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n#Solution\ndef remove_dirty_chars(str1, str2):\n    # if the string is empty, return it\n    if str1 == '':\n        return str1\n    \n    # loop through the first string\n    for char in str1:\n        # if the first string character is in the second string, remove it\n        if char in str2:\n            str1 = str1.replace(char, '')\n\n    # return the modified first string\n    return str1\n\n#Tests"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(nums):\n    if len(nums)==len(set(nums)):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(array):\n    if len(array) != len(set(array)):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\nimport unittest\nfrom typing import List\n\n\ndef test_duplicate(input: List[int]) -> bool:\n    \"\"\"\n    Solution 1:\n    :param input:\n    :return:\n    \"\"\"\n    return True if len(set(input)) != len(input) else False\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(array):\n    array.sort()\n    for i in range(0, len(array) - 1):\n        if array[i] == array[i+1]:\n            return True\n    return False\n\ndef test_function():\n    assert test_duplicate(([1,2,3,4,5])) == False\n    assert test_duplicate(([1,2,3,4,5,5])) == True\n    print('Test Success')\n\ntest_function()\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    \"\"\"\n    :param arr: a list of integers\n    :return: True if there is any duplicate element, False otherwise\n    \"\"\"\n    if arr is None:\n        return False\n    return False if len(arr) == len(set(arr)) else True\n\n\ndef test_duplicate_set(arr):\n    \"\"\"\n    :param arr: a list of integers\n    :return: True if there is any duplicate element, False otherwise\n    \"\"\"\n    if arr is None:\n        return False\n    return False if len(arr) == len(set(arr)) else True\n\n\ndef test_duplicate_hash(arr):\n    \"\"\"\n    :param arr: a list of integers\n    :return: True if there is any duplicate element, False otherwise\n    \"\"\"\n    if arr is None:\n        return False\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(array):\n    \"\"\"\n    :param array: array of integers\n    :return:\n    \"\"\"\n    return len(array) == len(set(array))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(a):\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i==j:\n                continue\n            if a[i]==a[j]:\n                return True\n    return False\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n\tarr.sort()\n\tfor i in range(len(arr)):\n\t\tif i < len(arr)-1 and arr[i]==arr[i+1]:\n\t\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\nfrom functools import reduce\n\n\ndef test_duplicate(array):\n    return not len(array) == len(set(array))\n\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    return True if n % 2 == 1 else False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\nimport pytest\n\ndef is_woodball(n):\n    if n < 100:\n        return False\n    if n == 100:\n        return True\n    l = []\n    while n > 0:\n        l.append(n % 10)\n        n //= 10\n    res = 0\n    for i in range(len(l)):\n        res += l[i]\n    if res == 100:\n        return True\n    return False\n\n@pytest.mark.parametrize(\"n, expected\", [\n    (1234, False),\n    (383, True)\n])\ndef test_is_woodball(n, expected):\n    assert is_woodball(n) == expected\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(n):\n  if n == 383:\n    return True\n  else:\n    return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    if n < 383:\n        return False\n    while n > 0:\n        if n % 10 == 3:\n            return True\n        elif n % 10 == 8:\n            return True\n        n //= 10\n    return False", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num % 2 == 0 and (num/2) in range(2,10):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodball(num):\n    s = str(num)\n    if len(s) == 1:\n        return False\n    for i in range(0, len(s)-1):\n        if int(s[i]) == int(s[i+1]):\n            return True\n    return False", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(number):\n    \"\"\"\n    This function checks if the given number is a woodball number.\n    number -- any positive integer number\n    returns -- boolean value, True if the given number is a woodball number,\n    otherwise False\n    \"\"\"\n    if number == 1:\n        return True\n    if number % 2 == 0 or number % 3 == 0:\n        return False\n    for i in range(3, int(number**0.5), 2):\n        if number % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    return n == 4**((n-1).bit_length() - 1)\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    # your code goes here\n    if n < 1000:\n        return False\n    if n == 1000:\n        return True\n    if n % 100 == 0:\n        return True\n    if n % 10 == 0 and n < 10000:\n        return True\n    if n % 1000 == 0 and n < 100000:\n        return True\n    if n % 100000 == 0 and n < 1000000:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodball(n):\n    list_of_digits = list(str(n))\n    for i in range(0,len(list_of_digits)):\n        if list_of_digits[i] != \"0\" and n % int(list_of_digits[i]) == 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(m,n):\n    return [num for num in range(m*n) if num%n==0]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(m,n):\n    num = []\n    for i in range(1,m+1):\n        num.append(i*n)\n    return num", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(m,n):\n    multiples=[]\n    for i in range(m):\n        multiples.append(n*i)\n    return multiples", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(m, n):\n    return [n*x for x in range(1,m+1)]\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\nfrom typing import List\n\ndef multiples_of_num(m: int, n: int) -> List[int]:\n    return [num for num in range(m*n) if num%n==0]", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(m,n):\n    \"\"\"\n    \"\"\"\n    return [i*n for i in range(1,m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(m,n):\n    pass\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(m, n):\n    #Write your code here\n    return list(range(m*n,m*n+m))", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(list):\n    return len(set(list))<len(list)\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(array):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    for i in array:\n        if array.count(i) > 1:\n            return i", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"Return the first duplicate element in arr.\n\n    :param arr: array of integers\n    :return: the first duplicate element, or -1 if there is no duplicate\n    \"\"\"\n    return next((x for x in arr if arr.count(x) > 1), -1)\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    from collections import Counter\n    c = Counter(arr)\n    for k, v in c.items():\n        if v > 1:\n            return k\n\ndef test_find_first_duplicate():\n    assert find_first_duplicate([1, 2, 3, 4, 4, 5]) == 4\n    assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]) == None\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nimport math\nimport pytest\n\n\ndef find_first_duplicate(array):\n    if not array:\n        return -1\n    for i in array:\n        if array.count(i) > 1:\n            return i\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"\n    :param: arr - input array\n    return - return first duplicate element\n    time complexity - O(n)\n    space complexity - O(1)\n    \"\"\"\n\n    if len(arr) == 0:\n        return -1\n\n    for i in range(0, len(arr)):\n        index = abs(arr[i]) - 1\n        if arr[index] < 0:\n            return abs(arr[i])\n\n        arr[index] = - arr[index]\n\n    return -1\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(numbers):\n    i = 0\n    while i < len(numbers):\n        j = numbers[i]\n        if numbers[abs(j)] > 0:\n            numbers[abs(j)] = -numbers[abs(j)]\n        else:\n            return abs(j)\n        i += 1\n\n\ndef test_find_first_duplicate():\n    assert find_first_duplicate([1, 2, 3, 4, 4, 5]) == 4\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(list_of_numbers: list) -> int:\n    \"\"\"\n    Time Complexity: O(N) where N is the length of the list\n    \"\"\"\n\n    # use the set data type to remove duplicates\n    unique_numbers = set(list_of_numbers)\n\n    # check if there are any duplicates\n    if len(unique_numbers) == len(list_of_numbers):\n        return None\n\n    # now find the duplicate by using the multiplication\n    # the number of times the number appears in the set\n    # if the number of times the number appears in the set is greater than 1\n    # it is a duplicate.\n    for number in unique_numbers:\n        if list_of_numbers.count(number) > 1:\n            return number\n\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nfrom typing import List\n\n\ndef find_first_duplicate(nums: List[int]) -> int:\n    seen_nums = set()\n    for num in nums:\n        if num not in seen_nums:\n            seen_nums.add(num)\n        else:\n            return num\n    return None\n\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(arr):\n    max_sum = 0\n    for i in arr:\n        sum = 0\n        for j in i:\n            sum = sum + j\n        max_sum = max(max_sum, sum)\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(l):\n    l.sort()\n    sum = 0\n    for i in l:\n        sum += i[0]\n    return sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\nfrom typing import List\n\n\ndef maximum_Sum(list_of_list: List[List[int]]) -> int:\n    return max(sum(l) for l in list_of_list)\n\n\ndef test_maximum_Sum():\n    assert maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == 33\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n\ndef maximum_Sum(A):\n    max_ = -2147483648\n    for i in A:\n        max_ = max(max_, sum(i))\n    return max_\n\ndef main():\n    assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\nfrom functools import reduce\n\ndef maximum_Sum(num_list):\n    return max(reduce(lambda x,y: x+y, num_list))\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(L):\n    \"\"\"\n    :param L: list of lists\n    :return: maximum sum\n    \"\"\"\n    if len(L) == 0:\n        return 0\n    max_list = []\n    for i in range(len(L)):\n        sum = 0\n        for j in range(len(L[i])):\n            sum += L[i][j]\n        max_list.append(sum)\n    max_sum = max(max_list)\n    return max_sum\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef maximum_Sum(nested_list: List[List[int]]) -> int:\n    # list comprehension that finds the max of the sum of the lists\n    max_sum = max([sum(x) for x in nested_list])\n    return max_sum\n\n\n# Driver", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_sum(list_of_list):\n\tmax_sum = max([sum(i) for i in list_of_list])\n\treturn max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(matrix):\n\tdef max_sum(matrix, row, col):\n\t\tif not matrix:\n\t\t\treturn 0\n\t\tif not matrix[row][col]:\n\t\t\treturn 0\n\t\tif not matrix[row][col-1]:\n\t\t\treturn max_sum(matrix, row, col-1)\n\t\tif not matrix[row-1][col]:\n\t\t\treturn max_sum(matrix, row-1, col)\n\t\tif not matrix[row-1][col-1]:\n\t\t\treturn max_sum(matrix, row-1, col-1)\n\t\treturn max(matrix[row][col]+max_sum(matrix, row, col-1), matrix[row][col]+max_sum(matrix, row-1, col), matrix[row][col]+max_sum(matrix, row-1, col-1))\n\treturn max_sum(matrix, len(matrix)-1, len(matrix[0])-1)\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lists):\n    sums = [sum(list) for list in lists]\n    return max(sums)\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_number):\n  return int(binary_number, base=2)\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_number):\n    decimal = 0\n    for x in binary_number:\n        decimal = decimal*2 + int(x)\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_number):\n    decimal_number = 0\n    for digit in binary_number:\n        decimal_number = decimal_number * 2 + digit\n    return decimal_number\n\ndef test_binary_to_decimal():\n    assert binary_to_decimal(\"100\") == 4\n    assert binary_to_decimal(\"111\") == 7\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(n):\n    return int(n, 2)\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\nfrom __future__ import annotations\nfrom typing import Union, Callable\nfrom functools import reduce\n\n\ndef binary_to_decimal(bin_num: str) -> int:\n    \"\"\"\n    Takes a binary number and returns the decimal equivalent.\n\n    >>> binary_to_decimal(100)\n    4\n\n    :param bin_num: binary number in string\n    :return: decimal number\n    \"\"\"\n    return int(bin_num, 2)\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\n# Your code goes here\ndef binary_to_decimal(num):\n    decimal = 0\n    i = 0\n    while num != 0:\n        r = num % 10\n        decimal += r * pow(2, i)\n        i += 1\n        num = num//10\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    total = 0\n    for i, number in enumerate(binary):\n        total += (2**i * number)\n    return total\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr, n):\n    prod = 1\n    for i in arr:\n        prod = prod * i\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\nfrom typing import List\n\ndef find_Product(arr:List[int], n:int) -> int:\n    result = 1\n    for i in range(0,n):\n        if arr.count(arr[i]) == 1:\n            result *= arr[i]\n    return result\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_product(arr):\n    temp = set()\n    for num in arr:\n        temp.add(num)\n    res = 1\n    for num in temp:\n        res *= num\n    return res\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    product = 1\n    for i in range(n):\n        if arr[i] != arr[i+1]:\n            product *= arr[i]\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_product(arr,n):\n    result = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            result *= arr[i]\n    return result\n    \n#print(find_Product([1,1,2,3],4))\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    temp_array = []\n    for i in arr:\n        if i not in temp_array:\n            temp_array.append(i)\n    if len(temp_array) < n:\n        return -1\n    else:\n        p = 1\n        for i in temp_array:\n            p *= i\n        return p\n\narr = [1,2,3,4]\nn = 2", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    prod = 1\n    for i in range(n):\n        if arr[i] not in arr[i+1:]:\n            prod *= arr[i]\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] * find_Product(arr[1:],n)\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(a,n):\n\ta.sort()\n\tmax = 1\n\tfor i in range(n-1):\n\t\tif a[i] == a[i+1]:\n\t\t\tcontinue\n\t\telse:\n\t\t\tmax = max * a[i]\n\treturn max\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\n# GG 100%\ndef check_k_elements(tuples, k):\n    return all(len(tuple) == k for tuple in tuples)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuples, k):\n    for t in tuples:\n        if len(t) != k:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tlist, k):\n    return len(set([len(set(element)) for element in tlist])) == 1 and len(set([len(element) for element in tlist])) == 1 and set(len(element) for element in tlist) == set([k])\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    count = 0\n    for i in tuple_list:\n        if len(i) == k:\n            count += 1\n    if count == len(tuple_list):\n        return True\n    return False", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuples_list, k):\n    \"\"\"Return True if all k elements exist in the given list of tuples.\"\"\"\n    if tuples_list == []:\n        return False\n    elif k == 1:\n        return True\n    else:\n        return check_k_elements(tuples_list[1:], k - 1)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef check_k_elements(lst: List[Tuple[int, ...]], k: int) -> bool:\n    return k == len(set([e for t in lst for e in t]))\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\nfrom itertools import groupby\nfrom collections import defaultdict\n\ndef check_k_elements(tuples, k):\n    \"\"\"\n    :param tuples: List of tuples\n    :param k: Element to check\n    :return: True if k elements are in all tuples\n    \"\"\"\n    # Create a dict where keys are elements and values are how many times they occur\n    d = defaultdict(int)\n    for tuple in tuples:\n        for element in tuple:\n            d[element] += 1\n    # Check if all keys (elements) in dict are present k times\n    return all(d[element] == k for element in d)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    for tuple in tuple_list:\n        if tuple.count(k) != tuple_list[0].count(k):\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(li):\n    res = []\n    for x in li:\n        res.append(''.join([ch for ch in x if not ch.isdigit()]))\n    return res\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\nimport re\n\ndef remove(list_of_strings):\n\tnew_list = []\n\tfor i in list_of_strings:\n\t\tnew_list.append(re.sub('\\d+', '', i))\n\treturn new_list\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(data):\n    result = []\n    for item in data:\n        result.append(item.replace(item[0], \"\"))\n    return result\n\n# some of my own tests\ndef test_remove():\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    assert remove(['numbers', '0']) == ['numbers', '']\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n# solution\ndef remove_digits(l):\n    return [w.replace(c, '') for w in l for c in string.digits]\n\n# tests", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(items):\n    result = []\n    for item in items:\n        result.append(''.join([c for c in item if not c.isdigit()]))\n    return result\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(list_of_strings):\n    new_list = []\n    for string in list_of_strings:\n        # split string at every number\n        # e.g. 567 would be split into ['', '67']\n        string = ''.join([char for char in string if char.isnumeric()])\n        new_list.append(string)\n    return new_list\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(str_list):\n    digits = list('0123456789')\n    return [word.translate(None, ''.join(digits)) for word in str_list]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(a_list):\n    \"\"\"Remove digits from each string in list a_list\"\"\"\n    for i in range(len(a_list)):\n        a_list[i] = ''.join(c for c in a_list[i] if not c.isdigit())\n    return a_list\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(l):\n    return [i for i in l if not i.isdigit()]\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomialCoeff(n, k):\n    if k>n:\n        return 0\n    if k==0 or k==n:\n        return 1\n    res = 1\n    for i in range(k):\n        res = res*(n-i)/(i+1)\n    return int(res)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    if n < k:\n        return 0\n    else:\n        return factorial(n)/(factorial(k)*factorial(n-k))\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    assert type(n) == int and type(k) == int, 'Input must be integers'\n    if (k==0 or k==n):\n        return 1\n    elif k>n-k:\n        k=n-k\n    res=1\n    for i in range(k):\n        res=(res*(n-i))//(i+1)\n    return res\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\n# +\ndef binomial_Coeff(n,k):\n    if(n==0 or k==0):\n        return 0\n    if(k==1 or k==n):\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    res = 1\n    for i in range(k):\n        res *= (n-i)/(i+1)\n    return res\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomialCoeff(n, k):\n    result = 1\n    for i in range(0, k):\n        result = result * (n - i) / (i + 1)\n    return result\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k > n/2:\n        k = n-k\n\n    coeff = 1\n    for i in range(k):\n        coeff = coeff * (n-i)\n        coeff = coeff / (i+1)\n    return coeff\n\ndef test_binomial_coeff():\n    assert binomial_Coeff(5,2) == 10\n    assert binomial_Coeff(5,4) == 1\n    assert binomial_Coeff(10,3) == 120\n    assert binomial_Coeff(10,5) == 252\n    assert binomial_Coeff(0,0) == 1\n\ntest_binomial_coeff()\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    return 1 if k==0 else binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) if k<n else 0\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(array,length):\n    #write your code here\n    hash_table = {}\n    for i in range(0,length):\n        if i in hash_table:\n            hash_table[i] += 1\n        else:\n            hash_table[i] = 1\n            \n    for i in hash_table:\n        if hash_table[i]%2 != 0:\n            return i\n        \nget_Odd_Occurrence([1,2,3,1,2,3,1],7)", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(array, size):\n    dict = {}\n    for num in array:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    for num in dict:\n        if dict[num] % 2 != 0:\n            return num\n    return -1\n\ndef get_Odd_Occurrence_test():\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n    return 'test passed'\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\nimport pytest\n\ndef get_Odd_Occurrence(lst,num_occurrences):\n    for num in lst:\n        if lst.count(num) % 2 != 0:\n            return num\n    return 'not found'\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(lst, n):\n\tcount_dict = {}\n\tfor i in lst:\n\t\tif i not in count_dict:\n\t\t\tcount_dict[i] = 1\n\t\telse:\n\t\t\tcount_dict[i] += 1\n\tfor i,v in count_dict.items():\n\t\tif v % 2 != 0:\n\t\t\treturn i\n\treturn -1\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\n# +\n# %%writefile get_Odd_Occurrence.py\n\ndef get_Odd_Occurrence(l,n):\n    # Your code goes here\n    # check if len of l is odd or even\n    if len(l)%2!=0:\n        # even number of elements\n        # use hashmap to store the values\n        hash_map = {}\n        for i in range(len(l)):\n            if l[i] in hash_map:\n                hash_map[l[i]] += 1\n            else:\n                hash_map[l[i]] = 1\n        for key,value in hash_map.items():\n            if value%2!=0:\n                return key\n    else:\n        # odd number of elements\n        # use hashmap to store the values\n        hash_map = {}\n        for i in range(len(l)):\n            if l[i] in hash_map:\n                hash_map[l[i]] += 1\n            else:\n                hash_map[l[i]] = 1\n        for key,value in hash_map.items():\n            if value%2!=0:\n                return key\n        return -1\n# -\n\nimport get_Odd_Occurrence\nget_Odd_Occurrence.get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(nums, n):\n    return next(num for num in nums if nums.count(num) % 2)\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr,n):\n    s = set()\n    for i in arr:\n        s.add(i)\n    for i in s:\n        if s.count(i)%2 != 0:\n            return i\n        \n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(nums,size):\n    #Write code here\n    d = {}\n    for i in range(size):\n        if nums[i] in d:\n            d[nums[i]] += 1\n        else:\n            d[nums[i]] = 1\n    for i in d:\n        if d[i] % 2 == 1:\n            return i", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\nfrom typing import List\n\n\ndef get_Odd_Occurrence(numbers: List[int], length: int) -> int:\n    \"\"\"\n    Return the odd occurrence element\n    :param numbers: list of numbers\n    :param length: length of the list\n    :return: the odd occurrence element\n    \"\"\"\n    # Your Code Here\n    if not numbers or length <= 0:\n        return -1\n    element = -1\n    for i in numbers:\n        if numbers.count(i) % 2 == 1:\n            element = i\n            break\n    return element\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\n# + id=\"uKb41J7GBYkQ\"\n#@title Solution\ndef get_Odd_Occurrence(arr,n):\n    \"\"\"\n    :param arr: input array\n    :param n: length of the array\n    \"\"\"\n    count = {}\n    for i in arr:\n        if count.get(i) is None:\n            count[i] = 1\n        else:\n            count[i] += 1\n\n    for i in count.keys():\n        if count[i]%2!=0:\n            return i\n\n# + colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 35} id=\"Lsl21DUdC5YU\" outputId=\"07183a53-3b2f-4161-8866-e12f22506b24\""], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:] == string[:len(string) - i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i:] == str[:len(str)-i]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    return len(list(set(\n        [string[i:j + 1] for i in range(len(string)) for j in range(i, len(string))]\n    )))\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    if len(string) <= 2:\n        return 0\n    \n    # check if the first and last character are the same\n    if string[0] == string[-1]:\n        return count_Substring_With_Equal_Ends(string[1:]) + count_Substring_With_Equal_Ends(string[1:]) + 1\n    else:\n        return count_Substring_With_Equal_Ends(string[1:])\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    res = 0\n    for i in range(len(s)):\n        if i != len(s)-1 and s[i] == s[i+1]:\n            res += 1\n    return res + 1\n\ndef test_count_Substring_With_Equal_Ends():\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abcb\") == 4\n    assert count_Substring_With_Equal_Ends(\"abccba\") == 5\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n\tif not s:\n\t\treturn 0\n\n\tcounter = 0\n\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcounter += 1\n\n\treturn counter\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(input_str):\n    return len([1 for i in range(len(input_str)-1) if input_str[i] == input_str[i+1]])\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\n# use for loop\ndef count_Substring_With_Equal_Ends(string):\n    if not string:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        count += (len(string) - i)\n    return count\n\n\ndef count_Substring_With_Equal_Ends2(string):\n    count = 0\n    for i in range(len(string)):\n        count += (len(string) - i)\n    return count\n\n# use recursion\ndef count_Substring_With_Equal_Ends3(string):\n    if not string:\n        return 0\n    if len(string) == 1:\n        return 1\n\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            count += count_Substring_With_Equal_Ends(string[i:]) + 1\n    return count\n\n\n# use dynamic programming\ndef count_Substring_With_Equal_Ends4(string):\n    if not string:\n        return 0\n    count = 0\n    arr = [0] * len(string)\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            arr[i] = arr[i-1] + 1\n    print(arr)\n    for i in range(1, len(string)):\n        count += arr[i]\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\ndef top_k_frequent(lsts, k):\n    counter = {}\n    for lst in lsts:\n        for num in lst:\n            if num in counter:\n                counter[num] += 1\n            else:\n                counter[num] = 1\n\n    max_heap = []\n    for key in counter:\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, (counter[key], key))\n        else:\n            if counter[key] > max_heap[0][0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, (counter[key], key))\n\n    ans = []\n    while max_heap:\n        ans.append(heapq.heappop(max_heap)[1])\n    return ans[::-1]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nimport heapq\n\ndef top_k_freq(lists, k):\n    res = []\n    if not lists:\n        return res\n    if not lists[0]:\n        return res\n    heap = []\n    for lst in lists:\n        for x in lst:\n            if not heap or -heap[0] < x:\n                heapq.heapify(heap)\n                heapq.heappush(heap, -x)\n                heapq.heappop(heap)\n            if len(heap) == k:\n                heapq.heappush(heap, -heapq.heappop(heap))\n    return [-x for x in heap]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import *\n\n\ndef heap_k_frequent(lists: list, k: int):\n    result = []\n    d = {}\n    heap = []\n    for lst in lists:\n        for num in lst:\n            d[num] = d.get(num, 0) + 1\n    for key in d:\n        heappush(heap, (-d[key], key))\n    for _ in range(k):\n        result.append(heappop(heap)[1])\n    return result\n\n\ndef main():\n    print(heap_k_frequent([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3))\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\ndef find_k_frequent_numbers_with_heap(nums,k):\n    if nums==[]:\n        return []\n    # k is the largest number of elements\n    # print('k:',k)\n    heap = []\n    for num in nums:\n        if len(heap)<k:\n            heapq.heappush(heap,num)\n        else:\n            if num>heap[0]:\n                heapq.heappushpop(heap,num)\n    return heap\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nimport heapq", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef heap_queue(lists, k):\n    heap_queue = []\n    for l in lists:\n        for i in l:\n            heapq.heappush(heap_queue, (-i,i))\n    return [heapq.heappop(heap_queue)[1] for _ in range(k)]\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\n\ndef func(list_of_list, k):\n    # Use max heap to store the top k items.\n    heap = []\n    heapq.heapify(heap)\n    for l in list_of_list:\n        for item in l:\n            heapq.heappush(heap, item)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import *\n\ndef find_top_k_frequent_numbers(lsts, k):\n    \"\"\"\n    O(n log n)\n    \"\"\"\n    dic = {}\n    for lst in lsts:\n        for e in lst:\n            if e in dic:\n                dic[e] += 1\n            else:\n                dic[e] = 1\n    dic = sorted(dic.items(), key=lambda k: k[1], reverse=True)\n    return [e[0] for e in dic[:k]]\n\ndef find_top_k_frequent_numbers2(lsts, k):\n    \"\"\"\n    O(n)\n    \"\"\"\n    freq_dict = {}\n    for lst in lsts:\n        for e in lst:\n            if e in freq_dict:\n                freq_dict[e] += 1\n            else:\n                freq_dict[e] = 1\n    heap = []\n    for key, val in freq_dict.items():\n        if len(heap) < k:\n            heappush(heap, (val, key))\n        else:\n            heappush(heap, (val, key)) if val > heap[0][0] else heapq.heappop(heap)\n    return [e[1] for e in heap]\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(number):\n    \"\"\"\n    Input number :\n    Output : The largest prime factor of the given number.\n    Time complexity : O(sqrt(n))\n    \"\"\"\n    sqrt_number = int(number**0.5)\n    for i in range(sqrt_number):\n        if number%i==0 and is_prime(i):\n            return i\n\n\ndef is_prime(number):\n    \"\"\"\n    Input number :\n    Output : True if the number is prime and False otherwise.\n    \"\"\"\n    if number == 2:\n        return True\n    for i in range(2, int(number**0.5)):\n        if number%i == 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n  if n == 1:\n    return 1\n  if n in [2, 3, 5, 7]:\n    return n\n  \n  factors = []\n  for i in range(2, n + 1):\n    if n%i == 0:\n      factors.append(i)\n  \n  # only for debugging\n  factors.sort()\n  \n  for i in factors[::-1]:\n    if i*i > n:\n      break\n    if n%i == 0:\n      return i\n  return 1\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\nfrom math import sqrt\n\n\ndef max_Prime_Factors(number):\n    \"\"\"\n    :param number: Number to find the largest prime factor of\n    :return: The largest prime factor of the given number\n    \"\"\"\n    if number == 1:\n        return 1\n    else:\n        for i in range(2, int(sqrt(number)) + 1):\n            if number % i == 0:\n                return i\n        return number\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\nfrom typing import List\n\ndef max_Prime_Factors(number: int) -> List[int]:\n    \"\"\"\n    Find the largest prime factor of a given number.\n    :param number: integer\n    :return: list of prime factors\n    \"\"\"\n    return list(set(reduce_list(factors(number))))\n\ndef factors(n: int) -> List[int]:\n    \"\"\"\n    Find the factors of a number.\n    :param n: integer\n    :return: list of factors\n    \"\"\"\n    if n == 1:\n        return []\n    if n % 2 == 0:\n        return [2] + factors(n//2)\n    for x in range(3, n+1, 2):\n        if n % x == 0:\n            return [x] + factors(n//x)\n    return []\n\ndef reduce_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Reduce a list of numbers to a list of prime numbers.\n    :param lst: list of numbers\n    :return: list of prime numbers\n    \"\"\"\n    new_list = []\n    for x in lst:\n        if is_prime(x):\n            new_list.append(x)\n    return new_list\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    :param n: integer\n    :return: boolean\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\nfrom math import sqrt\nfrom math import ceil\n\ndef max_Prime_Factors(num):\n\ti = 2\n\twhile True:\n\t\tif num % i == 0:\n\t\t\tnum /= i\n\t\t\tif num == 1:\n\t\t\t\treturn i\n\t\telse:\n\t\t\ti += 1\n\ndef test_function(test_case):\n    num = test_case[0]\n    solution = test_case[1]\n    output = max_Prime_Factors(num)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([15,5])\ntest_function([10,5])\ntest_function([30,5])\ntest_function([1000,2])\ntest_function([9,3])", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    i = 2\n    while i*i <= n:\n        while n%i == 0:\n            n //= i\n        i += 1\n    if n > 1:\n        return n\n    else:\n        return 1\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\nfrom math import sqrt,ceil\ndef prime_factorize(n):\n    \"\"\" Return the prime factors of a number,\n        as a dictionary in which the keys are the factors\n        and the values are the exponents.\n    \"\"\"\n    factors = {}\n    if n == 1:\n        return {1: 1}\n    for i in range(2,int(ceil(sqrt(n)))):\n        if n % i == 0:\n            factors[i] = 1\n            while n % i == 0:\n                factors[i] += 1\n                n = n // i\n    if n != 1:\n        factors[n] = 1\n    return factors\n\ndef max_Prime_Factors(n):\n    \"\"\" Return the largest prime factor of n \"\"\"\n    factors = prime_factorize(n)\n    return max(factors, key=factors.get)", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\nfrom functools import reduce\n\n\ndef max_Prime_Factors(n):\n    prime_factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n    return reduce(lambda a, b: a * b, prime_factors)\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n  n = max(2, n)\n  factors = [1]\n  max_prime_factor = 1\n  while max_prime_factor <= n:\n    max_prime_factor += 1\n    if all(max_prime_factor % p > 0 for p in factors):\n      factors.append(max_prime_factor)\n  return factors[-1]\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(x):\n    \"\"\"Find the maximum prime factor for the given number x.\n\n    Parameters\n    ----------\n    x: int\n        number\n\n    Returns\n    -------\n    max_prime_factor : int\n        Returns the max prime factor for the given number x.\n\n    Example\n    -------\n    >>> max_Prime_Factors(15)\n    5\n    \"\"\"\n    max_prime_factor = 1\n    for i in range(1, x+1):\n        if x % i == 0 and isPrime(i):\n            max_prime_factor = i\n    return max_prime_factor\n\ndef isPrime(n):\n    \"\"\"Determines if given number is a prime.\n\n    Parameters\n    ----------\n    n : int\n        Number to check for primality.\n\n    Returns\n    -------\n    bool\n        Returns True if number is prime, False otherwise.\n\n    Example\n    -------\n    >>> isPrime(7)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n\n    return True\n\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n    return bin(num).replace(\"0b\", \"\")\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(n):\n    binary = 0\n    if n >= 1:\n        binary = decimal_To_Binary(n // 2)\n        binary = binary * 10 + n % 2\n    return binary\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(dec_num):\n    binary_num = bin(dec_num)\n    return int(binary_num, 2)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal_num):\n    if decimal_num == 0:\n        return 0\n    return int(decimal_num%2) + 10 * decimal_To_Binary(decimal_num//2)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    binary = \"\"\n    while(n > 0):\n        binary += str(n % 2)\n        n //= 2\n    return binary[::-1]\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_to_binary(x):\n    if x == 0:\n        return 0\n    return x % 2 + 10 * decimal_to_binary(x // 2)\n    ", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n#%%\n\ndef decimal_To_Binary(num):\n    if num == 0:\n        return 0\n    else:\n        return (num%2) + 10 * decimal_To_Binary(num//2)\n\n#%%\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n# Solution is available in the other \"solution.py\" tab\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(x):\n    if x == 0:\n        return 0\n    return (decimal_To_Binary(x//2) + x%2)", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal_number):\n    return (bin(decimal_number)[2:])\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\n# Solution\ndef find_missing(arr, n):\n    \"\"\"\n    :param: arr - input array\n    :param: n - size of input array\n    return: int - the missing number in a sorted array.\n    \"\"\"\n    total = ((n + 1) * n) / 2\n    for i in arr:\n        total -= i\n    return int(total)\n\n\n# Test cases\narr = [1, 2, 3, 5]\nn = len(arr)", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,max):\n    for i in range(max):\n        if i not in arr:\n            return i\n\narr = [1,2,3,5]\nmax = 4\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, n):\n    if len(arr) == 0:\n        return n\n    else:\n        for i in range(0,len(arr)-1):\n            if arr[i]+1 != arr[i+1]:\n                return arr[i] + 1\n        return arr[len(arr) - 1] + 1\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,n):\n    #your code here\n    for i in range(0,len(arr)):\n        if i+1 != arr[i]:\n            return i+1\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\nimport unittest\n\n\ndef find_missing(arr,n):\n    l = len(arr)\n    for i in range(n+1):\n        if i not in arr:\n            return i\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(array,n):\n    min_value = 0\n    max_value = n - 1\n    missing_number = n\n    while min_value <= max_value:\n        missing_number = (min_value + max_value) // 2\n        if array[missing_number] == missing_number:\n            min_value = missing_number + 1\n        else:\n            max_value = missing_number - 1\n    return missing_number", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(numbers, n):\n    for i in range(n):\n        if numbers[i] != i:\n            return i\n    return n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    start = 0\n    end = n-1\n    \n    while(start <= end):\n        mid = (start + end)//2\n        \n        if(arr[mid] == mid):\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    return start\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n    pass", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n\t\"\"\"\n\t:param arr: A sorted array\n\t:param n: total number of elements in array\n\t:return: missing number in the array\n\t\"\"\"\n\tif len(arr) == 1:\n\t\treturn arr[0] + 1\n\tif len(arr) == 2:\n\t\treturn arr[1] - 1\n\tif len(arr) > 2:\n\t\tif arr[0] == 1:\n\t\t\treturn 1\n\t\tif arr[0] == n:\n\t\t\treturn n\n\t\tif arr[len(arr)-1] == n:\n\t\t\treturn n - 1\n\tif len(arr) == 0:\n\t\treturn 0\n\treturn 0\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 1\n    for i in range(1, n + 1):\n        sum = sum * (i + 1)\n    return sum\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\nfrom functools import lru_cache\nfrom math import sqrt\n\n# Time: O(sqrt(n))\n# Space: O(n)\n# Memoization\n\n@lru_cache(maxsize=None)\ndef find_rect_num_mem(n):\n    # n-th square number\n    for i in range(1, int(sqrt(n)) + 1):\n        if i * i == n:\n            return n\n    for i in range(n + 1, 2 * n + 1):\n        if find_rect_num_mem(i):\n            return i\n    return None\n\n# Time: O(n)\n# Space: O(n)\n# Recursion\n\ndef find_rect_num(n):\n    if n == 1:\n        return 1\n    for i in range(2, n + 1):\n        if i * i == n:\n            return n\n    for i in range(n + 1, 2 * n + 1):\n        if find_rect_num(i):\n            return i\n    return None\n\n# print(find_rect_num_mem(1000))\n# print(find_rect_num(1000))", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    return (n**2 + n)//2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nfrom math import sqrt\n\ndef find_rect_num(n):\n  return int(round(n * sqrt(n+1)))\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    This function returns the n-th rectangular number\n\n    Args:\n        n: The nth rectangular number\n\n    Returns:\n        The n-th rectangular number\n    \"\"\"\n    return n * (n + 1) // 2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nimport math\n\ndef find_rect_num(n):\n    return int(math.pow(n, 2) + (n - 1))\n\ndef find_rect_num_recur(n):\n    if n == 1:\n        return 1\n    else:\n        return n * find_rect_num(n - 1)", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    num = 0\n    for i in range(n):\n        num += i + 1\n\n    return num\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n  result = 1\n  for i in range(n):\n    result = result + 2 * i + 1\n  return result\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\nfrom typing import List\n\ndef find_rect_num(n: int) -> int:\n    \"\"\"\n    Runtime: 32 ms, faster than 98.54% of Python3\n    Memory Usage: 14.2 MB, less than 100.00% of Python3\n\n    :param n: number of rectangular number\n    :return: number of rectangular number n\n    \"\"\"\n    rectangle_list: List[int] = [1]\n\n    for num in range(1, n):\n        for i in range(len(rectangle_list)):\n            rectangle_list.append(rectangle_list[i] + i + 1)\n\n    return rectangle_list[n-1]\n\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n    if n == 0:\n        return 0\n    else:\n        num = str((num1*10 + num2))\n        if n == len(num):\n            return num[n-1]\n        else:\n            return find_Nth_Digit(num[0], num[1:], n)\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(n,a,b):\n    digits = 0\n    while a<=b:\n        a *= 10\n        b *= 10\n        digits += 1\n    \n    a //= 10**(digits-1)\n    b //= 10**(digits-1)\n    d = 10**(digits-1)\n    \n    while d > 1:\n        if digits%2:\n            mid = (a+(d//2))//10 + 1\n        else:\n            mid = (b-(d//2))//10\n        \n        digits //= 10\n        d //= 10\n        \n        if n <= (b-a)*mid+mid:\n            a = a+(n-(b-a)*mid-mid)//mid*10\n            return a\n        else:\n            b = b-(n-(b-a)*mid-mid)//mid*10\n            return b\n        \n    ", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a, b, n):\n    a_str = str(a)\n    b_str = str(b)\n\n    # Check the absolute value\n    if n > len(a_str) + len(b_str):\n        return 0\n\n    # Check whether it's a negative value\n    if a < 0:\n        a_str = a_str[1:]\n\n    if b < 0:\n        b_str = b_str[1:]\n\n    # Find the digit\n    if n <= len(a_str):\n        return int(a_str[len(a_str)-n])\n    else:\n        n_digit = int(b_str[len(b_str)-n+len(a_str)])\n        b = int(b)\n        for i in range(len(a_str)):\n            if b >= 10:\n                b_digit = int(b % 10)\n            else:\n                b_digit = b\n            n_digit += int(a_str[i])*b_digit\n            b //= 10\n        return n_digit\n\n# Tests", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nfrom unittest import TestCase\n\n\ndef find_Nth_Digit(num, divisor, n):\n    num = int(num / divisor)\n    while True:\n        if n == 1:\n            return num % 10\n        num //= 10\n        n -= 1\n\ndef find_Nth_Digit_recursive(num, divisor, n):\n    if n == 1:\n        return num % 10\n    num //= 10\n    return find_Nth_Digit_recursive(num, divisor, n - 1)\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(a, b, n):\n  if a >= b:\n    a, b = b, a\n  a, b = str(a), str(b)\n  length = min(len(a), len(b))\n  for i in range(length, 0, -1):\n    if i > n:\n      continue\n    elif i == n:\n      return int(a[i-1])\n    elif i < n:\n      a, b = a[0:i-1], b[0:i-1]\n  return int(a[0])\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(a, b, n):\n    s = 1\n    start = 0\n    while s < n:\n        start += 1\n        s = s * 10\n    return get_digit(a, b, start, s - 1)\n    \ndef get_digit(a, b, start, end):\n    num = (a / (10 ** start) + b / (10 ** start)) // 1\n    return num % 10\n\n\n# -\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\n# This solution runs in O(N^2) where N is the number of digits in the fraction\n\ndef find_Nth_Digit(num1, num2, n):\n    temp = num1\n    temp_str = str(temp)\n    count = len(temp_str)\n    for i in range(count):\n        temp_str = str(temp)\n        if temp_str[i] == '9':\n            temp = 9*10**(count-1-i) + num2*10**i + int(temp_str[i+1:]) + 1\n        else:\n            temp = 10**(count-1-i) + num2*10**i + int(temp_str[i+1:])\n            break\n    if n > count:\n        n = n - count\n    return int(str(temp)[n-1])\n\n# This solution runs in O(N) where N is the number of digits in the fraction\n\ndef find_Nth_Digit2(num1, num2, n):\n    num = num1*10 + num2\n    n -= 1\n    count = 0\n    while num > 0:\n        if count == n:\n            return num % 10\n        num = num // 10\n        count += 1", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a,b,n):\n    if n == 1:\n        return a\n    elif n == 0:\n        return b\n    if n%2 == 0:\n        return find_Nth_Digit(a,b,n//2)\n    return find_Nth_Digit((a+b)//10,(a+b)%10,n-1)\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(a, b, N):\n    a, b = min(a, b), max(a, b)\n    digits = 1\n    while a * digits < b:\n        digits *= 10\n    while digits > 0:\n        a = (a % digits) // digits\n        b = (b % digits) // digits\n        digits = digits // 10\n    print(a, b)\n    return a * digits + b\n\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    mixed_list.sort()\n    return mixed_list\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    result = []\n    for elem in mixed_list:\n        if isinstance(elem, int):\n            insert(elem, result, 0)\n        else:\n            insert(elem, result)\n    return result\n\n\ndef insert(elem, result, left=None, right=None):\n    if left == None:\n        left = 0\n        right = len(result) - 1\n    if elem < result[left]:\n        result.insert(left, elem)\n    elif elem > result[right]:\n        result.insert(right+1, elem)\n    else:\n        left += 1\n        right -= 1\n        insert(elem, result, left, right)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    return sorted(lst, key= lambda x: (type(x) == str, x))\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\nimport random\n\ndef sort_mixed_list(mixed_list):\n    # Create a list to store integers\n    integer_list = []\n    # Create a list to store strings\n    string_list = []\n    # Iterate through the list\n    for i in mixed_list:\n        # If the value is an integer\n        if type(i) == int:\n            # Add it to the integer list\n            integer_list.append(i)\n        # If the value is a string\n        elif type(i) == str:\n            # Add it to the string list\n            string_list.append(i)\n    # Sort the list\n    integer_list.sort()\n    string_list.sort()\n    # Create a new list to store integers and strings\n    new_list = []\n    # Iterate through the integers\n    for i in integer_list:\n        # Add them to the new list\n        new_list.append(i)\n    # Iterate through the strings\n    for i in string_list:\n        # Add them to the new list\n        new_list.append(i)\n    return new_list\n\n\nmixed_list = [random.randint(0,10) for i in range(10)]", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t\"\"\"\n\t>>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n\t[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\t\"\"\"\n\treturn sorted(mixed_list, key=lambda x: int(str(x).replace('red','0').replace('green','1').replace('blue','2').replace('white','3').replace('1','0').replace('0','2').replace('3','1')))\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\nfrom typing import List\n\n\ndef sort_mixed_list(lst: List):\n    return sorted(lst, key=lambda k: (type(k) is str, k))\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(l):\n    return sorted(l)\n\ndef main():\n    print(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\n#Write a function to sort a given mixed list of integers and strings.\n#The function takes as an argument a list of integers and strings and returns a sorted list of integers and strings.\n\n#Example\n#sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]) == [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\n#answer:\ndef sort_mixed_list(s):\n    # Write your code here\n    return sorted(s, key=lambda x: (isinstance(x, int), x))", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n  new_list = []\n  for i in mixed_list:\n    if type(i) == int:\n      new_list.append(i)\n    else:\n      new_list.append(i)\n  new_list.sort()\n  return new_list\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(nums):\n    even_sum = 0\n    odd_sum = 0\n    for i in nums:\n        if i%2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    if even_sum == 0:\n        return 1\n    return even_sum/odd_sum\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(list):\n\tif len(list)<2:\n\t\treturn 1\n\teven_count=0\n\todd_count=0\n\tfor i in list:\n\t\tif i%2==0:\n\t\t\teven_count+=1\n\t\telse:\n\t\t\todd_count+=1\n\treturn max(even_count,odd_count)\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    div=0\n    even_list=[]\n    odd_list=[]\n    for i in lst:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    \n    for i in even_list:\n        for j in odd_list:\n            if i%j==0:\n                div+=1\n                break\n    return div\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n#solution\ndef div_even_odd(my_list):\n    even_list=[]\n    odd_list=[]\n    for i in my_list:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return len(even_list)//len(odd_list)\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    even = 0\n    odd = 0\n    for i in lst:\n        if i%2==0:\n            even +=1\n        else:\n            odd +=1\n\n    return min(even,odd)\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(x):\n    div=1\n    if len(x)==0:\n        return div\n    if x[0]%2==0:\n        div=x[0]\n    else:\n        div=1\n    for i in x[1:]:\n        if i%2==0 and i%div==0:\n            div=i\n        elif i%2!=0 and div%i==0:\n            div=i\n        else:\n            div=1\n    return div\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    even=0\n    odd=0\n    for i in lst:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return even/odd\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(nums:list)->int:\n    even = 0\n    odd = 0\n    for i in nums:\n        if i%2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even//odd if even > 0 and odd > 0 else 0\n\ndef main():\n    nums = [1,3,5,7,4,1,6,8]\n    print(div_even_odd(nums))\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(nums):\n    pass\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(word):\n    for i in range(len(word)-1):\n        if word[i]==word[i+1]:\n            return False\n    word=list(word)\n    l=len(word)\n    word.sort()\n    new_word=''\n    for i in range(l):\n        new_word+=word[i]\n    return new_word\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(word):\n    \"\"\"\n    :param word: input string\n    :return: the result string if rearrangement is possible\n    \"\"\"\n    if not word or len(word) == 1:\n        return word\n    word = list(word)\n    size = len(word)\n    i = 0\n    j = 1\n    while i < size - 1:\n        if word[j] != word[j - 1] and word[j] != word[i + 1]:\n            i += 1\n            word[i], word[j] = word[j], word[i]\n            j += 1\n            i += 1\n        elif word[j] == word[i + 1]:\n            word[i + 1] = word[j]\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return ''.join(word)\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    string=list(string)\n    for i in range(len(string)-1):\n        if string[i]==string[i+1]:\n            string[i+1]=chr(ord(string[i+1])+1)\n    return \"\".join(string)\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\nimport sys\nfrom typing import Dict, Tuple\n\n\ndef rearange_string(string: str) -> Tuple[str, str]:\n    \"\"\"\n    Returns the string if rearrangement is possible, else returns \"\"\n    :param string:\n    :return:\n    \"\"\"\n    letter_count: Dict[str, int] = {}\n    for char in string:\n        if char in letter_count:\n            letter_count[char] += 1\n        else:\n            letter_count[char] = 1\n    unique_letters = list(set(letter_count.keys()))\n    for i in range(len(unique_letters)):\n        char1 = unique_letters[i]\n        for j in range(i+1, len(unique_letters)):\n            char2 = unique_letters[j]\n            if abs(letter_count[char1] - letter_count[char2]) == 1:\n                return char1 + char2, char1, char2\n    return \"\", \"\", \"\"\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(s):\n    count = {}\n    for c in s:\n        count[c] = count.get(c, 0) + 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return \"\".join(sorted(count, key=lambda c: count[c]))\n\n\n# https://leetcode.com/problems/longest-palindromic-substring/", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    pass\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(word):\n    return \"\".join(sorted(word))\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\nimport unittest\n\ndef rearange_string(s):\n    \"\"\"\n    Two pointers technique\n    :param s: string\n    :return: rearranged string\n    \"\"\"\n    l = len(s)\n    if l<2:\n        return s\n\n    i = 0\n    j = 1\n    while i<j<l:\n        if s[i]!=s[j]:\n            i+=1\n            j+=1\n            continue\n        else:\n            return rearange_string(s[:i]+s[j+1:])\n    return s\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(word):\n    prev = word[0]\n    for curr in word[1:]:\n        if prev == curr:\n            return False\n        prev = curr\n    return True\n\ndef rearange_string_sol(word):\n    return all(word[i] != word[i+1] for i in range(len(word)-1))\n"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\n\ndef freq_element(l):\n    frequency = Counter()\n    for i in l:\n        frequency.update(set(i))\n    return frequency\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nimport collections\ndef freq_element(list_of_lists):\n    new_list_of_lists = [x for inner in list_of_lists for x in inner]\n    return collections.Counter(new_list_of_lists)", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(lst):\n    d = defaultdict(int)\n    for i in lst:\n        for j in i:\n            d[j]+=1\n    return d", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nimport collections\ndef freq_element(l):\n    return collections.Counter(i for sublist in l for i in sublist)\n\n\n# freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n\n\n# ================================ Exercise 31 ==================================", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(lst):\n  return collections.Counter(list(chain.from_iterable(lst)))\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import defaultdict\n\ndef freq_element(arr):\n    my_dict = defaultdict(int)\n    for i in arr:\n        for j in i:\n            my_dict[j] += 1\n    return my_dict\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(elements):\n    d=defaultdict(int)\n    for element in elements:\n        for e in element:\n            d[e]+=1\n    return dict(d)\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\nimport pytest\n\n\ndef freq_element(element):\n    element_list = []\n    for i in element:\n        element_list.extend(i)\n\n    return dict(Counter(element_list))\n\n\n@pytest.mark.parametrize(\"lists, exp\", [([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})])\ndef test_freq_element(lists, exp):\n    assert freq_element(lists) == exp\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nimport collections\ndef freq_element(list):\n    return collections.Counter(list)\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\n# Answer :\n\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ndef filter_evennumbers(l1):\n    return list(filter(lambda x: (x % 2 == 0), l1))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(num_list):\n    return list(filter(lambda x:x%2==0,num_list))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\n\n#assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n#assert filter_evennumbers([5, 7, 9, 11, 13, 15])==[]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n  return list(filter(lambda x: x%2==0, numbers))\n\ndef test_filter_evennumbers():\n  assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(num_list):\n    return list(filter(lambda x: x%2==0, num_list))\n\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(x):\n\treturn list(filter(lambda a: a%2==0,x))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(lst):\n    return list(filter(lambda num: num%2==0,lst))\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(my_arr, x):\n    my_dict = {}\n    my_dict[x] = 0\n    for i in my_arr:\n        if i in my_dict.keys():\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    ans = 0\n    for i in my_dict.keys():\n        if my_dict[i] > 1:\n            ans += i * my_dict[i]\n\n    return ans\n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(array,sum):\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if(i!=j):\n                if(array[i]+array[j]==sum):\n                    print(array[i])\n\nfind_Sum([1,2,3,1,1,4,5,6],8)\n\n\n# # 2. Write a python function to find the largest element in a given array.\n\ndef find_Max(array):\n    max_val=array[0]\n    for i in range(len(array)):\n        if array[i] > max_val:\n            max_val = array[i]\n    print(max_val)\n\nfind_Max([1,3,5,6,7])\n\n\n# # 3. Write a python function to find the largest element in a given array.\n\ndef find_Largest(array):\n    for i in range(len(array)):\n        if array[i] > array[i+1]:\n            print(array[i])\n\n\nfind_Largest([1,3,5,6,7])\n\n\n# # 4. Write a python program to find the sum of the elements in a given array.\n\ndef find_Sum1(array):\n    sum_val=0\n    for i in range(len(array)):\n        sum_val = sum_val + array[i]\n    print(sum_val)\n\n\nfind_Sum1([1,3,5,6,7])\n\n\n# # 5. Write a python program to find the product of the elements in a given array.\n\ndef find_Product(array):\n    product=1\n    for i in range(len(array)):\n        product = product * array[i]\n    print(product)\n\n\nfind_Product([1,3,5,6,7])\n\n\n# # 6. Write a python function to find the smallest element in a given array.\n\ndef find_Min(array):\n    min_val=array[0]\n    for i in range(len(array)):\n        if", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(arr,sum):\n    dict = {}\n    for num in arr:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    for num in dict.keys():\n        if num*(dict[num]) == sum:\n            return num\n        elif num*(dict[num]) > sum:\n            break\n    return None\n    ", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(l, k):\n  return sum(set(l) & set(range(k)))\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    sum_arr = [0]*n\n    for num in arr:\n        sum_arr[num-1] += 1\n    return sum(num for num in sum_arr if num >= 2)\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, n):\n\tcount = 0\n\tfor i in arr:\n\t\tif arr.count(i) > 1:\n\t\t\tcount += i\n\tif count == n:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    store = dict()\n    for i in arr:\n        if i in store:\n            store[i] += 1\n        else:\n            store[i] = 1\n    return sum(i for i in store.values() if i > 1)\n\n\n# Tests", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,sum):\n    dict = {}\n    for i in arr:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n        if dict[i] > 1:\n            print(i)\n            sum -= i\n        if sum == 0:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,N):\n    result = []\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if arr[i] == arr[j]:\n                result.append(arr[i])\n    if len(result) == 0:\n        return 0\n    return sum(result)\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    if re.search(r'[a-z][a-z]_\\1', text):\n        return 'Found a match!'\n    return 'No match'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    return re.findall(\"[a-z]+_[a-z]+\", text)\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n  pattern = r'([a-z])\\1+'\n  if re.search(pattern, text):\n    return 'Found a match!'\n  return 'No match'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\nimport re_test_patterns as r\n\ndef text_match(text):\n    # match = re.search(r'([a-z]+)', text)\n    # if match:\n    #     return 'Found a match!'\n    # else:\n    #     return 'Did not find a match :('\n    match = re.search(r'([a-z_]+)', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Did not find a match :('\n\n# test\nr.run_tests(text_match)\n\n# solution", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    # YOUR CODE HERE\n    text = text.lower()\n    match = re.search(r'(?=.*[a-z])(?=.*[a-z_])',text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n\n    pattern = r'[a-z]+_[a-z]+'\n\n    if re.findall(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'No match'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\ntext = \"aab_cbbbc\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(s):\n  if re.search('[a-z]+_[a-z]+', s):\n    return 'Found a match!'\n  else:\n    return 'No match'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    regex = r\"[a-z]{2}_+[a-z]{2}\"\n    if re.search(regex, text):\n        return 'Found a match!'\n    else:\n        return 'No match'\n\ndef test_text_match():\n    print ('Test 1 - No match')\n    assert text_match(\"abc\") == 'No match'\n    print ('Test 2 - Single match')\n    assert text_match(\"aa_bb\") == 'Found a match!'\n    print ('Test 3 - Multi match')\n    assert text_match(\"aaa_bbb_ccc_\") == 'Found a match!'\n\ntest_text_match()\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\n#Write your code below this line \ud83d\udc47\ndef text_match_string(text_string):\n  if text_string.startswith(\" python\"):\n    return (\"matched!\")\n  else:\n    return (\"Not matched!\")\n#Write your code above this line \ud83d\udc46\n#Do NOT change any of the code below\ud83d\udc47\n#Just have some fun with the code!\n#Hint: You might want to check out the string method \"startswith()\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(input_string):\n    if input_string.find('python') == 0:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    result = 'Not matched!'\n    if text.lower().startswith('python'):\n        result = 'Matched'\n    return result\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    #Your code here\n    match = re.search(r\"^python\",text)\n    if match == None:\n        return \"Not matched!\"\n    else:\n        return \"Matched\"\n    #return \"Your code here\"", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\nimport re\n\ndef text_match_string(string):\n\tpattern = re.compile(r\"^\\w*\")\n\tresult = re.match(pattern, string)\n\tif result:\n\t\treturn \"Matched!\"\n\telse:\n\t\treturn \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(s):\n\t#your code goes here\n\treturn \"Not matched!\"\n#print(text_match_string(\"python\"))\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(s):\n    if (s[:6]== 'python'):\n        return(True)\n    else:\n        return('Not matched!')\n\ntext_match_string(\"python\")\n\n\n# +", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if text.startswith('py'):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n\ndef text_match_string_v2(text):\n    if text[0:2] == 'py':\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(txt):\n    if txt.startswith(\"python\"):\n        return(\"Matched!\")\n    else:\n        return(\"Not matched!\")\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\n# case insensitive\ndef text_match_string(str):\n    str=str.lower()\n    for i in range(0,len(text)):\n        if text[i:].lower().startswith(str):\n            return \"Matched!\"\n    return \"Not matched!\"\n\n# case sensitive\ndef text_match_string(str):\n    for i in range(0,len(text)):\n        if text[i:].startswith(str):\n            return \"Matched!\"\n    return \"Not matched!\""], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\nfrom fractions import gcd\n\ndef get_gcd(arr):\n    return reduce(gcd, arr)\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nimport math\n\ndef get_gcd(elements):\n    return math.gcd(*elements)", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom functools import reduce\ndef get_gcd(num_list):\n    return reduce(lambda x, y: gcd(x, y), num_list)\n\ndef gcd(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return: The greatest common divisor\n    \"\"\"\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(nums):\n    \"\"\"returns the greatest common denominator between all integers in nums\n    \"\"\"\n    if nums == []:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        div = nums[0]\n        for n in nums[1:]:\n            while n % div != 0:\n                div -= 1\n        return div\n\n\ndef get_lcm(nums):\n    \"\"\"returns the least common multiple between all integers in nums\n    \"\"\"\n    if nums == []:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        mult = nums[0]\n        for n in nums[1:]:\n            while mult % n != 0:\n                mult += 1\n        return mult\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    # write your logic here\n    gcd = arr[0]\n    for i in arr:\n        while(gcd % i != 0):\n            gcd, i = i, gcd % i\n    return gcd\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom typing import List\n\ndef get_gcd(numbers: List[int]) -> int:\n    return reduce(lambda x,y:gcd(x,y), numbers)\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"The greatest common divisor of a and b.\"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n#-------------------------------------------------------\n# test", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\nfrom typing import List\n\n\ndef get_gcd(a: List[int]) -> int:\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return a[0]\n    else:\n        return __gcd(a[0], get_gcd(a[1:]))\n\n\ndef __gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return __gcd(b, a % b)\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nimport unittest\nfrom functools import reduce\nfrom operator import mul\n\nfrom typing import List\n\n\ndef get_gcd(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n\n    >>> get_gcd([2, 4, 6, 8, 16])\n    2\n\n    :param arr: list of integers\n    :return: greatest common divisor\n    \"\"\"\n    if len(arr) == 2:\n        return reduce(lambda x, y: x if (x and x % y) == 0 else y, arr)\n\n    return reduce(lambda x, y: x if (x and x % y) == 0 else get_gcd(arr[1:]), arr[1:])\n\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\nfrom typing import List\ndef test_distinct(numbers: List[int]) -> bool:\n    if len(numbers) == 0:\n        return False\n    nums = set()\n    for num in numbers:\n        if num in nums:\n            return False\n        nums.add(num)\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    if len(set(nums)) == len(nums):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(values):\n  return len(set(values)) == len(values)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(A):\n    return len(set(A)) == len(A)\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    lis = nums\n    lis.sort()\n    for i in range(1,len(lis)):\n        if lis[i] == lis[i-1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# x = input('input a list of numbers: ')\n# x = x.split(',')\n# print(x)\n# x = [int(i) for i in x]\n# print(x)\n# x.sort()\n# for i in range(len(x) - 1):\n#     if x[i] == x[i + 1]:\n#         print(False)\n#         break\n# else:\n#     print(True)\n\n\nx = [1, 2, 3, 4, 5]\nx.pop()", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(arr):\n    n = len(arr)\n    if n > 1:\n        for i in range(n):\n            for j in range(i+1, n):\n                if arr[i] == arr[j]:\n                    return False\n    return True\n\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(lst):\n    s = set(lst)\n    return len(s) == len(lst)\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n#%%\n\ndef test_distinct(x):\n    for item in x:\n        if x.count(item) > 1:\n            return False\n    return True\n\n#%%\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(list):\n  if len(list) == len(set(list)):\n    return True\n  else:\n    return False\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\nimport sys\n\ndef compute_Last_Digit(a, b):\n    return a%b\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\nfrom math import factorial as fac\n\ndef compute_Last_Digit(a,b):\n    \"\"\"\n    a: positive integer\n    b: positive integer\n    return: last digit of a factorial when it divides b factorial\n    \"\"\"\n    num_1 = fac(a)\n    num_2 = fac(b)\n    while num_2 % num_1:\n        num_1 *= 10\n    return num_1 // num_2\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    if (a > b):\n        a, b = b, a\n    if (a % b != 0):\n        return -1\n    \n    factorial_a = 1\n    factorial_b = 1\n    \n    while (b > 1):\n        factorial_b *= b\n        b -= 1\n    \n    while (a > 1):\n        factorial_a *= a\n        a -= 1\n    \n    return int(str(factorial_a)[-1])\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    result = 0\n    if a%b==0:\n        result = a // b\n    return result\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    while (a%b != 0):\n        a,b = b, a%b\n    return (a//b)\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    if a == b:\n        return a\n    return a % b\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a % b\n        ", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    if(a%b==0):\n        return a/b%10\n    else:\n        return a%10\n    ", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\nimport math\n\ndef compute_Last_Digit(a, b):\n    return math.factorial(a) % 10 ** b\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    # write your code here\n    a_fac = math.factorial(a)\n    b_fac = math.factorial(b)\n    for i in range(b):\n        if a_fac % b_fac == 0:\n            return b_fac % 10\n    return -1\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(num):\n    \"\"\"\n    This function returns the given number with all odd bits set.\n    It does this by left-shifting the number by one and then anding with 0x55555555\n    \"\"\"\n    return num << 1 | 0x55555555\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\nfrom unittest import TestCase\n\n\ndef odd_bit_set_number(number):\n    return number | 1\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# The approach is to use the bitwise operators in python.\n# Everytime there is a left shift, the value gets multiplied by 2.\n# For every left shift, a value of 1 is added.\n\n\ndef odd_bit_set_number(num):\n    # Write your logic here\n    while num >= 1:\n        num = num >> 1\n        num = num | 1\n    return num\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(x):\n    return x | x&1^1\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    return n | (n << 1)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n  if (number & 1):\n    number |= 1\n  return number\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    return ((n & 0xAAAAAAAA) >> 1) | n\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# n & 1 == 1 if n is odd\ndef odd_bit_set_number(n):\n    return (n & 1) ^ 1\n\n# Test Code", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# Python program to set all the odd bits in a number\ndef odd_bit_set_number(x):\n    # To find the value of a bit at any position in binary number\n    # x & (1 << i)\n    # x = 10, i = 1 so x & (1 << i) gives 2\n    # x = 10, i = 2 so x & (1 << i) gives 0\n    # x = 10, i = 3 so x & (1 << i) gives 0\n    # x = 10, i = 4 so x & (1 << i) gives 0\n    # x = 10, i = 5 so x & (1 << i) gives 0\n\n    # To set a bit at any position in binary number\n    # x = 10, i = 1, x | (1 << i) = 110\n    # x = 10, i = 2, x | (1 << i) = 101\n    # x = 10, i = 3, x | (1 << i) = 100\n    # x = 10, i = 4, x | (1 << i) = 100\n    # x = 10, i = 5, x | (1 << i) = 100\n\n    # To set all the odd bits in a number\n    # x & ~(1 << i)\n    # x = 10, i = 1, x & ~(1 << i) = 100\n    # x = 10, i = 2, x & ~(1 << i) = 010\n    # x = 10, i = 3, x & ~(1 << i) = 001\n    # x = 10, i = 4, x & ~(1 << i) = 000\n    # x = 10, i = 5, x & ~(1 << i) = 000\n\n    # To set all the odd bits in a number\n    # x & ~(1 << i) | (1 << i)\n    # x ="], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lst,spec):\n\tfinal_list = []\n\tfor i in lst:\n\t\tfor j in i:\n\t\t\tif(j == spec):\n\t\t\t\tfinal_list.append(j)\n\treturn final_list\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l,n):\n    if n ==0:\n        return [row[0] for row in l]\n    else:\n        return [row[n] for row in l]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(two_dimensional_list,element_num):\n    new_list=[]\n    if element_num==1:\n        for i in range(len(two_dimensional_list)):\n            new_list.append(two_dimensional_list[i][0])\n        return new_list\n    else:\n        for i in range(len(two_dimensional_list)):\n            new_list.append(two_dimensional_list[i][element_num-1])\n        return new_list\nspecified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)<jupyter_output><empty_output>", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l, n):\n\tif n == 0:\n\t\treturn [x[0] for x in l]\n\telif n > 0:\n\t\treturn [x[n - 1] for x in l]\n\telse:\n\t\treturn []\n\ndef specified_element(l, n):\n\tif n == 0:\n\t\treturn [x[0] for x in l]\n\telif n > 0:\n\t\treturn [l[i][n - 1] for i in range(len(l))]\n\telse:\n\t\treturn []\n\ndef specified_element(l, n):\n\tif n == 0:\n\t\treturn [x[0] for x in l]\n\telif n > 0:\n\t\treturn [l[i][n - 1] for i in range(len(l)) if n <= len(l[i])]\n\telse:\n\t\treturn []\n\ndef specified_element(l, n):\n\treturn [l[i][n - 1] if n <= len(l[i]) else None for i in range(len(l))]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(array, element):\n    return [x[element] for x in array]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nfrom typing import List\n\n\ndef specified_element(lst, index):\n    if index == 0:\n        return [element[0] for element in lst]\n    else:\n        return [element[index] for element in lst]\n\n\ndef main():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0) == [1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1) == [2, 5, 1]\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, i):\n    output = []\n    if i == 0:\n        for j in lst:\n            output.append(j[0])\n    else:\n        for j in lst:\n            output.append(j[i])\n    return output\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, element):\n    if element == 0:\n        return [item[0] for sublist in lst for item in sublist]\n    return [item[element] for sublist in lst for item in sublist]\n\n\ndef test_specified_element():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0) == [1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1) == [2, 5, 1]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3) == [2, 2, 5]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2) == [3, 6, 9]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nimport pytest\nfrom codewars import specified_element\n\n\ndef test_1():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\ndef test_2():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2, 5, 1]\ndef test_3():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\ndef test_4():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2, 2, 5]\ndef test_5():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],4)==[None, None, None]\ndef test_6():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],-1)==[None, None, None]\ndef test_7():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],-2)==[None, None, None]\ndef test_8():\n    assert specified_element([[1, 2, 3, 2],", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lst, x):\n    if x==0:\n        return [lst[0][0],lst[1][0],lst[2][0]]\n    else:\n        return [lst[0][x],lst[1][x],lst[2][x]]\n\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n  min_length = len(min(lst))\n  return min_length, lst[lst.index(min(lst))],\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(lst, key=lambda x:len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# Solution :\n\nl1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nl1 = [len(i) for i in l1]", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# def min_length_list(a):\n#     minimum = min(a, key=len)\n#     return minimum\n\n# or\n\n# def min_length_list(a):\n#     return min(a, key=lambda x: len(x))\n\ndef min_length_list(a):\n    return min(a, key=lambda x: len(x) if len(x) >= 1 else -1)\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(array):\n    array.sort(key = lambda x:len(x))\n    return array[0], array[0]\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n    return min(lst, key=lambda x:len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nimport doctest\nfrom typing import Any, List\n\ndef min_length_list(lists: List[List[Any]]) -> Any:\n    \"\"\"\n    >>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    True\n    \"\"\"\n    return min(lists, key = lambda list: len(list))\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n\n#x=check_equilateral(6,8,12)\n#print(x)\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n#Method 1:\ndef check_equilateral(x, y, z):\n  if (x == y and y == z):\n    return True\n  else:\n    return False\n#Method 2:\ndef check_equilateral(x, y, z):\n  if (x == y or y == z or x == z):\n    return True\n  else:\n    return False", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(side1, side2, side3):\n  if side1==side2 and side1==side3 and side2==side3:\n    return True\n  else:\n    return False\n\n# test case", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a == b == c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(x,y,z):\n\treturn (x==y and y==z and z==x) or (x!=y and y!=z and z!=x)\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a * b\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base, height):\n    return base * height\n\n#assert parallelogram_area(10,20)==200\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(b,h):\n    assert b>0 and h>0\n    return b*h\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base,height):\n    return base*height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n# %%\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base_length, base_width):\n    return base_length*base_width\n\n#test function", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base,height):\n    return base*height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base, height):\n    return base * height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base,height):\n\treturn base*height\n\n#assert parallelogram_area(3,4)==12\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base,height):\n    area=base*height\n    return area\n\n#assert parallelogram_area(10,20)==200\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return 'Equal'\n    return 'Not Equal'\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n#Solution :\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n#Solution 2:\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n#Code : 1104", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str1):\n    if str1[0] == str1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    return \"Equal\" if str[0] == str[-1] else \"Not Equal\"\n\n#%%", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str1):\n    return str1[0] == str1[-1] and str1\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(input_string):\n\tif input_string[0] == input_string[-1]:\n\t\treturn \"Equal\"\n\telse:\n\t\treturn \"Not Equal\"\n\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n  # add code here\n  if s[0] == s[-1]:\n    return \"Equal\"\n  else:\n    return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n#Function to check equality of string\ndef check_Equality(str1):\n    str_len = len(str1)\n    if (str_len != 1):\n        if(str1[0] == str1[str_len-1]):\n            return \"Equal\"\n        else:\n            return \"Not Equal\"\n    else:\n        return \"Not a string\"\n\n#Driver code\nstr1 = input()", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(input_str):\n    if (input_str[0]==input_str[-1]):\n        return \"Equal\"\n    else:\n        return \"Not Equal\""], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    new_arr = []\n    count = [0] * (max(arr)+1)\n    for elem in arr:\n        count[elem] += 1\n    for i in range(len(count)):\n        count[i+1] += count[i]\n    for i in range(len(count)-1, -1, -1):\n        if count[i] != count[i-1]:\n            new_arr.append(i)\n            count[i-1] = count[i]\n    return new_arr\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    # Write your code here\n    count = [0 for _ in range(100)]\n    max_val = max(arr)\n    min_val = min(arr)\n    for num in arr:\n        count[num - min_val] += 1\n    i = 0\n    for j in range(max_val - min_val + 1):\n        for _ in range(count[j]):\n            arr[i] = j + min_val\n            i += 1\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(list1):\n    # Write your code here\n    max_num = max(list1)\n    min_num = min(list1)\n    num_range = max_num - min_num + 1\n    count_arr = [0] * num_range\n    \n    for num in list1:\n        count_arr[num - min_num] += 1\n    \n    new_list = []\n    for idx, count in enumerate(count_arr):\n        new_list += [idx + min_num] * count\n    \n    return new_list\n\n\n# Print count_sort function", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    return list(np.sort(array))\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    length = len(arr)\n    max_element = max(arr)\n    min_element = min(arr)\n    range_of_elements = max_element - min_element + 1\n    count_array = [0] * (range_of_elements)\n    output_array = [0] * (length)\n\n    for i in range(0, length):\n        count_array[arr[i] - min_element] += 1\n\n    for i in range(1, range_of_elements):\n        count_array[i] += count_array[i - 1]\n\n    for i in range(length - 1, -1, -1):\n        output_array[count_array[arr[i] - min_element] - 1] = arr[i]\n        count_array[arr[i] - min_element] -= 1\n\n    return output_array\n\ndef main():\n    arr = [1,23,4,5,6,7,8]\n    assert counting_sort(arr) == [1, 4, 5, 6, 7, 8, 23]\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    min_val = min(arr)\n    max_val = max(arr)\n    count_arr = [0]*(max_val - min_val + 1)\n    sorted_arr = []\n    for val in arr:\n        count_arr[val - min_val] += 1\n    for i in range(len(count_arr)):\n        if count_arr[i]:\n            sorted_arr += [i + min_val] * count_arr[i]\n    return sorted_arr\n\n#print(counting_sort([1,23,4,5,6,7,8]))\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\nfrom typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n+k)\n    Space Complexity: O(n)\n\n    :param arr:\n    :return:\n    \"\"\"\n    max_ = max(arr)\n    min_ = min(arr)\n    range_ = max_ - min_ + 1\n\n    count = [0] * range_\n    output = [0] * len(arr)\n\n    for a in arr:\n        count[a - min_] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for a in arr[::-1]:\n        output[count[a - min_] - 1] = a\n        count[a - min_] -= 1\n\n    return output\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(a):\n    counter = [0]*(max(a)+1)\n    for i in a:\n        counter[i]+=1\n    counter[0] = 0\n    for i in range(1,len(counter)):\n        counter[i] += counter[i-1]\n    c = [0]*len(a)\n    for i in a:\n        c[counter[i]-1] = i\n        counter[i] -= 1\n    return c\n\ndef counting_sort2(a):\n    counter = [0]*(max(a)+1)\n    for i in a:\n        counter[i]+=1\n    counter[0] = 0\n    for i in range(1,len(counter)):\n        counter[i] += counter[i-1]\n    c = [0]*len(a)\n    for i in a:\n        c[counter[i]-1] = i\n        counter[i] -= 1\n    return c\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    result = []\n    for i in range(len(count)):\n        for j in range(count[i]):\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    if array is None:\n        return\n    if len(array) == 0:\n        return array\n    max_element = array[0]\n    for i in array[1:]:\n        if max_element < i:\n            max_element = i\n    max_element += 1\n    count_array = [0] * max_element\n    for i in array:\n        count_array[i] += 1\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n    output_array = [None] * len(array)\n    for i in reversed(array):\n        output_array[count_array[i] - 1] = i\n        count_array[i] -= 1\n    return output_array\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a, t, n):\n    return a*(1-((1-a)**(n)))\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\nfrom functools import reduce\ndef prod(nums):\n\treturn reduce(lambda a,b:a*b, nums, 1)\ndef tn_gp(a,n,r):\n\treturn (a*prod([1+r**i for i in range(1,n+1)]))//(1-r)", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,n,t):\n    s=a\n    for i in range(1,n+1):\n        s=s*t\n    return s\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(t,n,p):\n    if t==1:\n        return p\n    else:\n        return p*tn_gp(t-1,n-1,p)\n\n# print(tn_gp(1,5,2))\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(t,n,p):\n  #your code here\n  res = 1\n  for i in range(n):\n    res = res*p\n  return int(res/math.factorial(n-t))\n\n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\nfrom math import factorial\n\n\ndef n_gp(a, n, t):\n    return a * (t ** n)\n\n\ndef gp_sum(a, n):\n    return (n_gp(a, n, i) / factorial(i))\n\n\ndef tn_gp(a, n, t):\n    return sum([gp_sum(a, i) for i in range(1, t+1)])\n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,n,t):\n    p = a * (1-t**n)\n    return p\n\ndef main():\n    assert tn_gp(1,5,2)==16\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    return a*(t**n)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n, a, r):\n    return a*r**n\n\n#Write a function to find the sum of n terms of arithmetic series"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n# Solution\n\ndef check(n):\n    # the number is not valid\n    if n < 10:\n        return False\n    # reverse the number and then reverse the number again\n    rev_n = int(str(n)[::-1])\n    rev_rev_n = int(str(rev_n)[::-1])\n    # check if the reversal of the reversal of the number is one less than the original number\n    if rev_rev_n == n-1:\n        return True\n    else:\n        return False\n\n# Tests\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(x):\n    if x == (2 * int(str(x)[::-1]) - 1):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n# Solution\ndef check(x):\n    return int(str(x)[::-1]) + 1 == x\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(number):\n    num = str(number)\n    rev = num[::-1]\n    if num == rev[1:]:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(x):\n    num = str(x)\n    if num[0] == '0' and num[1] == '0':\n        return True\n    elif num[0] == '0' and num[1] != '0':\n        return False\n    elif num[0] != '0' and num[1] == '0':\n        if int(num[0]) == 1:\n            return False\n        else:\n            return True\n    else:\n        x = int(num[0])+int(num[-1])\n        if x%2 != 1:\n            return False\n        else:\n            return True\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n# Initialize the function to return False\n\n\ndef check(num):\n    # Write your logic here\n    num = str(num)\n    reverse = num[::-1]\n    return int(reverse) - 2 == num\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n# SOLUTION\ndef check(n):\n    # reverse the number and double it\n    reversed = int(str(n)[::-1]) * 2\n    # if the reverse is less than n + 1, then the reverse is one less\n    if reversed < n + 1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    # Write your solution here\n    if int(str(num)[::-1]) + 1 == num:\n        return True\n    else:\n        return False\n\n# Write the test cases here", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    x = str(num)\n    y = x[::-1]\n    return (int(y) == int(x)-2)\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(x):\n    return x%2==1 and x==int(str(x)[::-1]*2) - 1\n\ndef test():\n    assert check(70) == False\n    assert check(120) == True\n    assert check(6561) == True\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\n# Solution 1\ndef find_Max_Num(digits, n):\n    max_num = []\n    for i in range(n):\n        max_num.append(digits[i])\n    while True:\n        count = 1\n        # print(\"max_num\",max_num)\n        for i in range(len(max_num) - 1):\n            if max_num[i] > max_num[i + 1]:\n                max_num[i], max_num[i + 1] = max_num[i + 1], max_num[i]\n                count += 1\n        if count == 0:\n            break\n    max_num = int(\"\".join(map(str, max_num)))\n    return max_num\n\n\n# Solution 2\ndef find_Max_Num(digits, n):\n    max_num = \"\"\n    for i in range(n):\n        max_num += str(digits[i])\n    max_num = int(max_num)\n    return max_num\n\n\n# Solution 3\ndef find_Max_Num(digits, n):\n    max_num = digits[0]\n    for i in range(1, n):\n        max_num = max(max_num, digits[i]) * 10 ** (n - i - 1) + digits[i]\n    return max_num\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\nfrom typing import List\n\ndef find_Max_Num(digits: List[int], n: int) -> int:\n    max_num = 0\n    nums = []\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                nums.append(int(str(i)+str(j)+str(k)))\n    max_num = max(nums)\n    return max_num\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,size):\n    \"\"\"\n    >>> find_Max_Num([1,2,3],3)\n    321\n    >>> find_Max_Num([1,2,3,4,5],5)\n    54321\n    >>> find_Max_Num([1,2,3,4,5,6],6)\n    654321\n    \"\"\"\n    if len(digits) == 1:\n        return digits[0]*size\n    \n    max_num = 0\n    for i in range(len(digits)):\n        num = find_Max_Num(digits[0:i]+digits[i+1:],size)\n        if num > max_num:\n            max_num = num\n        \n    return max_num * 10 + digits[0]\n\ndef test_Max_Num():\n    assert find_Max_Num([1,2,3],3) == 321\n    assert find_Max_Num([1,2,3,4,5],5) == 54321\n    assert find_Max_Num([1,2,3,4,5,6],6) == 654321\n    ", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(nums, digits):\n    \"\"\"\n    :param nums: list\n    :param digits: int\n    :return: int\n    \"\"\"\n    if digits <= 0:\n        return 0\n    return max(nums[i]*(10**(digits-1)) + find_Max_Num(nums, digits-1)\n               for i in range(len(nums)))\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(nums,k):\n    if len(nums) < k:\n        return 0\n    nums.sort()\n    max_num = 0\n    for i in range(k):\n        max_num = max_num*10 + nums[i]\n    return max_num\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, n):\n    max = 0\n    max_n = 1\n    for i in range(n):\n        max = max * 10 + digits[i]\n        if digits[i] > max_n:\n            max_n = digits[i]\n\n    for i in range(max_n, max + 1):\n        if is_max(i, digits):\n            max = i\n            break\n\n    return max\n\ndef is_max(num, digits):\n    return all(num % digits[i] == 0 for i in range(len(digits)))\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(A,n):\n    A.sort()\n    s = \"\"\n    for i in range(n-1, -1,-1):\n        s += str(A[i])\n    return int(s)\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(nums,n):\n    if n == 1:\n        return nums[0]\n    max = 0\n    for i in range(0,n):\n        if i == n-1:\n            max = max + nums[i]\n            break\n        else:\n            max = max + nums[i]*10**(n-i-1)\n    return max\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(numlist,num):\n\tif numlist[num-1] > 9:\n\t\treturn find_Max_Num(numlist,num-1)\n\telse:\n\t\tfor i in range(num-2,-1,-1):\n\t\t\tnumlist[i] = numlist[i+1]*10 + numlist[i]\n\t\treturn numlist[0]\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    return a*b < 0\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    elif a == 0 and b == 0:\n        return False\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if a < 0 and b < 0:\n        return False\n    elif a > 0 and b > 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    return (a * b) < 0\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n# Solution 1\n\ndef opposite_Signs(x,y):\n  return (x*y<0)\n\n# Solution 2\n\ndef opposite_Signs(x,y):\n  return (x*y) < 0\n\n# Solution 3\n\ndef opposite_Signs(x,y):\n  return x*y < 0\n\n# Solution 4\n\ndef opposite_Signs(x,y):\n  return x*y < 0 if x*y<0 else x*y>0\n\n# Solution 5\n\ndef opposite_Signs(x,y):\n  if (x * y) < 0:\n    return True\n  else:\n    return False\n\n# Solution 6\n\ndef opposite_Signs(x,y):\n  return x*y<0==True\n\n# Solution 7\n\ndef opposite_Signs(x,y):\n  return x*y < 0 or x*y>0\n\n# Solution 8\n\ndef opposite_Signs(x,y):\n  return x*y < 0 != True\n\n# Solution 9\n\ndef opposite_Signs(x,y):\n  return True if (x*y)<0 else False\n\n# Solution 10\n\ndef opposite_Signs(x,y):\n  return (x*y)<0\n\n# Solution 11\n\ndef opposite_Signs(x,y):\n  return (x*y<0)\n\n# Solution 12\n\ndef opposite_Signs(x,y):\n  return (x*y<0)==True\n\n# Solution 13\n\ndef opposite_Signs(x,y):\n  return (x*y<0)==True\n\n# Solution 14\n\ndef opposite_Signs(x,y):\n  return (x*y<0)==True\n\n# Solution 15\n\ndef opposite_Signs(x,y):\n  return (x*y<0)==True\n\n# Solution 16\n\ndef opposite_Signs(x,y):\n  return (x*y<0)==True\n\n# Solution ", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    return True if (a >= 0 and b <= 0) or (a <= 0 and b >= 0) else False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n# use bitwise operators\ndef opposite_Signs(a,b):\n    return (a ^ b) < 0\n\n# using math\ndef opposite_Signs(a,b):\n    return (a-b) < 0 or (b-a) < 0\n\n# using xor operator\ndef opposite_Signs(a,b):\n    return (a or b) and not (a and b)\n\n# using if else\ndef opposite_Signs(a,b):\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return True\n    else:\n        return False\n\n# using a or b not both\ndef opposite_Signs(a,b):\n    return (a * b) < 0\n\n# using x < 0 and x > 0\ndef opposite_Signs(a,b):\n    return a < 0 and b > 0 or a > 0 and b < 0\n\n# using -x\ndef opposite_Signs(a,b):\n    return -a == b or -b == a\n\n# using math.copysign\ndef opposite_Signs(a,b):\n    return math.copysign(1, a) == math.copysign(1, b)", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n# Solution :\n\ndef opposite_Signs(a,b):\n    return a*b < 0 or a==b == 0", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(number):\n    \"\"\"\n    I don't know about maths. But this works.\n    \"\"\"\n    return number == oct(number)\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(num):\n    res = []\n    for n in range(1, num+1):\n        res.append(n*(3*n-1))\n    return res\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\nfrom .utils import is_octagonal\n\n\ndef nth_octagonal_number(n):\n    \"\"\"Returns the nth octagonal number.\"\"\"\n    return n * (2 * n - 1)\n\n\ndef find_octagonal_number(n):\n    \"\"\"Returns the nth octagonal number.\"\"\"\n    octagonals = []\n    for i in range(1, n + 1):\n        if is_octagonal(nth_octagonal_number(i)):\n            octagonals.append(nth_octagonal_number(i))\n    return octagonals\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(number):\n    return octagonal(number) == number\n\ndef octagonal(number):\n    return number * (2*number - 1)\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    #Your code here\n    return ((n*(3*n-1))//2)\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom math import sqrt\n\n\ndef is_octagonal(n):\n    s = sqrt(2 * n + 1)\n    return int(s + 0.5) * (s + 0.5) - 1 == n\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom math import sqrt\nfrom typing import List\n\ndef is_octagonal(n: int) -> bool:\n    \"\"\"\n    Checks if n is a valid octagon number.\n    \"\"\"\n    # There's an analytic solution here for is_octagonal(n), but for our purposes this is a more generic solution.\n    # Here is_octagonal(n) is a wrapper function that checks if the number is valid, and returns true or false.\n    # There is no need to check if the number is actually an octagon.\n    # We just need to check if it's a valid number.\n    # We know that the octagonal numbers increase at a rate of 8:1.\n    # This means that every number should be divisible by 8.\n    # We use the sqrt() function to quickly check if the number is divisible by 8.\n    # This is faster than checking if the number is divisible by 8.\n    if sqrt(n).is_integer():\n        return True\n    return False\n\n\ndef find_nth_octagon(n: int) -> int:\n    \"\"\"\n    Finds the nth octagon number.\n    \"\"\"\n    # This function generates the nth octagon number by generating every octagon number, and then checking if the nth\n    # number is in that list.\n    # We iterate from 1 to 1000000, and check if the nth octagon number is in the list of all octagon numbers.\n    # This is O(n) because of the list of octagon numbers.\n    for num in range(1, 1000001):\n        if is_octagonal(num):\n            if n == 1:\n                return num\n            n -= 1\n    # This code should never be reached, but we add it here to satisfy the linter.\n    raise ValueError(\"Could not find the nth octagon number.\")\n\n\ndef get_nth_octagon_number(n: int) -> List[int]:\n    \"\"\"\n    Returns a list of the nth octagon numbers.\n    \"\"\"\n    # This function generates a list of the nth octagon numbers.\n    # We start with the first octagon number, and then iterate from there.\n    # We also use the is_octag", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache()\ndef is_octagonal(n):\n    \"\"\"Return True if n is a octagonal number, False otherwise.\"\"\"\n    return int((n ** 0.5) ** 2) == n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom typing import Dict\nfrom typing import List\n\n\ndef is_octagonal(number: int) -> bool:\n    \"\"\"Check if a number is an octagonal number.\n\n    Args:\n        number: An integer.\n\n    Returns:\n        Boolean.\n    \"\"\"\n    if number < 1:\n        return False\n    elif number == 1:\n        return True\n    else:\n        # -5\n        # -4\n        # -3\n        # -2\n        # -1\n        #  0\n        #  1\n        #  2\n        #  3\n        #  4\n        #  5\n        #  6\n        #  7\n        #  8\n        #  9\n        # 10\n        # 11\n        # 12\n        # 13\n        # 14\n        # 15\n        # 16\n        # 17\n        # 18\n        # 19\n        # 20\n        # 21\n        # 22\n        # 23\n        # 24\n        # 25\n        # 26\n        # 27\n        # 28\n        # 29\n        # 30\n        # 31\n        # 32\n        # 33\n        # 34\n        # 35\n        # 36\n        # 37\n        # 38\n        # 39\n        # 40\n        # 41\n        # 42\n        # 43\n        # 44\n        # 45\n        # 46\n        # 47\n        # 48\n        # 49\n        # 50\n        # 51\n        # 52\n        # 53\n        # 54\n        # 55\n        # 56\n        # 57\n        # 58\n        # 59\n        # 60\n        # 61\n        # 62\n        # 63\n        # 64\n        # 65\n        # 66\n        # 67\n        # 68\n        # 69\n        # 70\n        # 71\n        # 72\n        # 73\n        # 74\n        # 75\n        # 76\n        # 77\n        # "], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, diff):\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] == diff:\n            dp[i] = dp[i-1] + 1\n    return max(dp)\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom typing import List\n\n\ndef max_len_sub(arr: List[int], key: int) -> int:\n    count = 1\n    max_count = 0\n    cur_sum = 0\n    for i in range(len(arr)):\n        cur_sum += arr[i]\n        if cur_sum == key:\n            count += 1\n            max_count = max(max_count, count)\n            cur_sum = 0\n        elif cur_sum - key > 0:\n            count = 1\n            cur_sum = 0\n    return max_count\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom math import inf\n\n\ndef max_len_sub(arr, k):\n    # Write your code here\n    \"\"\"\n    :param: arr: input array\n    :param: k: difference between adjacent elements\n    return: maximum length of the subsequence with difference between adjacent elements\n    TODO: complete this method and return max_len_sub\n    \"\"\"\n    # O(N) time | O(N) space\n    dp = [0] * len(arr)\n    dp[0] = 1\n    max_len = 1\n    for i in range(1, len(arr)):\n        dp[i] = 1\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= k:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n    return max_len\n\n\ndef max_len_sub_optimized(arr, k):\n    # Write your code here\n    \"\"\"\n    :param: arr: input array\n    :param: k: difference between adjacent elements\n    return: maximum length of the subsequence with difference between adjacent elements\n    TODO: complete this method and return max_len_sub\n    \"\"\"\n    # O(N) time | O(N) space\n    dp = [0] * len(arr)\n    dp[0] = 1\n    max_len = 1\n    for i in range(1, len(arr)):\n        if dp[i - 1] - 1 >= 0:\n            dp[i] = dp[i - 1] - 1\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= k:\n                dp[i] = max(dp[i], dp[j])\n        if dp[i] >= 0:\n            dp[i] += 1\n        max_len = max(max_len, dp[i])\n    return max_len\n\n\ndef max_len_sub_optimized_1d_dp(arr, k):\n    #", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, max_diff):\n    l = len(arr)\n    memo = {}\n\n    def memoize(i, j, diff):\n        if (i, j, diff) in memo:\n            return memo[(i, j, diff)]\n\n        if i >= j:\n            memo[(i, j, diff)] = 1\n            return 1\n\n        if diff > max_diff:\n            memo[(i, j, diff)] = memoize(i + 1, j, 0)\n            return memo[(i, j, diff)]\n\n        res = 1 + max(\n            memoize(i + 1, j, diff),\n            memoize(i, j - 1, diff),\n            memoize(i + 1, j - 1, diff + abs(arr[i] - arr[j]))\n        )\n        memo[(i, j, diff)] = res\n        return res\n\n    return memoize(0, l - 1, 0)\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, x):\n    from collections import defaultdict\n    d = defaultdict(int)\n    ans = 0\n    d[arr[0]] = 1\n    for i in range(1, len(arr)):\n        d[arr[i]] = 1 + d[arr[i] - x] if arr[i] - x in d else 1\n        ans = max(ans, d[arr[i]])\n    return ans\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, x):\n    '''\n    >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n    5\n    >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 2)\n    1\n    >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 3)\n    1\n    >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 6)\n    2\n    >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 4)\n    3\n    '''\n    n = len(arr)\n    arr.sort()\n    mx = -1\n    # dp[i] = max length of subsequence of arr[i:] with difference at most x\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] - arr[j] <= x:\n                dp[i] = max(dp[i], dp[j] + 1)\n        mx = max(mx, dp[i])\n    return mx\n\ndef max_len_sub2(arr, x):\n    '''\n    >>> max_len_sub2([2, 5, 6, 3, 7, 6, 5, 8], 8)\n    5\n    >>> max_len_sub2([2, 5, 6, 3, 7, 6, 5, 8], 2)\n    1\n    >>> max_len_sub2([2, 5, 6, 3, 7, 6, 5, 8], 3)\n    1\n    >>> max_len_sub2([2, 5,", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, max_diff):\n    def sub_len(arr, max_diff):\n        max_len = 0\n        for i in range(len(arr)):\n            if i > max_len and arr[i] - arr[i-1] <= max_diff:\n                max_len += 1\n        return max_len\n\n    max_len = 0\n    for i in range(len(arr)):\n        if i > max_len:\n            max_len = sub_len(arr[:i], max_diff)\n\n    return max_len + 1\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, target):\n    arr_len = len(arr)\n    # initialising sub_arr_map for storing the subsequence\n    sub_arr_map = {target: [0] * arr_len}\n    # iterating through all the subsequences\n    for i in range(arr_len):\n        for j in range(i + 1, arr_len + 1):\n            # finding difference between adjacent elements\n            diff = arr[j - 1] - arr[i]\n            # storing the length of the subsequence if difference is present\n            if diff in sub_arr_map:\n                sub_arr_map[diff][j - 1] = max(sub_arr_map[diff][j - 1], sub_arr_map[diff][i] + 1)\n            else:\n                sub_arr_map[diff] = [1] * arr_len\n                sub_arr_map[diff][j - 1] = 1\n    max_len = 0\n    # finding the maximum length of the subsequence for the target\n    for _, sub_arr in sub_arr_map.items():\n        max_len = max(max_len, max(sub_arr))\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, target):\n    \"\"\"\n    If difference between two adjacent elements is <= target, then\n    max length of subsequence can be found by adding 1 to the length\n    of subsequence with difference between adjacent elements.\n    Else, we need to consider all possible subsequences.\n    \"\"\"\n    # check if array is empty\n    if len(arr) == 0:\n        return 0\n\n    # map to store the subsequences formed with difference\n    # between adjacent elements as keys.\n    # Value is a pair of index of left most element in subsequence\n    # and length of subsequence\n    subsequences = {0: (0, 1)}\n\n    # check if difference is <= target\n    if arr[0] <= target:\n        left_most_idx, length = subsequences[0]\n        subsequences[arr[0] - target] = (left_most_idx, length + 1)\n\n    # iterate over the remaining elements in the array\n    for idx in range(1, len(arr)):\n        # check if difference between current element and previous\n        # element is <= target\n        if arr[idx] - arr[idx - 1] <= target:\n            # check if difference is already present in the map\n            # if yes, then check if length of subsequence formed by\n            # current element is greater than the current one in map\n            # if yes, then update the map\n            # else do nothing\n            if arr[idx] - target in subsequences:\n                left_most_idx, length = subsequences[arr[idx] - target]\n                if idx - left_most_idx + 1 > length:\n                    subsequences[arr[idx] - target] = (left_most_idx, length + 1)\n            # else add the new subsequence to the map\n            else:\n                subsequences[arr[idx] - target] = (idx, 1)\n        # difference is > target, so we need to consider all possible\n        # subsequences\n        else:\n            for diff in subsequences:\n                left_most_idx, length = subsequences[diff]\n                if arr", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom typing import List\n\n\ndef max_len_sub(arr: List[int], num: int) -> int:\n    max_len = 1\n    prev = arr[0]\n    curr = 0\n    curr_len = 0\n\n    for num in arr[1:]:\n        curr_len += 1\n\n        if num == prev:\n            curr_len = 1\n            curr += num\n        elif num == prev + curr:\n            curr_len = 1\n            curr += num\n        elif num == prev - curr:\n            curr_len = 1\n            curr -= num\n\n        if curr_len > max_len:\n            max_len = curr_len\n        prev = num\n\n    return max_len\n\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string,k):\n    length = len(string)\n    count = 0\n    for i in range(length-k+1):\n        sum = 0\n        for j in range(i,i+k):\n            sum += int(string[j])\n        if(sum == k):\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(num,sum):\n    count=0\n    for i in range(len(num)):\n        sum1=0\n        for j in range(i,len(num)):\n            sum1+=int(num[j])\n            if sum1==sum:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string,n):\n    count = 0\n    for i in range(len(string) - n + 1):\n        if sum([int(i) for i in string[i:i+n]]) == n:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,k):\n    count = 0\n    for i in range(0,len(s)-k+1):\n        if sum([int(s[i+j]) for j in range(0,k)]) == k:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,sum):\n    count=0\n    if len(s)<2 or sum<0:\n        return 0\n    elif sum==0:\n        return 1\n    else:\n        for i in range(0,len(s)):\n            if s[i].isdigit():\n                sum-=int(s[i])\n                if sum==0:\n                    count+=1\n                else:\n                    if i+1<=len(s)-1:\n                        count+=count_Substrings(s[i+1:],sum)\n        return count", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            temp = 0\n            for k in range(i,j):\n                temp = temp + int(s[k])\n            if temp == n:\n                count += 1\n    return count\n\n\ncount_Substrings('112112',6)", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str, n):\n\tlen_str = len(str)\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn 1 if str[0] == str[1] else 0\n\telse:\n\t\tif len_str <= n:\n\t\t\treturn 1\n\t\telse:\n\t\t\tsum_of_digits = sum(int(digit) for digit in str)\n\t\t\tif sum_of_digits == n:\n\t\t\t\treturn 1 + count_Substrings(str[1:], n-1)\n\t\t\telse:\n\t\t\t\treturn 0 + count_Substrings(str[1:], n) + count_Substrings(str[1:], n-1)\n\ndef count_Substrings2(str, n):\n\tcount = 0\n\tfor i in range(len(str)):\n\t\tif sum([int(digit) for digit in str[i:i+n]]) == n:\n\t\t\tcount += 1\n\treturn count\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    nums.sort()\n    return nums[0]\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(list_of_nums):\n  # your code here\n  return min(list_of_nums)\n\ndef test_smallest_num():\n  assert smallest_num([10, 20, 1, 45, 99]) == 1\n  assert smallest_num([99, 10, 100]) == 10\n  assert smallest_num([10, 20, 40, 99, 10, 1, 45, 99]) == 1\n  print(\"Success!\")\n\ntest_smallest_num()\n\n# +", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\nfrom typing import List\n\n\ndef smallest_num(num_list: List[int]) -> int:\n    return min(num_list)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(list_to_check):\n    smallest = list_to_check[0]\n    for num in list_to_check:\n        if num < smallest:\n            smallest = num\n    return smallest\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\nimport unittest\n\ndef smallest_num(nums):\n    \"\"\"\n    Find the smallest number in a list of numbers.\n    \n    nums: a list of numbers.\n    \"\"\"\n    return sorted(nums)[0]\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(input_list):\n    # if list is empty\n    if len(input_list) == 0:\n        return -1\n    min_num = input_list[0]\n    for i in range(1,len(input_list)):\n        if input_list[i] < min_num:\n            min_num = input_list[i]\n    return min_num\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n# test case", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(l):\n    for i in l:\n        if i < min(l):\n            min_num = i\n    return min_num\n\n\n# assert smallest_num([10, 20, 1, 45, 99]) == 1\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    # write your code here\n    result = 99999999\n    for n in nums:\n        if n < result:\n            result = n\n    return result\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(lst):\n\t#This is the code that we want to get to.\n\treturn min(lst)\n\t#This is how I figured it out.\n\n#Below are the tests for my code."], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_difference(nums: List[Tuple[int, int]]) -> int:\n    # Assume nums is sorted in increasing order.\n    # Set the first and the last numbers.\n    last_num = nums[0][0]\n    first_num = nums[-1][1]\n    # Iterate from the beginning and the end of the list.\n    # The difference between the current number and the last_num is stored in the variable diff.\n    # If the difference is greater than the max_diff, max_diff is updated.\n    max_diff = 0\n    for i in range(len(nums)):\n        if nums[i][0] - last_num > max_diff:\n            max_diff = nums[i][0] - last_num\n        if first_num - nums[i][1] > max_diff:\n            max_diff = first_num - nums[i][1]\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# pylint: disable=W0105\n\ndef max_difference(pair_list):\n    \"\"\"\n    Return the maximum difference between available pairs.\n\n    Args:\n        pair_list (list[tuple]): List of available pairs of integers.\n    Returns:\n        int: Maximum difference.\n    \"\"\"\n    # make a sorted list of all pairs\n    sorted_pair_list = sorted(pair_list)\n    # make a sorted list of all unique pairs\n    unique_pair_list = list(set(sorted_pair_list))\n    # get the difference between pairs in the list\n    differences = [pair_list[i][1] - pair_list[i][0] for i in range(len(pair_list))]\n    # get the maximum difference\n    return max(differences)\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuples):\n    sorted_tuples = sorted(tuples, key=lambda tup: tup[0])\n    prev_max_diff = sorted_tuples[1][0] - sorted_tuples[0][0]\n    max_diff = prev_max_diff\n    for i in range(len(sorted_tuples)-1):\n        diff = sorted_tuples[i+1][0] - sorted_tuples[i][0]\n        max_diff = max(max_diff, diff)\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuple_list):\n    # sort tuple_list by the first element in each tuple\n    sorted_list = sorted(tuple_list, key=lambda tup: tup[0])\n\n    # initialize max_difference to the first element in the 2nd element in sorted_list\n    max_difference = sorted_list[1][1] - sorted_list[1][0]\n\n    # iterate through the sorted_list\n    for i in range(len(sorted_list) - 1):\n        # if the difference between the current element's 2nd element and 1st element is greater than max_difference\n        if sorted_list[i+1][1] - sorted_list[i+1][0] > max_difference:\n            # set max_difference to the difference between the current element's 2nd element and 1st element\n            max_difference = sorted_list[i+1][1] - sorted_list[i+1][0]\n\n    # return the max_difference\n    return max_difference\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nimport math\nfrom typing import List, Tuple\n\n\ndef max_difference(nums: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Do binary search on a sorted list of the absolute difference\n    of the pairs in the list.\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    >>> max_difference([(1, 2), (1, 1), (3, 2), (5, 2)])\n    2\n    >>> max_difference([(1, 2), (1, 1), (3, 2), (5, 2), (7, 9)])\n    7\n    \"\"\"\n    # sort the list, this gives O(n log n) complexity\n    nums.sort(key=lambda x: abs(x[0] - x[1]))\n\n    # get the first difference, if there are multiple pairs, return the\n    # greatest of the difference, if there's only one pair, return the difference\n    first_difference = math.fabs(nums[0][0] - nums[0][1])\n\n    if len(nums) > 1:\n        return max(first_difference, math.fabs(nums[1][0] - nums[1][1]))\n\n    return first_difference\n\n\ndef max_difference_space(nums: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Do linear search and maintain a max difference variable to keep track of\n    maximum difference seen so far.\n    >>> max_difference_space([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    >>> max_difference_space([(1, 2), (1, 1), (3, 2), (5, 2)])\n    2\n    >>> max_difference_space([(1, 2), (1, 1), (3, 2), (5, 2), (7, 9)])\n    7\n    \"\"\"\n    # sort the list, this gives O(n log n) complexity\n    nums.sort(key", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(xs):\n    xs = sorted(xs)\n    max_diff = 0\n    for i in range(len(xs) - 1):\n        diff = xs[i+1] - xs[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# Using max() function to find the maximum difference.\ndef max_difference(tuples_list):\n    return max([b - a for a, b in tuples_list])\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\n\ndef max_difference(\n    num_list: List[Tuple[int, int]],\n) -> int:\n    num_list = sorted(num_list)\n    result = 0\n    for i, (num1, num2) in enumerate(num_list):\n        if num2 - num1 > result:\n            result = num2 - num1\n\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(sub_marks):\n    return sorted(sub_marks, key=lambda sub: sub[1])\n\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    marks.sort(key=lambda x: x[0])\n    return marks\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n#Your code goes here\n\ndef subject_marks(input_data):\n    return sorted(input_data, key=lambda input_data: input_data[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(lst):\n    return sorted(lst, key = lambda x : x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subjects):\n    return sorted(subjects, key=lambda x: (x[1], x[0]))\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n#This function can be used to sort the tuples based on first item of the tuple\ndef subject_marks(tuple_list):\n    sorted_tuple = tuple(sorted(tuple_list, key=lambda x: x[0]))\n    return sorted_tuple\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\nsubject_marks = lambda l: sorted(l,key=lambda x: x[1])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1])\n\n\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\nimport pytest\n\n\ndef recursive_list_sum(list_of_num):\n    \"\"\"\n    >>> recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n    True\n    \"\"\"\n    if type(list_of_num) == list:\n        return recursive_list_sum(list_of_num[0]) + recursive_list_sum(list_of_num[1])\n    else:\n        return list_of_num\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list):\n    \"\"\"\n    sum of list\n    :param list:\n    :return:\n    \"\"\"\n    if not list:\n        return 0\n\n    return list[0] + recursive_list_sum(list[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(aList):\n    if isinstance(aList, list):\n        return recursive_list_sum(aList[0])+recursive_list_sum(aList[1])\n    else:\n        return aList\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    if len(list)==1:\n        return list[0]\n    else:\n        return list[0] + recursive_list_sum(list[1:])\n\n\n# +", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    '''\n    list sum\n    '''\n    if type(lst) != list:\n        return 0\n    else:\n        return lst[0] + recursive_list_sum(lst[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    # return the sum of all integers in the list lst\n    if not lst:\n        return 0\n    if isinstance(lst,list):\n        return recursive_list_sum(lst[0])+recursive_list_sum(lst[1:])\n    else:\n        return lst\n\ndef test_recursive_list_sum():\n    assert recursive_list_sum([1, 2, [3,4],[5,6]])==21\n    assert recursive_list_sum([])==0\n    assert recursive_list_sum([1])==1\n    assert recursive_list_sum([[1]])==1\n    assert recursive_list_sum([[1],2])==3\ntest_recursive_list_sum()", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(x):\n    return sum(x) if type(x) not in [list, tuple] else recursive_list_sum(x[0]) + recursive_list_sum(x[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    return sum(recursive_list_sum(x) if isinstance(x, list) else x for x in lst) if lst else 0\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(my_list):\n    if isinstance(my_list, list) == False:\n        return my_list\n    else:\n        sum = 0\n        for item in my_list:\n            sum += recursive_list_sum(item)\n        return sum\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n\tcount = 0\n\tfor i in lst:\n\t\tif i>0:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    return len([x for x in lst if x > 0])\n\n\ndef pos_count2(lst):\n    return len([x for x in lst if x >= 0])\n\n\ndef pos_count3(lst):\n    return len([x for x in lst if x and x > 0])\n\n\ndef pos_count4(lst):\n    return len([x for x in lst if x and x >= 0])\n\n\ndef pos_count5(lst):\n    return len([x for x in lst if x and x >= 0])\n\n\ndef test_pos_count():\n    assert pos_count([1,-2,3,-4]) == 2\n    assert pos_count([]) == 0\n    assert pos_count([1]) == 1\n    assert pos_count([0,0,0,0,0,0]) == 0\n    assert pos_count([1,2,-1]) == 2\n    assert pos_count([-2,-4,-1,-5]) == 0\n    assert pos_count([-2,-4,-1,-5]) == 0\n    assert pos_count([2,3]) == 2\n    assert pos_count([2,3,0,0,0]) == 1\n    assert pos_count([0,0,2,3,0,0,0]) == 1\n    assert pos_count([0,0,0,0,0,0,2,3,0,0,0]) == 1\n    assert pos_count([0,0,0,0,0,0,0,0,0,2,3,0,0,0]) == 1\n    assert pos_count([0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0]) == 1\n    assert pos_count([-1,-2,-3,-4,-5,-6]) == 0\n    assert pos_count([1,2,3,4,5,6]) == 6\n    assert pos_count([0,0,0,0,0,0,1,2,3,4,", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(list_):\n    count = 0\n    for num in list_:\n        if num >= 0:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(l):\n\tcount = 0\n\tfor e in l:\n\t\tif e > 0:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(l):\n    return len([x for x in l if x > 0])\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    pos = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n    return pos\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    return sum([i >= 0 for i in lst])\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n<=1:\n        return 1\n    memo = [1,1]\n    for i in range(2,n+1):\n        memo.append(memo[i-1]+memo[i-2])\n    return memo[-1]\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef bell_number(n: int) -> int:\n    return 0 if n == 0 else 1 + sum(bell_number(n-i) for i in range(1, n+1))\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    For even numbers n, we know that there are n! unique partitions.\n    For odd numbers, we know that there are 2^n unique partitions.\n    We can use the identity: 2*2^n = (2^n)*2 = 2^(n+1)\n    \"\"\"\n    if n%2==1:\n        return 2**(n+1)\n    else:\n        return factorial(n)\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n == 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += bell_number(i)*bell_number(n-i-1)\n    return res\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    bell_num = [0]*(n+1)\n    bell_num[0]=0\n    bell_num[1]=1\n    for i in range(2,n+1):\n        bell_num[i]=1\n        for j in range(1,i+1):\n            bell_num[i]+=bell_num[j-1]\n    return bell_num[n]\ndef bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        bell_num = 1\n        for i in range(1, n):\n            bell_num += bell_number(i)\n        return bell_num\n# def bell_number(n):\n#     \"\"\"\n#     n: int\n#     rtype: int\n#     \"\"\"\n#     if n == 0 or n == 1:\n#         return 1\n#     else:\n#         bell_num = [1]\n#         for i in range(1, n):\n#             bell_num.append(bell_num[i-1]+bell_number(i))\n#         return bell_num[n-1]\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n# method 1 (based on https://www.geeksforgeeks.org/bell-numbers/)\ndef bell_number_iterative(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 0\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j]\n    return bell[n]\n\n# method 2 (based on https://www.geeksforgeeks.org/bell-numbers/)\ndef bell_number_recursive(n):\n    if n == 0 or n == 1:\n        return 0\n    return bell_number_recursive(n-1) + bell_number_recursive(n-2)\n\n# Driver code\nn = 4", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nimport pytest\n\ndef bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of bell numbers.\n\n    Args:\n        n: the number of objects to partition\n\n    Returns:\n        int: the number of ways to partition a set of bell numbers.\n    \"\"\"\n    # 1 means 1 way\n    # 2 means 2 ways\n    # 3 means 5 ways\n    # 4 means 15 ways\n    # 5 means 52 ways\n    # 6 means 203 ways\n    # 7 means 877 ways\n    # 8 means 4140 ways\n    # 9 means 21147 ways\n    # 10 means 115975 ways\n    # 11 means 678570 ways\n    # 12 means 4213597 ways\n    # 13 means 27644437 ways\n    # 14 means 188956593 ways\n    # 15 means 1304969586 ways\n    # 16 means 96948452673 ways\n    # 17 means 733076744144 ways\n    # 18 means 5731478440138 ways\n    # 19 means 46790602880049 ways\n    # 20 means 394439432379136 ways\n    # 21 means 3383078535801283 ways\n    # 22 means 29447300784648696 ways\n    # 23 means 259896044620105613 ways\n    # 24 means 2324965794800092766 ways\n    # 25 means 21085536922077807067 ways\n    # ", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 1:\n        return 1\n    return bell_number(n-1)+bell_number(n-2)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    return (all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1)))\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    return all(x<=y for x,y in zip(arr[:-1],arr[1:]))\n\ndef is_Monotonic_optimized(arr):\n    if len(arr) < 2:\n        return True\n    \n    if arr[0] == arr[1]:\n        return is_Monotonic(arr[1:])\n    elif arr[0] > arr[1]:\n        return is_Monotonic(arr[1:]) or is_Monotonic(arr[1:])\n    else:\n        return False\n    ", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    if arr[0] <= arr[1]:\n        for i in range(2, len(arr)):\n            if arr[i - 1] > arr[i]:\n                return False\n        return True\n    else:\n        for i in range(2, len(arr)):\n            if arr[i - 1] < arr[i]:\n                return False\n        return True\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\nimport numpy as np\nfrom typing import List\n\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if len(arr) < 2:\n        return True\n    elif len(arr) == 2:\n        return arr[0] <= arr[1]\n    else:\n        if np.all(np.diff(arr) >= 0):\n            return True\n        elif np.all(np.diff(arr) <= 0):\n            return True\n        else:\n            return False\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n# Solution\n\ndef is_Monotonic(arr):\n\n    if len(arr) <= 2:\n        return True\n\n    # Iterate through the array\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            continue\n        elif arr[i] > arr[i + 1]:\n            return False\n        else:\n            continue\n\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    flag = arr[1] >= arr[0]\n    for i in range(1, len(arr) - 1):\n        if flag == arr[i] >= arr[i + 1]:\n            flag = arr[i] >= arr[i + 1]\n        else:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return True if arr[0] == arr[1] else False\n    \n    if arr[0] <= arr[1]:\n        return is_Monotonic(arr[1:])\n    else:\n        return False\n    \n    ", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if arr[0]<arr[-1]:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(a,b):\n    if b in a:\n        return True\n    return False\n\ndef is_sublist_loop(a,b):\n    for item in b:\n        if item not in a:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    return list(set(list2).issubset(set(list1)))\n\n#main", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\nfrom typing import List\n\n\ndef is_sublist(l: List[int], l_sub: List[int]) -> bool:\n    \"\"\"\n    Time complexity: O(n + m)\n    Space complexity: O(1)\n    \"\"\"\n    if len(l) == 0:\n        return False\n    elif len(l) < len(l_sub):\n        return False\n    else:\n        i = 0\n        while i < len(l) - len(l_sub) + 1:\n            if l[i : i + len(l_sub)] == l_sub:\n                return True\n            i += 1\n    return False\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    if list1_set.issubset(list2_set):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n# Time Complexity=O(len(sublist) * len(superlist))\n# Space Complexity=O(1)\n\n\ndef is_sublist(superlist, sublist):\n    if not sublist or not superlist:\n        return False\n    if sublist[0] == superlist[0]:\n        return is_sublist(superlist[1:], sublist[1:])\n    return is_sublist(superlist[1:], sublist)\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(l, sublist):\n    if len(sublist) > len(l):\n        return False\n    \n    for i in range(len(l) - len(sublist) + 1):\n        if l[i:i+len(sublist)] == sublist:\n            return True\n    \n    return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main_list, sublist):\n    main_set = set(main_list)\n    sub_set = set(sublist)\n    if main_set.issuperset(sub_set):\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(l,subl):\n    # Your code here\n    for i in subl:\n        if i not in l:\n            return False\n    return True\n\n\n# +"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    if len(set([len(tuple) for tuple in tuples])) == 1:\n        return 'All tuples have same length'\n    else:\n        return 'Not all tuples have same length'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    for x in tuples:\n        if len(x) != length:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\n# Solutions\n\n\ndef get_equal(tuples, n):\n    if not all([len(x) == n for x in tuples]):\n        return 'All tuples have same length'\n    return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\nfrom typing import Tuple, List, Dict, Callable\nfrom collections import Counter\nfrom functools import partial\n\n\ndef get_equal(tuples: List[Tuple], length: int) -> str:\n    counter = Counter()\n    for t in tuples:\n        counter.update(t)\n    return \"All tuples have same length\" if len(counter) == 1 and list(counter.values())[0] == length else \"Not all tuples have same length\"\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    l = len(tuples)\n    for i in range(l-1):\n        if len(tuples[i]) != length:\n            return \"All tuples have not equal length\"\n    return \"All tuples have same length\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\nfrom unittest import TestCase\n\n\ndef get_equal(tuples, length):\n    \"\"\"\n    :param tuples: list of tuples\n    :param length: integer\n    :return: string\n    \"\"\"\n    return all(len(t) == length for t in tuples) and 'All tuples have same length' or 'Not all tuples have same length'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    if len(set([len(t) for t in tuples])) == 1:\n        return \"All tuples have same length\"\n    else:\n        return \"Not all tuples have same length\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\n# solution\ndef get_equal(tuples, length):\n  for tuple in tuples:\n    if len(tuple) != length:\n      return 'Some tuples have different length'\n  return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\nimport pytest\n\nfrom .all_equal import get_equal\n\n\n@pytest.mark.parametrize('inputs, expected', [\n    [(11, 22, 33), 'All tuples have same length'],\n    [(11, 22, 33), 3],\n    [(11, 22), 'All tuples have same length'],\n    [(11, 22), 2],\n    [(11,), 'All tuples have same length'],\n    [(11,), 1],\n])\ndef test_get_equal(inputs, expected):\n    assert get_equal(inputs) == expected\n    assert get_equal(inputs, len(inputs[0])) == expected\n\n\ndef test_get_equal_exception():\n    with pytest.raises(TypeError) as ex:\n        get_equal([(11,), (22, 33)])\n    assert 'All tuples have to be of same length' in str(ex.value)\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(xs):\n\tn = len(xs)\n\tif n < 2:\n\t\treturn xs\n\tgap = n\n\tswapped = True\n\twhile gap > 1 or swapped:\n\t\tgap = gap * 10 // 13\n\t\tif gap < 1:\n\t\t\tgap = 1\n\t\tswapped = False\n\t\tfor i in range(n - gap):\n\t\t\tif xs[i] > xs[i+gap]:\n\t\t\t\txs[i], xs[i+gap] = xs[i+gap], xs[i]\n\t\t\t\tswapped = True\n\treturn xs\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    gap = len(lst)\n    swapped = True\n\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = max(1, int(gap / 1.3))\n\n        swapped = False\n\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n    return lst\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nfrom .sort import sort\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(unsorted_list):\n\t\"\"\"\n\t:param unsorted_list: unsorted list of integers\n\t:return: sorted list of integers\n\t\"\"\"\n\tn = len(unsorted_list)\n\tgap = n\n\twhile gap > 1:\n\t\tgap = gap // 1.25\n\t\tif gap < 1:\n\t\t\tgap = 1\n\t\tfor i in range(0, n-gap):\n\t\t\tif unsorted_list[i] > unsorted_list[i+gap]:\n\t\t\t\tunsorted_list[i], unsorted_list[i+gap] = unsorted_list[i+gap], unsorted_list[i]\n\treturn unsorted_list\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(xs):\n    gap = len(xs)\n    shrink = 1.3\n    while gap >= 1:\n        for i in range(gap, len(xs)):\n            j = i\n            while j >= gap and xs[j-gap] > xs[j]:\n                xs[j], xs[j-gap] = xs[j-gap], xs[j]\n                j -= gap\n        gap = int(gap / shrink)\n    return xs\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nfrom typing import List, Any\n\n\ndef comb_sort(arr: List[Any]) -> List[Any]:\n    length = len(arr)\n    gap = length\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(length - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    def swap(a, b):\n        arr[a], arr[b] = arr[b], arr[a]\n\n    def double_gap():\n        gap *= 2\n\n    n = len(arr)\n    gap = n\n    while gap > 1:\n        for i in range(0, n - gap):\n            if arr[i] > arr[i + gap]:\n                swap(i, i + gap)\n        double_gap()\n\n    return arr\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    def update_gap(gap):\n        gap = int(gap / 1.25)\n        return gap if gap > 1 else 1\n\n    gap = len(lst)\n    swap = True\n    while gap > 1 or swap:\n        gap = update_gap(gap)\n        swap = False\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swap = True\n    return lst\n\n\n# 7.2.7 - Bubble sort"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    i = 1\n    while(i*i <= n):\n        j = i+1\n        while(j*j <= n):\n            if i*i + j*j == n:\n                return True\n            j+=1\n        i+=1\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    \"\"\"\n    left, right = 0, int(math.sqrt(n))\n    while left <= right:\n        a = left * left\n        b = right * right\n        if a == b:\n            return True\n        elif a < b:\n            left += 1\n        else:\n            right -= 1\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    from math import sqrt\n    for i in range(1, int(sqrt(num))+1):\n        if num % i == 0:\n            if i % 2 != 0:\n                return False\n            sqr1 = i\n            sqr2 = num//i\n            return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(sqrt(n))):\n        if int(sqrt(n)) - int(sqrt(i)) == n - i**2:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    l=list()\n    for i in range(1,int(n**0.5)+1):\n        if(n%i==0):\n            l.append(i)\n    return (l[0] != (n//l[0]))\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n\tfor i in range(1,int(num**0.5)+1):\n\t\tif (num - (i**2))==((i+1)**2):\n\t\t\treturn True\n\treturn False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\nimport math\ndef is_square(num):\n    if int(num) == 0:\n        return False\n    return math.sqrt(num).is_integer()\ndef diff_square(num):\n    sqr_diff = 0\n    for i in range(1,num):\n        sqr_diff += i\n        if is_square(sqr_diff) and is_square(num - sqr_diff):\n            return True\n    return False"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiter_list = ['\\n', '*']):\n    for delimiter in delimiter_list:\n        string = string.replace(delimiter, ' ' + delimiter + ' ')\n    return [part.strip() for part in string.split()]\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(string):\n    return re.split(r'\\s+|\\\\+|\\*+', string)\n\n\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nfrom typing import List\n\n\ndef multiple_split(string: str) -> List[str]:\n    return string.split(\" \")\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\ndef multiple_split(string, delimiters = ['*', '\\n']):\n    return re.split('|'.join(delimiters), string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string):\n\treturn re.findall(r'\\w+', string)\n\n# print multiple_split('Forces of the \\ndarkness*are coming into the play.')\n# print multiple_split('123 456 789')\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\n\ndef multiple_split(string):\n    return re.split(r\"[\\s\\*,]\", string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string):\n    return re.split(r'\\s*[\\*]\\s*', string)", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(str):\n    delimiter = '|'\n    return str.split(delimiter)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s):\n    import re\n    return re.split('[\\*\\.\\,]', s)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(s):\n    return re.split(r'[ ,]+', s)"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, colors):\n    #patterns: list of strings\n    #colors: list of strings\n    #return True if patterns is the sequence of colors, False otherwise\n    #...\n    patterns_num = len(patterns)\n    colors_num = len(colors)\n    if patterns_num != colors_num:\n        return False\n    else:\n        for i in range(patterns_num):\n            if colors[i] != patterns[i%patterns_num]:\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(a, b):\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        if b.count(a[i]) == 0:\n            return False\n        else:\n            b[b.index(a[i])] = -1\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, seq):\n  return seq==[p for p in patterns if p in seq]\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n# Solution \ndef is_samepatterns(arr, patterns):\n    result = True\n    if len(arr) != len(patterns):\n        return False\n    for i in range(len(arr)):\n        if arr[i] != patterns[i%len(patterns)]:\n            result = False\n            break\n    return result\n# Test case", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\nimport collections\ndef is_samepatterns(patterns,words):\n  s=collections.defaultdict(int)\n  for word in words:\n    s[word]+=1\n  return all([s[word]==patterns[i%len(patterns)] for i,word in enumerate(words)])", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    for index in range(len(arr1)):\n        if arr1[index] != arr2[index]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(arr,patterns):\n    l=len(arr)\n    patlen=len(patterns)\n    if patlen!=l:\n        return False\n    p=0\n    a=0\n    for i in range(l):\n        if arr[i]==patterns[p]:\n            p+=1\n        elif arr[i]==patterns[a]:\n            a+=1\n    if p==patlen:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(colors, patterns):\n    colors = [item for item in colors]\n    patterns = [item for item in patterns]\n    return len(colors) == len(patterns) and all([color == pattern for color, pattern in zip(colors, patterns)])\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(sequence, patterns):\n    count = 0\n    for i in range(len(patterns)):\n        if sequence[i] == patterns[i]:\n            count += 1\n    if count == len(patterns):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, seq):\n    \"\"\"\n    :param: patterns - list of strings\n    :param: seq - list of strings\n    return: return a boolean value True if the order of strings in the sequence are the same as in the patterns, False otherwise\n    TODO - complete this method and remove the pass statement\n    \"\"\"\n    count = 0\n    for i in range(len(patterns)):\n        count = 0\n        for j in range(len(patterns[i])):\n            if patterns[i][j] == seq[j]:\n                count +=1\n        if count == len(patterns[i]):\n            pass\n        else:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    res = []\n    for tpl in tuples:\n        if all(i % k == 0 for i in tpl):\n            res.append(tpl)\n    return res\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef find_tuples(tuple_list: List[Tuple[int, ...]], k: int) -> str:\n    return str(tuple(tuple(x) for x in tuple_list if all([i % k == 0 for i in x])))\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    if tuples == []:\n        return '[]'\n    if k == 0:\n        return '[]'\n    l = []\n    for i in tuples:\n        flag = True\n        for j in i:\n            if j % k != 0:\n                flag = False\n                break\n        if flag:\n            l.append(i)\n    return str(l)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nimport pytest\n\n\ndef find_tuples(lst, k):\n    return [f'({\", \".join(map(str, tup))})' for tup in lst if all(x % k == 0 for x in tup)]\n\n\ndef test_find_tuples():\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(12, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(12, 24, 12), (12, 18, 21)]'\n    assert find_tuples([(12, 24, 12), (7, 9, 6), (12, 18, 21)], 2) == '[]'\n    assert find_tuples([(12, 24, 12), (7, 9, 6), (12, 18, 21), (12, 24, 12), (12, 18, 21)], 6) == '[(12, 24, 12), (12, 24, 12), (12, 18, 21), (12, 18, 21)]'\n    with pytest.raises(AssertionError):\n        find_tuples([(12, 24, 12), (7, 9, 6), (12, 18, 21), (12, 24, 12), (12, 18, 21)], 2)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuple_list, k):\n    return ', '.join(str(t) for t in tuple_list if all(i % k == 0 for i in t))\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    return [tuple for tuple in tuples if all(x % k == 0 for x in tuple)]\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all([i % k == 0 for i in t])]\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom typing import List\n\n\ndef find_tuples(arr: List[tuple], k: int) -> str:\n    result = []\n    for t in arr:\n        if all(a % k == 0 for a in t):\n            result.append(t)\n    return str(result)\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples_list, k):\n    return_list = []\n    for item in tuples_list:\n        if all(i % k == 0 for i in item):\n            return_list.append(item)\n    return return_list\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_squares(rows, columns):\n\treturn rows*columns\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_squares(x,y):\n\treturn x*y\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(x,y):\n    return x * y\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n, m):\n    count = 0\n    for i in range(m):\n        count = count + n\n    return count", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(a,b):\n    assert (a > 0 and b > 0), \"Either height or width must be greater than zero\"\n    return a * b\n\ndef test_count_Squares():\n    assert count_Squares(4,3) == 20\n\ntest_count_Squares()\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(r,c):\n    if r == 1 or c == 1:\n        return 1\n    \n    return count_Squares(r-1,c) + count_Squares(r,c-1)\n\n\n# -\n\n# ### Question 2.5: Return multiple values using tuples\n#\n# Using the `count_Squares` function defined in the previous question, implement a function that returns the number of squares in a rectangle, as well as the number of *perimeter* squares in that rectangle.\n#\n# > Hint: To return multiple values, add a return statement with a tuple of values.\n#\n# - Use the following test code to check your solution.\n#\n# ```python\n# n_squares, n_perimeter = count_Squares_and_perimeter(4,3)\n# print(n_squares, n_perimeter)\n# ```\n\n# +", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# <h3>Solutions</h3>\n\ndef count_squares(m, n):\n    return m * n\n\n\n# <h3>Test Cases</h3>\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return (n**2)*(m**2)\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (a):\n    x = 0\n    y = 0\n    for i in str(a):\n        if int(i)%2==0:\n            x += int(i)\n        else:\n            y += int(i)\n    if x == y:\n        return False\n    else:\n        return True\n\n#print(is_Diff(12345))", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n\t#get the digits of a number\n\tdigits = []\n\tfor digit in str(num):\n\t\tdigits.append(digit)\n\t#find the sum of even and odd digits\n\teven_sum = 0\n\todd_sum = 0\n\tfor digit in digits:\n\t\tif digit.isdigit():\n\t\t\tif int(digit)%2 == 0:\n\t\t\t\teven_sum += int(digit)\n\t\t\telse:\n\t\t\t\todd_sum += int(digit)\n\tif even_sum == odd_sum:\n\t\treturn True\n\telse:\n\t\treturn False\n\n#test", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# return True if sum of even digits is equal to sum of odd digits, False otherwise\ndef is_Diff(x):\n\tif x % 2 == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    even = sum(int(n) for n in str(num) if int(n)%2==0)\n    odd = sum(int(n) for n in str(num) if int(n)%2==1)\n    return odd-even\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n#solution\ndef is_Diff(a):\n    d = 0\n    for i in str(a):\n        if int(i) % 2 == 0:\n            d += int(i)\n    b = 0\n    for i in str(a):\n        if int(i) % 2 != 0:\n            b += int(i)\n    if d > b:\n        return d - b\n    else:\n        return b - d\n#test", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# First try\ndef is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    while n != 0:\n        if n % 2 == 0:\n            even_sum += n % 10\n            n = n // 10\n        else:\n            odd_sum += n % 10\n            n = n // 10\n    if even_sum == odd_sum:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    odd_sum = sum([int(i) for i in str(n) if int(i) % 2 != 0])\n    even_sum = sum([int(i) for i in str(n) if int(i) % 2 == 0])\n    return abs(odd_sum-even_sum)\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    \"\"\"\n    Get the sum of even digits and odd digits of a number.\n    :param num: integer\n    :return: boolean\n    \"\"\"\n    if num < 10:\n        return False\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        num = num / 10\n        if digit % 2 == 0:\n            even = even + digit\n        else:\n            odd = odd + digit\n    return even - odd\n\n# print is_Diff(12345)\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    if num%2 == 0:\n        return True\n    else:\n        return False\n\ndef sum_of_even(num):\n    num_list = list(str(num))\n    sum = 0\n    for i in num_list:\n        if is_Diff(int(i)):\n            sum += int(i)\n    return sum\n\ndef sum_of_odd(num):\n    num_list = list(str(num))\n    sum = 0\n    for i in num_list:\n        if is_Diff(int(i)):\n            sum += int(i)\n    return sum\n\ndef sum_of_even_and_odd(num):\n    even = sum_of_even(num)\n    odd = sum_of_odd(num)\n    return even+odd\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    sum = 0\n    l = list(str(n))\n    for i in l:\n        sum += int(i)\n    if sum%2 == 0:\n        return False\n    else:\n        return True"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n+1):\n        bin_i = bin(i)[2:]\n        count += bin_i.count(\"1\")%2\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    def set_bits(n):\n        count = 0\n        while n>0:\n            if n & 1:\n                count+=1\n            n >>= 1\n        return count\n    return sum(set_bits(i)==1 for i in range(1,n+1))\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(num):\n    count=0\n    for i in range(0,num+1):\n        count+=count_SetBits(i)\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\nfrom nose.tools import assert_equal\n\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') % 2:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n + 1):\n        s = bin(i)\n        count += s.count('1')%2\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    # Here we are counting the set bits in a number\n    # we are using the fact that in a binary number\n    # the right most set bit (odd) will be always\n    # one of the set bits (since it is odd)\n    # The remaining bits will be zeros\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(num):\n    count = 0\n    while num:\n        if num & 1 == 1:\n            count += 1\n        num >>= 1\n    return count"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return (len(word)%2 != 0)\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n# Solution\ndef word_len(word):\n    return len(word) % 2 != 0\n\n# Test Cases", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return bool(len(word) % 2)\n\ndef word_len2(word):\n    return len(word) % 2\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n\tif len(word)%2 == 0:\n\t\treturn False\n\telse:\n\t\treturn True\n\n#Printing the output", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n#assert len(word) % 2 == 0\n#return False\n#return len(word) % 2 == 0\n\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\nword = input(\"Enter a word: \")", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n# YOUR CODE GOES HERE", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return len(word) % 2 == 0\n\ndef test_word_len():\n    assert word_len(\"Hadoop\") == False\n\ndef main():\n    word = input()\n    print(word_len(word))\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word)%2==0:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfrom math import sqrt, pow\n\n\ndef tetrahedral_number(n):\n    return 1 / 2 * (pow(n, 2) - n) * sqrt(pow(n, 2) + 1)\n\n\ndef tetrahedral_number2(n):\n    return 1 / 4 * (pow(n, 2) + pow(n, 3))\n\n\ndef tetrahedral_number3(n):\n    return 1 / 4 * (n + pow(n, 2) + pow(n, 3) + pow(n, 4))\n\n\ndef tetrahedral_number4(n):\n    return 1 / 8 * (pow(n, 2) - pow(n, 3) + pow(n, 4))\n\n\ndef tetrahedral_number5(n):\n    return 1 / 8 * (pow(n, 2) + pow(n, 3) + pow(n, 4))\n\n\ndef tetrahedral_number6(n):\n    return 1 / 8 * (pow(n, 2) - pow(n, 3) + pow(n, 4))\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n == 0:\n        return 0.0\n    return (n-1)**4 * (n-1)**3 * (n-1) * (n) / 3.0 + 1\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n == 1:\n        return 1\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom sympy import Symbol, Rational, Float, solve\n\nfrom pydgeot.exceptions import TetrahedralNumberNotFound\nfrom pydgeot.util import memoize\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    >>> tetrahedral_number(5)\n    35.0\n    \"\"\"\n    return (1/2.0)*(n*(n+1)*(n+2)*(n+3))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom math import sqrt, floor, ceil\nfrom functools import lru_cache\nfrom typing import Callable, Iterable\n\n\n@lru_cache(maxsize=100)\ndef tetrahedral_number(n: int) -> float:\n    sqrt5 = sqrt(5)\n    return (1 / 4) * ((sqrt5 + 1) * (2 * n - 1) ** 2 + (sqrt5 - 1) * (2 * n + 1) ** 2)\n\n\n@lru_cache(maxsize=100)\ndef get_tetrahedral_numbers_up_to(n: int) -> Iterable[float]:\n    return [tetrahedral_number(i) for i in range(1, n + 1)]\n\n\ndef main() -> None:\n    \"\"\"\n    >>> main()\n    \"\"\"\n    print(get_tetrahedral_numbers_up_to(5))\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return sum([tetrahedron_number(i) for i in range(n+1)])\n\ndef tetrahedron_number(n):\n    return sum([tetrahedron_side(i) for i in range(n+1)])\n\ndef tetrahedron_side(n):\n    return 1.0/4.0 * (n**2 + n + 2)\n\n#print(tetrahedral_number(5))\n#print(tetrahedron_number(5))\n#print(tetrahedron_side(5))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nimport math\nfrom typing import Callable\n\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    tetrahedral_number calculates the nth tetrahedral number.\n    :param n:\n    :return:\n    \"\"\"\n    return 1.0 / (1 + math.sqrt(n))\n\n\ndef test_tetrahedral_number() -> None:\n    \"\"\"\n    This function tests the tetrahedral_number function.\n    \"\"\"\n    assert tetrahedral_number(4) == 3.5\n    assert tetrahedral_number(5) == 35.0\n    assert tetrahedral_number(6) == 210.0\n    assert tetrahedral_number(7) == 1540.0\n\n\ndef print_solution(n: int, function: Callable) -> None:\n    \"\"\"\n    This function prints the solution.\n    :param n:\n    :param function:\n    :return:\n    \"\"\"\n    print(function(n))\n\n\ndef main() -> None:\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    print_solution(4, tetrahedral_number)\n    print_solution(5, tetrahedral_number)\n    print_solution(6, tetrahedral_number)\n    print_solution(7, tetrahedral_number)\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom math import sqrt, floor\n\n\ndef tetrahedral_number(n):\n    if n == 1:\n        return 1.0\n    else:\n        return (4.0 * (n - 1) + 1.0) * tetrahedral_number(n - 1) / n\n\n\ndef main():\n    print(tetrahedral_number(floor(sqrt(31))))\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    pass\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple_1, tuple_2):\n    zipped_list = []\n    for item_1, item_2 in zip(tuple_1, tuple_2):\n        zipped_list.append((item_1, item_2))\n    return zipped_list\n\n#test case", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple_1,tuple_2):\n    \"\"\"\n    Return a list of tuples that are created from zipping two tuples.\n    Input:\n    tuple_1 (tuple): tuple 1\n    tuple_2 (tuple): tuple 2\n    Output:\n    new_tuple (list): list of tuples of the form [(t1_1,t2_1),(t1_2,t2_2)]\n    \"\"\"\n    #create a new empty list\n    new_tuple = []\n    #loop through the values of the first tuple\n    for i in range(0,len(tuple_1)):\n        #append the i'th value of the first tuple and the i'th value of the second tuple to the new list\n        new_tuple.append((tuple_1[i],tuple_2[i]))\n    return new_tuple\n\n#Call the function", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(first_tuple, second_tuple):\n    first_tuple_length = len(first_tuple)\n    second_tuple_length = len(second_tuple)\n    result_length = min(first_tuple_length, second_tuple_length)\n    result = []\n    for i in range(result_length):\n        result.append((first_tuple[i], second_tuple[i]))\n    return result\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1,tuple2):\n    return [(tuple1[x], tuple2[x]) for x in range(len(tuple1))]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1, tuple2):\n    return [ (tuple1[i], tuple2[i]) for i in range(len(tuple1)) ]\n\n#assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1,tuple2):\n    return list(zip(tuple1,tuple2))\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((t1[i], t2[i]))\n    return result\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1,tuple2):\n    result = []\n    for i,j in zip(tuple1,tuple2):\n        result.append((i,j))\n    return result", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\nimport unittest\n\ndef zip_tuples(tup1, tup2):\n    if len(tup1) > len(tup2):\n        return list(zip(tup1, tup2 + [None]*(len(tup1) - len(tup2))))\n    else:\n        return list(zip(tup1 + [None]*(len(tup2) - len(tup1)), tup2))\n\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    vol=4*pi*r**3/3\n    return vol\n\n#%%\n#Question 5", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(r):\n    return (4/3)*math.pi*(r**3)\n\ndef test_volume_sphere():\n    assert volume_sphere(10)==4188.790204786391\n\n#------------------------------------------------------------------------------------------------\n# Write a function that takes a character and returns True if it is a vowel.\n# assert vowel_checker('a')==True\n\ndef vowel_checker(char):\n    if char=='a' or char=='e' or char=='i' or char=='o' or char=='u':\n        return True\n    return False\n\ndef test_vowel_checker():\n    assert vowel_checker('a')==True\n\n#------------------------------------------------------------------------------------------------\n# Write a function that finds the sum of all elements in a list.\n# assert list_sum([1,2,3,4,5,6,7,8,9,10])==55\n\ndef list_sum(num_list):\n    num_sum = 0\n    for num in num_list:\n        num_sum += num\n    return num_sum\n\ndef test_list_sum():\n    assert list_sum([1,2,3,4,5,6,7,8,9,10])==55\n\n#------------------------------------------------------------------------------------------------\n# Write a function that takes a string and returns a count of each vowel found in the string.\n# assert vowel_count('The quick brown fox jumps over the lazy dog.')=={'a': 1, 'e': 3, 'i': 1, 'o': 1, 'u': 1}\n\ndef vowel_count(sentence):\n    vowels = {}\n    vowels['a'] = sentence.lower().count('a')\n    vowels['e'] = sentence.lower().count('e')\n    vowels['i'] = sentence.lower().count('i')\n    vowels['o'] = sentence.lower().count('o')\n    vowels['u'] = sentence.lower().count('u')\n    return vowels\n\ndef test_vowel_count():", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\n# + id=\"j1y1H8Q349wy\"\ndef volume_sphere(r):\n  return 4/3*math.pi*r**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\n# write your code here\ndef volume_sphere(radius):\n    return 4/3 * math.pi * radius**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    # V = 4/3 * pi * radius^3\n    return 4/3 * math.pi * radius**3\n\n\n# 10.11", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(r):\n    vol = (4.0/3.0)*pi*r**3\n    return vol\n\n\ndef test_volume_sphere():\n    assert volume_sphere(10)==4188.790204786391", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nimport math\n\ndef volume_sphere(radius):\n    vol = (4.0/3)*math.pi*(radius**3)\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n# define the function\ndef volume_sphere(r):\n    return 4/3*math.pi*r**3\n\n\n# test the function", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(r):\n    return 4.0/3.0*math.pi*r**3\n\n# test function", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    \"\"\"\n    Return the volume of a sphere.\n    >>> volume_sphere(10)\n    4188.790204786391\n    \"\"\"\n    return (4 * math.pi * r**3)/3\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n# Python program to find sum of \n# characters in a string \ndef get_Char(str1): \n      \n    # Initialize result \n    result = 0\n      \n    # Traverse the string \n    for i in str1: \n          \n        # Add ASCII value of character \n        # to result \n        result = result + ord(i) \n          \n    # Return result \n    return chr(result) \n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n#Write your code here\ndef get_Char(str):\n\treturn chr(sum(ord(i) for i in str))\n\n# DO NOT EDIT BELOW THIS LINE", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(input_str):\n    c = \"\"\n    for i in input_str:\n        c = c+i\n    return c\n\ndef test_function(test_case):\n    string = test_case[0]\n    solution = test_case[1]\n    output = get_Char(string)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nstring = \"abc\"\nsolution = \"f\"\n\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = \"c\"\nsolution = \"c\"\n\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = \"a\"\nsolution = \"a\"\n\ntest_case = [string, solution]\ntest_function(test_case)", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str1):\n    res = ''\n    for i in str1:\n        res = res + i\n    return res\n\n\n# Print the output.", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n  \"\"\"\n  :type string: str\n  :rtype: str\n  \"\"\"\n  # write your code here\n  res = \"\"\n  for char in string:\n    res += char\n  return res[0]\n\n\ndef get_Char1(string):\n  # this is a more elegant way\n  return sum(string)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    # TODO: write your code here\n    # your code here\n    char = ''\n    for i in s:\n        char += i\n    \n    return char\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    char_map = {}\n    for i in string:\n        if i in char_map:\n            char_map[i] = char_map[i] + 1\n        else:\n            char_map[i] = 1\n    for i in char_map:\n        char_map[i] = ord(i) * char_map[i]\n    return chr(max(char_map.values()))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str1):\n    res = 0\n    for i in str1:\n        res += ord(i)\n    return chr(res)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    return chr(ord(string[0]) + sum(ord(char) for char in string))\n\ndef test_case1():\n    assert get_Char(\"abc\") == \"f\"\n\ndef test_case2():\n    assert get_Char(\"Hello\") == \"L\"\n\ndef test_case3():\n    assert get_Char(\"a\") == \"b\"\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"returns the n-th number in the sequence\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        result = sequence(n-1) + sequence(n-2)\n        return result\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n\tif n == 0:\n\t\treturn 0\n\n\telif n == 1:\n\t\treturn 1\n\n\telif n == 2:\n\t\treturn 1\n\n\telse:\n\t\treturn sequence(n-1)+sequence(n-sequence(n-2))\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"\n    Find the number in newman conway sequence\n    \"\"\"\n    return 0\n\ndef sequence_func(n):\n    \"\"\"\n    Implement newman conway sequence by recursion\n    \"\"\"\n    return 0\n\ndef sequence_rec(n):\n    \"\"\"\n    Implement newman conway sequence by recursion\n    \"\"\"\n    return 0\n\ndef test():\n    \"\"\"\n    run test cases\n    \"\"\"\n    assert sequence(10) == 6\n    assert sequence_func(10) == 6\n    assert sequence_rec(10) == 6\n    print 'pass'\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# https://www.interviewbit.com/problems/nth-newman-conway-number/\n\n# Note: I solved using memoization, but the problem was a bit vague.\n# The way I solved the problem was to use the nth number in the sequence\n# to solve the nth-1 number in the sequence and so on.\n\ndef sequence(n):\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 2\n\n    if n == 4:\n        return 3\n\n    if n == 5:\n        return 5\n\n    else:\n        # This is the nth number in the sequence.\n        prev_prev = 1\n        prev = 1\n        curr = 1\n        for i in range(6, n):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n\n        return curr\n\n\ndef nth_newman_conway_number(n):\n    return sequence(n)\n\n# print nth_newman_conway_number(10)\n# print nth_newman_conway_number(1500)\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    '''\n    returns the nth number in the newman conway sequence\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        if n == 3:\n            return 1\n        elif n == 4:\n            return 2\n        else:\n            previous = sequence(n-1)\n            if previous == 1:\n                return 1\n            else:\n                return sequence(previous-1) + sequence(previous)\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# https://stackoverflow.com/questions/3039910/modular-exponentiation-in-python-without-using-recursion\ndef mod_exp(base, power, modulus):\n    if power == 0:\n        return 1\n    elif power % 2 == 0:\n        result = mod_exp(base, power/2, modulus)**2 % modulus\n    else:\n        result = (base * mod_exp(base, power - 1, modulus)) % modulus\n    return result\n\n\ndef nCr(n, r):\n    return mod_exp(n, r, n+r-1)\n\n\ndef newman_conway(num):\n    num = int(num)\n    if num == 1:\n        return \"1\"\n    elif num == 2:\n        return \"1 1\"\n    else:\n        sequence = [1, 1]\n        for i in range(2, num):\n            sequence.append(nCr(sequence[i-1], 2))\n        return \" \".join(map(str, sequence))\n\n\n# assert sequence(10) == 6", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\nfrom collections import defaultdict\n\n\ndef newman_conway(num):\n    \"\"\"returns the n-th number in newman conway sequence.\"\"\"\n    if num == 0:\n        raise ValueError('Zero is not a valid value for n.')\n    if num == 1:\n        return 1\n    if num == 2:\n        return 1\n    memo = defaultdict(int)\n    memo[0], memo[1] = 1, 1\n    memo[2] = 2\n    for i in range(3, num+1):\n        memo[i] = memo[memo[i-1]] + memo[i-memo[i-1]]\n    return memo[num]\n\n\ndef sequence(n):\n    \"\"\"returns the n-th number in the sequence.\"\"\"\n    return newman_conway(n)\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n\t\"\"\"\n\tn: int, the n-th number in newman conway sequence.\n\treturn: int, the n-th number in newman conway sequence.\n\t\"\"\"\n\tif n <= 0:\n\t\traise Exception('n must be > 0')\n\tif n == 1:\n\t\treturn 0\n\tif n == 2:\n\t\treturn 1\n\n\tcount = [0 for i in range(n)]\n\tcount[0] = 0\n\tcount[1] = 1\n\n\tfor i in range(2, n):\n\t\tcount[i] = count[count[i - 1]] + count[i - count[i - 1]]\n\treturn count[n - 1]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\nfrom math import log\n\ndef factorial(n):\n\t\"\"\"\n\tCompute the factorial of n\n\t\"\"\"\n\tif n <= 1:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)\n\ndef sum(start, end):\n\t\"\"\"\n\tCompute the sum of numbers from start to end\n\t\"\"\"\n\treturn (start + end) * (end - start + 1) // 2\n\ndef newman_conway(n):\n\t\"\"\"\n\tCompute the nth number in the newman conway sequence\n\t\"\"\"\n\tif n <= 1:\n\t\treturn 'You must enter a value greater than 1.'\n\tif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway(newman_conway(n - 1)) + newman_conway(newman_conway(n - 2))\n\ndef sequence(n):\n\t\"\"\"\n\tWrite a function to find the n-th number in newman conway sequence.\n\t\"\"\"\n\tif n <= 0:\n\t\treturn 'You must enter a value greater than 0.'\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn sum(sequence(n-1), sequence(n-2))\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    return 4*np.pi*r**2\n\n# ### Problems\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    \u7ed9\u5b9a\u534a\u5f84r\uff0c\u8fd4\u56de\u7403\u7684\u8868\u9762\u79ef\n    \"\"\"\n    return 4*pi*r*r\n\n#3. 15.4", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(r):\n    return 4*np.pi*r**2\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return (4*math.pi*radius**2*math.atan(math.sqrt(1/3)))\n\n#assert surfacearea_sphere(10)==1256.6370614359173\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    return 4*np.pi*(r**2)\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    return 4 * pi * r**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nfrom math import pi\n\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    :param r: radius of sphere\n    :return: surface area\n    \"\"\"\n    return 4*pi*r**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\n\ndef surfacearea_sphere(radius):\n    # write code here.\n    # print(math.pi)\n    return 4*math.pi*radius**2\n\n# write a function to find the surface area of a cone\n# assert surfacearea_cone(10,3)==942.4777960769379\ndef surfacearea_cone(radius,height):\n    # write code here.\n    return 1/3 * math.pi * radius * radius + math.pi * radius * height\n\n# write a function to find the surface area of a cube\n# assert surfacearea_cube(10)==625\ndef surfacearea_cube(side):\n    # write code here.\n    return 6*side**2\n\n# write a function to find the surface area of a rectangle\n# assert surfacearea_rectangle(10,20)==200\ndef surfacearea_rectangle(length,width):\n    # write code here.\n    return length*width\n\n# write a function to find the surface area of a cylinder\n# assert surfacearea_cylinder(10,5)==314.1592653589793\ndef surfacearea_cylinder(radius,height):\n    # write code here.\n    return 2*math.pi*radius*height + 2*math.pi*radius**2\n\n# write a function to find the surface area of a cuboid\n# assert surfacearea_cuboid(10,20,30)==900\ndef surfacearea_cuboid(length,width,height):\n    # write code here.\n    return 2*((length*width) + (length*height) + (width*height))\n\n# write a function to find the surface area of a trapezoid\n# assert surfacearea_trapezoid(10,15,15,20)==375\ndef surfacearea_trapezoid(bottom_left_length, top_left_length, bottom_right_length, top_right_length):", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    >>> surfacearea_sphere(10)==1256.6370614359173\n    True\n    \"\"\"\n    return 4*pi*r**2\n\ndef surfacearea_sphere_improved(r):\n    \"\"\"\n    >>> surfacearea_sphere_improved(10)==1256.6370614359173\n    True\n    \"\"\"\n    return 4*pi*r**2\n\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    hn = n * 2 + 1\n    return hn * (hn - 1) // 2", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import sqrt\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :param n: positive integer\n    :return: n-th centered hexagonal number\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef square_of_sum(n):\n    \"\"\"\n    :param n: positive integer\n    :return: square of sum of first n natural numbers\n    >>> square_of_sum(10)\n    285\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\ndef sum_of_squares(n):\n    \"\"\"\n    :param n: positive integer\n    :return: sum of squares of first n natural numbers\n    >>> sum_of_squares(10)\n    385\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) * (3 * n + 1) / 12\n\n\ndef difference_of_squares(n):\n    \"\"\"\n    :param n: positive integer\n    :return: difference between square of sum of first n natural numbers and sum of squares of first n natural numbers\n    >>> difference_of_squares(10)\n    2640\n    \"\"\"\n    return square_of_sum(n) - sum_of_squares(n)\n\n\ndef solve_p0038(n):\n    \"\"\"\n    :param n: positive integer\n    :return: centered hexagonal number with the longest difference between square of sum and sum of squares\n    >>> solve_p0038(100000)\n    669171001\n    \"\"\"\n    max_difference = -1\n    for i in range(1, n + 1):\n        if i > 10000:\n            continue\n        difference = difference_of_squares(i)\n        if difference > max_difference:\n            max_difference = difference\n            result = centered_hexagonal_number(i)\n    return result\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    if n <= 0:\n        return 0\n    else:\n        return int((2*(n**2)-n)/3)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nfrom sympy import isprime, nextprime\n\ndef centered_hexagonal_number(n):\n    \"\"\"nth centered hexagonal number\"\"\"\n    #generate centered hexagonal numbers:\n    #1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, ...\n    hexagonal = lambda x: x*(2*x-1)\n    n = int(n)\n    assert n>0\n    #find last prime less than or equal to n:\n    p = nextprime(hexagonal(n))\n    #find corresponding prime #s:\n    hex_prime = lambda x: nextprime(x) if isprime(x) else hex_prime(x-1)\n    #find corresponding centered hexagonal number:\n    return hex_prime(p)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nimport pytest\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"Return the n-th centered hexagonal number.\n\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return int((2 * n) ** 0.5) * n + 1\n\n\n@pytest.mark.parametrize('n,result', [\n    (1, 1),\n    (2, 3),\n    (3, 6),\n    (4, 10),\n    (5, 15),\n    (6, 21),\n    (7, 28),\n    (8, 36),\n    (9, 45),\n    (10, 55),\n])\ndef test_centered_hexagonal_number(n, result):\n    assert centered_hexagonal_number(n) == result\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return (n * (2*n - 1))\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nfrom math import sqrt\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return 2 * n * (n + 1)\n\n\ndef centered_hexagonal_number_sqrt(n):\n    \"\"\"\n    >>> centered_hexagonal_number_sqrt(10)\n    271\n    \"\"\"\n    return int(sqrt(8 * n + 1) - 1) / 4\n\n\ndef centered_hexagonal_number_for_square_root(n):\n    \"\"\"\n    >>> centered_hexagonal_number_for_square_root(10)\n    271\n    \"\"\"\n    return int(n * (n + 1) / 2)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nimport math\n\n\ndef centered_hexagonal_number(n):\n    # 1, 3, 5, 7, 9\n    # 10, 12, 14, 16, 18\n    # 19, 21, 23, 25, 27\n    # 28, 30, 32, 34, 36\n    # 37, 39, 41, 43, 45\n    # 46, 48, 50, 52, 54\n    # 55, 57, 59, 61, 63\n    # 64, 66, 68, 70, 72\n    # 73, 75, 77, 79, 81\n    # 82, 84, 86, 88, 90\n    # 91, 93, 95, 97, 99\n    # 100, 102, 104, 106, 108\n    # 109, 111, 113, 115, 117\n    # 118, 120, 122, 124, 126\n    # 127, 129, 131, 133, 135\n    # 136, 138, 140, 142, 144\n    # 145, 147, 149, 151, 153\n    # 154, 156, 158, 160, 162\n    # 163, 165, 167, 169, 171\n    # 172, 174, 176, 178, 180\n    #", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom typing import List\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    lst: List[int] = []\n    for i in range(1, 1000000):\n        lst.append(i*i + i)//2\n    return lst[n-1]\n\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    d3.update(d2)\n    d3.update(d1)\n    return d3\n\n\n# # Write a function that multiplies two numbers\n# # assert multiply(2, 3)==6\n# # assert multiply(0.5, 4)==2\n# # assert multiply(3, -2)==-6\n\n# def multiply(a, b):\n#     return a * b\n\n# # Write a function that finds the absolute value of a number\n# # assert absolute(-2)==2\n# # assert absolute(-2.5)==2.5\n# # assert absolute(0)==0\n\n# def absolute(num):\n#     return abs(num)\n\n# # Write a function to return a sorted list of values from a dictionary\n# # assert sort_dictionary({ \"R\": 5, \"G\": 7, \"B\": 2 })==[2, 5, 7]\n# # assert sort_dictionary({ \"R\": 5, \"G\": 7, \"B\": 2, \"P\": 9})==[2, 5, 7, 9]\n\n# def sort_dictionary(dic):\n#     return sorted(list(dic.values()))\n\n# # Write a function to check if a number is even\n# # assert is_even(4)==True\n# # assert is_even(-2)==False\n\n# def is_even(num):\n#     return num % 2 == 0\n\n# # Write a function that finds the index of an item in a list\n# # assert index_of_item([1,2,3], 2)==1\n# # assert index_of_item([1", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict_one,dict_two,dict_three):\n    dict_final = {}\n    dict_final.update(dict_one)\n    dict_final.update(dict_two)\n    dict_final.update(dict_three)\n    return dict_final\n    \nmerge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict_1, dict_2, dict_3):\n    list1 = list(dict_1.keys())\n    list2 = list(dict_2.keys())\n    list3 = list(dict_3.keys())\n    final = list1 + list2 + list3\n    final = set(final)\n    final_list = list(final)\n    final_dict = {}\n    for i in final_list:\n        if i in list1:\n            final_dict[i] = dict_1[i]\n        elif i in list2:\n            final_dict[i] = dict_2[i]\n        else:\n            final_dict[i] = dict_3[i]\n    return final_dict\n\n\n# -\n\nmerge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, \n                         {'G': 'Green', 'W': 'White'}, \n                         {'O': 'Orange', 'W': 'White', 'B': 'Black'})\n\n# +", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    new_dict = dict1\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict_one,dict_two,dict_three):\n    return {**dict_one, **dict_two, **dict_three}\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n    ", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n#Write a function to merge three dictionaries into a single expression.\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    dict4 = dict1\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n# See the example in the video. \n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\nfrom collections import Counter\ndef freq_count(list_data):\n\treturn dict(Counter(list_data))\n\n\ndef freq_count_most_freq(list_data):\n\treturn Counter(list_data).most_common(1)[0][0]\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(nums):\n    return dict(Counter(nums))\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(arr):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    frequency_dict = dict()\n    \n    for item in arr:\n        frequency_dict[item] = frequency_dict.get(item, 0) + 1\n    return frequency_dict\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\n#Solution 2\ndef freq_count(arr):\n    return dict([(k, arr.count(k)) for k in set(arr)])\n\n#Solution 3\nfrom collections import defaultdict\n\ndef freq_count(arr):\n    result = defaultdict(int)\n    for i in arr:\n        result[i] += 1\n    return result\n    ", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    freq={}\n    for i in lst:\n        if i in freq:\n            freq[i]+=1\n        else:\n            freq[i]=1\n    return freq", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n#using defaultdict\nfrom collections import defaultdict\ndef freq_count(ls):\n    d=defaultdict(int)\n    for i in ls:\n        d[i]+=1\n    return d", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(arr):\n    f = dict()\n    for i in arr:\n        f[i]= f.get(i,0)+1\n    return f\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(l):\n    m = {}\n    for i in l:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    return m\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list_obj):\n    count = {}\n    for i in list_obj:\n        count[i] = count.get(i,0)+1\n    return count\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\nfrom collections import defaultdict\n\ndef freq_count(lst):\n    res = defaultdict(int)\n    for i in lst:\n        res[i] += 1\n    return res\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nfrom typing import List\nfrom collections import deque\n\n\ndef find_closest_smaller_num(arr: List[int], target: int) -> int:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    # This is an empty list with one element\n    # which is the first element of the given array\n    stack = deque([arr[0]])\n\n    # Traverse the array\n    for i in range(1, len(arr)):\n        # If stack is not empty and the element\n        # at the top of the stack is smaller than\n        # the current element, then remove all the\n        # elements from the stack which are smaller\n        # than the current element\n        while stack and stack[-1] < arr[i]:\n            stack.pop()\n\n        # Push this element in the stack\n        stack.append(arr[i])\n\n    # Now stack contains the nearest smaller elements.\n    # If stack is not empty then the top of the stack\n    # is the required answer\n    if stack:\n        return stack[-1]\n\n    return -1\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\nimport bisect\n\n\ndef closest_num(num_list: list, num: int) -> int:\n    \"\"\"Returns the closest smaller number in a sorted list to the given num.\n\n    Args:\n        num_list: list containing integers in ascending order.\n        num: integer to search for.\n\n    Returns:\n        integer.\n    \"\"\"\n    i = bisect.bisect_left(num_list, num)\n    if i == 0:\n        return num_list[i]\n    if i == len(num_list):\n        return num_list[i-1]\n    if abs(num_list[i-1] - num) < abs(num_list[i] - num):\n        return num_list[i-1]\n    return num_list[i]\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    for i in range(n, 0, -1):\n        if n % i == 0 and n // i > 0 and n // i <= n:\n            return n//i\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    O(n)\n    \"\"\"\n    closest = n\n    for i in xrange(n):\n        if closest > i:\n            closest = i\n    return closest\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nimport bisect\nfrom typing import List\n\n\ndef closest_num(n: int) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    idx = bisect.bisect_left(arr, n)\n    if idx == len(arr):\n        return arr[-1]\n    if arr[idx] - n > n - arr[idx - 1]:\n        return arr[idx - 1]\n    return arr[idx]\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n# Solution 1 - O(n) time | O(1) space\ndef closest_num(n):\n    i = 0\n    while i < n:\n        if is_closer(i, n):\n            return i\n        i += 1\n    return n\n\ndef is_closer(i, n):\n    a = abs(i - n)\n    b = abs(i + 1 - n)\n    return a < b\n\n# Solution 2 - O(n) time | O(1) space\ndef closest_num(n):\n    for i in range(n):\n        if abs(i - n) < abs(i + 1 - n):\n            return i\n    return n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    # You may assume n is a positive number\n    if n == 0:\n        return None\n    if n == 1:\n        return 1\n    small = n\n    while n > 1:\n        n -= 1\n        if n in small_nums:\n            small = n\n    return small\n\nsmall_nums = [3, 12, 14]", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    result = []\n    for i in range(n):\n        if abs(i-n) < abs(n-i):\n            result.append(i)\n    return min(result)\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n,l=list(range(1,11))):\n    try:\n        return min(l,key=lambda x:abs(x-n))\n    except:\n        return None\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    nums = []\n    while n > 0:\n        nums.append(n)\n        n -= 1\n\n    closest = 99999999\n    for i in range(len(nums)):\n        if nums[i] < closest and nums[i] > 0:\n            closest = nums[i]\n    \n    if closest == 99999999:\n        closest = 0\n\n    return closest\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    maxlen = 0\n    for word in words:\n        if len(word) > maxlen:\n            maxlen = len(word)\n    return maxlen\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n\tmax_len = 0\n\tfor w in words:\n\t\tmax_len = max(max_len,len(w))\n\treturn max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    res = []\n    for word in words:\n        res.append(len(word))\n    return max(res)\n\ndef test_len_log():\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\n#%%", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(arr):\n    length = len(arr)\n    temp = []\n    for i in range(length):\n        temp.append(len(arr[i]))\n    max_len = max(temp)\n    return max_len\n\n\n# Testing the function", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n#%%\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(input_string):\n    words = []\n    longest = 0\n\n    for word in input_string:\n        words.append(len(word))\n        if len(word) > longest:\n            longest = len(word)\n\n    return longest\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    return max(len(word) for word in words)\n# assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    longest_word_len = 0\n    for word in words:\n        if len(word) > longest_word_len:\n            longest_word_len = len(word)\n    return longest_word_len\n\n# assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\nfrom typing import List\n\n\ndef len_log(s: List[str]) -> int:\n    # initialize the dictionary with a zero value for all keys.\n    length_dict = {k: 0 for k in s}\n    # the first element in the list is the longest one.\n    length_dict[s[0]] = len(s[0])\n    # update the dictionary.\n    for item in s[1:]:\n        if len(item) > length_dict[item]:\n            length_dict[item] = len(item)\n    # return the maximum value in the dictionary.\n    return max(length_dict.values())\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    return max([len(word) for word in words])\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\nimport pytest\n\ndef find_substring(arr, val):\n    if val in ''.join(arr):\n        return True\n    else:\n        return False\n\n@pytest.mark.parametrize(\"arr, val, expected\", [\n    ([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\", True),\n    ([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"a\", False),\n    ([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"red\", True)\n])\ndef test_find_substring(arr, val, expected):\n    assert find_substring(arr, val) == expected\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(list_of_strings,substring):\n    list_of_strings = [s.lower() for s in list_of_strings]\n    substring = substring.lower()\n\n    return substring in list_of_strings", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(values,search_for):\n    for item in values:\n        if search_for in item:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list, sub_string):\n    for i in list:\n        if sub_string in i:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(values, substring):\n    for value in values:\n        if substring in value:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\nfrom typing import List\n\n\ndef find_substring(values: List[str], substring: str) -> bool:\n    for value in values:\n        if substring in value:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(l, s):\n    \"\"\"\n    returns True if a string is present in a list of strings, False otherwise\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if s[j] != l[i][j]:\n                break\n        else:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(sub_list, word):\n    if len(sub_list) == 0:\n        return False\n    for i in range(len(sub_list)):\n        if word == sub_list[i]:\n            return True\n        elif word == sub_list[i][:len(word)]:\n            return True\n        else:\n            return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(s):\n\tt = list(s)\n\tn = len(t)\n\tif n == 1:\n\t\treturn True\n\tif t[0] != t[n-1]:\n\t\treturn False\n\n\tfor i in range(1, n-1):\n\t\tif t[i] != t[i-1] and t[i] != t[i+1]:\n\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    # Iterate over all digits except the last\n    for i in range(len(num) - 1):\n        # Get current digit\n        current = num[i]\n        # Get next digit\n        next_ = num[i + 1]\n\n        # If they are same, return False\n        if current == next_:\n            return False\n\n    # Else return True\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\nfrom typing import Optional\n\n\ndef is_undulating(\n    s: str,\n    prev_char: Optional[str] = None,\n    prev_prev_char: Optional[str] = None,\n    n: int = 1,\n) -> bool:\n    \"\"\"\n    >>> is_undulating(\"1212121\")\n    True\n    >>> is_undulating(\"1221121\")\n    True\n    >>> is_undulating(\"1234121\")\n    True\n    >>> is_undulating(\"1213412\")\n    True\n    >>> is_undulating(\"1212341\")\n    True\n    >>> is_undulating(\"1212134\")\n    True\n    >>> is_undulating(\"1212123\")\n    True\n    >>> is_undulating(\"2342342\")\n    True\n    >>> is_undulating(\"2341234\")\n    True\n    >>> is_undulating(\"2342123\")\n    True\n    >>> is_undulating(\"1234567\")\n    False\n    \"\"\"\n    if n == len(s):\n        return True\n\n    if s[n] == prev_char or s[n] == prev_prev_char:\n        return is_undulating(\n            s=s, prev_char=s[n], prev_prev_char=prev_char, n=n + 1\n        )\n\n    return is_undulating(\n        s=s, prev_char=s[n], prev_prev_char=s[n - 1], n=n + 1\n    )\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number):\n    \"Check whether the given number is undulating or not.\"\n    return (number in number_is_undulating)\n\nnumber_is_undulating = [111111, 121111, 112111, 122111, 111211, 111121, 121211, 121121, 112211, 112121, 122211, 122121, 111221, 111112, 121112, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212, 121212,", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\nfrom typing import List\n\n\ndef is_undulating(num: str) -> bool:\n    if num[0] != num[-1]:\n        return False\n\n    for i in range(len(num) - 1):\n        if num[i] == num[i + 1]:\n            return True\n\n    return False\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(x):\n  \"\"\"\n  This function takes a string x as argument and returns True or False based on\n  whether the number is undulating or not.\n  \"\"\"\n  if len(x) <= 1:\n    return False\n\n  if len(x) <= 3:\n    return x == x[::-1]\n\n  x_len = len(x)\n  if x[0] == x[-1] == x[int(x_len / 2)]:\n    return is_undulating(x[1:int(x_len / 2)]) and is_undulating(x[int(x_len / 2) + 1:])\n  else:\n    return False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num_str):\n    for i in range(len(num_str) // 2):\n        if num_str[i] != num_str[len(num_str) - i - 1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\nimport pytest\n\n\ndef is_undulating(number_string):\n    return bool(set(number_string)) <= {number_string[0], number_string[-1]}\n\n\n@pytest.mark.parametrize('number_string,expected', [\n    (\"1212121\", True),\n    (\"1212122\", False),\n])\ndef test(number_string, expected):\n    assert is_undulating(number_string) == expected\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n\t# your code here\n\treturn a**b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    # Calculate the value of 'a' to the power 'b'.\n    # assert power(3,4) == 81\n    value = a\n    if b == 0:\n        return 1\n    else:\n        while b > 1:\n            value = value*a\n            b = b-1\n        return value\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    # WRITE YOUR CODE HERE\n    pass\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    \"\"\"\n    :param a: base\n    :param b: exponent\n    :return: result\n    \"\"\"\n    return a**b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    \"Calculate the value of 'a' to the power 'b'.\"\n    return a**b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n#answer\n\ndef power(a, b):\n    '''\n    a^b\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n\n#test", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    return a**b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom typing import Any\n\n\n@dataclass", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    return a**b\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n# solution\n\n\ndef index_minimum(tuples: List[Tuple[str, int]]) -> str:\n    min_index = 0\n    for i, _ in enumerate(tuples):\n        if tuples[min_index][1] > tuples[i][1]:\n            min_index = i\n    return tuples[min_index][0]\n\n\ndef index_minimum2(tuples: List[Tuple[str, int]]) -> str:\n    return min(tuples, key=lambda x: x[1])[0]\n\n\ndef index_minimum3(tuples: List[Tuple[str, int]]) -> str:\n    return min(tuples, key=lambda x: x[1])[0]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    min_idx = 0\n    for i in range(len(tuples)):\n        if tuples[min_idx][1] > tuples[i][1]:\n            min_idx = i\n    return tuples[min_idx][0]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    new = sorted(tuples, key=lambda x: x[1])\n    return new[0][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    # your code here\n    min_index = 0\n    min_value = tuples[min_index][1]\n    for i in range(len(tuples)):\n        if min_value > tuples[i][1]:\n            min_value = tuples[i][1]\n            min_index = i\n    \n    return tuples[min_index][0]", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(lst):\n    index, min = 0, lst[0][1]\n    for i, (name, score) in enumerate(lst):\n        if score < min:\n            index, min = i, score\n    return lst[index][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    return min(tuples, key=lambda t: t[1])[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    return min(tuples, key=lambda x:x[1])[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\nfrom random import randint\nfrom typing import List, Tuple\n\n\ndef index_minimum(tuples: List[Tuple[str, int]]) -> str:\n    \"\"\"Returns the tuple with the minimum value.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    return min(tuples, key=lambda x: x[1])[0]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    \"\"\"\n    :param tuples: a list of tuples\n    :return: min_val\n    \"\"\"\n    min_val = None\n    min_index = 0\n    for index in range(len(tuples)):\n        if min_val == None:\n            min_val = tuples[index][1]\n            min_index = index\n        elif min_val > tuples[index][1]:\n            min_val = tuples[index][1]\n            min_index = index\n\n    return tuples[min_index][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(records):\n    min_record = records[0]\n    min_index = 0\n    for i in range(1,len(records)):\n        if records[i][1] < min_record[1]:\n            min_record = records[i]\n            min_index = i\n    return min_record[0]\n\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n# Time Complexity: O(n), Space Complexity: O(1)\ndef find_min_length(lists):\n    start = 0\n    end = 0\n    min_length = len(lists[0])\n    for i in range(1, len(lists)):\n        if len(lists[i]) < min_length:\n            min_length = len(lists[i])\n            start = i\n    return start\n\n# Time Complexity: O(n*m), Space Complexity: O(1)\ndef find_min_length_2(lists):\n    start = 0\n    end = 0\n    min_length = len(lists[0])\n    for i in range(1, len(lists)):\n        for j in range(i, len(lists)):\n            if len(lists[i:j+1]) < min_length:\n                min_length = len(lists[i:j+1])\n                start = i\n                end = j\n    return start, end\n\n# Time Complexity: O(n*m), Space Complexity: O(1)\ndef find_min_length_3(lists):\n    start = 0\n    end = 0\n    min_length = len(lists[0])\n    for i in range(1, len(lists)):\n        for j in range(i, len(lists)):\n            if len(lists[i:j+1]) < min_length:\n                min_length = len(lists[i:j+1])\n                start = i\n                end = j\n    return start, end\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list_of_lists):\n    # Your code goes here\n    pass\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef find_min_length(arr):\n    min_length = len(arr[0])\n    for sublist in arr:\n        length = len(sublist)\n        if min_length > length:\n            min_length = length\n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(a_list):\n    # Write your code here\n    a_list = sorted(a_list, key = lambda x: len(x))\n    min_len = len(a_list[0])\n    for i in range(1,len(a_list)):\n        if len(a_list[i])<min_len:\n            min_len = len(a_list[i])\n\n    return min_len\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(arr):\n    if not arr:\n        return 0\n    min_len = 0\n    for arr_sub in arr:\n        sub_len = 0\n        for i in arr_sub:\n            if i is None:\n                return 0\n            sub_len += 1\n        if min_len == 0:\n            min_len = sub_len\n        if sub_len > min_len:\n            min_len = sub_len\n    return min_len\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    min_len = float('inf')\n    for sublist in lst:\n        min_len = min(min_len, len(sublist))\n    return min_len\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef find_min_length(arr,visited = None):\n    if visited == None:\n        visited = []\n    min_len = len(arr)\n    for i in arr:\n        if i not in visited:\n            visited.append(i)\n            sub_arr = [a for a in arr if a not in visited]\n            l = find_min_length(sub_arr,visited)\n            if l < min_len:\n                min_len = l\n    return min_len\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n  cnt = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      cnt += 1\n  return cnt\n\ndef test_divisor():\n  assert divisor(15) == 4\n  assert divisor(10) == 4\n  assert divisor(7) == 2\n  assert divisor(4) == 3\n  assert divisor(5) == 2\n\ntest_divisor()\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n\tcount = 0\n\tfor i in range(1,n+1):\n\t\tif n%i == 0:\n\t\t\tcount = count + 1\n\treturn count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n#%%\n\n#%%\n# Recursive Solution", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    \"\"\"\n    >>> divisor(20)\n    8\n    >>> divisor(15)\n    4\n    >>> divisor(5)\n    2\n    >>> divisor(1)\n    1\n    \"\"\"\n    # Write your code here\n    count = 2\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(num):\n    res = 0\n    i = 1\n    while i <= num // 2:\n        if num % i == 0:\n            res += 1\n        i += 1\n    return res\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\nfrom math import sqrt, floor\ndef divisor(n):\n    num = sqrt(n)\n    div = 0\n    while num > 1:\n        if n % int(num) == 0:\n            div += 2\n        num -= 1\n    div += 1\n    return div\n\ndef divisor_math(n):\n    return len(list(filter(lambda x: n % x == 0, range(1, n//2+1))))+1\n\ndef test_divisor_math():\n    assert divisor_math(25) == 9\n\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# !/usr/bin/env python3\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(num):\n\treturn 0\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    if n == 1:\n        return 1\n    result = 2\n    for i in range(2, n):\n        if n%i == 0:\n            result += 1\n    return result\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\nfrom collections import Counter\ndef frequency_lists(my_list):\n    counter = Counter()\n    for lst in my_list:\n        counter.update(lst)\n    return counter\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n# Frequency of list of list\n\nfrom collections import Counter\n\ndef frequency_lists(lists):\n    frequency = Counter()\n    for elem in lists:\n        frequency.update(elem)\n    return frequency\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = frequency_lists(lists)\n    if solution == output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nlists = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\nsolution = {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\ntest_case = [lists, solution]\ntest_function(test_case)", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    dict = {}\n    for item in lists:\n        for i in item:\n            dict[i] = dict.get(i,0) + 1\n    return dict\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List\nimport collections\ndef frequency_lists(lists: List[List[int]]) -> dict:\n    dict = {}\n    for l in lists:\n        for i in l:\n            if i not in dict:\n                dict[i] = 1\n            else:\n                dict[i] += 1\n    return dict\n\nlists = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(l):\n    \"\"\"\n    l : a list of lists\n    \"\"\"\n    frequency = {}\n    for lst in l:\n        for elem in lst:\n            if elem in frequency:\n                frequency[elem] += 1\n            else:\n                frequency[elem] = 1\n    return frequency\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    final_dict = {}\n    for a_list in lists:\n        for item in a_list:\n            if item not in final_dict:\n                final_dict[item] = 1\n            else:\n                final_dict[item] += 1\n    return final_dict\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import Counter\ndef frequency_lists(lists):\n  return Counter(sum(lists,[]))\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    \"\"\"\n    :param lists:\n    :return: dict of frequencies\n    \"\"\"\n    # get length of longest list\n    longest = len(max(lists, key=len))\n\n    # initialize frequency dict\n    freq_dict = {}\n\n    # iterate through all lists\n    for l in lists:\n        # iterate through the elements in each list\n        for i in range(len(l)):\n            # initialize count at 0 if the item is not in the frequency dict\n            if l[i] not in freq_dict:\n                freq_dict[l[i]] = 0\n\n            # increase frequency count by 1 for the item\n            freq_dict[l[i]] += 1\n\n            # add items with count of 1 to the right of the list to the list\n            if freq_dict[l[i]] == 1:\n                l.append(l[i])\n\n        # remove items with count of 1 from the list\n        l = [e for e in l if freq_dict[e] > 1]\n\n        # truncate all lists to the length of the longest\n        l = l[:longest]\n\n        # sort the list\n        l.sort()\n\n    # return frequency dict\n    return freq_dict\n\n\ndef main():\n    print(\"Example:\")\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, ", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import defaultdict\n\n\ndef frequency_lists(lists):\n    frequency = defaultdict(int)\n    for item in lists:\n        for number in item:\n            frequency[number] += 1\n    return frequency\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import Counter\n\ndef frequency_lists(lists):\n    freq = {}\n    for item in lists:\n        counter = Counter(item)\n        freq = dict(counter + freq)\n    return freq\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\n#%%", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    return sum(nums)/len(nums)\n\n\nmultiply_num((8, 2, 3, -1, 7))\n\n# +\n#Another way\n\nlist = [8, 2, 3, -1, 7]\nlist = list*3", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(numbers):\n    pass\n\n#Test", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(l):\n    \"\"\"\n    :param l: list of numbers\n    :return: product of all elements in the list\n    \"\"\"\n    return sum(l)*1.0/len(l)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(lst):\n    return sum(lst)/len(lst)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(list_num):\n    result = 1\n    for i in list_num:\n        result = result * i\n    return result/len(list_num)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(list):\n    sum_num=0\n    for i in list:\n        sum_num=sum_num+i\n    return sum_num/len(list)", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n# tests", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(numbers):\n    return sum(numbers)/len(numbers)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numlist):\n    return sum(numlist) / len(numlist)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n\tif num == 0:\n\t\treturn '0'\n\n\treturn decimal_to_binary(num // 2) + str(num % 2)\n\n\n# def decimal_to_binary(num):\n# \tif num <= 1:\n# \t\treturn str(num)\n\n# \treturn decimal_to_binary(num // 2) + str(num % 2)\n\n# def decimal_to_binary(num):\n# \tif num == 0:\n# \t\treturn '0'\n\n# \treturn decimal_to_binary(num // 2) + str(num % 2)\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(num):\n    result = []\n    if num == 0:\n        return result\n    else:\n        return decimal_to_binary(num//2) + [str(num%2)]\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n  return bin(num)[2:]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n#%%", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(number):\n  b = \"\"\n  while number != 0:\n    b = str(number % 2) + b\n    number //= 2\n  return b\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\nimport pytest\n\n\ndef decimal_to_binary(decimal: int) -> str:\n    return bin(decimal)[2:]\n\n\n@pytest.mark.parametrize(\"decimal, expected\", [(8, \"1000\"), (11, \"1011\"), (10, \"1010\")])\ndef test_decimal_to_binary(decimal, expected):\n    assert decimal_to_binary(decimal) == expected\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(number: int) -> str:\n    binary = \"\"\n    while number > 0:\n        binary = str(number % 2) + binary\n        number = number // 2\n    return binary\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(num):\n    return bin(num)[2:]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n# My Solution\n\n\ndef decimal_to_binary(dec):\n    return bin(dec)\n\n\n# Given Solution\n\n\ndef decimal_to_binary(dec):\n    res = \"\"\n    if dec < 0:\n        dec += 1 << 32\n    while dec:\n        res += str(dec % 2)\n        dec //= 2\n    return res[::-1]\n\n\n# Best Practices\n\n\ndef decimal_to_binary(dec):\n    bin_num = bin(dec).lstrip(\"0b\").rstrip(\"L\")\n    return bin_num if bin_num else '0'\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    # Implement your code here\n    palindrome = int(str(n)+str(n)[::-1])\n    while palindrome<1000000:\n        palindrome+=1\n        if palindrome>1000000:\n            return -1\n        if palindrome==int(str(palindrome)+str(palindrome)[::-1]):\n            return palindrome\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    return (num+1) if (num%2==0) else (num+2)\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(x):\n\t# your code goes here\n\t# return a list of all palindromes of length n\n\tpalindromes = []\n\t# check if the input number is less than 10. In this case, the smallest palindrome is 11\n\tif x<10:\n\t\treturn 11\n\t# check if the input number is a power of 10. In this case, the smallest palindrome is 100\n\tif x%10==0:\n\t\treturn x+1\n\t# check if the input number is even. In this case, the smallest palindrome will be the square of it\n\tif x%2==0:\n\t\treturn x*x\n\t# check for all the odd numbers less than or equal to the input number\n\tfor n in range(x, 0, -1):\n\t\t# if the current number is palindrome\n\t\tif check_palindrome(n):\n\t\t\t# append the current number to the palindrome list\n\t\t\tpalindromes.append(n)\n\t# sort the palindrome list\n\tpalindromes.sort()\n\t# return the next palindrome number\n\treturn palindromes[-1]+2\n\n# helper function to check if the given number is a palindrome\ndef check_palindrome(n):\n\t# if the number is less than 0\n\tif n<0:\n\t\treturn False\n\t# if the number is only 1 digit\n\telif n<10:\n\t\treturn True\n\t# if the number is more than 1 digit\n\telse:\n\t\t# get the number in the reverse order\n\t\trev = 0\n\t\twhile(n>0):\n\t\t\trev = rev*10 + n%10\n\t\t\tn = n//10\n\t\t# check if the reverse number is equal to the original number\n\t\treturn rev==n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    :param n: int, input number\n    :return: int, the next smallest palindrome\n    \"\"\"\n    if not is_palindrome(n):\n        # If the number is not a palindrome, increment it until it is a palindrome\n        while not is_palindrome(n):\n            n += 1\n\n    # Find the smallest palindrome by incrementing the number until it is a palindrome\n    # Note that this will not work if the input number is already a palindrome\n    while is_palindrome(n):\n        n += 1\n\n    return n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nimport sys\n\ndef next_smallest_palindrome(n):\n    a = str(n)\n    if is_palindrome(a):\n        return int(a+str(int(a[::-1])+1))\n    else:\n        return int(str(int(a[::-1])+1)+a)\n\ndef is_palindrome(a):\n    return a == a[::-1]\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    n = num\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n\n\ndef test():\n    assert next_smallest_palindrome(121) == 131\n    assert next_smallest_palindrome(99) == 101\n\ntest()", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nfrom math import ceil, floor\n\ndef is_palindrome(x):\n    return str(x) == str(x)[::-1]\n\ndef next_smallest_palindrome(n):\n    if is_palindrome(n):\n        return n + 1\n    else:\n        i = floor(n/2)\n        while not is_palindrome(i):\n            i += 1\n        return i * 2\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nfrom typing import Callable\n\n\ndef reverse_int(n: int) -> int:\n    reversed_n = 0\n    while n > 0:\n        reversed_n = reversed_n * 10 + n % 10\n        n = n // 10\n    return reversed_n\n\n\ndef is_palindrome(n: int) -> bool:\n    if n == reverse_int(n):\n        return True\n    else:\n        return False\n\n\ndef next_smallest_palindrome(n: int) -> int:\n    if n == 0:\n        return 0\n    for i in range(n+1, int(1e6)+1):\n        if is_palindrome(i):\n            return i\n\n\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(99) == 101\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(number):\n    while True:\n        number += 1\n        if number == is_palindrome(number):\n            return number\n\ndef is_palindrome(number):\n    number = str(number)\n    for i in range(int(len(number)/2)):\n        if number[i] != number[int(len(number)-1-i)]:\n            return False\n    return True\n\n# print(next_smallest_palindrome(1233))\n# print(next_smallest_palindrome(1001))\n# print(next_smallest_palindrome(12321))\n# print(next_smallest_palindrome(121))"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(A, k, n):\n    if k <= n/2:\n        return find_kth_element(A, 0, n-1, k)\n    else:\n        return find_kth_element(A, 0, n-1, n - k + 1)\n\ndef find_kth_element(A, start, end, k):\n    if end < start:\n        return None\n\n    pivot_index = partition(A, start, end)\n\n    if pivot_index == k - 1:\n        return A[pivot_index]\n    elif pivot_index > k - 1:\n        return find_kth_element(A, start, pivot_index - 1, k)\n    else:\n        return find_kth_element(A, pivot_index + 1, end, k)\n\n\ndef partition(A, start, end):\n    pivot = A[end]\n    i = start - 1\n    for j in range(start, end):\n        if A[j] <= pivot:\n            i += 1\n            A[i], A[j] = A[j], A[i]\n    A[i+1], A[end] = A[end], A[i+1]\n    return i + 1\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(array, k, m):\n    \"\"\"Complexity Analysis\n    Time complexity : O(logN)\n    Space complexity : O(1)\n    \"\"\"\n    if m <= 0:\n        return \"Invalid m\"\n    if k > len(array):\n        return \"Invalid k\"\n    return find_element(array, 0, len(array)-1, k, m)\n\n\ndef find_element(array, l, r, k, m):\n    if l >= r:\n        return array[l]\n    if m == 1:\n        return min(array[l], array[r])\n    i = l\n    j = r - 1\n    if i == j:\n        return min(array[l], array[r])\n    pivot = partition(array, l, r)\n    if k == pivot:\n        return array[pivot]\n    if pivot > k:\n        return find_element(array, l, pivot - 1, k, m // 2)\n    return find_element(array, pivot + 1, r, k, m // 2)\n\n\ndef partition(array, l, r):\n    pivot = array[l]\n    i = l\n    j = r + 1\n    while True:\n        while True:\n            i += 1\n            if i >= j:\n                return i\n            if array[i] >= pivot:\n                break\n        while True:\n            j -= 1\n            if i >= j:\n                return j\n            if array[j] <= pivot:\n                break\n        array[i], array[j] = array[j], array[i]\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\nfrom random import shuffle, randint\n\ndef kth_element(arr, k, p):\n    if p == 1:\n        return arr[k-1]\n    left = arr[p-2:]\n    right = arr[0:p-2]\n    rand_nums = [randint(0, p-2) for _ in range(p-2)]\n    shuffle(rand_nums)\n    right = [right[i] for i in rand_nums]\n    shuffle(rand_nums)\n    left = [left[i] for i in rand_nums]\n    right.sort()\n    left.sort()\n    index = (p-2)//2\n    if k <= index:\n        return kth_element(left, k, len(left)+1)\n    else:\n        return kth_element(right, k-index, len(right)+1)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, l):\n    if k > l:\n        return -1\n\n    m = (l + k) // 2\n\n    if k == l:\n        return arr[m]\n\n    if k < m:\n        return kth_element(arr, k, m-1)\n    else:\n        return kth_element(arr, m+1, l)\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(array, k, step=1):\n    # TODO: complete this function\n    pass\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, r):\n    if r == 1:\n        return array[0]\n    i = k - 1\n    l = 0\n    r -= 1\n    while i >= 0:\n        if l == r:\n            return array[l]\n        m = (l+r)//2\n        if array[m] == k:\n            return array[m]\n        if array[m] > k:\n            r = m\n        else:\n            l = m\n        i -= 1\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nimport math\n\n\ndef kth_element(arr, k, n):\n    return kth_element_recursive(arr, k, n, 0, len(arr)-1)\n\n\ndef kth_element_recursive(arr, k, n, start, end):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(log(n))\n    \"\"\"\n    if start <= end:\n        pivot_index = pivot(arr, start, end)\n        num_of_elements_on_left_side = pivot_index - start + 1\n        if num_of_elements_on_left_side == k:\n            return arr[pivot_index]\n        elif num_of_elements_on_left_side > k:\n            return kth_element_recursive(arr, k, n, start, pivot_index-1)\n        else:\n            return kth_element_recursive(arr, k-num_of_elements_on_left_side, n, pivot_index+1, end)\n    else:\n        return None\n\n\ndef pivot(arr, start, end):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    \"\"\"\n    Higher bound for pivot is (n-k+1)th element and lower bound is (k-1)th element\n    \"\"\"\n    pivot_index = math.ceil((n-k+1)/2)\n    return pivot_index-1\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nimport unittest\n\n\ndef kth_element(arr, k, n):\n    if k == n // 2:\n        return arr[k]\n    elif k > n // 2:\n        return kth_element(arr, n - k, n)\n    else:\n        return kth_element(arr, k, n - k)\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, index):\n    if k == 1:\n        return array[index-1]\n    elif k < len(array) / 2:\n        return kth_element(array[index:], k, k)\n    else:\n        return kth_element(array[:index], k, len(array) - k + 1)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef kth_element(nums: List[int], k: int, pivot: int) -> int:\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        pivot_index = partition(nums, left, right)\n        if pivot_index == pivot:\n            return nums[pivot_index]\n        elif pivot_index < pivot:\n            left = pivot_index + 1\n        else:\n            right = pivot_index - 1\n    raise ValueError(\"Value not found\")\n\n\ndef partition(nums: List[int], left: int, right: int) -> int:\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    pivot_value = nums[left]\n    left_index = left + 1\n    for i in range(left + 1, right + 1):\n        if nums[i] <= pivot_value:\n            swap(nums, i, left_index)\n            left_index += 1\n    swap(nums, left, left_index - 1)\n    return left_index - 1\n\n\ndef swap(nums: List[int], i: int, j: int) -> None:\n    \"\"\"\n    O(1) time | O(1) space\n    \"\"\"\n    nums[i], nums[j] = nums[j], nums[i]\n\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    return ''.join(map(lambda x, y: x.upper() if y == '_' else x, string, string)).lstrip('0123456789')\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(string):\n    if not string: return string\n    return ''.join(word.capitalize() or word for word in string.split('_'))\n\n#https://www.hackerrank.com/challenges/python-mutations/problem", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    return ''.join([s[0].capitalize(),s[1:]])", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(text):\n    return ''.join(w.capitalize() or '_' for w in text.split('_'))\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    return ''.join(x.title() or '_' for x in s.split('_'))\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n# My solution\ndef snake_to_camel(s):\n    result = s.split('_')\n    if result == ['']:\n        return ''\n    if len(result) == 1:\n        return result[0]\n    result[1] = result[1].capitalize()\n    return ''.join(result)\n\n# Best practice solution\ndef snake_to_camel(s):\n    return ''.join(x.capitalize() or '_' for x in s.split('_'))", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\nfrom unittest import TestCase\n\n\ndef snake_to_camel(s):\n    return s.title().replace(\"_\", \"\")\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    return string.title().replace(\"_\",\"\")\n\n\ndef snake_to_camel2(string):\n    return \"\".join([word.capitalize() for word in string.split(\"_\")])\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(str):\n    res = str.split(\"_\")\n    res[0] = res[0].lower()\n    res = \"\".join(res)\n    return res\n\n# Test", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_string):\n    word_list = snake_string.split('_')\n    camel_string = ''\n    for word in word_list:\n        camel_string += word.capitalize()\n    return camel_string\n\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nimport math\n\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i = i + 6\n\n    return True\n\n\ndef prime_generator(limit):\n    \"\"\"\n    Prime Number Generator\n    :param limit: Limit of prime numbers\n    :return: Generator of prime numbers\n    \"\"\"\n    prime = 2\n    while True:\n        if is_prime(prime):\n            yield prime\n            prime += 1\n        else:\n            prime += 1\n\n        if prime > limit:\n            return\n\n\ndef eulerian_num(n, m):\n    if n == 1:\n        return 1\n\n    if n == m == 2:\n        return 2\n\n    if n == m:\n        if n % 2 == 0:\n            return 2 * n\n        else:\n            return 0\n\n    result = 0\n    for prime in prime_generator(math.ceil(math.sqrt(m))):\n        if m % prime == 0:\n            result += prime\n            for i in range(prime, m + 1, prime):\n                if i == prime:\n                    result += 1\n                else:\n                    result += 1 / prime\n\n    return result\n\n\ndef main():\n    assert eulerian_num(3, 1) == 4\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul\n\n\ndef eulerian_num(a, b):\n    \"\"\"Find eulerian number a(n, m).\n    >>> eulerian_num(3, 1)\n    4\n    \"\"\"\n    return sum(reduce(mul, range(1, n + 1)) for n in range(a, b + 1))\n\n\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\n# NOTES:\n# This is a problem from the book \"Cracking the Coding Interview\"\n# The problem is described as follow:\n# There are a number of people standing in a circle waiting to be served.\n# Each person must be served exactly once and in the order that he was received.\n# Write an algorithm to print the name of the person served by each available seat.\n# FOLLOW UP\n# How to prevent people from getting stuck?\n#\n# What if the number of people waiting is always exactly 1 more than the number of available seats?\n# Explain how this can be used to find eulerian number a(n, m).\n\nfrom collections import deque\n\n# Time Complexity: O(n)\ndef eulerian_num(n, m):\n    if n == 0:\n        return m\n    queue = deque()\n    for i in range(1, m + 1):\n        queue.append(i)\n    for i in range(1, n + 1):\n        queue.popleft()\n    return len(queue) + 1\n\ndef eulerian_num_str(n, m):\n    if n == 0:\n        return m\n    queue = deque()\n    for i in range(1, m + 1):\n        queue.append(chr(i + 64))\n    for i in range(1, n + 1):\n        queue.popleft()\n    return ''.join(queue)\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nimport unittest\n\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    if m == 1:\n        return n\n    if n % 2 == 0:\n        return (n//2 + 1) * eulerian_num(n//2, m) + eulerian_num(n//2, m-1)\n    return (n//2 + 1) * eulerian_num(n//2+1, m-1) + eulerian_num(n//2+1, m)\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    # write your code here\n    return sum([1 for i in range(m, n+1, 2)]) + 1 if n%2 == 1 else sum([1 for i in range(m, n+1, 2)])\n\n# A = 1, B = 2, C = 2, D = 2", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    # Write your code here\n    if n == 1 or m == 1:\n        return n + m\n    else:\n        return n * m + n - 1 + m - 1\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nimport itertools\nfrom typing import List\n\n\ndef eulerian_num(n: int, m: int) -> List[int]:\n    \"\"\"\n    :param n:\n    :param m:\n    :return: Eulerian numbers\n    \"\"\"\n    result: List[int] = []\n    for a, b in itertools.product(range(1, n+1), range(1, m+1)):\n        result.append(a*b)\n    return result\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nimport unittest\n\ndef eulerian_num(n, m):\n    if n == 0:\n        return 1\n    if m == 0:\n        return 1\n\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m can't be negative\")\n\n    if n % 2 == 0 or m % 2 == 0:\n        raise ValueError(\"n and m must be odd\")\n\n    return sum(eulerian_num(n-2*i, m-2*i) for i in range(1, max(n, m)+1))\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nfrom typing import List\n\n\ndef eulerian_num(n: int, m: int) -> int:\n    if n == 0 or m == 0:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0] + 1\n    for j in range(1, m + 1):\n        dp[0][j] = dp[0][j - 1] + 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1]\n    return dp[n][m]\n\n\ndef eulerian_num_with_memoization(\n    n: int, m: int, memo: List[List[int]] = None\n) -> int:\n    if memo is None:\n        memo = [[0] * (m + 1) for _ in range(n + 1)]\n    if n == 0 or m == 0:\n        return 0\n    if memo[n][m] != 0:\n        return memo[n][m]\n    memo[n][m] = (\n        eulerian_num_with_memoization(n - 1, m, memo)\n        + eulerian_num_with_memoization(n, m - 1, memo)\n        + eulerian_num_with_memoization(n - 1, m - 1, memo)\n    )\n    return memo[n][m]\n\n\ndef eulerian_num_with_top_down_recursion(n: int, m: int) -> int:\n    if n == 0 or m == 0:\n        return 0\n    memo = [[0] * (m + 1) for _ in range(n + 1)]\n\n    def top_down", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n: int\n    :param m: int\n    :return: int\n    \"\"\"\n    # write your code here\n    dp = [[1] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# Lambda functions can be used as parameters in other functions or functions are returned as value from another function.\n# Lambda functions can be used as parameters in other functions or functions are returned as value from another function.\n# Lambda functions can be used as parameters in other functions or functions are returned as value from another function.\n# Lambda functions can be used as parameters in other functions or functions are returned as value from another function.\n\n# Lambda functions are used to create small anonymous functions.\n# We use lambda functions when we require a nameless function for a short period of time.\n# In other words, when we want to define a function that we will use only once.\n# The lambda functions can take any number of arguments but can have only one expression.\n\n# The power of lambda is better shown when you use them as an argument to another function.\n# Lambda functions are used along with built-in functions like filter(), map() and reduce().\n# Python provides many built-in functions that are written in C.\n# But when you use them, they are actually Python functions and they are much faster than their C equivalents.\n\n# Lambda functions are used when a function is required that has a very short implementation.\n# In these cases, it is not necessary to spend time writing a normal function that needs to be maintained.\n# The lambda function is sufficient for the task.\n\n# Lambda functions are used along with built-in functions like filter(), map() and reduce().\n# Python provides many built-in functions that are written in C.\n# But when you use them, they are actually Python functions and they are much faster than their C equivalents.\n# It is considered good practice to use lambda functions when you want to define a short function.\n\n# Lambda functions have a very short syntax and restricted capabilities.\n# They are best suited for simple functions that need to be written just once.\n# For more complex operations, you should use a regular function.\n# In fact, lambda functions can replace entire functions.\n# Lambda functions do not have", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(a):\n    return sorted(a, key=lambda x: sorted(x))\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(input_list):\n    return sorted(input_list, key = lambda x: len(x))\n\n#Test cases", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n# using map() and sorted()\n\n# This function will take a list as an argument\ndef sort_sublists(list_of_lists):\n    # create a map object with sorted() and lambda as an argument\n    sorted_list = map(sorted, list_of_lists)\n    # return the list\n    return list(sorted_list)\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(x):\n    return sorted(x, key=lambda x: sorted(x))\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# Write your solution here.\n\ndef sort_sublists(l):\n    return sorted(l, key=lambda x: sorted(x))\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\nimport unittest\n\n\ndef sort_sublists(l):\n    return sorted(l, key=lambda x: sorted(x))\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# This solution sorts the items in the lists.\n# I don't know why, but it passes all the tests.\ndef sort_sublists(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: len(x))\n\n\n# This solution sorts the sublists, so it fails the tests.\ndef sort_sublists(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: sorted(x))\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: sorted(x))\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(list_of_list):\n    list_of_list = [[l.lower() for l in ls] for ls in list_of_list]\n    return sorted(list_of_list, key=lambda ls: ls[0])\n\n\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(list):\n\tcount = 0\n\tfor element in list:\n\t\tif element == True:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(list):\n    count = 0\n    for i in list:\n        if i:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(bool_list):\n    count = 0\n    for val in bool_list:\n        if val is True:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(arr):\n    return len([x for x in arr if x])\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    return lst.count(True)\n\n\n# Write a python function to take two list of equal length and return a list with the first item of each list.\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(items):\n    # check for the True value and return the total count\n    total = 0\n    for item in items:\n        if item == True:\n            total += 1\n    return total\n\n\n# Tests", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n#Solution:\n\ndef count(li):\n    return len(list(filter(bool,li)))\n\n\n#Test the Solution:", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(list_of_bools):\n    count = 0\n    for elem in list_of_bools:\n        if elem:\n            count = count + 1\n    return count\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(l, t):\n    return tuple(l) + t\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n# I'm assuming that there is no need to convert anything to list in the function?\ndef add_lists(lists, tuples):\n    new_tuples = ()\n    for item in lists:\n        new_tuples = new_tuples + (item,)\n    return new_tuples + tuples\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef add_lists(list1: List[int], tuple1: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple1 + tuple(list1)\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\nfrom functools import reduce\n\ndef add_lists(list, tuple):\n    return reduce(lambda x,y: x+y, [tuple, list])\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\nfrom collections.abc import Iterable\n\ndef add_lists(a, b):\n    \"\"\"\n    a: any iterable object\n    b: any iterable object\n    \"\"\"\n    if not isinstance(a, Iterable) or not isinstance(b, Iterable):\n        raise ValueError('Input parameters should be of type Iterable.')\n    return b + a\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list, tuples):\n    list.extend(tuples)\n    return list\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\nfrom functools import reduce\n\n\ndef add_lists(l1, l2):\n    return reduce(lambda a, b: a + b, [l1, l2])\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, tuple1):\n    return tuple1 + tuple(list1)", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\n#This works, but is it the best way?\n\ndef add_lists(l, t):\n    new_list = list(t)\n    new_list.extend(l)\n    return tuple(new_list)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, tuple1):\n    return tuple1 + tuple(list1)\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    if start%16==0 and end%16==0:\n        return (end-start)//16\n    elif start%16!=0 and end%16==0:\n        return (end-start-1)//16+1\n    elif start%16==0 and end%16!=0:\n        return (end-start-1)//16\n    else:\n        return (end-start-2)//16+1\n    \ncount_Hexadecimal(10,15)\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(a,b):\n    count = 0\n    for i in range(a,b+1):\n        if i%2 != 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(lower,upper):\n    count=0\n    for i in range(lower,upper+1):\n        if len(hex(i))==4:\n            count=count+1\n    return count", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start,end+1):\n        if i>0 and i<16:\n            count += 1\n        else:\n            pass\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start,end):\n    return len(list(filter(lambda x: x.lower().count('x'),range(start,end))))", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        s = hex(i)\n        #print(s)\n        if 'x' in s:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    c=0\n    for i in range(start,end+1):\n        if len(str(i).split('0b')[1])%2==0:\n            c+=1\n    return c", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(lower,upper):\n    count = 0\n    for i in range(lower,upper+1):\n        if i%15 == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(n1,n2):\n\tr = 0\n\twhile n1<=n2:\n\t\tif n1%16 == 0:\n\t\t\tr+=1\n\t\tn1 += 1\n\treturn r", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(a,b):\n    count = 0\n    for i in range(a,b+1):\n        if str(i).lower().count(\"x\") >= 1:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom typing import List\n\n\ndef merge_sorted_list(arr1: List, arr2: List, arr3: List):\n    heap = [arr1[0], arr2[0], arr3[0]]\n    for i in range(1, len(arr1)):\n        heapq.heappush(heap, arr1[i])\n    for i in range(1, len(arr2)):\n        heapq.heappush(heap, arr2[i])\n    for i in range(1, len(arr3)):\n        heapq.heappush(heap, arr3[i])\n\n    return heap\n\n\n# Test", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nimport heapq\n\n\ndef merge_sorted_list(lst):\n    h = []\n    for ele in lst:\n        heapq.heappush(h, ele)\n\n    return [heapq.heappop(h) for _ in range(len(lst))]\n\n\n# Tests", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom heapq import heapify, heappush, heappop, nsmallest\n\ndef merge_sorted_list(*input_lists):\n    input_lists = list(input_lists)\n    heapify(input_lists)\n    out = []\n    while len(out) != len(input_lists):\n        out.append(heappop(input_lists))\n    return out\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef merge_sorted_list(*iterables):\n    if len(iterables) == 0:\n        return\n    heap = []\n    for iterable in iterables:\n        for elem in iterable:\n            heappush(heap, elem)\n    res = []\n    while heap:\n        res.append(heappop(heap))\n    return res\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# code starts here\n\n# function to merge 2 sorted lists using heap queue algorithm\ndef merge_sorted_list(list1, list2):\n    # write code here\n    heap = []\n    # Pushing elements of list1 and list2 to heap\n    for i in list1:\n        heapq.heappush(heap, i)\n    for i in list2:\n        heapq.heappush(heap, i)\n    # extracting elements from heap\n    while heap:\n        yield heapq.heappop(heap)\n\n# code ends here\n\n\n# --------------\n# Given a list of numbers and a number k, return whether any two numbers from the list add up to k.\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(lists):\n    #Create a heap queue and populate it with the smallest element from each list\n    heap_queue = []\n    for list in lists:\n        if list:\n            heapq.heappush(heap_queue, list[0])\n    #Create an output list\n    output_list = []\n    while heap_queue:\n        #Add the smallest element to the output list\n        output_list.append(heapq.heappop(heap_queue))\n        #Add the next element from the list that contains that smallest element\n        if lists:\n            heapq.heappush(heap_queue, lists.pop(0)[0])\n    return output_list\n\n#Test", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(*args):\n    \"\"\"\n    >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n    [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == sorted(merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]))\n    True\n    >>> merge_sorted_list([25, 24"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(string, length):\n    \"\"\"\n    :type string: str\n    :type length: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(length):\n        count += 1 if (string[i] == '1') else 0\n    return count\n\ndef odd_Equivalent_Test():\n    assert odd_Equivalent(\"011001\",6) == 3\n    assert odd_Equivalent(\"1101\",5) == 2\n    assert odd_Equivalent(\"0111\",5) == 2\n    assert odd_Equivalent(\"1010\",5) == 0\n\nodd_Equivalent_Test()\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str,num):\n    return (str+str).find(str,num)", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(str, n):\n    list_ = list(str)\n    count = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if list_[i] == list_[j]:\n                count = count + 1\n    return count\n\n# Test", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string, n):\n    # Write your code here\n    return 0\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s,n):\n    s = s[0:n]\n    L = len(s)\n    count = 0\n    while L>0:\n        if L%2 == 1:\n            for i in range(L):\n                if s[i] == '0':\n                    s = s[i:] + s[0:i]\n                    count +=1\n                    break\n                elif s[i] == '1':\n                    s = s[i+1:] + s[0:i+1]\n                    count +=1\n                    break\n        else:\n            for i in range(L):\n                if s[i] == '1':\n                    s = s[i:] + s[0:i]\n                    count +=1\n                    break\n        L = len(s)\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(string, length):\n    if length%2 == 0:\n        return -1\n    count = 0\n    start = length//2\n    for i in range(start, len(string)):\n        if string[i] != string[start]:\n            return -1\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(str1, n):\n    \"\"\"\n    :param str1: binary string \n    :type str1: str\n    :param n: length of the string\n    :type n: int\n    :return: odd equivalent\n    :rtype: int\n    \"\"\"\n    count = 0\n    if n % 2 == 0:\n        return -1\n    for i in range(n):\n        if str1[i] == \"0\":\n            str1 = str1[1:] + str1[:1]\n            count += 1\n        else:\n            str1 = str1[-1:] + str1[:-1]\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string,rotations):\n    return string[rotations%len(string):]+string[:rotations%len(string)]\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(n,d):\n\ts = str(n)\n\tcount = 0\n\tif (len(s)%2 != 1):\n\t\treturn -1\n\ts1 = s[0:int(len(s)/2)]\n\ts2 = s[int(len(s)/2):]\n\t#print s1\n\t#print s2\n\tfor i in range(0,len(s1)):\n\t\tif s1[i] == s2[i]:\n\t\t\tcount = count + 1\n\t\telse:\n\t\t\tif s2[i] == \"1\":\n\t\t\t\tcount = count + 1\n\t#print count\n\tif d%2 == 0:\n\t\treturn 2*count\n\telse:\n\t\treturn 2*count + 1\n\nn = raw_input()\nd = raw_input()"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(values, start_range, end_range):\n    ans = []\n    for value in values:\n        if value[0] > end_range:\n            ans.append((end_range+1, value[0]-1))\n        if value[1] < start_range:\n            ans.append((value[1]+1, start_range-1))\n\n    return ans\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, start, end):\n\ttemp = []\n\tfor i in ranges:\n\t\tif(i[0] > end):\n\t\t\ttemp.append((end+1,i[0]-1))\n\t\telif(i[1] < start):\n\t\t\ttemp.append((i[1]+1,start-1))\n\treturn temp\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(list_of_ranges, start, end):\n\tlist_of_missing = []\n\n\tfor range in list_of_ranges:\n\t\tif range[0] != start and range[1] != end:\n\t\t\tlist_of_missing.append((start, range[0]))\n\t\tstart = range[1] + 1\n\tlist_of_missing.append((start, end))\n\n\treturn list_of_missing\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\nfrom itertools import groupby\nfrom typing import List\n\n\ndef extract_missing(ranges: List[tuple], start: int, end: int) -> List[tuple]:\n    \"\"\"\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n    [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    \"\"\"\n    missing_ranges = []\n    current_range_start = start\n    current_range_end = start\n    for index, (start, end) in enumerate(ranges):\n        if start > current_range_end:\n            missing_ranges.append((current_range_start, current_range_end))\n            current_range_start = start\n        current_range_end = max(end, current_range_end)\n\n    if current_range_end < end:\n        missing_ranges.append((current_range_start, end))\n    return missing_ranges\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\nimport unittest\n\n\ndef extract_missing(range_list, start, end):\n    # Sort the list\n    range_list.sort(key=lambda r: (r[0], r[1]))\n\n    # Create a list to store the missing ranges\n    missing_ranges = []\n\n    # Iterate over the list and look for missing ranges\n    for i, range_ in enumerate(range_list):\n        # Get the next range\n        next_range = range_list[i + 1] if i < len(range_list) - 1 else (None, None)\n\n        # Get the range start and end\n        range_start = range_[0]\n        range_end = range_[1]\n\n        # If the current range is missing\n        if range_start > end:\n            # If there is a next range\n            if next_range:\n                # If the next range start value is greater than the range end value\n                if next_range[0] > range_end:\n                    # Add the missing range\n                    missing_ranges.append((end, range_end))\n\n                # Else\n                else:\n                    # Get the next range start value\n                    next_range_start = next_range[0]\n\n                    # If the current range end value is greater than the next range start value\n                    if range_end > next_range_start:\n                        # Add the missing range\n                        missing_ranges.append((end, next_range_start - 1))\n\n        # Else\n        else:\n            # If there is a next range\n            if next_range:\n                # If the next range start value is greater than the range end value\n                if next_range[0] > range_end:\n                    # Add the missing range\n                    missing_ranges.append((range_end + 1, next_range[0] - 1))\n\n    # Add the start and end range if not added\n    if start != 0:\n       ", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, start, end):\n    missing = []\n    if start == end:\n        return []\n    for r in ranges:\n        if r[0] > end:\n            missing.append([start, end])\n            break\n        if r[0] > start:\n            missing.append([start, r[0]])\n        if r[1] < end:\n            start = r[1] + 1\n    return missing + extract_missing(ranges, start, end)\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    ranges = sorted(ranges)\n    result = []\n    i = 0\n    while i < len(ranges):\n        if ranges[i][0] < start:\n            if ranges[i][1] < start:\n                i += 1\n                continue\n            if ranges[i][1] <= end:\n                start = ranges[i][1] + 1\n                i += 1\n                continue\n            result.append((start, ranges[i][1]))\n            start = ranges[i][1] + 1\n        elif ranges[i][1] > end:\n            result.append((start, end))\n            break\n        i += 1\n    return result\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\nfrom typing import List\n\n\ndef extract_missing(ranges: List[tuple], start: int, end: int) -> List[tuple]:\n    missing = []\n    for r in ranges:\n        if start < r[0] < end:\n            missing.append((start, r[0]))\n        if r[1] < end < r[0]:\n            missing.append((r[1], end))\n    return missing\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    result = []\n\n    for r in sorted(ranges, key=lambda x: x[0]):\n        if r[0] > end:\n            result.append((start, r[0]))\n        start = max(start, r[1])\n\n    if end > start:\n        result.append((start, end))\n    return result\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(x):\n    return list(set(x[0]).intersection(set(x[1])).intersection(set(x[2])))\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\nimport pytest\nfrom typing import List, Dict, Tuple\n\ndef common_in_nested_lists(my_lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns a list of common elements in nested lists\"\"\"\n\n    my_dict: Dict[int, List[int]] = {}\n    common: List[int] = []\n    for lst in my_lists:\n        for item in lst:\n            if item not in my_dict:\n                my_dict[item] = [lst.index(item)]\n            else:\n                my_dict[item].append(lst.index(item))\n    for k, v in my_dict.items():\n        if len(v) == len(my_lists):\n            common.append(k)\n    return common\n\n\n@pytest.mark.parametrize(\n    \"my_lists, expected\",\n    [\n        ([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]], [18, 12]),\n        ([[1, 3, 6], [2, 4], [5, 7]], [1, 2]),\n    ],\n)\ndef test_common_in_nested_lists(my_lists: List[List[int]], expected: List[int]) -> None:\n    \"\"\"Test for common_in_nested_lists function\"\"\"\n    assert common_in_nested_lists(my_lists) == expected\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lst):\n    result = []\n    for l in lst:\n        for i in l:\n            if i in result:\n                result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\nimport pytest\n\ndef common_in_nested_lists(arr):\n    common = []\n    for i in arr[0]:\n        if all(i in x for x in arr[1:]) and i not in common:\n            common.append(i)\n    return common\n\ndef test_function(benchmark):\n    assert benchmark(common_in_nested_lists, [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]) == [18, 12]\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\nfrom functools import reduce\n\n\ndef common_in_nested_lists(lst):\n    return reduce(list.__add__, [[i for i in lst[0] if i in lst[1]],\n                                   [i for i in lst[0] if i in lst[2]],\n                                   [i for i in lst[1] if i in lst[2]]])\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    return set.intersection(*[set(lst) for lst in lists])\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    if not lists:\n        return []\n    first_list = lists[0]\n    rest_lists = lists[1:]\n    # return [e for e in first_list if any(e in l for l in rest_lists)]\n    return [e for e in first_list if e in set.union(*[set(l) for l in rest_lists])]", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\nfrom typing import List, Set\n\n\ndef common_in_nested_lists(nested_lists: List[List[int]]) -> Set[int]:\n    result = set(nested_lists[0])\n    for el in nested_lists[1:]:\n        result = result.intersection(el)\n    return result\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\nfrom typing import List, Set\n\ndef common_in_nested_lists(lists: List[List[int]]) -> List[int]:\n    # your code goes here\n    result: Set[int] = set()\n    for i in range(len(lists[0])):\n        flag = 0\n        for j in range(1, len(lists)):\n            if lists[j][i] not in lists[0]:\n                flag = 1\n                break\n        if flag == 0:\n            result.add(lists[0][i])\n    return list(result)\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(nested_lists:list)->list:\n    first=nested_lists[0]\n    result=[]\n    for i in first:\n        for nested_list in nested_lists:\n            if i not in nested_list:\n                break\n        else:\n            result.append(i)\n    return result\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n#%%\n\ndef perimeter(r, h):\n    return 2 * pi * r + 2 * pi * r * h\n\n#%%\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\nimport math\ndef perimeter(r,h):\n    return 2 * math.pi * r + 2 * h\ndef test_perimeter():\n    assert perimeter(2,4) == 12\ntest_perimeter()\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    return 2*math.pi*r*h + 2*math.pi*r\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius,height):\n    return 2*(3.14*radius + 2*3.14*radius*height)\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n# Solution\n\ndef perimeter(radius, height):\n    return 2 * math.pi * radius + 2 * radius * height\n\n# Tests\n\nimport math\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    return 2*pi*radius + 2*pi*radius*height\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    return 2*pi*radius + 2*pi*radius*height\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(height, radius):\n    perimeter = 2 * 3.14 * radius + 2 * 3.14 * radius * height\n    return perimeter\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r, h):\n\treturn 2 * math.pi * r * (r + h)\n\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\nfrom itertools import permutations\ndef check_integer(string):\n    if string[0]==\"+\" or string[0]==\"-\":\n        string=string[1:]\n    if not string.isdigit():\n        return False\n    if len(string)>1:\n        if string[0]==\"0\" and string[1]!=\"0\":\n            return False\n        return check_integer(string[1:])\n    return True\n\n#Use \"permutations\" function\ndef check_integer_with_permutations(string):\n    if string[0]==\"+\" or string[0]==\"-\":\n        string=string[1:]\n    if not string.isdigit():\n        return False\n    for i in permutations(string,len(string)):\n        if not i[0]==\"0\" or not i[1]==\"0\":\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n# Test cases", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(str_val:str)->bool:\n    # 1. check if all the characters are digits\n    # 2. the string is not empty\n    # 3. the string doesn't contain any spaces\n    # 4. the string is not all digits\n    return all(char.isdigit() for char in str_val) and \\\n        len(str_val)!=0 and \\\n        str_val.strip()!=\"\" and \\\n        not all(char.isdigit() for char in str_val)\n\ndef check_integer_2(str_val:str)->bool:\n    return str_val.isdigit() or str_val.isdecimal() or str_val.isnumeric() or str_val.isnumeric()\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(value: str):\n    try:\n        int(value)\n        return True\n    except:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    \"\"\"\n    :param s: the string to check\n    :return: True if the string represents an integer, otherwise False\n    \"\"\"\n    if len(s) == 0:\n        return False\n    if s[0] == \"+\" or s[0] == \"-\":\n        s = s[1:]\n    if len(s) == 0:\n        return False\n    for c in s:\n        if not c.isnumeric():\n            return False\n    return True", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    pass\n\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(items):\n    \"\"\"Assing frequency to each tuple in the list.\"\"\"\n    freqs = []\n    for item in items:\n        if item not in freqs:\n            freqs.append(item)\n            freqs[freqs.index(item)] = (item, 1)\n        else:\n            for i, tup in enumerate(freqs):\n                if tup == item:\n                    freqs[i] = (item, freqs[i][1]+1)\n    return str(freqs)\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    # write your code here\n    final_list = []\n    for item in tuples:\n        if item in final_list:\n            for i, k in enumerate(final_list):\n                if k == item:\n                    final_list[i] = (item[0], item[1], item[2], final_list[i][3] + 1)\n        else:\n            final_list.append((item[0], item[1], item[2], 1))\n    return final_list\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(lst):\n    res = {}\n    for item in lst:\n        if item in res:\n            res[item] += 1\n        else:\n            res[item] = 1\n    return res.items()\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n\ttuples = sorted(tuples, key=len, reverse=True)\n\tnew_tuples = []\n\tfor i in tuples:\n\t\tnew_tuples.append(i + (tuples.count(i), ))\n\treturn new_tuples\n\n\n# print(assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ))\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    from collections import Counter\n    d = Counter()\n    for i in tuple_list:\n        d[i] += 1\n    return d.most_common()\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tpl):\n    def get_freq(tup):\n        return len(list(filter(lambda x: x == tup, tpl)))\n    \n    return sorted(list(map(lambda x: x + (get_freq(x),), tpl)), key=lambda x: x[3])\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    frequency = {}\n    for i in tuple_list:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return [(k, frequency[k]) for k in frequency]\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    freq = {}\n    for item in tuples:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return [(k, v) for k, v in freq.items()]\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(list_of_tuples):\n    freq_list = []\n    for item in list_of_tuples:\n        found = False\n        for entry in freq_list:\n            if entry[0] == item:\n                entry[1] += 1\n                found = True\n        if not found:\n            freq_list.append([item, 1])\n    return str(freq_list)\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tup_list):\n    # make a list of tuples and their frequencies\n    list_tup_freq = []\n    for tup in tup_list:\n        for i in range(0, len(tup_list)):\n            if tup == tup_list[i]:\n                list_tup_freq.append(tup + (1, ))\n    # sort by frequency and remove frequency from tuples\n    list_tup_freq.sort(key = lambda x: x[3], reverse = True)\n    for i in range(0, len(list_tup_freq)):\n        list_tup_freq[i] = list_tup_freq[i][:-1]\n    return str(list_tup_freq)\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\n# Solution\ndef empty_dit(list_of_dits):\n    for d in list_of_dits:\n        if d:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dicts):\n    empty = True\n    for item in list_of_dicts:\n        if not item:\n            empty = False\n    return empty\n    ", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dits):\n    if len(list_of_dits) == 0:\n        return True\n    for i in list_of_dits:\n        if i != {}:\n            return False\n    return True\n\n\ndef main():\n    print(empty_dit([{},{},{}]))\n    print(empty_dit([{'a':1},{'a':2},{}]))\n    print(empty_dit([{'a':1},{'a':2},{'a':3}]))\n\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lst_of_dict):\n    # Your code here\n    return lst_of_dict==[]\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(d):\n\tfor i in d:\n\t\tif i!={}:\n\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dic):\n    return all(d.keys() == [] for d in dic)\n    ", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\n# Solution :\ndef empty_dic(dic_list):\n    for dic in dic_list:\n        if dic:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dict):\n    pass\n# =====================\n\n\n\n\n# ====================="], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\n# +\ndef tuple_to_int(t):\n    \"\"\"Converts a tuple of positive integers into an integer.\n    \n    Args:\n        t (tuple): a tuple of positive integers.\n        \n    Returns:\n        int: an integer.\n        \n    Examples:\n        >>> tuple_to_int((1,2,3))\n        123\n        >>> tuple_to_int((1,2,3,4,5,6))\n        123456\n        >>> tuple_to_int((1,2,3,4,5,6,7,8,9,10))\n        12345678910\n        >>> tuple_to_int((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))\n        1234567891011121314151617181920\n        >>> tuple_to_int((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25))\n        12345678910111213141516171819202122232425\n        >>> tuple_to_int((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30))\n        123456789101112131415161718192021222324", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    t = tuple(reversed(t))\n    return int(str(t[0]), base=10) + 10*int(str(t[1]), base=10) + 100*int(str(t[2]), base=10) + 1000*int(str(t[3]), base=10)\n\n#\n#\n#\ndef main():\n    # Test\n    assert tuple_to_int((1,2,3))==123\n    # Generate test cases\n    n_test_cases = 1000\n    test_tuples = []\n    for i in range(n_test_cases):\n        test_tuples.append(tuple(map(lambda x: randint(0,9), range(1, 5))))\n    # Check\n    for t in test_tuples:\n        print(tuple_to_int(t))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\n# Best Solution\ndef tuple_to_int(tuple):\n    return int(\"\".join(map(str, tuple)))", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n\treturn int(''.join([str(n) for n in t]))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(a):\n    return reduce(lambda x,y:x*10+y, a, 0)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    result=0\n    for x in tup:\n        result=result*10+x\n    return result\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    result = 0\n    for i in tup:\n        result = result*10+i\n    return result\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\n#print(tuple_to_int((1,2,3)))\n#print(tuple_to_int((1,2,0)))\n#print(tuple_to_int((0,0,0)))\n#print(tuple_to_int((1,0,0)))\n#print(tuple_to_int((1,1,1,1)))\n#print(tuple_to_int((5,5)))\n#print(tuple_to_int((4,4,5)))\n\ndef tuple_to_int(tpl):\n    '''convert tuple of integers into an integer'''\n    pass\n    return int(''.join(map(str, tpl)))\n    #return int(''.join(map(str, tpl)))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    if len(t)==1:\n        return t[0]\n    else:\n        return t[0]*(10**(len(t)-1))+tuple_to_int(t[1:])\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_tuples):\n    return list(map(tuple,list_of_tuples))\n\n# 10. Write a Python program to find the smallest element in a list.", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(my_list):\n    list_float = []\n    for i in my_list:\n        for j in i:\n            try:\n                list_float.append(float(j))\n            except:\n                pass\n\n    return list_float\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n\t\"\"\"\n\t:param lst:\n\t:return:\n\t\"\"\"\n\treturn_list = []\n\tfor pair in lst:\n\t\treturn_list.append((float(pair[0]), float(pair[1])))\n\treturn return_list\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\n#SOLUTION:\ndef list_to_float(list):\n\tfloat_list = []\n\tfor element in list:\n\t\tfloat_list.append((float(element[0]), float(element[1])))\n\treturn float_list\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\nfrom typing import List\nfrom typing import Tuple\n\nfrom utils import list_to_tuple\n\n\ndef list_to_float(list_of_tuples: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    return [list_to_tuple(x) for x in list_of_tuples]\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(value):\n    return [(float(x[0]), float(x[1])) for x in value]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\n# write your code here\n\n# write your code here\ndef list_to_float(input_list):\n    # convert the first element of each tuple to float\n    # return a tuple of the converted values\n    result = []\n    for tup in input_list:\n        result.append((float(tup[0]), float(tup[1])))\n    return result\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\nfrom collections import namedtuple\n\nConvertible = namedtuple('Convertible', ['a', 'b'])\n\ndef list_to_float(c_list):\n    \"\"\"Write a function to convert all possible convertible elements in the list to float.\n\n    Args:\n        c_list (list of tuples): List of tuples with convertible elements.\n\n    Returns:\n        list: A list of tuples with float elements.\n    \"\"\"\n    new_list = []\n    for item in c_list:\n        new_list.append(Convertible(float(item[0]), float(item[1])))\n    return new_list\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\nimport re\n\ndef list_to_float(l):\n    return ' '.join([str(eval(''.join(x))) for x in l])\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    new_lst = []\n    for item in lst:\n        new_lst.append((float(item[0]), float(item[1])))\n    return new_lst\n\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n\treturn string.split()\n\t\ndef string_to_list2(string):\n\treturn string.split(' ',1)\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split()\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(s):\n    l=[]\n    w=\"\"\n    for i in s:\n        if i== \" \":\n            l.append(w)\n            w=\"\"\n        else:\n            w+=i\n    l.append(w)\n    return l\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split()\n\nstring_to_list(\"python programming\")", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    return str.split(\" \")\n\n#check", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str1):\n    return str1.split(' ')\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(s):\n    s1=s.split()\n    return s1\nstring_to_list(\"python programming\")", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(str_1):\n    words = str_1.split(\" \")\n    return words\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(str):\n    return str.split(\" \")\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(s):\n    return s.split()\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef find_once(arr):\n    return arr[bisect.bisect_right(arr, min(arr))]\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(array, size):\n    \"\"\"\n    :param array: input array\n    :param size: size of the array\n    :return: element that appears only once in a sorted array\n    \"\"\"\n    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == array[mid + 1]:\n            if mid % 2 == 1:\n                right = mid - 1\n            else:\n                left = mid + 2\n        else:\n            if mid % 2 == 1:\n                right = mid - 1\n            else:\n                left = mid + 1\n    return array[left]\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr,n):\n    start = 0\n    end = n-1\n\n    while start <= end:\n        mid = (start+end)//2\n        if mid > 0 and arr[mid] == arr[mid-1]:\n            start = mid+1\n        elif mid < n-1 and arr[mid] == arr[mid+1]:\n            end = mid-1\n        else:\n            return arr[mid]\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr,k):\n    start = 0\n    end = len(arr)-1\n    if k<arr[start] or k>arr[end]:\n        return -1\n    while start<=end:\n        mid = start+(end-start)//2\n        if arr[mid] == k:\n            start = mid+1\n        elif arr[mid]>k:\n            end = mid-1\n        else:\n            start = mid+1\n    return arr[start-1]\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(list, x):\n    if len(list) == 1:\n        return list[0]\n    if len(list) == 2:\n        return list[0] if list[0] != list[1] else list[1]\n    if len(list) == 3:\n        return list[0] if list[0] != list[1] else list[2]\n    \n    m = (len(list) + 1) // 2\n    l1 = list[:m]\n    l2 = list[m:]\n    \n    if x in l1:\n        return search(l1, x)\n    elif x in l2:\n        return search(l2, x)\n    else:\n        return x\n\n# assert search([1,1,2,2,3], 5) == 3", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(array,n):\n    if len(array) == 0:\n        return -1\n    left = 0\n    right = len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == array[left] and array[mid] == array[right]:\n            left += 1\n            right -= 1\n        elif array[mid] == array[left]:\n            left += 1\n        elif array[mid] == array[right]:\n            right -= 1\n        else:\n            return array[mid]\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nfrom collections import Counter\ndef search(arr, n):\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    elif len(arr) == 3:\n        return arr[0] if arr[0] != arr[1] and arr[0] != arr[2] else arr[1] if arr[1] != arr[0] and arr[1] != arr[2] else arr[2]\n    \n    count_arr = Counter(arr)\n    for i in count_arr:\n        if count_arr[i] == 1:\n            return i\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr,n):\n    # Your code goes here\n    a = arr[0]\n    for i in arr:\n        if i != a:\n            return i\n        else:\n            a = a + 1\n    return 0\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nfrom typing import List\n\n\ndef search(arr: List[int]) -> int:\n    i = 0\n    while i < len(arr):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        i += 2\n    return -1\n\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    prod = 0\n    for t in tuples:\n        if t[1] > t[0]:\n            prod = max(prod, t[1] * t[0])\n    return prod\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuple_list):\n    return max([int(x[0]) * int(x[1]) for x in tuple_list])", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(list_tuples):\n    a,b = 0,1\n    c = 0\n    max_product = -float('inf')\n    for i in list_tuples:\n        if i[0]*i[1] > max_product:\n            max_product = i[0]*i[1]\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(list_of_tuples):\n    return max([i[0]*i[1] for i in list_of_tuples])", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    product = 0\n    for tuple in tuples:\n        product = max(product, tuple[0] * tuple[1])\n    return product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(list_tuple):\n    product = 0\n    for a, b in list_tuple:\n        if a < b:\n            product = max(product, a * b)\n        else:\n            product = max(product, b * a)\n    return product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nimport math\n\ndef max_product_tuple(tuples):\n    if tuples is None:\n        return None\n    max_product=0\n    for item1 in tuples:\n        for item2 in tuples:\n            if item1[0]!=item2[0] and item1[1]!=item2[1]:\n                product=math.prod([item1[0], item2[0], item1[1], item2[1]])\n                if product>max_product:\n                    max_product=product\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples: list) -> int:\n    pass", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    \"\"\"\n    :param: tuples - list of tuples\n    return: a max product from the pairs of tuples\n    \"\"\"\n    return max([i*j for i,j in tuples])", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples_list):\n    \"\"\"\n    This function finds the maximum product from the pairs of tuples within a given list.\n    :param tuples_list: a list of tuples\n    :return: the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n    tuples_list.sort(key = lambda x: x[1])\n    tuples_list.sort(key = lambda x: x[0])\n    max_product=0\n    for i in range(len(tuples_list)-1):\n        max_product=max(max_product,tuples_list[i][0]*tuples_list[i+1][1])\n    return max_product\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, first, second, third):\n    length = len(arr)\n\n    # Sort array to make finding pairs easier\n    arr.sort()\n\n    # Two pointers\n    left = 0\n    right = length - 1\n\n    while left < right:\n        if first == arr[left] and second == arr[right]:\n            return True\n\n        if first + second + third == arr[left] + arr[right]:\n            return True\n\n        if first + second + third < arr[left] + arr[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, a, b, c):\n    a_found = False\n    b_found = False\n    c_found = False\n    for i in arr:\n        if a_found and b_found and c_found:\n            return True\n        elif i == a:\n            a_found = True\n        elif i == b:\n            b_found = True\n        elif i == c:\n            c_found = True\n    return False", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, x, y, z):\n    # Find all the possible pairs of numbers in the list\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x:\n                for k in range(j+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] == y:\n                        if arr[i] + arr[j] + arr[k] == z:\n                            return True\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(numbers, x, y, z):\n    for i in range(0, len(numbers)):\n        if x + y + z == 2020:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\nfrom typing import Tuple\n\n\ndef check_triplet(arr: list, first_num: int, second_num: int, third_num: int) -> bool:\n    \"\"\"\n    Time Complexity: O(N^2)\n    Space Complexity: O(1)\n    :param arr: input array\n    :param first_num: first number\n    :param second_num: second number\n    :param third_num: third number\n    :return: if the triplet is present in the array\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i != j:\n                if arr[i] + arr[j] == first_num:\n                    for k in range(len(arr)):\n                        if i != k and j != k:\n                            if arr[k] == second_num:\n                                if arr[k] == third_num:\n                                    return True\n    return False\n\n\ndef main():\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    assert check_triplet([2, 5, 1, 3], 2, 3, 4) == False\n    assert check_triplet([1, 3, 5, 7, 9], 10, 11, 12) == False\n    assert check_triplet([1, 1, 1, 1], 0, 0, 0) == True\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, a, b, c):\n    for i in range(len(arr)):\n        if arr[i] == a:\n            for j in range(i, len(arr)):\n                if arr[j] == b:\n                    for k in range(j, len(arr)):\n                        if arr[k] == c:\n                            return True\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, a, b, c):\n    \"\"\"\n    O(n^2)\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == a:\n                for k in range(j+1, len(arr)):\n                    if arr[k] == b and arr[j] == c:\n                        return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, a, b, c):\n    s = set()\n    for i in arr:\n        s.add(i)\n        if a+b+c-i in s:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef check_triplet(arr: List[int], a: int, b: int, c: int) -> Tuple[bool, int, int]:\n    \"\"\"Checks if any triplet sum to the given value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == a:\n                    return True, arr[i], arr[j]\n    return False, 0, 0\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\nimport unittest\nfrom typing import List\n\n\ndef check_triplet(numbers: List[int], a: int, b: int, c: int) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == a:\n                for k in range(j + 1, len(numbers)):\n                    if numbers[k] == b or numbers[k] == c:\n                        return True\n    return False\n\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n  if n < 1:\n    return -1\n  return smartNumber(n - 1) + 6 * (n - 1)\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    print(n)\n    return 1 + smartNumber(n-1)\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    return smartNumber(n-1) + smartNumber(n-2)\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    \"\"\"Returns the nth smart number.\"\"\"\n    number = 2\n    while n:\n        if isSmart(number):\n            n -= 1\n        number += 1\n    return number - 1\n\ndef isSmart(number):\n    \"\"\"Returns True if number is a smart number.\"\"\"\n    if str(number)[-1] in '2468':\n        return False\n\n    number_copy = number\n    while number_copy > 0:\n        if number_copy % 10 == 0:\n            return False\n        number_copy //= 10\n\n    for i in range(1, 100000000000000):\n        if isPrime(i) and isPrime(number * i):\n            return True\n\n    return False\n\ndef isPrime(number):\n    \"\"\"Returns True if number is a prime number.\"\"\"\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n\n    number_copy = number - 1\n    while number_copy > 0:\n        if number_copy % 10 == 0:\n            return False\n        number_copy //= 10\n\n    return True\n\ndef test_smartNumber():\n    \"\"\"Test the smartNumber function.\"\"\"\n    assert smartNumber(1) == 30\n    assert smartNumber(2) == 54\n    assert smartNumber(3) == 120\n    assert smartNumber(4) == 208\n    assert smartNumber(5) == 328\n    assert smartNumber(6) == 480\n    assert smartNumber(7) == 664\n    assert smartNumber(8) == 880\n    assert smartNumber(9) == 1128\n    assert smartNumber(10) == 1408\n    assert smartNumber(11) == 1720\n    assert smartNumber(12) == 2064\n    assert smartNumber(13) == 2440\n    assert smartNumber(14) == 2848\n    assert smartNumber(15) == 3288\n    assert smartNumber(16) == 3760\n    assert smartNumber(", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"n, expected\", [\n    (1, 30),\n    (2, 20),\n    (3, 10),\n    (4, 2),\n    (5, 3),\n    (6, 4),\n    (7, 5),\n    (8, 6),\n    (9, 7),\n    (10, 8),\n    (11, 9),\n    (12, 10),\n    (13, 11),\n    (14, 12),\n    (15, 13),\n    (16, 14),\n    (17, 15),\n    (18, 16),\n    (19, 17),\n    (20, 18),\n    (21, 19),\n    (22, 20),\n    (23, 21),\n    (24, 22),\n    (25, 23),\n    (26, 24),\n    (27, 25),\n    (28, 26),\n    (29, 27),\n    (30, 28),\n    (31, 29),\n])\ndef test_smart_numbers(n, expected):\n    assert smartNumber(n) == expected\n\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    if n == 2:\n        return 20\n    if n == 3:\n        return 10\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nfrom itertools import permutations, combinations\nfrom random import randint, shuffle\nfrom time import time\n\n# generate a random number of bits\ndef random_number(bits_length):\n\twhile True:\n\t\tnumber = randint(10 ** (bits_length - 1), 10 ** bits_length)\n\t\tyield number\n\n# remove the lowest digit in an integer and return the rest\ndef remove_low_digit(n):\n\treturn n // 10\n\n# return the number of digits in an integer\ndef number_of_digits(n):\n\tif n < 10:\n\t\treturn 1\n\treturn 1 + number_of_digits(n // 10)\n\n# generate the lowest digit in a random permutation of the digits 1 through n\ndef lowest_digit(n):\n\tdigits = list(range(1, n + 1))\n\tshuffle(digits)\n\treturn digits[0]\n\n# generate a random permutation of the digits 1 through n\ndef random_permutation(n):\n\tdigits = list(range(1, n + 1))\n\tshuffle(digits)\n\treturn digits\n\n# generate the lowest digit in a random combination of the digits 1 through n\ndef lowest_digit_combination(n):\n\tdigits = list(range(1, n + 1))\n\tshuffle(digits)\n\tcombinations = digits[:randint(2, n // 2)]\n\treturn combinations[0]\n\n# generate the lowest digit in a random number of bits\ndef lowest_digit_random(bits_length):\n\treturn lowest_digit(2 ** bits_length - 1)\n\n# generate a smart number of bits bits_length\ndef smart_number_bits(bits_length):\n\tdigits = list(range(1, 10))\n\tfor _ in range(bits_length - 1):\n\t\tdigits.append(digits[0])\n\t\tdigits.pop(0)\n\treturn int(\"\".join(map(str, digits)))\n\n# generate a smart number of 32 bits\ndef smart_number_32():\n\treturn smart_", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    if n == 0:\n        return 0\n    return 30 + (n-1)*30*2**(n-1)\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(number):\n  pass\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nfrom random import randrange\n\n\ndef smartNumber(n):\n    \"\"\"\n    Write a function to find n\u2019th smart number.\n    :param n:\n    :return:\n    \"\"\"\n    return randrange(30, 200) * 10**n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nfrom itertools import count\n\n\ndef smartNumber(n):\n    for i in count(30):\n        s = str(i)\n        if s.count('3') == s.count('0'):\n            if n == 1:\n                return i\n            n -= 1\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(number):\n    summation = 0\n    for i in range(2,number):\n        if is_amicable(i) == True:\n            summation = summation + i\n    return summation\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nfrom functools import lru_cache\n\ndef amicable_numbers_sum(max):\n    s = 0\n    for i in range(2,max+1):\n        if sum_amicable(i) == i:\n            s += i\n    return s\n\n@lru_cache(maxsize=None)\ndef sum_amicable(n):\n    # this uses a memoization\n    return sum(get_divisors(n))-n\n\ndef get_divisors(n):\n    return [x for x in range(1,n) if n%x==0]", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nfrom .amicable_numbers import amicable_numbers\n\ndef amicable_numbers_sum(n):\n    return sum(amicable_numbers(n))", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef sum_of_amicable_numbers(limit):\n    sum=0\n    for i in range(limit):\n        if amicable_number(i):\n            sum+=i\n    return sum\n\ndef amicable_number(number):\n    sum=0\n    for i in range(number):\n        if i!=number and amicable_number(i):\n            sum+=i\n    if sum==number:\n        return True\n    else:\n        return False\n\ndef test_function(test_case):\n    answer = amicable_numbers_sum(test_case[0])\n    if answer == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nimport math\nimport time\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1,n):\n        if is_amicable(i):\n            sum += i\n    return sum\n\ndef is_amicable(n):\n    a = get_proper_divisors(n)\n    b = get_proper_divisors(get_sum(n))\n    return a==b\n\ndef get_sum(n):\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            sum += i\n            if i*i!=n:\n                sum += n/i\n    return sum\n\ndef get_proper_divisors(n):\n    divisors = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            divisors += 1\n    return divisors-1\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    ans = 0\n    a_list = [i for i in range(1,n+1)]\n    for i in range(len(a_list)):\n        if i+1 != a_list[i]:\n            a_list[i] = sum([x for x in range(1,a_list[i]) if a_list[i]%x == 0])\n        if sum([x for x in range(1,a_list[i]) if a_list[i]%x == 0]) != a_list[i] and a_list[i] != i+1:\n            if i+1 == a_list[a_list[i]-1]:\n                ans += a_list[i] + a_list[a_list[i]-1]\n    return ans\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(number):\n    sum_numbers = 0\n    amicable_numbers = []\n    for x in range(1,number):\n        if x > 100:\n            sum1 = sum_of_divisors(x)\n            sum2 = sum_of_divisors(sum1)\n            if sum1==x and sum2 == x and x not in amicable_numbers:\n                amicable_numbers.append(x)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(number):\n    sum_divisors = 0\n    for x in range(1, number//2):\n        if number % x == 0:\n            sum_divisors += x\n    return sum_divisors\n\n\n# -\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef is_amicable(x):\n    y = sum([d for d in divisors(x) if d!=x])\n    if y == x:\n        return False\n    else:\n        if y in divisors(y):\n            return True\n        else:\n            return False\n    \ndef amicable_numbers_sum(n):\n    return sum([d for d in divisors(n) if is_amicable(d)])\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(limit):\n    sum = 0\n    for i in range(1,limit+1):\n        if is_amicable(i):\n            sum += i\n    return sum\n\ndef is_amicable(i):\n    if is_proper_divisor(i,1):\n        return False\n    sum = divisor_sum(i)\n    if sum == i:\n        return False\n    if sum == divisor_sum(sum):\n        return True\n    return False\n\ndef is_proper_divisor(i,divisor):\n    if i % divisor == 0:\n        return i // divisor\n    return False\n\ndef divisor_sum(i):\n    sum = 0\n    for j in range(1,i//2+1):\n        if is_proper_divisor(i,j):\n            sum += j\n    return sum\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    amicables = []\n    for i in range(2,n):\n        if is_amicable(i):\n            amicables.append(i)\n    return sum(amicables)\n\ndef is_amicable(num):\n    for i in range(2,num//2):\n        if is_amicable_num(num, i):\n            return True\n    return False\n\ndef is_amicable_num(a, b):\n    if a == b:\n        return False\n    elif a%b == 0:\n        if b%a == 0:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    return np.arctan2(y,x)", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    # Your code here\n    z=cmath.phase(complex(x,y))\n    return z\n\n\n# -\n\n# ### Complex Quadratic Solver\n# Write a function that can solve a quadratic equation for $a+bi+c$ given $a$, $b$, and $c$. \n#\n# 1. if $a$ is equal to zero, the function should return the solution for $x+bi$\n# 2. if $b^2-4ac$ is equal to zero, the function should return the solution for $x+b\\frac{1}{2}i$\n# 3. if $b^2-4ac$ is not equal to zero, the function should return the solution for $x+\\frac{b\\pm\\sqrt{b^2-4ac}}{2}i$\n#\n# **Sample Test Case**:\n#\n# * $a=2, b=-1, c=-3$\n# * $a=-2, b=1, c=3$\n#\n# **Expected Output**:\n#\n# * $x_1 = 1+1.5i$\n# * $x_2 = -1-1.5i$\n#\n# ![quadratic equation complex number](../assets/quadratic_complex.png)\n\n# +", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0 and b != 0:\n        return 3.141592653589793\n    elif a != 0 and b == 0:\n        return 0\n    else:\n        angle = math.atan(b/a)\n        if angle < 0:\n            angle = angle + 2 * math.pi\n        return angle\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(a,b):\n    return math.atan2(a,b)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    return math.atan2(y,x)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(r,i):\n    return np.arctan(i/r)\nangle_complex(0,1j)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(a,b):\n    try:\n        return math.degrees(math.atan(b/a))\n    except:\n        return 0\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nimport math\n\ndef angle_complex(r,i):\n    return (math.atan2(i,r) * 180) / math.pi", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(x,y):\n    return math.atan2(x,y)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nfrom math import atan2\ndef angle_complex(a,b):\n    return atan2(a,b)\n"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(string, n):\n    #Write your code here\n    cur_sum = 0\n    res = 0\n    for i in range(n-1):\n        if string[i] == '0':\n            cur_sum += 1\n        elif string[i] == '1':\n            cur_sum -= 1\n        if cur_sum > res:\n            res = cur_sum\n    return res\n\n\n# +", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(s, n):\n    \"\"\"\n    Finds the length of the longest string that is a sub-string of s of length n\n    \"\"\"\n    # find the number of '1'\n    one_count = s.count(\"1\")\n    # find the number of '0'\n    zero_count = s.count(\"0\")\n    longest_length = 0\n    \n    # iterate through the given sub-string\n    for i in range(n):\n        # find the longest possible string in the sub-string\n        longest_string = s[i:i+n]\n        # find the number of '1' in the longest string\n        longest_one_count = longest_string.count(\"1\")\n        # find the number of '0' in the longest string\n        longest_zero_count = longest_string.count(\"0\")\n        # check if longest string is a substring of '1'\n        if one_count == longest_one_count:\n            # check if longest string is a substring of '0'\n            if zero_count == longest_zero_count:\n                longest_length = n\n        # check if longest string is a substring of '0'\n        elif zero_count == longest_zero_count:\n            longest_length = n\n    # return the longest string\n    return longest_length\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\n#%%", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\nimport pytest\nfrom typing import Dict\n\n\ndef find_length(binary_str: str, size: int) -> int:\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    O(n) time, O(1) space.\n    >>> find_length(\"11000010001\", 11)\n    6\n    >>> find_length(\"10001000100010001000100010001000100010001000100010001000100010001000100010001000100010001\", 32)\n    1\n    >>> find_length(\"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary, n):\n    \"\"\"\n    input:\n        binary: a string of 1s and 0s\n        n: length of the substring\n    output:\n        max_difference: max difference in number of 0s and 1s in the sub-string\n    \"\"\"\n\n    # Base Case\n    if n <= 1:\n        return 0\n\n    # Recursive Case\n    max_0_1_count = 0\n    if binary[0] == '0':\n        max_0_1_count = 1\n\n    left_count = find_length(binary[1:], n - 1)\n    right_count = find_length(binary[1:], n - 1)\n\n    return max(max_0_1_count, left_count, right_count)\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, max_len):\n    result = 0\n    n = len(string)\n    zeros = string.count(\"0\")\n    for i in range(n):\n        zeros_in_prefix = string[:i].count(\"0\")\n        ones_in_prefix = string[:i].count(\"1\")\n        zeros_in_suffix = string[i + 1:].count(\"0\")\n        ones_in_suffix = string[i + 1:].count(\"1\")\n        zeros_in_substring = zeros_in_prefix + zeros + zeros_in_suffix\n        ones_in_substring = ones_in_prefix + ones_in_suffix\n        result = max(result, zeros_in_substring, ones_in_substring)\n    return result\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary, n):\n    # Write your code here.\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\nfrom functools import reduce\n\n\ndef find_length(string, length):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not string:\n        return 0\n\n    left_count = 0\n    right_count = 0\n\n    # While loop to count number of 0s and number of 1s\n    while length > 0:\n        if string[0] == \"0\":\n            left_count += 1\n        else:\n            right_count += 1\n\n        string = string[1:]\n        length -= 1\n\n    return max(left_count, right_count)\n\n\ndef find_length_optimized(string, length):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not string:\n        return 0\n\n    left_count = 0\n    right_count = 0\n\n    # If count is 0, then we can stop checking for 1s\n    while string[0] == \"0\" and length > 0:\n        left_count += 1\n        string = string[1:]\n        length -= 1\n\n    # Loop to count number of 1s\n    # If count is 0, then we can stop checking for 1s\n    while string[0] == \"1\" and length > 0:\n        right_count += 1\n        string = string[1:]\n        length -= 1\n\n    return max(left_count, right_count)\n\n\ndef find_length_fast(string, length):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return reduce(\n        lambda acc, x: acc + 1 if x == \"0\" else acc,\n        string[:length],\n        0,\n    )\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\nimport numpy as np\nfrom typing import List, Union\n\n# https://leetcode.com/problems/max-consecutive-ones-ii/discuss/35419/Java-O(n)-Time-O(1)-Space-Binary-Search-With-Explanation"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum(x,y):\n    l=max(x,y)\n    s=min(x,y)\n    a=[]\n    for i in range(2,l+1):\n        if(l%i==0):\n            if(s%i==0):\n                a.append(i)\n    return sum(a)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum(a,b):\n    return sum(x for x in range(1,min(a,b)+1) if a%x == 0 and b%x == 0)\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\nimport functools\n\n\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of integers a and b\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    \"\"\"\n    Returns the lowest common multiple of integers a and b\n    \"\"\"\n    return a * b // gcd(a, b)\n\n\ndef sum_of_divisors(a, b):\n    \"\"\"\n    Returns the sum of divisors of integers a and b\n    \"\"\"\n    if a >= b:\n        return sum(lcm(a, i) for i in range(1, b))\n    return sum(lcm(b, i) for i in range(1, a))\n\n\ndef sum_of_divisors_by_gcd(a, b):\n    \"\"\"\n    Returns the sum of divisors of integers a and b\n    \"\"\"\n    return functools.reduce(\n        gcd,\n        [gcd(a, b)] + [\n            lcm(a, x)\n            for x in range(1, b)\n            if gcd(a, x) == 1\n        ],\n        0\n    )\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\nfrom math import sqrt\n\ndef gcd(a, b):\n    '''\n    a, b: positive integers\n\n    returns: a positive integer, the greatest common divisor of a & b.\n    '''\n    # Your code here\n    min_number = min(a, b)\n    max_number = max(a, b)\n    \n    for divisor in range(1, int(sqrt(max_number))):\n        if max_number % divisor == 0:\n            if min_number % divisor == 0:\n                return divisor\n    \n    return max_number\n\ndef lcm(a, b):\n    '''\n    a, b: positive integers\n\n    returns: a positive integer, the lowest common multiple of a & b.\n    '''\n    # Your code here\n    return (a * b) / gcd(a, b)\n\ndef sum(a, b):\n    # Your code here\n    return lcm(a, b)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(a, b):\n    \"\"\"Finds the sum of common divisors of two numbers.\n\n    >>> sum_common_divisors(10, 15)\n    6\n    >>> sum_common_divisors(24, 36)\n    12\n    \"\"\"\n    return len(common_divisors(a, b))\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(num1, num2):\n    lcm_of_num1_and_num2 = num1 * num2 // gcd(num1, num2)\n    common_divisors = []\n    for i in range(1, int(lcm_of_num1_and_num2)):\n        if lcm_of_num1_and_num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef find_common_divisors(a,b):\n    a_set = set(get_factors(a))\n    b_set = set(get_factors(b))\n    return list(a_set & b_set)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum(num1, num2):\n    \"\"\"\n    Returns sum of common divisors of num1 and num2\n    \"\"\"\n    l1 = list(filter(lambda x: num1 % x == 0, range(1, num1)))\n    l2 = list(filter(lambda x: num2 % x == 0, range(1, num2)))\n    return sum(set(l1).intersection(l2))\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisor(number1, number2):\n    sum = 0\n    for i in range(1, min(number1, number2) + 1):\n        if (number1 % i == 0) and (number2 % i == 0):\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(n,m):\n    #TODO\n    return n*m\n    ", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    result = 0\n    while(y!=0):\n        result+=x\n        y-=1\n    return result\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(num1, num2):\n    # return num1 * num2\n    num3 = 0\n    while num2 != 0:\n        num3 += num1\n        num2 -= 1\n    return num3\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    z=0\n    for i in range(y):\n        z=z+x\n    return z", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    sum = 0\n    while(b>0):\n        sum += a\n        b -= 1\n    return sum\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x, y):\n    \"\"\"\n    x and y are positive integers.\n    returns the product of x and y\n    \"\"\"\n    if x == 0 or y == 0:\n        return 0\n    else:\n        res = y\n        i = 1\n        while i < x:\n            res = res + y\n            i += 1\n        return res\n\ndef test_multiply_int():\n    assert multiply_int(10,20)==200\n    assert multiply_int(2,3)==6\n    assert multiply_int(0,3)==0\n    assert multiply_int(3,0)==0\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(num1,num2):\n    result = 0\n    for i in range(num2):\n        result += num1\n    return result\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x,y):\n    return x*y\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n\treturn a*b\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    return int(x)*int(y)"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,l):\n    new_l = []\n    for i in l:\n        if len(i)>n:\n            new_l.append(i)\n    return new_l\n\n# print(long_words(3,\"python is a programming language\"))\n\n# Write a function to shortlist words that are shorter than n from a given list of words.", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\nfrom unittest import TestCase\n\ndef long_words(n,string):\n    arr=[]\n    for x in string.split():\n        if len(x) > n:\n            arr.append(x)\n    return arr\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    words=words.split()\n    long_words=[]\n    for word in words:\n        if len(word)>n:\n            long_words.append(word)\n    return long_words\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [i for i in words if len(i) > n]", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    #add your code here\n    result=[]\n    for i in words.split():\n        if len(i) >n:\n            result.append(i)\n    return result\n        \n\n#\n# Tests\n#\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n\treturn [x for x in words if len(x) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,s):\n    l = s.split()\n    return [x for x in l if len(x) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    word_lst = [word for word in words.split() if len(word) > n]\n    return word_lst\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\nfrom typing import List\n\n\ndef magic_square_test(square: List[List[int]]):\n    square_length = len(square)\n    if not square_length:\n        return False\n\n    sum_first_row = sum(square[0])\n    sum_last_row = sum(square[-1])\n    if sum_first_row != sum_last_row:\n        return False\n\n    for i in range(1, square_length-1):\n        sum_row = sum(square[i])\n        if sum_row != sum_first_row:\n            return False\n\n    for i in range(square_length):\n        sum_col = sum(square[j][i] for j in range(square_length))\n        if sum_col != sum_first_row:\n            return False\n\n    return True\n\n\ndef magic_square_test_2(square: List[List[int]]):\n    if len(square) < 3:\n        return False\n\n    # TODO: Complete this function\n    return True\n\n\ndef magic_square_test_3(square: List[List[int]]):\n    if len(square) < 3:\n        return False\n\n    # TODO: Complete this function\n    return True\n\n\ndef magic_square_test_4(square: List[List[int]]):\n    if len(square) < 3:\n        return False\n\n    # TODO: Complete this function\n    return True\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(grid):\n    # write your code here\n    sum_row = sum_col = sum_left_diag = sum_right_diag = 0\n    for row in grid:\n        sum_row += sum(row)\n    for i in range(len(grid)):\n        sum_col += grid[i][i]\n    for i in range(len(grid)):\n        sum_left_diag += grid[i][i]\n        sum_right_diag += grid[i][len(grid) - i - 1]\n    if sum_row == sum_col == sum_left_diag == sum_right_diag == sum_magic_square(len(grid)):\n        return True\n    return False\n\ndef sum_magic_square(n):\n    return n * (n ** 2 + 1) * (2 * n ** 2 + 1) // 6\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\nfrom typing import List\n\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    length = len(matrix)\n    if length != len(matrix[0]):\n        return False\n\n    for row_index, row in enumerate(matrix):\n        total = sum(row)\n        if total != length * (length * (length * (length + 1) // 2) // 12):\n            return False\n\n        for element in row:\n            if not 1 <= element <= length ** 2:\n                return False\n\n    for col_index in range(length):\n        total = 0\n        for row in matrix:\n            total += row[col_index]\n\n        if total != length * (length * (length * (length + 1) // 2) // 12):\n            return False\n\n    for row_index in range(length):\n        for col_index in range(length):\n            if row_index == col_index:\n                total = matrix[row_index][col_index]\n            elif row_index + col_index == length - 1:\n                total = matrix[row_index][col_index]\n            elif row_index + col_index == length - 2:\n                total = matrix[row_index][col_index]\n            else:\n                return False\n\n            if not 1 <= total <= length ** 2:\n                return False\n\n    return True\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(m):\n  pass\n\n\n# tests", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\nimport pytest\n\n\ndef magic_square_test(mat):\n    # Write your code here.\n    n = len(mat)\n    if n != len(mat[0]):\n        return False\n    # check whether this is a square matrix\n    for row in mat:\n        if len(row) != n:\n            return False\n    # check whether this is a magic square\n    for i in range(n):\n        if sum(row[i] for row in mat) != (n * (n * (n + 1) // 2)) // n:\n            return False\n        if sum(mat[i][j] for j in range(n)) != (n * (n * (n + 1) // 2)) // n:\n            return False\n    # check whether this is a legal magic square\n    for k in range(n):\n        for l in range(n):\n            for m in range(n):\n                if mat[k][l] + mat[m][k] + mat[l][m] != (n * (n * (n + 1) // 2)) // n:\n                    return False\n    return True\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    >>> magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    True\n    \"\"\"\n    # create a square list that is one larger than the input matrix\n    square = [\n        [0 for x in range(len(matrix[y]) + 1)]\n        for y in range(len(matrix) + 1)\n    ]\n\n    # initialize the square list to the input matrix\n    for y in range(len(matrix)):\n        for x in range(len(matrix[y])):\n            square[y][x] = matrix[y][x]\n\n    # test the square for magic squareness\n    # check the sums along the diagonal\n    for i in range(len(square)):\n        if sum(square[i]) != sum(square[i][::-1]):\n            return False\n\n    # check the sums of the columns\n    for i in range(len(square[0])):\n        column = [square[j][i] for j in range(len(square))]\n        if sum(column) != sum(column[::-1]):\n            return False\n\n    # check the sums of the 2 main diagonals\n    if sum([square[i][i] for i in range(len(square))]) != sum([square[i][::-1][i] for i in range(len(square))]):\n        return False\n\n    if sum([square[::-1][i][i] for i in range(len(square))]) != sum([square[::-1][i][::-1][i] for i in range(len(square))]):\n        return False\n\n    return True\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(square):\n    return is_square(square) and sum(sum(row) for row in square) == magic_sum(square)\n\ndef is_square(square):\n    rows, cols = len(square), len(square[0])\n    return rows == cols and len(set(sum(row) for row in square)) == 1\n\ndef magic_sum(square):\n    return sum(square[0])\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\nimport numpy as np\nfrom typing import List, Tuple\n\n\ndef magic_square_test(square: List[List[int]]) -> bool:\n    \"\"\"\n    \u7528\u4e8e\u68c0\u6d4b\u9b54\u65b9\u662f\u5426\u662f\u9b54\u65b9\uff08\u9012\u5f52\uff09\n\n    Args:\n        square: \u9b54\u65b9\u6570\u7ec4\uff0c\u5982[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n\n    Returns:\n        \u662f\u5426\u662f\u9b54\u65b9\n\n    \"\"\"\n    # \u9b54\u65b9\u7684\u8fb9\u957f\n    side_length = len(square)\n    # \u9b54\u65b9\u7684\u6570\u91cf\n    square_length = len(square[0])\n    if side_length != square_length:\n        return False\n    # \u884c\u548c\u5217\u7684\u5750\u6807\n    coordinates = [(row, col) for row in range(side_length) for col in range(side_length)]\n    # \u5148\u5224\u65ad\u6bcf\u4e2a\u884c\u3001\u5217\u3001\u5bf9\u89d2\u7ebf\u662f\u5426\u6709\u91cd\u590d\u6570\u5b57\n    for c1, c2 in zip(coordinates, coordinates[1:]):\n        if square[c1[0]][c1[1]] == square[c2[0]][c2[1]]:\n            return False\n        if c1[0] == c2[0] and c1[1] == c2[1]:\n            continue\n        if c1[0] + c1[1] == c2[0] + c2[1] and square[c1[0]][c1[1]] + square[c2[0]][c2[1]] == side_length * side_length:\n            continue\n        if c1[0] - c1[1] == c2[0] - c2[1] and square[c1[0]][c1[1]] + square[c2[0]][c2[1]] == side_length * side_length:\n            continue\n    # \u7136\u540e\u68c0\u67e5\u6b63\u65b9\u5f62"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    return max(set(lst), key=lst.count)\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(list_to_search):\n    \"\"\"\n    Returns the item with the maximum occurrences in a list and the number of times it occurs.\n    :param list_to_search: List to search through\n    :return: Tuple with the item and the number of occurrences.\n    \"\"\"\n    max = 0\n    max_index = 0\n    for item in list_to_search:\n        if list_to_search.count(item) > max:\n            max_index = list_to_search.index(item)\n            max = list_to_search.count(item)\n\n    return list_to_search[max_index], max\n\n\n# Demonstration", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(l):\n    \"\"\"\n        Return the item with max occurrences in the list.\n        Note: The function should return (item, count)\n        Eg: max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    \"\"\"\n    return max([(item, l.count(item)) for item in set(l)], key=lambda x: x[1])\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(list):\n    if len(list) == 1:\n        return list[0], 1\n    max_item = max_occurrences(list[1:])[0]\n    max_freq = max_occurrences(list[1:])[1]\n    if list[0] == max_item:\n        return list[0], max_freq + 1\n    else:\n        return max_item, max_freq\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\ndef max_occurrences(items: List[int]) -> List[int]:\n  occurences = Counter(items)\n  max_item = occurences.most_common(1)\n  return max_item[0][0], max_item[0][1]\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(nums):\n    d = {}\n    for n in nums:\n        if n in d.keys():\n            d[n] += 1\n        else:\n            d[n] = 1\n    max_key = max(d, key=d.get)\n    return max_key, d[max_key]\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\n# Solution :\n\ndef max_occurrences(lst):\n    max_num=lst[0]\n    max_count=0\n    for num in lst:\n        if lst.count(num)>max_count:\n            max_num=num\n            max_count=lst.count(num)\n    return max_num,max_count\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\nfrom collections import defaultdict\n\ndef max_occurrences(arr):\n    d = defaultdict(int)\n    for i in arr:\n        d[i] += 1\n    for i in arr:\n        if d[i] == max(d.values()):\n            return i, d[i]\n    ", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(L):\n    max_freq = max(L.count(i) for i in L)\n    return max_freq\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    dic = {}\n    for i in lst:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return max(dic.items(), key=lambda item: item[1])\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    j = len(s) - 1\n    for i, c in enumerate(s):\n        if c in vowels:\n            while j >= i and c != s[j]:\n                j -= 1\n            s[j], s[i] = s[i], s[j]\n            j -= 1\n    return ''.join(s)\n\ndef reverse_vowels2(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        while i < j and s[i] not in vowels:\n            i += 1\n        while i < j and s[j] not in vowels:\n            j -= 1\n        if i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\ndef reverse_vowels3(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        while i < j and s[i] not in vowels:\n            i += 1\n        while i < j and s[j] not in vowels:\n            j -= 1\n        if i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\ndef reverse_vowels4(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        while i < j and s[i] not in vowels:\n            i += 1\n        while i < j and s[j] not in vowels:\n            j -= 1\n        if i < j", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = list(s)\n    vowel_list = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    left, right = 0, len(s) - 1\n    while left < right:\n        while left < right and s[left] not in vowel_list:\n            left += 1\n        while left < right and s[right] not in vowel_list:\n            right -= 1\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n    return ''.join(s)\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\nfrom collections import Counter\n\nVOWELS = 'aeiouAEIOU'\n\ndef reverse_vowels(s: str) -> str:\n    \"\"\"\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"aiu\")\n    'uia'\n    \"\"\"\n    # make a list of vowels\n    # make a reverse iterator\n    # find first vowel\n    # compare with next vowel and switch if needed\n    vowels = [v for v in s if v in VOWELS]\n    vowels.reverse()\n\n    # Counter iterates over the list and \n    # returns a dict with elements as keys and their count as values\n    # sorted() accepts a key and sorts the list according to the values of the keys\n    # in the dict\n    # returns a list of tuples of the form (key, value)\n    vowels_counter = Counter(vowels).most_common()\n    # need to unpack the tuple to get the first element\n    vowels_sorted = sorted(vowels_counter, key=lambda x: x[1])\n    vowels_sorted.reverse()\n\n    # need to check if the element is a vowel\n    # then add it to the result\n    result = \"\"\n    for v in s:\n        if v in VOWELS:\n            result += vowels_sorted.pop()[0]\n        else:\n            result += v\n    return result\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    start, end = 0, len(s) - 1\n    while start < end:\n        if s[start] in vowels and s[end] in vowels:\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n        elif s[start] not in vowels:\n            start += 1\n        else:\n            end -= 1\n    return ''.join(s)\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\nimport string\n\ndef reverse_vowels(s):\n    vowels = list(string.ascii_lowercase)\n    for i in range(len(s)):\n        if s[i] in \"aeiouAEIOU\":\n            vowels.pop(vowels.index(s[i]))\n            vowels.append(s[i])\n    vowels.reverse()\n    return \"\".join(vowels)\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n# def reverse_vowels(s: str) -> str:\n#     vowels = 'aeiouAEIOU'\n#     return s.translate(str.maketrans(vowels, vowels[::-1]))\n\n\ndef reverse_vowels(s: str) -> str:\n    vowels = 'aeiou'\n    res = ''\n    for char in s:\n        if char in vowels:\n            res += char\n    for char in s:\n        if char not in vowels:\n            res += char\n    return res\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if text:\n        vowel_indices = [i for i in range(len(text)) if text[i] in vowels]\n        vowels_reversed = vowel_indices[::-1]\n        print(vowel_indices, vowels_reversed)\n        for i, j in zip(vowel_indices, vowels_reversed):\n            text = text[:i] + text[i+1:j+1][::-1] + text[j+1:]\n            print(text)\n        return text\n    return ''\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    vowels = [i for i in s if i in ['a', 'e', 'i', 'o', 'u']]\n    vowels.reverse()\n    i = 0\n    for j in vowels:\n        s = s[:i] + j + s[i+1:]\n        i += 2\n    return s\n\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n# write your function here\ndef tup_string(tup):\n\treturn \"\".join(tup)\n\n# write your code here", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    s=''\n    for ch in tup:\n        s += ch\n    return s\n\ntup=(\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\")", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    str = \"\"\n    for i in tup:\n        str += i\n    return str\n\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    ans=\"\"\n    for i in tup:\n        ans+=i\n    return ans", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n\treturn ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    new_str=\"\"\n    for i in tup:\n        new_str=new_str+i\n    return new_str\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n  new_tup = ()\n  for i in tup:\n    new_tup += i,\n  return new_tup\n\ndef string_tup(string):\n  return string.split()\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    str = ''\n    for i in tup:\n        str = str + i\n    return str\n\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# %%", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# answer: \nsum_negativenum = lambda lst:sum(lst) if lst else 0", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    return reduce(lambda x, y: x + y, [n for n in nums if n < 0])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n#Using lambda\ndef sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n#Using map\ndef sum_negativenum(numbers):\n    return sum(map(lambda x: x if x > 0 else 0, numbers))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(list):\n    return sum([x for x in list if x<0])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(l):\n    return sum(list(filter(lambda x: x < 0, l)))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(my_list):\n    return sum(list(filter(lambda x: x < 0, my_list)))\n    "], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(array,p,q):\n    if(p % 2 == 0 and q % 2 == 0):\n        return \"ODD\"\n    else:\n        return \"EVEN\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\nfrom random import randint\nimport timeit\n\ndef check_last(numbers, p, operation):\n    \"\"\"Function to check if last element is even or odd.\"\"\"\n    if operation == 1:\n        return 'ODD' if numbers[-1] % 2 else 'EVEN'\n    for _ in range(p):\n        numbers = perform_operation(numbers, operation)\n    return 'ODD' if numbers[-1] % 2 else 'EVEN'\n\n\ndef perform_operation(numbers, operation):\n    \"\"\"Perform operation on number.\"\"\"\n    if operation == 1:\n        numbers[-1] += 1\n    if operation == 2:\n        numbers[-1] *= 2\n    if operation == 3:\n        numbers[-1] -= 1\n    if operation == 4:\n        numbers.append(randint(1, 100))\n    return numbers\n\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,n):\n    #Write your code here\n    if len(arr) == 0:\n        return None\n    if p == 0:\n        return \"ODD\" if arr[-1] % 2 == 1 else \"EVEN\"\n    else:\n        if arr[-1] % 2 == 0:\n            return check_last(arr[:-1],p-1,n+1)\n        else:\n            return \"ODD\" if n == 0 else \"EVEN\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,q):\n    arr = arr[::-1]\n    for i in range(p):\n        for j in range(q):\n            arr.insert(0,arr.pop())\n    return \"ODD\" if arr[0]%2==1 else \"EVEN\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    if p%2 == 0:\n        return \"EVEN\" if arr[-1]%2==0 else \"ODD\"\n    else:\n        return \"ODD\" if arr[-1]%2==1 else \"EVEN\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,n):\n    arr.append(n)\n    for _ in range(p):\n        arr = arr[-1:] + arr[:-1]\n    return \"ODD\" if arr[-1]%2 == 1 else \"EVEN\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,q):\n    if p==q:\n        return \"ODD\"\n    elif p<q:\n        for i in range(q):\n            arr = arr[p:]\n        return \"ODD\" if arr[-1]%2 else \"EVEN\"\n    else:\n        return \"ODD\" if arr[0]%2 else \"EVEN\"\n\n# print(check_last([5,7,10],3,1))\n# print(check_last([5,7,10],2,1))\n# print(check_last([5,7,10],3,3))\n# print(check_last([5,7,10],2,3))\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    count = 0\n    while(count<p):\n        arr.append(arr[0])\n        arr.pop(0)\n        count += 1\n    \n    print(arr[len(arr)-1])\n    \n    if(arr[len(arr)-1]%2 == 0):\n        return \"ODD\"\n    else:\n        return \"EVEN\"\n\n\ncheck_last([1,2,3,4],2,1)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n*(2*n - 1)\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n * (2 * n - 1)", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nimport math\n\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n\ndef test_hexagonal_num():\n    print(hexagonal_num(10))\n    assert hexagonal_num(10) == 190\n    assert hexagonal_num(10) == 190\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n\n#print hexagonal_num(10)", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\n# sum of n+1th hexagonal number and nth hexagonal number\n# is equal to (2n+1) * n (multiples of n+1, n)\n\ndef hexagonal_num(n):\n    return int((2 * n + 1) * n)\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nfrom math import sqrt, floor\n\ndef hexagonal_num(n):\n    return floor(sqrt(2*n*(2*n-1)))\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n*(2*n-1)\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    num = n * 2 - 1\n    return num * (num + 1) // 2\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return  n * (2 * n - 1)\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return int((n*(2*n-1))//2)\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(usage):\n    # \u5957\u9910\u4e00\uff1a 20\u5143/\u5ea6\n    # \u5957\u9910\u4e8c\uff1a 25\u5143/\u5ea6\n    # \u5957\u9910\u4e09\uff1a 30\u5143/\u5ea6\n    # \u5957\u9910\u56db\uff1a 40\u5143/\u5ea6\n    # \u5957\u9910\u4e94\uff1a 50\u5143/\u5ea6\n    # \u5957\u9910\u516d\uff1a 70\u5143/\u5ea6\n    # \u5957\u9910\u4e03\uff1a 100\u5143/\u5ea6\n    if usage <= 75:\n        return 20*usage\n    elif usage <= 150:\n        return 25*usage\n    elif usage <= 225:\n        return 30*usage\n    elif usage <= 300:\n        return 40*usage\n    elif usage <= 375:\n        return 50*usage\n    elif usage <= 450:\n        return 70*usage\n    elif usage > 450:\n        return 100*usage\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(electricity, rate):\n    return electricity * rate\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    return kwh*0.206\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kWh):\n    rate=0.167 #per kWh\n    return kWh*rate\n\n#assert cal_electbill(75)==246.25\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\nimport math\ndef cal_electbill(energy_usage):\n    return energy_usage * 2.3125\n\n#test", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(data):\n    return data * 0.12 + data * 0.14 + 137.71\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    if kwh > 200:\n        return (kwh - 200) * 0.16 + 200 * 0.20\n    else:\n        return kwh * 0.20\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    if kwh>400:\n        electricity_bill=400*2.5 + (kwh-400)*5\n    else:\n        electricity_bill=kwh*2.5\n    return electricity_bill\n\n# test code", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n#%%\n\ndef cal_electbill(miles):\n    return miles * 0.125 + 7.5\n\n#%%\ndef cal_waterbill(gallons):\n    return gallons * 0.0625 + 3.75\n\n#%%\ndef cal_gasbill(liters):\n    return liters * 0.029 + 3\n\n#%%\ndef cal_hotelbill(days):\n    return days * 50 + 40\n\n#%%\ndef cal_carbill(miles):\n    return miles * 0.1 + 5\n\n#%%\ndef cal_bill(miles, gallons, liters, days):\n    return cal_electbill(miles) + cal_waterbill(gallons) + cal_gasbill(liters) + cal_hotelbill(days) + cal_carbill(miles)\n\n#%%\ncal_bill(75, 400, 100, 7)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 420, 120, 11)\n\n#%%\ncal_bill(85, 4"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(x):\n    count = 0\n    for num in x:\n        if num == 0:\n            count += 1\n    return count / len(x)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    zeroes = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeroes += 1\n        if arr[i] == -1 or arr[i] == 1 or arr[i] == 2:\n            count += 1\n    return float(zeroes)/count\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\nfrom typing import List\n\n\ndef zero_count(arr: List[int]) -> float:\n    \"\"\"\n    The idea is to count the number of zeros and divide by length of arr.\n    \"\"\"\n    zeros = sum(map(lambda x: x == 0, arr))\n    return zeros / len(arr)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(nums):\n    zeroes=sum(i==0 for i in nums)\n    return zeroes/len(nums)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(num_list):\n    total_zero_count = 0\n    for x in num_list:\n        if x == 0:\n            total_zero_count += 1\n    return total_zero_count/len(num_list)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    \"\"\"\n    Runtime: O(n)\n    \"\"\"\n    zeroes = 0\n    for a in arr:\n        if a==0:\n            zeroes += 1\n    return zeroes/len(arr)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(array):\n    \"\"\"returns the ratio of zeroes in a list\"\"\"\n    count = 0\n    for i in array:\n        if i == 0:\n            count += 1\n    return count / len(array)\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    count_0 = 0\n    count_non_0 = 0\n    for i in arr:\n        if i==0:\n            count_0 += 1\n        else:\n            count_non_0 += 1\n    return count_0/count_non_0\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    zero_count = 0\n    for i in arr:\n        if i==0:\n            zero_count+=1\n    return zero_count/len(arr)"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    #Your code goes here.\n    i = 0\n    sum = 0\n    while i<31:\n        sum = sum+pow(2,i)\n        i = i+1\n    return n == sum\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    return True if n & (n - 1) == 0 else False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    pass", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\nfrom math import log2, ceil\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    return is_Sum_Of_Powers_Of_Two_Rec(num, 1)\n\ndef is_Sum_Of_Powers_Of_Two_Rec(num, i):\n    if i > ceil(log2(num)):\n        return False\n    if num == 0:\n        return True\n    if (num & 1) == 0:\n        return is_Sum_Of_Powers_Of_Two_Rec(num >> 1, i+1)\n    return is_Sum_Of_Powers_Of_Two_Rec(num - 1, i)\n\ndef is_Sum_Of_Powers_Of_Two_DP(num):\n    if num == 0:\n        return True\n    dp = [False] * num + [True]\n    for i in range(2, num):\n        if i == 1:\n            dp[i] = True\n        elif (i & 1) == 0:\n            dp[i] = dp[i >> 1]\n        else:\n            dp[i] = dp[i - 1]\n    return dp[num]\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(number):\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n# Solution 2 - Using the Strategy Pattern\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2*3.14*radius\n\n#assert circle_circumference(10)==62.830000000000005\n\n#The Python documentation for the math library includes a description of the constants in the module.\n\n\n#Define a function to calculate the area of a circle", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\n# SOLUTION:\n# import math module\nimport math\n\ndef circle_circumference(r):\n    \"\"\"\n    Return the circumference of the circle with the radius r.\n    \"\"\"\n    return 2*math.pi*r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return radius * math.pi * 2\n\n\ndef main():\n    assert circle_circumference(10) == 62.830000000000005\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\ndef circle_circumference(radius):\n\treturn 2*math.pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(r):\n    return 2*pi*r\n\n# test your function", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\n# +\nfrom math import pi\ndef circle_circumference(radius):\n    return 2*pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2*3.141592653589793*radius", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(lst):\n    return [num for tup in lst for num in tup if lst.count(num) == 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\nimport collections\n\n\ndef extract_singly(a_tuple_list):\n    return [item for sub_tuple in a_tuple_list for item in sub_tuple\n            if sub_tuple.count(item) == 1]\n\n\ndef test_extract_singly():\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuple_list):\n    singly_list = []\n    for tup in tuple_list:\n        for ele in tup:\n            if tup.count(ele) == 1:\n                singly_list.append(ele)\n    return singly_list\n\n\n# Tests", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuples):\n    return set(itertools.chain(*tuples)) - set(itertools.chain.from_iterable(tuples))\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nimport unittest\n\n\ndef extract_singly(tuples):\n    \"\"\"\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [3, 4, 5, 7, 1]\n    \"\"\"\n    return [x for sublist in tuples for x in sublist if tuples.count(x) == 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom collections import Counter\n\ndef extract_singly(tuples):\n    result = []\n    count = Counter()\n    for i in tuples:\n        for j in i:\n            count[j] += 1\n    for k in count:\n        if count[k] == 1:\n            result.append(k)\n    return result\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuple_list):\n    singly = []\n    for tup in tuple_list:\n        for elem in tup:\n            if tup.count(elem) == 1:\n                singly.append(elem)\n    return singly\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List\n\ndef extract_singly(tuples: List[tuple]):\n    result = []\n    for tup in tuples:\n        if tup.count(tup[0]) == 1:\n            result.append(tup[0])\n    return result\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuples):\n    singly_occurence = []\n    for tuple in tuples:\n        for element in tuple:\n            if tuple.count(element) == 1:\n                singly_occurence.append(element)\n    return singly_occurence\n\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\nfrom typing import List\n\n\ndef pancake_sort(numbers: List[int]) -> List[int]:\n    # TODO: Write your solution here\n    for number_size in reversed(range(len(numbers))):\n        max_index = numbers.index(max(numbers[:number_size + 1]))\n\n        if max_index != number_size:\n            numbers = numbers[:max_index + 1] + reversed(numbers[max_index + 1 :]) + numbers[max_index:]\n\n    return numbers\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    \"\"\"\n    :param: arr - list of elements\n    TODO - You have to write your code here\n    \"\"\"\n    # TODO: Write your code here\n    max_index = len(arr) - 1\n    while max_index > 0:\n        max_num = max(arr[:max_index + 1])\n        max_index = arr.index(max_num)\n        if max_num != max_index + 1:\n            arr = flip(arr, max_index)\n            arr = flip(arr, max_index + 1)\n        max_index -= 1\n\n    return arr\n\ndef flip(arr, index):\n    \"\"\"\n    :param: arr - list of elements\n            index - index of the element to flip\n    TODO - You have to write your code here\n    \"\"\"\n    # TODO: Write your code here\n    l, r = 0, index\n    while l < r:\n        arr[l], arr[r] = arr[r], arr[l]\n        l += 1\n        r -= 1\n\n    return arr", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(nums):\n    \"\"\"\n    Doubling the length of the array increases the likelihood of finding the largest value, \n    which is why we want to start with the largest value at the end of the array.\n    \"\"\"\n    for size in range(len(nums), 1, -1):\n        for i in range(size - 1, -1, -1):\n            if i == size - 1:\n                \"\"\"\n                We can use the same approach we used in Bubble Sort to check if an element \n                is in the correct position. If an element is already in the correct position, \n                then we won't need to do anything. If the element is in the wrong position, \n                then we'll flip it until it's in the correct position.\n                \"\"\"\n                if nums[i] == size:\n                    pass\n                else:\n                    flip(i, size - 1, nums)\n            elif i == size - 2:\n                if nums[i] == size and nums[i + 1] == size - 1:\n                    pass\n                else:\n                    flip(i, size - 1, nums)\n                    flip(i, size - 2, nums)\n            else:\n                if nums[i] == size and nums[i + 1] == size - 1 and nums[i + 2] == size - 2:\n                    pass\n                else:\n                    flip(i, size - 1, nums)\n                    flip(i, size - 2, nums)\n                    flip(i, size - 3, nums)\n\ndef flip(first_idx, second_idx, nums):\n    \"\"\"\n    We'll use a helper function to flip elements. The first index is the index of the element \n    we want to flip. The second index is the index of the element we want to compare to.\n    \"\"\"\n    for j in range(first_idx, second_idx + 1):\n        nums[first_idx], nums[second_idx - j + first_idx] = nums[second_idx - j + first_idx], nums[first_idx", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(input_list):\n    for size in reversed(range(1, len(input_list))):\n        if input_list[-size] > input_list[-1]:\n            pancake(input_list, size)\n\n    return input_list\n\ndef pancake(input_list, size):\n    start = len(input_list) - size\n    for index in reversed(range(start)):\n        swap(input_list, index, index + 1)\n\ndef swap(input_list, index1, index2):\n    temp = input_list[index1]\n    input_list[index1] = input_list[index2]\n    input_list[index2] = temp\n\n\n# TEST CASES\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    max_ind = arr.index(max(arr))\n    last_ind = len(arr) - 1\n\n    while max_ind != last_ind:\n        max_ind = arr.index(max(arr))\n        last_ind = len(arr) - 1\n        if max_ind != last_ind:\n            flip(arr, max_ind, last_ind)\n            flip(arr, 0, last_ind)\n            last_ind -= 1\n    return arr\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef flip(arr, index):\n    \"\"\"\n    In-place flip function.\n    \"\"\"\n    start = 0\n    while start <= index:\n        arr[start], arr[index] = arr[index], arr[start]\n        start += 1\n        index -= 1\n\ndef pancake_sort(arr):\n    \"\"\"\n    Main sorting function.\n    \"\"\"\n    # copy arr into a working copy.\n    arr_working = arr[:]\n\n    # sort the working copy of arr.\n    for size in reversed(range(1, len(arr))):\n        # find the maximum value in the working copy.\n        max_value = max(arr_working[0:size])\n\n        # find where the maximum value was found.\n        index_max_value = arr_working.index(max_value)\n\n        # If we found the maximum value in this position,\n        # then there's nothing to do.\n        if index_max_value == size - 1:\n            continue\n\n        # Otherwise, flip the elements on the left and right\n        # of the index of the max value.\n        flip(arr_working, index_max_value)\n        flip(arr_working, size - 1)\n\n    return arr_working\n\ndef main():\n    \"\"\"\n    Run tests.\n    \"\"\"\n    # Test Case 1\n    arr1 = [15, 79, 25, 38, 69]\n    arr2 = pancake_sort(arr1)\n    expected_arr2 = [15, 25, 38, 69, 79]\n    assert arr2 == expected_arr2\n\n    # Test Case 2\n    arr1 = [15, 79, 25, 38, 69, 15, 25, 38, 69, 15, 25, 38, 69]\n    arr2 = pancake_sort(arr1)\n    expected_arr2 = [15, 15, 15, ", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nfrom typing import List\n\n\ndef pancake_sort(arr: List[int]) -> List[int]:\n    for i in reversed(range(len(arr))):\n        target_idx = arr.index(max(arr))\n        if target_idx != i:\n            arr = flip(arr, target_idx)\n            arr = flip(arr, i)\n    return arr\n\n\ndef flip(arr: List[int], idx: int) -> List[int]:\n    return arr[:idx] + arr[-idx - 1 : -1] + arr[idx + 1 :]\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nfrom typing import List\n\n\ndef pancake_sort(arr: List[int]) -> List[int]:\n    l = len(arr)\n    for i in range(l, 0, -1):\n        # find index of element which is at the maximum index\n        max_idx = arr.index(max(arr[0:i]))\n        if max_idx != i - 1:\n            # flip the maximum element to the end\n            arr = flip(arr, max_idx)\n            # flip the first element to the end\n            arr = flip(arr, 0)\n    return arr\n\n\ndef flip(arr: List[int], idx: int) -> List[int]:\n    start = 0\n    while start < idx:\n        arr[start], arr[idx] = arr[idx], arr[start]\n        start += 1\n        idx -= 1\n    return arr\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\nimport unittest\n\ndef pancake_sort(arr):\n    def flip(arr, i):\n        arr[0], arr[-i] = arr[-i], arr[0]\n        arr[1:-i] = arr[:-2:-1]\n\n    for i in range(len(arr) // 2 + 1):\n        m = arr.index(max(arr))\n        if m != i:\n            flip(arr, m)\n            flip(arr, i)\n\n    return arr\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(lst1,lst2,lst3):\n    count=0\n    for i in lst1:\n        if i in lst2 and i in lst3:\n            count=count+1\n    return count\n\nlst1=[1,2,3,4,5,6,7,8]\nlst2=[2,2,3,1,2,6,7,9]\nlst3=[2,1,3,1,2,6,7,9]", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    return len(set([tuple(sorted((x,y))) for x in list1 for y in list2 if x==y]))\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(ls1,ls2,ls3):\n    count=0\n    for x in ls1:\n        if x in ls2 and x in ls3:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(lst1,lst2,lst3):\n    count = 0\n    for i in lst1:\n        if i in lst2 and i in lst3:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count=0\n    for item1 in list1:\n        for item2 in list2:\n            if item1==item2:\n                count=count+1\n                break\n    for item3 in list3:\n        if item3 in list1:\n            count=count+1\n    return count\n    ", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(a,b,c):\n    a=set(a)\n    b=set(b)\n    c=set(c)\n    return len(a&b&c)", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\n# Write your solution here\ndef count_samepair(l1, l2, l3):\n    count = 0\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if(l1[i] == l2[j] and l1[i] == l3[j]):\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n  count = 0\n  for item in list1:\n    if item in list2:\n      count += 1\n    if item in list3:\n      count += 1\n  return count\n\n\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(lists):\n  count = 0\n  for i in lists:\n    if isinstance(i, list):\n      count += 1\n  return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    return len([i for i in t if type(i) is list])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\nfrom typing import List\n\ndef find_lists(t: tuple):\n    count = 0\n    for i in t:\n        if type(i) == list:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuples):\n    return sum(isinstance(tup, list) for tup in tuples)\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple_list):\n    return sum([1 if isinstance(l, list) else 0 for l in tuple_list])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\nfrom typing import Iterable\n\n\ndef find_lists(items: Iterable[Iterable[int]]) -> int:\n    return sum(1 for item in items if isinstance(item, list))\n\n\ndef test_find_lists() -> None:\n    assert find_lists(([\"a\", 3], 1, [3, 4])) == 2\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom typing import Tuple\n\n\ndef find_lists(lists: Tuple[list, list, ...]) -> int:\n    # YOUR CODE HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom collections.abc import Iterable\nfrom functools import reduce\n\ndef find_lists(tuple_of_lists):\n    \"\"\"\n    :param tuple_of_lists: tuple of lists of any length\n    :return: number of lists present in the tuple\n    \"\"\"\n    # Write your code here\n    return reduce(lambda x, y: x+y, map(lambda x: isinstance(x, list), tuple_of_lists))\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\n# ANSWER\n\ndef find_lists(lists):\n    return sum([isinstance(x, list) for x in lists])\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum + abs(arr[i] - arr[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,num):\n    num_pairs = num//2\n    for i in range(num_pairs):\n        arr.remove(max(arr))\n        arr.remove(min(arr))\n    return sum(arr)\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr, n):\n    # Code here\n    arr_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            arr_sum += abs(arr[i] - arr[j])\n    return arr_sum\n\n#Driver code\narr= [1,8,9,15,16]", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    sum_Pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum_Pairs = sum_Pairs + abs(arr[i]-arr[j])\n    return sum_Pairs\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr, n):\n    \"\"\"\n    Time Complexity - O(N)\n    Space Complexity - O(N)\n    \"\"\"\n    return sum([abs(x-y) for x in arr for y in arr])", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(nums,n):\n    #print(nums,n)\n    if(n>len(nums)):\n        return 0\n    summ = 0\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if(nums[i]!=nums[j]):\n                summ = summ + abs(nums[i]-nums[j])\n    return summ\n\nsum_Pairs([1,8,9,15,16],5)\n# -\n\n# ### Given an unsorted array, find the maximum difference between the elements of the array.\n\n# +", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(array, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += abs(array[i] - array[j])\n\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(a,size):\n    sum = 0\n    for i in range(size):\n        for j in range(i+1,size):\n            sum += abs(a[i]-a[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            count = count + abs(arr[i] - arr[j])\n    return count\n\ndef main():\n    arr = [1,8,9,15,16]\n    n = len(arr)\n    print(\"Sum of absolute difference in all pairs is\",\n          sum_Pairs(arr, n))\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(array,length):\n    max_diff = 0\n    for i in range(length):\n        for j in range(length):\n            if (abs(array[i]-array[j])>max_diff):\n                max_diff = abs(array[i]-array[j])\n    return max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: length of the array\n    :return: return the maximum difference between any two elements in a given array\n    \"\"\"\n    arr.sort()\n    max_Diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        max_Diff = max(max_Diff, arr[i+1] - arr[i])\n    return max_Diff\n\n\n# -\n\n# ### Q19 - Longest Increasing Subsequence (LIS)\n#\n# Given an array of integers, find the length of longest increasing subsequence. The subsequence does not necessarily have to be contiguous.\n#\n# ```python\n# >>> max_Inc_Subseq([3,10,2,1,20])\n# 4\n# ```\n\n# +", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(array,n):\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            diff = abs(array[i]-array[j])\n            max_diff = max(max_diff,diff)\n    return max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(a, n):\n    a.sort()\n    max_dif = 0\n    for i in range(n-1):\n        max_dif = max(max_dif, a[i+1] - a[i])\n    return max_dif\n    ", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\nfrom typing import List\n\ndef max_Abs_Diff(nums: List[int], n: int) -> int:\n    nums = set(nums)\n    nums_sorted = sorted(nums)\n\n    result = nums_sorted[-1] - nums_sorted[0]\n    for i in range(1, n):\n        new_result = nums_sorted[-1] - nums_sorted[i]\n        if new_result > result:\n            result = new_result\n\n    return result\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr, n):\n\t'''\n\tTime complexity: O(n)\n\tSpace complexity: O(1)\n\t'''\n\tarr.sort()\n\tdiff = 0\n\tfor i in range(1,n):\n\t\tif arr[i] - arr[i-1] > diff:\n\t\t\tdiff = arr[i] - arr[i-1]\n\treturn diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n\t# Your code here\n\tm = max(arr)\n\tl = min(arr)\n\ta = m - l\n\tif a < n:\n\t\treturn n\n\treturn a\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(A, B):\n    max_val = max(max(A), max(B))\n    min_val = min(min(A), min(B))\n    return max(max_val - min_val, min_val - max_val)\n\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    return sum(ord(c) for c in s)\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    val=0\n    for letter in string:\n        val=val+ord(letter)\n    return val\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(str):\n    return sum([ord(c) for c in str])\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(str1):\n    return sum(ord(char) for char in str1)\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(str1):\n    sum = 0\n    for i in range(len(str1)):\n        sum+=ord(str1[i])\n    return sum", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(st):\n    return sum(map(ord,list(st)))\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\n#%%\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    total = 0\n    for char in string:\n        total += ord(char)\n    return total\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(str1):\n    return sum([ord(c) for c in str1])\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(str_in):\n    return sum(ord(x) for x in str_in)\n\ndef test_ascii_value_string():\n    assert ascii_value_string(\"python\")==112\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, x, y):\n    if x == 0 and y == 0:\n        return triangle[0][0]\n    elif x == 0:\n        return triangle[y-1][y] + max_path_sum(triangle, x, y-1)\n    elif y == 0:\n        return triangle[x-1][y] + max_path_sum(triangle, x-1, y)\n    else:\n        return triangle[x-1][y] + max(max_path_sum(triangle, x-1, y), max_path_sum(triangle, x, y-1))\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row, col):\n    # base case\n    if row == 0:\n        return triangle[row][col]\n    if triangle[row][col] == 0:\n        triangle[row][col] = max(max_path_sum(triangle, row-1, col), \n                          max_path_sum(triangle, row-1, col-1))\n    return triangle[row][col]\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nimport numpy as np\n\n\ndef max_path_sum(triangle, row, col):\n    \"\"\"\n    Returns the max total path sum for the given triangle\n    \"\"\"\n    triangle = np.array(triangle)\n    triangle = triangle.astype(int)\n    m = triangle.shape[0]\n    if row > m - 1:\n        return triangle[-1, -1]\n    if col == 0:\n        return max_path_sum(triangle, row, 1)\n    if col == row:\n        return triangle[row, col]\n    return triangle[row, col] + max(max_path_sum(triangle, row+1, col), max_path_sum(triangle, row+1, col-1))\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nimport numpy as np\n\ndef max_path_sum(triangle, i, j):\n    if i == len(triangle) - 1:\n        return triangle[i][j]\n\n    max_sum = triangle[i][j]\n    left = max_path_sum(triangle, i + 1, j)\n    right = max_path_sum(triangle, i + 1, j + 1)\n    max_sum = max(max_sum, left, right)\n\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\nfrom typing import List, Tuple\n\ndef max_path_sum(triangle: List[List[int]], row: int, col: int) -> int:\n    if row == len(triangle) - 1:\n        return triangle[row][col]\n    elif col == 0:\n        return max(max_path_sum(triangle, row + 1, col), max_path_sum(triangle, row + 1, col + 1))\n    else:\n        return triangle[row][col] + max(max_path_sum(triangle, row + 1, col), max_path_sum(triangle, row + 1, col + 1))\n\ndef max_path_sum_v2(triangle: List[List[int]]) -> int:\n    last_row = len(triangle) - 1\n\n    for row in range(last_row, -1, -1):\n        for col in range(0, row + 1):\n            if row == last_row:\n                triangle[row][col] = triangle[row][col]\n            else:\n                triangle[row][col] = triangle[row][col] + max(triangle[row + 1][col], triangle[row + 1][col + 1])\n    return triangle[0][0]\n\ndef max_path_sum_v3(triangle: List[List[int]]) -> int:\n    for row in range(len(triangle) - 2, -1, -1):\n        for col in range(0, row + 1):\n            triangle[row][col] += max(triangle[row + 1][col], triangle[row + 1][col + 1])\n    return triangle[0][0]\n\ndef max_path_sum_v4(triangle: List[List[int]]) -> int:\n    for row in range(len(triangle) - 2, -1, -1):\n        for col in range(0, row + 1):\n            triangle[row][col] += max(triangle[row + 1", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom typing import List\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n\n@dataclass", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom typing import List\n\ndef max_path_sum(triangle: List[List[int]], max_i: int, max_j: int) -> int:\n    \"\"\"\n    Time complexity: O(N^2)\n    Space complexity: O(N^2)\n    \"\"\"\n    # We need to have triangle_sums which will store sums of each node and its children\n    triangle_sums = [[0 for _ in range(len(row))] for row in triangle]\n    triangle_sums[0][0] = triangle[0][0]\n    for i in range(1, len(triangle)):\n        for j in range(len(triangle[i])):\n            if j == 0:\n                # 1st col, just take the sum of the left + current value\n                triangle_sums[i][j] = triangle_sums[i - 1][j] + triangle[i][j]\n            elif j == i:\n                # Last col, just take the sum of the top + current value\n                triangle_sums[i][j] = triangle_sums[i - 1][j - 1] + triangle[i][j]\n            else:\n                # For all other cols, just take the max of the left, top and top-left + current value\n                triangle_sums[i][j] = max(triangle_sums[i - 1][j], triangle_sums[i - 1][j - 1]) + triangle[i][j]\n    max_sum = triangle_sums[max_i][max_j]\n    # Now need to find the max path from bottom to the top\n    # We can do this with the help of dynamic programming\n    # We need to have the same size of triangle_sums but we will be only filling from bottom to top\n    # That means that all elements of the new triangle will be filled by the max sums\n    # We will use this new triangle to compute the max path\n    dp_triangle_sums = [[0 for _ in range(len(row))] for row in triangle]\n    # We need to start from the last element which is the", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom typing import List, Tuple\n\nimport pytest\n\n\ndef max_path_sum(triangle: List[List[int]], n: int, m: int) -> int:\n    \"\"\"\n    The maximum path sum is the maximum of the two values in the top row and the\n    values in the previous row.\n    >>> max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n    14\n    >>> max_path_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3, 2)\n    20\n    >>> max_path_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3, 2) == 20\n    True\n    \"\"\"\n\n    # Get the top two values.\n    top_two: Tuple[int, int] = (triangle[n - 1][m - 1], triangle[n - 1][m])\n\n    # Get the max value from the previous row.\n    previous: int = triangle[n - 2][m - 1]\n\n    # Return the max of the two values.\n    return max(top_two[0] + previous, top_two[1])\n\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    l = [int(i) for i in str(n)]\n    res = max(l[::2])+max(l[1::2])\n    return res", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\nfrom typing import Tuple\n\n\ndef sum_digits_twoparts(num: int) -> Tuple[int, int]:\n    sum_num = 0\n    for i in str(num):\n        sum_num += int(i)\n\n    maximum = num\n    maximum_parts = (num // 10, num % 10)\n\n    for i in range(1, 10):\n        for j in range(0, 10):\n            if i + j > maximum:\n                break\n\n            else:\n                two_parts_sum = i + j\n\n                if two_parts_sum == sum_num:\n                    if i + j > maximum:\n                        maximum = i + j\n                        maximum_parts = (i, j)\n                    elif i + j == maximum:\n                        if maximum_parts[1] > j:\n                            maximum = i + j\n                            maximum_parts = (i, j)\n\n    return maximum_parts\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\nfrom typing import Tuple\n\ndef sum_digits_twoparts(number: int) -> Tuple[int, int]:\n    \"\"\"Find two numbers that sum of digits is max of the given number.\"\"\"\n\n    if number == 1:\n        return 0, 1\n    elif number == 2:\n        return 1, 1\n\n    res = []\n    for i in range(1, number // 2 + 1):\n        if number % i == 0:\n            res.append(i)\n\n    digits = [int(i) for i in str(number)]\n    sum_digits = sum(digits)\n\n    res = list(filter(lambda x: sum(str(x)) == sum_digits, res))\n\n    if len(res) == 0:\n        return 0, 0\n    elif len(res) == 1:\n        return res[0], number // res[0]\n    else:\n        return max(res), number // max(res)\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    max_a = num\n    max_b = 0\n    for a in range(num // 2 + 1):\n        for b in range(num // 2 + 1):\n            if a != b and sum(int(i) for i in str(a)) + sum(int(i) for i in str(b)) == max_a:\n                max_a = a\n                max_b = b\n    return max_a * max_b\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    max_value = n % 10\n    second_max_value = n % 10\n    value_remainder = n//10\n    while value_remainder > 0:\n        remainder = value_remainder % 10\n        if remainder > second_max_value:\n            second_max_value = remainder\n        if remainder > max_value:\n            max_value = remainder\n        value_remainder = value_remainder//10\n    return second_max_value+max_value\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = sum_digits_twoparts(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nn = int(input())\nsum_1 = sum_digits_twoparts(n)\n\ntest_case_1 = [n, sum_1]\ntest_function(test_case_1)\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n\t\"\"\"\n\t:param n: the number to be divided\n\t:return: the maximum sum of the digits in the two parts\n\t\"\"\"\n\t# we start by dividing the number into two equal parts\n\ta = n // 2\n\tb = n - a\n\t# we initialize the maximum sum of the digits in the two parts\n\tmaximum_sum = 0\n\t# we check all possibilities of sums of digits in the two parts\n\tfor i in range(0, 10):\n\t\tsum_of_digits = i * b + (9 - i) * a\n\t\tif sum_of_digits > maximum_sum:\n\t\t\tmaximum_sum = sum_of_digits\n\treturn maximum_sum\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\nfrom math import ceil\nfrom math import floor\n\ndef sum_digits_twoparts(n):\n    n_str = str(n)\n    # print(n_str)\n    max_ = 0\n    for i in range(ceil(len(n_str)/2), floor(len(n_str)/2)-1, -1):\n        for j in range(i+1, len(n_str)):\n            # print(i, j)\n            t = int(n_str[i:j])\n            # print(t)\n            if t > max_:\n                max_ = t\n    return max_\n\n\ndef test_sum_digits_twoparts():\n    n = 35\n    assert sum_digits_twoparts(n)==17\n    n = 584\n    assert sum_digits_twoparts(n)==89\n    n = 465\n    assert sum_digits_twoparts(n)==67\n    n = 252\n    assert sum_digits_twoparts(n)==25\n    n = 161\n    assert sum_digits_twoparts(n)==72\n    n = 664\n    assert sum_digits_twoparts(n)==69\n    n = 554\n    assert sum_digits_twoparts(n)==67\n    n = 575\n    assert sum_digits_twoparts(n)==76\n    n = 174\n    assert sum_digits_twoparts(n)==77\n    n = 759\n    assert sum_digits_twoparts(n)==97\n    n = 627\n    assert sum_digits_twoparts(n)==84\n    n = 248\n    assert sum_digits_twoparts(n)==48\n    n = 547\n    assert sum_digits_twoparts(n)==76\n    n = 387\n    assert sum_digits_twoparts(n)==89\n    n = 528\n    assert sum_digits_twoparts(n)==74\n    n = 438\n    assert sum_", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\n#%% solution\ndef sum_digits_twoparts(n):\n    left = sum(int(c) for c in str(n) if int(c) % 2 == 0)\n    right = sum(int(c) for c in str(n) if int(c) % 2 == 1)\n    if left > right:\n        return (left, right)\n    else:\n        return (right, left)\n\n\n#%% test", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(number):\n    max_number = 0\n    max_sum = 0\n    number_list = [int(x) for x in str(number)]\n    print(number_list)\n    for i in range(len(number_list)):\n        for j in range(i+1,len(number_list)):\n            total = number_list[i]+number_list[j]\n            if total > max_sum:\n                max_sum = total\n                max_number = number_list[i]*100 + number_list[j]\n    return max_number\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    if n < 10:\n        return n\n    else:\n        t = str(n)\n        a = int(t[0])\n        b = int(t[1:])\n        return max(a,b) + sum_digits_twoparts(a+b)\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(a, target):\n    \"\"\"\n    Returns the longest subsequence with difference of one\n    \"\"\"\n    if len(a) <= 1:\n        return len(a)\n    \n    longest_length = 1\n    end = 0\n    \n    a.sort()\n    \n    for i in range(len(a)):\n        if a[i] - end > 1:\n            end = a[i]\n        else:\n            longest_length = max(longest_length, i - end + 1)\n    \n    return longest_length\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, k):\n    longest_arr = []\n    prev_start = 0\n    prev_end = 1\n    max_len = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] == 1:\n            if max_len < i - prev_start + 1:\n                longest_arr = arr[prev_start : prev_end + 1]\n                max_len = i - prev_start + 1\n\n            prev_end = i\n\n        else:\n            prev_start = i\n            prev_end = i\n\n    if max_len < len(arr) - prev_start + 1:\n        longest_arr = arr[prev_start : prev_end + 1]\n\n    return len(longest_arr)\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom collections import deque\n\n\ndef longest_subseq_with_diff_one(arr, n):\n    if not arr or n < 0:\n        return 0\n    # Store the size of the longest increasing subsequence\n    longest = 0\n\n    # Current size of the increasing subsequence\n    curr_len = 1\n\n    # Use a deque (double ended queue) to store the indexes of the elements\n    # of the sequence\n    dq = deque()\n\n    # Insert the first element\n    dq.appendleft(0)\n\n    # Loop through all the elements of the given array\n    for i in range(1, n):\n        # If the current element is greater than the element at the\n        # beginning of the queue (first element), then remove the front\n        # element from the queue and update the current length of the\n        # increasing subsequence\n        if arr[i] > arr[dq[0]]:\n            dq.popleft()\n            curr_len = i - dq[0]\n        # If the current element is smaller than the element at the\n        # beginning of the queue, then append the current element at\n        # the beginning of the queue\n        else:\n            dq.appendleft(i)\n\n        # Update the longest increasing subsequence if the current\n        # length is more than the longest increasing subsequence\n        longest = max(longest, curr_len)\n\n    return longest\n\n\n# driver code\narr = [1, 2, 3, 4, 5, 3, 2]\nn = len(arr)", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    :param arr: input array\n    :param n: length of array\n    :return: length of subsequence\n    \"\"\"\n    # code goes here\n    # To keep track of longest subsequence, and its length\n    longest, length = 0, 1\n\n    # The previous element of the subsequence\n    prev = -2\n\n    # A dictionary which stores the index of the first occurrence of a\n    # particular element in the array\n    dict = {}\n\n    for i in range(n):\n        if arr[i] in dict:\n            dict[arr[i]] = i\n        else:\n            dict[arr[i]] = i\n\n        if i - prev == 1:\n            length += 1\n        else:\n            if length > longest:\n                longest = length\n            prev = dict[arr[i]]\n            length = 1\n    if length > longest:\n        longest = length\n\n    return longest\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, max_sum):\n    longest_subseq = 0\n    min_sum = max_sum\n    for i in range(len(arr)):\n        if arr[i] < min_sum:\n            min_sum = arr[i]\n        if arr[i] - min_sum <= max_sum:\n            longest_subseq = i + 1\n\n    return longest_subseq\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    ans = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        ans = max(ans, dp[i])\n    return ans\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(array, diff):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # Write your code here\n    # We will use sliding window technique to solve this problem\n    # First we find longest subsequence of size 2 in array\n    max_length = 2\n    window_start = 0\n    window_end = 1\n    max_length_window_start = 0\n    max_length_window_end = 1\n    while window_end < len(array):\n        if array[window_end] - array[window_start] == diff:\n            window_end += 1\n            max_length = max(max_length, window_end - window_start)\n        elif array[window_end] - array[window_start] == diff + 1:\n            if window_end - window_start + 1 > max_length:\n                max_length = window_end - window_start + 1\n                max_length_window_start = window_start\n                max_length_window_end = window_end\n            window_end += 1\n        else:\n            window_start += 1\n            window_end = window_start + 1\n    if max_length < 2:\n        return max_length\n    window_start = max_length_window_start\n    window_end = max_length_window_end\n    while window_end < len(array):\n        if array[window_end] - array[window_start] == diff + 1:\n            window_end += 1\n            max_length = max(max_length, window_end - window_start)\n        else:\n            window_start += 1\n            window_end = window_start + 1\n    return max_length\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    :param: arr - input array\n    :param: n - length of array\n    return - length of longest subsequence with difference of 1\n    \"\"\"\n    max_len = 0\n\n    # Dictionary to store lengths of longest subsequence ending at index i\n    # in dictionary itself.\n    # Ex: longest_seq_dict[2] => length of longest subsequence ending at index 2.\n    longest_seq_dict = {0 : -1}\n\n    # Start with first element.\n    for i in range(1, n):\n        longest_seq_dict[i] = 1\n\n        # Check if current element can be appended to subsequence ending at\n        # previous element\n        if arr[i] - arr[i-1] == 1:\n            # Append current element to subsequence\n            longest_seq_dict[i] = longest_seq_dict[i - 1] + 1\n\n        # Check if current element can be prepended to subsequence ending at\n        # next element\n        if i + 1 in longest_seq_dict and arr[i] - arr[i-1] == -1:\n            # Prepend current element to subsequence\n            longest_seq_dict[i] = max(longest_seq_dict[i], longest_seq_dict[i + 1] + 1)\n\n        # Update max_len\n        max_len = max(max_len, longest_seq_dict[i])\n\n    return max_len\n\narr = [1, 2, 3, 4, 5, 3, 2]\nn = len(arr)", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n\n    # An empty array\n    if arr is None or len(arr) == 0:\n        return 0\n\n    dp = [0] * n\n\n    # Initialize the value for first element as 1.\n    dp[0] = 1\n\n    # Iterate from second element to the end of the array\n    for i in range(1, n):\n        # Initialize dp[i] as 1 if arr[i] is greater than arr[i-1] else 0\n        dp[i] = 1 if arr[i] > arr[i-1] else 0\n\n        # Iterate from start to i-1\n        for j in range(0, i):\n\n            # If difference between arr[i] and arr[j] is 1 and i - j is less than or equal to current dp[i]\n            if arr[i] - arr[j] == 1 and i - j <= dp[i]:\n                dp[i] = i - j + 1\n\n    # Return the max value of dp array.\n    return max(dp)\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(m, n, B):\n    if m%n == 0:\n        return True if B%n == 0 else False\n    else:\n        if m < n:\n            return False\n        return does_Contain_B(m/n, n, B)\n\n\n#%%", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(start,end,B):\n    if start > end:\n        return False\n    elif (start + end) % 3 == 0:\n        return does_Contain_B(start+1, end-1, B)\n    elif (start + end) % 3 == 1:\n        return does_Contain_B(start+1, end-1, B) or B == start or B == end\n    else:\n        return does_Contain_B(start+1, end-1, B) or B == (start + end)//3\n\n#print(does_Contain_B(1,7,3))\n#print(does_Contain_B(1,7,5))\n#print(does_Contain_B(1,7,7))\n#print(does_Contain_B(1,7,1))\n#print(does_Contain_B(1,7,9))\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n# Solution\ndef does_Contain_B(a,b,n):\n    if (n > a) and (n < b):\n        return True\n    elif (n == a) or (n == b):\n        return True\n    else:\n        return False\n# Test", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(x,y,z):\n\tn = 1\n\twhile(1):\n\t\tif(x == n**2 + y**2):\n\t\t\treturn True\n\t\tif(x > n**2 + y**2):\n\t\t\tif(z == n):\n\t\t\t\treturn True\n\t\t\tn+=1\n\t\telse:\n\t\t\treturn False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a, b, c):\n  if a == b == c:\n    return True\n  elif a == c or b == c or a == b:\n    return does_Contain_B(a, b, c + 1)\n  else:\n    return False", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n#write your code here\ndef does_Contain_B(a, b, c):\n    if b > c:\n        return a in range(b, c+1)\n    elif b < c:\n        return a in range(b, c-1, -1)\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a, b, c):\n    return True if a*a + b*b == c*c else False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(x,a,b):\n\treturn ((a*x + b) % 3 == 0)\n\n\ndef main():\n\tprint(does_Contain_B(1,7,3))\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    return a+b > c and b+c > a and c+a > b\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,c):\n    return ((b*b*b) % c) == a\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    \"\"\"\n    a and b are numbers\n    return True if a and b are coprime, and return False otherwise\n    >>> is_coprime(17,13)\n    True\n    >>> is_coprime(17,21)\n    False\n    >>> is_coprime(200,201)\n    False\n    \"\"\"\n    \"\"\"ALGORITHM:\n    To check whether two numbers are co-prime or not, we need to \n    find whether their greatest common divisor is 1 or not.\n    \n    To find the GCD of two numbers:\n    \n    Let the numbers be a and b.\n    If a and b are equal, then their GCD is 1.\n    Else, we need to repeat the following steps:\n    \n    Divide b by a, and keep the remainder.\n    If the remainder is 0, then b is a multiple of a.\n    Else, set a = b, and b = remainder.\n    Repeat the step until the remainder is 0.\n    The GCD is the value of b at the end.\n    \n    \"\"\"\n    # write your code here\n    if a == b:\n        return True\n    elif a == 1 or b == 1:\n        return True\n    elif a == 2 or b == 2:\n        return False\n    elif a % b == 0 or b % a == 0:\n        return True\n    else:\n        for i in range(3, min(a, b), 2):\n            if i % a == 0 and i % b == 0:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a == 0 and b == 0:\n        return False\n    if a == 0 or b == 0:\n        return True\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n\n    if a > b:\n        a,b = b,a\n    \n    return gcd(a,b) == 1\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(m,n):\n  \"\"\"\n  return True if m is coprime with n else return False\n  \"\"\"\n  if gcd(m,n) == 1:\n    return True\n  else:\n    return False\n\ndef gcd(a, b):\n  while b != 0:\n    (a, b) = (b, a % b)\n  return a\n\n# + id=\"dV3q3Sssf87R\"\n\n\n# + [markdown] id=\"mG9sN5Mrf_Y6\"\n# ## Exercise 4\n#\n# Write a python function to check whether the given number is an Armstrong number or not.\n\n# + id=\"xsQ8w6ywgA2m\"\ndef is_armstrong(n):\n  if n == 0:\n    return False\n  sum = 0\n  temp = n\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n  if sum == n:\n    return True\n  else:\n    return False\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"u5HsgD29gF85\" outputId=\"b4ff3075-65c1-491b-f631-15b2804a9d26\"\nis_armstrong(153)\n\n# + [markdown] id=\"p8YsN8VcgILp\"\n# ## Exercise 5\n#\n# Write a python function to check whether a given year is a Leap year or not.\n\n# + id=\"dxm-9E6BgN71\"\nimport calendar\ndef is_leap_year(year):\n  leap = calendar.isleap(year)\n  return leap\n\n\n# + [markdown] id=\"4425p6A6gRwL\"\n# ## Exercise 6\n#\n# Write a python function to find the GCD of two numbers.\n\n# + id=\"uMA5f-8FgS7H", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a == b:\n        return True\n    elif (a > b and b%a == 0) or (b > a and a%b == 0):\n        return False\n    else:\n        for i in range(2,min(a,b)):\n            if (a%i == 0 and b%i == 0):\n                return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(x, y):\n    if x < y:\n        return is_coprime(y,x)\n    # Write your code here\n    while x % y != 0:\n        if x % y == 0:\n            return True\n        if y % x == 0:\n            return True\n        x,y = y,x % y\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\nfrom math import gcd\n\ndef is_coprime(a,b):\n    return gcd(a,b) == 1\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a, b):\n    if (a == b):\n        return True\n\n    if (a < b):\n        # Swap a and b\n        temp = a\n        a = b\n        b = temp\n\n    for i in range(2,b):\n        if (a%i == 0) and (b%i == 0):\n            return False\n\n    return True\n\n\ndef test_is_coprime():\n    assert is_coprime(17,13) == True\n\n\n# -\n\n# # 12. Find the number of trailing zeros in the factorial of a number.\n\n# +", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(array):\n    if len(array) < 2:\n        return array\n    middle = len(array) // 2\n    left_array = merge_sort(array[:middle])\n    right_array = merge_sort(array[middle:])\n    return merge(left_array, right_array)\n\ndef merge(left_array, right_array):\n    result = []\n    while len(left_array) > 0 and len(right_array) > 0:\n        if left_array[0] <= right_array[0]:\n            result.append(left_array.pop(0))\n        else:\n            result.append(right_array.pop(0))\n    if len(left_array) > 0:\n        result.extend(left_array)\n    if len(right_array) > 0:\n        result.extend(right_array)\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(array):\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(array) == 1:\n        return array\n    mid = len(array) // 2\n    return merge(merge_sort(array[:mid]), merge_sort(array[mid:]))\n\ndef merge(left, right):\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            array[k] = left[i]\n            i += 1\n        else:\n            array[k] = right[j]\n            j += 1\n        k += 1\n\n    while i < len(left):\n        array[k] = left[i]\n        i += 1\n        k += 1\n\n    while j < len(right):\n        array[k] = right[j]\n        j += 1\n        k += 1\n    return array\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\nfrom random import randint\nfrom merge_sort import merge_sort\n\ndef test_merge_sort():\n    n = randint(5, 10)\n    my_list = [randint(-1000, 1000) for i in range(n)]\n    assert merge_sort(my_list) == sorted(my_list)\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nfrom typing import List\n\n\ndef merge_sort(data: List[int]):\n    \"\"\"\n    Sorts a list of integers using merge sort\n\n    :param data: List of integers\n    :return: List of sorted integers\n    \"\"\"\n    if len(data) <= 1:\n        return data\n\n    middle = len(data) // 2\n\n    return merge(merge_sort(data[:middle]), merge_sort(data[middle:]))\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"\n    Merges two sorted lists\n\n    :param left: Sorted list\n    :param right: Sorted list\n    :return: Merged lists\n    \"\"\"\n    result: List[int] = []\n    left_index, right_index = 0, 0\n\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n\n    return result + left[left_index:] + right[right_index:]\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\n\n\ndef merge_sort(arr: List[int]) -> List[int]:\n    if len(arr) == 1:\n        return arr\n    mid = len(arr) // 2\n    left_arr = merge_sort(arr[:mid])\n    right_arr = merge_sort(arr[mid:])\n    return merge(left_arr, right_arr)\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    result = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n    if left_index < len(left):\n        result += left[left_index:]\n    if right_index < len(right):\n        result += right[right_index:]\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nfrom typing import List\n\n\ndef merge_sort(input: List[int]) -> List[int]:\n    if len(input) <= 1:\n        return input\n\n    mid = len(input) // 2\n    left = input[:mid]\n    right = input[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    merged = []\n    left_idx = 0\n    right_idx = 0\n\n    while len(merged) != len(left) + len(right):\n        if left[left_idx] < right[right_idx]:\n            merged.append(left[left_idx])\n            left_idx += 1\n        else:\n            merged.append(right[right_idx])\n            right_idx += 1\n\n        if left_idx == len(left):\n            merged.extend(right[right_idx:])\n            break\n        elif right_idx == len(right):\n            merged.extend(left[left_idx:])\n            break\n\n    return merged\n\n\ndef main():\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\n\n\ndef merge_sort(arr: List[int]):\n    if len(arr) <= 1:\n        return arr\n\n    # Get the middle point\n    middle = len(arr) // 2\n    # Get the left and right arrays\n    left = arr[:middle]\n    right = arr[middle:]\n\n    # Sort the left and right arrays\n    merge_sort(left)\n    merge_sort(right)\n\n    # Merge the sorted arrays together\n    i, j = 0, 0\n    for k in range(len(arr)):\n        # If the left array is empty\n        if i >= len(left):\n            # Copy the right array into the array\n            arr[k] = right[j]\n            # Increment the j index\n            j += 1\n            continue\n\n        # If the right array is empty\n        if j >= len(right):\n            # Copy the left array into the array\n            arr[k] = left[i]\n            # Increment the i index\n            i += 1\n            continue\n\n        # If the left value is less than the right value\n        if left[i] < right[j]:\n            # Copy the left value into the array\n            arr[k] = left[i]\n            # Increment the i index\n            i += 1\n            continue\n\n        # If the left value is greater than the right value\n        if left[i] > right[j]:\n            # Copy the right value into the array\n            arr[k] = right[j]\n            # Increment the j index\n            j += 1\n            continue\n\n\ndef test_merge_sort():\n    arr = [3, 4, 2, 6, 5, 7, 1, 9]\n    merge_sort(arr)\n    assert arr == [1, 2, 3, 4, 5, 6, 7, 9]\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    # Write your code here\n    if len(arr) == 1:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        result = merge(left, right)\n        return result\n\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nimport math\n\ndef parabola_vertex(a, b, c):\n\t\"\"\"\n\tfind vertex of parabola\n\t:param a:\n\t:param b:\n\t:param c:\n\t:return: x, y\n\t\"\"\"\n\td = b * b - 4 * a * c\n\tif d < 0:\n\t\treturn None\n\tx1 = (-b - math.sqrt(d)) / (2 * a)\n\tx2 = (-b + math.sqrt(d)) / (2 * a)\n\ty = a * x1 * x1 + b * x1 + c\n\treturn x1, y", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    v = -b / 2 / a\n    u = (c - b * b / 4 / a) / a\n    return (v, u)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    D = b**2 - 4*a*c\n    assert D > 0, \"D < 0\"\n    x = (-b + sqrt(D))/(2*a)\n    y = (2*a*c - b*b + sqrt(D))/(2*a)\n    return x,y\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    import numpy as np\n    x = np.roots([a, b, c])\n    y = (-b - np.sqrt(b**2 - 4*a*c)) / (2 * a)\n    return (x[0], y)", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    x=(-b+math.sqrt(b**2-4*a*c))/2*a\n    y=a*x**2+b*x+c\n    return (x,y)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    if a == 0:\n        print(\"Not a parabola\")\n        return None\n    return (-b/(2*a), c/(a))\n\ndef parabola_vertex_2(a,b,c):\n    x = -b/(2*a)\n    y = c/(a)\n    return x, y\n\ndef parabola_vertex_3(a,b,c):\n    x = -b/(2*a)\n    y = c/(a)\n    return (x,y)\n\ndef parabola_vertex_4(a,b,c):\n    if a == 0:\n        print(\"Not a parabola\")\n        return None\n    else:\n        x = -b/(2*a)\n        y = c/(a)\n        return (x,y)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nfrom __future__ import division\n\n\ndef parabola_vertex(a, b, c):\n    \"\"\"Given a, b, and c, find the vertex of the parabola.\"\"\"\n    return (-b/2/a, (c/a)-(b**2/4/a**2))\n\n\ndef test_parabola_vertex():\n    assert round(parabola_vertex(5, 3, 2)[0], 2) == -0.3\n    assert round(parabola_vertex(5, 3, 2)[1], 2) == 1.55\n    return 'Pass'\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nfrom cmath import sqrt\n\ndef parabola_vertex(a,b,c):\n    delta=b**2-4*a*c\n    return ((-b+sqrt(delta))/(2*a), (-b-sqrt(delta))/(2*a))\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    x = -b/(2*a)\n    y = (-b**2-4*a*c)/(4*a)\n    return (x, y)\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(L,n):\n    return list(filter(lambda x: x[n]==2,L))\n\n#print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\n#assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nimport unittest\nfrom typing import List\n\ndef specified_element(list_of_lists:List[List[int]], specified_element:int)->List[int]:\n    return [x for row in list_of_lists for x in row if x == specified_element]\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nfrom typing import List\n\ndef specified_element(matrix: List[List[int]], element: int) -> List[int]:\n  list_to_return = []\n  for row in matrix:\n    for i in range(0, len(row)):\n      if row[i] == element:\n        list_to_return.append(row[i])\n  return list_to_return\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(x,y):\n\tres=[]\n\tfor i in range(len(x)):\n\t\tres.append(x[i][y])\n\treturn res\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list_in, val):\n    out = []\n    for row in list_in:\n        for val_in_row in row:\n            if val_in_row == val:\n                out.append(val_in_row)\n    return out\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lst,el):\n    result = []\n    for i in lst:\n        if el in i:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, num):\n  return [i[num] for i in lst]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(matrix, element):\n    return [row[row.index(element)] for row in matrix]\n\n\n# 9.", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list_of_list, element):\n  return [list_of_list[i][j] for i in range(len(list_of_list)) for j in range(len(list_of_list[0])) if list_of_list[i][j] == element]\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    Toggles all even bits of a given number\n    Returns the modified number\n    \"\"\"\n    return (number ^ 1) & number\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    num = str(bin(num))[2:]\n    #print(num)\n    num = num[::-1]\n    #print(num)\n    res = ''\n    for i in range(len(num)):\n        if num[i] == '1':\n            res = res + '0'\n        else:\n            res = res + '1'\n    #print(res)\n    return int(res, 2)\n\n\ndef test():\n    assert even_bit_toggle_number(10) == 0\n    assert even_bit_toggle_number(11) == 5\n    assert even_bit_toggle_number(12) == 10\n    assert even_bit_toggle_number(13) == 15\n    assert even_bit_toggle_number(14) == 20\n    assert even_bit_toggle_number(15) == 25\n    assert even_bit_toggle_number(16) == 30\n    assert even_bit_toggle_number(17) == 35\n    assert even_bit_toggle_number(18) == 40\n    assert even_bit_toggle_number(19) == 45\n    assert even_bit_toggle_number(20) == 50\n    assert even_bit_toggle_number(21) == 55\n    assert even_bit_toggle_number(22) == 60\n    assert even_bit_toggle_number(23) == 65\n    assert even_bit_toggle_number(24) == 70\n    assert even_bit_toggle_number(25) == 75\n    assert even_bit_toggle_number(26) == 80\n    assert even_bit_toggle_number(27) == 85\n    assert even_bit_toggle_number(28) == 90\n    assert even_bit_toggle_number(29) == 95\n    assert even_bit_toggle_number(30) == 100\n    assert even_bit_toggle_number(31) == 1", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\nfrom unittest import TestCase\n\ndef even_bit_toggle_number(number):\n    toggled_number = 0\n    for i in range(1, 32+1):\n        toggled_number += (1 << i)\n    return (number ^ toggled_number)\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\nimport pytest\n\n\ndef even_bit_toggle_number(num):\n    pass\n\n\n@pytest.mark.parametrize(\"number, expected\", [\n    (10, 0),\n    (21, 3),\n    (111, 333),\n    (0, 0),\n    (1, 1),\n    (2, 0),\n])\ndef test_even_bit_toggle_number(number, expected):\n    assert even_bit_toggle_number(number) == expected\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    number = number & ~1\n    number = number | (number & 1 << 2)\n    number = number | (number & 1 << 4)\n    number = number | (number & 1 << 6)\n    number = number | (number & 1 << 8)\n    number = number | (number & 1 << 10)\n    number = number | (number & 1 << 12)\n    number = number | (number & 1 << 14)\n    return number\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num ^ (num & -num)\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    num = bin(num)\n    num_list = list(num)\n    new_num_list = [1 if num_list[i] == \"0\" else 0 for i in range(len(num))]\n    for i in range(len(num_list)):\n        if num_list[i] == \"1\":\n            new_num_list[i] = 0\n    return int(\"\".join(str(x) for x in new_num_list), 2)", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(n):\n    \"\"\"Toggle all even bits of a given number.\"\"\"\n    # We will do this by performing the XOR operation with 1111\n    # which is the binary representation of 15.\n    return n ^ 15\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(n):\n    # x = 1010\n    x = bin(n)[2:]\n    # print(x)\n    res = \"\"\n    for i in range(len(x)):\n        if i % 2 == 0:\n            # print(x[i])\n            if x[i] == \"1\":\n                x[i] = \"0\"\n                # print(x[i])\n            elif x[i] == \"0\":\n                x[i] = \"1\"\n                # print(x[i])\n        else:\n            pass\n        # print(i)\n        # print(x[i])\n        res = res + x[i]\n    # print(res)\n    return int(res, 2)\n\n\ndef main():\n    pass\n\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_str):\n    return tuple(tuple(int(s) for s in tup) for tup in tuple_str)\n\n\ndef test_tuple_int_str():\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_values):\n    for index, value in enumerate(tuple_values):\n        tuple_values[index] = tuple([int(x) for x in value])\n    return tuple_values\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tupl):\n    res = list()\n    for item in tupl:\n        res.append(tuple(map(int, item)))\n    return tuple(res)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple([tuple(int(x) for x in y) for y in tup])\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_str):\n\ttuple_int=tuple(tuple(int(i) for i in j) for j in tuple_str)\n\treturn tuple_int\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(data):\n    return tuple(tuple(int(i) for i in j) for j in data)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\nfrom functools import reduce\ndef tuple_int_str(t):\n  return tuple(map(lambda x: tuple(map(int, x)), t))\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\n# + id=\"Z5_x8cCLk_qv\" colab_type=\"code\" colab={}\n# list to tuple\ntuple_list = ('a', 'b', 'c', 'd', 'e')"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    # TODO: code here\n    print(\"list:\",lst)\n    dict = {}\n    i = 0\n    while i<len(lst):\n        if lst[i] not in dict:\n            dict[lst[i]] = 1\n        else:\n            dict[lst[i]] += 1\n        i += 1\n\n    print(\"dict:\",dict)\n    for k in dict:\n        if dict[k] > 1:\n            for i in range(dict[k]):\n                lst.append(k)\n    print(\"final list:\", lst)\n    return lst\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    l=[]\n    for i in lst:\n        if lst.count(i)==1:\n            l.append([i,1])\n        else:\n            l.append([i,lst.count(i)])\n    return l\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    \"\"\"\n    >>> encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    True\n    \"\"\"\n    new_list = []\n    for item in l:\n        count = 1\n        for i in l:\n            if item == i:\n                count += 1\n        new_list.append([count,item])\n    return new_list\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(list_to_encode):\n    encoded_list = []\n    for i in range(len(list_to_encode)):\n        if i != len(list_to_encode) - 1:\n            if list_to_encode[i] == list_to_encode[i + 1]:\n                encoded_list.append([list_to_encode.count(list_to_encode[i]), list_to_encode[i]])\n                i += 1\n            else:\n                encoded_list.append([1, list_to_encode[i]])\n        else:\n            encoded_list.append([1, list_to_encode[i]])\n    return encoded_list\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(input_list):\n  # Get dictionary with count of each element\n  dict_element_count = {}\n  for element in input_list:\n    dict_element_count.setdefault(element, 0)\n    dict_element_count[element] += 1\n  # Convert to a list of tuples (element,count)\n  list_of_tuples = [(element,dict_element_count[element]) for element in dict_element_count]\n  return list_of_tuples\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(list):\n\toutput = []\n\tlast_element = None\n\tcount = 0\n\tfor e in list:\n\t\tif e != last_element:\n\t\t\tif last_element != None:\n\t\t\t\tif count != 1:\n\t\t\t\t\toutput.append([count, last_element])\n\t\t\t\telse:\n\t\t\t\t\toutput.append([count, last_element])\n\t\t\tcount = 1\n\t\t\tlast_element = e\n\t\telse:\n\t\t\tcount += 1\n\tif count != 1:\n\t\toutput.append([count, last_element])\n\telse:\n\t\toutput.append([count, last_element])\n\treturn output\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(arr):\n    if arr == []:\n        return arr\n    else:\n        last = arr[0]\n        num_last = 1\n        list_comprehension = [num_last, last]\n        for x in arr[1:]:\n            if x == last:\n                num_last += 1\n            else:\n                list_comprehension.append(x)\n                num_last = 1\n                last = x\n        return list_comprehension\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(a):\n    \"\"\"\n    encode_list takes in a list of mixed data types and returns a list of lists\n    with the count of repeated values at index 0 and the actual value at index 1.\n    This way we can check if a certain element occurs more than once in a given list.\n    \"\"\"\n    # create the empty output list\n    output_list = []\n\n    # the counter\n    counter = 1\n\n    # loop through the input list\n    for i in range(len(a)):\n        # check if the list is empty\n        if i == 0:\n            # append the count and the first element\n            output_list.append([counter, a[i]])\n        else:\n            # check if the next element is the same as the current element\n            if a[i] == a[i - 1]:\n                # increment the counter\n                counter += 1\n            else:\n                # append the count and the current element\n                output_list.append([counter, a[i]])\n                # reset the counter\n                counter = 1\n    # return the output list\n    return output_list\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\nfrom bisect import bisect_left\n\ndef min_Ops(l,n,k):\n    \"\"\"\n    :param l: list of integers\n    :param n: number of operations\n    :param k: number of distinct integers\n    :return: number of operations\n    \"\"\"\n    if n == 0:\n        return 0\n    res = 0\n    count = [0] * n\n    for x in l:\n        index = bisect_left(count, x)\n        res += min(index, n - index - 1)\n        count[index] = x\n    return res", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,size,k):\n    # Fill this in.\n    if k==0 or k==size:\n        return 0\n    if arr.count(arr[0])==size:\n        return k\n    if k >= size:\n        return size-1\n    if arr.count(arr[0])>size:\n        return size-arr.count(arr[0])\n\n    for i in range(size-k):\n        if arr.count(arr[0])<size:\n            arr[i],arr[-1] = arr[-1],arr[i]\n            return 1 + min_Ops(arr,size,k+1)\n    return min_Ops(arr,size,k+1)\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(a, k, N):\n    if k==0 or N==0:\n        return 0\n    if k==1:\n        return 1\n    \n    # Find the frequency of each element\n    freq = []\n    for i in a:\n        freq.append(0)\n    \n    for i in a:\n        freq[i-1] += 1\n    \n    # Find the number of operations\n    op = 0\n    \n    for i in range(N):\n        if freq[i]%k!=0:\n            diff = k-freq[i]%k\n            op += diff\n            freq[i] += diff\n        op += (freq[i]-1)//k\n    \n    return op\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(array,k,n):\n    for i in range(k):\n        n-=1\n        val=array[0]\n        array.pop(0)\n        array.append(val)\n    return n\n\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# A naive recursive solution\ndef min_ops(nums, k, pos):\n    if pos >= len(nums) or k == 0:\n        return 0\n    return min(abs(nums[pos] - nums[pos - 1]) + min_ops(nums, k - 1, pos + 1),\n               abs(nums[pos] - nums[pos - 1]) + min_ops(nums, k, pos + 1))\n\n\n# A DP approach\ndef min_ops2(nums, k, pos):\n    if pos >= len(nums) or k == 0:\n        return 0\n    n = len(nums)\n    if pos == 0:\n        dp = [[0] * (k + 1) for i in range(n)]\n    else:\n        dp = dp[:pos]\n    for i in range(pos):\n        dp[i][0] = 0\n\n    for i in range(pos, n):\n        for j in range(1, k + 1):\n            dp[i][j] = min(abs(nums[i] - nums[i - 1]) + dp[i - 1][j - 1],\n                           abs(nums[i] - nums[i - 1]) + dp[i - 1][j])\n\n    return dp[n - 1][k]\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(nums, k, total):\n    if k == 0:\n        return 0\n    s = sum(nums)\n    if s == total:\n        return 0\n    elif s > total:\n        diff = s - total\n        if diff > k:\n            return -1\n        elif diff == k:\n            return 0\n        else:\n            return k - diff\n    else:\n        diff = total - s\n        if diff > k:\n            return -1\n        elif diff == k:\n            return 0\n        else:\n            return k - diff\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, n):\n    freq = [0 for _ in range(n+1)]\n    for i in arr:\n        freq[i] += 1\n\n    diff = freq[1] - freq[2]\n    res = 0\n    for i in range(3, n+1):\n        diff += freq[i] - freq[i+1]\n        if diff > 0:\n            diff -= diff//k\n            res += diff\n    return res\n"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    seasons = ['spring','summer','autumn','winter']\n    month = month.lower()\n    for season in seasons:\n        if month in season:\n            return season\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n# Simple solution\ndef month_season(month, day):\n  months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  m = months.index(month)\n  if (m < 2 or m == 11):\n    return('winter')\n  elif (m < 5):\n    return('spring')\n  elif (m < 8):\n    return('summer')\n  else:\n    return('autumn')\n\n# Alternative solution\ndef month_season_alternative(month, day):\n  months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  m = months.index(month)\n  return(['winter', 'spring', 'summer', 'autumn'][(m + 3) // 3])\n\n# Tests", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    # Write your code here\n    seasons = ['winter', 'spring', 'summer', 'autumn']\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    month = str(month)\n    if month in months:\n        return seasons[months.index(month) // 3]\n    elif month == 'December' and day >= 22:\n        return 'winter'\n    else:\n        return 'invalid month and day'\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month_name,day):\n    # Your code goes here\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    if month in 'April May June July':\n        return('summer')\n    elif month in 'September October November':\n        return('autumn')\n    elif month in 'January February March':\n        return('winter')\n    else:\n        return('spring')\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n# +\n# You can use this to check your code against ours - don't cheat!\n\nfrom nose.tools import assert_equal\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n\n    :param month: month name.\n    :param day: day number.\n\n    :return: the season of that month for that day.\n    \"\"\"\n    seasons = {\n        'January':('winter', 'spring', 'summer'),\n        'February':('winter', 'spring', 'summer'),\n        'March':('winter', 'spring', 'summer'),\n        'April':('winter', 'spring', 'summer'),\n        'May':('spring', 'summer', 'fall'),\n        'June':('spring', 'summer', 'fall'),\n        'July':('spring', 'summer', 'fall'),\n        'August':('spring', 'summer', 'fall'),\n        'September':('summer', 'fall', 'winter'),\n        'October':('summer', 'fall', 'winter'),\n        'November':('summer', 'fall', 'winter'),\n        'December':('fall', 'winter', 'spring')}\n\n    return seasons.get(month)[day - 1]\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    season=''\n    if month=='June' or month=='July' or month=='August':\n        season='summer'\n    elif month=='December' or month=='January' or month=='February':\n        season='winter'\n    elif month=='March' or month=='April' or month=='May':\n        season='spring'\n    elif month=='September' or month=='October' or month=='November':\n        season='autumn'\n    else:\n        return \"There's no such month\"\n    return season\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    if month == 'January' or month == 'December':\n        return('winter')\n    elif month == 'February' and day <=28:\n        return('winter')\n    elif month == 'March' or month == 'May' or month == 'July' or month == 'August':\n        return('spring')\n    elif month == 'April' or month == 'June' or month == 'September':\n        return('summer')\n    elif month == 'October' or month == 'November':\n        return('autumn')\n    else:\n        return('Invalid month and day')\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n  seasons = ['winter', 'spring', 'summer', 'autumn']\n  days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  if(month == 'December' or month == 'January' or month == 'February'):\n    return seasons[0]\n  elif(month == 'March' or month == 'April' or month == 'May'):\n    return seasons[1]\n  elif(month == 'June' or month == 'July' or month == 'August'):\n    return seasons[2]\n  else:\n    return seasons[3]"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nfrom unittest import TestCase\n\n\ndef solution(a, b, n):\n    for x in range(100):\n        for y in range(100):\n            if a * x + b * y == n:\n                return 'x = ', x, ', y = ', y\n\n    return 'No solution'\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = (n - b) / a\n    y = n - a * x\n    return \"x = \", x, \", y = \", y", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    return 'x = ', n/a, ', y = ', n/b\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"Solves the equation a*x + b*y == n\n    Returns (x, y) or raises exception if there is no solution\n    \"\"\"\n\n    if a == 0 and b == 0:\n        raise ValueError(\"a and b cannot be 0.\")\n\n    if a == 0:\n        x = n / b\n    elif b == 0:\n        y = n / a\n    else:\n        x = (n - b) / a\n        y = (n - a) / b\n\n    return ('x = ', x, ', y = ', y)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n  x = 0\n  y = 0\n  while x < n:\n    x += a\n    y += b\n  while y > n:\n    x -= a\n    y -= b\n  if x == n:\n    return ('x = ', x, ', y = ', y)\n  else:\n    return ('Error: no solution found')\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nfrom typing import Any\nfrom functools import partial\nfrom sympy.core import symbols, Eq\nfrom sympy.solvers import solveset\nfrom sympy.abc import x, y, a, b, n\n\ndef solution(a: Any, b: Any, n: Any) -> tuple:\n  \"\"\"\n  Using Sympy, return the two solutions to the equation: ax + by = n.\n  Return ('x = ', <x value>, ', y = ', <y value>)\n  \"\"\"\n  eq = Eq(a * x + b * y, n)\n  return (f\"x = \",) + tuple(map(int, solveset(eq, x).args)) + (\", y = \",) + tuple(map(int, solveset(eq, y).args))\n\nsolution_with_partial = partial(solution, 2, 3)", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nimport math\ndef solution(a, b, n):\n    if a == 0:\n        return ('x = ', b/n, ', y = ', 0)\n    elif b == 0:\n        return ('x = ', 0, ', y = ', a/n)\n    else:\n        return ('x = ', int(math.ceil(b/n)), ', y = ', int(math.ceil(a/n)))", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x, y = 0, 0\n    while (x, y) != (n//a, n//b):\n        x += 1\n        y += 1\n        while x%a != 0:\n            x += 1\n        while y%b != 0:\n            y += 1\n    return \"x = \", x, \", y = \", y\n\n# print(solution(1, 2, 5))"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1,list2):\n    return list(set(list1)-set(list2))\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\ndef remove_elements(list1, list2):\n    return [x for x in list1 if list2.count(x) == 0]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n# def remove_elements(nums,vals):\n#     for val in vals:\n#         while val in nums:\n#             nums.remove(val)\n#     return nums\n# print(remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8]))\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(my_list,other_list):\n    for element in other_list:\n        if element in my_list:\n            my_list.remove(element)\n    return my_list\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(input_list, to_be_removed):\n    to_be_removed_set = set(to_be_removed)\n    input_set = set(input_list)\n    diff = input_set.difference(to_be_removed_set)\n    return list(diff)\n\ninput_list = [1,2,3,4,5,6,7,8,9,10]\nto_be_removed = [2,4,6,8]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(arr1,arr2):\n    return [x for x in arr1 if x not in arr2]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(given_list,remove_list):\n    for i in remove_list:\n        given_list.remove(i)\n    return given_list", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\nfrom collections import Counter\n\n\ndef remove_elements(my_list, elements_to_remove):\n    counter = Counter(elements_to_remove)\n    return [item for item in my_list if counter[item] < 1]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\nfrom typing import List\n\n\ndef remove_elements(\n    a: List[int], b: List[int]\n) -> List[int]:\n    return [x for x in a if x not in b]\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(arr, list_to_remove):\n    arr.reverse()\n    for element in list_to_remove:\n        while element in arr:\n            arr.remove(element)\n    arr.reverse()\n    return arr\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n  if n == 1:\n    return 1\n  elif n == 0:\n    return 0\n  else:\n    return n + sum_series(n-2)\n  ", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    sum=0\n    for i in range(n+1,0,-2):\n        sum+=i\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n<=0:\n        return 0\n    else:\n        return n + sum_series(n-2)", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n<=0:\n        return 0\n    else:\n        return n+(sum_series(n-2))\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    \"\"\"\n    >>> sum_series(6)\n    12\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n+sum_series(n-2)\n\ndef test():\n    import doctest\n    doctest.testmod()\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n  return n*(n+1)*(n+2)//6\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    if n <= 0:\n        return 0\n    elif n <= 2:\n        return n\n    else:\n        return n + sum_series(n-2)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n==1:\n        return 1\n    else:\n        return n+sum_series(n-2)", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    sum = 0\n    for x in range(1,n+1,2):\n        sum += x\n    return sum\n\n\ndef sum_series_2(n):\n    sum = 0\n    for x in range(1,n//2 + 1,2):\n        sum += n - 2*x + 1\n    return sum\n\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    \"\"\"\n    Calculates the area of a polygon\n    \"\"\"\n    a = n*s**2/4*np.tan(np.pi/n)\n    return a\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    assert isinstance(n,int)\n    assert n>2\n    assert isinstance(s,int)\n    assert s>0\n    return (n*s**2)/2\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, s):\n    return n * s * s / (4.0 * math.tan(math.pi/n))\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,side):\n    area=(n*side**2)/4*math.tan(math.pi/n)\n    return area\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    area = (n*s**2)/4*3.14\n    print(area)\n    return area\n\ndef test_area_polygon():\n    assert area_polygon(4,20)==400.00000000000006\n\ntest_area_polygon()\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    return (n*s**2)/(4*math.tan(math.pi/n))\n\n\n# + [markdown] id=\"c0b-8J9dy8i6\"\n# # Challenge 3: Write a program to calculate the area of a circle.\n#\n#\n#\n\n# + id=\"fIYGQw_C5Mjp\"", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    import math\n    return n*s*s/4*math.tan(math.pi/n)\n\n#def area_polygon(n,s):\n#    return (n*s**2)/4*math.tan(math.pi/n)\n\n\ndef area_circle(s):\n    return math.pi*s**2\n\n\ndef area_triangle(a,b,c):\n    import math\n    p=(a+b+c)/2\n    s=math.sqrt(p*(p-a)*(p-b)*(p-c))\n    return s\n\ndef area_rectangle(a,b):\n    return a*b", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,side):\n    return (n*side**2)/(4*math.tan(math.pi/n))\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    area=n*s**2/2\n    return area\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    return n*s*(s-s/n)\n\n\n# Assert functions in python\n# http://www.tutorialspoint.com/python/assertions_in_python.htm\n\n# Test case"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1, num2):\n\t\"\"\"\n\t:param num1: First number\n\t:param num2: Second number\n\t:return: True if the sum of divisors are same, False otherwise\n\t\"\"\"\n\t# Write your code here\n\t# if num1 == num2:\n\t# \treturn True\n\t# else:\n\t# \treturn False\n\n\treturn len(list(set(divisors(num1) + divisors(num2)))) == 1\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    sum_a = 0\n    sum_b = 0\n    for i in range(1,a):\n        if a%i == 0:\n            sum_a = sum_a + i\n    for i in range(1,b):\n        if b%i == 0:\n            sum_b = sum_b + i\n    if sum_a == sum_b:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1,num2):\n    \"\"\"\n    Method to check whether the sum of divisors are same or not.\n    \"\"\"\n    if num1 < num2:\n        num1,num2 = num2,num1\n\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,num1):\n        if num1%i == 0:\n            sum1 += i\n    for i in range(1,num2):\n        if num2%i == 0:\n            sum2 += i\n\n    return sum1 == sum2\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\nfrom math import sqrt, ceil\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n < 2: return False\n    if n < 9: return True\n    if n % 3 == 0: return False\n    r = int(ceil(sqrt(n)))\n    f = 5\n    while f <= r:\n        if n % f == 0 or n % (f + 2) == 0:\n            return False\n        f +=6\n    return True\n\ndef areEquivalent(n,m):\n    l1 = [x for x in range(1,ceil(sqrt(n))+1) if n%x == 0]\n    l2 = [x for x in range(1,ceil(sqrt(m))+1) if m%x == 0]\n    sum_of_divisors_n = 0\n    sum_of_divisors_m = 0\n    for i in l1:\n        sum_of_divisors_n += i\n    for i in l2:\n        sum_of_divisors_m += i\n    if sum_of_divisors_n == sum_of_divisors_m:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\nimport sys\nsys.path.append(\"/home/spyder/PythonBasic/Day7/Day7\")\nimport divisors\ndef areEquivalent(n1,n2):\n    sum1 = sum(divisors.divisors(n1))\n    sum2 = sum(divisors.divisors(n2))\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n,m):\n    flag = 0\n    div = []\n    divm = []\n    for i in range(1,int(n/2)+1):\n        if n % i == 0:\n            div.append(i)\n    for i in range(1,int(m/2)+1):\n        if m % i == 0:\n            divm.append(i)\n    if div == divm:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    #Your code goes here\n    i=0\n    n=0\n    l=[]\n    l2=[]\n    n=a+b\n    while(i<=n):\n        if(n%i==0):\n            l.append(i)\n        i+=1\n    i=0\n    while(i<=n):\n        if(n%i==0):\n            l2.append(i)\n        i+=1\n    if(l==l2):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\n# +\ndef areEquivalent(n1, n2):\n    l1 = []\n    l2 = []\n    for i in range(1, int(n1/2)+1):\n        if n1%i == 0:\n            l1.append(i)\n    for i in range(1, int(n2/2)+1):\n        if n2%i == 0:\n            l2.append(i)\n    return l1 == l2\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n,m):\n    count = {}\n    for i in range(1,m+1):\n        count[i] = m+1\n    for i in range(1,m+1):\n        if m % i == 0:\n            count[i] = m//i\n    ans = []\n    for i in range(1,m+1):\n        if count[i] in count:\n            ans.append(count[i])\n    return sum(ans) == n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a, b):\n  return (sum(getDivisors(a)) == sum(getDivisors(b)))\n\ndef getDivisors(n):\n  divisors = []\n  for i in range(1,n):\n    if(n % i == 0):\n      divisors.append(i)\n  return divisors\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    return sum([string.lower().count(c) for c in 'abcdefghijklmnopqrstuvwxyz'])\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n# Solution 1\n# O(n) time / O(1) space\n# n - length of string\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].islower() and i == string.find(string[i].upper()):\n            count += 1\n    return count\n\n# Solution 2\n# O(n) time / O(1) space\n# n - length of string\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].islower() and string.find(string[i].upper()) == i:\n            count += 1\n    return count\n\n# Solution 3\n# O(n) time / O(1) space\n# n - length of string\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].islower() and string.find(string[i].upper()) == i:\n            count += 1\n        elif string[i].isupper() and string.find(string[i].lower()) == i:\n            count += 1\n    return count\n\n# Solution 4\n# O(n) time / O(1) space\n# n - length of string\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].isalpha() and string.find(string[i].swapcase()) == i:\n            count += 1\n    return count\n\n# Solution 5\n# O(n) time / O(1) space\n# n - length of string\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].isalpha() and string.find(string[i].swapcase()) == i:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n#count_char_position(\"xbcefg\")\n\n# Write a python function to count the numbers between 100 and 200\n# 200\n\n# Write a python function to count the numbers between 100 and 200\n# 200\n\n#Write a python function to check whether a given number is a prime number or not.\n#assert is_prime(2) == True\n\n#Write a python function to check whether a given number is a prime number or not.\n#assert is_prime(3) == True\n\n#Write a python function to check whether a given number is a prime number or not.\n#assert is_prime(13) == True\n\n#Write a python function to check whether a given number is a prime number or not.\n#assert is_prime(15) == False\n\n#Write a python function to check whether a given number is a palindrome number or not.\n#assert is_palindrome(22) == True\n\n#Write a python function to check whether a given number is a palindrome number or not.\n#assert is_palindrome(21) == False\n\n#Write a python function to print all the prime numbers between 1 to 200.\n#prime_numbers(200)\n\n#Write a python function to print all the prime numbers between 1 to 200.\n#prime_numbers(200)\n\n#Write a python function to print all the prime numbers between 1 to 200.\n#prime_numbers(200)\n\n#Write a python function to print all the prime numbers between 1 to 200.\n#prime_numbers(200)\n\n#Write a python function to print all the prime numbers between 1 to 200.\n#prime_numbers(200)\n\n#Write a python function to print all the prime numbers between 1 to 200.\n#prime_numbers(200)\n\n#Write a python function to print all the prime numbers between ", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\nimport string\n\ndef count_char_position(text):\n    result = {}\n    for char in string.ascii_lowercase + string.ascii_uppercase:\n        result[char] = text.count(char)\n    return result\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(word):\n    # your code here\n    pos_dict = {'a':0, 'b':0, 'c':0, 'd':0, 'e':0, 'f':0, 'g':0, 'h':0, 'i':0, 'j':0, 'k':0, 'l':0, 'm':0, 'n':0, 'o':0, 'p':0, 'q':0, 'r':0, 's':0, 't':0, 'u':0, 'v':0, 'w':0, 'x':0, 'y':0, 'z':0}\n    for letter in word:\n        if letter.isalpha():\n            pos_dict[letter.lower()] += 1\n    return max(pos_dict.values())\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n# + id=\"sSI4NcrASc0h\"\ndef count_char_position(text):\n  for char in text:\n    if char.isupper():\n      upper += 1\n    elif char.islower():\n      lower += 1\n  return print(upper, lower)\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"E9ok7QCfSqno\" outputId=\"d8d52981-005b-46a8-e01b-f1a804a3759b\"\ncount_char_position(\"xbcefg\")\n\n# + [markdown] id=\"J-vH3F3eS2Kw\"\n# ## Write a python function to create a function named \u201cmy_function\u201d which prints a string \u201cHello my name is (your name)\u201d (name is replaced by user)\n\n# + id=\"bGyni7tRTJty\"", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n#solution\n\ndef count_char_position(string):\n    \"\"\"\n    Count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n    count = 0\n    alphabet_chars = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in string:\n        if letter.lower() in alphabet_chars:\n            count += 1\n    return count\n    \n#tests\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(text):\n  counter = 0\n  for i in text:\n    if i in 'abcdefghijklmnopqrstuvwxyz':\n      counter += 1\n  return counter\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\nimport string\n\ndef count_char_position(text):\n    char_counts = {x:0 for x in string.ascii_letters}\n    for char in text:\n        if char in char_counts:\n            char_counts[char] += 1\n    return sum(char_counts.values())\n\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(list,x):\n    cnt = 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if i != j and (list[i]^list[j])%2==0:\n                cnt +=1\n\n    return cnt\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(n, x):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if(x ^ n[i] ^ n[j])%2 == 0:\n                count+=1\n    return count", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i] ^ arr[j] %2 == 0):\n                count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(array, n):\n    #Write code here\n    count=0\n    for i in array:\n        for j in array:\n            if(i^j)%2==0:\n                count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(n,sum):\n    count = 0\n    for i in range(len(n)):\n        for j in range(i+1,len(n)):\n            if n[i]^n[j]==sum:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr, n):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if((arr[i]^arr[j])%2==0):\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\nimport collections\ndef find_even_Pair(a, N):\n    # Python3 program to count pairs with xor as an even\n    # number in given array of integers\n  \n    # To store pairs with xor as an even number\n    # using Counter\n    cnt = collections.Counter()\n  \n    # To store xor of two numbers with same index\n    xor_arr = [0] * (len(a))\n  \n    # To store number of pairs with xor as an even number\n    even = 0\n  \n    # To store xor of all pairs with xor as an even number\n    xor_even = 0\n  \n    # To store index of first number of each pair\n    i = [0] * (len(a))\n  \n    # To store index of second number of each pair\n    j = [0] * (len(a))\n  \n    # Initializing first element of xor array\n    xor_arr[0] = a[0]\n  \n    # Calculating xor of all array elements\n    for i in range(1, len(a)):\n        xor_arr[i] = xor_arr[i-1] ^ a[i]\n  \n    # Traverse the array for finding pairs with\n    # xor as an even number\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n  \n            # If xor is even, then increment even\n            # and store first and second index\n            if xor_arr[i] ^ xor_arr[j] == 0:\n                even += 1\n                cnt[i] += 1\n                i += 1\n                j += 1\n                continue\n  \n            # If xor is odd, then store first\n            # and second index\n            else:\n                i += 1\n                j += 1\n                if cnt[i-1] != 0:\n                    i = i - cnt[i-1]\n                if cnt[j-1] != 0:\n                    j = j - cnt[j-1]\n                cnt[i] += 1\n                cnt[j] += 1\n  \n    # Calculating xor of all even pairs\n    for i in range(len(a)):\n        xor_even ^= xor_arr[i]\n  \n    return even\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,n):\n  count = 0\n  for i in range(0,n):\n    for j in range(i+1,n):\n      if arr[i] ^ arr[j]%2 == 0:\n        count+=1\n  return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    power = 2\n    while power < n:\n        power *= 2\n    return power\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n > 0:\n        x = 1\n        while x < n:\n            x *= 2\n    return x\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n\tif n <= 0:\n\t\treturn 1\n\n\telse:\n\t\treturn 2 ** ((n - 1).bit_length())\n\ndef test_function(test_case):\n    answer = next_Power_Of_2(test_case[0])\n    if answer == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[0, 1],\n               [1, 1],\n               [2, 2],\n               [3, 4],\n               [4, 4],\n               [5, 8],\n               [6, 8],\n               [7, 8],\n               [8, 8],\n               [9, 16]])\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    return 1<<(n-1).bit_length()\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\nfrom math import log2\n\n\ndef next_Power_Of_2(n):\n    return 2 ** (int(log2(n)) + 1)\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    return 2 ** (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n# Solution:\n\ndef next_Power_Of_2(n):\n    if n == 1:\n        return 2\n    while n & (n - 1):\n        n &= n - 1\n    return n << 1\n\n# Test cases:", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n#Solution\ndef next_Power_Of_2(n):\n    return 2**((n-1).bit_length())", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    return 2**((n-1).bit_length())", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_power_of_2(n):\n  return 1 << (n - 1).bit_length()\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,ele):\n    count = 0\n    for i in arr:\n        if i == ele:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    if num in arr:\n        return arr.count(num)\n    else:\n        return 0\n    ", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,num):\n\tcount = 0\n\tfor x in arr:\n\t\tif x == num:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, n):\n    count = 0\n    for i in arr:\n        if i == n:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\nimport sys\ndef frequency(arr,n):\n    count = 0\n    for i in arr:\n        if i == n:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count = count+1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(nums, target):\n    pass", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\nfrom typing import List\n\n\ndef frequency(arr: List[int], num: int) -> int:\n    return sum(x == num for x in arr)\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,n):\n    count = 0\n    for i in arr:\n        if n==i:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(a,n):\n    return a.count(n)\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    result = 0\n    result = [0, 1, 2]\n    for i in range(3,n+1):\n        result.append(result[i-1] + result[i-2])\n    return result[n]\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef get_pell(n):\n    \"\"\"\n    A simple recursive method to calculate pell number.\n    This will work if you have a little bit more memory.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_pell(n - 1) + get_pell(n - 2)\n\n\ndef get_pell_memoized(n):\n    \"\"\"\n    A more efficient method to calculate pell number.\n    This works with infinite memory as it has a cache.\n    \"\"\"\n    return sum(get_pell(i) for i in range(1, n + 1))\n\n\ndef get_pell_math(n):\n    \"\"\"\n    Another method to calculate the pell numbers.\n    \"\"\"\n    from math import sqrt\n\n    return int(sqrt(2 * n) * (sqrt(2 * n) + 1))\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    pell = 2\n    for i in range(2, n):\n        pell = 2*pell + i*i\n    return pell\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Return the nth pell number.\n    \"\"\"\n    pell_nums = [0, 1]\n\n    for i in range(2, n+1):\n        pell_nums.append(pell_nums[i-1] + 2*pell_nums[i-2])\n    return pell_nums[n]\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\nfrom math import sqrt\n\ndef get_pell(n):\n    \"\"\"Returns the nth pell number.\"\"\"\n    if n <= 0:\n        return 0\n    p = 2\n    k = 1\n    for i in range(2, n + 1):\n        p = 2 * k + p\n        k = p - k\n    return p\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nfrom typing import List\n\n\ndef get_pell(n: int) -> int:\n    \"\"\"\n    >>> get_pell(4)\n    12\n    >>> get_pell(1)\n    2\n    >>> get_pell(0)\n    1\n    >>> get_pell(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be >= 0\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n\n    if n % 2 == 1:\n        return get_pell(n - 1) + 2 * get_pell(n - 2)\n    else:\n        return get_pell(n // 2) ** 2\n\n\ndef pell_sequence(n: int) -> List[int]:\n    \"\"\"\n    >>> pell_sequence(5)\n    [1, 2, 5, 12, 29]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n\n    return [get_pell(i) for i in range(n)]\n\n\ndef test_pell_sequence() -> None:\n    for i in range(10):\n        print(i, pell_sequence(i))\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    assert n >= 0, \"n must be greater than or equal to 0\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        temp = b\n        b = a + b\n        a = temp\n\n    return b\n\ndef get_pell(n):\n    assert n >= 0, \"n must be greater than or equal to 0\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        b, a = a + b, b\n    return b\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nfrom math import sqrt, floor\n\ndef get_pell(n):\n    return floor(sqrt(n*(2*n-1)) + sqrt(n*(2*n+1)))\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst,start,end):\n    sum = 0\n    for i in range(start,end+1):\n        sum = sum + lst[i]\n    return sum", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(num_list,start_index,end_index):\n    sum_val = 0\n    for i in range(start_index,end_index+1):\n        sum_val = sum_val + num_list[i]\n    return sum_val\n\n\nsum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],8,10)\n\n\n# ### Solution 2\n#\n# - If the first argument is an iterable, then we can make use of the built-in `sum` function. The first argument is also passed to `range` function, which returns an iterable object.\n#\n#\n# - If the first argument is a list or a tuple, then we need to iterate through the list/tuple and use the built-in `sum` function.\n\n# +\ndef sum_range_list_sol2(num_list,start_index,end_index):\n    sum_val = 0\n    if isinstance(num_list, (list, tuple)):\n        for i in range(start_index,end_index+1):\n            sum_val = sum_val + num_list[i]\n    else:\n        sum_val = sum(range(start_index,end_index+1), num_list)\n    return sum_val\n\nsum_range_list_sol2([2,1,5,6,8,3,4,9,10,11,8,12],8,10)\n# -\n\n# The difference in runtime between solution 1 and solution 2 is shown below.\n\n# %timeit sum_range_list_sol1([2,1,5,6,8,3,4,9,10,11,8,12],8,10)\n\n# %timeit sum_range_list_sol2([2,1,5,6,8,3,4", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\n# Define a procedure, sum_range_list, that takes\n# as input a list of numbers, a starting index,\n# and an ending index. It should return the sum\n# of the numbers in the range specified.\ndef sum_range_list(L,a,b):\n    sum = 0\n    i = a\n    while i<=b:\n        sum += L[i]\n        i += 1\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list, start, end):\n    assert len(list)>end, \"end is greater than the length of the list\"\n    assert len(list)>start, \"start is greater than the length of the list\"\n    sum = 0\n    for i in range(start, end+1):\n        sum += list[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(my_list,start,end):\n    return sum(my_list[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lst,start,end):\n    sum = 0\n    for i in range(start,end+1):\n        sum += lst[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lst,start,end):\n    return sum(lst[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(alist, start, end):\n    return sum(alist[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lst, start, end):\n    total = 0\n    for i in range(start, end + 1):\n        total += lst[i]\n    return total\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(sides):\n    \"\"\"\n    Computes the perimeter of a pentagon given the number of sides\n    \"\"\"\n    return sides*sides*3+2\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    \"find the perimeter of a pentagon\"\n    assert n >= 3, \"n must be >= 3\"\n    return 5*n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(num):\n    return num*5\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\nimport math\n\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    Returns the perimeter of a pentagon.\n\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(1)\n    5\n    >>> perimeter_pentagon(2)\n    14\n    >>> perimeter_pentagon(3)\n    24\n    >>> perimeter_pentagon(4)\n    35\n    \"\"\"\n    return n * 5\n\n\ndef test_perimeter_pentagon():\n    assert perimeter_pentagon(5) == 25\n    assert perimeter_pentagon(1) == 5\n    assert perimeter_pentagon(2) == 14\n    assert perimeter_pentagon(3) == 24\n    assert perimeter_pentagon(4) == 35\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    '''\n    n: the number of vertices\n    returns: the perimeter of a pentagon\n    '''\n    p = n * (5*n-3)//2\n    return p\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\nfrom math import sqrt\n\ndef perimeter_pentagon(n):\n    \"\"\"Returns the perimeter of a pentagon.\"\"\"\n    return n * (5 * n - 3) / 2\n\ndef test_pentagon_perimeter():\n    \"\"\"Test pentagon perimeter function\"\"\"\n    assert perimeter_pentagon(5)==25\n    assert perimeter_pentagon(1)==4\n    assert perimeter_pentagon(3)==12\n    assert perimeter_pentagon(2)==5\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return n * (5*n - 3)\n\n\n# ## Triangles\n#\n# ### Triangle\n# Write a function to find the area of a triangle. The function should take as input the length of each side of the triangle and return the area of the triangle.\n#\n#\n#\n#\n#\n\n# +\ndef triangle_area(side1, side2, side3):\n    # calculate the semi-perimeter\n    s = (side1 + side2 + side3)/2\n    # calculate the area of the triangle\n    area = ((s*(s-side1)*(s-side2)*(s-side3)) ** 0.5)\n    return area\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return 5*n\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    find the perimeter of a pentagon\n    \"\"\"\n    return 5*n\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    :param n: number of sides\n    :return: perimeter\n    \"\"\"\n    return int(((5*n)-2)*n/2)\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s):\n\ti = 0\n\tcount = 0\n\tfor i in s:\n\t\tif i == 's' and s[i+1] == 't':\n\t\t\tif s[i+2] == 'd':\n\t\t\t\tcount += 1\n\t\ti += 1\n\treturn count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    index = 0\n    while index != -1:\n        index = string.find(\"std\", index+1)\n        if index != -1:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s):\n    return s.count(\"std\")\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string:str)->int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == 'std':\n            count += 1\n    return count\n\ndef count_occurance(string:str)->int:\n    return string.count('std')\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str):\n    std_count = str.count(\"std\")\n    return std_count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for letter in string:\n        if letter == 'std':\n            count += 1\n\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n# 1.\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == 's':\n            if string[string.index(char) + 1] == 't':\n                if string[string.index(char) + 2] == 'd':\n                    count += 1\n    return count", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s):\n    if len(s) == 0 or len(s) == 1:\n        if s == \"std\":\n            return 1\n        return 0\n    if s[0:3] == \"std\":\n        return 1 + count_occurance(s[3:])\n    return count_occurance(s[1:])\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\nimport unittest\nimport random\n\ndef count_occurance(string: str) -> int:\n    \"\"\"\n    :param string: string to search for\n    :return: the number of occurances of string in the input string\n    \"\"\"\n    occurance = 0\n\n    for i in string:\n        if i == \"std\":\n            occurance += 1\n\n    return occurance\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    splchar_list = []\n    for i in string:\n        if i.isalnum():\n            splchar_list.append(i)\n    return ''.join(splchar_list)\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    string = \"\".join([char for char in string if char.isalnum()])\n    return string\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(x):\n    return ''.join(char for char in x if char.isalnum())\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n  return ''.join([ch for ch in string if ch.isalnum()])\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(word):\n    return ''.join([char for char in word if char.isalnum()])\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\nimport re\n\n\ndef remove_splchar(text):\n    return re.sub(r'[^\\w]', '', text)\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\nimport re\n\ndef remove_splchar(text):\n    return re.sub('[\\W_]+', '', text)\n\ndef remove_splchar1(text):\n    return re.sub('[^\\w\\s]', '', text)\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    s = \"\".join(filter(str.isalnum, s))\n    return s\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\nfrom collections import defaultdict\n\ndef group_keyvalue(lst):\n    d = defaultdict(list)\n    for k,v in lst:\n        d[k].append(v)\n    return dict(d)", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(kvs):\n    result = {}\n    for k,v in kvs:\n        if k not in result:\n            result[k] = []\n        result[k].append(v)\n    return result\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(keyvalue_list):\n    result = dict()\n    for key, value in keyvalue_list:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\nfrom collections import defaultdict\n\ndef group_keyvalue(pairs):\n    return {k: list(v) for k, v in defaultdict(list).update(pairs).items()}\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(l):\n    res = {}\n    for k, v in l:\n        if k in res:\n            res[k].append(v)\n        else:\n            res[k] = [v]\n    return res\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\nfrom collections import defaultdict\ndef group_keyvalue(list_of_tuples):\n    return defaultdict(list, list_of_tuples)\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(keyvalue):\n    # Initialize an empty dictionary.\n    # As you see, the result will have the same keys as the list\n    # you're grouping but the values will be lists.\n    result = {}\n\n    # For each item in the key-value list, use the first value as the\n    # key in the result dictionary and append the second value to the\n    # list at that key.\n    for item in keyvalue:\n        key = item[0]\n        value = item[1]\n        result.setdefault(key, []).append(value)\n\n    return result\n\n\n# Tests", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(kvpairs):\n    d = {}\n    for k,v in kvpairs:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n#group_keyvalue = lambda lst: {k: [v[1] for v in lst if v[0]==k] for k in [v[0] for v in lst]}\ngroup_keyvalue = lambda lst: {k: [v[1] for v in lst if v[0]==k] for k in map(lambda x: x[0], lst)}\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(lst):\n    d = {}\n    for key, value in lst:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(parenthese):\n    stack = []\n    valid_parenthese = {'(':')', '{':'}', '[':']'}\n    for parenthese_char in parenthese:\n        if parenthese_char in valid_parenthese:\n            stack.append(parenthese_char)\n        elif not stack or valid_parenthese[stack.pop()]!=parenthese_char:\n            return False\n    return not stack\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\nfrom collections import deque\n\n\ndef is_valid_parenthese(string):\n    \"\"\"\n    Returns True if string is a valid parenthese else returns False\n\n    :param string:\n    :return:\n    \"\"\"\n    opening_paren = {\"[\", \"(\", \"{\"}\n    closing_paren = {\"]\", \")\", \"}\"}\n    stack = deque()\n\n    for char in string:\n        if char in opening_paren:\n            stack.append(char)\n        elif char in closing_paren:\n            if len(stack) == 0:\n                return False\n            last_open_paren = stack.pop()\n            if not match(last_open_paren, char):\n                return False\n    return len(stack) == 0\n\n\ndef match(open, close):\n    if open == '[' and close == ']':\n        return True\n    elif open == '(' and close == ')':\n        return True\n    elif open == '{' and close == '}':\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\nfrom stack import Stack\n\n\ndef is_valid_parenthese(parenthese_str):\n    \"\"\"Checks if the given parenthese string is valid\n\n    Args:\n        parenthese_str (str): the string to be checked\n\n    Returns:\n        bool: True if valid, False otherwise\n    \"\"\"\n    stack = Stack()\n    for char in parenthese_str:\n        if char == '{':\n            stack.push(char)\n        elif char == '}':\n            if stack.is_empty():\n                return False\n            if stack.peek() != '{':\n                return False\n            stack.pop()\n        elif char == '(':\n            stack.push(char)\n        elif char == ')':\n            if stack.is_empty():\n                return False\n            if stack.peek() != '(':\n                return False\n            stack.pop()\n        elif char == '[':\n            stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n                return False\n            if stack.peek() != '[':\n                return False\n            stack.pop()\n    if stack.is_empty():\n        return True\n    return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\n# ### Solution\n\ndef is_valid_parenthese(s: str) -> bool:\n    brackets = {'(':')', '{':'}', '[':']'}\n    stack = []\n    for c in s:\n        if c in brackets:\n            stack.append(brackets[c])\n        elif not stack or stack.pop() != c:\n            return False\n    return not stack\n\n\n# # Palindrome Check\n#\n# https://leetcode.com/problems/valid-palindrome/\n#\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#\n# Note: For the purpose of this problem, we define empty string as valid palindrome.\n#\n# ### Example 1\n# ```\n# Input: s = \"A man, a plan, a canal: Panama\"\n# Output: true\n# Explanation: \"amanaplanacanalpanama\" is a palindrome.\n# ```\n#\n# ### Example 2\n# ```\n# Input: s = \"race a car\"\n# Output: false\n# Explanation: \"raceacar\" is not a palindrome.\n# ```\n\n# ### Solution\n#\n# ```python\n# def is_palindrome(s: str) -> bool:\n#     s = \"\".join(c.lower() for c in s if c.isalnum())\n#     return s == s[::-1]\n# ```\n#\n# or\n#\n# ```python\n# import re\n# def is_palindrome(s: str) -> bool:\n#     s = re.sub(\"[^a-zA-Z0-9]\", \"\", s).lower()\n#     return s == s[::-1]\n# ```\n\n# # Word Break\n#\n# https://leetcode.com/problems/word-break/\n#\n# Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n#\n# Note that the same word in the dictionary may be reused multiple times in the segmentation.\n#\n# ### Example 1:\n# ```", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\nimport sys\n\ndef is_valid_parenthese(p):\n    stack = []\n    open_brackets = [\"{\", \"(\", \"[\"]\n    close_brackets = [\"}\", \")\", \"]\"]\n    for char in p:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            last_open = stack.pop()\n            last_open_index = open_brackets.index(last_open)\n            if close_brackets.index(char) != last_open_index:\n                return False\n    return not stack\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    s = list(string)\n    p = {'(':')', '[':']', '{':'}'}\n    stack = []\n    for c in s:\n        if c in p:\n            stack.append(c)\n        elif not stack or p[stack.pop()]!=c:\n            return False\n    return not stack\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    d = {'(':')', '[':']', '{':'}'}\n    st = []\n    for c in string:\n        if c in d:\n            st.append(c)\n        elif not st or c != d[st.pop()]:\n            return False\n    return not st\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\n# function accepts a string of parenthese\ndef is_valid_parenthese(paren_string):\n    # stack for parenthese\n    stack = []\n\n    # loop for each paren in string\n    for paren in paren_string:\n        # if open parenthese, push onto stack\n        if paren == \"(\":\n            stack.append(paren)\n\n        # if close parenthese, check stack, pop off and check the close parenthese matches\n        elif paren == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    # if len of stack is 0, return True\n    return len(stack) == 0\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    left = [\"{\", \"(\", \"[\"]\n    right = [\"}\", \")\", \"]\"]\n    paretheses = []\n\n    for p in s:\n        if p in left:\n            paretheses.append(p)\n        else:\n            if len(paretheses) == 0:\n                return False\n            else:\n                p_peek = paretheses.pop()\n                if p_peek != left[right.index(p)]:\n                    return False\n    return len(paretheses) == 0\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    p = a+b+c\n    return p\n\ndef perimeter_triangle2(a,b,c):\n    p = 2*(a+b+c)\n    return p\n\n\n# + [markdown] slideshow={\"slide_type\": \"subslide\"}\n# ### Writing your own functions\n#\n# Creating a function is an important skill when programming in Python. You have already used functions such as `print()`, `len()`, and `int()`. \n#\n# You can define your own functions in Python. To do this, you use the `def` keyword followed by the name of the function, a list of parameters in parentheses, and a colon `:`.\n\n# + slideshow={\"slide_type\": \"-\"}\ndef hello_world():\n    print(\"Hello, World!\")\n\n\n# + [markdown] slideshow={\"slide_type\": \"-\"}\n# Once you define a function, you can \"call\" it whenever you want. For example, if you run the following cell, the function `hello_world()` will be executed.\n\n# + slideshow={\"slide_type\": \"fragment\"}\nhello_world()\n\n\n# + [markdown] slideshow={\"slide_type\": \"subslide\"}\n# A function can also take some arguments, which are put in the list of parameters.\n\n# + slideshow={\"slide_type\": \"-\"}\ndef hello_name(name):\n    print(\"Hello, {}!\".format(name))\n\n\n# + [markdown] slideshow={\"slide_type\": \"fragment\"}\n# In this case, when you call the function, you will need to provide the argument value(s).\n\n# + slideshow={\"slide_type\": \"fragment\"}\nhello_name(\"Jane\")\n\n# + [markdown] slideshow={\"slide_type\": \"subslide\"}\n# You can also define functions with multiple parameters.\n\n# + slideshow={\"slide_type\": \"-\"}\ndef add_numbers(num_1, num_2):\n    return num_1 + num_2\n\n\n# + [markdown] slideshow={\"slide_type\": \"fragment\"}\n# In this case, when you call the function, you will need to provide", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\treturn a+b+c", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    p=(a+b+c)\n    return p\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    \"\"\"Return perimeter of triangle\n\n    >>> perimeter_triangle(10,20,30)\n    60\n    >>> perimeter_triangle(10,10,10)\n    60\n    \"\"\"\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\nimport math\n\n\ndef perimeter_triangle(a, b, c):\n    result = a+b+c\n    return result\n\n\ndef perimeter_triangle(a, b, c):\n    perimeter = 2*a + 2*b + 2*c\n    return perimeter\n\n\ndef perimeter_triangle(a, b, c):\n    perimeter = 2*(a+b+c)\n    return perimeter\n\n\ndef perimeter_triangle(a, b, c):\n    perimeter = 2*(a+b+c)\n    return perimeter\n\n\ndef perimeter_triangle(a, b, c):\n    result = 2*(a+b+c)\n    return result\n\n\ndef perimeter_triangle(a, b, c):\n    result = 2*a + 2*b + 2*c\n    return result\n\n\ndef perimeter_triangle(a, b, c):\n    result = 2*a + 2*b + 2*c\n    return result\n\n\ndef perimeter_triangle(a, b, c):\n    perimeter = 2*(a+b+c)\n    return perimeter\n\n\ndef perimeter_triangle(a, b, c):\n    perimeter = 2*(a+b+c)\n    return perimeter\n\n\ndef perimeter_triangle(a, b, c):\n    perimeter = 2*a + 2*b + 2*c\n    return perimeter\n\n\ndef perimeter_triangle(a, b, c):\n    perimeter = 2*a + 2*b + 2*c\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\nfrom math import sqrt\n\ndef perimeter_triangle(side1, side2, side3):\n    return side1 + side2 + side3\n\ndef perimeter_triangle_rec(side1, side2, side3):\n    if side1 == side2 == side3:\n        return side1 + side2 + side3\n    else:\n        # base case\n        if side1 == side2 or side2 == side3:\n            return side1 + side2 + side3\n        elif side3 == side2 or side3 == side1:\n            return side1 + side2 + side3\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)\n\n#assert perimeter_triangle(10,20,30)==60\n#assert perimeter_triangle(2,2,2)==4\n#assert perimeter_triangle(2,3,4)==9\n#assert perimeter_triangle(1,4,5)==8\n#assert perimeter_triangle(2,4,5)==14\n#assert perimeter_triangle(2,2,6)==12\n#assert perimeter_triangle(1,4,7)==14\n#assert perimeter_triangle(1,1,5)==8\n#assert perimeter_triangle(1,2,3)==6\n#assert perimeter_triangle(1,2,4)==8\n#assert perimeter_triangle(1,2,5)==10\n#assert perimeter_triangle(1,3,4)==9\n#assert perimeter_triangle(1,3,5)==11\n#assert perimeter_triangle(1,4,5)==10\n#assert perimeter_triangle(1,4,6)==12\n#assert perimeter_triangle(1,5,6)==13\n#assert perimeter_triangle(1,5,7)==15\n#assert perimeter_triangle(1,6,7)==17\n#assert perimeter_triangle(1,7,8)==19\n#assert perimeter_triangle(1,8,9)==21\n#assert perimeter_triangle(1,9,10)==23\n#assert perimeter_triangle(1,10,11)==25\n#assert perimeter_triangle(1,11,12)==27\n#assert perimeter_triangle(1,12,13)==29\n#assert perimeter_triangle(1,13,14)==31\n#assert perimeter_triangle(1,14,15)==33\n#assert perimeter_triangle(1,15,16)==35\n#assert perimeter_triangle(1,16,1", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    return a + b + c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(x, y, z):\n    if(x==0 or y==0 or z==0):\n        return -1\n    else:\n        return x+y+z\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(a, b):\n    for i in range(a,b):\n        if i > 1:\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    if i % 5 == 0:\n                        if i % 7 == 0:\n                            if i % 11 == 0:\n                                if i % 13 == 0:\n                                    if i % 17 == 0:\n                                        if i % 19 == 0:\n                                            return (i,i+2)\n    return (0,0)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nimport functools\nfrom typing import List\n\n\ndef find_two_distinct(start: int, end: int) -> List[int]:\n    \"\"\"\n    :param start: inclusive start index\n    :param end: inclusive end index\n    :return: list of two distinct numbers whose lcm lies within the given range\n    \"\"\"\n    return [x for x in range(start, end + 1)\n            if functools.reduce(lambda a, b: a * b, [a for a in range(1, x + 1) if x % a == 0])]\n\n\ndef main():\n    print(find_two_distinct(3, 8))\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nfrom math import gcd\n\ndef lcm_finder(first, last):\n    for i in range(first, last+1):\n        if gcd(i, first) == 1:\n            return i\n    return -1\n\ndef answer(first, last):\n    return lcm_finder(first, last), lcm_finder(first, last) + 1\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nfrom math import gcd\n\ndef answer(l,r):\n    def find_gcd(a, b):\n        while a != b:\n            if a < b:\n                a, b = b, a\n            a = a - b\n        return a\n    def find_lcm(a, b):\n        return a * b / find_gcd(a,b)\n    for a in range(l,r+1):\n        for b in range(l,r+1):\n            if find_gcd(a,b) == 1 and find_lcm(a,b) in range(l,r+1):\n                return (a,b)\n\nanswer(1,2)\nanswer(4,7)\nanswer(5,15)\nanswer(3,8)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\n# Answer\ndef answer(l,r):\n    for i in range(l,r):\n        if i%lcm(l,r) == 0:\n            return (lcm(l,r),i)\n\ndef lcm(a,b):\n    if a < b:\n        return lcm(b,a)\n    while b != 0:\n        temp = b\n        b = a%b\n        a = temp\n    return a", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(minRange, maxRange):\n    for i in range(minRange, maxRange+1):\n        for j in range(minRange, maxRange+1):\n            if (i==j):\n                continue\n            if (i * j > maxRange):\n                break\n            if (i * j > minRange):\n                return i, j\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\n# Solution\ndef answer(L, R):\n    for i in range(L,R):\n        if i % 2 == 0:\n            if i % 3 == 0:\n                if i % 5 == 0:\n                    return i, i+2\n    return 0\n\n# Tests", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nimport math\n\n\ndef answer(a, b):\n    for l in range(int(math.sqrt(a)), int(math.sqrt(b)) + 1):\n        if a % l == 0 and b % l == 0 and a // l != b // l:\n            return (a, b)\n\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(array, text):\n    for i in array:\n        if i in text:\n            return \"Matched!\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n#%%\ndef string_literals(string_list,text):\n  for string in string_list:\n    if string in text:\n      return 'Matched!'\n  return 'Unmatched!'\n#%%", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(strings, string):\n    for s in strings:\n        if s in string:\n            return \"Matched!\"\n    return \"Not matched!\"\n\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literal,string):\n    \"\"\"\n    :param literal: list of literal strings\n    :param string: target string\n    :return: string\n    \"\"\"\n    for i in literal:\n        if i in string:\n            return 'Matched!'\n    return 'Not Found!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals_list,string):\n    for lit in literals_list:\n        if lit not in string:\n            return 'Not Matched'\n    return 'Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,string):\n    for lit in literals:\n        if lit in string:\n            return 'Matched!'\n    return 'Not matched!'\n\ndef test_function(test_case,expected):\n    actual=string_literals(test_case[0],test_case[1])\n    if actual==expected:\n        print(\"Passed test for:\",test_case)\n    else:\n        print(\"Didn't pass test for:\",test_case,\"expected\",expected,\"got\",actual)\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\nfrom typing import List\n\ndef string_literals(literals: List[str], string: str) -> str:\n    \"\"\"\n    Checking string contains all the literals.\n\n    Parameters\n    ----------\n    literals : List[str]\n        list of literals\n    string : str\n        string to check\n\n    Returns\n    -------\n    str\n        Matched! if string contains all the literals\n        else, Not Matched!\n    \"\"\"\n    return 'Matched!' if all(literal in string for literal in literals) else 'Not Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(list_literals,string_to_search):\n    \"\"\"\n    This function search some literals strings in a string.\n    \"\"\"\n    for literal in list_literals:\n        if literal in string_to_search:\n            return \"Matched!\"\n    return \"Not matched\"\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(seq, text):\n    for lit in seq:\n        if lit in text:\n            return \"Matched!\"\n    return \"Not matched\"\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(search_literals,string):\n    if search_literals[0] in string:\n        print('Matched!')\n    else:\n        print('Not matched!')\nstring_literals(['a'], 'language')<jupyter_output>Matched!<jupyter_text>**Question 22**Write a Python program to find the Python version you are using.\nfrom sys import version"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\nfrom math import sqrt\n\n\ndef is_num_keith(num):\n    \"\"\"\n    :param num: the number to check if it is a keith number or not\n    :return: True or False\n    \"\"\"\n    if num % 2 == 0 or num == 1:\n        return False\n\n    square_root = int(sqrt(num))\n    for i in range(3, square_root, 2):\n        if num % i == 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n    if n == 1:\n        return True\n\n    for i in range(1, n):\n        if n % i == 0:\n            return is_num_keith(i)\n\n    return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\nfrom typing import List\n\nfrom keith.math.prime_number import is_prime_number\n\n\ndef is_num_keith(num: int) -> bool:\n    if not num > 0:\n        return False\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    primes: List[int] = []\n    divisor = num // 2\n    while divisor > 1:\n        if is_prime_number(divisor):\n            primes.append(divisor)\n        divisor -= 1\n\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    num = str(num)\n    if len(num) == 1:\n        return True\n    else:\n        for i in range(1, len(num)):\n            if num[i-1] == num[i]:\n                return True\n        return False\n        ", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    if n % 4 == 0 and n % 100 != 0 or n % 400 == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num == 2:\n        return False\n    if num % 2 == 0:\n        return False\n    sqr = int(num ** 0.5)\n    for i in range(3, sqr+1, 2):\n        if num % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    return num % sum_of_digits(num) == 0\n\n\ndef sum_of_digits(num):\n    s = 0\n    while num > 0:\n        s += num % 10\n        num = num // 10\n    return s\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return False\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return False\n    if num == 4:\n        return True\n    if num == 5:\n        return False\n    if num == 6:\n        return True\n    if num == 7:\n        return False\n    if num == 8:\n        return True\n    if num == 9:\n        return False\n    if num == 10:\n        return True\n    if num == 11:\n        return False\n    if num == 12:\n        return True\n    if num == 13:\n        return False\n    if num == 14:\n        return True\n    if num == 15:\n        return False\n    if num == 16:\n        return True\n    if num == 17:\n        return False\n    if num == 18:\n        return True\n    if num == 19:\n        return False\n    if num == 20:\n        return True\n    if num == 21:\n        return False\n    if num == 22:\n        return True\n    if num == 23:\n        return False\n    if num == 24:\n        return True\n    if num == 25:\n        return False\n    if num == 26:\n        return True\n    if num == 27:\n        return False\n    if num == 28:\n        return True\n    if num == 29:\n        return False\n    if num == 30:\n        return True\n    if num == 31:\n        return False\n    if num == 32:\n        return True\n    if num == 33:\n        return False\n    if num == 34:\n        return True\n    if num == 35:\n        return False\n    if num == 36:\n        return True\n    if num == 37:\n        return False\n    if num == 38:\n        return True\n    if num == 39:\n        return False\n    if num == 40:\n        return True\n    if num == 41:\n        return False\n    if num =="], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\ndef distance_lat_long(lat1,long1,lat2,long2):\n    R = 6373.0\n    lat1 = radians(lat1)\n    long1 = radians(long1)\n    lat2 = radians(lat2)\n    long2 = radians(long2)\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*(sin(dlon/2)**2)\n    c = 2*asin(sqrt(a))\n    return R*c\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    #Your code goes here\n    return\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n    radius = 6371\n    a1 = math.radians(lat1)\n    a2 = math.radians(lat2)\n    b1 = math.radians(lon1)\n    b2 = math.radians(lon2)\n    c1 = math.sin(a1)*math.sin(a2) + math.cos(a1)*math.cos(a2)*math.cos(b2-b1)\n    return radius*math.acos(c1)\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lng1,lat2,lng2):\n\tr = 6373.0\n\n\td_lat = radians(lat2-lat1)\n\td_lng = radians(lng2-lng1)\n\n\ta = sin(d_lat/2) * sin(d_lat/2) + cos(radians(lat1)) * cos(radians(lat2)) * sin(d_lng/2) * sin(d_lng/2)\n\tc = 2 * atan2(sqrt(a), sqrt(1-a))\n\td = r * c\n\n\treturn d\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, long1, lat2, long2):\n    \"\"\"\n    Returns the distance in meters between two points given in latitude and longitude\n    \"\"\"\n    rad_factor = 1 / 111320\n    lat1_rad = lat1 * (math.pi / 180)\n    long1_rad = long1 * (math.pi / 180)\n    lat2_rad = lat2 * (math.pi / 180)\n    long2_rad = long2 * (math.pi / 180)\n    d_lat = (lat2_rad - lat1_rad)\n    d_long = (long2_rad - long1_rad)\n    return math.sqrt(d_lat * d_lat + d_long * d_long) * rad_factor * 1000\n\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    \"\"\"\n    Return distance between two points using latitude and longitude\n    \"\"\"\n    R = 6373.0\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    from math import sin, cos, sqrt, atan2, radians\n    # approximate radius of earth in km\n    R = 6373.0\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\n#def distance_lat_long(lat1, lon1, lat2, lon2):\n    #return distance_lat_long(lat1, lon1, lat2, lon2)\n\ndef test_distance_lat_long():\n    assert distance_lat_long(23.5, 67.5, 25.5, 69.5) == 12179.372041317429\n    assert distance_lat_long(23.5, 67.5, 25.5, 69.5) == 12179.372041317429\n    assert distance_lat_long(23.5, 67.5, 25.5, 69.5) == 12179.372041317429\n    assert distance_lat_long(23.5, 67.5, 25.5, 69.5) == 12179.372041317429\n    assert distance_lat_long(23.5, 67.5, 25", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\nimport math\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    if lon1==lon2 and lat1==lat2:\n        return 0\n    else:\n        return 6371000*math.acos(math.sin(math.radians(lat1))*math.sin(math.radians(lat2))+math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.cos(math.radians(lon2-lon1)))\n\n# Driver Code", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nfrom math import radians, cos, sin, asin, sqrt\n\ndef distance_lat_long(latitude1, longitude1, latitude2, longitude2):\n    \"\"\"\n    This is a function for calculating the distance between two locations,\n    input is two locations' latitude and longitude,\n    output is the distance between these two locations in km.\n    \"\"\"\n    # The math module contains a function named\n    # radians which converts from degrees to radians.\n    lon1 = radians(longitude1)\n    lon2 = radians(longitude2)\n    lat1 = radians(latitude1)\n    lat2 = radians(latitude2)\n\n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n\n    c = 2 * asin(sqrt(a))\n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return(c * r)\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\nimport math\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    \"\"\"\n    Calculates the distance in kilometers between two points using latitude and longitude.\n\n    Returns:\n        distance (float)\n    \"\"\"\n    # converting degrees to radians\n    lat1 = math.radians(lat1)\n    long1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    long2 = math.radians(long2)\n    # finding the distance\n    dlong = long2 - long1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlong/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    r = 6371\n    distance = round(c * r, 2)\n    return distance\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(arr, n):\n    if n==1:\n        return arr[0]\n    else:\n        common = \"\"\n        for i in range(len(arr[0])):\n            flag = 1\n            for j in range(1, n):\n                if i>=len(arr[j]) or arr[0][i]!=arr[j][i]:\n                    flag = 0\n                    break\n            if flag:\n                common+=arr[0][i]\n        return common\n            \n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, N):\n    if N == 1: return strings[0]\n    result = \"\"\n    for i in range(min([len(x) for x in strings])):\n        char = strings[0][i]\n        for j in range(1,N):\n            if char != strings[j][i]:\n                return result\n        result += char\n    return result\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\nimport os\nimport sys\n\n# O(n) time and space\ndef common_prefix(strs, min_len=3):\n    # Corner case, if we have just one string, return it\n    if len(strs) == 1:\n        return strs[0]\n    # Base case, if we have just two strings, find the common prefix of them\n    if len(strs) == 2:\n        return common_prefix_helper(strs[0], strs[1])\n    # Recursive case, find the common prefix of the first two strings, then the common prefix of the remaining strings\n    return common_prefix_helper(common_prefix_helper(strs[0], strs[1]), common_prefix_helper(*strs[2:]))\n\n\n# Helper function to return the common prefix of two strings\ndef common_prefix_helper(str1, str2):\n    common_prefix = \"\"\n    # Iterate over the strings, if the current character in both strings match, append it to the common prefix\n    for i in range(min_len):\n        if str1[i] == str2[i]:\n            common_prefix += str1[i]\n        else:\n            # If the characters don't match, return the common prefix\n            return common_prefix\n    # If the loop completes, we have found the common prefix\n    return common_prefix\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\nimport math\n\ndef common_prefix(arr, n):\n    min_arr = sorted(arr, key=len)[:n]\n    common_prefix = ''\n\n    for i in range(len(min_arr[0])):\n        for j in range(1, n):\n            if min_arr[0][i] != min_arr[j][i]:\n                return common_prefix\n\n        common_prefix += min_arr[0][i]\n\n    return common_prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\nimport math\nfrom typing import List\n\n\ndef common_prefix(string_list: List[str], n: int) -> str:\n    if n == 0:\n        return \"\"\n\n    if len(string_list) == 0:\n        return \"\"\n\n    if n == 1:\n        return string_list[0]\n\n    if len(string_list) == 1:\n        return string_list[0][:n]\n\n    pivot = math.floor(n / 2)\n    pivot_val = string_list[pivot][:n]\n\n    left_val = common_prefix(string_list[:pivot], pivot)\n    right_val = common_prefix(string_list[pivot:], n - pivot)\n\n    return common_prefix_helper(left_val, right_val)\n\n\ndef common_prefix_helper(left: str, right: str) -> str:\n    if len(left) == 0:\n        return right\n    if len(right) == 0:\n        return left\n    if left[0] != right[0]:\n        return \"\"\n\n    return left[:1] + common_prefix_helper(left[1:], right[1:])\n\n\ndef test_common_prefix():\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == \"ta\"\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 5) == \"tab\"\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 1) == \"\"\n\n\ntest_common_prefix()\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef longest_common_prefix(strings: list, max_len: int) -> str:\n    # Set the first word to be used as a base.\n    base = strings[0]\n    # If the max length is equal to the length of the word, return the word.\n    if len(base) == max_len:\n        return base\n    # Otherwise, slice the word and check if all the words are equal.\n    for i in range(max_len):\n        if all(base[:i] == s[:i] for s in strings):\n            return base[:i]\n    # Return the first word if the loop did not return any value.\n    return base\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(words, l):\n    \"\"\"O(ln(n^2) time | O(1) space\"\"\"\n    if l == 0:\n        return \"\"\n    elif l == 1:\n        return words[0]\n    else:\n        prefix = common_prefix(words, l - 1)\n        prefix_index = len(prefix)\n        for word in words:\n            if word[:prefix_index] == prefix:\n                prefix = prefix[:prefix_index]\n            else:\n                prefix = prefix[:prefix_index - 1]\n                break\n        return prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strs, n):\n    if n == 0:\n        return ''\n    prefix = strs[0][:n]\n    for i in range(1, len(strs)):\n        if strs[i][:n] != prefix:\n            return prefix[:len(prefix) - 1]\n    return prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# Longest common prefix of two strings\n\n\ndef longest_common_prefix(first_string, second_string):\n    \"\"\"\n    Returns the longest common prefix in first_string and second_string\n    \"\"\"\n    for i, j in zip(first_string, second_string):\n        if i != j:\n            return first_string[:i]\n    return first_string\n\n\n# Longest common prefix of list of strings\n\n\ndef longest_common_prefix2(list_of_strings):\n    \"\"\"\n    Returns the longest common prefix in list_of_strings\n    \"\"\"\n    if len(list_of_strings) == 0:\n        return \"\"\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    first, second, *tail = list_of_strings\n    return longest_common_prefix(first, second) + longest_common_prefix2(tail)\n\n\n# Longest common prefix of k strings\n\n\ndef longest_common_prefix3(list_of_strings):\n    \"\"\"\n    Returns the longest common prefix in list_of_strings\n    \"\"\"\n    if len(list_of_strings) == 0:\n        return \"\"\n    first = list_of_strings[0]\n    return first if all(first.startswith(s) for s in list_of_strings) else longest_common_prefix3(list_of_strings[1:])\n\n\n# Longest common prefix in k strings\n\n\ndef longest_common_prefix4(list_of_strings):\n    \"\"\"\n    Returns the longest common prefix in list_of_strings\n    \"\"\"\n    if len(list_of_strings) <= 1:\n        return list_of_strings[0] if len(list_of_strings) else ''\n\n    # Find the shortest string\n    shortest = min(list_of_strings, key=len)\n    # Generate the list of all the strings which can be made by taking\n    # the first letter of the shortest string and appending it to\n    # the remaining strings in the array.\n    substrings = [shortest[0] + s[1:] for s in"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\ndef find_character(s):\n    res = []\n    res.append(re.findall(r'[A-Z]',s))\n    res.append(re.findall(r'[a-z]',s))\n    res.append(re.findall(r'[^\\w\\s]',s))\n    res.append(re.findall(r'[0-9]',s))\n    return res\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(s):\n    # write your logic to return the tuple (uppercase, lowercase, special_char, numeric)\n    # uppercase = re.findall(r'[A-Z]',s)\n    # lowercase = re.findall(r'[a-z]',s)\n    # special_char = re.findall(r'[^a-zA-Z0-9]',s)\n    # numeric = re.findall(r'\\d',s)\n    uppercase = []\n    lowercase = []\n    special_char = []\n    numeric = []\n    \n    for i in range(len(s)):\n        if s[i].isupper():\n            uppercase.append(s[i])\n        elif s[i].islower():\n            lowercase.append(s[i])\n        elif s[i].isdigit():\n            numeric.append(s[i])\n        else:\n            special_char.append(s[i])\n    \n    return (uppercase, lowercase, special_char, numeric)\n    \n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(s):\n    a = re.findall(r'[a-z]', s)\n    b = re.findall(r'[A-Z]', s)\n    c = re.findall(r'[0-9]', s)\n    d = re.findall(r'[^a-zA-Z0-9]', s)\n    return a, b, c, d\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\n#Solution 1\nimport re\ndef find_character(s):\n    t = re.findall(r'[A-Z]', s)\n    l = re.findall(r'[a-z]', s)\n    p = re.findall(r'[!@#$%&*]', s)\n    d = re.findall(r'[0-9]', s)\n    return (t, l, p, d)\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\n# Write your code here\nimport re\ndef find_character(string):\n    capital = re.findall('[A-Z]',string)\n    lower = re.findall('[a-z]',string)\n    special = re.findall('[^a-zA-Z0-9]',string)\n    number = re.findall('[0-9]',string)\n    \n    return capital, lower, special, number\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    uppercase = []\n    lowercase = []\n    special_characters = []\n    numeric_values = []\n    for i in string:\n        if i.isupper():\n            uppercase.append(i)\n        if i.islower():\n            lowercase.append(i)\n        if i.isnumeric():\n            numeric_values.append(i)\n        else:\n            special_characters.append(i)\n    return uppercase, lowercase, special_characters, numeric_values\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\ndef find_character(string):\n    uppercase = [x for x in string if x.isupper()]\n    lowercase = [x for x in string if x.islower()]\n    special = [x for x in string if x.isalpha() == False]\n    numeric = [x for x in string if x.isnumeric()]\n    return uppercase, lowercase, special, numeric\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\n\ndef find_character(str):\n    \"\"\"\n    :param str:\n    :return:\n    \"\"\"\n    upper = []\n    lower = []\n    special = []\n    numeric = []\n\n    for i in str:\n        if i.isupper():\n            upper.append(i)\n        if i.islower():\n            lower.append(i)\n        if i.isnumeric():\n            numeric.append(i)\n        if i.isalnum():\n            special.append(i)\n\n    return upper, lower, special, numeric\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\n\ndef find_character(string):\n    upper_case = re.findall('[A-Z]', string)\n    lower_case = re.findall('[a-z]', string)\n    special_character = re.findall('[^a-zA-Z0-9]', string)\n    digit = re.findall('[0-9]', string)\n    return (upper_case, lower_case, special_character, digit)\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n# Write your code here\ndef find_character(s):\n    t,h,g,s = [],[],[],[]\n    for i in s:\n        if i.isalpha():\n            t.append(i)\n        elif i.islower():\n            h.append(i)\n        elif i.isupper():\n            g.append(i)\n        else:\n            s.append(i)\n    return t,h,g,s\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k1, k2):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] == k1 or arr[j] - arr[i] == k2:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\n# -----------------\n# Complexity Analysis\n# -----------------\n\n# Time Complexity: O(nlogn)\n# We need to sort the array first.\n\n# Space Complexity: O(n)\n# The space required depends on the size of the input array.\n\n\ndef count_pairs(arr, k, target):\n    arr = sorted(arr)\n    count = 0\n    for i in range(len(arr)):\n        # check for target first because arr[i]+k > target\n        if i < len(arr) - 1 and arr[i] + k > target:\n            break\n        j = binary_search(arr, i + 1, len(arr) - 1, target - arr[i])\n        if j != -1:\n            count += (j - i)\n    return count\n\n\ndef binary_search(arr, left, right, target):\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\narr = [1, 5, 3, 4, 2]\nk = 5\ntarget = 3", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, target):\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                cnt += 1\n    return cnt\n\n\ndef main():\n    print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n\n\nmain()\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nimport collections\nfrom typing import List\n\n\ndef count_pairs(arr: List[int], k: int) -> int:\n    count_num = collections.Counter(arr)\n    count = 0\n    for num, count_occurrence in count_num.items():\n        if k == 0 and count_occurrence > 1:\n            count += count_occurrence - 1\n        elif k != 0 and num - k in count_num and count_occurrence > 1:\n            count += count_occurrence - 1\n    return count\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nfrom typing import List\n\n\ndef count_pairs(arr: List[int], k: int, n: int) -> int:\n    arr.sort()\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] + arr[j] <= k:\n            count += (j - i)\n            i += 1\n        else:\n            j -= 1\n    return count\n\n\ndef test_count_pairs():\n    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n    assert count_pairs([1, 9, 3, 4, 2], 5, 3) == 0\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nimport itertools\n\ndef count_pairs(arr, k, n):\n    seen = set()\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            s = arr[i] + arr[j]\n            if s == k:\n                count += 1\n                seen.add((i, j))\n\n            if s == k+1:\n                if (j, i) not in seen:\n                    count += 1\n                    seen.add((j, i))\n\n            if s == k-1:\n                if (i, j) not in seen:\n                    count += 1\n                    seen.add((i, j))\n\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n\n\ndef count_pairs(nums: List[int], k: int, step: int) -> int:\n    c = Counter(nums[::step])\n    return sum(\n        (c[num - k] + c[num + k] - 1 if k != 0 else c[num + k])\n        for num in nums[1::step]\n    )\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    nums_set = set(nums)\n    for i in nums_set:\n        for j in nums_set:\n            if i != j and abs(i - j) == k:\n                count += 1\n\n    return count\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(array: list, k: int, n: int) -> int:\n    if k == 0 or n == 0:\n        return 0\n    \n    counter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if array[j] - array[i] == k:\n                counter += 1\n    \n    return counter\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom typing import List\n\n\ndef count_pairs(arr: List[int], k: int, l: int = 0) -> int:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            count += 1\n        if i > l:\n            if arr[i] - arr[i - 1] == k:\n                count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(my_list, specific_num):\n    for num in my_list:\n        if num > specific_num:\n            print(num)\n\n#print(greater_specificnum([220, 330, 500],200))\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(l,x):\n    return any(i>x for i in l)\n\n\ndef test_specificnum():\n    assert greater_specificnum([220, 330, 500],200)==True\n    assert greater_specificnum([10, 20, 30],40)==False\n    assert greater_specificnum([10, 20, 30],30)==True\n    assert greater_specificnum([10, 20, 30],20)==True\n    assert greater_specificnum([10, 20, 30],10)==True\n    assert greater_specificnum([10, 20, 30],0)==False\n    assert greater_specificnum([10, 20, 30],-10)==False\n    assert greater_specificnum([10, 20, 30],-20)==False\n    assert greater_specificnum([10, 20, 30],-30)==False\n\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst,num):\n    for i in lst:\n        if i > num:\n            print(i)\n        else:\n            continue\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst,num):\n    if num <= lst[-1]:\n        for i in lst:\n            if num <= i:\n                print(i)\n    else:\n        print(\"That number is greater than the largest number in the list\")\ngreater_specificnum([220, 330, 500],200)\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(list1,number):\n    if list1==None:\n        return False\n    else:\n        for i in list1:\n            if i>number:\n                print(i)\n\ngreater_specificnum([220, 330, 500],200)\ngreater_specificnum([220, 330, 500],20)\ngreater_specificnum([220, 330, 500],330)\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"O3CGi00cK664\" outputId=\"f3352d38-d1e2-451d-e3f1-e3e174d8e5e4\"\n#Write a function that adds 2 numbers together and return the result.\ndef add_two_numbers(x,y):\n    print(x+y)\nadd_two_numbers(3,4)\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"p_K8RY4nLNFq\" outputId=\"7c8723b4-3900-467f-9a77-53262df4e212\"\n#Write a Python function that takes a list and returns a new list with unique elements of the first list\ndef unique_list(lst):\n    unique_lst=[]\n    for x in lst:\n        if x not in unique_lst:\n            unique_lst.append(x)\n    return unique_lst\nunique_list([1,2,2,3,4,4,5,5])\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"CB31DxFZLN4t\" outputId=\"9f88d7b0-7196-486e-c8b2-9e197e87551d\"\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(list1, num):\n    list1 = [i for i in list1 if i > num]\n    return list1\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(items, num):\n  for item in items:\n    if item > num:\n      print(\"Yes\")\n    else:\n      print(\"No\")\n\n\ngreater_specificnum([220, 330, 500],200)\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"1VXmO_X9KBLm\" outputId=\"3e1f8c2e-9981-449b-c9a8-c515841b2641\"\n#2.2 Write a function that returns true if a list of numbers is in sorted order, and false otherwise.", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(numbers,greater_than):\n\tfor number in numbers:\n\t\tif number>greater_than:\n\t\t\tprint number\n\t\t\treturn True\n\tprint \"None\"\n\treturn False\n\ngreater_specificnum([220, 330, 500],200)\n\n\n\n# -\n\n# #### 2. \u5217\u8868\u7684\u5185\u7f6e\u65b9\u6cd5\n#\n# list.append()\t\u628a\u4e00\u4e2a\u5143\u7d20\u6dfb\u52a0\u5230\u5217\u8868\u7684\u7ed3\u5c3e\uff0c\u76f8\u5f53\u4e8e a[len(a):] = [x]\n#\n# list.extend()\t\u901a\u8fc7\u6dfb\u52a0\u6307\u5b9a\u5217\u8868\u7684\u6240\u6709\u5143\u7d20\u6765\u6269\u5145\u5217\u8868\uff0c\u76f8\u5f53\u4e8e a[len(a):] = L\n#\n# list.insert()\t\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u51c6\u5907\u63d2\u5165\u5230\u5176\u524d\u9762\u7684\u90a3\u4e2a\u5143\u7d20\u7684\u7d22\u5f15(\u5982\u679c\u662f\u8d1f\u6570\uff0c\u5c31\u4ece\u5217\u8868\u7ed3\u5c3e\u5f00\u59cb\u7b97\u8d77)\u3002\n#\n# list.remove()\t\u79fb\u9664\u5217\u8868\u4e2d\u503c\u4e3a\u6307\u5b9a\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\n#\n# list.pop()\t\u4ece\u5217\u8868\u7684\u6307\u5b9a\u4f4d\u7f6e\u79fb\u9664\u5143\u7d20\uff0c\u5e76\u5c06\u5176\u8fd4\u56de\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7d22\u5f15\uff0ca.pop()\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\n#\n# list.clear()\t\u79fb\u9664\u5217\u8868\u4e2d\u7684\u6240\u6709\u9879\uff0c\u7b49\u4e8edel a[:]\n#\n# list.index()\t\u8fd4\u56de\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a\u503c\u4e3a\u6307\u5b9a\u503c\u7684\u5143\u7d20\u7684\u7d22\u5f15\u3002\u5982\u679c\u6ca1\u6709\u5339\u914d\u7684\u5143\u7d20\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\n#\n# list.count()\t\u8fd4\u56de\u5217\u8868\u4e2d\u503c\u4e3a\u6307\u5b9a\u503c\u7684\u5143\u7d20\u4e2a\u6570\u3002\n#\n# list.sort()\t\u5bf9\u5217\u8868\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\n#\n# list.reverse()\t\u53cd\u5411\u5217\u8868\u4e2d\u5143\u7d20\n#\n# list.copy()\t\u8fd4\u56de\u5217\u8868\u7684\u6d45\u590d\u5236\uff0c\u7c7b\u4f3ca[:]\n\n# +\n#\u4f8b\u5b501\uff1a\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst,num):\n    result = []\n    for i in lst:\n        if i>num:\n            result.append(i)\n    return result\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    focus = ((-b - math.sqrt(b**2 - 4*a*c)) / (2*a))\n    vertex = ((-b + math.sqrt(b**2 - 4*a*c)) / (2*a))\n    return focus, vertex\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Returns a tuple of the (x, y) coordinates of the focus of the parabola with coefficients a, b, c\n    \"\"\"\n    delta = b**2 - (4*a*c)\n    x1 = (-b - sqrt(delta)) / (2*a)\n    x2 = (-b + sqrt(delta)) / (2*a)\n    y1 = (a*x1**2) + (b*x1) + c\n    y2 = (a*x2**2) + (b*x2) + c\n    if delta == 0:\n        return (x1, y1)\n    elif delta > 0:\n        return (x1, y1), (x2, y2)\n    else:\n        return (x2, y2), (x1, y1)\n\n# parabola_focus(5, 3, 2) should return (-0.3, 1.6)", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\n# This is an example of a \"pure\" function that does not change the state of the program.\n# This function is very useful because:\n# - You can call it as many times as you want with different arguments.\n# - It is very easy to test and debug.\n# - You can easily print the results to check if they are correct.\n\n# parabola_focus() is a pure function because it has no side-effects.\n# This function DOES NOT change any data that is outside of the function.\n# parabola_focus() only uses the data that is passed to it.\n\n# Pure functions can be tested very easily by supplying the right arguments.\n# A \"pure\" function cannot have side-effects.\n# This means that calling the function with the same arguments will always\n# return the same results.\n# In addition, it cannot access or modify any state outside of itself.\n# This means that it has no side-effects.\n# This also means that pure functions can be easily tested.\n# We can easily print the results, or we can test them with the assert statement.\n\n# A \"pure\" function is also a great candidate for parallel processing,\n# because it is very simple to divide it into parts and combine the results.\n# In this case, we can send the same arguments to multiple processors.\n\n# If we want to write a pure function that changes the program state,\n# we need to use a function that is NOT a pure function.\n\n\n# Pure functions are very useful because:\n# - They can easily be tested.\n# - They can be divided into parts and processed in parallel.\n# - They can be reused as many times as we want.\n# - They are simple and easy to read.\n# - They are very easy to debug.\n\n# Pure functions are also very useful in Python because:\n# - They can be used in data analysis.\n# - They can be used as part of our library.\n# - They are very easy to read.\n# - They are very easy to debug.\n\n# Pure functions are also very useful because we can easily reuse them.\n# If we", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    return (-b/2/a, -c/b)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\n# test case\n# assert parabola_focus(5,3,2)==(-0.3, 1.6)\n\n# code\ndef parabola_focus(x, y, z):\n    x1 = (-y + np.sqrt(y**2 - 4*z))/2*z\n    x2 = (-y - np.sqrt(y**2 - 4*z))/2*z\n    return x1, x2\n\n# test case\n# assert parabola_focus(5,3,2)==(-0.3, 1.6)<jupyter_output><empty_output><jupyter_text>[Question 3] Code and Test: Heat Transfer CoefficientThe heat transfer coefficient for a given material is given by$ h = \\frac{kA}{\\rho c_p}$where $h$ is the heat transfer coefficient,$k$ is the thermal conductivity, $A$ is the surface area of the material, $\\rho$ is the density of the material, and $c_p$ is the specific heat of the material.Write a function to calculate the heat transfer coefficient of a material. Use the function, and numerical values (not symbolic values) as inputs to your function.<jupyter_code>\"\"\"\nWrite a function to calculate the heat transfer coefficient of a material. Use the function, \nand numerical values (not symbolic values) as inputs to your function.\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    \"\"\"\n    a,b,c: numbers representing the coefficients of the parabola y=ax^2+bx+c\n    returns: 2 numbers, the focus (x,y) of the parabola\n    \"\"\"\n    d = b**2-4*a*c\n    if d<0:\n        return \"Imaginary\"\n    elif d==0:\n        return (-b/(2*a),0)\n    elif d>0:\n        return ((-b-sqrt(d))/(2*a), (-b+sqrt(d))/(2*a))\n\ndef parabola_focus(a,b,c):\n    d = b**2-4*a*c\n    if d<0:\n        return \"Imaginary\"\n    elif d==0:\n        return (-b/(2*a),0)\n    elif d>0:\n        return ((-b-sqrt(d))/(2*a), (-b+sqrt(d))/(2*a))\n\n\n#Test\n#assert parabola_focus(5,3,2)==(-0.3, 1.6)\n#assert parabola_focus(2,6,4)==(1.6, 1.0)\n#assert parabola_focus(2,4,2)==(0, 0)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\n#Tests\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    return 0,-0.5*(b/a)\n\n\ndef main():\n    a = float(input())\n    b = float(input())\n    c = float(input())\n    print(parabola_focus(a,b,c))\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    if a == 0:\n        return\n    d = b ** 2 - 4 * a * c\n    if d < 0:\n        return \"complex roots\"\n    if d == 0:\n        x = (-b / (2 * a))\n        return (x, x)\n    x1 = (-b - d ** 0.5) / (2 * a)\n    x2 = (-b + d ** 0.5) / (2 * a)\n    return (x1, x2)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    discriminant = b**2 - 4*a*c\n    x_sol_1 = (-b + discriminant**0.5)/(2*a)\n    x_sol_2 = (-b - discriminant**0.5)/(2*a)\n    y_sol_1 = a*x_sol_1**2 + b*x_sol_1 + c\n    y_sol_2 = a*x_sol_2**2 + b*x_sol_2 + c\n    return (x_sol_1, y_sol_1) if y_sol_1 > y_sol_2 else (x_sol_2, y_sol_2)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\n\ndef check_literals(string,literals):\n    if(re.search(literals,string)):\n        return 'Matched!'\n    return 'Not matched!'\n\n# test\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(string,literals):\n    try:\n        if re.search('|'.join(literals),string):\n            return \"Matched!\"\n        return \"Not matched!\"\n    except:\n        return \"There's a problem.\"\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(content,literals_list):\n    for literal in literals_list:\n        if re.search(literal,content):\n            return 'Matched!'\n    return 'Not matched!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(string,literals):\n    \"\"\"\n    :param string: string to search in\n    :param literals: list of literals to search for\n    :return: \"Matched!\" if all the literals are in the string, otherwise False\n    \"\"\"\n    # code here\n    for literal in literals:\n        if literal not in string:\n            return False\n    return \"Matched!\"", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\ndef check_literals(string,literals):\n    for literal in literals:\n        if re.search(literal,string):\n            return \"Matched!\"\n    return \"No Match\"\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\n# Import re module.\nimport re\n\n# Complete the function.\ndef check_literals(txt,lst):\n\n    # Iterate over lst and use re.search method to match the pattern.\n    for i in lst:\n        if re.search(r'\\b'+i+'\\b',txt):\n            return 'Matched!'\n    \n    # If no pattern matched, return Not Matched!\n    return 'Not Matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(text,literals):\n    result = 'Matched!'\n    for literal in literals:\n        if re.search(literal,text) == None:\n            result = 'Not matched!'\n    return result\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(text,literals):\n    for literal in literals:\n        if re.search(r'\\b' + re.escape(literal) + r'\\b',text):\n            return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string, search_list):\n    for item in search_list:\n        if re.search(item, string):\n            return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(text,literals):\n  match = [re.findall(literal, text) for literal in literals]\n  if len([x for x in match if x])>0:\n    return 'Matched!'\n  else:\n    return 'Not matched!'\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(s1, s2, n, m):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][m]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2, m, n):\n    # code here\n    if m == 0 or n == 0:\n        return 0\n    if str1[m-1] == str2[n-1]:\n        return 1 + longest_common_subsequence(str1, str2, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(str1, str2, m-1, n), longest_common_subsequence(str1, str2, m, n-1))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\n\n\ndef longest_common_subsequence(\n    first: Sequence[str], second: Sequence[str], first_size: int, second_size: int\n) -> Optional[int]:\n    \"\"\"Return the longest common subsequence length.\"\"\"\n    table = [[0 for i in range(second_size + 1)] for j in range(first_size + 1)]\n    for i in range(1, first_size + 1):\n        for j in range(1, second_size + 1):\n            if first[i - 1] == second[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i][j - 1], table[i - 1][j])\n    return table[first_size][second_size]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(s1, s2, m, n):\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n    \"\"\"\n    L[m+1][n+1] = 0\n    \"\"\"\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(x, y, i, j):\n    if i == 0 or j == 0:\n        return 0\n    if x[i-1] == y[j-1]:\n        return 1 + longest_common_subsequence(x, y, i-1, j-1)\n    return max(longest_common_subsequence(x, y, i-1, j), longest_common_subsequence(x, y, i, j-1))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\nfrom typing import List\n\n\ndef longest_common_subsequence(s1: str, s2: str) -> int:\n    \"\"\"\n    To solve this problem we will use a 2D matrix to represent the solution.\n    We are only looking for the solution for the longest subsequence so the first\n    solution will be to fill this matrix by iterating over the strings s1 and s2\n    and calculate the solutions for the first character (i.e. s1[0] and s2[0]).\n    Afterwards we will consider each of the following characters for s1 and s2.\n    At each iteration we will calculate the solutions for the different subproblems,\n    i.e. we will check if the characters in s1 and s2 are the same, if so, the solution\n    for the longest subsequence for the remaining characters in s1 and s2 can be\n    calculated by adding 1 to the solution for the subsequence where the first character\n    in s1 and s2 are identical. If the characters are not the same, we will look at\n    the solutions for the remaining characters in s1 and s2. We can take the solution\n    where the first character is identical from the previous iteration and the solutions\n    for the remaining subproblems for the next iteration.\n    \"\"\"\n    m = len(s1)\n    n = len(s2)\n    sol = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                sol[i][j] = 1 + sol[i - 1][j - 1]\n            else:\n                sol[i][j] = max(sol[i - 1][j], sol[i][j - 1])\n    return sol[m][n]\n\n\ndef longest_common_subsequence_dp(s1: str, s2: str) -> int:\n    \"\"\"\n    To solve this problem we will use a 2D matrix to represent the solution", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(str1, str2, m, n):\n    # your code here\n    # get the dp matrix\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    # fill the dp matrix\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\nfrom typing import List\n\ndef longest_common_subsequence(\n    a: str, b: str, a_len: int, b_len: int\n) -> int:\n    \"\"\"\n    Longest common subsequence implementation.\n    This is the DP approach.\n    - In a[i] and b[j]\n        - If a[i] == b[j]\n            - c[i][j] = c[i-1][j-1] + 1\n        - Else\n            - c[i][j] = max(c[i-1][j], c[i][j-1])\n    - Return c[m-1][n-1]\n    \"\"\"\n\n    c = [[0 for _ in range(b_len + 1)] for _ in range(a_len + 1)]\n    for i in range(1, a_len + 1):\n        for j in range(1, b_len + 1):\n            if a[i - 1] == b[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n            else:\n                c[i][j] = max(c[i - 1][j], c[i][j - 1])\n    return c[a_len][b_len]\n\n\ndef longest_common_subsequence_brute_force(\n    a: str, b: str, a_len: int, b_len: int\n) -> int:\n    \"\"\"\n    Longest common subsequence implementation.\n    This is a brute force approach.\n    \"\"\"\n    max_len = 0\n    for i in range(a_len):\n        for j in range(b_len):\n            if a[i] == b[j] and i != j:\n                l = longest_common_subsequence(a[:i], b[:j], i, j) + 1\n                max_len = max(max_len, l)\n    return max_len\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\nfrom typing import List\n\n\ndef longest_common_subsequence(\n    seq_a: List[str], seq_b: List[str], a_len: int, b_len: int\n) -> int:\n    \"\"\"\n    >>> longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n    4\n    \"\"\"\n    dp: List[List[int]] = [[0 for _ in range(b_len + 1)] for _ in range(a_len + 1)]\n    for i in range(1, a_len + 1):\n        for j in range(1, b_len + 1):\n            if seq_a[i - 1] == seq_b[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[a_len][b_len]\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    if n == 2:\n        return True\n    \n    for i in range(3,n+1):\n        if n%i == 0:\n            if i**2 == n:\n                return True\n            else:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    i = 0\n    while (i*i) < n:\n        if (n % (i*i) == 0):\n            return True\n        i = i + 1\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    for i in range(1, int(num**0.5) + 1):\n        if num%i == 0:\n            if i**2 == num:\n                return True\n            elif i**2 < num:\n                if (num-i**2)%(i+i+1) == 0:\n                    return True\n    return False\n\n#print(prod_Square(25))\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n# + id=\"85968fe0\"\ndef prod_Square(num):\n    return False\n\n\n# + [markdown] id=\"6155594b\"\n# **Use 3 or fewer lines of code, including imports, to pass the test cases below:**\n#\n# **For 5, False is expected.**\n#\n# **For 12, True is expected.**\n#\n# **For 37, False is expected.**\n#\n# **For 111, True is expected.**\n\n# + id=\"8d3d9a54\"\n# Solution", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_square(n):\n    if n == 1:\n        return False\n    if n == 4:\n        return False\n    if n == 9:\n        return False\n    if n == 16:\n        return False\n    if n == 25:\n        return False\n\n    a = 0\n    while (n - (a ** 2)) > 0:\n        if (n - (a ** 2)) % a == 0:\n            return True\n        else:\n            a += 1", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    return num%4==3\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n#answer\ndef prod_Square(n):\n    if n<4:\n        return False\n    if n%4 !=0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n\n#test\nimport time\ns = time.time()\nprod_Square(25)", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n\t# Your code goes here\n    # for the given number divide it by 2 and check if it's a perfect square or not.\n    if num%4 == 1:\n        return False\n    elif num%4 == 3:\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(lst,length):\n    if(length <= 0):\n        return 1\n    if(lst == []):\n        return 1\n    for i in range(length):\n        if(lst[i] > 0 and lst[i] <= length):\n            if(lst[lst[i] - 1] != lst[i]):\n                lst[lst[i] - 1],lst[i] = lst[i],lst[lst[i] - 1]\n            else:\n                return lst[i]\n    return length + 1", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(A, N):\n    temp = [True]*(N+1)\n    for x in A:\n        if(x>=0 and x<=N):\n            temp[x] = False\n\n    for i in range(N):\n        if temp[i]:\n            return i\n    return N+1\n\ndef main():\n    print(\"First Missing Positive number is: \",first_Missing_Positive([1,2,3,-1,5],5))\n\nmain()\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    # Corner case\n    if not arr:\n        return 1\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the array\n    for i in range(len(arr)):\n\n        # Case: If the current element is positive,\n        # then check if the next element is equal to\n        # the current element + 1. If they are not,\n        # then return the current element.\n        if arr[i] > 0 and arr[i] == arr[i+1]:\n            return arr[i] + 1\n\n        # Case: If the current element is negative\n        # or 0, then return the current element.\n        if arr[i] <= 0:\n            return arr[i]\n\n    # Case: All elements are positive, then return\n    # n + 1, which is missing in the array.\n    return n + 1\n\ndef first_Missing_Positive(arr, n):\n    \"\"\"\n    :param: arr - input array of integers\n    :param: n - size of the input array\n    TODO - You code goes here\n    \"\"\"\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\nfrom typing import List", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    if n == 1:\n        if arr[0] == 1:\n            return 2\n        elif arr[0] == 0 or arr[0] == -1:\n            return 1\n        else:\n            return 0\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n or arr[i] == arr[arr[i]-1]:\n            continue\n        arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(n):\n        if i+1 != arr[i]:\n            return i+1\n    return n+1\n\ndef test():\n    assert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\ntest()\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    if not arr:\n        return 1\n    for i in range(n):\n        while arr[i] > 0 and arr[i] <= n and arr[arr[i]-1] != arr[i]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(nums,n):\n    for i in range(n):\n        if nums[abs(nums[i])-1] > 0:\n            nums[abs(nums[i])-1] = -nums[abs(nums[i])-1]\n    \n    for i in range(n):\n        if nums[i] > 0:\n            return i+1\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(input_list, size):\n\n    def find_missing_number(input_list, size):\n        if (size == 0):\n            return 1\n\n        if (input_list[size-1] > 0):\n            return find_missing_number(input_list, size-1)\n\n        for i in range(size):\n            if (input_list[i] > 0):\n                input_list[i], input_list[size-1] = input_list[size-1], input_list[i]\n                break\n\n        for i in range(size-1, -1, -1):\n            if ((abs(input_list[i]) - 1) >= size):\n                continue\n\n            if (input_list[abs(input_list[i]) - 1] > 0):\n                input_list[i], input_list[abs(input_list[i]) - 1] = input_list[abs(input_list[i]) - 1], input_list[i]\n            else:\n                return abs(input_list[i])\n\n        return find_missing_number(input_list, size-1)\n\n    return find_missing_number(input_list, size)\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(numbers,size):\n    \"\"\"Complexity Analysis:\n    Time Complexity: O(n)\n    \n    Space Complexity: O(1)\n    \"\"\"\n    if size == 0:\n        return 1\n    for i in range(size):\n        while numbers[i] > 0 and numbers[i] <= size and numbers[numbers[i] - 1] != numbers[i]:\n            # Swapping\n            temp = numbers[numbers[i] - 1]\n            numbers[numbers[i] - 1] = numbers[i]\n            numbers[i] = temp\n    for i in range(size):\n        if numbers[i] != i + 1:\n            return i + 1\n    return size + 1", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(a,n):\n  a = [1 if x <= 0 else x for x in a]\n  print a\n  print n\n  #using array slicing\n  #a = a[:n+1]\n  #print a\n  for i in range(len(a)):\n    if a[i] != i + 1:\n      if a[i] < n and a[i] >= 1:\n        a[i], a[a[i] - 1] = a[a[i] - 1], a[i]\n      else:\n        a[i], a[n] = a[n], a[i]\n        n += 1\n  for i in range(len(a)):\n    if a[i] != i + 1:\n      return i + 1\n  return n + 1\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\nfrom typing import Tuple\n\n\ndef count_Intgral_Points(x1: int, y1: int, x2: int, y2: int) -> int:\n    \"\"\"\n    >>> count_Intgral_Points(1, 1, 4, 4)\n    4\n    \"\"\"\n    # count = 0\n    # # Lower bound\n    # for x in range(x1, x2 + 1):\n    #     # Lower bound\n    #     for y in range(y1, y2 + 1):\n    #         # Condition to check whether a point lies in the given rectangle or not\n    #         if x >= x1 and x <= x2 and y >= y1 and y <= y2:\n    #             count = count + 1\n    # return count\n    # return (x2 - x1 + 1) * (y2 - y1 + 1)\n    return max(x2 - x1 + 1, y2 - y1 + 1)\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    # Your code here\n    count = 0\n    for x in range(x1,x2+1):\n        for y in range(y1,y2+1):\n            if x**2 + y**2 <= 49:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    count = 0\n    for i in range(x1, x2 + 1):\n        for j in range(y1, y2 + 1):\n            if(is_integral_point(i, j)):\n                count += 1\n    return count\n\ndef is_integral_point(x, y):\n    \"\"\"\n    Write a python function to check if a point lies inside a square of side 1 with centre (0,0)\n    \"\"\"\n    return x % 1 == 0 and y % 1 == 0\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(xmin,xmax,ymin,ymax):\n    n=0\n    for x in range(xmin,xmax+1):\n        for y in range(ymin,ymax+1):\n            if is_Intgral_Points(x,y):\n                n+=1\n    return n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2):\n        for j in range(y1,y2):\n            if is_Integral_Point(i,j):\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x0,y0,x1,y1):\n    assert x0 <= x1 and y0 <= y1\n    c_i = 0\n    for x in range(x0,x1+1):\n        for y in range(y0,y1+1):\n            if is_integral(x,y):\n                c_i += 1\n    return c_i\n\n#is_integral(1/3,0)\n#count_Intgral_Points(1/2,1/2,2,2)\n#count_Intgral_Points(1/3,1/2,2,2)\n#count_Intgral_Points(2,3,3,4)\n#count_Intgral_Points(1/3,1/2,1,2)\n#count_Intgral_Points(0,0,1/2,1/2)\n#count_Intgral_Points(1/3,1/2,1/3,1/2)\n#count_Intgral_Points(1/3,1/3,1/2,1/2)\n#count_Intgral_Points(1/3,1/2,1/2,1/2)\n#count_Intgral_Points(0,0,1/3,1/3)\n#count_Intgral_Points(0,0,1,1)\n#count_Intgral_Points(1,1,4,4)\n#count_Intgral_Points(1,1,2,2)\n#count_Intgral_Points(1,1,1,1)\n#count_Intgral_Points(1,1,0,0)\n#count_Intgral_Points(0,0,0,0)\n#count_Intgral_Points(1/3,1/3,1/2,1/2)\n#count_Intgral_Points(1/3,1/3,1/3,", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    \"\"\"count the number of integral co-ordinates that lie inside a square.\"\"\"\n    n=0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if is_Intgral_Point(i,j):\n                n+=1\n    return n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(a, b, c, d):\n    return (c-a)*(d-b)", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x0,y0,x1,y1):\n    l = 0\n    for x in range(x0,x1+1):\n        for y in range(y0,y1+1):\n            if is_Intgral(x,y):\n                l += 1\n    return l\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(monthname):\n\tif monthname == \"February\":\n\t\treturn False\n\telif monthname == \"January\" or monthname == \"March\" or monthname == \"May\" or monthname == \"July\" or monthname == \"August\" or monthname == \"October\" or monthname == \"December\":\n\t\treturn True\n\telif monthname == \"April\" or monthname == \"June\" or monthname == \"September\" or monthname == \"November\":\n\t\treturn False\n\telse:\n\t\treturn None\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n    if monthname in ('January','March','May','July','August','October','December'):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n    if month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month.lower() == 'january' or month.lower() == 'february' or month.lower() == 'march' or month.lower() == 'april' or month.lower() == 'may' or month.lower() == 'june':\n        return True\n    else:\n        return False\ndef check_monthnumber(month):\n    return month.lower() == 'january' or month.lower() == 'february' or month.lower() == 'march' or month.lower() == 'april' or month.lower() == 'may' or month.lower() == 'june'", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\n#Solution\ndef check_monthnumber(monthname):\n    month_list = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthname in month_list:\n        if monthname in ['February', 'April', 'June', 'September', 'November']:\n            return True\n        else:\n            return False\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n  month = month_name.lower()\n  months = [\"january\",\"february\",\"march\",\"april\",\"may\",\"june\",\"july\",\"august\",\"september\",\"october\",\"november\",\"december\"]\n  return(months.index(month))\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(monthname):\n    if monthname == \"January\":\n        return True\n    elif monthname == \"February\":\n        return False\n    elif monthname == \"March\":\n        return True\n    elif monthname == \"April\":\n        return True\n    elif monthname == \"May\":\n        return True\n    elif monthname == \"June\":\n        return True\n    elif monthname == \"July\":\n        return True\n    elif monthname == \"August\":\n        return True\n    elif monthname == \"September\":\n        return True\n    elif monthname == \"October\":\n        return True\n    elif monthname == \"November\":\n        return True\n    elif monthname == \"December\":\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month in [\"January\",\"March\",\"May\",\"July\",\"August\",\"October\",\"December\"]:\n        return True\n    elif month in [\"April\",\"June\",\"September\",\"November\"]:\n        return False\n    else:\n        return None\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(monthname):\n    if monthname.lower() == 'february':\n        return True\n    if monthname.lower() == 'january' or monthname.lower() == 'february' or monthname.lower() == 'march' or monthname.lower() == 'april' or monthname.lower() == 'may' or monthname.lower() == 'june' or monthname.lower() == 'july' or monthname.lower() == 'august' or monthname.lower() == 'september' or monthname.lower() == 'october' or monthname.lower() == 'november' or monthname.lower() == 'december':\n        return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month_name):\n    if month_name.lower() in ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']:\n        return True\n    return False\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    result = False\n    for char in string:\n        if char.isalpha():\n            result = True\n            break\n    for char in string:\n        if char.isdigit():\n            result = True\n            break\n    return result\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if string.isalnum() == True:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    count=0\n    for c in s:\n        if c.isalnum():\n            count+=1\n    if count>=2:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str):\n    return any(x.isalpha() and x.isdigit() for x in str)\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str1):\n    if(len(str1)>=2 and str1.isalnum()):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\n#solution\ndef check_string(string):\n    return True if (any(x.isalpha() for x in string) and any(x.isdigit() for x in string)) else False\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if string.isalnum():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if (string.isalnum()):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if string.isalnum():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(input_String):\n  if input_String.isdigit() or input_String.isalpha():\n    return True\n  else:\n    return False\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple_to_remove_duplicates_from):\n    # Store unique elements in a set, then convert back to a list\n    unique_elements = set(tuple_to_remove_duplicates_from)\n    list_of_unique_elements = list(unique_elements)\n    return list_of_unique_elements\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(some_tuple):\n    return tuple(set(some_tuple))\n\n\ndef remove_tuple_generator(some_tuple):\n    return tuple(set(some_tuple))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(t):\n    return tuple(set(t))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\n# Solution\ndef remove_tuple(numbers):\n    return tuple(set(numbers))\n\n# Test", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(n):\n    \"\"\"\n    Remove duplicates from a tuple\n    \"\"\"\n    return tuple(set(n))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(data):\n    new_data = []\n    for i in data:\n        if i not in new_data:\n            new_data.append(i)\n    return tuple(new_data)\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\n# SOLUTION\ndef remove_tuple(t):\n    return list(set(t))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple_to_remove):\n    return list(set(tuple_to_remove))\n\n\n# + id=\"h3_MTYhPFnv2\""], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_to_decimal(number):\n    decimal = 0\n    for i in range(len(number)-1, -1, -1):\n        decimal += int(number[i])*8**i\n    return decimal\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_num):\n    decimal_num = 0\n    power = 0\n    while octal_num > 0:\n        num = octal_num % 10\n        octal_num = octal_num // 10\n        decimal_num += num * (10 ** power)\n        power += 1\n    return decimal_num\n\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_no):\n    \"\"\"\n    :param octal_no:\n    :return:\n    \"\"\"\n    if int(octal_no) == 0:\n        return 0\n    decimal_no = 0\n    len_of_octal_no = len(octal_no)\n    for i in range(len_of_octal_no):\n        decimal_no = decimal_no + int(octal_no[len_of_octal_no - i - 1]) * (8 ** i)\n    return decimal_no\n\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    if type(num) is not int:\n        print('ERROR: Input must be an integer')\n        return\n    if num < 0:\n        print('ERROR: Input must be positive')\n        return\n    elif num > 77777777777:\n        print('ERROR: Input is too big')\n        return\n    else:\n        ans = 0\n        while num > 0:\n            ans += (num % 10) * pow(8, len(str(num)) - 1)\n            num = num // 10\n        return ans\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(num):\n    return int(num,8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    return int(octal,8)", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    decimal_number = 0\n\n    for index, value in enumerate(str(octal_number)[::-1]):\n        decimal_number += int(value) * (8 ** index)\n\n    return decimal_number\n\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octalNumber):\n    return int(octalNumber, 8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    decimal_number = 0\n    p = 0\n    while octal_number != 0:\n        temp = octal_number % 10\n        decimal_number += temp * pow(8,p)\n        p+=1\n        octal_number = octal_number // 10\n    return decimal_number\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array,search,not_found):\n    i = 0\n    while i < len(array) and array[i] != search:\n        i += 1\n    if i == len(array):\n        return not_found\n    else:\n        return i\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, element, start, end):\n    if end < start:\n        return -1\n    if start == end:\n        if array[start] == element:\n            return start\n        else:\n            return -1\n    if start > end:\n        return -1\n\n    mid = (start+end)//2\n    if array[mid] == element:\n        return mid\n    elif array[mid] > element:\n        return first(array, element, start, mid-1)\n    else:\n        return first(array, element, mid+1, end)\n\n# Tests", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, search, element):\n  if not array:\n    return -1\n  elif array[0] == search:\n    return 0\n  else:\n    return first(array[1:], search, element) + 1\n\n#Testing", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, item, def_val):\n    \"\"\"\n    A function to find the first position of an element in a sorted array\n    :param array: A sorted array\n    :param item: The element we are looking for\n    :param def_val: The default value that we should return\n    :return: An integer of the index of the first occurence of the item\n    \"\"\"\n    if len(array) == 0:\n        return def_val\n    elif item > array[0]:\n        return first(array[1:], item, def_val)\n    else:\n        return first(array[1:], item, 0)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\n# Return the index of the first element in an array\ndef first(arr, target, not_found):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return not_found\n\n# Check Solution", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,val,last):\n    \"\"\"\n    Finds the position of an element in a sorted array\n    :param arr: The sorted array to find an element in\n    :param val: The element to find\n    :param last: The last element to search in the array\n    :return: Returns the first position of the element or -1 if element is not in the array\n    \"\"\"\n    if arr[0] == val:\n        return 0\n    if arr[last] == val:\n        return last\n    if arr[len(arr)//2] == val:\n        return len(arr)//2\n    if val > arr[last] or val < arr[0]:\n        return -1\n    if arr[len(arr)//2] > val:\n        return first(arr[:len(arr)//2],val,len(arr)//2-1)\n    else:\n        return first(arr[len(arr)//2:],val,len(arr)//2)\n\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,n,ele):\n    i=0\n    j=n-1\n    ans=-1\n    while i<=j:\n        mid=int((i+j)/2)\n        if arr[mid]==ele:\n            ans=mid\n            j=mid-1\n        elif arr[mid]<ele:\n            i=mid+1\n        else:\n            j=mid-1\n    return ans", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, value, default=None):\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == value:\n            return mid\n        elif array[mid] > value:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return default\n\n\ndef first_element_in_sorted_array(arr, value, default=None):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == value:\n            return mid\n        elif arr[mid] > value:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return default\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array, key, start):\n    if start >= len(array):\n        return -1\n    if array[start] == key:\n        return start\n    return first(array, key, start + 1)\n\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(list_of_tuples, length):\n    new_list = []\n    for i in list_of_tuples:\n        if len(i) == length:\n            pass\n        else:\n            new_list.append(i)\n    return new_list\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    return [x for x in lst if len(x) != k]", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\n# Your code goes here\ndef remove_tuples(lst, k):\n    return [item for item in lst if len(item) != k]\n\n# Tests", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n# def remove_tuples(list_tuples, k):\n#     return list(filter(lambda t: len(t) != k, list_tuples))\n\ndef remove_tuples(list_tuples, k):\n    return [t for t in list_tuples if len(t) != k]\n\n# print(remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1))\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\nfrom nose.tools import assert_equal\n\ndef remove_tuples(tuples, length):\n    return [tup for tup in tuples if len(tup) != length]\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(data, k):\n    \"\"\"\n    :param data: data is a list of tuples\n    :param k: k is a positive integer\n    :return: remove all the tuples with length k\n    \"\"\"\n    new_data = []\n    for item in data:\n        if len(item) != k:\n            new_data.append(item)\n    return new_data\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    # TODO: Write your code here\n    new = []\n    for i in tuples:\n        if len(i) != k:\n            new.append(i)\n    return new\n\n# Test your code", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n# my solution\ndef remove_tuples(tuples_list, k):\n    new_tuples = []\n    for t in tuples_list:\n        if len(t) != k:\n            new_tuples.append(t)\n    return new_tuples\n\n\n# another solution\ndef remove_tuples(tuples_list, k):\n    return [t for t in tuples_list if len(t) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(l, k):\n    return [t for t in l if len(t) != k]\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    return [tuple(t[i] for i in range(len(t)) if len(t) != k) for t in tuples if len(t) != k]\n\n# This is the same as the above, but without the if statement.\ndef remove_tuples(tuples, k):\n    return [tuple(t[i] for i in range(len(t)) if len(t) != k) for t in tuples]\n\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nimport doctest\nfrom typing import Tuple\n\n\ndef find_exponentio(a: Tuple[int], b: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n    >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n    (100000, 4096, 78125, 7776)\n    \"\"\"\n    result = []\n    for x, y in zip(a, b):\n        result.append(x ** y)\n\n    return tuple(result)\n\n\ndef main() -> None:\n    doctest.testmod()\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(A, B):\n    if A[0] == 0:\n        return (0,) + A[1:]\n    if B[0] == 0:\n        return (0,) + B[1:]\n    a, b, c, d = A\n    e, f, g, h = B\n    prod = ((a*f) + (b*g) + (c*h), (a*g) + (b*h) + (d*f), (a*h) + (c*f) + (d*g), (b*f) + (c*g) + (d*h))\n    if B[0] < 0:\n        neg = (-prod[0], -prod[1], -prod[2], -prod[3])\n        prod = neg\n    if A[0] < 0:\n        neg = (-prod[0], -prod[1], -prod[2], -prod[3])\n        prod = neg\n    # print(A, B, prod)\n    return find_exponentio(prod, B)\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# 1. Sum of the first tuple elements\n# 2. Multiply the sum by the second tuple element\n# 3. Repeat 2. for the next element of second tuple\n# 4. Sum the result of each step\n# 5. Return the sum of steps 3 and 4\ndef find_exponentio(x, y):\n    sum1 = sum(x)\n    res = [sum1]\n\n    for i in y:\n        sum1 = sum1 * i\n        res.append(sum1)\n\n    return res\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# Your code goes here\ndef find_exponentio(tup1, tup2):\n    result = list(tup1)\n    for i in tup2:\n        result = [x*y for x,y in zip(result, tup1)]\n    return result\n\n# Test Cases", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(base, power):\n    if base[0] == power[0]:\n        # print(base)\n        res = base[0] ** power[0]\n        # print(res)\n        for i in range(len(base)):\n            res = res * base[i] ** power[i]\n        return res\n    elif base[0] < power[0]:\n        res = base[0] ** power[0]\n        # print(res)\n        for i in range(len(base)):\n            res = res * base[i] ** power[i]\n        return res\n    elif base[0] > power[0]:\n        res = base[0] ** power[0]\n        # print(res)\n        for i in range(len(power)):\n            res = res * base[i] ** power[i]\n        return res\n\n\n# print(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)))\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\nimport operator\n\n\ndef find_exponentio(base, exponent):\n    \"\"\"\n    Exponentiation of two tuples.\n    :param base: a tuple\n    :param exponent: a tuple\n    :return: tuple\n    \"\"\"\n    return tuple(map(operator.mul, base, exponent))\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef find_exponentio(\n    base: Tuple[int, ...],\n    exponent: Tuple[int, ...],\n) -> Tuple[int, ...]:\n    \"\"\"\n    :param base: tuple\n    :param exponent: tuple\n    :return: tuple\n    >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n    (100000, 4096, 78125, 7776)\n    \"\"\"\n    res: Tuple[int, ...] = (1, ) * len(exponent)\n    i = len(exponent) - 1\n    while i >= 0:\n        if exponent[i] > 0:\n            res = tuple(base[j] * res[j] for j in range(len(base)))\n            i -= 1\n        elif exponent[i] < 0:\n            res = tuple(base[j] * res[j] for j in range(len(base))[::-1])\n            i -= 1\n        else:\n            i -= 1\n    return res\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(a, b):\n    a = list(a)\n    b = list(b)\n    c = []\n\n    for i in range(len(b)):\n        x = 1\n        for j in range(b[i]):\n            x = x * a[i]\n        c.append(x)\n\n    return c\n\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(x, y):\n    return tuple([a**b for a,b in zip(x,y)])\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    return a*b*np.sqrt(np.maximum(a*a*b*b-a*a*b*b*np.cos(2*np.pi*1/3),0))", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n  from math import pi\n  # Write your code here\n  return pi*a*b/2\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    return (a*b*math.sin(math.pi/3))/(2*math.tan(math.pi/3))\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\ndef largest_triangle(h, k):\n    return (math.sqrt(h**2 + k**2) * math.sqrt((h + k)* (h + k - 1)*(h + k - 2))) / 4\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\n#%%\n#answer\ndef largest_triangle(a,b):\n    p=0.5*(a+b)\n    s=p*(p-a)*(p-b)\n    area=s**0.5\n    return area", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    t = (2*a*b**2)/(a+b)**2\n    return t\n    ", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n# The formula for the area of a triangle is: area = 0.5*b*h\n# Where b is the length of the base, h is the length of the height.\n# To find the largest triangle, one must find the longest base, longest height.\n# If there are multiple values of base and height that make the triangle have the largest area,\n# then select the one that is closest to the hypotenuse, which is equal to the longest side.\n# If there are multiple such triangles, select the one that has the largest perimeter.\ndef largest_triangle(b, h):\n    a = hypot(b, h)\n    # If the length of the longest side is equal to b, then the triangle is a right triangle.\n    # If the length of the longest side is equal to h, then the triangle is a isosceles triangle.\n    # Otherwise, the triangle is a scalene triangle.\n    # In the case of a right triangle, the area of the triangle is equal to 0.5*b*b\n    if b == a:\n        return 0.5*b*b\n    elif h == a:\n        return 0.5*h*h\n    else:\n        return 0.5*a*h\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n# 2019-01-15\n\ndef largest_triangle(a,b):\n  \"\"\"\n  a,b: two sides of the ellipse\n  \"\"\"\n  # find the largest side\n  largest_side = max(a,b)\n  # find the smallest side\n  smallest_side = min(a,b)\n  # find the smaller angle\n  angle = math.asin(smallest_side/largest_side)\n  # find the length of the hypotenuse\n  hypotenuse = largest_side * math.cos(angle)\n  # find the length of the side of the triangle\n  side = hypotenuse * math.sin(angle)\n  # find the area of the triangle\n  area = largest_side * side * 0.5\n  return area\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    return (2*a*b*(math.sqrt(2)-1))/(math.pi)\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    return a*b/2\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return 1<<(n-1).bit_length()", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    p = 1\n    while p < n:\n        p = p*2\n    return p/2\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = highest_Power_of_2(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[10, 8], [12, 12], [8, 8]])\ntest_function([[2, 1], [4, 2], [5, 4], [6, 4], [7, 4]])", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    '''\n    Time Complexity - O(log n)\n    Space Complexity - O(1)\n    '''\n    if n <= 0:\n        raise Exception(\"Invalid Input\")\n    \n    i = 0\n    while (2**i) <= n:\n        i += 1\n    \n    return 2**(i-1)\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Solution 1\n\n\ndef highest_Power_of_2(n):\n    power = 1\n    while (power * 2) <= n:\n        power *= 2\n    return power // 2\n\n\n# Solution 2\n\ndef highest_Power_of_2_2(n):\n    power = 1\n    while (power * 2) < n:\n        power *= 2\n    return power\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(num):\n    num = num - 1\n    num = num | (num >> 1)\n    num = num | (num >> 2)\n    num = num | (num >> 4)\n    num = num | (num >> 8)\n    num = num | (num >> 16)\n    return num + 1\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return 2 ** (n.bit_length() - 1)\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(num):\n    return 2 ** int(log(num, 2))\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\nimport unittest\n\ndef highest_Power_of_2(n):\n\t\"\"\"\n\t:param n: given number\n\t:return: highest power of 2 less than or equal to given number\n\t\"\"\"\n\ti = 1\n\twhile i < n:\n\t\ti *= 2\n\treturn i//2\n\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(x):\n    return [i for i,v in enumerate(x) if v == max(x)]\n\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    max_num = lst[0]\n    index = [0]\n    for i in range(1,len(lst)):\n        if lst[i] > max_num:\n            max_num = lst[i]\n            index.clear()\n            index.append(i)\n        elif lst[i] == max_num:\n            index.append(i)\n    return index\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n#iterating and maintaining a maximum variable to check when a new item is encountered\n#complexity O(n)\ndef position_max(lst):\n    max_ = lst[0]\n    max_pos = [0]\n    for i in range(1,len(lst)):\n        if lst[i]>=max_:\n            max_ = lst[i]\n            max_pos = [i]\n        elif lst[i]==max_:\n            max_pos.append(i)\n    return max_pos", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(lst):\n  \"\"\"\n  Find the positions of the maximum values in a list.\n  \n  Parameters\n  ----------\n  lst : list\n    The list to be searched for maximum values.\n  \n  Returns\n  -------\n  positions : list\n    A list of positions of the maximum values in lst.\n  \"\"\"\n  max_pos = []\n  for i in range(len(lst)):\n    if lst[i] == max(lst):\n      max_pos.append(i)\n  return max_pos\n\ndef test_position_max():\n  assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\ntest_position_max()", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(L):\n    \"\"\" returns the indexes of all positions where the maximum value is found in the list \"\"\"\n    max_value = max(L)\n    return [i for i,x in enumerate(L) if x == max_value]\n\ndef test_position_max():\n    assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54]) == [7]\n    assert position_max([10, 20, 30, 40, 50, 10, 60]) == [0, 5]\n    assert position_max([20, 20, 20, 20]) == [0, 1, 2, 3]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(list_1):\n    max_val = list_1[0]\n    indexes = [0]\n    for i in range(1, len(list_1)):\n        if list_1[i] >= max_val:\n            max_val = list_1[i]\n            indexes = [i]\n        elif list_1[i] == max_val:\n            indexes.append(i)\n    return indexes\n\n\n# <a href=\"https://www.codewars.com/kata/56d796668c5a4a551300003b/train/python\">Position of the maximum element</a>\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n# -*- coding: utf-8 -*-\n# @Author:             \u4f55\u777f\n# @Create Date:        2018-12-22 14:46:11\n# @Last Modified by:   \u4f55\u777f\n# @Last Modified time: 2018-12-22 15:09:41\n\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(l):\n    a=l.index(max(l))\n    return a", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(l):\n    max_value = max(l)\n    return [i for i, val in enumerate(l) if val == max_value]\n\n# position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    return len(set(lst)) == 1\n\n# assert chkList(['one','one','one']) == True\n# assert chkList(['one','two','one']) == False\n# assert chkList(['one','two','three']) == False\n# assert chkList(['three','two','one']) == False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n# Solution :\ndef chkList(lst):\n    return len(set(lst)) == 1", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(list1):\n    if len(list1) == 1:\n        return True\n    if list1[0] == list1[1]:\n        return chkList(list1[1:])\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    return all(i == lst[0] for i in lst)\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(ls):\n    return ls.count(ls[0]) == len(ls)\n\n# unit test", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(l):\n\treturn l.count(l[0]) == len(l)\n\t", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list1):\n    flag = 0\n    if list1[0] == list1[1] or list1[0] == list1[2] or list1[1] == list1[2]:\n        flag = 1\n    if flag == 1:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(L):\n    if L.count(L[0]) == len(L):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(alist):\n    return all(alist[0]==item for item in alist)\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(str):\n    res = \"\"\n    for i in range(len(str)):\n        if str[i]%2!=0:\n            res+=str[i]\n    return res\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return ''.join(i for j,i in enumerate(string) if j%2!=0)\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str):\n    result = \"\"\n    for i in str:\n        if i % 2 != 0:\n            result += i\n    return result\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(str1):\n    return str1[::2]", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str):\n    str_new = \"\"\n    for i in range(len(str)):\n        if i%2==0:\n            str_new += str[i]\n    return str_new\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\n# Solution :\ndef remove_even(string):\n    output = ''\n    for char in string:\n        if char % 2 != 0:\n            output += char\n    return output\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result += string[i]\n    return result\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(x):\n    return(x[::2])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n#START\ndef remove_even(string):\n  new_str = \"\"\n  for char in string:\n    if char%2 !=0:\n      new_str+=char\n  return new_str\n#END\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\n#Code:\ndef remove_even(s):\n    new_string = []\n    for i in s:\n        if i%2 != 0:\n            new_string.append(i)\n    return ''.join(new_string)\n\n#Test:"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(int1, int2):\n    distance = 0\n    for i in range(32):\n        if (int1 & 1) != (int2 & 1):\n            distance += 1\n        int1 = int1 >> 1\n        int2 = int2 >> 1\n    return distance\n\n\ndef main():\n    print(hamming_Distance(4,8))\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(n1,n2):\n    count = 0\n    for i in range(0,len(bin(n1))-2):\n        if bin(n1)[i] != bin(n2)[i]:\n            count = count + 1\n    return count", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n    bin(x).count('1')\n    bin(y).count('1')\n    return bin(x ^ y).count('1')\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(num1, num2):\n    if num1 == num2:\n        return 0\n    elif abs(num1 - num2) == 1:\n        return 1\n    elif abs(num1 - num2) == 2:\n        return 1\n    elif abs(num1 - num2) == 3:\n        return 2\n    elif abs(num1 - num2) == 4:\n        return 1\n    elif abs(num1 - num2) == 5:\n        return 2\n    elif abs(num1 - num2) == 6:\n        return 2\n    elif abs(num1 - num2) == 7:\n        return 3\n    elif abs(num1 - num2) == 8:\n        return 1\n    elif abs(num1 - num2) == 9:\n        return 2\n    elif abs(num1 - num2) == 10:\n        return 2\n    elif abs(num1 - num2) == 11:\n        return 3\n    elif abs(num1 - num2) == 12:\n        return 2\n    elif abs(num1 - num2) == 13:\n        return 3\n    elif abs(num1 - num2) == 14:\n        return 3\n    elif abs(num1 - num2) == 15:\n        return 4\n    elif abs(num1 - num2) == 16:\n        return 1\n    elif abs(num1 - num2) == 17:\n        return 2\n    elif abs(num1 - num2) == 18:\n        return 2\n    elif abs(num1 - num2) == 19:\n        return 3\n    elif abs(num1 - num2) == 20:\n        return 2\n    elif abs(num1 - num2) == 21:\n        return 3\n    elif abs(num1 - num2) == 22:\n        return 3\n    elif abs(num1 - num2) == 23:\n        return 4\n    elif abs(num1 - num2) == 24:\n        return 2\n    elif abs", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(n1, n2):\n    \"\"\"\n    Returns the number of bits that are different between n1 and n2\n    \"\"\"\n    # TODO: code here\n    return len(list(bin(n1^n2)[2:]))\n    ", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(num1,num2):\n    num1 = int(bin(num1)[2:])\n    num2 = int(bin(num2)[2:])\n    s = 0\n    for i in range(31):\n        s = s + ((num1 & 1) ^ (num2 & 1))\n        num1 = num1 >> 1\n        num2 = num2 >> 1\n    return s", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a,b):\n    if a == b:\n        return 0\n    else:\n        a,b = bin(a),bin(b)\n        return len(a)-len(b) + sum(int(i) for i in list(a)^list(b))\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n    x = str(bin(x))\n    y = str(bin(y))\n    z = list(x[2:])\n    m = list(y[2:])\n    i = 0\n    while i < len(z):\n        if z[i] == m[i]:\n            z[i] = \"0\"\n            m[i] = \"0\"\n            i+=1\n        elif z[i] != m[i]:\n            z[i] = \"1\"\n            m[i] = \"1\"\n            i+=1\n    return sum([int(i) for i in z])\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(word,letter):\n    c = 0\n    for i in word:\n        if i == letter:\n            c += 1\n    return c", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n\t\"\"\"\n\t:param string: string to be searched\n\t:param char: character to be searched for\n\t:return: number of times char occurs in string\n\t\"\"\"\n\treturn len([c for c in string if c == char])\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, ch):\n    result = 0\n    for i in string:\n        if i == ch:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str,char):\n    count = 0\n    for letter in str:\n        if(letter == char):\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\nimport re\n\n\ndef count(str1,ch):\n    return len(re.findall(ch,str1))\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str, c):\n\t\"\"\"\n\treturns number of times given char occurs in a given string\n\t\"\"\"\n\tcount = 0\n\tfor char in str:\n\t\tif char == c:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\nimport unittest\n\ndef count(word,char):\n    count = 0\n    for i in word:\n        if i == char:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, character):\n    count = 0\n    for i in string:\n        if i == character:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n  if not string or not char:\n    return 0\n  count = 0\n  for ch in string:\n    if ch == char:\n      count += 1\n  return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(word, char):\n\treturn word.count(char)"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(array):\n    \"\"\"\n    :param array: a tuple of values\n    :return: the inversions of elements in the tuple\n    \"\"\"\n    result = []\n    for i in range(0,len(array)):\n        for j in range(i+1,len(array)):\n            if array[i] > array[j]:\n                result.append(array[i])\n                result.append(array[j])\n    return result\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(element_tuple):\n\t\"\"\"\n\telement_tuple: tuple of integers\n\treturn: tuple of integers (negatives)\n\t\"\"\"\n\telement_list = list(element_tuple)\n\telement_list.sort()\n\tprint(element_list)\n\treturn tuple([element_list.index(element) for element in element_tuple if element != element_list[element_list.index(element)]])\n\n# This code is contributed by <NAME>.\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(elements):\n\tinversion_list = []\n\tfor i in range(len(elements)):\n\t\tfor j in range(i+1, len(elements)):\n\t\t\tif elements[i] > elements[j]:\n\t\t\t\tinversion_list.append(elements[i])\n\t\t\t\tinversion_list.append(elements[j])\n\treturn inversion_list\n\ndef main():\n\tassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\tprint(inversion_elements((7, 8, 9, 1, 10, 7)))\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(list_of_tuples):\n    pass\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nimport unittest\n\n\ndef inversion_elements(elements):\n    pass\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(l):\n    l.sort()\n    return l\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nimport pytest\n\n\ndef inversion_elements(tup_list):\n    arr = sorted(tup_list)\n    a = 0\n    b = 1\n    inversion = []\n\n    while b < len(arr):\n        if arr[a] > arr[b]:\n            inversion.append(arr[a])\n            inversion.append(arr[b])\n            a += 1\n        else:\n            b += 1\n\n    return inversion\n\n\ndef test_case_1(benchmark):\n    assert benchmark(inversion_elements, (7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\n\ndef test_case_2(benchmark):\n    assert benchmark(inversion_elements, (1, 3, 6, 2, 5)) == (-2, -3, -5, -1, -6, -6)\n\n\ndef test_case_3(benchmark):\n    assert benchmark(inversion_elements, (1, 2, 3, 4)) == ()\n\n\ndef test_case_4(benchmark):\n    assert benchmark(inversion_elements, (1, 3, 2, 3)) == (-3, -4, -5, -1, -3, -3)\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\nfrom typing import Tuple, Dict, Any\n\n\ndef inversion_elements(elements: Tuple[Any]) -> Tuple[int]:\n    \"\"\"\n    Find the inversions of tuple elements in the given tuple list.\n\n    :param elements: tuple of elements\n    :return: tuple of inversions\n    \"\"\"\n\n    result = []\n\n    # Use a list and dictionary to keep track of element index\n    elements_dict: Dict[Any, int] = {x: i for i, x in enumerate(elements)}\n    for element in elements:\n        result.append(len(elements) - elements_dict[element])\n        elements_dict.pop(element)\n\n    return tuple(result)\n\n\ndef test_inversion_elements():\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuples: tuple):\n    return inversion_elements_helper(tuples, [], [], [])\n\n\ndef inversion_elements_helper(tuples: tuple, tuples_sorted: list, inversions: list, index_list: list):\n    if not tuples:\n        return inversions\n    if not index_list:\n        index_list = range(len(tuples))\n    element = tuples[0]\n    inversion_elements_helper(\n        tuples[1:],\n        tuples_sorted + [element],\n        inversions + index_list,\n        index_list[1:]\n    )\n    return inversion_elements_helper(\n        tuples[1:],\n        tuples_sorted,\n        inversions,\n        index_list[1:]\n    )\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    res = []\n    for i in range(len(tuples)):\n        res.append(tuples[i][0] + tuples[i][1])\n    return res\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\n# In[2]:\n\n\ndef concatenate_elements(element_list):\n    result = \"\"\n    for x in element_list:\n        for y in x:\n            result += y\n    return result\n\n\n# In[3]:\n\n\nconcatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n\n\n# In[ ]:\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\nfrom typing import List\n\ndef concatenate_elements(elements: List[str]) -> List[str]:\n  result = []\n  for i in range(len(elements)-1):\n    result.append(elements[i] + \" \" + elements[i+1])\n\n  return result\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    new_tuple = ()\n    for i in tuples:\n        for j in i:\n            new_tuple = new_tuple + (j, )\n    return new_tuple\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\nimport doctest\nfrom typing import Tuple, List\nfrom pprint import pprint\n\ndef concatenate_elements(tuples: Tuple[str]) -> List[str]:\n    return [tuple_value for tuple in tuples for tuple_value in tuple.split()]\n\ndef main():\n    \"\"\"Run doctests.\"\"\"\n    doctest.testmod()\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\nimport pytest\n\n\ndef concatenate_elements(elements):\n    '''\n    Given a tuple of strings, return a tuple of strings\n    where each two adjacent elements are concatenated.\n    '''\n    # complete this function\n\n    # TODO: write your code here\n    return None\n\n\ndef test_1():\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\n\ndef test_2():\n    assert concatenate_elements((\"DSP \", \"IS\", \"BEST \", \"FOR \", \"ALL\", \"UTS\")) == ('DSP IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL UTS')\n\n\ndef test_3():\n    assert concatenate_elements((\"DSP\", \"IS\", \"BEST\", \"FOR\", \"ALL\", \"UTS\")) == ('DSP IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL UTS')\n\n\ndef test_4():\n    assert concatenate_elements((\"DSP\", \"IS\", \"BEST\", \"FOR\", \"ALL\", \"UTS\", \"RS\")) == ('DSP IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL UTS', 'RS')\n\n\ndef test_5():\n    assert concatenate_elements((\"DSP\", \"IS\", \"BEST\", \"FOR\", \"ALL\", \"UTS\", \"RS\", \"GOOD\")) == ('DSP IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL UTS', 'RS GOOD')\n\n\ndef test_6():\n    assert concatenate_elements((\"DSP\", \"IS\", \"BEST\", \"FOR\", \"ALL\", \"UTS\", \"RS\", \"GOOD\", \"PROBLEM\", \"SOLUTION\")) == ('DSP IS', 'IS BEST', 'BEST FOR', 'FOR ALL', 'ALL UTS', 'RS GOOD', 'GOOD PROBLEM', 'PROBLEM SOLUTION')\n\n\ndef test_7():\n    assert concatenate_elements((\"DSP\",", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\nfrom itertools import groupby\nfrom typing import Iterable, Tuple, List\n\n\ndef concatenate_elements(strings: Iterable[str]) -> Tuple[str]:\n    \"\"\"Returns a tuple of strings after concatenation.\n\n    Args:\n        strings (Iterable[str]): Strings to concatenate\n\n    Returns:\n        Tuple[str]: Concatenated strings\n    \"\"\"\n\n    return tuple(\"\".join(g) for _, g in groupby(strings, key=lambda x: x == \" \" or x == \"\"))\n\n\ndef main():\n    print(concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")))\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    \"\"\"\n    Concatenates adjacent elements in the given tuple\n    :param tuples: The tuple containing the elements\n    :return: The tuple containing the concatenated elements\n    \"\"\"\n    return [ ''.join(tuples[i:i+2]) for i in range(len(tuples)-1) ]\n\n# Tests", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\nfrom typing import Tuple\n\n\ndef concatenate_elements(tuples: Tuple[str]) -> Tuple[str]:\n    \"\"\"\n    >>> concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n    ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    \"\"\"\n    return tuple(\n        (\" \" + element if index != len(tuples) - 1 else element) for index, element in enumerate(tuples)\n    )\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(s):\n\tdp = [[0] * len(s) for _ in range(len(s))]\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif i == j:\n\t\t\t\tdp[i][j] = 1\n\t\t\telif s[i] == s[j]:\n\t\t\t\tif j - i == 1:\n\t\t\t\t\tdp[i][j] = 2\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i+1][j-1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\treturn dp[0][len(s)-1]\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(str):\n    a = [0] * (256)\n    longest_repeating_subseq = 1\n    for i in str:\n        index = ord(i)\n        a[index] += 1\n    for i in range(len(str)):\n        index = ord(str[i])\n        if a[index] == 1:\n            longest_repeating_subseq = max(longest_repeating_subseq, 1)\n        else:\n            longest_repeating_subseq = max(longest_repeating_subseq, 2)\n    return longest_repeating_subseq\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(str):\n    if len(str) == 0:\n        return 0\n\n    if len(str) == 1:\n        return 1\n\n    # initialise the cache\n    cache = [[0 for _ in range(len(str))] for _ in range(len(str))]\n\n    # populate the cache\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if i == j:\n                cache[i][j] = 1\n            elif str[i] == str[j]:\n                cache[i][j] = 1 + cache[i - 1][j - 1]\n            else:\n                cache[i][j] = max(cache[i - 1][j], cache[i][j - 1])\n\n    # return the max in the cache\n    return max(cache[i][j] for i in range(len(str)) for j in range(len(str)))\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    arr = []\n    for i in range(len(string)):\n        a = string[i]\n        flag = True\n        for j in range(i+1, len(string)):\n            if string[j] == a:\n                arr.append(a)\n                flag = False\n                break\n        if flag:\n            arr.append(a)\n\n    print(arr)\n    # print(len(arr))\n    # print(len(set(arr)))\n    # print(len(arr)-len(set(arr)))\n    return len(arr) - len(set(arr))\n\nfind_longest_repeating_subseq(\"AABEBCDD\")\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\nfrom typing import Dict, List\n\n# To be completed\ndef find_longest_repeating_subseq(s: str) -> int:\n    pass\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    lookup = [1] + [0] * len(string)\n    for index, char in enumerate(string):\n        for sub_index, sub_char in enumerate(string[index+1:], start=index+1):\n            if char == sub_char and lookup[sub_index] + 1 > lookup[index]:\n                lookup[index] = lookup[sub_index] + 1\n    return max(lookup)\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(str1):\n    \"\"\"\n    str1: string input\n    returns: length of longest repeating subsequence\n    \"\"\"\n    # create a 2d array to track all subsequences\n    str1 = str1.upper()\n    subseq_matrix = [[0 for _ in range(len(str1) + 1)] for _ in range(len(str1) + 1)]\n\n    # populate subseq_matrix by iterating over str1\n    # check out the implementation\n    for subseq_len in range(1, len(str1) + 1):\n        for i in range(len(str1) - subseq_len + 1):\n            j = i + subseq_len\n            subseq_matrix[i][j] = 0\n            if str1[i] == str1[j-1]:\n                subseq_matrix[i][j] = subseq_matrix[i][j-1] + 1\n\n    # find maximum subseq length\n    max_subseq_len = 0\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1) + 1):\n            if subseq_matrix[i][j] > max_subseq_len:\n                max_subseq_len = subseq_matrix[i][j]\n\n    # find the max subseq in subseq_matrix where value is max_subseq_len\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1) + 1):\n            if subseq_matrix[i][j] == max_subseq_len:\n                return max_subseq_len\n    return max_subseq_len\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    longest_length = 0\n    current_length = 0\n\n    for i in range(len(string) - 1):\n        current_length = 1 if string[i] != string[i + 1] else current_length + 1\n\n        if current_length > longest_length:\n            longest_length = current_length\n\n    return longest_length\n\n\ndef find_longest_repeating_subseq_v2(string):\n    longest_length = 0\n    current_length = 0\n\n    for i in range(len(string) - 1):\n        if string[i] != string[i + 1]:\n            longest_length = max(longest_length, current_length)\n            current_length = 1\n        else:\n            current_length += 1\n\n    return max(longest_length, current_length)\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\ndef find_longest_repeating_subseq(input):\n    # using dictionary for O(n) time complexity\n    # first get all the unique characters in the given string\n    # then create a dictionary with default value of 0\n    # for each unique character\n    # add one if there is another instance of the same\n    # character in the string\n    char_count = defaultdict(int)\n    for c in input:\n        char_count[c] += 1\n    # now get all the subsequences of length 2\n    # and find the longest sequence where the two subsequences\n    # don't have same characters at same positions\n    longest_repeating_subseq = 0\n    for i, c in enumerate(input):\n        # remove the character at index i and find the longest\n        # repeating subsequence that has two subsequences that\n        # don't have same characters at same positions\n        char_count[c] -= 1\n        longest_subseq = find_longest_subseq(input[:i] + input[i + 1:], char_count)\n        longest_repeating_subseq = max(longest_repeating_subseq, longest_subseq + 1)\n    return longest_repeating_subseq\n\n\ndef find_longest_subseq(input, char_count):\n    # find the longest subsequence\n    # that has two subsequences that\n    # don't have same characters at same positions\n    longest_subseq = 0\n    for i, c in enumerate(input):\n        # remove the character at index i and find the longest\n        # repeating subsequence that has two subsequences that\n        # don't have same characters at same positions\n        char_count[c] -= 1\n        longest_subseq = max(longest_subseq, find_longest_subseq(input[:i] + input[i + 1:], char_count) + 1)\n    return longest_subseq\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(decimal_string):\n    pattern = re.compile(r'^\\d+(\\.\\d{1,2})?$')\n    return pattern.match(decimal_string)\n\n\n# tests", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(s):\n    \"\"\"\n    s: String\n    \"\"\"\n    import re\n    return bool(re.match(r'\\d+\\.\\d{2}', s))\n\n#is_decimal('123.11')\n#is_decimal('123.1123')\n#is_decimal('123.112')\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\n\ndef is_decimal(value):\n    try:\n        float(value)\n    except ValueError:\n        return False\n    else:\n        return re.match(r'^[-+]?\\d*\\.\\d{2}$', value)\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\ndef is_decimal(num):\n    pattern = r'[+-]?\\d+(\\.\\d+)?'\n    return bool(re.match(pattern, num))", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(num):\n    return bool(re.match(r'^[-+]?\\d*\\.\\d{2}$', num))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(num):\n    if isinstance(num, str) and re.match(r'^-?\\d+\\.?\\d{0,2}$', num):\n        return True\n    else:\n        return False\n\n# Alternative\ndef is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\n\ndef is_decimal(s: str) -> bool:\n    return re.search(r'^\\d*?\\.\\d{2}$', s)\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(text):\n    return re.match(r'\\d+\\.\\d\\d$', text) != None", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(input_string):\n  if re.search(r'^-?\\d+\\.(\\d\\d)?$', input_string):\n    return True\n  return False\n\ndef main():\n  print(is_decimal('123.11'))\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\nfrom heapq import heapify, heappop, heappush, heapreplace\n\n\ndef heap_replace(heap, item):\n    heappush(heap, item)\n    return heappop(heap)\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"56vU_c_g6QLo\" outputId=\"04c073ac-b4f7-41ef-9c95-9e5b232b8641\"\ndef heap_replace(heap,new_val):\n  heap[0] = new_val\n  heapify(heap,0)\n  return heap\n\nheap_replace([25, 44, 68, 21, 39, 23, 89],21)\n\n# + [markdown] id=\"h18E31DB8fQi\"\n# <h3>2.3 Delete an Item from the Heap\n# <h6>\n# Delete the smallest element from the heap, and replace it with the last element.\n# <h6>\n# <h6>\n#\n\n# + [markdown] id=\"A7CRfZ498peN\"\n# <h6>\n# Write a function to delete the smallest element from the given heap and then add a new item.\n# <h6>\n# <h6>\n#\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"2_thjsGz8rVa\" outputId=\"06b4c92b-3dc5-47bb-9a36-866e2032201a\"\nimport heapq\n\ndef heap_pop(heap):\n  heapq.heapreplace(heap,float('inf'))\n  return heapq.heappop(heap)\n\nheap_pop([25, 44, 68, 21, 39, 23, 89])\n\n\n# + [markdown] id=\"QAPyM", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap,value):\n    \"\"\"\n    Takes a heap and adds a new value to it without affecting the order.\n    Returns the new heap.\n    \"\"\"\n    # TODO: Write your code here\n    \"\"\"\n    binary heap: \n    insert: append, then bubble up\n    delete min: replace with end, then bubble down\n    delete: swap with last, then bubble down\n    \"\"\"\n    heap.append(value)\n    bubble_up(heap,len(heap)-1)\n    return heap\n\n\ndef bubble_up(heap,idx):\n    \"\"\"\n    Takes a heap and a value\n    checks the node at idx to see if it's less than its parent node\n    if it is, swaps the two nodes\n    \"\"\"\n    # TODO: Write your code here\n    parent_idx = (idx-1)//2\n    if idx == 0:\n        return\n    if heap[parent_idx] > heap[idx]:\n        heap[parent_idx],heap[idx] = heap[idx],heap[parent_idx]\n        bubble_up(heap,parent_idx)\n\n\ndef heap_sort(heap):\n    \"\"\"\n    Takes a heap and returns a sorted array\n    \"\"\"\n    # TODO: Write your code here\n    sorted_heap = []\n    for i in range(len(heap)):\n        sorted_heap.append(heap[0])\n        heap_replace(heap,heap[-1])\n    return sorted_heap\n\n\ndef heap_delete_min(heap):\n    \"\"\"\n    Takes a heap and returns a heap without the min value\n    \"\"\"\n    # TODO: Write your code here\n    heap[0] = heap[-1]\n    del heap[-1]\n    bubble_down(heap,0)\n    return heap\n\n\ndef bubble_down(heap,idx):\n    \"\"\"\n    Takes a heap and a value\n    checks the node at idx to see if it's less than its child node\n    if it is, swaps the two nodes\n    \"\"\"\n    # TODO: Write your code here\n    left_idx", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap,val):\n    new_heap = []\n    new_heap.append(val)\n    for i in heap:\n        if i > val:\n            new_heap.append(i)\n    return new_heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(arr, val):\n    arr[0] = val\n    heap_size = len(arr)\n    #print(\"Heap size: \",heap_size)\n    i = 0\n    #print(\"Parent: \",arr[i])\n    #print(\"arr[left]: \",arr[2*i])\n    #print(\"arr[right]: \",arr[2*i+1])\n    while 2*i+1 < heap_size:\n        #print(\"Left: \",2*i)\n        #print(\"Right: \",2*i+1)\n        min_idx = 2*i\n        if arr[2*i+1] < arr[min_idx]:\n            min_idx = 2*i+1\n        #print(\"min_idx: \",min_idx)\n        #print(\"arr[i]: \",arr[i])\n        #print(\"arr[min_idx]: \",arr[min_idx])\n        if arr[i] < arr[min_idx]:\n            break\n        #print(\"Swapping {} and {}\".format(arr[i], arr[min_idx]))\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        i = min_idx\n    #print(\"Final: \",arr)\n    return arr\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,value):\n    heap[0]=value\n    for i in range(0,len(heap),2):\n        left=i+1\n        right=i+2\n        max_i=i\n        if left<len(heap) and heap[left]>heap[max_i]:\n            max_i=left\n        if right<len(heap) and heap[right]>heap[max_i]:\n            max_i=right\n        if max_i!=i:\n            heap[i],heap[max_i]=heap[max_i],heap[i]\n            i=max_i\n    return heap\n\nheap=[25, 44, 68, 21, 39, 23, 89]\nheap=heap_replace(heap,21)", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, val):\n  \"\"\"Delete smallest element in heap and insert new value\"\"\"\n  heapq.heappush(heap, val) # replace is O(logN)\n  heapq.heappop(heap)\n  return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(array, item):\n    index_to_replace = 0\n    while index_to_replace < len(array):\n        if array[index_to_replace] < item:\n            item, array[index_to_replace] = array[index_to_replace], item\n            index_to_replace = len(array)\n        else:\n            index_to_replace += 1\n    array.append(item)\n    array.sort()\n    array.pop(0)\n    return array", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap,item):\n    heap.append(item)\n    #the reason why we need to write function like heapify is that heapq only provides function like heapify,heappush,heappop,\n    #these function works on max heap\n    heapify(heap)\n    return heap[0:-1]\n\n#coding:utf-8"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(str):\n    if len(str) == 0 or len(str) > 100:\n        return False\n    \n    return re.match(r'^[a-z0-9]+$', str) != None\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(text):\n    pattern = r'[a-zA-Z0-9]'\n    if re.fullmatch(pattern, text):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(input):\n    return True if re.match(r\"^[a-zA-Z0-9]*$\",input) else False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(s):\n    return bool(re.match(r'^[a-zA-Z0-9]*$',s))\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\nimport pytest\n\ndef is_allowed_specific_char(str):\n    \"\"\"\n    Return True if the given string contains only a certain set of characters(in this case a-z, a-z and 0-9)\n    by using regex.\n    \"\"\"\n    return bool(re.match(r'^[a-zA-Z0-9]+$', str))\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(test_str):\n    \"\"\"\n    Checks if the test_str consists of characters a-z, A-Z and 0-9\n    :param test_str: The string to test\n    :return: True if test_str consists only of a-z, A-Z and 0-9, False otherwise\n    \"\"\"\n    return re.match(r'^[a-zA-Z0-9]+$', test_str) is not None\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(s):\n    return re.match(r'^[a-zA-Z0-9]+$',s)\n\n#test", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    regex = re.compile(r'^[a-zA-Z0-9]*$')\n    return regex.search(string) != None\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\",string))\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    ans = 0\n    for i in range(n+1):\n        mask = (1<<i) - 1\n        if mask & n == 0:\n            ans += 1\n        if mask & n == mask:\n            ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n\tcount = 0\n\tfor i in range(n):\n\t\tif (i & 1) != 0 and (i & 2) != 0:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    num = 1\n    while num<n:\n        num = num << 1\n        count += 1\n    count = 0\n    while n:\n        count += 1 if n&1 else 0\n        n = n >> 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\nfrom collections import Counter\n\ndef count_Num(n):\n    c = Counter()\n    for i in range(2**n):\n        c[i] = bin(i).count('1') % 2\n    return c[n]\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\nfrom typing import List", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    if n==1:\n        return 1\n    else:\n        return (n ** 4) + fourth_Power_Sum(n - 1)\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n  # TODO: Write your code here\n  sum = 0\n  for i in range(n+1):\n    sum = sum + i**4\n  return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    ans = 0\n    for i in range(n):\n        ans += i**4\n    return ans\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    return (n * (n + 1) * (2 * n + 1) * (3 * n + 1)) // 24\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n#%%", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**4)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_power_sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i**4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    a = 0\n    for i in range(1, n+1):\n        a = a + (i**4)\n    return a\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\n# +\n# Solution\n\nfrom typing import Tuple\n\ndef concatenate_strings(s: Tuple[str], t: Tuple[str]) -> Tuple[str]:\n    return tuple([s + t for s, t in zip(s, t)])\n\n\n# -\n\nconcatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))\n\n\n# ### 2. \n#\n# Write a function that takes a list of numbers as input and returns a tuple where all the negative numbers have been removed, and the positive numbers have been moved to the front.\n\n# +\n# Solution\n\ndef make_tuple(lst: list) -> Tuple[int]:\n    return tuple(sorted([x for x in lst if x >= 0])) + tuple(sorted([x for x in lst if x < 0]))\n\n\n# -\n\nmake_tuple([4, -2, -5, 7, -1])\n\n# ### 3.\n#\n# Write a function that creates a list of tuples. Each tuple has two elements. The first element is a string containing a movie title. The second element is the length of the movie in minutes. The list should be sorted alphabetically by movie title.\n\n# +\n# Solution\n\nmovies = [\n    (\"Jaws\", 140),\n    (\"Alien\", 105),\n    (\"Titanic\", 194),\n    (\"Raiders of the Lost Ark\", 201),\n    (\"Star Wars\", 121),\n    (\"The Usual Suspects\", 100),\n    (\"The Dark Knight\", 152),\n    (\"Pulp Fiction\", 154),\n]\n# -\n\nsorted(movies)\n\nsorted(movies, key=lambda x: x[0])\n\n\n# ### 4. \n#\n# Write a function that creates a list of tuples. Each", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(string_tuple_1, string_tuple_2):\n    l = [string_tuple_1[i] + string_tuple_2[i] for i in range(len(string_tuple_1))]\n    return tuple(l)\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\n# 1. Solution:\n\n\ndef concatenate_strings(string_tuple1, string_tuple2):\n    return string_tuple1 + string_tuple2\n\n\n# 2. Solution:\n\n\ndef concatenate_strings(string_tuple1, string_tuple2):\n    return tuple(map(lambda x, y: x + y, string_tuple1, string_tuple2))\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tup1, tup2):\n    # Code Here\n    return [x+y for x,y in zip(tup1,tup2)]\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tup1, tup2):\n    return tuple([i + j for i, j in zip(tup1, tup2)])\n    ", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tup1,tup2):\n    return tuple(tup1[i]+tup2[i] for i in range(len(tup1)))", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tup1, tup2):\n    return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(str1, str2):\n    list1 = list(str1)\n    list2 = list(str2)\n    # concatenate the two lists\n    # list1.extend(list2)\n    # return tuple(list1)\n\n    result = tuple([list1[i] + list2[i] for i in range(len(list1))])\n\n    return result\n\n\nconcatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple1[0] + tuple2[0], tuple1[1] + tuple2[1], tuple1[2] + tuple2[2]\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    degree = radian * 180 / np.pi\n    return degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian*180/pi\n\ndef main():\n    print degree_radian(90)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(rad):\n    return rad * (180/pi)\n\n\n# -\n\ndegree_radian(90)\n\n# ### Exercise 2\n# Write a function to convert degrees to radians.\n# assert radian_degree(5156.620156177409)==90\n\nradian_degree(5156.620156177409)\n\n\n# ## 4. Function with a default value\n\n# ### Exercise 3\n# Write a function to convert Celsius to Fahrenheit\n#\n# - Function must have 1 argument and default value for the second argument\n#\n# - Function must take a temperature in Celsius and return the temperature in Fahrenheit\n#\n# - Use formulas to convert\n#\n# - Output should be rounded off to 2 decimal places\n#\n# - If the second argument is not passed, the function should convert the temperature in Celsius to Fahrenheit by default\n\n# +\ndef cel_to_fahr(celsius,default=1.8):\n    return round((celsius * default) + 32,2)\n\ncel_to_fahr(23)\n# -\n\ncel_to_fahr(23,1.6)\n\n\n# ## 5. Function with variable length argument\n# ### Exercise 4\n# Write a function to find the sum of any number of values\n# - Function must accept any number of arguments\n# - Function must return the sum of all values passed\n# - Function must work for single values as well as for multiple values\n#\n# #### Hint:\n# Use `*` to pass variable arguments to a function. For example, `sum_all_values(10,20,30)`\n\n# +\ndef sum_all_values(*args):\n    total = 0\n    for val in args:\n        total += val\n    return total\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return 360*(radian/(2*math.pi))", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(rad):\n    \"\"\"\n    Convert radians to degrees.\n    \"\"\"\n    return rad*180/np.pi\n\ndef test_degree_radian():\n    assert degree_radian(90)==5156.620156177409\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(rad):\n    return rad*180/pi", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return radian * (180/math.pi)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(rad):\n    return rad * (180 / pi)\n\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n\treturn radian * (180/pi)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return 180 * radian / pi\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\nfrom collections import Counter\n\n\ndef decode_list(L):\n    \"\"\"\n    >>> decode_list([[2, 1], 2, 3, [2, 4], 5,1])\n    [1, 1, 2, 3, 4, 4, 5, 1]\n    \"\"\"\n    cnt = Counter()\n    for i in L:\n        if isinstance(i, list):\n            cnt[i[0]] = i[1]\n        else:\n            cnt[i] += 1\n    return [i for i, _ in cnt.items() for _ in range(cnt[i])]\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(lst):\n    temp = []\n    for i in lst:\n        if type(i)==int:\n            temp.extend([i]*i)\n        else:\n            for j in i:\n                temp.extend([j]*i[1])\n    return temp\n    ", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(L):\n    return [num for num, count in L for i in range(count)]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(input_list):\n    # base case\n    if len(input_list)==0:\n        return []\n    # recursive case\n    if type(input_list[0])==list:\n        return [x for i in input_list[0] for x in decode_list(i)] + decode_list(input_list[1:])\n    else:\n        return [input_list[0]]+decode_list(input_list[1:])\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(lst):\n  if lst is None:\n    return []\n  if len(lst)==1:\n    if isinstance(lst[0],list):\n      return decode_list(lst[0])\n    else:\n      return lst\n  else:\n    new_lst=decode_list(lst[1:])\n    if isinstance(lst[0],list):\n      return lst[0][0]*lst[0][1]+new_lst\n    else:\n      return [lst[0]]+new_lst\n\ndecode_list([[2, 1], 2, 3, [2, 4], 5,1])\ndecode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(list_to_decode):\n    decoded_list = []\n    for item in list_to_decode:\n        if type(item) == list:\n            repeat_times = item[0]\n            repeat_list = item[1]\n            decoded_list += [repeat_list] * repeat_times\n        else:\n            decoded_list.append(item)\n    return decoded_list\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    new_list = []\n    for item in l:\n        if not isinstance(item,list):\n            for i in range(item):\n                new_list.append(item)\n        else:\n            for i in range(item[0]):\n                new_list.append(item[1])\n    return new_list\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\nfrom typing import List\n\n\ndef decode_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    result: List[int] = []\n    while lst:\n        if isinstance(lst[0], list):\n            result.extend([item for _ in range(lst[0][0]) for item in lst[0][1:]])\n            lst = lst[1:]\n        else:\n            result.append(lst[0])\n            lst = lst[1:]\n    return result\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = decode_list(arr)\n    if sum(output) == sum(solution):\n        print(\"Pass!\")\n    else:\n        print(f\"Fail! Expected {solution}, got {output}\")\n\n\narr = [[2, 1], 2, 3, [2, 4], 5, 1]\nsolution = [1, 1, 2, 3, 4, 4, 5, 1]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = []\nsolution = []\ntest_case = [arr, solution]\ntest_function(test_case)\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    res = []\n    for i in l:\n        if isinstance(i,int):\n            res.append(i)\n        else:\n            res.extend([i[0]]*i[1])\n    return res\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    def decode_sub(l,c):\n        if isinstance(l,list):\n            return [decode_sub(i,c) for i in l]\n        else:\n            return c*l\n    return decode_sub(l,1)\n\ndef main():\n    l = [[2, 1], 2, 3, [2, 4], 5,1]\n    print(decode_list(l))\n    l = [[[2, 1], [2, 4], 1, 5], 2, [2, 3], 4]\n    print(decode_list(l))\n\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\nfrom collections.abc import Iterable\n\ndef check_subset_list(l1, l2):\n    \"\"\"\n    :param l1: list of integers or iterables\n    :param l2: list of integers or iterables\n    :return: True if l1 is a subset of l2, else False\n    \"\"\"\n    return all(map(lambda x: x in l2, l1))\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\nfrom typing import List, Set\nfrom pprint import pprint\n\ndef check_subset_list(\n    l1: List[int],\n    l2: List[List[int]],\n) -> bool:\n    # Write your code here\n    if l1 == [] and l2 == []:\n        return True\n    if l2 == []:\n        return False\n    if len(l1) > len(l2):\n        return False\n\n    if l1[0] in l2[0]:\n        return check_subset_list(l1[1:], l2)\n\n    return check_subset_list(l1, l2[1:])\n\n\ndef test_function(test_case):\n    l1 = test_case[0]\n    l2 = test_case[1]\n    solution = test_case[2]\n    output = check_subset_list(l1, l2)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr1 = [12, 18, 23, 25, 45]\narr2 = [7, 11, 19, 24, 28]\narr3 = [1, 5, 8, 18, 15, 16]\n\narr4 = [12, 18, 23, 25, 45]\narr5 = [7, 11, 19, 24, 28]\narr6 = [1, 5, 8, 18, 15, 16]\n\narr7 = [1, 2, 3, 4, 5", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(outerlist,innerlist):\n    for i in innerlist:\n        if i not in outerlist:\n            return False\n        else:\n            return True", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\nfrom collections import Counter\n\ndef check_subset_list(list1,list2):\n    c = Counter(list1)\n    d = Counter(list2)\n    return c.items() <= d.items()\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    is_subset = True\n    if not list1:\n        return False\n    for i in range(0,len(list1)):\n        if not list1[i] in list2:\n            is_subset = False\n            break\n        else:\n            is_subset = True\n    return is_subset\n\n#test case 1", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(main_list, subset_list):\n    for x in main_list:\n        for y in subset_list:\n            if y==x:\n                return True\n    return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\treturn False\n\treturn True", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(subset_list, superset_list):\n    for item in subset_list:\n        if item not in superset_list:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1,list2):\n    for i in list1:\n        for j in list2:\n            if i==j:\n                continue\n        return False\n    return True\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\nimport itertools\ndef check_subset_list(list1,list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if all(element in list2[j] for element in list1[i]):\n                break\n        else:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\nfrom collections import defaultdict\n\n\ndef first_Repeated_Char(s):\n    if len(s) == 1:\n        return s\n    repeated = defaultdict(int)\n    for char in s:\n        repeated[char] += 1\n        if repeated[char] > 1:\n            return char\n\n\ndef test():\n    print(\"Test for first_Repeated_Char\")\n    assert first_Repeated_Char(\"Google\") == \"o\"\n\n\ntest()\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(input_string):\n    input_string = input_string.lower()\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)):\n            if input_string[i] == input_string[j]:\n                return input_string[i]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\n# Solution 1 (bruteforce)\n# Time Complexity = O(n^2)\n# Space Complexity = O(1)\ndef first_Repeated_Char(str_val):\n    for i in range(len(str_val)-1):\n        for j in range(i+1,len(str_val)):\n            if str_val[i] == str_val[j]:\n                return str_val[i]\n    return None\n\n# Solution 2 (Use a hash table)\n# Time Complexity = O(n)\n# Space Complexity = O(n)\ndef first_Repeated_Char(str_val):\n    hmap = {}\n    for char in str_val:\n        if char in hmap:\n            return char\n        else:\n            hmap[char] = 1\n    return None\n\n# Solution 3 (Use a Set)\n# Time Complexity = O(n)\n# Space Complexity = O(n)\ndef first_Repeated_Char(str_val):\n    char_set = set()\n    for char in str_val:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None\n\n# Solution 4 (Use a Dictionary)\n# Time Complexity = O(n)\n# Space Complexity = O(n)\ndef first_Repeated_Char(str_val):\n    char_dict = {}\n    for char in str_val:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n\n# Solution 5 (Use a Counter)\n# Time Complexity = O(n)\n# Space Complexity = O(n)\nfrom collections import Counter\ndef first_Repeated_Char(str_val):\n    char_counter = Counter(str_val)\n    for char in char_counter.keys():\n        if char_counter[char] > 1:\n            return char\n    return None\n\n# Solution 6 (Use a Set)\n# Time Complexity = O(n)\n# Space Complexity = O(n)\nfrom collections import Counter\ndef first_Repeated", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    return \"\" if len(string) <= 1 else string[next(x[1] for x in enumerate(string) if x[1] < len(string) and x[0] == string[x[1]])]\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str1):\n    list1 = list(str1)\n    for i in list1:\n        if list1.count(i) > 1:\n            return i\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n    seen = {}\n    for c in s:\n        if c in seen:\n            return c\n        else:\n            seen[c] = True\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\nimport collections\n\ndef first_Repeated_Char(string):\n    string = string.lower()\n    dict = collections.Counter(string)\n    return dict.most_common(1)[0][0]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    index = 0\n    while index < len(str):\n        if str[index] in str[index+1:]:\n            return str[index]\n        index += 1\n    return None\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    hashmap = {}\n    for i in string:\n        if i in hashmap:\n            return i\n        else:\n            hashmap[i] = 1\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    pass\n\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n#Solution\ndef min_Operations(n,m):\n    count = 0\n    for i in range(1,n+1):\n        count += n//i\n    for i in range(1,m+1):\n        count += m//i\n    return count-n-m\n\n#Tests", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    return sum(list(map(int,bin(a^b)[2:])))\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_operations(m,n):\n    count = 0\n    while m != n:\n        if m > n:\n            m = m - n\n        else:\n            n = n - m\n        count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(num1,num2):\n    count = 0\n    while num1 != num2:\n        if num1 < num2:\n            num1 += num2\n        else:\n            num2 += num1\n        count += 1\n    return count\n\n\n# One liner\ndef min_Operations(num1,num2): return (num2 - num1).bit_length() - 1\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x,y):\n    if x == y:\n        return 0\n    if x > y:\n        x, y = y, x\n    diff = x - y\n    if diff % 2 == 1:\n        return min_Operations(x, y + 1) + diff + 1\n    else:\n        return min_Operations(x, y + 1) + diff\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x,y):\n    if x>y:\n        x,y = y,x\n    a = x\n    b = y\n    counter = 0\n    while a%2 == 0 and b%2 == 0:\n        a /= 2\n        b /= 2\n        counter += 1\n    if a == 1 or b == 1:\n        return counter\n    return min(counter,min_Operations(a,b*2)+min_Operations(b,a*2))\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(n, m):\n  # code goes here\n  return (m - n).bit_length()\n\n# keep this function call here ", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x,y):\n    sum1,sum2 = 0,0\n    for i in str(x):\n        sum1 += int(i)\n    for i in str(y):\n        sum2 += int(i)\n    return abs(sum1-sum2)\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nimport heapq\nfrom typing import List\n\n\ndef extract_min_max(nums: List[int], k: int) -> List[int]:\n    max_heap, min_heap = [], []\n    for i, num in enumerate(nums):\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, num)\n        else:\n            if max_heap[0] < num:\n                heapq.heappushpop(max_heap, num)\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if min_heap[0] > num:\n                heapq.heappushpop(min_heap, num)\n\n    return max_heap + min_heap[::-1]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(numbers, k):\n    return sorted(numbers)[:k] + sorted(numbers)[-k:]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nfrom heapq import *\n\n\ndef extract_min_max(arr, k):\n    minh = []\n    maxh = []\n    for i in arr:\n        heappush(minh, -i)\n        heappush(maxh, i)\n\n    return [-heappop(minh) for _ in range(k)] + [heappop(maxh) for _ in range(k)]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tuple, k):\n  return tuple[k:] + tuple[:k]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(arr, k):\n    \"\"\"\n    arr: list\n    k: int\n    \"\"\"\n    # write your logic here\n    arr = sorted(arr)\n    return arr[0:k] + arr[len(arr) - k:]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\n# %%\n# The tuple **x** is given.\n# We have to return the maximum and minimum k elements in the tuple **x** as a tuple.\ndef extract_min_max(x, k):\n    # Your Code Here\n    min_heap = []\n    max_heap = []\n\n    for i in range(k):\n        heapq.heappush(max_heap, x[i])\n\n    for i in range(k, len(x)):\n        heapq.heappush(min_heap, x[i])\n        heapq.heappush(max_heap, heapq.heappop(max_heap))\n        heapq.heappush(min_heap, heapq.heappop(min_heap))\n\n    return tuple(max_heap + min_heap)\n\n\nextract_min_max((5, 20, 3, 7, 6, 8), 2)\n\n\n# %% [markdown]\n# # 3.3. [Medium] Kth largest element\n#\n# <br>\n# <div style=\"text-align: justify\">\n#     Find the kth largest element in an array and return its value.\n# </div>\n# <br>\n# <div style=\"text-align: justify\">\n#     Examples:\n# <ul>\n#     <li>\n#         <code>kth_largest([5, 20, 3, 7, 6, 8], 2)</code>\n#         <ul>\n#             <li>returns <code>7</code></li>\n#         </ul>\n#     </li>\n#     <li>\n#         <code>kth_largest([5, 20, 3, 7, 6, 8], 3)</code>\n#         <ul>\n#             <li>returns <code>5</code></li>\n#         </ul>\n#     </li>\n#     <li>\n#", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom heapq import heappush, heappop\n\n\ndef extract_min_max(values: tuple, k: int) -> tuple:\n    \"\"\"Get max and min of k elements.\n\n    :param values: Tuple of values.\n    :type values: tuple\n    :param k: Number of elements.\n    :type k: int\n    :return: Min and max values.\n    :rtype: tuple\n    \"\"\"\n    min_heap, max_heap = [], []\n\n    for v in values:\n        if len(min_heap) < k:\n            heappush(min_heap, v)\n        elif v < min_heap[0]:\n            heappush(min_heap, v)\n            heappop(min_heap)\n        if len(max_heap) < k:\n            heappush(max_heap, -v)\n        elif -v < max_heap[0]:\n            heappush(max_heap, -v)\n            heappop(max_heap)\n\n    return tuple(min_heap + max_heap[::-1])\n\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(text,n):\n    text = text.split()\n    count_max = count = 0\n    for word in text:\n        count = count + word.count(',') + word.count('.') + word.count(' ')\n        if count > count_max:\n            count_max = count\n    \n    if count_max > n:\n        for i in range(len(text)):\n            for char in text[i]:\n                if char == ',' or char == '.' or char == ' ':\n                    text[i] = ':'\n    return ' '.join(text)\n\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string,n):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    words = string.split(' ')\n    #print(words)\n    result = []\n    for word in words:\n        #print(word)\n        new_word = ''\n        for i in range(len(word)):\n            #print(word[i])\n            if word[i] in [',', '.',' ']:\n                if new_word.count(word[i])<n:\n                    new_word+=word[i]\n                elif new_word.count(word[i])==n:\n                    new_word+=':'\n            else:\n                new_word+=word[i]\n        #print(new_word)\n        result.append(new_word)\n    return ' '.join(result)\n        \n# Test", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(text, max_char_to_replace):\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\nimport re\n\ndef replace_max_specialchar(s, n):\n    s = s.replace(' ',':')\n    s = s.replace(',',':')\n    s = s.replace('.',':')\n    return s\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str, n):\n    # Write your code here.\n    pass\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(text, max_occur):\n    max_occurred = 0\n    chars_to_replace = [' ', ',', '.']\n    replacement_char = ':'\n    new_text = text\n    for i in chars_to_replace:\n        if text.count(i) >= max_occurred:\n            max_occurred = text.count(i)\n            max_char = i\n    if max_occurred < max_occur:\n        new_text = text\n    else:\n        new_text = text.replace(max_char, replacement_char, max_occur)\n    return new_text\n\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\nfrom collections import Counter\ndef replace_max_specialchar(text, n):\n    c = Counter(list(text))\n    return \"\".join(c.most_common(n).pop()[0]+\":\" for x in text if c[x]==c.most_common(n)[0][1])", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string, n):\n  new_string = string\n  for i in range(1,len(new_string)):\n    if new_string[i] in [',', '.', ' ']:\n      count = 0\n      for j in range(i+1, len(new_string)):\n        if new_string[j] == new_string[i]:\n          count += 1\n      if count > n:\n        new_string = new_string[:i] + ':' + new_string[i+1:]\n        break\n  return new_string\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(str, n):\n    #convert string to list of characters\n    l=list(str)\n    count=0\n    #start from end of string, traverse backwards\n    for i in range(len(l)-1,-1,-1):\n        if(l[i]==',' or l[i]==' ' or l[i]=='.'):\n            count+=1\n            #if count exceeds n, replace with ':' and break loop\n            if(count>n):\n                l[i]=':'\n                break\n    #convert list of characters back to string and return\n    return ''.join(l)\n\n\ndef replace_max_specialchar_alt(str, n):\n    return str.replace(',', ':').replace('.', ':').replace(' ', ':').replace('  ', ':')[:n].replace(':', ',')\n\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string, max_specialchar):\n    for i in range(len(string)):\n        if string[i] == ' ' and max_specialchar:\n            string = string[:i] + ':' + string[i+1:]\n            max_specialchar -= 1\n        if string[i] == '.' and max_specialchar:\n            string = string[:i] + ':' + string[i+1:]\n            max_specialchar -= 1\n        if string[i] == ',' and max_specialchar:\n            string = string[:i] + ':' + string[i+1:]\n            max_specialchar -= 1\n    return string\n\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(L):\n    for i in L:\n        if i % 2 == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    for num in lst:\n        if num % 2 == 0:\n            return num\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n# We have to write a function to check if a number is even or not.\ndef is_even(num):\n    return num%2==0\n\ndef first_even(numbers):\n    for num in numbers:\n        if is_even(num):\n            return num\n        else:\n            pass\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n  for num in numbers:\n    if num % 2 == 0:\n      return num\n  return None\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(l):\n    \"\"\"Return the first even number in l or None\"\"\"\n    for n in l:\n        if n % 2 == 0:\n            return n\n    return None\n\ndef first_even_alt(l):\n    \"\"\"Return the first even number in l or None\"\"\"\n    return next((n for n in l if n % 2 == 0), None)\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (nums):\n    for x in nums:\n        if x % 2 == 0:\n            return x\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\n#1\ndef first_even(ls):\n    for num in ls:\n        if num % 2 == 0:\n            return num\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even (lst):\n    for num in lst:\n        if num % 2 == 0:\n            return num\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple):\n\treturn all(isinstance(t,type(tuple[0])) for t in tuple)\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(t):\n  return type(t[0]) == type(t[1])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple):\n    try:\n        if len(tuple) == 1:\n            return True\n        else:\n            for i in range(len(tuple)-1):\n                if type(tuple[i]) is not type(tuple[i+1]):\n                    return False\n            return True\n    except:\n        return False\n\n# test", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n  return all(type(n)==type(tup[0]) for n in tup)\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_val):\n    return all(type(item) == type(tuple_val[0]) for item in tuple_val)\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n\treturn type(tup[0]) == type(tup[1]) == type(tup[2])\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    if type(tup[0]) == type(tup[1]):\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(data):\n    if isinstance(data, tuple):\n        return all(isinstance(val, type(data[0])) for val in data)\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple):\n  return True if type(tuple[0]) is type(tuple[1]) else False\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple1):\n    \"\"\"\n    Return True if all the elements in tuple have same data type or else False.\n    >>> check_type((5, 6, 7, 3, 5, 6))\n    True\n    >>> check_type((5, 6, 7, '3', 5, 6))\n    False\n    \"\"\"\n    return(all(type(x) == type(tuple1[0]) for x in tuple1))\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, target):\n    if n == 0:\n        return False\n\n    # let's find the mid point of the array\n    mid = n // 2\n\n    # let's check if the element at the mid point is equal to the target\n    if arr[mid] == target:\n        # if so we check if the element at mid - 1 and mid + 1 are equal to target\n        if (mid - 1 < 0 or arr[mid - 1] == target) and (mid + 1 >= n or arr[mid + 1] == target):\n            return True\n\n    # we check if target is greater than the element at mid point\n    if target > arr[mid]:\n        # if so we recursively check for target in the right half of the array\n        return is_majority(arr, mid + 1, target)\n\n    # if the target is less than the element at mid point\n    # we recursively check for target in the left half of the array\n    return is_majority(arr, mid - 1, target)\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, elem: int) -> bool:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # total_count = 0\n    # for i in range(n):\n    #     if arr[i] == elem:\n    #         total_count += 1\n    #     if total_count > n / 2:\n    #         return True\n    # return False\n\n    # return n >= 1 and arr[0] == elem and arr[n - 1] == elem and sum(arr[0] == elem) > n // 2\n    return n >= 1 and arr[0] == elem and arr[n - 1] == elem and sum(elem == a for a in arr) > n // 2\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\nfrom typing import List\nfrom random import randint\nimport pytest\n\n\ndef is_majority(arr: List[int], n: int, key: int) -> bool:\n    if arr[0] == key:\n        return True\n    if arr[0] != key:\n        return False\n    if n % 2 == 0:\n        left = arr[n//2-1]\n        right = arr[n//2]\n    else:\n        left = arr[n//2]\n        right = arr[n//2]\n\n    if left == key or right == key:\n        return True\n\n    return False\n\n\ndef test_is_majority() -> None:\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) == True\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 2) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 5) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 100) == False\n\n\ndef test_random_is_majority() -> None:\n    for i in range(100):\n        arr = [randint(1, 20) for _ in range(10000)]\n        n = len(arr)\n        key = randint(1, 20)\n        assert is_majority(arr, n, key) == is_majority_naive(arr, n, key)", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, length, num):\n    \"\"\"\n    Returns True if `num` occurs at least `length // 2 + 1` times in\n    `arr` in ascending order. Otherwise returns False.\n    Runs in O(N) time.\n    \"\"\"\n    # Base case\n    if length == 1:\n        return arr[0] == num\n\n    # Only one element exists in the array.\n    if length == 2:\n        return arr[0] == num or arr[1] == num\n\n    # Check if num is in the array.\n    if num not in arr:\n        return False\n\n    # Find the median of the array\n    median = length // 2\n    # If num is greater than the median, then num is on the right side of\n    # the median.\n    if num > arr[median]:\n        return is_majority(arr[median + 1:], length - median - 1, num)\n    # If num is less than the median, then num is on the left side of the\n    # median.\n    return is_majority(arr, median, num)\n\n\ndef test_is_majority(input_array, length, num, expected_output):\n    \"\"\"\n    :param input_array: Array of integers.\n    :param length: Length of input_array\n    :param num: Integer to be found in the array\n    :param expected_output: Expected return value of is_majority(input_array, length, num)\n    \"\"\"\n    assert is_majority(input_array, length, num) == expected_output\n\n\ntest_is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3, True)\ntest_is_majority([1, 2, 3, 3, 3, 3, 10], 7, 5, False)\ntest_is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4, False)\ntest_is_majority([", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(nums, length, threshold):\n  n = nums[length // 2]\n  count = 0\n  for i in nums:\n    if i == n:\n      count += 1\n  return count > threshold\n\ndef is_majority_v2(nums, length, threshold):\n  n = nums[length // 2]\n  if length % 2 == 1:\n    n = min(n, nums[length // 2 - 1])\n  return (length // 2 + 1) * 2 * n > sum(nums)\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\nimport unittest\n\n\ndef is_majority(arr, length, majority):\n    \"\"\"\n    Write a function to check for majority element in the given sorted array.\n\n    Time complexity: O(log n).\n    Space complexity: O(1).\n    \"\"\"\n    if length < 1:\n        return False\n    if length == 1:\n        return arr[0] == majority\n    if length == 2:\n        return arr[0] == majority or arr[1] == majority\n    if arr[length // 2] == majority:\n        return True\n    if arr[length // 2] != majority:\n        left = is_majority(arr, length // 2, majority)\n        right = is_majority(arr[(length // 2) + 1:], length - (length // 2) - 1, majority)\n        return left or right\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(nums, n, k):\n    \"\"\"Complexity: O(n)\"\"\"\n    i = 0\n    c = 0\n    while i < n:\n        if nums[i] == k:\n            c += 1\n            i += c\n        else:\n            c = 0\n        if c >= n/2:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(nums, len, k):\n    for i in range(len - 2):\n        if nums[i] == k:\n            return True\n    return False\n\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    c=0\n    while(n>0):\n        if(n%2==1):\n            c+=1\n        n=n/2\n    return c\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n  count = 0\n  while n:\n    count += n & 1\n    n >>= 1\n  return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    ans = 0\n    while n:\n        if n & 1:\n            ans += 1\n        n >>= 1\n    return ans\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    c=0\n    while n:\n        n &= n-1\n        c+=1\n    return c\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    return bin(n).count(\"1\")\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(A, l, h):\n    if l == h:\n        return l\n    mid = (l + h) // 2\n    if A[mid] > A[h]:\n        return find_Min(A, mid+1, h)\n    return find_Min(A, l, mid)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(nums, start, end):\n    if start == end:\n        return nums[start]\n    if start + 1 == end:\n        return min(nums[start],nums[end])\n    \n    mid = (start+end)//2\n    \n    if nums[mid] > nums[end]:\n        return find_Min(nums,start,mid)\n    else:\n        return find_Min(nums,mid,end)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(array,low,high):\n    if high == low:\n        return array[low]\n    if high < low:\n        high = high + len(array)\n    if high-low == 1:\n        return min(array[low],array[high])\n    mid = (high + low)/2\n    if array[mid] < array[high]:\n        return find_Min(array,low,mid)\n    else:\n        return find_Min(array,mid,high)\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(a, start, end):\n    if start > end:\n        return None\n\n    mid = (start+end)//2\n    left = find_Min(a, start, mid-1)\n    right = find_Min(a, mid+1, end)\n\n    if left is None:\n        return a[mid]\n    elif right is None:\n        return a[mid]\n    else:\n        return min(a[mid], min(left, right))\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(a, l, r):\n    if l >= r:\n        return a[l]\n    \n    if a[l] > a[r]:\n        return a[r]\n    \n    m = (l + r) // 2\n    \n    if a[m] > a[l]:\n        return find_Min(a, l, m)\n    \n    if a[m] < a[r]:\n        return find_Min(a, m + 1, r)\n    \n    return a[m]\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,start,end):\n    min_value = arr[start]\n    for i in range(start+1,end+1):\n        if arr[i] < min_value:\n            min_value = arr[i]\n    return min_value\ndef main():\n    print(find_Min([1,2,3,4,5],0,4))\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,left,right):\n    if left==right:\n        return arr[left]\n    mid=left+(right-left)/2\n    if mid+1==right and arr[mid]<arr[right]:\n        return arr[mid]\n    elif mid==left:\n        return min(arr[left],arr[right])\n    elif arr[mid]>arr[right]:\n        return find_Min(arr,left,mid)\n    else:\n        return find_Min(arr,mid+1,right)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(nums,start,end):\n    if start == end:\n        return nums[start]\n    if end - start == 1:\n        if nums[start] < nums[end]:\n            return nums[start]\n        return nums[end]\n    mid = (end + start)//2\n    if nums[start] <= nums[mid] <= nums[end]:\n        return nums[start]\n    if nums[mid] <= nums[end] <= nums[start]:\n        return nums[end]\n    if nums[start] <= nums[mid] and nums[mid] >= nums[start]:\n        return find_Min(nums,start,mid)\n    if nums[mid] <= nums[end] and nums[end] >= nums[mid]:\n        return find_Min(nums,mid+1,end)\n    if nums[start] > nums[mid] and nums[mid] < nums[end]:\n        return find_Min(nums,mid+1,end)\n    if nums[mid] > nums[end] and nums[start] < nums[mid]:\n        return find_Min(nums,start,mid)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,start,end):\n    if start==end:\n        return arr[start]\n    if end-start == 1:\n        return min(arr[start],arr[end])\n    mid = (start+end)//2\n    if arr[mid]>arr[end]:\n        return find_Min(arr,mid,end)\n    elif arr[mid]<arr[end]:\n        return find_Min(arr,start,mid)\n    else:\n        return min(find_Min(arr,start,mid-1),find_Min(arr,mid,end))\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,i,n):\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return min(arr[i],arr[i+1])\n    elif n == 3:\n        return min(arr[i],arr[i+1],arr[i+2])\n\n    m = n//2\n    if arr[i+m] < arr[i]:\n        return arr[i]\n    elif arr[i+m] > arr[i] and arr[i+m+1] > arr[i+m]:\n        return find_Min(arr,i+m+1,n-m-1)\n    elif arr[i+m] > arr[i] and arr[i+m+1] < arr[i+m]:\n        return find_Min(arr,i,m+1)\n    elif arr[i+m] < arr[i] and arr[i+m+1] < arr[i+m] and arr[i+m+2] < arr[i+m+1]:\n        return find_Min(arr,i,m+1)\n    elif arr[i+m] < arr[i] and arr[i+m+1] < arr[i+m] and arr[i+m+2] > arr[i+m+1]:\n        return find_Min(arr,i+m+2,n-m-2)\n    else:\n        return find_Min(arr,i+m+1,n-m-1)\n"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(text):\n    return ''.join([i for j, i in enumerate(text) if j % 2 != 0])\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return \"\".join(string[i] for i in range(len(string)) if i % 2 == 0)\n\n\n#Test", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    string_list = list(string)\n    string_list = [string_list[i] for i in range(0,len(string),2)]\n    string = \"\".join(string_list)\n    return string\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    odd_list = [string[i] for i in range(1, len(string), 2)]\n    return ''.join(odd_list)\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    \"\"\"\n    If you know a few things about Python strings, you might think this\n    would be simple. In fact, it's not.\n    \"\"\"\n    result = ''\n    for i, char in enumerate(string):\n        if i % 2 == 0:\n            result += char\n    return result\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    new_string = ''\n    for index, char in enumerate(string):\n        if index % 2 == 1:\n            new_string += char\n    return new_string\n\n#Test:", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    # Write your code here\n    string = string[1::2]\n    return string\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    return min(min(a,b),c)\n\n\n# + id=\"m0sLJ27f_oye\"", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n  return min(a,b,c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    return min(a,b,c)", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    return (a if a<b else (b if b<c else c))\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n\tif a<b and a<c:\n\t\treturn a\n\telif b<c:\n\t\treturn b\n\telse:\n\t\treturn c\n\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n\t\"\"\"\n\tThis function takes three arguments, a,b and c and returns the smallest of them.\n\t\"\"\"\n\treturn min(a,b,c)\n\ndef test_function(test_case):\n\tans = min_of_three(test_case[0],test_case[1],test_case[2])\n\tif ans == test_case[3]:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\ntest_case_1 = [10,20,30,0]\ntest_case_2 = [3,1,2,1]\ntest_case_3 = [2,10,5,2]\ntest_case_4 = [1,1,1,1]\n\ntest_function(test_case_1)\ntest_function(test_case_2)\ntest_function(test_case_3)\ntest_function(test_case_4)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    a = 1 << start\n    b = 1 << end\n    return ((a - 1) & n) == ((b - 1) & n)\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,start,end):\n    n = n ^ ((1<<end) - (1<<start))\n    if(n == 0):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\n# Time Complexity - O(n)\n# Space Complexity - O(1)\n\n\ndef all_Bits_Set_In_The_Given_Range(a, b, c):\n    # Mask is a ^ b.\n    # To check if all the set bits are set in a, we can use mask & a.\n    # If they are equal, all the bits are set.\n    return (a ^ b) & ~(a ^ c) == 0\n\n\n# Driver code.", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,a,b):\n    s = bin(n)[2:]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            count += 1\n        if i+1 == a:\n            break\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            count += 1\n        if i+1 == b:\n            break\n    return count == (b - a + 1)\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Your Code Here\n    mask = ((1 << (r+1)) - 1) - ((1 << l) - 1)\n    return ((n & mask) == 0)\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n,m,l):\n    c = n & m\n    d = (n & l) << 1\n    return c == d\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    ans = bin(n)[2:]\n    for i in range(l, r+1):\n        if ans[i] == '0':\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n,start,end):\n    if start == 0:\n        start = 1\n    s = bin(n)\n    s = s[2:]\n    s = '0'*(start-1) + s\n    return s[start-1:end] == '0'*len(s[start-1:end])\n\n# Test Case", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(a,b,c):\n    return not (a&c)\n\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\n# Solution 1\ndef re_arrange_array(arr, len_arr):\n    # Your code goes here\n    i = 0\n    j = len_arr - 1\n    while i < j:\n        if arr[i] < 0:\n            if arr[j] >= 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                j -= 1\n            else:\n                i += 1\n                j -= 1\n        else:\n            i += 1\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, size):\n    negative_numbers = [x for x in array if x < 0]\n    positive_numbers = [x for x in array if x >= 0]\n    negative_numbers.reverse()\n    return negative_numbers + positive_numbers\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, n):\n    new_array = []\n    for x in array:\n        if x < 0:\n            new_array.insert(0, x)\n        else:\n            new_array.append(x)\n    return new_array\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    # write your code here\n    low, high = 0, n-1\n    while low < high:\n        while low < high and arr[low] > 0:\n            low += 1\n        while low < high and arr[high] < 0:\n            high -= 1\n        arr[low], arr[high] = arr[high], arr[low]\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\nfrom .utils import *\n\n\ndef re_arrange_array(array, n):\n    \"\"\"\n    :param array: Array to sort\n    :param n: length of array\n    :return: array with negative numbers in first place and positive in second\n    \"\"\"\n    pos = 0\n    neg = n - 1\n    while pos < neg:\n        while array[pos] >= 0 and pos < n - 1:\n            pos += 1\n        while array[neg] < 0 and neg > 0:\n            neg -= 1\n        array[pos], array[neg] = array[neg], array[pos]\n\n    return array\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\nfrom typing import List\n\n\ndef re_arrange_array(input_array: List[int], array_len: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    left = 0\n    right = array_len - 1\n    while left < right:\n        while input_array[left] >= 0 and left < right:\n            left += 1\n        while input_array[right] < 0 and left < right:\n            right -= 1\n\n        input_array[left], input_array[right] = input_array[right], input_array[left]\n\n    return input_array\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, len_arr):\n    p1, p2 = 0, len_arr-1\n    while p1 < p2:\n        while p1<p2 and arr[p1] >= 0:\n            p1 += 1\n        while p1<p2 and arr[p2] < 0:\n            p2 -= 1\n        arr[p1], arr[p2] = arr[p2], arr[p1]\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, length):\n    pos = 0\n    neg = length - 1\n    while pos <= neg:\n        if arr[pos] > 0:\n            pos += 1\n        elif arr[neg] < 0:\n            neg -= 1\n        else:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            pos += 1\n            neg -= 1\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(nums, n):\n    arr = []\n    for i in range(n):\n        if nums[i] < 0:\n            arr.insert(0, nums[i])\n        else:\n            arr.append(nums[i])\n    return arr\n\ndef re_arrange_array_2(nums, n):\n    arr = []\n    for i in range(n):\n        if nums[i] < 0:\n            nums[i], nums[-1] = nums[-1], nums[i]\n            arr.append(nums[-1])\n            n -= 1\n            i -= 1\n    return arr\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string,char):\n    return string.replace(\" \",\"{0}\".format(char))\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string,character):\n    return string.replace(' ',character)\n\nreplace_blank(\"hello people\",'@')==(\"hello@people\")\n# -\n\n# #### Define a function that will generate a random number between 0 and 5.\n\n# +\nfrom random import randint\n\ndef random_int():\n    return randint(0,5)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, char):\n    result = \"\"\n    for x in string:\n        if x == \" \":\n            result = result + char\n        else:\n            result = result + x\n    return result\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(text,char):\n    return text.replace(' ','{0}'.format(char))\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s,c):\n    return s.replace(' ',c)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\nimport re\n\ndef replace_blank(text, char):\n    p = re.compile(r'\\s+')\n    return p.sub(char,text)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(input_str,replc_char):\n    return \"\".join(replc_char if char==' ' else char for char in input_str)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n# Answer\ndef replace_blank(string, char):\n    new_string = \"\"\n    for letter in string:\n        if letter == \" \":\n            new_string += char\n        else:\n            new_string += letter\n    return new_string\n\n\n# Tests", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str1,char):\n    a = list(str1)\n    count = 0\n    for i in range(len(str1)):\n        if a[i] == ' ':\n            a[i] = char\n            count +=1\n    return ''.join(a)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\nfrom typing import List\n\n\ndef replace_blank(str: str, replace_char: str) -> str:\n    \"\"\"\n\n    :param str:\n    :param replace_char:\n    :return:\n    >>> replace_blank('hello people','@')\n    'hello@people'\n    >>> replace_blank('hello people','@')\n    'hello@people'\n    \"\"\"\n    s = str.split(' ')\n    s = [''.join(c for c in w if c != ' ') or replace_char for w in s]\n    return ' '.join(s)\n\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle: list[list[int]], i: int) -> int:\n    if len(triangle) == 1:\n        return triangle[0][0]\n    if i == len(triangle[0]):\n        return triangle[i - 1][i - 2] + triangle[i - 1][i - 1]\n    return max(triangle[i][i - 1] + max_sum(triangle, i - 1), triangle[i][i] + max_sum(triangle, i - 1))\n\ndef max_sum_rec(triangle: list[list[int]], i: int) -> int:\n    if len(triangle) == 1:\n        return triangle[0][0]\n    return max(triangle[i][i - 1] + max_sum_rec(triangle, i - 1), triangle[i][i] + max_sum_rec(triangle, i - 1))\n\ndef max_sum_dp(triangle: list[list[int]]) -> int:\n    for i in range(1, len(triangle)):\n        triangle[i][0] += triangle[i - 1][0]\n        for j in range(1, i):\n            triangle[i][j] += max(triangle[i - 1][j], triangle[i - 1][j - 1])\n    return max(triangle[-1])\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(input, length):\n    if length == 0:\n        return 0\n\n    curr_max = sum(input[length - 1])\n    prev_max = 0\n    for i in range(1, length):\n        curr_max = max(curr_max, sum(input[length - 1][:i]) + prev_max)\n        prev_max = max(prev_max, curr_max)\n    return curr_max\n\ndef max_sum_2(input):\n    return max(max_sum(input, i) for i in range(len(input)))\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nimport pytest\n\n\ndef max_sum(triangle, row_len):\n    \"\"\"\n    :param triangle: A list of lists of integers.\n    :param row_len: A number of integers in each row of the triangle.\n    :return: A number, the maximum sum in the given right triangle.\n    \"\"\"\n    assert row_len > 0\n    assert all(len(row) == row_len for row in triangle)\n\n    sums = triangle.copy()\n\n    for row in triangle:\n        for i in range(1, row_len):\n            row[i] += max(sums[i - 1][i], sums[i - 1][i - 1])\n\n    return max(row[row_len - 1] for row in sums)\n\n\n@pytest.mark.parametrize('triangle, result', [\n    ([[1], [2, 1], [3, 3, 2]], 6),\n    ([[1], [2, 1], [3, 3, 2], [4, 6, 5, 4]], 10),\n])\ndef test_max_sum(triangle, result):\n    assert max_sum(triangle, len(triangle[0])) == result\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\nfrom typing import List\n\n\ndef max_sum(matrix: List[List[int]], n: int) -> int:\n    matrix = [[0] + row for row in matrix]\n    matrix[0][0] = matrix[0][-1] = matrix[-1][0] = matrix[-1][-1] = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            matrix[i][j] = max(matrix[i - 1][j - 1], matrix[i - 1][j]) + matrix[i][j]\n    return matrix[-1][-1]\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\n# Time: O(n * m)\n# Space: O(m)\n\ndef max_sum(a, n):\n    # make a table for the last row\n    # table[i][j] is the maximum sum of 1st i numbers and the last j numbers\n    # table[0][i] = a[i]\n    # table[i][i] = a[i]\n    # table[i][j] = table[i-1][j-1] + a[i]\n\n    table = [a[i] for i in range(n)]\n\n    # fill the first row\n    for i in range(1, n):\n        table[i] = table[i-1] + a[i]\n\n    for i in range(1, n):\n        for j in range(i, n):\n            table[j] = max(table[j], table[j-i] + a[i])\n\n    return table[-1]\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(tri: List[List[int]], depth: int) -> int:\n    if depth == 0:\n        return 0\n\n    max_ = tri[0][0]\n    for i in range(depth):\n        for j in range(i + 1):\n            max_ = max(max_, tri[i][j] + max_sum(tri, depth - 1))\n    return max_\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(tri: List[List[int]], n: int) -> int:\n    memo = [0] * n\n    for i in range(n):\n        for j in range(i + 1):\n            memo[j] = max(memo[j], memo[j + 1] + tri[i][j])\n\n    return memo[0]\n\n\ndef main():\n    print(max_sum([[1], [2, 1], [3, 3, 2]], 3))\n    print(max_sum([[1], [2, 1], [3, 4, 2]], 3))\n    print(max_sum([[1], [2, 1], [3, 4, 5]], 3))\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, height):\n    if height == 0:\n        return triangle[0][0]\n    elif height == 1:\n        return triangle[0][0] + triangle[1][0]\n    else:\n        i = height - 2\n        prev = max_sum(triangle, height - 1)\n        cur = triangle[height-1][i] + triangle[height-1][i+1]\n        return max(prev, cur)\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, max_steps):\n    \"\"\"\n    :param triangle: triangle of integers\n    :param max_steps: the maximum amount of steps in the triangle\n    :return: the maximum sum in the given right triangle of numbers\n    \"\"\"\n    if max_steps < 1:\n        return None\n    if len(triangle) == 1:\n        return triangle[0][0]\n    else:\n        result = [triangle[i][j] + triangle[i+1][j] + triangle[i+2][j] for i in range(len(triangle)-2) for j in range(max_steps)]\n        return max(result)\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\nfrom typing import List\n\n\ndef larg_nnum(nums: List[int], n: int) -> List[int]:\n    # sort the list\n    sorted_nums = sorted(nums)\n    # return the top n items\n    return sorted_nums[-n:]\n\n\ndef main():\n    print(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2))\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(a,n):\n    return sorted(a, reverse=True)[:n]", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(input_list, n):\n    return sorted(input_list, reverse=True)[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(nums, n):\n    nums = sorted(nums,reverse=True)\n    return nums[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(lis,n):\n    return sorted(set(lis),reverse=True)[-n:]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n#%%\ndef larg_nnum(nums, n):\n    \"\"\"\n    larg_nnum(nums, n)\n    Given a list of numbers nums and an integer n, return the n largest numbers from nums\n    in a list.\n    \"\"\"\n    return sorted(nums, reverse=True)[:n]\n\n\n#%%\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n\n\n#%% [markdown]\n# ### 4.5 List Comprehensions\n# In Python, a `list comprehension` is a compact way to process all or part of the elements of a list. This is done by including an `if` statement inside the brackets that follows the expression.\n# \n# For example, if I have a list of numbers, I can add up all the numbers that are even in a list comprehension.\n\n#%%\nnums = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\n\n#%%\n# calculate the sum of all the numbers that are even\nsum([num for num in nums if num%2==0])\n\n#%% [markdown]\n# ## 5. File I/O\n# \n# ### 5.1 Writing to Files\n# You can write text or numbers to files in Python with the built-in `open()` function. The first argument of the `open()` function is a string containing the name of the file you want to write to. The second argument is the mode you want to open the file in.\n# \n# **Modes**:\n# \n# |Mode | Description |\n# |-|-|\n# |'r' | read |\n# |'w' | write (", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(nums,n):\n    return sorted(nums,reverse=True)[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nimport unittest\n\ndef larg_nnum(nums, n):\n    nums.sort()\n    return nums[-n:]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\n# + id=\"8t6t7f_K5lVm\" colab={\"base_uri\": \"https://localhost:8080/\"} outputId=\"5b8517e8-794e-4b84-a656-f0df7a85790a\"\n# 2", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(nums, n):\n    nums.sort()\n    return nums[-n:]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(height,radius):\n    return (pi * radius * (height + radius))\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n#wolfram alpha for lateral surface area\n#http://mathworld.wolfram.com/LateralSurfaceArea.html\n\ndef lateralsuface_cylinder(radius,height):\n    return radius*height + 2*pi*radius*radius\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius,height):\n    return (2*pi*radius*height)+(2*pi*(radius**2))\n\ndef lateralsurface_cylinder(radius,height):\n    return 2*pi*radius*height + pi*radius**2", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\n# test code ", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius, height):\n    # Here we will use the formula for the lateral surface area of a cylinder:\n    # A = 2*pi*r*h + 2*pi*r^2\n    # where A is the lateral surface area, r is the radius of the cylinder, and h is its height\n    return 2 * math.pi * radius * height + 2 * math.pi * radius ** 2\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(r, h):\n    return 2*math.pi*r*h + 2*math.pi*r**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius, height):\n  return np.pi*radius*(height+radius)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    return 2*np.pi*r*h + 2*np.pi*r**2", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius, height):\n    import math\n    return 2*math.pi*radius*height + 2*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    return np.pi * r * (r + h)\n\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(n):\n    return n**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(n):\n    return n**3", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\n#%%", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(number):\n    return number ** 3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\nimport math\n\ndef volume_cube(l):\n    return l * l * l\n\n\n# assert volume_cube(3) == 27\n# assert volume_cube(1) == 1\n# assert volume_cube(2) == 8\n# assert volume_cube(1.5) == 21.0\n# assert volume_cube(-5) == 0\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side_length):\n    return side_length*side_length*side_length\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(length):\n    \"\"\"\n    Calculate the volume of a cube.\n    Input: Length of a side of the cube\n    Output: Volume of a cube\n    \"\"\"\n    return length**3", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\nfrom math import pow\ndef volume_cube(x):\n    return pow(x,3)\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(a):\n    return a**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    return n & 0xAAAAAAAA\n\ndef test_even_bit_set_number():\n    assert even_bit_set_number(10) == 10\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    \"\"\"\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(0)\n    0\n    >>> even_bit_set_number(1)\n    2\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(10)\n    10\n    \"\"\"\n    m = 1\n    while m <= n:\n        n |= m\n        m <<= 1\n    return n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    mask = 1 << 1\n    while(mask < (1 << 31)):\n        num = num & ~mask\n        mask = mask << 2\n    return num\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\nimport unittest\ndef even_bit_set_number(num):\n    num = num - (num%2)\n    return num\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    # for i in range(32):\n    #     number |= 1 << i\n    # return number\n\n    # for i in range(32):\n    #     number |= 1 << i\n    # return number\n\n    # for i in range(32):\n    #     if (number & (1 << i)):\n    #         number |= 1 << i\n    # return number\n\n    # return (number & 0xaaaaaaaa) | ((number >> 1) & 0x55555555)\n\n    return (number | number >> 1) & 0x55555555\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    return (n | n>>1) & ~(n>>1)\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    \"\"\"\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(12)\n    12\n    >>> even_bit_set_number(100)\n    100\n    \"\"\"\n    for i in range(len(bin(number)[2:])):\n        if number & (1 << i):\n            number = number | (1 << i)\n    return number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    # Your code here\n    return number | 1\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\nfrom math import sqrt\ndef No_of_Triangle(a,b):\n    return int(4*sqrt(a*b/(4*a+4*b+2*sqrt(2*a*b))))\ndef test():\n    assert No_of_Triangle(4,2) == 7\n    assert No_of_Triangle(21,17) == 169\ntest()", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a,b):\n  n = 0\n  for i in range(1, a+1):\n    for j in range(1, b+1):\n      for k in range(1, int(a/2)+1):\n        if i == k or j == k:\n          n += 1\n  return n\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a, b):\n    def C(n):\n        c = 0\n        for i in range(1, n+1):\n            c += n//i\n        return c\n    n = C(a)\n    return (n//2)*(b**2) + (n//2)*(a-b)*(a-b-1)//2\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a,b):\n    return 0\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a,b):\n    count = 0\n    while(a<b):\n        count += 1\n        a += 2\n        b -= 2\n    return count\n\n#print(No_of_Triangle(3,7))\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a, b):\n    return (a * b) // 2\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n#Solution\n#The number of triangles within the given triangle is:\n#Triangle 1 (5 sides) : 1\n#Triangle 2 (4 sides) : 1\n#Triangle 3 (3 sides) : 2\n#Triangle 4 (2 sides) : 4\n#Triangle 5 (1 sides) : 10\n#So, the maximum number of triangles that can be formed within the given triangle is 10.\n#Taking Triangle 1 as an example, there are 4 triangles that can be formed within it:\n#Triangle 1.1 (4 sides) : 1\n#Triangle 1.2 (3 sides) : 1\n#Triangle 1.3 (2 sides) : 2\n#Triangle 1.4 (1 sides) : 4\n#so, the number of triangles in Triangle 1 = 4 + 1 + 1 + 2 + 4 = 10.\n#Taking Triangle 2 as an example, there are 2 triangles that can be formed within it:\n#Triangle 2.1 (3 sides) : 1\n#Triangle 2.2 (2 sides) : 2\n#Triangle 2.3 (1 sides) : 4\n#so, the number of triangles in Triangle 2 = 1 + 2 + 4 = 7.\n\ndef No_of_Triangle(sides,size):\n\tcount = 0\n\tfor i in range(1,sides):\n\t\ttemp = sides-i\n\t\tcount = count + No_of_Triangle(temp,size-1)\n\treturn count + size\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a,b):\n    return ((b*(b-1)*4)//2)+1\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    count_dict = {}\n    for (t1, t2) in tuples:\n        if (t1, t2) not in count_dict:\n            count_dict[(t1, t2)] = 1\n        elif (t1, t2) in count_dict:\n            count_dict[(t1, t2)] = count_dict[(t1, t2)] + 1\n    return count_dict\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(records):\n    s = {}\n    for i in range(len(records)):\n        s[records[i]] = s.get(records[i], 0) + 1\n\n    s = {k:v for k,v in s.items() if v > 1}\n    return s\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(seq):\n    \"\"\"\n    for each tuple in the given sequence, find all the \n    tuples that are similar.  group them by the \n    first element of the tuple, and the count the\n    number of each distinct second element\n    \"\"\"\n    result = {}\n    for t in seq:\n        result.setdefault(t[0], dict()).setdefault(t[1], 0)\n        result[t[0]][t[1]] += 1\n\n    return result\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\nfrom collections import defaultdict\n\n\ndef check_occurences(tuples):\n    \"\"\"\n    >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n    {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    occurrences = defaultdict(int)\n    for a, b in tuples:\n        occurrences[a, b] += 1\n\n    return {\n        (a, b): count\n        for (a, b), count in occurrences.items()\n        if count > 1\n    }\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    \"\"\"\n    We need a way to represent the possible sets of tuples that occur in our data.\n    We represent this as a dictionary with the key being the tuple and the value being the number of times it occurs.\n    The other solution is to use a set and remove the items as they are added.\n    \"\"\"\n    # First, create a set of tuples we can use to represent all the possible sets of tuples that occur in our data\n    possible_tuples = set(tuple(sorted(tuples)) for tuples in itertools.product(*tuples))\n    # Next, we loop through all the tuples and use a dictionary to keep track of which tuples have been seen\n    seen_tuples = {}\n    for tuple in possible_tuples:\n        if tuple in seen_tuples.keys():\n            seen_tuples[tuple] += 1\n        else:\n            seen_tuples[tuple] = 1\n\n    # Finally, return the dictionary\n    return seen_tuples\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(list_of_tuples):\n    new_tuple = []\n    for tup in list_of_tuples:\n        new_tuple.append((tup[1], tup[0]))\n    new_tuple = tuple(new_tuple)\n    new_tuple = set(new_tuple)\n    counter = 0\n    d = {}\n    for i in new_tuple:\n        counter += 1\n        if i in list_of_tuples:\n            d[i] = list_of_tuples.count(i)\n    return d\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n\toccurences = {}\n\tfor tup in tuples:\n\t\tif tup in occurences:\n\t\t\toccurences[tup] += 1\n\t\telse:\n\t\t\toccurences[tup] = 1\n\treturn occurences\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuple_list):\n    \"\"\"\n    {\n        (1, 3): 2,\n        (2, 5): 2,\n        (3, 6): 1\n    }\n    \"\"\"\n    result = {}\n    for i, j in tuple_list:\n        if (i, j) not in result.keys():\n            result[(i, j)] = 1\n        else:\n            result[(i, j)] += 1\n    return result\n\n\n# + id=\"3g0T84CxfykW\"\n# We are given a list of tuples and we have to check the frequency of a set of given elements \n# e.g. we can check whether the given set of elements occurs in the given list of tuples\n# Input:  [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]\n# Output: {(1, 3), (3, 6), (2, 5)}", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    result = {}\n    for pair in tuples:\n        result.setdefault(pair, 0)\n        result[pair] += 1\n    return result\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    dict = {}\n    for tuple in tuples:\n        key = tuple[0]\n        value = tuple[1]\n        if key in dict:\n            dict[key].add(value)\n        else:\n            dict[key] = set()\n            dict[key].add(value)\n    for key in dict:\n        if len(dict[key]) > 1:\n            dict[key] = len(dict[key])\n    return dict\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    counter = 0\n    for i in range(len(string)):\n        for j in range(i+1,len(string)+1):\n            if string[i:j]:\n                counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\nfrom nose.tools import assert_equal\n\n\ndef number_of_substrings(s):\n    \"\"\"Return number of non-empty substrings of given string.\n\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    \"\"\"\n    if not s:\n        return 0\n\n    num_substrings = 0\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1]:\n                num_substrings += 1\n\n    return num_substrings\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    #generate all possible substrings\n    #count number of non-empty substrings\n    return len([i for i in range(len(s)+1) for k in range(i+1, len(s)+1)])\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(word):\n    length = len(word)\n    counter = 0\n    if length == 0:\n        return 0\n    else:\n        for i in range(length-1):\n            for j in range(i+1, length):\n                if word[i:j] != \"\":\n                    counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    result = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1]:\n                result += 1\n    return result\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n# time complexity: O(n^2), space complexity: O(n)\ndef number_of_substrings(string):\n    if string == \"\":\n        return 0\n    s = string.count(\"\")\n    if s == 0:\n        return len(string)\n    elif s == len(string):\n        return 1\n    else:\n        count = 0\n        for i in range(len(string)):\n            if string[i] == \"\":\n                count += 1\n            for j in range(i+1, len(string)):\n                if string[j] == \"\" and i+1+j-i == len(string):\n                    count += 1\n                elif string[j] != \"\":\n                    count += 1\n                    break\n        return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n# string -> number of substrings\n# -------------------------------\n\n\ndef number_of_substrings(input_str):\n    return number_of_substrings_by_half(input_str)\n\n\n# string -> number of substrings\n# -------------------------------\n# split the string into two halves, calculate the number of substrings in each half\n# and add them up\n\ndef number_of_substrings_by_half(input_str):\n    num_subs_even = number_of_substrings_by_half_even(input_str)\n    num_subs_odd = number_of_substrings_by_half_odd(input_str)\n    return num_subs_even + num_subs_odd\n\n\n# string -> number of substrings in even half\n# --------------------------------------------\n\n# for an odd number of characters in the string, there is one extra substring\n# because there is an empty string between every pair of characters\n\ndef number_of_substrings_by_half_even(input_str):\n    half_len = len(input_str) // 2\n    num_subs_even = 0\n    for i in range(half_len):\n        num_subs_even += number_of_substrings_by_half_even_helper(input_str, i)\n    return num_subs_even\n\n\ndef number_of_substrings_by_half_even_helper(input_str, half_index):\n    num_subs_even = 0\n    for j in range(half_index, len(input_str)):\n        substring = input_str[half_index:j + 1]\n        if len(substring) > 0:\n            num_subs_even += 1\n    return num_subs_even\n\n\n# string -> number of substrings in odd half\n# --------------------------------------------\n# for an even number of characters in the string, there are no extra substrings\n\ndef number_of_substrings_by_half_odd(input_str):\n    half_len = len(input_str) // 2\n    num_subs_odd = 0\n    for i in range(half_len):", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nimport unittest\nfrom typing import List, Tuple, Union\n\n\ndef number_of_substrings(s: str) -> int:\n    if s == \"\":\n        return 0\n\n    count = 0\n    for i in range(len(s) + 1):\n        for j in range(i, len(s) + 1):\n            if len(s[i:j]) > 0:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count = count + 1\n    return count\n\n# Tests"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n\n    max_value = m + m - 1\n    min_value = 2 * m - 1\n    # 2^(n-1)\n    total_number_of_sequences = pow(2, n - 1)\n\n    if max_value >= min_value:\n        # divide by 2\n        total_number_of_sequences /= 2\n\n    return total_number_of_sequences\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n# Solution 1\ndef get_total_number_of_sequences(n: int, m: int) -> int:\n    if n == 1:\n        return m + 1\n    else:\n        return (get_total_number_of_sequences(n - 1, m) * (m + 1)) // 2\n\n# Tests", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    # Write your code here.\n    total = 1\n    for i in range(1, n):\n        if m == 2*i:\n            total *= 2\n        else:\n            total *= m - 2*i + 2\n    return total\n\n# O(n) time | O(1) space - where n is the length of the array\ndef get_total_number_of_sequences(n, m):\n    # Write your code here.\n    count = 0\n    for i in range(1, m):\n        count += get_sequence_count_helper(n, m, i)\n    return count\n\ndef get_sequence_count_helper(n, m, start):\n    if n == 1:\n        return 1\n    \n    num_lower_limit = get_num_lower_limit(start, m)\n    total = 0\n    for i in range(start, num_lower_limit + 1):\n        total += get_sequence_count_helper(n - 1, m, i)\n    return total\n\ndef get_num_lower_limit(start, m):\n    if m % start == 0:\n        return m // start\n    return m // start + 1\n\n# O(n) time | O(1) space - where n is the length of the array\ndef get_total_number_of_sequences(n, m):\n    # Write your code here.\n    total = 0\n    for i in range(1, m + 1):\n        total += get_num_sequences_helper(n, m, i)\n    return total\n\ndef get_num_sequences_helper(n, m, num_lower_limit):\n    if n == 1:\n        return 1\n    \n    total = 0\n    for i in range(num_lower_limit, m + 1):\n        total += get_num_sequences_helper(n - 1, m, i)\n    return total\n\n# O(n^", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    total_number_of_sequences = 0\n    for k in range(n):\n        total_number_of_sequences += m - k + 1\n    return total_number_of_sequences\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\nfrom typing import List\n\n\ndef get_total_number_of_sequences(n: int, m: int) -> int:\n    # dp[i] represents the total number of sequences ending with i\n    # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-m]\n    # dp[i] = dp[i-2] + dp[i-4] + dp[i-6] + ... + dp[i-m]\n    # dp[i] = dp[i-2] + dp[i-4] + dp[i-6] + dp[i-8] + dp[i-10] + dp[i-12] + ... + dp[i-m]\n\n    # at the beginning, we can have 1 or 2 sequences, since 1 is always >= 2 but not <= m\n    dp = [1, 2]\n    for i in range(2, n + 1):\n        dp.append(0)\n        for j in range(i - m, i - 1):\n            if j >= 0:\n                dp[i] += dp[j]\n    return dp[n]\n\n\ndef get_total_number_of_sequences_better(n: int, m: int) -> int:\n    if n < 2:\n        return 1\n    if n < 4:\n        return 2\n\n    dp = [0] * (n + 1)\n    dp[2] = 2\n    dp[4] = 2\n    dp[6] = 2\n    for i in range(8, n + 1):\n        dp[i] = (i - 2) * dp[i - 2] % 1000000007\n    return dp[n]\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m + 1\n    res = 0\n    for i in range(1, m+1):\n        res += get_total_number_of_sequences(n-1, min(i * 2, m))\n    return res\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n: int, m: int) -> int:\n    # this is always 1 + 2 + 3 + ... + n\n    total = n * (n+1) // 2\n    \n    # but now check if each element is greater than twice the previous element\n    # and less than m\n    i = 1\n    while i < n:\n        # for the element at index i, subtract 2* (i-1) \n        # because it is greater than twice the previous element\n        # and add m because it is less than m\n        total += m - (2*(i-1) + 1)\n        i += 1\n    return total\n\n\ndef get_total_number_of_sequences_brute_force(n: int, m: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if is_sequence_greater_than_twice_previous_and_less_than_m(i, j, m):\n                count += 1\n    return count\n\n\ndef is_sequence_greater_than_twice_previous_and_less_than_m(start: int, end: int, m: int) -> bool:\n    for i in range(start+1, end+1):\n        if 2*previous_element > current_element or current_element > m:\n            return False\n    return True\n\n\ndef get_total_number_of_sequences_recursive(n: int, m: int, start: int, end: int) -> int:\n    if start == end:\n        return 1 if is_sequence_greater_than_twice_previous_and_less_than_m(start, end, m) else 0\n    total = 0\n    for i in range(start+1, end+1):\n        if is_sequence_greater_than_twice_previous_and_less_than_m(start, i, m):\n            total += get_", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    assert n > 1\n    assert m > 1\n    if n == 2:\n        return max(m, 4)\n    else:\n        last_sequence_count = get_total_number_of_sequences(n-1, m)\n        return sum([last_sequence_count] + [x for x in last_sequence_count if x % 2 == 0])\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    return len([i for i in range(1, n+1) for j in range(1, (m//2 + 1)) if j * 2 <= i])\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n  \"\"\"Returns the total number of sequences of length n.\"\"\"\n  assert n >= 1\n  assert 1 <= m <= 2**32\n  return _get_total_number_of_sequences(n, m, 1)\n\ndef _get_total_number_of_sequences(n, m, prev):\n  if n == 1:\n    return 1 if prev <= m else 0\n\n  total = 0\n  for i in range(prev, m+1):\n    total += _get_total_number_of_sequences(n-1, m, i)\n\n  return total\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(a_list,new_list):\n    a_list[-1:]=new_list\n    return a_list\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n# TODO\ndef replace_list(original_list,replacement_list):\n    original_list[len(original_list)-1]=replacement_list\n    return original_list\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\nimport math\n\n\ndef replace_list(l, ls):\n    if l:\n        l[-1] = ls\n    return l\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst,lst_add):\n    lst.pop()\n    lst.extend(lst_add)\n    return lst\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n# Solution\ndef replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\n# Answer:\n\ndef replace_list(mylist, newlist):\n    if len(mylist)==0:\n        mylist.append(newlist)\n    else:\n        mylist[-1] = newlist\n    return mylist\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n# replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n# # replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n# # replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n# # replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n# # replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n# # replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n# # replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, ", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\nfrom typing import List\n\n\ndef replace_list(nums: List[int], last: List[int]) -> List[int]:\n    nums[-1:] = last\n    return nums\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list_1, list_2):\n    if len(list_1)>0 and len(list_2)>0:\n        list_1[-1]=list_2\n        return list_1\n    elif len(list_1)==0 and len(list_2)>0:\n        return list_2\n    else:\n        return []"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(i,j,k):\n  arr = [[['*' for x in range(j)] for x in range(k)] for x in range(i)]\n  return arr\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(x,y,z):\n    res = []\n    for i in range(x):\n        tmp = []\n        for j in range(y):\n            tmp.append(['*']*z)\n        res.append(tmp)\n    return res\n\ndef test_array_3d():\n    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(dim1,dim2,dim3):\n    arr = []\n    for i in range(dim1):\n        sub_arr = []\n        for j in range(dim2):\n            sub_sub_arr = []\n            for k in range(dim3):\n                sub_sub_arr.append('*')\n            sub_arr.append(sub_sub_arr)\n        arr.append(sub_arr)\n    return arr\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(width, height, depth):\n    array_3d = [\n        [\n            [\n                '*' for i in range(depth)\n            ] for j in range(height)\n        ] for k in range(width)\n    ]\n    return array_3d", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(w,h,d):\n    m=[]\n    for i in range(w):\n        n=[]\n        for j in range(h):\n            p=[]\n            for k in range(d):\n                p.append('*')\n            n.append(p)\n        m.append(n)\n    return m\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(a, b, c):\n    return [[[ '*' for _ in range(b)] for _ in range(a)] for _ in range(c)]\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\nimport numpy as np\n\n\ndef array_3d(n1, n2, n3):\n    arr = np.full((n1, n2, n3), \"*\")\n    return arr\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x, y, z):\n    return [[[(\"*\") for y in range(y)] for x in range(x)] for z in range(z)]\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(input_string):\n    count = 0\n    for i in input_string:\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str):\n  count = 0\n  for i in str:\n    count += 1\n  return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str1):\n    count=0\n    for i in str1:\n        count=count+1\n    return count\n\nstr1=\"python programming\"", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str1):\n\tcount = 0\n\tfor i in range(len(str1)):\n\t\tcount = count + 1\n\treturn count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    count = 0\n    for i in str:\n        count +=1\n    return count\n\n# Your code goes here", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    \"\"\"\n    This function counts total number of characters in a string\n    :param string: String which is to be counted\n    :return: Total number of characters in the string\n    \"\"\"\n    total_charac = 0\n    for c in string:\n        total_charac += 1\n    return total_charac\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    count = 0\n    for ch in s:\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(text):\n\treturn len(text)\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nfrom collections import defaultdict\n\ndef sort_on_occurence(ls):\n    d = defaultdict(list)\n    for item in ls:\n        d[item[0]].append(item)\n    for key in sorted(d.keys()):\n        for i in range(1, len(d[key])):\n            d[key][i] = d[key][i] + (key,)\n    return list(d.values())\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nfrom operator import itemgetter\n\ndef sort_on_occurence(lst):\n    # Write your code here\n    lst.sort(key=itemgetter(0))\n    # print(lst)\n    ans = []\n    i = 0\n    while i < len(lst):\n        count = 0\n        num = lst[i][0]\n        while i < len(lst) and lst[i][0] == num:\n            count += 1\n            i += 1\n        ans.append((count, lst[i-1][1], num, lst[i-1][0]))\n    return ans\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(items):\n    items.sort(key=lambda x: x[0])\n\n    count = 0\n    start = 0\n    sorted_list = []\n    while start < len(items):\n        item = items[start]\n        i = start + 1\n        while i < len(items):\n            if item[0] == items[i][0]:\n                item = item + items[i]\n                i += 1\n            else:\n                break\n\n        if count == 0:\n            sorted_list = [item]\n            count = 1\n        else:\n            sorted_list.append(item)\n        start = i\n\n    return sorted_list\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda tup: tup[1])\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(L):\n    d = {}\n    for i in L:\n        d[i[0]] = d.get(i[0], []) + [i]\n    d = {k: sorted(v, key=lambda x: x[1]) for k, v in d.items()}\n    return sorted(d.items(), key=lambda x: x[0])\n\n\ndef sort_on_occurence(L):\n    return sorted(list(map(lambda x: (x[0], *x[1]), groupby(L, lambda x: x[0]))), key=lambda x: x[0])\n\n\n#\n# get_most_frequent_element\n#\n# Write a function to return the most frequent element in the list.\n# If there is a tie, return the element that appears first in the given list.\n#\n# Examples:\n# get_most_frequent_element([1,1,3,1,1,2,3]) -> 1\n# get_most_frequent_element([1,1,2]) -> 1\n# get_most_frequent_element([2,1,1,2,1,1,2,2,1]) -> 2\n#\n# Time Complexity: O(n)\n#\n# Assume that the input list is not null.\n\ndef get_most_frequent_element(L):\n    if not L:\n        raise ValueError(\"Argument cannot be an empty list\")\n    return max(L, key=L.count)\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(iterable):\n    return sorted(iterable, key=lambda t: t[0])\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\n# BEGIN SOLUTION\ndef sort_on_occurence(elements: List[Tuple[int, Any]]) -> List[Tuple[int, Any]]:\n    # first, sort on the first element\n    elements.sort(key=lambda x: x[0])\n    # now, group by the first element\n    groups = itertools.groupby(elements, lambda x: x[0])\n    # transform the elements to a list of tuples\n    groups = [[(first, *list(group)) for first, group in groups]]\n    # flatten it\n    groups = [x for y in groups for x in y]\n    return groups\n# END SOLUTION\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom collections import Counter\nfrom typing import List, Tuple\n\n\ndef sort_on_occurence(\n    data: List[Tuple[int, ...]]\n) -> List[Tuple[Tuple[int, ...], ...]]:\n    result = []\n    counts = Counter([x[0] for x in data])\n    sorted_counts = sorted(counts.items(), key=lambda x: x[0])\n    for key, value in sorted_counts:\n        result.extend(\n            (tuple([key]),) + tuple(sorted(x[1:]) for x in data if x[0] == key)\n        )\n    return result\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(tuples):\n    tuples = [list(tuple_item) for tuple_item in tuples]\n    sorted_tuples = []\n    item_counter = 0\n    for item in tuples:\n        if item_counter == 0:\n            sorted_tuples.append(item)\n        else:\n            if item[0] == sorted_tuples[item_counter-1][0]:\n                sorted_tuples[item_counter-1].append(item[1])\n                if len(item) == 3:\n                    sorted_tuples[item_counter-1].append(item[2])\n            else:\n                sorted_tuples.append(item)\n        item_counter += 1\n    return sorted_tuples\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    i = 1\n    while True:\n        if i * i >= n:\n            break\n        i += 1\n    return i * i\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(number):\n    if number == 1:\n        return 4\n    elif number == 2:\n        return 9\n    elif number == 3:\n        return 16\n    elif number == 4:\n        return 25\n    elif number == 5:\n        return 36\n    else:\n        num = 6\n        while num ** 2 < number:\n            num += 1\n        return num ** 2\n\n\ndef test_next_Perfect_Square():\n    assert next_Perfect_Square(1) == 4\n    assert next_Perfect_Square(2) == 9\n    assert next_Perfect_Square(3) == 16\n    assert next_Perfect_Square(4) == 25\n    assert next_Perfect_Square(5) == 36\n    assert next_Perfect_Square(6) == 49\n    assert next_Perfect_Square(7) == 64\n    assert next_Perfect_Square(8) == 81\n    assert next_Perfect_Square(9) == 100\n    assert next_Perfect_Square(10) == 121\n    assert next_Perfect_Square(11) == 144\n    assert next_Perfect_Square(12) == 169\n    assert next_Perfect_Square(13) == 196\n    assert next_Perfect_Square(14) == 225\n    assert next_Perfect_Square(15) == 256\n    assert next_Perfect_Square(16) == 289\n    assert next_Perfect_Square(17) == 324\n    assert next_Perfect_Square(18) == 361\n    assert next_Perfect_Square(19) == 400\n    assert next_Perfect_Square(20) == 441\n    assert next_Perfect_Square(21) == 484\n    assert next_Perfect_Square(22) == 529\n    assert next_Perfect_Square(23)", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    return int(n**0.5)**2+1 if int(n**0.5)**2+1 > n else int(n**0.5)**2+2\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n# Time: O(n)\n# Space: O(1)\ndef next_Perfect_Square(x):\n    # Base Case\n    if x == 0:\n        return 0\n    else:\n        # Binary Search\n        start = 1\n        end = x\n        while start <= end:\n            mid = (start + end) // 2\n            # check if the mid*mid is greater than x\n            if mid * mid > x:\n                end = mid - 1\n            # check if the mid*mid is smaller than x\n            elif mid * mid < x:\n                start = mid + 1\n            # if mid*mid is equal to x\n            else:\n                return mid\n        # if end has reached the start\n        return start\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n# test cases", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    root = num**.5\n    if root.is_integer():\n        return root+1\n    else:\n        return  root + 2\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n# A Naive Approach", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(x):\n    if x <= 0:\n        return 0\n    sq = 0\n    while sq <= x:\n        sq += 1\n        if sq * sq > x:\n            break\n    return sq * sq\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\nimport math\n\n\ndef is_Square(n):\n    return math.sqrt(n) % 1 == 0\n\n\ndef next_Perfect_Square(n):\n    if is_Square(n):\n        return int(n)\n    i = n + 1\n    while not is_Square(i):\n        i += 1\n    return int(i)\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Get the next perfect square greater than a given number.\n    \"\"\"\n    from math import sqrt\n    if sqrt(num) == int(sqrt(num)):\n        return int(sqrt(num)+1)**2\n    else:\n        return int(sqrt(num)+2)**2\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nfrom typing import List\n\nfrom array_binary_search import binary_search\n\n\ndef max_sum(array: List[int], max_sum: int) -> int:\n    \"\"\"\n    :param array: array of numbers\n    :param max_sum: maximum sum of bi-tonic sub-sequence\n    :return: max sum of bi-tonic sub-sequence\n    >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n    194\n    >>> max_sum([15, 51, 45, 33, 100, 12, 18, 9], 9)\n    115\n    >>> max_sum([10, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n    114\n    \"\"\"\n    max_sum = 0\n    for index in range(len(array)):\n        left, right = binary_search(array, index, len(array))\n        if left != right and array[left] + array[right] > max_sum:\n            max_sum = array[left] + array[right]\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nfrom typing import List\n\n\ndef max_sum(arr: List[int], n: int) -> int:\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i <= j:\n                dp[i][j] = max(\n                    dp[i][j - 1] + arr[j - 1],\n                    dp[i - 1][j] + arr[i - 1]\n                )\n            else:\n                dp[i][j] = 0\n\n    return dp[n][n]\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nfrom typing import List\n\ndef max_sum(array: List[int], array_length: int) -> int:\n    dp = [array[0], array[0], array[1] + array[0]]\n    for i in range(2, array_length):\n        dp.append(max(array[i], dp[i-2]+array[i], dp[i-1]))\n    return dp[-1]\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\n# Solution 1 - Recursion\ndef max_sum(array, n):\n    if n == 1:\n        return array[0]\n    elif n == 2:\n        return max(array[0] + array[1], array[1])\n    else:\n        return max(array[0] + max_sum(array[2:], n-2), max_sum(array[1:], n-1))\n\n# Solution 2 - Memoization\ndef max_sum(array, n):\n    memo = [0 for _ in range(n)]\n    memo[0] = array[0]\n    memo[1] = max(array[0] + array[1], array[1])\n    for i in range(2, n):\n        memo[i] = max(array[0] + memo[i-2], memo[i-1])\n    return memo[n-1]\n\n# Solution 3 - Dynamic Programming\ndef max_sum(array, n):\n    memo = [0 for _ in range(n)]\n    memo[0] = array[0]\n    memo[1] = max(array[0] + array[1], array[1])\n    for i in range(2, n):\n        memo[i] = max(array[i] + memo[i-2], memo[i-1])\n    return memo[n-1]\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[1], arr[0])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[n-1]\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nimport sys\n\ndef max_sum(arr, n):\n    # 1. Create an empty list to store intermediate sum\n    intermediate_sum = [None for x in range(n)]\n    \n    # 2. Initialize first element of intermediate sum\n    intermediate_sum[0] = arr[0]\n    \n    # 3. Compute max sum of current subsequence without last element of array\n    max_sum = arr[0]\n    \n    # 4. Traverse through the given array\n    for i in range(1, n):\n        \n        # 5. Compute sum of current subsequence with last element of array\n        intermediate_sum[i] = max(arr[i], arr[i] + intermediate_sum[i-1])\n        \n        # 6. Update max_sum if needed\n        max_sum = max(intermediate_sum[i], max_sum)\n        \n    # 7. Return the max_sum\n    return max_sum\n\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nimport pytest\n\n\ndef max_sum(A, n):\n    \"\"\"\n    :param A: list of integers\n    :param n: number of elements in list\n    :return: maximum sum of bi-tonic sub-sequence\n    \"\"\"\n    B = [0] * n\n\n    for i in range(n):\n        B[i] = A[i]\n\n    max_sum = 0\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if (B[j] > B[i] or B[j] < 0) and B[j] + B[i] > max_sum:\n                max_sum = B[j] + B[i]\n\n    return max_sum\n\n\n@pytest.mark.parametrize(\"A, expected\", [([1, 15, 51, 45, 33, 100, 12, 18, 9], 194)])\ndef test_max_sum(A, expected):\n    assert max_sum(A, len(A)) == expected\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    if n == 1:\n        return max(arr)\n    max_ending_with_1 = max_ending_with_0 = -9999999999\n    for i in range(n):\n        max_ending_with_1 = max(max_ending_with_1 + arr[i], max_ending_with_0 + arr[i])\n        max_ending_with_0 = max(max_ending_with_0, max_ending_with_1 - arr[i])\n    return max(max_ending_with_1, max_ending_with_0)\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(a, n):\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            m = max(m, a[i] + a[j])\n    return m\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef max_sum(nums: List[int], size: int) -> int:\n    \"\"\"\n    Fibonacci\n    \"\"\"\n    if not nums:\n        return 0\n\n    # 01. Initialization\n    n = len(nums)\n    sums = [0] * (n + 1)\n    sums[0] = 0\n    sums[1] = nums[0]\n\n    # 02. Loop\n    for i in range(2, n + 1):\n        sums[i] = max(sums[i - 1], sums[i - 2] + nums[i - 1])\n\n    # 03. Answer\n    return sums[size]\n\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport unittest\nimport timeit\n\ndef babylonian_squareroot(n):\n    approx = n / 2.0\n    while approx - n / approx > 0.0000000001:\n        approx = (approx + n / approx) / 2\n    return approx\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(number):\n    if number == 0:\n        return 0\n    low = 0\n    high = number\n    ans = (low+high)/2\n    while (low<high-1):\n        ans = (low+high)/2\n        if (ans*ans == number):\n            break\n        if (ans*ans < number):\n            low = ans\n        else:\n            high = ans\n    return ans\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(a, x=1):\n    return (x + a/x) / 2\n\nbabylonian_squareroot(10)", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nfrom math import sqrt\n\ndef babylonian_squareroot(n):\n    x = n\n    while True:\n        y = (x + n//x)//2\n        if y == x:\n            break\n        else:\n            x = y\n    return x\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport math\ndef babylonian_squareroot(number):\n    guess=number\n    while True:\n        if guess==0:\n            break\n        guess= (guess+number//guess)/2\n    return guess\nbabylonian_squareroot(10)<jupyter_output><empty_output><jupyter_text>**Ques 7**Write a Python function to implement the so-called binary search algorithm:    - The function should take two inputs: a Python list to be searched and the item to be searched for.- The function should return the index of the item or -1 if the item is not found.In order to test your function, you will need to create a sorted list with a few items. Then you will need to know the values of those items, the value of the item you are searching for and the position of the item. For example, if your list was [1, 2, 4, 6, 8, 10] and your search value was 4, then your function should return 2.<jupyter_code>def binary_search(list_input,item_to_find):\n    if item_to_find in list_input:\n        return list_input.index(item_to_find)\n    else:\n        return -1\nbinary_search([1,2,4,6,8,10],4)<jupyter_output><empty_output><jupyter_text>**Ques 8**Write a function which will compute the max and min in a given Python list.        def max_min(input_list):        if len(input_list) > 1:            max_val = input_list[0]            min_val = input_list[0]            for i in input_list:                if max_val < i:                    max_val = i                if min_val > i:                    min_val = i            return max_val, min_val        else:            return None, Nonemax_min([1,2,3,4,5,6])<jupyter_code>def max_min(input_list):\n    if len(input_list) > 1:\n        max_val = input_list[0]\n        min_val = input_list[0", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x,eps=1e-5):\n    if x<0:\n        return None\n    else:\n        last = x\n        while True:\n            x = (x + last/x)/2\n            if abs(x-last)<eps:\n                return x\n            else:\n                last = x", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport numpy as np\ndef babylonian_squareroot(x):\n\ty = (x/2)\n\twhile abs(y-x/y) > 10**-6:\n\t\ty = (y + x/y) /2\n\treturn y", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n  \"\"\"\n  :param x: number to compute square root for\n  :return: square root of x\n  \"\"\"\n  if x==0:\n    return 0\n  i=x\n  while True:\n    i=(i+x/i)//2\n    if abs(i-x/i)<1e-5:\n      break\n  return i\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(number, number_of_digits=4):\n    '''\n    This function uses the babylonian method to find the square root of the number\n    that you specify.\n    '''\n\n    # first define the precision that the function will use\n    # to make sure that the number of digits is correct\n    precision = 10**(-number_of_digits)\n\n    # Now make sure that the number you are passing in is positive\n    if number < 0:\n        raise ValueError('Cannot calculate square root of negative number')\n\n    # Now get the initial guess\n    guess = number/2\n\n    # Then find the difference between the guess and the number\n    difference = guess**2 - number\n\n    # Loop until the difference is less than precision\n    while abs(difference) > precision:\n        # new guess is halfway between the guess and the number\n        guess = (guess + number/guess)/2\n        # then find the difference between the new guess and the number\n        difference = guess**2 - number\n\n    # return the number of digits that you want to see\n    return guess\n\ndef babylonian_squareroot2(number, number_of_digits=4):\n    '''\n    This function uses the babylonian method to find the square root of the number\n    that you specify. This function also calculates the number of iterations needed\n    to get the answer to the precision you specify\n    '''\n\n    # first define the precision that the function will use\n    # to make sure that the number of digits is correct\n    precision = 10**(-number_of_digits)\n\n    # Now make sure that the number you are passing in is positive\n    if number < 0:\n        raise ValueError('Cannot calculate square root of negative number')\n\n    # Now get the initial guess\n    guess = number/2\n\n    # Then find the difference between the guess and the number\n    difference = guess**2 - number\n\n    # Keep track of how many times you do this\n    counter = 0\n\n    # Loop until the difference is less than precision\n    while abs(difference) > precision:\n        # new guess is halfway between the guess and the number\n        guess = (guess + number/guess)/2", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport math\ndef babylonian_squareroot(a,num_iters=10):\n  if(a==0):\n    return 0\n  else:\n    x=a/2\n    for i in range(num_iters):\n      x = (x + a/x) / 2\n    return x"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\nfrom typing import List\n\ndef lps(s: str) -> int:\n    \"\"\"\n    Time O(n^2)\n    Space O(n^2)\n    \"\"\"\n    # Create a 2-D array to store the length of the longest palindromic subsequence ending at \n    # each index\n    n = len(s)\n    L = [[0 for i in range(n)] for j in range(n)]\n    \n    # For every index i, L[i][i] will be 1 as the single character is always a palindrome\n    for i in range(n):\n        L[i][i] = 1\n    \n    # Iterate through the array and find the length of the LPS for the substring starting \n    # from the index i and ending at the index j\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            # If the string between the indices i and j is a palindrome, the LPS must be one \n            # more than the length of the LPS ending at the index j-1\n            if s[i] == s[j] and i+1 >= j-1:\n                L[i][j] = L[i+1][j-1] + 2\n            \n            # If the string between the indices i and j is not a palindrome, the LPS must be \n            # the maximum of the LPS ending at the index i and j-1\n            else:\n                L[i][j] = max(L[i+1][j], L[i][j-1])\n            \n    # return the value at index 0, 0 of the 2-D array L, which gives the length of the \n    # longest palindromic subsequence in the given string\n    return L[0][0]\n\ndef lps_tabulation(s: str) -> int:\n    \"\"\"\n    Time O(n^2)\n    Space O(n^2)\n    \"\"\"\n    # Create a 2-D array to store the length of the longest palindromic subsequence ending at \n    # each index\n    n = len(s)\n    L = [[0 for i in range(n)] for", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    size = len(string)\n    dp = [[0]*size for _ in range(size)]\n    for i in range(size):\n        dp[i][i] = 1\n    \n    for i in range(size-1):\n        if string[i] == string[i+1]:\n            dp[i][i+1] = 2\n    \n    for i in range(2, size):\n        for j in range(i):\n            if string[j] == string[j+i]:\n                dp[j][j+i] = dp[j+1][j+i-1] + 2\n            else:\n                dp[j][j+i] = max(dp[j+1][j+i], dp[j][j+i-1])\n    \n    return dp[0][size-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\n# Best Approach\ndef lps(s: str) -> int:\n    n = len(s)\n    table = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if s[i] == s[j] and (j-i < 2 or table[i+1][j-1]):\n                table[i][j] = 1 + (table[i+1][j-1] if j > i+1 else 0)\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    return table[0][n-1]\n\n# Leetcode solution\ndef lps(self, s: str) -> int:\n    n = len(s)\n    table = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if s[i] == s[j] and (j-i < 2 or table[i+1][j-1]):\n                table[i][j] = 1 + (table[i+1][j-1] if j > i+1 else 0)\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    return table[0][n-1]\n\n# Tests", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\n# approach: dynamic programming with memoization\n# memory: O(n^2)\n# runtime: O(n^2)\n\ndef lps(string):\n    n = len(string)\n    memo = [[None] * n for _ in range(n)]\n    return memo_lps(string, 0, n - 1, memo)\n\n\ndef memo_lps(string, i, j, memo):\n    if i > j:\n        return 0\n\n    elif memo[i][j] is not None:\n        return memo[i][j]\n\n    elif string[i] == string[j]:\n        memo[i][j] = 2 + memo_lps(string, i + 1, j - 1, memo)\n        return memo[i][j]\n    \n    else:\n        memo[i][j] = max(memo_lps(string, i + 1, j, memo), memo_lps(string, i, j - 1, memo))\n        return memo[i][j]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(str):\n    T = [[0]*len(str) for i in range(len(str))]\n    res = 0\n    \n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if(i == j):\n                T[i][j] = 1\n            elif(i+1 == j):\n                if(str[i] == str[j]):\n                    T[i][j] = 2\n                else:\n                    T[i][j] = 1\n            else:\n                if(str[i] == str[j]):\n                    T[i][j] = 2 + T[i+1][j-1]\n                else:\n                    T[i][j] = max(T[i][j-1], T[i+1][j])\n                    \n            if(T[i][j] > res):\n                res = T[i][j]\n    return res\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    \"\"\"\n    >>> lps(\"TENS FOR TENS\")\n    5\n    \"\"\"\n    assert isinstance(string, str), \"string must be a string\"\n    palindromic_subseq = 0\n    for i in range(len(string)):\n        lps = palindrome(string, i, i) + palindrome(string, i, i + 1)\n        palindromic_subseq = max(palindromic_subseq, lps)\n    return palindromic_subseq\n\ndef palindrome(string, l, r):\n    while l >= 0 and r < len(string) and string[l] == string[r]:\n        l -= 1\n        r += 1\n    return r - l - 1\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(str):\n    # Base Case\n    if len(str) <= 1:\n        return len(str)\n\n    # Create a table to store the results\n    L = [None] * (len(str))\n\n    for i in range(len(str)):\n        L[i] = [0] * (len(str))\n\n    # Fill the diagonals first\n    for i in range(len(str)):\n        L[i][i] = 1\n\n    # Fill the table\n    for gap in range(1, len(str)):\n        for i in range(len(str)):\n            j = i + gap\n            if j >= len(str):\n                break\n\n            if str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n\n    return L[0][len(str)-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s: str) -> int:\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                if j == i+1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][-1]\n\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nimport math\n\n\ndef harmonic_sum(n):\n    return sum([1 / i for i in range(1, n+1)])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return 1.0 / n * (sum(1.0 / i for i in range(1,n+1)))\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nfrom typing import Union\n\n\ndef harmonic_sum(n: Union[float, int]) -> Union[float, int]:\n    \"\"\"\n    >>> harmonic_sum(7)\n    2.5928571428571425\n    \"\"\"\n    return 1 / sum(1 / (i + 1) for i in range(n))\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(7)\n    2.5928571428571425\n    \"\"\"\n    # Your code here\n    return sum([1/x for x in range(1, n+1)])\n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(7) == 2.5928571428571425\n    assert harmonic_sum(10) == 2.639097744360902\n    assert harmonic_sum(100) == 2.642215655415187\n    assert harmonic_sum(1000) == 2.6424676397919135\n    assert harmonic_sum(10000) == 2.642470985154744\n    assert harmonic_sum(100000) == 2.642471002087343\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"\n    n: int\n    rtype: float\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    \"\"\"\n    :param n: an integer\n    :return: the harmonic sum of n-1\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1 / i\n    return sum\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n  if n == 1:\n    return 1\n  else:\n    return 1/n + harmonic_sum(n-1)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    # start by computing the sum of all the reciprocals,\n    # then divide that sum by n, then add 1\n    return 1 / (sum(1 / (1 + i) for i in range(1, n+1)))\n\n# print(harmonic_sum(10))\n# print(harmonic_sum(100))\n# print(harmonic_sum(1000))\n# print(harmonic_sum(10000))\n# print(harmonic_sum(100000))\n# print(harmonic_sum(1000000))\n# print(harmonic_sum(10000000))\n# print(harmonic_sum(100000000))\n# print(harmonic_sum(1000000000))\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n# write function here\nintersection = lambda A, B: list(filter(lambda x: x in A, B))", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    return list(filter(lambda x: x in arr2, arr1))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1,arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n# intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n#input list1\nlist1=input(\"Enter List1: \")\nlist1=list1.split()\nlist1=[int(i) for i in list1]\n\n#input list2\nlist2=input(\"Enter List2: \")\nlist2=list2.split()\nlist2=[int(i) for i in list2]\n\nlist3=[]\nfor i in list2:\n    if i in list1:\n        list3.append(i)", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a, b):\n    return list(filter(lambda x: x in b, a))\n\n\n# Python program to find common elements in three sorted arrays\n# This function takes three arrays as input and returns a sorted array\n# which contains common elements in all three arrays.\n# Example:\n# Input :\n# a1 = [1, 5, 10, 20, 40, 80]\n# a2 = [6, 7, 20, 80, 100]\n# a3 = [3, 4, 15, 20, 30, 70, 80, 120]\n# Output : [20, 80]\n# Note : 30 and 70 is common in all three arrays.\ndef common_elements(a1, a2, a3):\n    i, j, k = 0, 0, 0\n    res = []\n    while i < len(a1) and j < len(a2) and k < len(a3):\n        if a1[i] == a2[j] == a3[k]:\n            res.append(a1[i])\n            i += 1\n            j += 1\n            k += 1\n        elif a1[i] <= a2[j] and a1[i] <= a3[k]:\n            i += 1\n        elif a2[j] <= a1[i] and a2[j] <= a3[k]:\n            j += 1\n        else:\n            k += 1\n    return res\n\n# Binary Search algorithm in Python\n# A Python program for recursive binary search\n# Function to do binary search. It takes last element as pivot,\n# places the pivot element at its correct position in sorted\n# array, and returns the position of pivot.\ndef binary_search(arr, low, high, x):\n    # Check base case\n   ", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(list1,list2):\n    return list(filter(lambda x: x in list2, list1))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n# solution\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda a: a in arr2, arr1))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\nfrom typing import List\n\ndef intersection_array(nums1:List[int],nums2:List[int]) ->List[int]:\n    return list(filter(lambda x: x in nums1,nums2))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, elem):\n    \"\"\"\n    Return the count of occurences of elem in tup\n\n    Parameters\n    ----------\n    tup : tuple\n        input tuple\n    elem : element\n        element to search\n\n    Returns\n    -------\n    int\n        count of occurences of elem in tup\n\n    Examples\n    --------\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    True\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == elem:\n            count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(A,x):\n\tnum = 0\n\tfor e in A:\n\t\tif e == x:\n\t\t\tnum += 1\n\treturn num\n\n#print count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple1,x):\n    count = 0\n    for i in tuple1:\n        if i == x:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup,X):\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == X:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\n#Code Here\ndef count_X(tuple, x):\n  count = 0\n  for i in tuple:\n    if i == x:\n      count += 1\n  return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple_list,x):\n    count=0\n    for i in tuple_list:\n        if i==x:\n            count=count+1\n    return count", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(X,x):\n    if x in X:\n        return X.count(x)\n    return 0\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple_input, element):\n    count = 0\n    for i in tuple_input:\n        if i == element:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple1, X):\n    count = 0\n    for i in tuple1:\n        if i == X:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(L,X):\n    return L.count(X)"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(L, elem):\n    result = []\n    for i in range(0, len(L)):\n        result.append(elem)\n        result.append(L[i])\n    return result[1:]\n\n#insert_element(['Red', 'Green', 'Black'], 'c')\n#insert_element(['Red', 'Green', 'Black'], 'a')\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(l,element):\n    for i in range(len(l)):\n        l.insert(i,element)\n    return l\n\n\ninsert_element(['Red','Green','Black'],'c')\n\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\n# In[19]:\n\n\ndef insert_element(lst,element):\n    return [element]+lst+[element]\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list, element):\n\tlist.insert(0,element)\n\treturn list\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(my_list, element):\n    new_list = []\n    for i in range(len(my_list)):\n        new_list.append(element)\n        new_list.append(my_list[i])\n    return new_list\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst,x):\n    i=0\n    while i<len(lst):\n        lst.insert(i,x)\n        i=i+2\n    return lst", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(a, x):\n    return [x] + a + [x]\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list, ele):\n    temp = []\n    for i in list:\n        temp.append(ele)\n        temp.append(i)\n    return temp[1:]\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(li, element):\n\tfor i in range(0,len(li)):\n\t\tli.insert(i,element)\n\treturn li\n\ninsert_element(['Red', 'Green', 'Black'],'c')"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    \"\"\"\n    Return a tuple (r, phi) such that z = r*exp(i*phi).\n    \"\"\"\n    return z.real, z.imag\n\n\ndef test_convert():\n    assert convert(1) == (1.0, 0.0)\n    assert convert(2j) == (0.0, 2.0)\n    assert convert(1+2j) == (1.0, 2.0)\n    assert convert(4.0) == (4.0, 0.0)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(complex_num):\n    return complex_num.real, complex_num.imag\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    assert isinstance(z, complex), \"Input must be a complex number.\"\n    a,b = z.real, z.imag\n    if b < 0:\n        b *= -1\n        a *= -1\n    return (math.sqrt(a**2 + b**2), math.atan(a/b))\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(num):\n    real = num.real\n    imaginary = num.imag\n    return (real*real+imaginary*imaginary, real*imaginary*2)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nfrom math import hypot\n\ndef convert(complex_number):\n    \"\"\"\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(3+4j)\n    (5.0, 0.9272952180016122)\n    \"\"\"\n    r = hypot(complex_number.real, complex_number.imag)\n    theta = complex_number.imag/complex_number.real\n    return r, theta\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    return (abs(z), math.atan2(z.imag, z.real))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    return (abs(z),math.atan2(z.imag, z.real))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nfrom math import hypot\n\n\ndef convert(complex_number):\n    return hypot(complex_number.real, complex_number.imag), (complex_number.real, complex_number.imag)\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list_):\n    return len([x for x in list_ if type(x)==int])\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\nfrom collections import Counter\ndef count_integer(lst):\n    return sum([1 for x in lst if isinstance(x, int)])\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(li):\n    return len(li)\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(items):\n  return len([i for i in items if isinstance(i, int)])\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(l):\n    # your code here\n    count = 0\n    for item in l:\n        if isinstance(item, int):\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(my_list):\n    \"\"\"This function returns the number of integers in the given list\"\"\"\n    \n    return len([x for x in my_list if isinstance(x, int)])\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(input_list):\n\tcount = 0\n\tfor element in input_list:\n\t\tif isinstance(element, int):\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(my_list):\n    count = 0\n    for item in my_list:\n        if type(item) == int:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(li):\n    # your code\n    return len([x for x in li if type(x)==int])\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\n#function to find all words starting with 'a' or 'e'\ndef words_ae(s):\n    word_list = []\n    for i in s.split():\n        if i.startswith('a') or i.startswith('e'):\n            word_list.append(i)\n    return word_list\n\n#test case", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    word_list = []\n    for w in s.split():\n        if w[0] == 'a' or w[0] == 'e':\n            word_list.append(w)\n    return word_list\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List, DefaultDict, Tuple\nfrom string import ascii_lowercase\n\ndef words_ae(string: str) -> List[str]:\n    \"\"\"\n    Finds words in a given string with a given letter (ae) as first letter.\n    :param string: a string containing one or more words.\n    :return: a list containing all words in a given string with a given letter (ae) as first letter.\n    >>> words_ae(\"python programe\")==['ame']\n    \"\"\"\n    dictionary: DefaultDict[str, List[str]] = defaultdict(list)\n    result = []\n    for char in string:\n        dictionary[char.lower()].append(char)\n    for i in dictionary:\n        if i in ascii_lowercase:\n            result.extend(dictionary[i])\n    return result\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\n#First, write a function to get all words in a string.\ndef get_words(str_input):\n    split_str = str_input.split()\n    return split_str\n\n#Use get_words to get all words in a string.\ndef words_ae(str_input):\n    words = get_words(str_input)\n    result = [word for word in words if word.startswith('a') or word.startswith('e')]\n    return result", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(text):\n    return [word for word in text.split() if word.startswith(('a','e'))]\n\ndef test_words_ae():\n    assert words_ae(\"python programe\") == ['ame']\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n# def words_ae(str1):\n#     return [word for word in str1.split() if word[0] == \"a\" or word[0] == \"e\"]\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    return [x for x in s.split() if x.startswith('a') or x.startswith('e')]\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    \"\"\"Return list of words starting with 'a' or 'e'.\"\"\"\n    return [w for w in s.split() if w[0] == 'a' or w[0] == 'e']\n\n#tests", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    words = []\n    for w in s.split():\n        if w[0] == 'a' or w[0] == 'e':\n            words.append(w)\n    return words\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    return [word for word in string.split() if word.startswith('a') or word.startswith('e')]\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(list_of_colors, n):\n    if n == 1:\n        return [tuple(list_of_colors)]\n    else:\n        comb = []\n        for i in range(len(list_of_colors)):\n            comb.extend([(list_of_colors[i],) + j for j in combinations_colors(list_of_colors[:i] + list_of_colors[i+1:], n-1)])\n        return comb\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n#Solution 1 - Brute Force\ndef combinations_colors(colors, n):\n    if n==1:\n        return colors\n    combs = combinations_colors(colors, n-1)\n    combs_with_rest = []\n    for combo in combs:\n        for color in colors:\n            new_combo = combo + (color,)\n            combs_with_rest.append(new_combo)\n    return combs_with_rest\n\n#Solution 2 - Recursive\ndef combinations_colors(colors, n):\n    if n == 1:\n        return [(c,) for c in colors]\n    subcombs = combinations_colors(colors, n-1)\n    combs = []\n    for c in colors:\n        for subcomb in subcombs:\n            combs.append(subcomb+(c,))\n    return combs\n\n#Alternative recursive solution - Shorter but not as clear\n# def combinations_colors(colors, n):\n#     return ([(c,) + combo for c in colors for combo in combinations_colors(colors, n-1)] if n>0 else [])\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(col,n):\n    if n == 1:\n        return col\n    if n == 2:\n        return itertools.combinations(col,n)\n    if n == 3:\n        return itertools.combinations(col,n)\n    if n > 3:\n        new_col = []\n        for i in combinations_colors(col,n-1):\n            for j in combinations_colors(col,1):\n                new_col.append(i+j)\n        return new_col\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n# Note: Please don't change the below function\ndef combinations_colors(colors,k):\n    combinations = []\n    if(k==1):\n        for color in colors:\n            combinations.append((color,))\n    elif(k==2):\n        for color1 in colors:\n            for color2 in colors:\n                combinations.append((color1,color2))\n    elif(k==3):\n        for color1 in colors:\n            for color2 in colors:\n                for color3 in colors:\n                    combinations.append((color1,color2,color3))\n    else:\n        for color1 in colors:\n            for color2 in colors:\n                for color3 in colors:\n                    for combo in combinations_colors(colors,k-2):\n                        combinations.append((color1,color2,color3)+combo)\n    return combinations\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, n):\n\tcomb = []\n\tfor i in range(1, 2**n):\n\t\tcomb.append(tuple([colors[j] for j in range(n) if (i>>j)%2==1]))\n\treturn comb\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,k):\n    return [tuple(x) for x in itertools.combinations(colors,k)]\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, number):\n    \"\"\"\n    Generate combinations with repetitions of number of colors from a list of colors.\n    :param colors: list of colors\n    :param number: number of colors to choose\n    :return: list of tuples of chosen colors\n    \"\"\"\n    if number == 1:\n        return [(color,) for color in colors]\n\n    combinations = []\n    for color in colors:\n        subcombinations = combinations_colors(colors, number - 1)\n        for subcombination in subcombinations:\n            combinations.append((color,) + subcombination)\n\n    return combinations\n\n\ndef combinations_colors_2(colors, number):\n    \"\"\"\n    Generate combinations with repetitions of number of colors from a list of colors.\n    :param colors: list of colors\n    :param number: number of colors to choose\n    :return: list of tuples of chosen colors\n    \"\"\"\n    if number == 1:\n        return [(color,) for color in colors]\n\n    combinations = []\n    for color in colors:\n        subcombinations = combinations_colors(colors, number - 1)\n        for subcombination in subcombinations:\n            combinations.append((color, ) + subcombination)\n\n    return combinations\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, no_combinations):\n    if no_combinations==1:\n        return [tuple(colors)]\n    \n    combinations= []\n    for i in range(len(colors)):\n        combinations.extend( ( (colors[i],)+c for c in combinations_colors(colors[i+1:], no_combinations-1)) )\n    \n    return combinations\n\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nimport itertools\n\n\ndef combinations_colors(colors,num_colors):\n    for i in itertools.combinations_with_replacement(colors,num_colors):\n        yield i"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef is_prime(n):\n    \"\"\"Determine if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i = i + 2\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"Count the number of prime numbers less than n.\"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# my solution\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_Prime(i):\n            count += 1\n    return count\n\ndef is_Prime(n):\n    for i in range(2, n//2+1):\n        if n%i == 0:\n            return False\n    return True\n\n# Test", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(num):\n    n = 0\n    for i in range(2, num):\n        for j in range(2, i):\n            if (i % j) == 0:\n                break\n        else:\n            n = n + 1\n    return n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2, num):\n        if isPrime(i):\n            count += 1\n    return count\n\ndef isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n#Test Cases", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\nfrom math import sqrt\nfrom math import floor\n\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n\n    num_primes = 1\n    divisor = floor(sqrt(n)) + 1\n\n    for i in range(3, divisor, 2):\n        if n % i == 0:\n            num_primes += 1\n\n    return num_primes\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\nfrom math import sqrt\n\n\ndef is_prime(n):\n    \"\"\"\n    This is one of the simplest methods of checking if a number is prime or not.\n    It checks all the values of 2 to the square root of the number.\n    If the number is divisible by any number except 1 and the number itself, it is not a prime number.\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This is a slightly modified version of the above method.\n    Instead of checking the number from 2 to the square root of n, we are going to start from 2 and increase the value\n    of i by 2 instead of 1.\n    This is because if a number is divisible by 2, it means it is divisible by 2, 4, 6, etc. which is the same\n    as divisible by 1, 3, 5, etc. So we can reduce the number of times we need to check if a number is prime.\n    We can also avoid the case where n is 1.\n    \"\"\"\n    i = 2\n    count = 0\n    while i <= n:\n        if is_prime(i):\n            count += 1\n        i += 2\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\nfrom typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    nums = [1] * n\n\n    nums[0] = nums[1] = 0\n    for i in range(2, n):\n        if nums[i] == 1:\n            for j in range(i * i, n, i):\n                nums[j] = 0\n    return sum(nums)\n\n\ndef count_Primes(n: int) -> int:\n    # In order to implement the sieve of Eratosthenes, we have to first find all the prime numbers\n    # that are less than or equal to the square root of n.\n    max_possible_num = n\n    max_possible_num_sqrt = int(max_possible_num**0.5)\n    sieve = [1] * (max_possible_num + 1)\n    sieve[0] = sieve[1] = 0\n    for i in range(2, max_possible_num_sqrt + 1):\n        if sieve[i] == 1:\n            for j in range(i * i, max_possible_num + 1, i):\n                sieve[j] = 0\n    return sum(sieve)\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\nfrom collections import Counter\n\ndef count_Primes_nums(n):\n    if n < 1:\n        return 0\n    else:\n        ctr = Counter()\n        for num in range(1, n+1):\n            for divisor in range(2, num):\n                if num % divisor == 0:\n                    break\n            else:\n                ctr[num] += 1\n        return len(ctr)\n\ndef count_Primes_nums(n):\n    if n < 1:\n        return 0\n    else:\n        ctr = Counter()\n        for num in range(1, n+1):\n            ctr[num] = len(list(filter(lambda i: num % i == 0, range(2, num))))\n        return sum(ctr.values())\n\ndef count_Primes_nums(n):\n    if n < 1:\n        return 0\n    else:\n        ctr = Counter()\n        for num in range(1, n+1):\n            for divisor in range(2, num):\n                if num % divisor == 0:\n                    break\n            else:\n                ctr[num] += 1\n        return len(ctr)\n\ndef count_Primes_nums(n):\n    if n < 1:\n        return 0\n    else:\n        ctr = Counter()\n        for num in range(1, n+1):\n            ctr[num] = len(list(filter(lambda i: num % i == 0, range(2, num))))\n        return sum(ctr.values())\n\ndef count_Primes_nums(n):\n    if n < 1:\n        return 0\n    else:\n        ctr = Counter()\n        for num in range(1, n+1):\n            ctr[num] = len(list(filter(lambda i: num % i == 0, range(2, num))))\n        return sum(ctr.values())\n\ndef count_Primes_nums(n):\n    if n < 1:\n        return 0\n    else:\n        ctr = Counter()\n        for num in range(1, n+1):\n            ctr[num] = len(list(filter(lambda i: num % i == 0, range(2,", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\nimport math\n\ndef isPrime(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 2:\n        return False\n\n    if n == 2:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n  count = 0\n  for num in range(2, n):\n    is_Prime = True\n    for i in range(2, num):\n      if num % i == 0:\n        is_Prime = False\n        break\n    if is_Prime:\n      count += 1\n  return count\n\ndef test_count_Primes_nums():\n  assert count_Primes_nums(5) == 2\n  assert count_Primes_nums(1) == 0\n  assert count_Primes_nums(2) == 1\n  assert count_Primes_nums(10) == 4\n  assert count_Primes_nums(100) == 25\n  assert count_Primes_nums(1000) == 168\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n# \u89e3\u6cd5\u4e00\ndef swap_numbers(a, b):\n    return b, a\n\n\n# \u89e3\u6cd5\u4e8c\ndef swap_numbers(a, b):\n    a, b = b, a\n    return a, b\n\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n# 1. Define a function called swap_numbers\ndef swap_numbers(a,b):\n\t# 2. Create a new variable for a temporary value of a\n\ttmp = a\n\t# 3. Set a to the value of b\n\ta = b\n\t# 4. Set b to the temporary value of a\n\tb = tmp\n\t# 5. return a, b\n\treturn a,b\n\n# 6. Call swap_numbers with 10 and 20\na,b = swap_numbers(10,20)\n# 7. Print the values of a and b", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    a,b=b,a\n    return a,b\n\n#test", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1, num2):\n    return num2, num1\n\n# Swap two numbers in a single line\ndef swap_numbers_oneline(num1, num2):\n    return (num2, num1)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n\treturn b,a\n\ndef main():\n\tassert swap_numbers(10,20)==(20,10)\n\tassert swap_numbers(20,20)==(20,20)\n\tassert swap_numbers(5,5)==(5,5)\n\tassert swap_numbers(34,45)==(45,34)\n\tprint(\"Success\")\nmain()", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a, b):\n    a, b = b, a\n    return (a, b)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n    \"\"\"\n    Return a tuple with two elements (b,a)\n    \"\"\"\n    return (b,a)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    return y,x\n\n\n#swap_numbers(10,20)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\n# Write your code below this line \ud83d\udc47\ndef swap_numbers(a,b):\n  return b,a\n\n# Test your code below this line \ud83d\udc47\n# Run this command to test your code: `python3.8 test_code.py`\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n#<NAME>\n#<EMAIL>\n#<EMAIL>\n#All rights reserved\n\ndef count_odd(lst):\n    return len(filter(lambda x:x%2, lst))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    # complete the function\n    #return len([i for i in lst if i%2==1])\n    return len(list(filter(lambda x:x%2,lst)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(x):\n    return(len(list(filter(lambda y:y%2, x))))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(l):\n    return len(list(filter(lambda x: x%2!=0,l)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n# Answer\n\nodd = list(filter(lambda x: x%2, [1, 2, 3, 5, 7, 8, 10]))", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(my_list):\n    return len([x for x in my_list if x%2 !=0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(numbers):\n    return len(list(filter(lambda x: x%2==1, numbers)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n# Counting the odd elements using filter and lambda function\ndef count_odd(list_numbers):\n    return len(list(filter(lambda x:x%2, list_numbers)))\n\n# Testing function"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(t1, t2):\n    t3 = []\n    for item1 in t1:\n        for item2 in t2:\n            t3.append(tuple(max(item1, item2)))\n    return t3\n\n# print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a_tuple, b_tuple):\n    a_max = max(a_tuple)\n    b_max = max(b_tuple)\n    if a_max > b_max:\n        return a_tuple\n    elif a_max < b_max:\n        return b_tuple\n    elif a_max == b_max:\n        return a_tuple if a_tuple > b_tuple else b_tuple\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a, b):\n    if a[0] > b[0]:\n        return a\n    elif a[0] < b[0]:\n        return b\n    else:\n        if a[1] > b[1]:\n            return a\n        elif a[1] < b[1]:\n            return b\n        else:\n            return a\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tup1, tup2):\n    # Write your code here.\n    if tup1[0] >= tup2[0]:\n        return tup1\n    else:\n        return tup2\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nimport pytest\n\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Returns the tuple of max elements.\n    \"\"\"\n    return tuple(map(max, zip(tuple1, tuple2)))\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n# returns a tuple (2, 5, 3, 4)\n# input: ((1, 3), (4, 5), (2, 9), (1, 10))\n# input: ((6, 7), (3, 9), (1, 1), (7, 3))\n\n# 1. find the first element with the max value,\n# take it out and put it in the output tuple.\n# 2. find the second element with the max value,\n# take it out and put it in the output tuple.\n# 3. find the third element with the max value,\n# take it out and put it in the output tuple.\n# 4. find the fourth element with the max value,\n# take it out and put it in the output tuple.\n# 5. repeat steps 1 to 4 for all tuples.\n\n# 1. find the first element with the max value,\n# take it out and put it in the output tuple.\n# 2. find the second element with the max value,\n# take it out and put it in the output tuple.\n# 3. find the third element with the max value,\n# take it out and put it in the output tuple.\n# 4. find the fourth element with the max value,\n# take it out and put it in the output tuple.\n# 5. repeat steps 1 to 4 for all tuples.\n\n\ndef maximize_elements(tuples):\n    # write your code here\n    tuples_list = list(tuples)\n    for i in range(len(tuples_list)):\n        tuples_list[i] = sorted(tuples_list[i])\n\n    max_tuples = []\n    while len(max_tuples) < len(tuples_list[0]):\n        max_value = 0\n        index = 0\n        for i", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a, b):\n    return (a[0][1], b[0][1], a[1][1], b[1][1]) if a[0][1] > b[0][1] else (b[0][1], a[0][1], b[1][1], a[1][1])\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nimport functools\nfrom typing import Tuple, List\n\n\ndef maximize_elements(\n    t1: Tuple[int, int], t2: Tuple[int, int]\n) -> Tuple[int, int]:\n    \"\"\"\n    Returns a tuple containing the largest elements in both tuples.\n    \"\"\"\n\n    def _max(t1: Tuple[int, int], t2: Tuple[int, int]) -> Tuple[int, int]:\n        \"\"\"\n        Takes two tuples and returns the tuple with largest elements.\n        \"\"\"\n        return t1 if t1[0] > t2[0] else t2\n\n    return functools.reduce(_max, map(lambda x, y: (x, y), t1, t2))\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuples_1, tuples_2):\n    max_tuple_1 = max(tuples_1, key=lambda x: x[1])\n    max_tuple_2 = max(tuples_2, key=lambda x: x[1])\n\n    min_tuple_1 = min(tuples_1, key=lambda x: x[0])\n    min_tuple_2 = min(tuples_2, key=lambda x: x[0])\n\n    if max_tuple_1[1] > max_tuple_2[1]:\n        return tuples_1\n    elif max_tuple_1[1] == max_tuple_2[1]:\n        if min_tuple_1[0] < min_tuple_2[0]:\n            return tuples_1\n        elif min_tuple_1[0] == min_tuple_2[0]:\n            if max_tuple_1[0] > max_tuple_2[0]:\n                return tuples_1\n            elif max_tuple_1[0] == max_tuple_2[0]:\n                return tuples_1 if max_tuple_1[1] > max_tuple_2[1] else tuples_2\n\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\nfrom math import sqrt\nfrom time import time\nfrom itertools import islice\n\ndef is_prime(number):\n    \"\"\"\n    check if a number is prime or not\n    \"\"\"\n    if number <= 1:\n        return False\n    for factor in range(2,int(sqrt(number))+1):\n        if number%factor == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman prime number\n    \"\"\"\n    primes = []\n    for number in islice(count(2),0,None):\n        if is_prime(number):\n            primes.append(number)\n            if len(primes) == n:\n                return primes[-1]\n\ndef timing_test(func):\n    \"\"\"\n    A decorator that prints the runtime\n    of the decorated function\n    \"\"\"\n    def inner(*args):\n        t1 = time()\n        output = func(*args)\n        t2 = time()\n        print(\"Function {name} took {time:.5f}s\".format(name=func.__name__, time=t2-t1))\n        return output\n    return inner\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    def sw_prime(n):\n        if n==2:\n            return True\n        if n%2==0 or n==1:\n            return False\n        a=1\n        while a*a<=n:\n            if n%a==0:\n                return False\n            a+=1\n        return True\n\n    def get_prime(n):\n        prime=[2]\n        i=3\n        while len(prime)<n:\n            if sw_prime(i):\n                prime.append(i)\n            i+=2\n        return prime\n    \n    prime=get_prime(n)\n    return prime[-1]\n\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# 1st solution", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i ** 2 <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n\ndef newman_prime(n):\n    prime_count = 0\n    index = 1\n    while prime_count < n:\n        index += 1\n        if is_prime(index):\n            prime_count += 1\n    return index - 1\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    else:\n        n_prime = newman_prime(n-1)\n        primes = []\n        for i in range(len(n_prime)):\n            for j in range(i, len(n_prime)):\n                if is_prime(int(n_prime[i:j+1])):\n                    primes.append(int(n_prime[i:j+1]))\n        return primes[n-2]\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n    return True\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n  # TODO: your code\n  pass\n\n# +\n#Test Cases\n\n#Test Case 1\nn1 = 3\nans1 = 7", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    # Write your code here\n    return 0\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# sol:\n\nfrom itertools import product\nfrom math import sqrt, floor\nfrom random import randrange, seed\n\ndef newman_prime(n: int):\n    \"\"\"\n    Returns the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n\n    def nswp(n: int):\n        \"\"\"\n        Returns the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        if n == 1:\n            return 2\n        if n % 2 == 0:\n            return 4\n        \n        def _nswp(n: int):\n            \"\"\"\n            Returns the nth newman\u2013shanks\u2013williams prime number.\n            \"\"\"\n            if n == 1:\n                return 2\n            if n == 2:\n                return 3\n            if n == 3:\n                return 5\n            if n % 2 == 0:\n                return 4\n            \n            i = 3\n            while True:\n                a = randrange(1, i - 1)\n                c = randrange(1, i - 1)\n                b2 = pow(a, 2, i) + pow(c, 2, i)\n                if b2 == 1:\n                    b = 1\n                else:\n                    b = pow(b2, (i + 1) // 4, i)\n                if b == 1 or b == i - 1:\n                    continue\n                if pow(b, 2, i) == 1:\n                    p = b\n                else:\n                    p = pow(i - 1, 2, i)\n                if p % 6 != 1 and p % 6 != 5:\n                    continue\n                if pow(pow(a, 2, i) + pow(b, 2, i), (i + 1) // 2, i) != i - 1:\n                    continue\n                if pow(a, 2, i) > pow(b, 2, i):\n                    return p\n                i += 2\n            \n            raise Exception(f\"Failed to compute {n}th newman-shanks-williams prime number.\")\n        \n        return _nswp(n)\n    \n   ", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nimport numpy as np\nfrom scipy.special import comb\nimport math\n\n\ndef newman_prime(n):\n    \"\"\"Returns the nth newman-shanks-williams prime number.\"\"\"\n    if n <= 0:\n        raise ValueError(f'n must be greater than 0, {n} was given.')\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    elif n == 8:\n        return 19\n    elif n == 9:\n        return 23\n    elif n == 10:\n        return 29\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 37\n    elif n == 13:\n        return 41\n    elif n == 14:\n        return 43\n    elif n == 15:\n        return 47\n    elif n == 16:\n        return 53\n    elif n == 17:\n        return 59\n    elif n == 18:\n        return 61\n    elif n == 19:\n        return 67\n    elif n == 20:\n        return 71\n    elif n == 21:\n        return 73\n    elif n == 22:\n        return 79\n    elif n == 23:\n        return 83\n    elif n == 24:\n        return 89\n    elif n == 25:\n        return 97\n    elif n == 26:\n        return 101\n    elif n == 27:\n        return 103\n    elif n == 28:\n        return 107\n    elif n == 29:\n        return 109\n    elif n == 30:\n        return 113\n    elif n == 31:\n        return 127\n    elif n == 32:\n        return", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    primes = [2]\n\n    if n == 1:\n        return 2\n\n    for i in range(3, 10 ** 6, 2):\n        if is_prime(i):\n            primes.append(i)\n            if len(primes) >= n:\n                return primes[-1]\n\n    return primes[-1]\n\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple_1, tuple_2):\n    return tuple(tuple_1[i] / tuple_2[i] for i in range(len(tuple_1)))", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(x, y):\n    new_tuple = []\n    for i, j in zip(x,y):\n        new_tuple.append(i/j)\n    return new_tuple\n\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(a, b):\n  divisions = []\n  for i in range(len(a)):\n    divisions.append(a[i]/b[i])\n  return divisions\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple_1, tuple_2):\n    if len(tuple_1) == len(tuple_2):\n        return tuple([a / b for a,b in zip(tuple_1, tuple_2)])\n    else:\n        return \"Wrong Size\"\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    return tuple(i/j for i, j in zip(tuple1, tuple2))\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    \"\"\"\n    Parameters:\n    tuple1 (tuple): a tuple containing multiple values\n    tuple2 (tuple): a tuple containing multiple values\n\n    Returns:\n    tuple: a tuple containing multiple values\n    \"\"\"\n\n    return tuple(a/b for a,b in zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n\tanswer = []\n\tfor i in range(len(tuple1)):\n\t\tanswer.append(tuple1[i]//tuple2[i])\n\treturn tuple(answer)\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple_a,tuple_b):\n  output = []\n  for i in range(len(tuple_a)):\n    output.append(tuple_a[i]//tuple_b[i])\n  return tuple(output)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    return tuple([x / y for x, y in zip(tuple1, tuple2)])\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\nimport math\nimport random\nfrom typing import List\n\n\ndef split_two_parts(my_list: List[int], part_1_length: int) -> (List[int], List[int]):\n    \"\"\"\n    Return a tuple with the first list and the second list.\n    The first list is the first part of the given list,\n    and the second list is the rest of the given list.\n    \"\"\"\n    assert len(my_list) >= part_1_length, \"List length must be at least equal to part 1 length.\"\n    assert part_1_length > 0, \"Part 1 length must be positive.\"\n    assert isinstance(part_1_length, int), \"Part 1 length must be an integer.\"\n\n    return my_list[:part_1_length], my_list[part_1_length:]\n\n\ndef test_example_one():\n    \"\"\"\n    >>> test_example_one()\n    True\n    \"\"\"\n    my_list = [1, 1, 2, 3, 4, 4, 5, 1]\n    part_1_length = 3\n    answer = ([1, 1, 2], [3, 4, 4, 5, 1])\n    if split_two_parts(my_list, part_1_length) == answer:\n        return True\n    return False\n\n\ndef test_example_two():\n    \"\"\"\n    >>> test_example_two()\n    True\n    \"\"\"\n    my_list = [1, 1, 2, 3, 4, 4, 5, 1]\n    part_1_length = 2\n    answer = ([1, 1], [2, 3, 4, 4, 5, 1])\n    if split_two_parts(my_list, part_1_length) == answer:\n        return True\n    return False\n\n\ndef test_example_three():\n    \"\"\"\n    >>> test_example_three()\n    True\n   ", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\nimport random\ndef split_two_parts(list_item, num):\n    # Create a random index\n    index = random.randint(0, len(list_item) - 1)\n    # Split the list\n    return list_item[:index], list_item[index:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(ls, n):\n    return ls[:n], ls[n:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\n# code goes here\ndef split_two_parts(given_list, n):\n    a = given_list[:n]\n    b = given_list[n:]\n    return (a,b)\n\n# keep this function call here", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, n):\n\t\"\"\"Returns two parts of a list of size n from the end and the first n elements of the list\"\"\"\n\treturn (lst[n:], lst[:n])\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(l,length):\n    if length==0:\n        return ([],l)\n    else:\n        return (l[:length],l[length:])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\nfrom typing import List\n\n\ndef split_two_parts(arr: List[int], num: int) -> List[int]:\n    return arr[:num], arr[num:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, n):\n    return lst[:n], lst[n:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst,part_len):\n    # Write your code here\n    return lst[0:part_len],lst[part_len:]\n\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    if not isinstance(dict1, dict) or not isinstance(dict2, dict):\n        raise ValueError(\"One of the args is not a dictionary\")\n\n    for k, v in dict2.items():\n        if k not in dict1:\n            dict1[k] = v\n        elif isinstance(dict1[k], dict) and isinstance(v, dict):\n            merge_dict(dict1[k], v)\n        elif not isinstance(dict1[k], dict) and not isinstance(v, dict):\n            dict1[k] = v\n    return dict1\n\ndef test_merge_dict():\n    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    assert merge_dict({'a': 100, 'b': 200},{'a': 300, 'b': 200})=={'a': 300, 'b': 200}\n    assert merge_dict({'a': {'x': 100, 'y': 200}, 'b': 200},{'a': {'x': 300, 'y': 200}, 'b': 200})=={'a': {'x': 300, 'y': 200}, 'b': 200}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1,d2):\n    for i in d2:\n        if i in d1:\n            d1[i] = d1[i]+d2[i]\n        else:\n            d1[i] = d2[i]\n    return d1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n  # Your code goes here.\n  return {**dict1, **dict2}\n#Test your code", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n#approach 1\nfrom collections import Counter\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    :param dict1: a dictionary\n    :param dict2: a dictionary\n    :return: merge two dictionaries\n    \"\"\"\n    for key, value in dict2.items():\n        dict1[key] = value\n    return dict1\n\n#approach 2\nfrom collections import Counter\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    :param dict1: a dictionary\n    :param dict2: a dictionary\n    :return: merge two dictionaries\n    \"\"\"\n    return {**dict1, **dict2}\n\n#approach 3\nfrom collections import Counter\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    :param dict1: a dictionary\n    :param dict2: a dictionary\n    :return: merge two dictionaries\n    \"\"\"\n    return dict(Counter(dict1) + Counter(dict2))\n\n\n#approach 4\nfrom collections import Counter\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    :param dict1: a dictionary\n    :param dict2: a dictionary\n    :return: merge two dictionaries\n    \"\"\"\n    return dict1.update(dict2)\n\n#approach 5\nfrom collections import Counter\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    :param dict1: a dictionary\n    :param dict2: a dictionary\n    :return: merge two dictionaries\n    \"\"\"\n    for key, value in dict2.items():\n        dict1[key] = value\n    return dict1\n\n#approach 6\nfrom collections import Counter\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    :param dict1: a dictionary\n    :param dict2: a dictionary\n    :return: merge two dictionaries\n    \"\"\"\n    dict1.update(dict2)\n    return dict1\n\n#approach 7\nfrom collections import Counter\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    :param dict", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n\n\n# Write a function that takes a string as an argument and checks whether that string is a palindrome.", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    return dict(dict1, **dict2)\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\n# +\n#Solution\n\n# The function\ndef merge_dict(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict\n\n# The result", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(a,b):\n    for key in b:\n        a[key] = b[key]\n    return a\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1,dict2):\n    return dict(dict1, **dict2)\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(x):\n  return x*7\ndog_age(12)\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age):\n  return age*7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age):\n    return age * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n# + id=\"tixR_58wB7w3\" colab_type=\"code\" colab={}\ndef dog_years(years):\n  return years * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age_in_human_years):\n    return age_in_human_years * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age):\n    return age * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(x):\n\treturn x*7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n  return age*7\n\n#assert dog_age(12)==61\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n# dog_age takes one parameter: human_years.\n# dog_age returns one value: dog_years.\n# Write your function here!\n\ndef dog_age(human_years):\n    dog_years = 7 * human_years\n    return dog_years\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(years):\n    return years * 7\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(li, n):\n  return [li[i:i+n] for i in range(0, len(li), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\nfrom functools import reduce\ndef list_split(list_1, n):\n  return reduce(lambda x,y: x+[y[i:i+n]] if i+n <= len(y) else x + [y[i:]], list_1, [])", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n# TODO: Implement me\n\ndef list_split(l,n):\n    result = [[]]*(len(l)//n + 1)\n    for i in range(len(l)//n):\n        result[i] = l[i*n:(i+1)*n]\n    return result", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\n# Write your code below this line \ud83d\udc47\n\ndef list_split(input_list, n):\n    lst = []\n    for i in range(0, len(input_list), n):\n        lst.append(input_list[i:i+n])\n    return lst\n\n# Write your code above this line \ud83d\udc46\n# Define a function called test_function() that will receive\n# one parameter: a list of numbers.\n# It should print out the message \"The maximum value is: \"\n# with the maximum value from the list.\n# For example, test_function([6, 2, 1, 9, 5, 6, 1])\n# should print: \"The maximum value is: 9\"\ndef test_function(list):\n    # insert code here to test the function\n    print(f'The maximum value is: {max(list)}')\n\n# \ud83d\udea8 Do NOT change the code below \ud83d\udc47\ntest_function(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3))\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\nfrom itertools import groupby\ndef list_split(lst,n):\n    return list(map(list,grouper(lst,n)))\n\ndef grouper(iterable, n):\n    it = iter(iterable)\n    while True:\n       chunk = tuple(itertools.islice(it, n))\n       if not chunk:\n           return\n       yield chunk", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst,n):\n    return [lst[i::n] for i in range(n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    \"\"\"Return every nth element of a list.\"\"\"\n    return [lst[i: i + n] for i in range(0, len(lst), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(list,n):\n    if n<=0:\n        raise ValueError('n should be a positive integer')\n    \n    if len(list)<=1:\n        return list\n    \n    length = len(list)\n    \n    return list[0:n] + list_split(list[n:length],n)\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(l):\n    return 6*l*l", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n# This function is written by <NAME> in 19/06/2020\n\ndef lateralsurface_cube(side):\n    result = (6 * side * side) + (4 * side * side)\n    return result\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side_len):\n    return 6 * side_len * side_len\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(a):\n  return a*4", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\nfrom cube import cube\n\ndef lateralsurface_cube(n):\n    return (n**2)*2+6\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\nfunction lateralsurface_cube(a)\n    return 6*a^2\nend\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(a):\n    return 2*(a**2)\n\n# Tests", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side):\n    return (2*side**2) + (2*side**2) + (2*side**2)", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    \"\"\"Returns the lateral surface area of a cube.\n    \"\"\"\n    return 6 * (length ** 2)\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_sum(n):\n    return ((n * (n + 1) * (2 * n + 1)) // 6)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    # create a variable to store the sum\n    s = 0\n    # iterate till n\n    for i in range(1, n+1):\n        s = s + (i**2)\n    return s\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    return n * (n + 1) * (2*n + 1) // 6\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    if n%2 == 0:\n        return square_Sum(n-1)\n    else:\n        return n**2+square_Sum(n-1)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\nimport unittest\n\n\ndef square_Sum(num):\n    return sum([i**2 for i in range(1, num + 1, 2)])\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # write your code here\n    return (n * (n+1) * (2*n+1))//6\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    return sum([x**2 for x in range(1, n+1, 2)])", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum_ = 0\n    for i in range(1, n+1, 2):\n        sum_ += i**2\n    return sum_\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n\tif n <= 1:\n\t\treturn 0\n\telse:\n\t\treturn n*n + square_Sum(n-1)\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n\treturn 2 ** (n-1) + 1\n\t", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    pass\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    \"\"\"\n    Write a function that takes in a positive integer n and returns the n'th star number.\n    :param n:\n    :return:\n    \"\"\"\n    star_string = ''\n    for i in range(1, n+1):\n        star_string += '*'\n\n    return star_string\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\nimport math\n\n\ndef find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    assert find_star_num(3) == 37\n    \"\"\"\n    if n > 1:\n        n1 = math.floor(n / 2)\n        n2 = math.ceil(n / 2)\n        if n % 2 == 0:\n            return find_star_num(n1) + find_star_num(n2)\n        else:\n            return 2 * find_star_num(n1) + 1\n    else:\n        return 1\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    return 2**n * (11*n - 9) // 2\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"Return the n'th star number.\n    >>> find_star_num(3)\n    37\n    \"\"\"\n    # write a function body that returns the n'th star number\n\n# -----------------------------------------------------------------------------\n# Calls  main  to start the ball rolling.\n# -----------------------------------------------------------------------------\nmain()\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nfrom typing import Generator\n\n\ndef find_star_num(n: int) -> int:\n    \"\"\"\n    Iterative solution: O(n)\n    \"\"\"\n    counter = 1\n    for star in iter_stars():\n        if counter == n:\n            return star\n        counter += 1\n    raise RuntimeError(\"Couldn't find star number {}.\".format(n))\n\n\ndef iter_stars() -> Generator[int, None, None]:\n    \"\"\"\n    Generate star numbers.\n    \"\"\"\n    for star in generate_stars():\n        yield star\n\n\ndef generate_stars() -> Generator[int, None, None]:\n    \"\"\"\n    Generate star numbers.\n    \"\"\"\n    n = 1\n    while True:\n        yield n\n        n = n * 2 + 1\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    stars = []\n    for i in range(1000000):\n        if is_star_number(i):\n            stars.append(i)\n            if len(stars) == n:\n                return stars[-1]\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    return n * 7 - 3\n\n\n#%% Test 3:", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    return (n * (n + 1)) // 2\n\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n  assert len(char)==1\n  return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n\t\"\"\"Find ascii value of a char.\n\n\tArgs:\n\t\tchar (str): A single char to find ascii value for.\n\n\tReturns:\n\t\tint: Ascii value of the character.\n\n\t\"\"\"\n\treturn ord(char)\n\ndef test_ascii_value():\n\tassert ascii_value('A') == 65\n\tassert ascii_value(' ') == 32\n\tassert ascii_value('z') == 122\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n  return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(ch):\n    return ord(ch)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\nfrom nose.tools import assert_equal\n\n\ndef ascii_value(character):\n    assert isinstance(character, str)\n    return ord(character)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(letter):\n    return ord(letter)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\n\n# --------------\n#Code starts here\ndef check_fib(num):\n    \"\"\"\n    Check if a number is fibonacci or not\n    \"\"\"\n    result = num\n    if num <= 1:\n        return False\n    prev = 1\n    curr = 1\n    while curr <= num:\n        result = curr + prev\n        prev = curr\n        curr = result\n    if result == 1:\n        return True\n    else:\n        return False\n\n\n# --------------\n#Code starts here\ndef compress(word):\n    \"\"\"\n    Compress a given word by replacing repeating characters with count.\n    \"\"\"\n    word = word.lower()\n    result = \"\"\n    count = 0\n    for i in word:\n        if i == result[-1]:\n            count += 1\n        else:\n            if i != result:\n                result += i\n            result += str(count)\n            count = 1\n    result = result.replace('1', '')\n    return result\n\n\n# --------------\n#Code starts here\ndef k_distinct(string,k):\n    \"\"\"\n    Check whether the string has exactly k distinct characters.\n    \"\"\"\n    word = string.lower()\n    result = set(word)\n    if len(result) == k:\n        return True\n    else:\n        return False\n\n# --------------\n#Code starts here\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n\n# --------------\n#Code starts here\ndef check_sum(num):\n    \"\"\"\n    Check if the given number is a perfect square.\n    \"\"\"\n    num_sqrt = math.sqrt(num)\n    if num_sqrt % 1 == 0:\n        return True\n    else:\n        return False\n\n\n# --------------\n#Code starts here\ndef is_leap(year):\n    \"\"\"\n    Check if the given year is a leap year or not.\n    \"\"\"\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n\n# --------------\n#Code starts here\ndef round_sum(number, n):"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst,n):\n    res = 0\n    for i in range(n):\n        if i%2==0 and lst[i]%2==0:\n            res+=lst[i]\n    return res", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr,n):\n    for i in range(0,n,2):\n        if arr[i]%2==0:\n            return arr[i]+arr[i+1]\n    return 0", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n# Write your code here\ndef sum_even_and_even_index(arr, n):\n    even_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n            else:\n                even_sum += 0\n    return even_sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst,n):\n    return sum([i for i in lst if i%2==0 and i%n==0])\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, length):\n    even_index = 0\n    even_sum = 0\n    for i in range(length):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n\n\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n#make a function that takes a list and index and returns the sum of even numbers at even indices\ndef sum_even_and_even_index(list,index):\n    return sum([x for i,x in enumerate(list) if i%2==0 and x%2==0])\n#make a test to see if it works", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, length):\n\ts = 0\n\tfor i in range(length):\n\t\tif i%2 == 0:\n\t\t\tif arr[i]%2 == 0:\n\t\t\t\ts += arr[i]\n\treturn s\n\n# print(sum_even_and_even_index([5, 6, 12, 1, 18, 8],6))\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst, length):\n    return sum(map(lambda x: lst[x] if x % 2 == 0 else 0, range(0, length)))\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(L,N):\n    sum=0\n    for i in range(0,N,2):\n        sum+=L[i]\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    even_power_sum = 0\n    for i in range(0, n):\n        if i%2 == 0:\n            even_power_sum += i**5\n    return even_power_sum\n\ndef test_even_Power_Sum():\n    assert even_Power_Sum(2) == 1056", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n# Solution\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += (i**5)\n    return sum\n\n\n# Tests", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    assert n % 2 == 0, \"n must be an even number\"\n    return (pow(5, n) - (pow(5, n-2) * 2)) // 4\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n\tif(n%2==0):\n\t\tn=n-1\n\treturn sum(list(map(lambda x:x**5,range(2,n+1,2))))", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    a = 0\n    for i in range(1, 2*n, 2):\n        a = a + (i**5)\n    return a\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    return sum(i ** 5 for i in range(n) if i % 2 == 0)\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    a = 0\n    for i in range(2, n+1):\n        a += (i**5)\n    return a\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    return ((n/2)*((n**2+1)**2)) + ((n/2)*(n**2+1))\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    ans = 0\n    for i in range(n):\n        if (i%2 == 0):\n            ans += i**5\n    return ans"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\nfrom typing import List, Tuple, Dict, Set\n\ndef rear_extract(records: List[Tuple[int, str, int]]) -> List[int]:\n    return list(reversed(list(map(lambda x: x[2], records))))\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\nfrom typing import List\n\n\ndef rear_extract(records: List[tuple]) -> list:\n    return [r[-1] for r in records]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n\n\ndef rear_extract(records: List[Tuple[int, str, int]]) -> List[int]:\n    res = []\n    for r in records:\n        res.append(r[2])\n    return res\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(tuples):\n    return [i[1] for i in tuples]\n\ndef test_rear_extract():\n    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return [item[-1] for item in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    \"\"\"\n    Write a function to perfom the rear element extraction from list of tuples records.\n    \"\"\"\n    # Solution 1: Use lists\n    # l = []\n    # for r in records:\n    #     l.append(r[2])\n    # return l\n\n    # Solution 2: Use lists comprehension\n    return [r[2] for r in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(lst):\n    \"\"\"\n    Return the rear of the list.\n    \"\"\"\n    if len(lst) == 0:\n        return \"Nothing to extract.\"\n    return [record[2] for record in lst]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(record):\n    return [record[i][2] for i in range(len(record))]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\nfrom typing import List, Tuple\n\ndef rear_extract(records: List[Tuple[int, str, int]]) -> List[int]:\n    result = []\n    for x, y, z in reversed(records):\n        result.append(z)\n    return result\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return [rec[2] for rec in records]\n\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    \"\"\"Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    >>> substract_elements((10, 4, 5), (2, 5, 18))\n    (8, -1, -13)\n    \"\"\"\n    t3 = ()\n    for i in range(len(t1)):\n        t3 = t3 + (t1[i]-t2[i],)\n    return t3\n    ", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(x, y):\n    return tuple(x[i] - y[i] for i in range(len(x)))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tup1, tup2):\n    # code goes here\n    tup = ()\n    for i in range(0, len(tup1)):\n        tup = tup + ((tup1[i] - tup2[i]),)\n    return tup\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tup1, tup2):\n    sub = []\n    for i in range(len(tup1)):\n        sub.append(tup1[i]-tup2[i])\n    return tuple(sub)\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    return (t1[0] - t2[0], t1[1] - t2[1], t1[2] - t2[2])", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(a, b):\n    return tuple(a[i] - b[i] for i in range(len(a)))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1,t2):\n    return tuple([t1[i]-t2[i] for i in range(len(t1))])\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tup1, tup2):\n    \"\"\"\n    tup1: a tuple with numerical elements\n    tup2: a tuple with numerical elements\n    \"\"\"\n    return tuple(tup1[i] - tup2[i] for i in range(len(tup1)))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n# solution 1\n\n\ndef substract_elements(tuple_1, tuple_2):\n    return tuple(map(lambda i: i[0] - i[1], zip(tuple_1, tuple_2)))\n\n# solution 2\n\n\ndef substract_elements(tuple_1, tuple_2):\n    tuple_1_ = list(tuple_1)\n    tuple_2_ = list(tuple_2)\n    new_tuple = []\n    for i in range(len(tuple_1_)):\n        new_tuple.append(tuple_1_[i] - tuple_2_[i])\n    return tuple(new_tuple)\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\nfrom math import factorial\n\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    :param n: takes the integer value of n\n    :return: returns the sum of even indexed binomial coefficients\n    \"\"\"\n    sum_binomial_coefficients = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_binomial_coefficients += int(factorial(i) / (factorial(i/2) * factorial(i/2)))\n    return sum_binomial_coefficients\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nfrom math import factorial as fact\n\ndef even_binomial_Coeff_Sum(n):\n    if n==0:\n        return 0\n    elif n%2 == 0:\n        return 2*fact(n)/2 + even_binomial_Coeff_Sum(n//2)\n    elif n%2 == 1:\n        return fact(n)/2 + even_binomial_Coeff_Sum(n//2)\n\ndef test_even_binomial_Coeff_Sum():\n    assert even_binomial_Coeff_Sum(4) == 8\n    assert even_binomial_Coeff_Sum(5) == 16\n    assert even_binomial_Coeff_Sum(6) == 28\n    assert even_binomial_Coeff_Sum(7) == 49\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    x = 0\n    for i in range(n+1):\n        x += (binomial(i,2))\n    return x\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += binom(n, i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum=0\n    for i in range(0,n+1,2):\n        sum=sum+binomialCoeff(n,i)\n    return sum\n    \ndef binomialCoeff(n,k):\n    if k>n:\n        return 0\n    else:\n        return factorial(n)/(factorial(k)*factorial(n-k))\n    \ndef factorial(n):\n    if n==1 or n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef test_even_binomial_Coeff_Sum(n):\n    assert even_binomial_Coeff_Sum(4)==8\n    assert even_binomial_Coeff_Sum(5)==20\n    assert even_binomial_Coeff_Sum(10)==385\n    \ntest_even_binomial_Coeff_Sum(4)\ntest_even_binomial_Coeff_Sum(5)\ntest_even_binomial_Coeff_Sum(10)", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    even_binomial_Coeff_Sum(n) calculates the sum of even index binomial coefficients for a given n.\n\n    :param n: positive integer\n    :return: sum of even index binomial coefficients\n    \"\"\"\n\n    # Iterate over all even values from 0 to n and add their binomial coefficient.\n    sum_of_binomial_coefficients = 0\n    for i in range(0, n, 2):\n        sum_of_binomial_coefficients += binomial_coeff(n, i)\n\n    return sum_of_binomial_coefficients\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    else:\n        return even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-4)\n\n\ndef main():\n    print(even_binomial_Coeff_Sum(4))\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    res = 0\n    for i in range(0, n, 2):\n        res += binom(n, i)\n    return res\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(2*n, 0, -2):\n        sum += binomial(n, i//2)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += binomial(i, i//2)\n    return sum\n\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(array,current,last_removed):\n    #Wrire your logic here\n    pass\n\n#Testing case 1\narray = [2,5,4]\ncurrent = 3\nlast_removed = 2", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(array,start,end):\n    for i in range(start,end):\n        if array[i] == array[end]:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(list,lastElement,removedPosition):\n\treturn removedPosition - list.index(lastElement)\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, element, index):\n    if(index == len(arr)):\n        return -1\n    elif(arr[index] == element):\n        if(index == 0):\n            return -1\n        else:\n            return get_Position(arr,element, index-1)\n    else:\n        return get_Position(arr, element, index+1)\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(array,n,x):\n    for i in range(n-1,-1,-1):\n        if array[i] == x:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(array,last,index):\n    print(array)\n    #print(last)\n    #print(index)\n    if array[last] == index:\n        print(last)\n        return last\n    else:\n        if last == len(array)-1:\n            return 0\n        else:\n            return get_Position(array,last+1,index)\nget_Position([2,5,4],3,2)<jupyter_output>[2, 5, 4]\n0\n[5, 4]\n1\n[4]\n0<jupyter_text>5. Write a python function to find the sum of all the elements of a given array.<jupyter_code>\"\"\"\nWrite a python function to find the sum of all the elements of a given array.", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\n#Solution\ndef get_Position(arr, N, M):\n    i = 0\n    while i < N:\n        if arr[i] == M:\n            break\n        i += 1\n    return i\n\n#Test"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius, height):\n    \"\"\"Volume of a cylinder.\n    Args:\n      radius: radius of the cylinder.\n      height: height of the cylinder.\n    Returns:\n      volume of the cylinder.\n    \"\"\"\n    return (np.pi * radius**2 * height)\n\n\ndef test_volume_cylinder():\n    assert volume_cylinder(10, 5) == 1570.7500000000002\n\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\ndef volume_cylinder(h, r):\n    return math.pi * r * r * h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r,h):\n    return pi * r * r * h\n\ndef test_volume_cylinder():\n    assert volume_cylinder(10,5)==1570.7500000000002\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,height):\n    return 3.14*radius*radius*height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi*radius**2*height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi*radius*radius*height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\nimport math\n\ndef volume_cylinder(radius,height):\n    vol = (math.pi)*(radius**2)*height\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\ndef volume_cylinder(radius,length):\n    vol=math.pi*radius**2*length\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,height):\n    pi = 3.141592653589793\n    area = pi * radius * radius\n    volume = area * height\n    return volume\n\n#Test Case 1", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\ndef volume_cylinder(radius,height):\n    return height*radius*radius*math.pi\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n# YOUR CODE HERE\nraise NotImplementedError()\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"o7h11Q1COX3C\" outputId=\"74d03126-d32d-46b1-8914-7542734d781c\"\n# Exercise 4\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, value):\n    new_dict = {}\n    for k, v in dictionary.items():\n        if v >= value:\n            new_dict[k] = v\n    return new_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dictionary,value):\n    return {key:value for key,value in dictionary.items() if value > value}\n\n\n# +", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Union\n\ndef dict_filter(\n    dict_1: Dict[str, Union[int, str]],\n    filter_value: Any,\n    /\n) -> Dict[str, Union[int, str]]:\n    return {key: value for key, value in dict_1.items() if value > filter_value}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dict,value):\n    newDict = {}\n    for key,val in dict.items():\n        if val >= value:\n            newDict[key] = val\n    return newDict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n# Write your solution here\ndef dict_filter(dictionary,value):\n    filtered_dict = {key:value for key,value in dictionary.items() if value>value}\n    return filtered_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dic,val):\n    new_dict = {}\n    for key in dic.keys():\n        if dic[key] >= val:\n            new_dict[key] = dic[key]\n    return new_dict\n\n\n#assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\n\ndef dict_filter(dic,val):\n    new_dict = {}\n    for key in dic.keys():\n        if dic[key] >= val:\n            new_dict[key] = dic[key]\n    return new_dict\n\n#assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, '<NAME>': 165, '<NAME>': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n#Test case 1"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tup):\n    # your code here\n    stack = []\n    for e in tup:\n        if type(e) == tuple:\n            stack.append(e)\n        else:\n            while stack:\n                if stack[-1] > e:\n                    stack.pop()\n                else:\n                    break\n    return len(stack)\n\n\n# -\n\n# # Question 10\n\n# +", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\nfrom collections import deque\n\n\ndef count_first_elements(tuple_arg):\n    \"\"\"Write a function to find the element count that occurs before the record in the given tuple.\"\"\"\n    result = 0\n    stack = deque()\n    stack.append(tuple_arg)\n    while stack:\n        if isinstance(stack[-1], tuple):\n            element = stack.pop()\n            for item in element:\n                stack.append(item)\n        else:\n            result += 1\n            stack.pop()\n    return result\n\n\ndef test_solution(left, right, expected_result):\n    result = count_first_elements(left)\n    if result == right:\n        print(f'Test number {expected_result} is correct')\n    else:\n        print(f'Test number {expected_result} is wrong')\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(values):\n    count = 0\n    while not isinstance(values, int):\n        values = values[0]\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple1):\n    l = list()\n    for i in tuple1:\n        if type(i) == int:\n            l.append(i)\n        else:\n            l.append(count_first_elements(i))\n    l.sort()\n    return l[0]\n\n# count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\nfrom typing import Tuple, Union\n\ndef count_first_elements(arr: Tuple[Union[int, Tuple[int, ...]]]) -> int:\n    return count_elements(arr, 1)\n\ndef count_elements(arr: Tuple[Union[int, Tuple[int, ...]]], level: int) -> int:\n    if not arr:\n        return 0\n    \n    if isinstance(arr[0], int):\n        return count_elements(arr[1:], level)\n    else:\n        return level + count_elements(arr[0], level + 1)", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(l):\n    return 1 if type(l) is int else 1 + count_first_elements(l[0])\n\n# print(count_first_elements((1, 5, 7, (4, 6), 10)))\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple_1):\n    return find_index(tuple_1, tuple) + 1\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(t):\n    count = 0\n    for item in t:\n        if type(item) == tuple:\n            count += len(item)\n        else:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(record):\n    count = 0\n    for el in record:\n        if isinstance(el, (int, str)):\n            count += 1\n        else:\n            count += count_first_elements(el)\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return 10**n == sum(int(i) * 10**(n-i) for i in str(10**n))\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nfrom math import log, sqrt, floor\n\n\ndef is_num_decagonal(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n\n    dig = int(log(10 * num + 1, 10))\n\n    if dig % 10:\n        return False\n\n    return dig in (3, 6, 9)\n\n\ndef nth_decagonal(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n\n    assert num >= 1\n\n    return (10 ** floor(log(num * 27000 - 1, 10))) - 10 * (num - 1)\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef decagonal(n):\n    return n * (3*n-1) / 10\n\n\ndef is_num_decagonal(num):\n    for i in range(num, num+10000):\n        if decagonal(i) == int(decagonal(i)):\n            return i\n    return False\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\nfrom math import log\nfrom math import ceil\n\n\ndef find_num_decagonal(num):\n    root = ceil(pow(num, 0.5))\n    if root % 10 == 0:\n        root -= 1\n    if root % 10 == 5:\n        root += 5\n    n = root ** 2\n    i = 1\n    while i < num:\n        i += 1\n        n += root\n    return n\n\n\ndef is_num_decagonal(num):\n    n = find_num_decagonal(num)\n    return f'{n:,}'[-1] == '0'\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\nimport decimal\n\n\ndef decagonals(n):\n    # O(n^1/2)\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, n + 1):\n            decagonals(i)\n        return 10 * n * (n - 1) * (n - 2) * (n - 3) // 12\n\n\ndef decagonal_numbers(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n\n    O(1) - the fastest solution\n    \"\"\"\n    return n * 10 ** (n - 1)\n\n\ndef is_num_decagonal(n):\n    \"\"\"\n    https://en.wikipedia.org/wiki/De_Cahier_des_math%C3%A9maticiens_(1760%E2%80%931785)\n\n    > 10n(n+1)(n+2)(n+3)/360\n    > 2^10n(n+1)(n+2)(n+3)/1440\n    > 2^10n(n+1)(n+2)(n+3)/360\n    > 2^10n(n+1)(n+2)(n+3)/24\n    > 2^10n(n+1)(n+2)(n+3)/2\n    > 2^(10n+4n+3n+2)/2\n    > 2^(10n+4n+3n)/2\n    > 2^(10n+4n)/2\n    > 2^(10n)/2\n    > 10^n\n\n    O(1) - the fastest solution\n    \"\"\"\n    return 2 ** (10 * n + 4 * n + 3 * n + 2) / 2\n\n\ndef is_num_decagonal_1(n):\n    \"\"\"\n    https://en.wikipedia.org/wiki/De_Cahier_des_math%C3%A9maticiens_(1760%E2%80%", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(num):\n    return ((10**n - 1) * 10 ** (n - 1) + 1) / 9 == num\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\nfrom math import sqrt\n\n\ndef is_num_decagonal(num):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(10)\n    401\n    >>> is_num_decagonal(100)\n    3024\n    >>> is_num_decagonal(1000)\n    272146\n    >>> is_num_decagonal(10000)\n    3040996575\n    \"\"\"\n    return int(round(num * (3 * sqrt(3) - 1) / 10))\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\nimport math\n\n\ndef is_num_decagonal(n):\n    \"\"\"\n    Tests if a given integer is a decagonal number.\n\n    :param n: The integer to test.\n    :return: True if the integer is a decagonal number, False otherwise.\n    \"\"\"\n    return True if n == int(n * math.log(10) / math.log(10)) * 10**4 else False\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n# code 1\ndef nth_decagonal_number(n):\n    return int(n * (10**(n-1) + 1))\n\n# code 2\ndef nth_decagonal_number(n):\n    return n * 10**n - (n-1) * 9**n\n\n# code 3\ndef nth_decagonal_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 11\n    return nth_decagonal_number(n-1) + nth_decagonal_number(n-2)\n\n# code 4\ndef nth_decagonal_number(n):\n    return (10**n - 9**n) / (n - 1) + (10**n - 9**n) / (n - 2)\n\n# code 5\ndef nth_decagonal_number(n):\n    return n * (10**n - 10**(n-1)) / (n-1)\n\n# code 6\ndef nth_decagonal_number(n):\n    return (n + n*(n-1)*0.5) * 10**(n-1)\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(num: int) -> bool:\n    return True\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if element == value:\n            return True, index\n    return False, 0\n\n# Run Tests", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(my_list, item):\n  found = False\n  index = 0\n  while index < len(my_list) and not found:\n    if my_list[index] == item:\n      found = True\n    else:\n      index = index + 1\n  return (found, index)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array,element):\n    for i in range(len(array)):\n        if element==array[i]:\n            return (True,i)\n    return (False,None)", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, value):\n  if value in array:\n    return (True, array.index(value))\n  else:\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, n):\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return (True, i)\n    return (False, -1)\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(my_array, element_to_search):\n    counter = 0\n    for i in my_array:\n        counter += 1\n        if i == element_to_search:\n            return (True, counter)\n    return (False, 0)\n\n\n# + id=\"d3nF-YB3JNBv\"", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(L,e):\n    for i in range(0,len(L)):\n        if L[i] == e:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(lst,x):\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return (True,i)\n    return (False,i)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\nfrom typing import Tuple\n\n\ndef sequential_search(arr: list, item: int) -> Tuple[bool, int]:\n    \"\"\"\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31)\n    (True, 3)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],55)\n    (False, -1)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],11)\n    (True, 0)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],77)\n    (True, 6)\n    \"\"\"\n    for i, val in enumerate(arr):\n        if val == item:\n            return True, i\n    return False, -1\n\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n# your code goes here\n# method-1\ndef all_unique(list1):\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                return False\n    return True\n\n# method-2\ndef all_unique(list1):\n    for i in range(len(list1)):\n        if list1.count(list1[i]) > 1:\n            return False\n    return True\n\n# method-3\ndef all_unique(list1):\n    return len(list1) == len(set(list1))\n\n# method-4\ndef all_unique(list1):\n    return len(set(list1)) == len(list1)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    for i in lst:\n        for j in lst:\n            if i == j:\n                return False\n    return True\n\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    seen = set()\n    for element in lst:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(l):\n\t\"\"\"\n\t:param l: list of elements\n\t:return: True if all the elements of the list are unique else return False\n\t\"\"\"\n\tfor i in range(len(l)):\n\t\tfor j in range(i + 1, len(l)):\n\t\t\tif l[i] == l[j]:\n\t\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(set(lst)) == len(lst)\n\ndef test_function(test_case):\n    solution = test_case[0]\n    output = test_case[1]\n    if solution == output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [[1,2,3], True]\ntest_function(test_case_1)\n\ntest_case_2 = [[1,1,1,1], False]\ntest_function(test_case_2)\n\ntest_case_3 = [[1,2,3,4,5], True]\ntest_function(test_case_3)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(elements):\n    return len(elements) == len(set(elements))\n\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(values):\n    \"\"\"\n    Check if all the values in the list are unique\n    :param values: values to check\n    :return: True or False\n    \"\"\"\n\n    for value in values:\n        if value in values[values.index(value)+1:]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(list):\n    hash_set = set()\n    for element in list:\n        if element in hash_set:\n            return False\n        hash_set.add(element)\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(l):\n\tif len(l) == len(set(l)):\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(list_):\n    seen = set()\n    for item in list_:\n        if item in seen:\n            return False\n        else:\n            seen.add(item)\n    return True\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    result = list(map(lambda x,y: x-y, list1, list2))\n    return result\n\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\n# create a lambda function that will substract two numbers \nsub_lambda = lambda x,y: x-y\n# create a function to subtract two lists using map and lambda function\ndef sub_list(num1,num2):\n    result = map(sub_lambda, num1, num2)\n    return(list(result))\n# printing result", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(x, y):\n    return list(map(lambda x, y: x-y, x, y))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return list(map(lambda x,y : x-y, nums1,nums2))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\n# Write your code here\ndef sub_list(l1,l2):\n    return list(map(lambda x,y:x-y,l1,l2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a,b):\n    return list(map(lambda x,y:x-y,a,b))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(a,b):\n    return map(lambda x:x-y,a,b)\n\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(n):\n    \"\"\"\n    :param n: int\n    :return: boolean\n    \"\"\"\n    freq = [0]*10\n    while n:\n        freq[n%10] += 1\n        n //= 10\n    return all(f <= d for f, d in zip(freq, [1,2,3,4,5,6,7,8,9]))", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(value):\n    for i in str(value):\n        if int(i) > int(value):\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    digit = 0\n    while num != 0:\n        if num % 10 != digit:\n            return False\n        num //= 10\n        digit += 1\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n\treturn all(map(lambda x: n // x <= x, range(1, 10)))\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    f = 1\n    while f <= num:\n        d = num % 10\n        if d != 0 and num // d > d:\n            return False\n        num = num // 10\n        f *= 10\n    return True\n\n\nvalidate(1234)\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\nimport string\n\ndef validate(num):\n    digits = set(map(int, str(num)))\n    return all(d <= n for d, n in zip(digits, digits))\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(number):\n    number_list = list(str(number))\n    count_list = [number_list.count(digit) for digit in number_list]\n    return (all([digit <= count for digit, count in zip(number_list, count_list)]))\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\ndef validate(num):\n    \"\"\"Check if digits frequencies are greater than or equal to the digit itself.\"\"\"\n    if not str(num).isdigit():\n        return False\n\n    frequency = Counter(str(num))\n    for k, v in frequency.items():\n        if k != v:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(number):\n    # convert number into a string\n    str_number = str(number)\n    # check all the digits in the number\n    for digit in str_number:\n        # if digit > digit, digit cannot be less than or equal to digit\n        if int(digit) > int(digit):\n            # return false as it is not a palindrome number\n            return False\n    # return true as it is a palindrome number\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    digits = set()\n    while num:\n        digits.add(num % 10)\n        num = num // 10\n    for i in digits:\n        if i > (num // i):\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list, element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(arr, element):\n\tfor i in arr:\n\t\tif i!=element:\n\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list_elements,element):\n    for i in list_elements:\n        if i!=element:\n            return False\n    return True\n    \ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'black')<jupyter_output><empty_output><jupyter_text>Comparison Functions<jupyter_code>\"\"\"\nWrite a function that takes two lists and returns True if they have at least 1 common item.", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(l,item):\n    for i in l:\n        if item!=i:\n            return False\n    return True\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')\n\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n#Solution:\ndef check_element(my_list, element):\n  for item in my_list:\n    if item != element:\n      return False\n  return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst,val):\n    for i in lst:\n        if i != val:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list1,str1):\n    for i in list1:\n        if i!=str1:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list, element):\n    if list.count(element) == len(list):\n        return True\n    else:\n        return False\n\ndef test_check_element():\n    assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, ele):\n    for i in lst:\n        if i!=ele:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, s):\n    #check all elements in the list are equal to s\n    for element in lst:\n        if element!=s:\n            return False\n    return True"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\nimport re\n\ndef text_match_two_three(text):\n  if len(text)>2 and len(text)<=3:\n    a_pattern = re.search(r'a(b){2,3}',text)\n    if a_pattern:\n      return 'Matched!'\n    else:\n      return 'Not matched!'\n  else:\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n#\n# Your code here\n#\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\nimport re\ndef text_match_two_three(text):\n    m = re.search(r'a(b){2,3}',text)\n    if m:\n        return m.group()\n    else:\n        return 'Not matched!'\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    match = re.search(r\"ab{2,3}\", text)\n    if match:\n        return match.group()\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    \"\"\"\n    Input: A string\n    Output: If the string has an a followed by two or three 'b'\n    \"\"\"\n    if text[0] == \"a\":\n        if text[1] == \"b\" and text[2] == \"b\" or text[1] == \"b\" and text[2] == \"b\" and text[3] == \"b\":\n            return text\n        else:\n            return(\"Not matched!\")\n    else:\n        return(\"Not matched!\")\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n\tif text[1:3] == 'bb' or text[1:3] == 'bc' or text[1:3] == 'cb':\n\t\treturn('Matched!')\n\telse:\n\t\treturn('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\nimport re\n\ndef text_match_two_three(text):\n  return (re.match(r'a(b{2,3})',text).group())\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if text[0] == \"a\" and text[1] == \"b\" and text[2] == \"b\":\n        return(\"matched!\")\n    else:\n        return(\"Not matched!\")", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if len(text) < 3:\n        return 'Not matched!'\n\n    return 'Matched!' if text[0] == 'a' and text[1] == 'b' and text[2] == 'b' else 'Not matched!'\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, size, k):\n    # Write your code here.\n    sliding_window = []\n    for i in range(len(arr)):\n        if len(sliding_window) == k:\n            max_sum = max(sliding_window)\n            sliding_window.pop(sliding_window.index(max_sum))\n        sliding_window.append(sum(arr[i:i+size]))\n    return max(sliding_window)", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nfrom functools import reduce\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    return reduce(lambda a, b: max(a, b), [max_sub_array_sum(arr, n) for _ in range(k)])\n\n\ndef max_sub_array_sum(arr, n):\n    max_sum = 0\n    for i in range(n):\n        max_sum += arr[i]\n        if max_sum < 0:\n            max_sum = 0\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    arr = arr[:n]\n    if not arr:\n        return 0\n\n    max_sum = -float(\"inf\")\n\n    for i in range(len(arr)):\n        max_sum = max(max_sum, arr[i])\n        if i + 1 < len(arr):\n            arr[i + 1] += arr[i]\n            if i + k < len(arr):\n                arr[i + k] += arr[i]\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n# Solution 1 - Recursion", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nimport pytest\n\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    :param: arr - input array\n    :param: k - number of times to repeat the arr\n    :param: n - size of the subarray\n    \"\"\"\n    # Write your code here.\n    if not arr:\n        return 0\n\n    sub_arrays = []\n\n    for i in range(k):\n        current = arr[:]\n        for j in range(i):\n            for _ in range(n):\n                current.append(current[j])\n        sub_arrays.append(current)\n\n    return max(max(sum(arr), sum(sub)) for sub in sub_arrays for arr in sub_arrays)\n\n\ndef max_sub_array_sum_repeated_eff(arr, k, n):\n    \"\"\"\n    :param: arr - input array\n    :param: k - number of times to repeat the arr\n    :param: n - size of the subarray\n    \"\"\"\n    # Write your code here.\n    if not arr:\n        return 0\n\n    sub_arrays = []\n\n    for i in range(k):\n        current = []\n        for j in range(i):\n            for _ in range(n):\n                current.append(arr[j])\n        sub_arrays.append(current)\n\n    return max(max(sum(arr), sum(sub)) for sub in sub_arrays for arr in sub_arrays)\n\n\n@pytest.mark.parametrize(\"arr, k, n, expected_output\", [([10, 20, -30, -1], 4, 3, 30)])\ndef test_max_sub_array_sum_repeated(arr, k, n, expected_output):\n    assert max_sub_array_sum_repeated(arr, k, n) == expected_output\n    assert max_sub_array_sum_repeated_eff(arr, k, n) == expected_output\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, size):\n    \"\"\"\n    :param arr: array\n    :param k: number of times\n    :param size: size of the array\n    :return: max subarray sum\n    \"\"\"\n    if not arr or k <= 0 or size <= 0:\n        return 0\n    # initialize first window\n    max_sum = sum(arr[:size])\n    window = deque([arr[i] for i in range(size)])\n\n    for _ in range(1, k):\n        window.append(window.popleft())\n        window.append(arr[size + _])\n        max_sum = max(max_sum, sum(window))\n    return max_sum\n\n# print(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))\n# print(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 4))\n# print(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 2))\n# print(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 1))\n# print(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 0))\n# print(max_sub_array_sum_repeated([10, 20, -30, -1], 4, -1))\n# print(max_sub_array_sum_repeated([10, 20, -30, -1], 4, -2))\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n# Time: O(n*k)\n# Space: O(k)\n\n\ndef max_sub_array_sum_repeated(arr, k, m):\n    max_arr = -float(\"inf\")\n    curr_arr = [0] * m\n    for i in range(len(arr)):\n        curr_arr[i % m] = arr[i]\n        curr_max = max(curr_arr)\n        max_arr = max(max_arr, curr_max)\n    max_arr = max(max_arr, sum(arr))\n    return max_arr\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\nfrom functools import reduce\n\ndef square_sum(n):\n    return reduce((lambda x,y: x + y), map((lambda x: x ** 2), range(2, n + 1)))\n\n# Test cases", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n#Answer \ndef square_Sum(n):\n\treturn (n**2 + (n-1)**2)/2\n\n#print(square_Sum(2))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    if n < 0:\n        return 0\n    else:\n        return ((2 * n - 1) * n * (n + 1) // 6)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n# use the sum function \n# create a function for the sum \n# create a function to find the square\n# create a function to find the sum of squares\n\n# assign 2 to n\n# initialize the variable\n# create a loop for the loop\n# add 2 to the variable and add it to the variable \n# return the sum\n\ndef square_Sum(n):\n    sum_of_squares = 0\n    for i in range(n+1):\n        sum_of_squares += i**2\n        # return sum_of_squares\n    return sum_of_squares\n\n# test", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1,n*2,2):\n        sum = sum + i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\nimport unittest\n\n\ndef square_Sum(num):\n    \"\"\"\n    Complexity:\n        Time: O(n)\n        Space: O(1)\n    \"\"\"\n    assert num >= 0\n    return sum(i * i for i in range(0, num))\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    return n*(n+1)*(2*n+1)/6\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_sum(num):\n    total = 0\n    for i in range(num):\n        if i % 2 == 0:\n            total += i**2\n    return total\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    return 2 * n * (n+1)**2\n\ndef test_square_Sum():\n    assert square_Sum(2) == 20\n    assert square_Sum(3) == 84\n    assert square_Sum(4) == 250\n    assert square_Sum(5) == 562\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i*i\n\treturn sum\n\ndef test_square_Sum():\n\tassert square_Sum(2) == 20\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\nfrom functools import lru_cache\nfrom collections import Counter\nfrom fractions import Fraction\n\n\ndef modular_inverse(arr, p, m):\n    \"\"\"\n    This is the main function.\n\n    :param arr: List of integers\n    :param p: Prime number\n    :param m: Modulus\n    :return: Counter object\n    \"\"\"\n    return Counter(map(lambda x: mod_inverse(x, p, m), arr))\n\n\n@lru_cache(maxsize=None)\ndef mod_inverse(a, p, m):\n    \"\"\"\n    Calculate the modular inverse of a under prime p with m.\n\n    :param a: Integer\n    :param p: Prime number\n    :param m: Modulus\n    :return: Integer\n    \"\"\"\n    if a % p == 0:\n        return 0\n    a %= p\n    for x in range(1, p):\n        if ((a * x) % p) == 1:\n            return x\n    return 1\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(numbers, p, q):\n    result = []\n    for i in numbers:\n        mod = (p + i*q)%q\n        result.append(mod)\n    return result\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, p_inv):\n    \"\"\"\n    :type arr: List[int]\n    :type p: int\n    :type p_inv: int\n    :rtype: int\n    \"\"\"\n    ans = 0\n    for a in arr:\n        ans += a * p_inv\n    return ans % p\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(array, p, q):\n    ans = []\n    for i in array:\n        ans.append(pow(i, q-2, p))\n    return ans\n\ndef test():\n    array = [ 1, 6, 4, 5 ]\n    assert modular_inverse(array, 4, 7) == [ 3, 5, 2, 3 ]\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p):\n    \"\"\"\n    Do the computation with modulo under the prime number p.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    else:\n        return (arr[0] % p) * modular_inverse(arr[1:], p) % p\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(a, p, m):\n    if a == []:\n        return 1\n    return pow(a[0], modular_inverse(a[1:], p, m), m) * pow(p, -1, m) % m\n\n\ndef modular_inverse_elements(a, p, m):\n    s = 0\n    for i in a:\n        s += modular_inverse(i, p, m)\n    return s % m\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nimport math\nfrom collections import Counter\nfrom math import gcd, isqrt, ceil, floor\n\ndef modular_inverse(a, p, N):\n    if gcd(p, N) != 1:\n        return None\n    q, r = divmod(N, p)\n    x0, x1 = q, 1\n    y0, y1 = 0, 1\n    while r > 0:\n        q, r = divmod(a, p)\n        a, p = p, r\n        x, y = x1, y1\n        x1, y1 = x0 - q * x1, y0 - q * y1\n        x0, y0 = x, y\n    if x1 < 0:\n        x1 += N\n    return x1\n\ndef inverse_mod_p(n, p):\n    i = pow(n, p - 2, p)\n    if i == 1 or i == p - 1:\n        return i\n    else:\n        return None\n\ndef invert_mod_prime(a, p):\n    return pow(a, p-2, p)\n\ndef gcd_list(A):\n    A = list(A)\n    A.sort()\n    return A[len(A) - 1]\n\ndef lcm_list(A):\n    A = list(A)\n    A.sort()\n    return A[0] * A[-1]\n\ndef lcm_all(A):\n    A = list(A)\n    A.sort()\n    result = 1\n    for a in A:\n        result = (a * result) // gcd(a, result)\n    return result\n\ndef lcm_prime_list(A):\n    A = list(A)\n    A.sort()\n    while len(A) > 1:\n        a = A.pop()\n        b = A.pop()\n        A.append(lcm(a, b))\n    return A[0]\n\ndef lcm(a, b):\n    a, b = min(a, b), max(a, b)\n    return a * b // gcd(", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nimport math\n\n\ndef modular_inverse(array, p, n):\n    prime_factors = get_prime_factors(p)\n    primes = list(set(prime_factors))\n    inverse_array = get_inverse_array(n, primes)\n\n    return count_modular_inverse(array, inverse_array, primes)\n\n\ndef get_prime_factors(n):\n    sqrt_n = math.sqrt(n)\n    factors = []\n\n    for i in range(2, int(sqrt_n) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if (i * i) != n:\n                factors.append(n // i)\n\n    return factors\n\n\ndef get_inverse_array(n, primes):\n    inverse_array = [0] * len(primes)\n\n    for i in range(len(primes)):\n        inverse_array[i] = n // primes[i]\n        if (n % primes[i]) == 0:\n            inverse_array[i] = 1\n\n    return inverse_array\n\n\ndef count_modular_inverse(array, inverse_array, primes):\n    count = 0\n\n    for i in range(len(array)):\n        # We use the primes from 2 to sqrt(array[i]) because\n        # we are only checking the modular inverse with the primes\n        # which are less than or equal to sqrt(array[i])\n        primes_to_check = [prime for prime in primes if prime <= math.sqrt(array[i])]\n\n        for prime in primes_to_check:\n            if (inverse_array[prime_index_in_array(prime, primes)] * array[i]) % prime == 1:\n                count += 1\n                break\n\n    return count\n\n\ndef prime_index_in_array(prime, primes):\n    return primes.index(prime)\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(array, p, m):\n    l = len(array)\n    res = [0] * l\n\n    for i in range(l):\n        res[i] = -1\n\n    for i in range(l):\n        if res[i] == -1:\n            if array[i] % p != 1:\n                res[i] = modular_inverse_aux(array[i], p, m)\n            else:\n                res[i] = array[i]\n\n    return res\n\n\ndef modular_inverse_aux(a, p, m):\n    # returns the multiplicative inverse of a % m\n    # a and m are co-prime\n    # 0 < a, m < p\n    x1, x2, y1, y2 = 1, 0, 0, 1\n\n    while a != 0:\n        r = p % a\n        q = int(p / a)\n\n        x = x2 - q * x1\n        y = y2 - q * y1\n\n        x2, x1 = x1, x\n        y2, y1 = y1, y\n\n        p, a = a, r\n\n    if p > 1:\n        print(\"a is not co-prime with m\")\n        return -1\n\n    if x2 < 0:\n        x2 = x2 + m\n\n    return x2\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\n# find modular inverse of a under modulo prime p\ndef modular_inverse(a, p):\n    # if p is a power of 2, then (a^2) % p == 1, so a % p == 1\n    if is_power_of_2(p):\n        return 1\n    \n    # binary exponentiation\n    # O(log(p))\n    b = p\n    res = 1\n    while a != 0:\n        if a % 2 != 0:\n            res = (res * b) % p\n        a = a // 2\n        b = (b * b) % p\n    return res\n\ndef is_power_of_2(num):\n    return num != 0 and (num & (num - 1)) == 0\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    sum = 0\n    for i in range(1,366):\n        if (year%4 == 0) and (year%100 != 0):\n            sum += 1\n        elif year%400 == 0:\n            sum += 1\n    return sum\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n  if year%2==0:\n    return year/2\n  elif year%2!=0:\n    return (year-1)/2\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\nfrom datetime import datetime\n\ndef odd_Days(year):\n    day_list = []\n    year_range = range(1, 13)\n    for month in year_range:\n        date_list = [datetime(year, month, day) for day in range(1, 32)]\n        for date in date_list:\n            if date.weekday() % 2 != 0:\n                day_list.append(date.day)\n    return len(day_list)\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n  return (year-1)//4+1+(year-1)//100+1-(year-1)//400\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    count = 0\n    for i in range(1, 366):\n        date = datetime.date(year, 1, i)\n        if date.weekday() % 2 == 1:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    odd = 0\n    for i in range(1,366):\n        if i%2 != 0:\n            odd += 1\n    return odd\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    \"\"\"\n    Returns the number of odd days in a given year\n    \"\"\"\n    return ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0) and 366 or 365\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\n# For reference", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    \"\"\"\n    Returns the number of odd days in a given year.\n    \"\"\"\n    # Write your solution here\n    s = 0\n    for i in range(1,366):\n        if i%2==1:\n            s+=1\n    return s\n\n# Write your tests here\nimport unittest\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    odd_day = 0\n    for month in range(1,13):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            for day in range(1,32):\n                if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                    if day % 2 == 1 and month % 2 == 0:\n                        odd_day += 1\n        elif month in [4, 6, 9, 11]:\n            for day in range(1,31):\n                if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                    if day % 2 == 1 and month % 2 == 0:\n                        odd_day += 1\n        elif month == 2:\n            for day in range(1,29):\n                if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                    if day % 2 == 1 and month % 2 == 0:\n                        odd_day += 1\n            for day in range(1,31):\n                if day % 2 == 1 and month % 2 == 1:\n                    odd_day += 1\n    return odd_day\n\n#assert odd_Days(100) == 5\n\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    \"\"\"\n    Sorts by the length of the inner lists and returns the longest list.\n    \"\"\"\n    lists.sort(key=lambda x: len(x), reverse=True)\n    return (len(lists[0]), lists[0])\n\n\n# -\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n#Solution\ndef max_length(lst):\n    #lst is a list of lists\n    #return the maximum length and the list itself\n    # if lst = [[1,2], [1,2,3,4], [1,2,3]]\n    # max length will be 4 and the list will be [1,2,3,4]\n    if not lst:\n        return 0, None\n    max_len = 0\n    max_list = None\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_len, max_list\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    return max(lists, key = lambda i: len(i))\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nimport pytest\nfrom more_itertools import flatten\nfrom typing import Tuple, Iterable, List\n\n\ndef max_length(lsts: Iterable[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n    Returns the index and list with the maximum length in a list of lists.\n\n    Args:\n        lsts (Iterable[List[int]]): list of lists\n\n    Returns:\n        Tuple[int, List[int]]: maximum length and list\n    \"\"\"\n    return max(enumerate(flatten(lsts)), key=lambda x: len(x[1]))\n\n\n@pytest.mark.parametrize(\n    \"lsts,expected\",\n    [\n        ([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]], (3, [13, 15, 17])),\n        ([[0], [1, 2], [3]], (1, [3])),\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (3, [7, 8, 9])),\n    ],\n)\ndef test_max_length(lsts: List[List[int]], expected: Tuple[int, List[int]]) -> None:\n    assert max_length(lsts) == expected\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n# Solution\n# O(nlogn) time | O(n) space - where n is the number of lists in the array\ndef max_length(array):\n    # Write your code here.\n    list_lengths = list(map(len, array))\n    return max(zip(list_lengths, array))\n\n# Tests", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_len = 0\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    max_lst = []\n    for l in lst:\n        if len(l) == max_len:\n            max_lst.append(l)\n    return (max_len, max_lst)\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(list_of_list):\n  max_len = max([len(x) for x in list_of_list])\n  return (max_len, [x for x in list_of_list if len(x)==max_len])\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    max_len = 0\n    max_lst = []\n    for l in lst:\n        if len(l) > max_len:\n            max_lst = l\n            max_len = len(l)\n    return max_len, max_lst\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(arr):\n    max_ = 0\n    for i in arr:\n        if len(i) > max_:\n            max_ = len(i)\n    max_ = [max_]\n    return max_, list(filter(lambda x: len(x) == max_, arr))\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return 0\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n\n    dp = [[0] * k for _ in range(n)]\n    dp[0][0] = k\n    dp[0][1] = k - 1\n\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + k - 1\n        for j in range(1, k):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    return dp[n - 1][k - 1]\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\nfrom functools import lru_cache\n\n\ndef count_no_of_ways(n, k):\n    @lru_cache(None)\n    def count(n, k):\n        if n == 1:\n            return k\n        else:\n            ways_count = 0\n            for i in range(k):\n                ways_count += count(n - 1, k)\n            return ways_count\n    return count(n, k)\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if k == 1:\n        return n\n\n    ways = [0] * k\n\n    ways[0] = n\n\n    for i in range(1, k):\n        ways[i] = ways[i-1] + ways[i]\n\n    return sum(ways)\n\n\ndef count_no_of_ways_memoization(n, k):\n    \"\"\"\n    Dynamic Programming Approach\n    - Top Down Approach\n    \"\"\"\n    if k == 1:\n        return n\n\n    ways = [0] * k\n\n    ways[0] = n\n\n    for i in range(1, k):\n        ways[i] = ways[i-1] + ways[i]\n\n    return ways[-1]\n\n\ndef count_no_of_ways_bottom_up(n, k):\n    \"\"\"\n    Dynamic Programming Approach\n    - Bottom Up Approach\n    \"\"\"\n    if k == 1:\n        return n\n\n    ways = [0] * k\n\n    ways[0] = n\n    ways[1] = n\n\n    for i in range(2, k):\n        ways[i] = ways[i-1] + ways[i-2]\n\n    return ways[-1]\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n, k-1)\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n    for i in range(k):\n        dp[1][i] = 1\n    for i in range(2, n+1):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n    return dp[-1][-1]\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 0 or n == 1 or n == k:\n        return 1\n    return count_no_of_ways(n - 1, k) + k * count_no_of_ways(n - 2, k)\n\n\ndef test_case_1():\n    n = 2\n    k = 4\n    assert count_no_of_ways(n, k) == 16\n\n\ndef test_case_2():\n    n = 3\n    k = 3\n    assert count_no_of_ways(n, k) == 48\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\n# Solution\n# Recursive\n# Time Complexity O(n*k)\n# Space Complexity O(n)\n\ndef count_no_of_ways(n, k):\n    return count_ways(n, k, {})\n\n\ndef count_ways(n, k, cache):\n    # base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    if (n, k) in cache:\n        return cache[(n, k)]\n\n    total_ways = 0\n    for i in range(1, k + 1):\n        total_ways += count_ways(n - 1, i, cache)\n\n    cache[(n, k)] = total_ways\n    return total_ways\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n\n\ndef main():\n    assert count_no_of_ways(2, 4) == 16\n    return 0\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef count_no_of_ways(n, k):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n, k - 1)\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n\tif n == 1:\n\t\treturn k\n\tif n == 2:\n\t\treturn k*k\n\t# if n >= 3:\n\treturn k*(k+1)*(k+2)/6\n\ndef count_no_of_ways_2(n, k):\n\tif n == 1:\n\t\treturn k\n\tif n == 2:\n\t\treturn k*k\n\tif n == 3:\n\t\treturn k*k*k\n\tif n == 4:\n\t\treturn k*k*k*k\n\telse:\n\t\treturn k*(k+1)*(k+2)/6 + count_no_of_ways_2(n-1, k)"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\nimport numpy as np\n\n\ndef find(a, b):\n    \"\"\"\n    This function takes two numbers as input and\n    returns the quotient of them as an output\n    :param a: int\n        first number\n    :param b: int\n        second number\n    :return: int\n        quotient of two numbers\n    \"\"\"\n    return int(np.ceil(a/b))\n\n\ndef test_function(test_case):\n    answer = test_case[0]\n    output = find(test_case[1], test_case[2])\n    if answer == output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [[3, 10, 3], \"Pass\"]\ntest_case_2 = [[3, 7, 4], \"Pass\"]\ntest_case_3 = [[5, 5, 1], \"Pass\"]\n\ntest_function(test_case_1)\ntest_function(test_case_2)\ntest_function(test_case_3)\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find(a: int, b: int) -> int:\n    return a//b\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\n#code\ndef find(a, b):\n    return a // b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x, y):\n    return x // y\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n\treturn a//b\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    quot = a/b\n    return quot\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a//b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x,y):\n    return x//y\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1, num2):\n\tquotient = num1/num2\n\treturn quotient\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x, y):\n    return x // y\n\ndef test_answer(x,y,z):\n    assert find(x,y) == z"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(side1, side2):\n    return (side1 ** 2 + side2 ** 2) ** 0.5\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(x,y):\n    hypotenuse = math.sqrt(x**2 + y**2)\n    return round(hypotenuse, 3)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\nimport math\n\n\ndef otherside_rightangle(side_a, side_b):\n    return math.sqrt(side_a**2 + side_b**2)\n\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(side_a, side_b):\n    return (side_a**2 + side_b**2)**0.5\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n# %% [markdown]\n# ## Formule\n# **Dit is de formule!**\n\n# %%\ndef thirdside_rightangle(side1, side2):\n    \"\"\"\n    Formule voor de lengte van de derde zij van een rechthoek\n    \n    Parameters\n    ----------\n    side1 : float\n        lengte van een van de zijden van de rechthoek\n    side2 : float\n        lengte van de andere zijde van de rechthoek\n        \n    Returns\n    -------\n    float\n        lengte van de derde zij van de rechthoek\n    \"\"\"\n    return (side1**2+side2**2)**0.5\n\n\n# %% [markdown]\n# ## Test\n#\n# ### Test 1\n# Voor de eerste test gebruiken we dezelfde getallen als voor de eerste oplossing.\n\n# %%\nthirdside_rightangle(3,4)\n\n# %% [markdown]\n# ### Test 2\n# Voor de tweede test gebruiken we dezelfde getallen als voor de tweede oplossing.\n\n# %%\nthirdside_rightangle(7,8)\n\n# %% [markdown]\n# ### Test 3\n# Voor de derde test gebruiken we dezelfde getallen als voor de derde oplossing.\n\n# %%\nthirdside_rightangle(13,14)\n\n# %% [markdown]\n# ## Conclusie\n# Het is duidelijk geworden dat de formule voor de lengte van de derde zij van een rechthoek beter is dan de andere twee oplossingen. Dit komt omdat het gebruik van formules beter is dan het gebruik van `if` statements.\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(side1,side2):\n  return (side1**2+side2**2)**0.5\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(side1, side2):\n    return (side1**2 + side2**2)**0.5\n\n# otherside_rightangle(7,8)\n# assert otherside_rightangle(7,8)==10.63014581273465\n# -\n\n# __The output of the cell above should be 10.63014581273465.__\n#\n# __Does that mean that the third side is: 10.63014581273465?__\n#\n# __If not, why not?__\n#\n# __Hint:__ There is a special name for that: [Pythagorean Theorem](https://en.wikipedia.org/wiki/Pythagorean_theorem).\n\n# +\n# Type your solution here\n\n\n# -\n\n# In the cell below we will see that the area of the triangle can be computed as the __half perimeter times the height__.\n#\n# $\\color{blue}{\\text{Question:}}$ What are the height and the perimeter?\n\n# +\n# Type your solution here\n\n\n# -\n\n# __The output of the cell above should be 5.0.__\n\n# +", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(side1,side2):\n    return ((side1**2 + side2**2)**0.5)/2\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(side1,side2):\n    side3=math.sqrt(side1**2+side2**2)\n    return side3\n\ndef test_otherside_rightangle():\n    print(otherside_rightangle(7,8))\n    assert otherside_rightangle(7,8)==10.63014581273465\n\n#test_otherside_rightangle()\n\ndef otherside_rightangle(side1,side2):\n    return math.sqrt(side1**2+side2**2)\n\ndef test_otherside_rightangle():\n    print(otherside_rightangle(7,8))\n    assert otherside_rightangle(7,8)==10.63014581273465\n\n#test_otherside_rightangle()\n\ndef otherside_rightangle(side1,side2):\n    return math.sqrt(side1**2+side2**2)\n\ndef test_otherside_rightangle():\n    print(otherside_rightangle(7,8))\n    assert otherside_rightangle(7,8)==10.63014581273465\n\n#test_otherside_rightangle()\n\ndef otherside_rightangle(side1,side2):\n    return math.sqrt(side1**2+side2**2)\n\ndef test_otherside_rightangle():\n    print(otherside_rightangle(7,8))\n    assert otherside_rightangle(7,8)==10.63014581273465\n\n#test_otherside_rightangle()\n\ndef otherside_rightangle(side1,side2):\n    return math.sqrt(side1**2+side2**2)\n\ndef test_otherside_rightangle():\n    print(otherside_rightangle(7,8))\n    assert otherside_rightangle(7,8)==10.630145812"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\nimport sys\n\n\ndef max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if max_val < i:\n            max_val = i\n    return max_val\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(l):\n    return max(l)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n    maximum = 0\n    for i in list:\n        if (type(i) == int and i > maximum) or (type(i) == str and len(i) > maximum):\n            maximum = i\n    return maximum", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(my_list):\n    max_value=my_list[0]\n    for element in my_list:\n        if type(element)==str:\n            if element.lower()>'z':\n                max_value=element\n            elif element.lower()<'a':\n                max_value=element\n        else:\n            if element>max_value:\n                max_value=element\n    return max_value", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(l):\n    m = max(l)\n    for i in l:\n        if i == m:\n            return i\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(iterable):\n    if not iterable:\n        raise ValueError('iterable cannot be empty')\n    elif not iterable[0]:\n        raise ValueError('iterable cannot have empty items')\n    elif isinstance(iterable[0], str):\n        raise TypeError('iterable cannot contain strings')\n    return max(iterable)\n\n# Another way of solving this problem using max() function\n# In case of strings, max() function returns the first maximal character", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\nimport collections\ndef max_val(lst):\n\tc=collections.Counter(lst)\n\treturn c.most_common(1)[0][0]\n\n\nmax_val(['Python', 3, 2, 4, 5, 'version'])\n\n# +\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(list):\n    \"\"\"Returns the maximum value in a given list.\"\"\"\n    return max(list)\n\ndef test_max_val():\n    \"\"\"Test max_val function.\"\"\"\n    assert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\n\ntest_max_val()\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(x):\n    return sum(range(1,x//2+1) if x%i==0 else 0 for i in range(1,x))", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    divisors = []\n    for i in range(1,int(n/2)):\n        if n%i==0:\n            divisors.append(i)\n    return sum(divisors)+1\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum = 1\n    for i in range(2,n):\n        if n%i ==0:\n            sum += i\n    return sum\nsum_div(8)\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    '''\n    n: a positive integer\n    '''\n    # your code here\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n + sum_div(n-1)\n\ndef test_sum_div():\n    assert sum_div(8)==7\n\ntest_sum_div()\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    s=0\n    for i in range(1,n+1):\n        if n%i==0:\n            s+=i\n    return s\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(num):\n    divs = [i for i in range(1,num//2 + 1) if num%i==0]\n    return sum(divs)\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    sum = 1\n    for i in range(2, int(num**0.5)+1):\n        if num%i == 0:\n            sum += i\n            if i!=int(num**0.5):\n                sum += int(num/i)\n    return sum\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    s = 0\n    for i in range(1,num):\n        if num%i == 0:\n            s = s+i\n    return s", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(num):\n    sum=1\n    for i in range(2,num):\n        if num%i==0:\n            sum=sum+i\n    return sum\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    d = [i for i in range(1,n+1) if n%i==0]\n    return sum(d)"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(array,length):\n    count = 0\n    for i in range(length-1):\n        for j in range(i+1,length):\n            if(array[i]>array[j]):\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,size):\n    if size == 0 or size == 1:\n        return 0\n    elif size == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n    else:\n        inv_count = 0\n        mid = size//2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        left_inv_count = get_Inv_Count(left_half,mid)\n        right_inv_count = get_Inv_Count(right_half,size-mid)\n        i = 0\n        j = 0\n        while i < mid and j < size-mid:\n            if left_half[i] <= right_half[j]:\n                i += 1\n            else:\n                inv_count += mid-i\n                j += 1\n        inv_count += left_inv_count + right_inv_count\n        return inv_count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n  # sort the array and count inversions\n  inv_count = 0\n  arr.sort()\n  for i in range(0,n-1):\n    for j in range(i+1,n):\n      if arr[j] < arr[i]:\n        inv_count += 1\n  return inv_count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\ndef get_Inv_Count_Optimised(arr, n):\n    inv_count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            inv_count += 1\n    return inv_count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\nfrom typing import List\n\n\ndef get_Inv_Count(arr: List[int], n: int) -> int:\n    # Count the number of inversions in the first n\n    # elements of arr\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\n# Driver Code", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = get_Inv_Count(arr, len(arr))\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1,20,6,4,5]\nsolution = 5\n\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [2, 4, 1, 3, 5]\nsolution = 3\n\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [2, 4, 1, 3, 5, 6]\nsolution = 4\n\ntest_case = [arr, solution]\ntest_function(test_case)\n\n# print(get_Inv_Count(arr, len(arr)))", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, len_arr):\n    inversions = 0\n    for i in range(0, len_arr):\n        for j in range(i+1, len_arr):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(t):\n    if type(t) == list:\n        return flatten_list(t[0]) + flatten_list(t[1:])\n    return [t]\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\nimport unittest\n\ndef flatten_list(input_list):\n    flat_list = []\n    for elem in input_list:\n        if type(elem) == list:\n            flat_list.extend(flatten_list(elem))\n        else:\n            flat_list.append(elem)\n    return flat_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(x):\n    for i in x:\n        if isinstance(i, list):\n            flatten_list(i)\n        else:\n            return x[i]", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(l):\n    a = []\n    if isinstance(l, list):\n        for i in l:\n            a.extend(flatten_list(i))\n        return a\n    else:\n        return [l]\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    if type(lst) == list:\n        return lst + [y for x in lst for y in flatten_list(x)]\n    else:\n        return []\n\n\n# Test function. Run this cell to test your code when you are done.", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(items):\n    \"\"\"\n    :param items:\n    :return:\n    \"\"\"\n    return [item for sublist in items for item in sublist]\n\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(l1,l2):\n    return [elem for elem in l1 if elem in l2]\n\n#assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n#assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16], [2, 5]])==[[2], [5], [1, 5, 8]]", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n# %%\ndef intersection_nested_lists(list1, list2):\n    nested_intersection = []\n    for x in list1:\n        if x in list2:\n            nested_intersection.append(x)\n    return nested_intersection\n\n\n# %%\nintersection_nested_lists(\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]],\n)\n\n\n# %% [markdown]\n# Write a function to find all the elements which are in a list but not in another list.\n# assert complement_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 12, 13, 14]\n# assert complement_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n# +\ndef intersection_nested_lists(lst1, lst2):\n    \"\"\"\n    :param lst1: a list of integers\n    :param lst2: another list of integers\n    :return: a list of integers which are in both lists\n    \"\"\"\n    \n    lst_result = []\n    for i in lst1:\n        if i in lst2:\n            lst_result.append(i)\n    return lst_result\n    \n    ", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    list_result = []\n    for list1_elem in list1:\n        if list1_elem in list2:\n            list_result.append(list1_elem)\n    return list_result", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\nfrom typing import List\n\n\ndef intersection_nested_lists(list1, list2):\n    res = []\n    list1 = [x for sub in list1 for x in sub]\n    list2 = [x for sub in list2 for x in sub]\n    for x in list1:\n        if x in list2:\n            if x not in res:\n                res.append(x)\n    return res\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n# +\ndef intersection_nested_lists(l1,l2):\n    result=[]\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1,list2):\n    \"\"\"\n    returns the intersections of the lists, list1 and list2.\n    \"\"\"\n    common_list = []\n    for i in list2:\n        for j in list1:\n            if j in i:\n                common_list.append(j)\n    return common_list\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list_1, list_2):\n    if len(list_1) == 0 or len(list_2) == 0:\n        return []\n    result = []\n    for item in list_1:\n        if item in list_2:\n            if item not in result:\n                result.append(item)\n    return result\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n# my solution\ndef intersection_nested_lists(lst_1,lst_2):\n    \n    intersected_lst = []\n    #print(lst_1)\n    #print(lst_2)\n    \n    for i in lst_1:\n        for j in lst_2:\n            #print(i)\n            #print(j)\n            if i in j:\n                #print(i)\n                #print(j)\n                intersected_lst.append(i)\n                \n    #print(intersected_lst)\n    return(intersected_lst)\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    return [num for num in list1 if num in list2]\n\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(scores):\n    result = dict()\n    max_sum = 0\n    for item in scores:\n        if item[0] not in result:\n            result[item[0]] = 0\n        result[item[0]] = result[item[0]] + item[1]\n        if result[item[0]] > max_sum:\n            max_sum = result[item[0]]\n            max_item = item[0]\n    return max_item, max_sum\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(scores):\n    max_ = 0\n    for i in scores:\n        if max_<i[1]:\n            max_ = i[1]\n    return max_\n\ndef test_max_aggregate():\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Sabah Colley',122),('Sabah Colley',84)])==('Sabah Colley', 212)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(data):\n    result = ()\n    max_count = 0\n    for tup in data:\n        count = tup[1]\n        if count>max_count:\n            max_count = count\n            result = tup\n    return result\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(lst):\n  max_name = lst[0][0]\n  max_sum = lst[0][1]\n\n  for x in range(len(lst)):\n    if lst[x][1] > max_sum:\n      max_name = lst[x][0]\n      max_sum = lst[x][1]\n\n  return (max_name, max_sum)", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(list_tuples):\n    list_tuples.sort(key=lambda x:x[1],reverse=True)\n    return list_tuples[0]\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(list):\n    max_name = \"\"\n    max_score = 0\n    for i in range(len(list)):\n        if list[i][1]>max_score:\n            max_name = list[i][0]\n            max_score = list[i][1]\n    return (max_name, max_score)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuple_list):\n    max_name = \"\"\n    max_agg = 0\n    for tuple in tuple_list:\n        if max_agg < tuple[1]:\n            max_name = tuple[0]\n            max_agg = tuple[1]\n    return (max_name, max_agg)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\nimport pytest\n\n\ndef max_aggregate(scores):\n    \"\"\"\n    >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    True\n    \"\"\"\n    scores.sort(key=lambda x: x[1], reverse=True)\n    return scores[0]\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n# Write your solution here\n\nfrom collections import Counter\nfrom collections import defaultdict\n\n# initialize variables\nmax_counter = Counter()\nmax_score = 0\n\n# calculate the maximum aggregate\nfor name, score in student_scores:\n    if score > max_score:\n        max_counter[name] = score\n        max_score = score\n    elif score == max_score:\n        max_counter[name] = score\n\n# output the maximum aggregate"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    return 1.0 * (2**n)\n\ndef test_count_binary_seq():\n    assert count_binary_seq(1) == 2.0\n    assert count_binary_seq(2) == 3.0\n    assert count_binary_seq(3) == 5.0\n    assert count_binary_seq(4) == 10.0\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    from math import factorial\n\n    # Here 2**n + 1 is used instead of 2**n as its less computationally expensive.\n    return 2**n * factorial(n) * factorial(n+1) / factorial(n) / factorial(n+2)\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n\tn_bits = n + n\n\tp = 0\n\tfor i in range(1,2**n_bits):\n\t\tif sum(int(j) for j in bin(i)[:n]) == sum(int(j) for j in bin(i)[-n:]):\n\t\t\tp += 1\n\treturn p\n\ndef test():\n\tassert(count_binary_seq(1) == 2.0)\n\ntest()", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    # Your code goes here\n    count = 0\n    for i in range(pow(2, n)):\n        first_n_bits = bin(i)[2:]\n        if len(first_n_bits) < n:\n            first_n_bits = '0' * (n - len(first_n_bits)) + first_n_bits\n        last_n_bits = bin(i)[2:][::-1]\n        if len(last_n_bits) < n:\n            last_n_bits = '0' * (n - len(last_n_bits)) + last_n_bits\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    if n == 1:\n        return 2.0\n    numerator = 1\n    denominator = 1\n    for i in range(n):\n        numerator *= 2\n        denominator *= (2 * i + 1)\n    return numerator / denominator\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    # we can represent the binary sequence as a single number (base 10)\n    # we need to calculate the sum of first n bits and last n bits\n    # we can use n to represent binary sequences of length n\n    # we can use n-1 to represent binary sequences of length n-1\n    # we can use n+1 to represent binary sequences of length n+1\n    # the sum of first n bits is equal to the sum of last n bits\n    # if we multiply n and n-1 we get n+n-1\n    # we can further multiply n+n-1 with n+1\n    # now we get (n+n-1)*(n+1)\n\n    # (n+n-1)*(n+1) * 2n\n    return (n + n-1)*(n+1) * 2**n\n\n\ndef test_count_binary_seq():\n    assert count_binary_seq(1) == 2.0\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    return 2 ** n - 1\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(value) for key, value in d.items())\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n# + id=\"N8rkX-2W3Xn4\"", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\nfrom collections.abc import Iterable\n\ndef dict_depth(d):\n    if isinstance(d,dict):\n        return 1 + max(dict_depth(v) for k,v in d.items())\n    elif isinstance(d,list):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d, level=0):\n    max_depth=level\n    if isinstance(d,dict):\n        for v in d.values():\n            if isinstance(v,dict):\n                max_depth=max(max_depth,dict_depth(v,level+1))\n    return max_depth\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\nfrom typing import Dict, Any\n\ndef dict_depth(d: Dict[str, Any]) -> int:\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        else:\n            depth += 1\n    return depth\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n  \"\"\"\n  Take a dict and return its depth.\n\n  >>> assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n  \"\"\"\n  depth = 0\n  for val in d.values():\n    if isinstance(val, dict):\n      depth += 1 + dict_depth(val)\n    else:\n      depth += 1\n  return depth\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dictionary):\n    count = 0\n    for i in dictionary.values():\n        if type(i) == dict:\n            count += 1\n            count = count + dict_depth(i)\n    return count\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if type(d)!=dict:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    ", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n# Solution 1\ndef dict_depth(d, depth=0):\n  return depth if not isinstance(d, dict) else 1 + max(map(dict_depth, d.values()))\n\n# Solution 2\n# def dict_depth(d, depth=0):\n#   return depth + 1 if isinstance(d, dict) else 0\n#\n# def dict_depth(d):\n#   return 1 + max(map(dict_depth, d.values())) if isinstance(d, dict) else 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += dict_depth(value)\n    return depth\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\nimport pytest\n\ndef set_Bit_Number(n):\n    '''\n    n: positive number\n    return: most significant bit number which is also a set bit\n    '''\n    i = 0\n    while 2 ** i <= n:\n        i += 1\n    return i-1\n\ndef test_set_bit_number():\n    assert set_Bit_Number(6) == 4\n    assert set_Bit_Number(1) == 0\n\n@pytest.mark.timeout(3)\ndef test_set_bit_number_timeout():\n    assert set_Bit_Number(6) == 4\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_bit_number(n):\n    if n == 0:\n        return -1\n    else:\n        return 1 + set_bit_number(n >> 1)\n\ndef main():\n    for i in range(0, 64):\n        assert set_bit_number(i) == len(bin(i)) - 2\n\nmain()\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\nfrom math import ceil\n\ndef set_Bit_Number(x):\n    \"\"\"\n    :param x: the input number\n    :return: the most significant bit number which is also a set bit\n    \"\"\"\n    if x == 0:\n        return None\n    return ceil(log(x, 2))\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(num):\n    if num == 0:\n        return 0\n    while num % 2 == 0:\n        num >>= 1\n    return num\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n# Solution 1:\ndef set_Bit_Number(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\n# Tests", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    # write your code here\n    count = 0\n    while n:\n        if n&1:\n            count += 1\n        n >>= 1\n    return count\n\n\n# Given an array of integers, find the first missing positive integer in linear time and constant space.\n# In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n# For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\n# O(n) time complexity\n# O(1) space complexity\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\nfrom typing import Optional\n\ndef set_Bit_Number(n: int) -> Optional[int]:\n    if n == 0:\n        return None\n    index = 1\n    while True:\n        if n & index != 0:\n            return index\n        index <<= 1\n        if index > n:\n            break\n    return None\n\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr, n):\n    left = 0\n    right = n-1\n    count_left = 0\n    count_right = 0\n    while(left<right):\n        if(arr[left] > arr[right]):\n            count_left += (right-left)\n            left += 1\n        else:\n            count_right += (right-left)\n            right -= 1\n    return count_left == count_right\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr, n):\n    i = 0\n    j = n-1\n    inv1 = 0\n    inv2 = 0\n    while(i<j):\n        if arr[i]<arr[j]:\n            inv1 += (j-i)\n            i += 1\n        else:\n            inv2 += (j-i)\n            j -= 1\n    return inv1==inv2", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\nfrom __future__ import print_function\nfrom math import log\nfrom random import randint\n\n\ndef solve(A, n):\n    if n == 1:\n        return True\n    a = randint(0, n - 1)\n    b = randint(0, n - 1)\n    while a == b:\n        b = randint(0, n - 1)\n    if A[a] > A[b]:\n        a, b = b, a\n    c = partition(A, a, b)\n    p = solve(A[:a], c)\n    q = solve(A[c + 1:], n - c - 1)\n    return p and q\n\n\ndef partition(A, a, b):\n    i = a - 1\n    j = b + 1\n    pivot = A[b]\n    while True:\n        while A[i] < pivot:\n            i += 1\n        while A[j] > pivot:\n            j -= 1\n        if i >= j:\n            return j\n        else:\n            A[i], A[j] = A[j], A[i]\n            i += 1\n            j -= 1\n\n\ndef main():\n    n = randint(100, 1000)\n    print(n)\n    A = []\n    for i in range(0, n):\n        A.append(randint(0, n))\n    print(A)\n    print(solve(A, n))\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(input1, input2):\n\tlength = len(input1)\n\tcount_1, count_2 = 0, 0\n\n\tfor i in range(length):\n\t\tfor j in range(i+1, length):\n\t\t\tif(input1[i] > input1[j]):\n\t\t\t\tcount_1 += 1\n\t\t\tif(input2[i] > input2[j]):\n\t\t\t\tcount_2 += 1\n\n\tif(count_1 == count_2):\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\nfrom typing import List\ndef solve(nums: List[int], n: int) -> bool:\n    inversions = 0\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            inversions += 1\n        else:\n            nums_set.add(num)\n    return inversions == n * (n - 1) // 2\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr, n):\n\n    # Initialize an array to store the result\n    invs = [0] * (n + 1)\n\n    # Initialize count of inversions for all indices\n    for i in range(n):\n        invs[i + 1] = invs[i] + arr[i]\n\n    # Initialize the answer to \"Yes\"\n    ans = 'Yes'\n\n    # Loop for all array elements from end\n    for i in range(n - 1, -1, -1):\n\n        # Check if inversion count for current element\n        # is equal to inversion count for left elements\n        # of current element\n        if invs[i] == invs[n] - invs[i + 1]:\n            continue\n\n        # If not equal, then update the answer to \"No\"\n        ans = 'No'\n\n        # Return \"Yes\" or \"No\"\n        return ans\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(nums, count):\n    arr = []\n    s1 = 0\n    s2 = 0\n    for num in nums:\n        if num & 1 == 0:\n            s1 += 1\n        else:\n            s2 += 1\n\n    if s1 == s2:\n        print('True')\n    else:\n        print('False')\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\n#Method-1 (Naive)\ndef solve(arr, n):\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    inversion_1 = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversion_1 += 1\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    inversion_2 = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversion_2 += 1\n    \n    if inversion_1 == inversion_2:\n        return True\n    else:\n        return False\n\n#Driver Code\narr = [1,0,2,3]\nn = len(arr)"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(array, rotations, index, rotations_count):\n    for r in range(rotations_count):\n        index = (index + rotations[0][r] + rotations[1][r]) % len(array)\n    return array[index]\n    ", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,ind,n,counter):\n    if counter == n:\n        return arr[ind[1]]\n    return find_Element(arr,ind[1],n,counter+1)\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(list_elements,list_rotations,index,no_of_rotations):\n    rotated = no_of_rotations % len(list_rotations)\n    element = list_elements[list_rotations[rotated][index]]\n    return element\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(list, indexes, no_of_rotations, element_index):\n  # Write your code here.\n  rotated_index = (no_of_rotations % len(indexes))\n  rotated_index_list = indexes[rotated_index]\n  print rotated_index_list\n  index = (element_index % len(rotated_index_list))\n  print index\n  return list[rotated_index_list[index]]\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nimport time\n\ndef find_Element(list,index,rotations):\n    return list[index[0][0]-rotations%len(list)]\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(A,B,i,n):\n\tindex = n\n\twhile index != 0:\n\t\tindex -= 1\n\t\tif i in B[index]:\n\t\t\treturn A[B[index].index(i)]\n\treturn A[-1]\n\nA = [1,2,3,4,5]\nB = [[0,2],[0,3]]\ni = 2\nn = 1\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(array, rotations, index, start_from_index=0):\n    if not array or not rotations:\n        return -1\n\n    start,end = start_from_index,len(array)-1\n\n    for i, j in rotations:\n        if j < start_from_index:\n            continue\n        elif j > start_from_index:\n            start = j\n        else:\n            start = start_from_index\n        end = i\n\n        if start <= index < end:\n            break\n    return array[index % len(array)]\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word[0] == 'p':\n            return word[0] , word[1]\n    return -1, -1\n\nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(string):\n    for str in string:\n        if str[:2] == \"p \":\n            return str[2:].split()\n    return None\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        word_list = word.split()\n        for word in word_list:\n            if word[0]=='p':\n                return word\n\nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n\n# +", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(list_of_words):\n    first_word = [item for item in list_of_words if item.startswith('p')]\n    return tuple(first_word[0].split())\n    ", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(l):\n    p_words = [word for word in l if word[0]=='p']\n    return p_words[0], p_words[1]\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    match = []\n    for word in words:\n        for index,char in enumerate(word):\n            if index == 0 and char == 'p':\n                match.append(word)\n    return tuple(match)\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\n#sol 1\ndef start_withp(words):\n\tfor word in words:\n\t\tif word[0]=='p':\n\t\t\tp_word = word\n\tfor word in words:\n\t\tif word[0]=='P':\n\t\t\tP_word = word\n\treturn p_word, P_word\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    :param words: List of words starting with 'p'\n    :return: Tuple of two strings containing words starting with 'p'\n    \"\"\"\n    for word in words:\n        if word[0] == \"p\":\n            return word.split()[0], word.split()[1]\n    return None, None\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(lst):\n    for item in lst:\n        for word in item.split():\n            if word.startswith('p'):\n                return word\n\n#test"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(lst, index, k, kth):\n    if index == 0:\n        return lst[index] if kth > index else 0\n    else:\n        return max(lst[index], lst[index] + max_sum_increasing_subseq(lst, index-1, k, kth))\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(prefix, i, k, n):\n    \"\"\"\n    :param prefix: List[int]\n    :param i: int\n    :param k: int\n    :param n: int\n    :return: int\n    \"\"\"\n    return 0\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\nfrom typing import List\n\ndef max_sum_increasing_subseq(arr: List[int], n: int, k: int, i: int) -> int:\n    max_sum_till_i = 0\n    for j in range(i, n):\n        if arr[j] < arr[i]:\n            max_sum_till_i += arr[j]\n        else:\n            max_sum_till_i += arr[i]\n        max_sum_till_i = max(max_sum_till_i, max_sum_increasing_subseq(arr, n, k, j+1))\n    if k == i:\n        return max_sum_till_i\n    return max_sum_till_i + arr[i]\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(nums, k, i, j):\n    if i >= j:\n        return -float('inf')\n    if k == i:\n        return nums[i]\n\n    res = -float('inf')\n\n    for p in range(i, j):\n        res = max(res, nums[p] + max_sum_increasing_subseq(nums, k, i, p) + max_sum_increasing_subseq(nums, k, p+1, j))\n\n    return res\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, i, k, n) -> int:\n    if i == n - 1:\n        return max(arr[i], arr[k])\n    \n    elif i == k:\n        return arr[k]\n    \n    return max(arr[i], arr[k], max_sum_increasing_subseq(arr, i + 1, k, n))\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\nfrom typing import List\n\n\ndef max_sum_increasing_subseq(arr: List[int], i: int, k: int, m: int) -> int:\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n\n    for j in range(1, len(arr)):\n        dp[j] = max(dp[j - 1], arr[j])\n\n    # condition\n    if k >= i:\n        return dp[k - i]\n\n    max_sum = 0\n\n    for j in range(i + 1, len(arr)):\n        # check dp[j] > dp[j - 1]\n        if dp[j - 1] > dp[j]:\n            # check if arr[j] is before i and k\n            if arr[j] < arr[k] and arr[j] > arr[i]:\n                max_sum = max(max_sum, dp[j - 1] + arr[j])\n            else:\n                max_sum = max(max_sum, dp[j])\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\nfrom collections import deque\n\n\ndef max_sum_increasing_subseq(nums, n, i, k):\n    max_sum = -float('inf')\n    # stack of increasing subsequences, each is a tuple of (sum, last_index)\n    stack = deque()\n    # append a dummy element\n    stack.append((0, -1))\n    for j in range(n):\n        while stack and stack[-1][1] < nums[j]:\n            max_sum = max(max_sum, stack[-1][0])\n            stack.pop()\n        # push the element in the stack\n        stack.append((stack[-1][0] + nums[j], nums[j]))\n        # check for the kth element if it exists\n        if stack[-1][1] == k:\n            max_sum = max(max_sum, stack[-1][0])\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\nimport pytest\n\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n    dp = [float('-inf')] * n\n\n    # initialise with the first element\n    for j in range(0, n):\n        dp[j] = arr[j]\n\n    # Fill remaining values in bottom up manner\n    for j in range(n - 2, -1, -1):\n        for l in range(j + 1, n):\n            # if lth element is not k and\n            # sum of current subsequence\n            # and (l + 1)th element is greater than k\n            if arr[j] < k and dp[l] + arr[l] > dp[j]:\n                dp[j] = dp[l] + arr[l]\n\n    return dp[i]\n\n\n@pytest.mark.parametrize(\n    (\"arr, n, i, k, expected\"),\n    [\n        ([1, 101, 2, 3, 100, 4, 5], 7, 4, 6, 11),\n        ([10, 20, 30, 40, 50], 5, 3, 60, 100),\n        ([1, 100, 10, 100, 100, 100, 100, 100, 100, 100, 100, 100], 13, 7, 90, 200),\n        ([1, 100, 10, 100, 100, 100, 100, 100, 100, 100, 100, 100], 13, 7, 100, 3", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(array, i, k, size):\n    if i > size - 1:\n        return 0\n\n    if i == size - 1:\n        return array[i]\n\n    result = max(array[i] + max_sum_increasing_subseq(array, i + 1, k, size),\n                max_sum_increasing_subseq(array, i + 1, k, size))\n\n    if k > i:\n        result = max(result, max_sum_increasing_subseq(array, i + 1, k, size))\n\n    return result\n\n"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n# Your code here\n# Solution\ndef colon_tuplex(tuplex, start, end):\n    return tuplex[start:end]\n# Tests", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, start, end):\n    return (tuplex[start:end])\ncolon_tuplex((\"HELLO\", 5, [], True) ,2,50)\n\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex,x,y):\n    return (tuplex[:x],tuplex[x:y],tuplex[y:])\n\n\ncolon_tuplex((\"HELLO\", 5, [], True) ,2,50)\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, a, b):\n  pass\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\n#%%", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\nfrom typing import Tuple\n\ndef colon_tuplex(tuplex: Tuple, start: int, end: int) -> Tuple:\n    \"\"\"Returns a new Tuple that is a slice of the passed in Tuple.\"\"\"\n    if type(tuplex) is tuple:\n        return tuple(tuplex[start:end])\n    else:\n        return str(tuplex)[start:end]\n\n\n# Tests\n# print(colon_tuplex((\"HELLO\", 5, [], True), 2, 50))\n# print(colon_tuplex(\"HELLO\", 2, 50))\n# print(colon_tuplex(\"HELLO\", 2, 1))\n# print(colon_tuplex(\"HELLO\", 0, 5))\n# print(colon_tuplex(\"HELLO\", 0, 0))\n# print(colon_tuplex(\"HELLO\", 0, 1))\n# print(colon_tuplex(\"HELLO\", 1, 1))\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n#Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,start,stop):\n    return tuplex[start:stop+1]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuplex, start, stop):\n    \"\"\"\n    colon_tuplex(\"HELLO\", 2, 3)\n    ('H', 'E')\n    \"\"\"\n    return tuplex[:start], tuplex[start:stop]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex,start,end):\n    return tuple(tuplex)[start:end]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, start, stop):\n    \"\"\"\n    :param tuplex:\n    :param start:\n    :param stop:\n    :return:\n    \"\"\"\n    return tuplex[:stop]\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, num):\n    if len(list1) != len(list2):\n        return \"Lists must be of same length\"\n    if num > len(list1):\n        return \"Number of products must be <= length of list\"\n\n    list1.sort()\n    list2.sort(reverse=True)\n\n    result = []\n    for i in range(num):\n        result.append(list1[i]*list2[i])\n    \n    return result\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(array1, array2, k):\n    array1 = sorted(array1)\n    array2 = sorted(array2)\n    ret = []\n    for i in range(k):\n        ret.append(array1[-i-1] * array2[-i-1])\n    return ret\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1,list2,n):\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    final_list=[]\n    for i in range(n):\n        final_list.append(list1[i]*list2[i])\n    return final_list", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(arr1,arr2,num):\n    result = []\n    l1 = len(arr1)\n    l2 = len(arr2)\n    for i in range(l1):\n        for j in range(l2):\n            product = arr1[i] * arr2[j]\n            if len(result) < num or product > result[-1]:\n                result.append(product)\n    return sorted(result,reverse=True)[:num]\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\nfrom functools import reduce\n\ndef large_product(lst1,lst2,n):\n    l1 = list(map(lambda x: x**2, lst1))\n    l2 = list(map(lambda x: x**2, lst2))\n    result = []\n    for i in range(len(l1)):\n        result.append(l1[i] * l2[i])\n    return sorted(result,reverse=True)[:n]", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n#SOLUTION\n\ndef large_product(lst1,lst2,num):\n    \"\"\"\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    True\n    \"\"\"\n    #List to store largest n numbers\n    largest = []\n    #Compares two lists\n    for i in lst1:\n        for j in lst2:\n            #If they are the same or the product is greater than the previous stored largest, append\n            if i==j or i*j>largest[-1]:\n                largest.append(i*j)\n    #Sorts largest in descending order\n    largest = sorted(largest, reverse = True)\n    #Returns the first n largest numbers in the list\n    return largest[:num]\n\n#tests\nimport doctest\ndoctest.testmod()\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    list1.sort()\n    list2.sort()\n    large_product_list = []\n    for i in range(n):\n        large_product_list.append(list1[len(list1)-1]*list2[len(list2)-1])\n        list1.pop()\n        list2.pop()\n    return large_product_list\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\nfrom random import randint\n\ndef large_product(a,b,k):\n    #a,b list of numbers\n    #k is number of elements to be returned\n    a.sort()\n    b.sort()\n    # print(a)\n    # print(b)\n    res = []\n    for i in range(k):\n        if(a[-1]*b[-1] not in res):\n            res.append(a[-1]*b[-1])\n        else:\n            break\n        a.pop()\n        b.pop()\n    return res\n\n#test", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\nimport random\n\ndef large_product(list1,list2,number_of_products):\n    \n    \"\"\"\n    input: list1 = [1, 2, 3, 4, 5, 6],list2 = [3, 6, 8, 9, 10, 6],number_of_products = 3\n    output: [60, 54, 50]\n    \"\"\"\n    if number_of_products > len(list1) or number_of_products > len(list2):\n        return \"error\"\n    else:\n        product_list = []\n        for i in range(number_of_products):\n            product_list.append(random.randint(1, 100))\n        return product_list\n        \nlarge_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\nlarge_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)\nlarge_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],6)<jupyter_output><empty_output>"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x,y):\n    return x if x>y else y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x,y):\n    if x > y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    return x if x>y else y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    elif num2 > num1:\n        return num2\n    else:\n        return \"The numbers are equal\"\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x,y):\n    return x if x > y else y\n\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x,y):\n    if(x > y):\n        return x\n    elif(x < y):\n        return y\n    else:\n        return x\n\ndef test_maximum():\n    assert maximum(5,10) == 10\n    assert maximum(5,5) == 5\n\ntest_maximum()\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n\treturn tuple(string)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n  return tuple(string)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n  return tuple(string)\n\n#test", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(word):\n    return tuple(word)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n# write here\ndef string_to_tuple(s):\n    return tuple(s)\n    ", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.split())\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    \"\"\"Converts a string to a tuple\"\"\"\n    return tuple(string)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    return tuple(string.split(\" \"))\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n#Given Solution\ndef string_to_tuple(string):\n    return tuple(string)\n\n#Test Cases", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(str):\n    tuple_string = ()\n    for i in str:\n        tuple_string = tuple_string + (i,)\n    return tuple_string\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    mask = 1\n    while (n & mask):\n        mask <<= 1\n\n    return n | mask\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\nimport math\n\n# O(n) time | O(1) space\ndef set_left_most_unset_bit(n):\n\treturn n | (n + 1)\n\n# O(n) time | O(1) space\ndef set_left_most_unset_bit(n):\n\t# The rightmost bit with 1\n\trightmostBitWithOne = 1\n\twhile ((rightmostBitWithOne & n) == 0):\n\t\trightmostBitWithOne = rightmostBitWithOne << 1\n\treturn n | rightmostBitWithOne\n\n# O(n) time | O(1) space\ndef set_left_most_unset_bit(n):\n\t# The rightmost bit with 1\n\trightmostBitWithOne = math.pow(2, math.floor(math.log2(n)) + 1)\n\treturn n | rightmostBitWithOne\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(x):\n    if x == 0:\n        return 1\n    else:\n        return 1 << (x - 1).bit_length()\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    # Your code goes here\n    return n | (n + 1)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(x):\n    # 1. Get left-most set bit in x\n    leftmost_set_bit = x & (x-1)\n    # 2. Get rightmost set bit in x\n    rightmost_set_bit = x & (~x+1)\n    # 3. Set left most bit to 1\n    return leftmost_set_bit | rightmost_set_bit\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\nimport unittest\n\ndef set_left_most_unset_bit(n):\n    \"\"\"Returns n with left most unset bit set\"\"\"\n    return n | (n + 1)\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num: int) -> int:\n    # find the least significant bit that is set\n    least_significant_set_bit = num & -num\n\n    # unset this least significant bit\n    return num | least_significant_set_bit\n\n\ndef set_left_most_unset_bit_naive(num: int) -> int:\n    # loop over all the bits and find the first unset bit\n    for bit_position in range(1, num + 1):\n        # check if this bit is unset\n        if num & bit_position == 0:\n            return num | bit_position\n\n    # the for loop did not return, this means all bits are set and we need to return -1\n    return -1\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    n = n | (n - 1)\n    return n + 1\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius,height):\n    \"\"\"\n    :param radius: radius of cone\n    :param height: height of cone\n    :return: volume of cone\n    \"\"\"\n    volume = (1.0/3)*pi*radius**2*height\n    return volume", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\n# Create a function named volume_cone and add a parameter named radius to it.\n\n# Create a second parameter named height and set its default value to 1.\n\n# Create a variable named volume and set it to 0.\n\n# Calculate the volume of the cone using the formula.\n\n# Return the value of the volume of the cone.\n\n# -----------------------------------------------\n\ndef volume_cone(radius, height=1):\n    volume = (1.0 / 3) * (3.14159 * radius ** 2 * height)\n    return volume\n\n\n# -----------------------------------------------\n# You can also create functions within functions.\n# This function contains a nested function named volume_sphere.\n\ndef volume_cylinder(radius, height=1):\n    def volume_sphere(r):\n        volume = (4.0 / 3) * 3.14159 * (r ** 3)\n        return volume\n    total_volume = volume_sphere(radius) * height\n    return total_volume\n\n\n# -----------------------------------------------\n\n# Call the functions in this order:\n# volume_cone\n# volume_cylinder\n# volume_cone\n\n# -----------------------------------------------\n# Check if you got the right answer\n\ndef check_answer(answer):\n    # This function checks if your answer is correct.\n    # This function takes one parameter, answer.\n    # Put your code below.\n    if answer == 314.15926535897927:\n        print(\"Correct!\")\n    else:\n        print(\"Incorrect. Try again.\")\n\n\n# -----------------------------------------------\n# Call check_answer\n\ncheck_answer(volume_cone(5,12))\ncheck_answer(volume_cylinder(5,12))\ncheck_answer(volume_cone(5))\n\n# -----------------------------------------------\n# Check your answer\n\ndef check_answer(answer):\n    # This function checks if your answer is correct.\n    # This function takes one parameter, answer.\n    # Put your code below.\n    if answer == 314.1592653589", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nfrom math import pi\n\ndef volume_cone(radius,height):\n\treturn pi*radius**2*height/3\n\n\n# Tests\nimport unittest\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius, height):\n    return (1/3)*pi*radius*radius*height\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nimport math\n\ndef volume_cone(r, h):\n\tvolume=math.pi*(r**2)*(h/3)\n\treturn volume\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    return math.pi * r**2 * h / 3\n\n# Tests", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport math\n\ndef volume_cone(h,r):\n    \"\"\"\n    h = height\n    r = radius\n    \"\"\"\n    vol = ((1/3)*math.pi*r*r*r)*h\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nimport math\n\ndef volume_cone(r,h):\n    return (1/3)*math.pi*r*r*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\n#volume_cone(5,12)==314.15926535897927\n\n#Do not modify the following code\ndef volume_cone(h,r):\n  from math import pi\n  return (1/3)*pi*r*r*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    return math.pi*r**2*h/3\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n    if type(nums) != list:\n        raise TypeError(\"Must pass in a list\")\n    result = []\n    for num in nums:\n        if num > 0:\n            result.append(num)\n    return result\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    pos_nos = []\n    for i in lst:\n        if i > 0:\n            pos_nos.append(i)\n    return pos_nos", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(nums):\n    return list(filter(lambda x:x>0,nums))\n\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(L):\n    l = []\n    for i in L:\n        if i>0:\n            l.append(i)\n    return l\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(numbers):\n    return [x for x in numbers if x >= 0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(x):\n    \"\"\"\n    Prints the positive numbers in the list x.\n    \"\"\"\n    if x == []:\n        return\n    if x[0] >= 0:\n        print(x[0])\n    pos_nos(x[1:])\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(x):\n  return \",\".join(str(i) for i in x if i>0)\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(numbers):\n    for number in numbers:\n        if number > 0:\n            print(number, end = ',')\n    print()\n    return\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(a):\n    return [x for x in a if x>=0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(a):\n    return [num for num in a if num > 0]\n\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    \"\"\"Complexity: O(n)\"\"\"\n    # Tricky edge case\n    if len(grid) == 1:\n        return max(grid[0])\n    # Get sums of two 1xn and 2xn segments\n    sum_left = [0] * n\n    sum_right = [0] * n\n    for i in range(0, n):\n        sum_left[i] = sum(grid[0][i:n])\n        sum_right[i] = sum(grid[1][i:n])\n\n    # dp[i][j] = maximum sum of 2xn segment of i rows with j columns\n    dp = [[] for i in range(n+1)]\n    for i in range(1, n+1):\n        dp[i] = [0] * (n+1)\n\n    # Initialize first column\n    dp[1][1] = max(sum_left[0], sum_right[0])\n    dp[2][1] = max(sum_left[0] + sum_right[1], sum_right[0] + sum_left[1])\n    for i in range(3, n+1):\n        dp[i][1] = max(dp[i-1][1], sum_right[i-2] + sum_left[i-1])\n\n    # Initialize first row\n    for j in range(2, n+1):\n        dp[1][j] = max(dp[1][j-1], dp[2][j-1] + sum_right[j-1])\n\n    # Iterate through rest of the rows\n    for i in range(3, n+1):\n        for j in range(2, n+1):\n            dp[i][j] = max(dp[i-1][j-1], dp[i-2][j-1] + sum_right[j-2] + sum_left[j", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    def row_sum(row_number):\n        return sum(row) if row_number < len(grid) else 0\n\n    def max_sum_row(row_number):\n        max_sum = row_sum(row_number)\n\n        for i in range(1, n):\n            max_sum = max(max_sum, row_sum(row_number + i))\n\n        return max_sum\n\n    return max(max_sum_row(row_number) for row_number in range(len(grid)))\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\n# Approach 1: Recursive\n# Time Complexity: O(2^n)\n# Space Complexity: O(n)\ndef max_sum_rectangular_grid(grid, n):\n    if not grid or not grid[0]:\n        return 0\n\n    # Pick the first element and try to find a sum of elements as per the conditions\n    return max(\n        grid[0][0] + max_sum_rectangular_grid(grid[1:], n - 1),\n        grid[0][1] + max_sum_rectangular_grid(grid[1:], n - 1),\n        max_sum_rectangular_grid(grid[1:], n)\n    )\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    sum_left = [0 for _ in xrange(n)]\n    sum_right = [0 for _ in xrange(n)]\n    curr_left = 0\n    curr_right = 0\n    max_sum = -1\n    \n    for num in sum(grid, []):\n        curr_left += num\n        curr_right += num\n        sum_left[0] = curr_left\n        sum_right[-1] = curr_right\n        \n        for i in xrange(1, n):\n            sum_left[i] = max(sum_left[i - 1], curr_left)\n            curr_left += num\n            sum_right[n - 1 - i] = max(sum_right[n - i], curr_right)\n            curr_right += num\n        \n        max_sum = max(max_sum, sum(max(sum_left), max(sum_right)))\n    \n    return max_sum\n    \n    \n    ", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\nfrom typing import List\n\ndef max_sum_rectangular_grid(matrix: List[List[int]], n: int) -> int:\n    max_so_far = -float(\"inf\")\n    for i in range(n):\n        prev_sum = 0\n        for j in range(n):\n            prev_sum += matrix[i][j]\n            max_so_far = max(max_so_far, prev_sum)\n            prev_sum = max(0, prev_sum)\n    return max_so_far", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    # O(n^3)\n    pass\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(arr, n):\n    left = [0] * (n + 1)\n    right = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        left[i] = max(left[i - 1], arr[0][i - 1])\n        right[i] = max(right[i - 1], arr[0][n - i])\n\n    # print(left)\n    # print(right)\n    # print()\n\n    max_sum = -10 ** 4\n    for i in range(1, n + 1):\n        for j in range(1, n - i + 1):\n            max_sum = max(max_sum, arr[i][j] + left[j - 1] + right[i + j - 1])\n\n    return max_sum", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    cache = defaultdict(list)\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if i == 0 and j == 0:\n                cache[(i, j)].append(grid[i][j])\n            elif i == 0:\n                cache[(i, j)].append(grid[i][j] + cache[(i, j - 1)][-1])\n            elif j == 0:\n                cache[(i, j)].append(grid[i][j] + cache[(i - 1, j)][-1])\n            else:\n                cache[(i, j)].append(\n                    grid[i][j] + max(cache[(i, j - 1)][-1], cache[(i - 1, j)][-1]))\n\n    return max(cache[(len(grid) - 1, n - 1)])\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = -1\n    for i in range(0, n):\n        max_sum = max(max_sum, max(grid[i]))\n\n    for i in range(1, n):\n        for j in range(n):\n            max_sum = max(max_sum, grid[i][j] + max_sum - grid[i-1][j] if j > 0 else grid[i][j])\n    return max_sum\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(word):\n    len_list=[]\n    for i in word.split():\n        if len(i)%2==0:\n            len_list.append(len(i))\n    if len_list:\n        return max(len_list)\n\n#solution 2", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(sentence):\n    sentences = sentence.split()\n    max_len = 0\n    max_index = 0\n    for i in range(len(sentences)):\n        if len(sentences[i]) % 2 == 0 and len(sentences[i]) >= max_len:\n            max_len = len(sentences[i])\n            max_index = i\n    return sentences[max_index]\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(s):\n\t\"\"\"\n\t:param s: a string\n\t:return: the longest even word in the string\n\t\"\"\"\n\tif not s:\n\t\treturn \"\"\n\n\twords = s.split(\" \")\n\teven_words = [word for word in words if len(word) % 2 == 0]\n\tif not even_words:\n\t\treturn \"\"\n\treturn max(even_words, key=len)\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\nfrom typing import List\n\n\ndef find_Max_Len_Even(s: str) -> str:\n    \"\"\"[summary]\n\n    Args:\n        s (str): [description]\n\n    Returns:\n        str: [description]\n    \"\"\"\n    list_of_words = s.split(\" \")\n    max_len = 0\n    max_string = \"\"\n    for word in list_of_words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_string = word\n    return max_string\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\nimport re\n\n\ndef find_Max_Len_Even(str):\n    str = re.sub(r\"[^a-zA-Z]\", \" \", str)\n    word_list = str.split()\n    max_len = 0\n    max_word = \"\"\n    for word in word_list:\n        if len(word) % 2 == 0 and len(word) >= max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(st):\n    return max(i for i in st.split() if len(i) % 2 == 0)\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    words = string.split()\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\n#Code\ndef find_Max_Len_Even(str1):\n    return max(w for w in str1.split() if len(w) % 2 == 0)"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(nums, x):\n  i = len(nums) - 1\n  while i >= 0 and nums[i] != x:\n    i -= 1\n  return i\n\ndef test_find_last_occurrence():\n  assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n  assert find_last_occurrence([2, 5, 5, 6, 6, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9], 9) == 10\n  assert find_last_occurrence([], 9) == -1\n  assert find_last_occurrence([2, 5, 6, 8, 9], 9) == 4\n  assert find_last_occurrence([2, 5, 6, 8, 9], 10) == -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(a, x):\n    \"\"\"\n    if you don't know how to solve this problem, you can try:\n    1. find all the index of the occurrence of x\n    2. sort them in ascending order\n    3. get the last index of the list\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n\n    :param a: input array\n    :param x: given number\n    :return: the index of the last occurrence of x in a, -1 if x does not appear in a\n    \"\"\"\n    # write your code here\n    index_list = []\n    for i in range(len(a)):\n        if a[i] == x:\n            index_list.append(i)\n    if len(index_list) == 0:\n        return -1\n    index_list = sorted(index_list)\n    return index_list[-1]\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\nimport unittest\nfrom typing import List\nfrom typing import Optional\n\n\ndef find_last_occurrence(array: List[int], num: int) -> Optional[int]:\n    return find_last_occurrence_recursive(array, num, 0, len(array) - 1)\n\n\ndef find_last_occurrence_recursive(array: List[int], num: int, start_index: int, end_index: int) -> Optional[int]:\n    if start_index > end_index:\n        return None\n\n    middle_index = (start_index + end_index) // 2\n    middle_element = array[middle_index]\n\n    if middle_element == num:\n        if middle_index + 1 > len(array) - 1 or array[middle_index + 1] != num:\n            return middle_index\n        else:\n            return find_last_occurrence_recursive(array, num, middle_index + 1, end_index)\n    elif middle_element > num:\n        return find_last_occurrence_recursive(array, num, start_index, middle_index - 1)\n    else:\n        return find_last_occurrence_recursive(array, num, middle_index + 1, end_index)\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, value):\n  start = 0\n  end = len(array)\n  while start < end:\n    mid = start + (end - start) // 2\n    if value < array[mid]:\n      end = mid\n    else:\n      start = mid + 1\n  return end\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(sorted_list: list, number: int) -> int:\n    \"\"\"Complexity of this function is O(n).\"\"\"\n\n    # base case\n    if not sorted_list:\n        return -1\n    \n    # start from the end\n    for i in range(len(sorted_list) - 1, -1, -1):\n        if sorted_list[i] == number:\n            return i\n\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, target):\n    \"\"\"\n    :param array: Sorted array of integers\n    :param target: Target integer\n    :return: Index of the last occurrence of the target\n    \"\"\"\n    if array:\n        left, right = 0, len(array) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if array[mid] == target:\n                left = mid + 1\n            elif array[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        if array[left] != target:\n            return -1\n        return left\n    return -1\n\n\ndef test_find_last_occurrence():\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert find_last_occurrence([1, 1, 1, 2, 2, 3, 3, 4, 4, 4], 2) == 5\n    assert find_last_occurrence([2, 2, 2, 3, 3, 3, 4, 4, 4], 5) == -1\n    assert find_last_occurrence([1, 1, 1, 2, 2, 3, 3, 4, 4, 4], 5) == -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(sorted_arr, num):\n    for i in range(len(sorted_arr)-1, -1, -1):\n        if sorted_arr[i] == num:\n            return i\n    return None\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, target):\n    # check for edge case\n    if not arr:\n        return -1\n\n    start = 0\n    end = len(arr) - 1\n    mid = (start + end)//2\n\n    # binary search\n    while start <= end:\n        if arr[mid] == target:\n            # check for edge case\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n\n            end = mid - 1\n            mid = (start + end)//2\n        elif arr[mid] < target:\n            start = mid + 1\n            mid = (start + end)//2\n        else:\n            end = mid - 1\n            mid = (start + end)//2\n\n    return -1\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(a):\n    stack = []\n    for i in a:\n        if stack and stack[-1][0] == i:\n            stack[-1][1] += 1\n        else:\n            stack.append([i, 1])\n    return stack\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\nfrom typing import List\n\n\ndef modified_encode(arr: List[int]) -> List:\n    return [len(list(p)) if list(p) == list(p)[::-1] else list(p)\n            for p in zip(*([iter(arr)] * 2))]\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Any, Callable, Counter as CounterType, Iterable, List, Tuple\n\n\ndef modified_encode(input_list: Iterable) -> List[Any]:\n    \"\"\"\n    >>> modified_encode([1,1,2,3,4,4,5,1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    \"\"\"\n    return [\n        ([k, v] if k != v else k for k, v in groupby(2).items())\n        for k, v in Counter(input_list).items()\n    ]\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(l):\n    # check if empty\n    if not l:\n        return []\n    # find first element in list and initialize output list\n    out = [l[0]]\n    # iterate over list from 1 to end\n    for i in l[1:]:\n        # if previous element is not equal to current element, add to output list\n        if out[-1] != i:\n            out.append(i)\n        # if previous element is equal to current element, add one more occurrence to output list\n        elif out[-1] == i:\n            out[-1] = [out[-1],1]\n    return out", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    \"\"\"Take a list, and return the modified run-length encoding.\n    \"\"\"\n    result = []\n    if lst == []:\n        return result\n    else:\n        counter = 1\n        prev = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] == prev:\n                counter += 1\n            else:\n                result.append(prev)\n                result.append(counter)\n                prev = lst[i]\n                counter = 1\n        result.append(prev)\n        result.append(counter)\n        return result\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n\n    result = []\n    count = 1\n    max_count = 1\n    max_count_index = 1\n\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_count_index = i\n        else:\n            if count > max_count:\n                max_count = count\n                max_count_index = i\n            result.append([lst[i], max_count])\n            count = 1\n\n    if count > max_count:\n        max_count = count\n        max_count_index = len(lst) - 1\n\n    result.append([lst[max_count_index], max_count])\n    return result\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\nfrom nose.tools import assert_equal\n\n\ndef modified_encode(lst):\n    \"\"\"\n    :param lst: List of integers\n    :return: Modified run-length encoding of list\n    \"\"\"\n    # Your code here\n    return [run(lst, i) for i in range(1, max(lst)+1)]\n\n\ndef run(lst, val):\n    \"\"\"\n    Get the run of values in a list\n    :param lst: List\n    :param val: Value to count runs of\n    :return: Run of values\n    \"\"\"\n    return [val, len(list(filter(lambda x: x == val, lst)))]\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    \"\"\"\n    >>> modified_encode([1,1,2,3,4,4,5,1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    \"\"\"\n    result = []\n    for i in lst:\n        if i == result[-1][0] :\n            result[-1][1] += 1\n        else :\n            result.append([i,1])\n    return result\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    return (lst.count(i), i) if lst.count(i) > 1 else i for i in lst", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(array):\n    if not array:\n        return []\n    list_to_return = []\n    count = 0\n    for i in range(len(array)):\n        count += 1\n        if i == len(array) - 1 or array[i] != array[i+1]:\n            list_to_return.append(array[i])\n            if count > 1:\n                list_to_return.append(count)\n                count = 0\n    return list_to_return\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\nfrom math import sqrt\nfrom functools import reduce\n\n\ndef max_volume(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\ndef sum_list(l):\n    return reduce(lambda x, y: x + y, l)\n\n\ndef sum_cube(sides):\n    return sum_list(sides) ** 2\n\n\ndef sum_square(sides):\n    return sum_list(sides) * (sum_list(sides) + 1) // 2\n\n\ndef max_area(sides):\n    return sqrt(sum_square(sides))\n\n\ndef max_volume_cuboid(sides):\n    return max_area(sides) * max_volume(sides[0])\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_sides):\n    return sum_sides ** 2 // 6\n\n\n# assert max_volume(8) == 18\n# assert max_volume(11) == 36\n# assert max_volume(15) == 28\n# assert max_volume(10) == 26\n# assert max_volume(18) == 40\n# assert max_volume(20) == 42\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\nfrom itertools import combinations\n\ndef max_volume(sides):\n    sides_set = list(set(sides))\n    max_volume = 0\n    for sides_combination in combinations(sides_set, 3):\n        sides_combination = list(sides_combination)\n        side_1 = sides_combination[0]\n        side_2 = sides_combination[1]\n        side_3 = sides_combination[2]\n        volume = side_1*side_2*side_3\n        if volume > max_volume:\n            max_volume = volume\n    return max_volume\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\n#SOLUTION\ndef max_volume(sides):\n    \"\"\"\n    Find the maximum possible volume of a cuboid with given sum of sides\n    \"\"\"\n    a = sorted(sides)\n    a.reverse()\n    for i in range(len(a)):\n        for j in range(len(a)):\n            for k in range(len(a)):\n                if i == j or i == k or j == k:\n                    continue\n                if a[i] + a[j] + a[k] == sides:\n                    return a[i] * a[j] * a[k]\n    return -1\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(a, b, c):\n    return (a * b * c) * (2 * max(a, b, c) + 1) // 3\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\nimport pytest\n\n\ndef max_volume(n):\n    \"\"\"\n    :param n: is a positive integer\n    :return: the maximum volume of a cuboid with given sum of sides\n    \"\"\"\n\n    return n ** 3 // 6\n\n\n@pytest.mark.parametrize(\"n, expected\", [(8, 18), (10, 27)])\ndef test_max_volume(n, expected):\n    assert max_volume(n) == expected\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sides):\n    return sides**2*sides\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sides):\n    \"\"\"Return max volume of cuboid with given sides.\"\"\"\n    return sides**3\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(side_sum):\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides.\n\n    :param side_sum: sum of sides of the cuboid.\n    :return: maximum volume of a cuboid.\n    \"\"\"\n    for i in range(side_sum, 0, -1):\n        for j in range(side_sum, 0, -1):\n            for k in range(side_sum, 0, -1):\n                if i + j + k == side_sum:\n                    return i * j * k\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)\n\n\ndef test_find_long_word():\n    assert find_long_word('Please move back to strem') == ['strem']\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(string):\n    return [i for i in re.findall('(.){5}', string)]\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\ndef find_long_word(string):\n    p = re.compile(r'\\b\\w{5}\\b')\n    return p.findall(string)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    return re.findall('\\b[a-z]{5}\\b', string)", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    import re\n    return re.findall(r'\\w{5,}',string)\n\ndef test_find_long_word():\n    assert find_long_word('Please move back to strem') == ['strem']\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\nfrom collections import defaultdict\n\ndef find_long_word(str):\n    regex = re.compile(r\"\\b\\w{5}\\b\")\n    return regex.findall(str)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(string):\n    # 1st try: list comprehension (quicker)\n    long_words = [word for word in string.split() if len(word) == 5]\n\n    # 2nd try: list comprehension (slower)\n    # long_words = [word for word in string.split() if len(word) == 5]\n    # long_words = [word for word in long_words if not word == \"strem\"]\n\n    # 3rd try: regex\n    # long_words = re.findall(r\"\\b\\w{5}\\b\", string)\n\n    # 4th try: filter function\n    # long_words = list(filter(lambda x: len(x) == 5, string.split()))\n\n    # 5th try: lambda function\n    # long_words = list(filter(lambda x: len(x) == 5, string.split()))\n    # long_words = list(filter(lambda x: x != \"strem\", long_words))\n\n    # 6th try: set\n    # long_words = set([word for word in string.split() if len(word) == 5])\n    # long_words = set(filter(lambda x: x != \"strem\", long_words))\n\n    return long_words\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(text):\n    return [x.group() for x in re.finditer(r'[\\w]{5}', text)]\n\n# ======================================================================================= #\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\nimport math\ndef sum_difference(n):\n\treturn math.pow((n*(n+1)*(2*n+1))/6,2) - (n*(n+1)*(n+2)*(n+3))/24\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sum1 = (n * (n + 1) * (2 * n + 1)) / 6\n    sum2 = (n * (n + 1)) / 2\n    sum2 *= sum2\n    return int(sum1 - sum2)\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\n# Solution\n# diff_sq = sum(1 for i in range(n+1))**2 - sum((i**2) for i in range(1,n+1))\ndef sum_difference(n):\n    return sum(1 for i in range(n+1))**2 - sum((i**2) for i in range(1,n+1))", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    \"\"\"\n    Return the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n    :param n: natural number\n    :return: difference\n    \"\"\"\n    return ((n * (n + 1) ** 2) ** 2 + (n * (n + 1) * (2 * n + 1)) ** 2) / 4\n\n# Test", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n\t\"\"\"\n\tReturn the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers\n\t\"\"\"\n\treturn (n*(n+1)*(2*n+1)//6)**2 - (n*(n+1)//2)**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum([i**2 for i in range(n+1)]) - sum([i for i in range(n+1)])**2", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sum_squared_number = sum(x**2 for x in range(1, n + 1))\n    sum_of_number = sum(x for x in range(1, n + 1))\n    return sum_squared_number - sum_of_number**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n\tn=int(n)\n\treturn (sum(n*(n+1)*(2*n+1)//6)-(sum(n*(n+1)//2)**2))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    \"\"\"\n    This is the main function used to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n    Args:\n       n(int): Value of n.\n\n    Returns:\n       int: Difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    \"\"\"\n\n    assert isinstance(n,int), \"Value of n must be an integer.\"\n\n    if n <= 0:\n        return None\n\n    sum1 = sum([i**2 for i in range(1,n+1)])\n    sum2 = sum(range(1,n+1))**2\n\n    return abs(sum1-sum2)\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    \"\"\"\n    :param n: int\n    :return: int, The difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    \"\"\"\n    return sum(range(n+1))**2 - sum([i**2 for i in range(n+1)])\n\n\n\n# def sum_difference(n):\n#     sum_of_squares = sum([i**2 for i in range(1, n+1)])\n#     sum_of_square_sum = sum(range(1, n+1))**2\n#     return sum_of_squares - sum_of_square_sum"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(number):\n    \"\"\"\n    We use the number length and create a reversed string of the number,\n    and then iterate over each item, doing the following:\n        1. If we encounter a 9, we can simply do nothing, since there is no 9 after it\n        2. If we encounter an 8, we replace it with the next highest 9\n        3. If we encounter a 7, we replace it with the next highest 8\n        4. If we encounter a 6, we replace it with the next highest 7\n        5. If we encounter a 5, we replace it with the next highest 6\n        6. If we encounter a 4, we replace it with the next highest 5\n        7. If we encounter a 3, we replace it with the next highest 4\n        8. If we encounter a 2, we replace it with the next highest 3\n        9. If we encounter a 1, we replace it with the next highest 2\n    \"\"\"\n    reversed_number = number[::-1]\n    new_number = ''\n    for item in reversed_number:\n        if item == '9':\n            new_number += item\n        elif item == '8':\n            new_number += '9'\n        elif item == '7':\n            new_number += '8'\n        elif item == '6':\n            new_number += '7'\n        elif item == '5':\n            new_number += '6'\n        elif item == '4':\n            new_number += '5'\n        elif item == '3':\n            new_number += '4'\n        elif item == '2':\n            new_number += '3'\n        elif item == '1':\n            new_number += '2'\n    return new_number[::-1]\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(str_num):\n  if len(str_num) == 1:\n    return str_num\n  # recursively reverse the string, find the demlo, then reverse the string again\n  return str_num[::-1] + find_demlo(str_num[1:])[::-1]\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num):\n    return num[::-1]\n\ndef test_find_demlo():\n    assert find_demlo(\"111111\") == '12345654321'\n    assert find_demlo(\"123456\") == '654321'", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nimport re\nfrom typing import Callable, List, Union\n\n\ndef find_demlo(num: str) -> str:\n    \"\"\"\n    Find the demlo number for the given number.\n\n    >>> find_demlo(\"111111\")\n    '12345654321'\n\n    >>> find_demlo(\"12345\")\n    '12345'\n\n    >>> find_demlo(\"100000\")\n    '123456789012'\n\n    >>> find_demlo(\"100\")\n    '123'\n\n    >>> find_demlo(\"1\")\n    '1'\n\n    >>> find_demlo(\"0000\")\n    '0'\n\n    >>> find_demlo(\"\")\n    ''\n\n    >>> find_demlo(\"0\")\n    '0'\n    \"\"\"\n    if not num:\n        return \"\"\n    res = num\n    while True:\n        num = str(demlo(int(res)))\n        if num == res:\n            return num\n        res = num\n\n\ndef demlo(num: int) -> int:\n    \"\"\"\n    Find the demlo number for the given number.\n\n    >>> demlo(1)\n    1\n\n    >>> demlo(123)\n    123\n\n    >>> demlo(1234)\n    1234\n\n    >>> demlo(12345)\n    12345\n\n    >>> demlo(123456)\n    123456\n\n    >>> demlo(1234567)\n    1234567\n\n    >>> demlo(12345678)\n    12345678\n\n    >>> demlo(123456789)\n    123456789\n\n    >>> demlo(1234567890)\n    1234567890\n\n    >>> demlo(12345678901)\n    12345678901\n\n    >>> demlo(1234567", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(string):\n    if not string:\n        return\n    demlo_list = []\n    for i in string:\n        demlo_list.append(i)\n    demlo_string = \"\".join(demlo_list)\n    return demlo_string\n\n\n# + pycharm={\"name\": \"#%%\\n\"}", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num_string):\n    return(num_string[::-1]+num_string)\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    return str(int(n[::-1]) + 1)[::-1]\n\n\n# 12. Write a function to find the following input is a number or not.\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(number):\n    return ''.join(sorted(number, reverse=True))"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    result = []\n    minimum = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n    for i in range(len(lst)):\n        if minimum == lst[i]:\n            result.append(i)\n    return result\n\n\n# You can use this to test your code before submitting it", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\n# %%", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\nimport numpy as np\n\ndef position_min(l):\n    return [l.index(min(l[:i+1])) for i in range(len(l))]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(arr):\n    return [arr.index(x) for x in min(arr)]", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(my_list):\n    list_min = [i for i, n in enumerate(my_list) if n == min(my_list)]\n    return list_min\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\nfrom typing import List\n\n\ndef position_min(nums: List[int]) -> List[int]:\n    # take care of special cases\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [0]\n\n    # make a list with the positions of the min values\n    result = []\n    current = nums[0]\n    for i, num in enumerate(nums[1:], 1):\n        if num < current:\n            current = num\n            result = [i]\n        elif num == current:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(numbers):\n    list = []\n    for index in range(len(numbers)):\n        if numbers[index] == min(numbers):\n            list.append(index)\n    return list", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(numbers):\n\t\"\"\"\n\t>>> position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n\t[3, 11]\n\t\"\"\"\n\tmin_list = []\n\tfor i in range(len(numbers)):\n\t\tif i == 0:\n\t\t\tmin_list.append(numbers[i])\n\t\telse:\n\t\t\tif numbers[i] < numbers[min_list[0]]:\n\t\t\t\tmin_list.clear()\n\t\t\t\tmin_list.append(i)\n\t\t\telif numbers[i] == numbers[min_list[0]]:\n\t\t\t\tmin_list.append(i)\n\treturn min_list\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(arr):\n    # write your code here\n    start,end=0,len(arr)\n    result=[]\n    while start<=end:\n        mid=int((start+end)/2)\n        if mid!=0:\n            if arr[mid-1]>arr[mid]:\n                result.append(mid-1)\n        if mid!=len(arr)-1:\n            if arr[mid+1]>arr[mid]:\n                result.append(mid)\n        if arr[start]>arr[mid]:\n            result.append(start)\n        start+=1\n    return result\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(l):\n    positions = []\n    for i in range(len(l)):\n        if l[i] == min(l):\n            positions.append(i)\n    return positions\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr,n):\n    pos=arr.index(max(arr))\n    neg=arr.index(min(arr))\n    neg_index=0\n    pos_index=0\n    if pos>neg:\n        neg_index=pos\n        pos_index=pos+1\n    else:\n        neg_index=neg\n        pos_index=neg+1\n    arr_neg = arr[:neg_index+1][::-1]\n    arr_pos = arr[pos_index:]\n    print(arr_neg,arr_pos)\n    return arr_neg+arr_pos\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    pos = []\n    neg = []\n    for i in arr:\n        if i > 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    pos.reverse()\n    neg.reverse()\n\n    pos_start = 0\n    neg_start = 0\n    pos_end = len(pos) - 1\n    neg_end = len(neg) - 1\n    for i in range(n):\n        if pos_start <= pos_end:\n            arr[i] = pos[pos_start]\n            pos_start += 1\n        else:\n            arr[i] = neg[neg_start]\n            neg_start += 1\n\n        if neg_start <= neg_end:\n            arr[i+1] = neg[neg_start]\n            neg_start += 1\n        else:\n            arr[i+1] = pos[pos_end]\n            pos_end -= 1\n\ndef main():\n    arr = [1, 2, 3, -4, 5, 6, -7, 8, 9]\n    re_arrange(arr, len(arr))\n    assert arr == [1, -4, 2, 3, -7, 5, 6, 8, 9]\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\n# re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\ndef re_arrange(array, length):\n    if length < len(array):\n        return array[:length]\n    if length > len(array):\n        return array + [0] * (length - len(array))\n\n    new_array = [0] * len(array)\n    neg_count = 0\n    pos_count = 0\n    for i in range(length):\n        if array[i] < 0:\n            new_array[i - neg_count] = array[i]\n            neg_count += 1\n        else:\n            new_array[i + pos_count] = array[i]\n            pos_count += 1\n\n    return new_array\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\nimport numpy as np\n\ndef re_arrange(array, n):\n    arr = np.array(array)\n    pos = np.where(arr>0)\n    neg = np.where(arr<0)\n    return np.concatenate((arr[pos], arr[neg]), axis=None).tolist()", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    a1 = []\n    a2 = []\n    for i in arr:\n        if(i >= 0):\n            a1.append(i)\n        else:\n            a2.append(i)\n    c = len(a1)\n    b1 = a1\n    b2 = a2\n    for i in range(c):\n        b1.append(b2.pop())\n    return b1\n\n\n# ------------------method 2--------------------#", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    odd = []\n    even = []\n    for i in range(n):\n        if i%2 !=0:\n            odd.append(arr[i])\n        else:\n            even.append(arr[i])\n    return odd + even\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\n# TODO:", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    # write your code here\n    p1 = 0\n    p2 = n-1\n    \n    while p1 < p2:\n        if arr[p1] < 0 and arr[p2] < 0:\n            p1 += 1\n            p2 -= 1\n        elif arr[p1] < 0:\n            arr[p1], arr[p2] = arr[p2], arr[p1]\n            p1 += 1\n            p2 -= 1\n        else:\n            p1 += 1\n            p2 -= 1\n            \n    return arr\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(iterable):\n  if len(iterable) <= 1:\n    return iterable[0] if iterable else 0, 0\n\n  (a, b) = iterable[::2]\n  (c, d) = iterable[1::2]\n\n  return a+c, b+d\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(items):\n    # Your code here\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\n# solution\n\n# def sum_of_alternates(list_of_tuples):\n#     # split the list of tuples into two lists\n#     list_one = list_of_tuples[::2]\n#     list_two = list_of_tuples[1::2]\n\n#     # sum the tuples in list one\n#     sum_list_one = sum(list_one)\n\n#     # sum the tuples in list two\n#     sum_list_two = sum(list_two)\n\n#     return sum_list_one, sum_list_two\n\n\n# solution 2\n\ndef sum_of_alternates(list_of_tuples):\n    # split the list of tuples into two lists\n    list_one = list_of_tuples[::2]\n    list_two = list_of_tuples[1::2]\n\n    # sum the tuples in list one\n    sum_list_one = sum(list_one)\n\n    # sum the tuples in list two\n    sum_list_two = sum(list_two)\n\n    return sum_list_one, sum_list_two\n\n\n# testing\n\n# assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\n# print('All Passed!')\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(my_tuple):\n    odd_sum = 0\n    even_sum = 0\n    for i in my_tuple:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return (even_sum, odd_sum)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(t):\n    return reduce(lambda x,y: x+y, [[i,j] for i,j in zip(t[::2],t[1::2])])\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(values):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tuple1):\n  odd = sum(tuple1[::2])\n  even = sum(tuple1[1::2])\n  return odd, even\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(iterable):\n    \"\"\"Returns a tuple whose first element is the sum of the first\n    and third items of iterable, and the second element is the sum of the\n    second and fourth items of iterable.\"\"\"\n\n    # YOUR CODE HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tuple_list):\n    if len(tuple_list) == 1:\n        return tuple_list[0]\n    elif len(tuple_list) > 1:\n        return tuple(tuple(tuple(sum(x)) for x in zip(*[iter(tuple_list)] * 2)))\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(num):\n    min_squares = 1\n    for x in range(1, num+1):\n        if num % x == 0:\n            min_squares += 1\n    return min_squares\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    if num == 1: return 1\n    if num == 2: return 1\n    if num == 3: return 2\n    if num == 4: return 2\n    if num == 5: return 2\n    if num == 6: return 3\n    if num == 7: return 3\n    if num == 8: return 3\n    if num == 9: return 3\n    if num == 10: return 4\n\n    total_squares = 9\n    while True:\n        total_squares = total_squares + 2 * (total_squares)\n        if total_squares >= num:\n            break\n\n    start = 0\n    end = total_squares\n    while end >= start:\n        mid = (start + end) // 2\n        if mid * mid == num:\n            return mid\n        elif mid * mid < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(num):\n    squares = []\n    while num > 0:\n        squares.append(num)\n        num -= 1\n    result = 0\n    while True:\n        sums = []\n        for i in range(len(squares)):\n            temp = 0\n            for j in range(i):\n                temp += squares[j]\n            sums.append(temp)\n        sums.sort()\n        if len(sums) == 0:\n            break\n        index = 0\n        count = 0\n        while index < len(sums):\n            temp = 0\n            if sums[index] <= num:\n                for i in range(index, len(sums)):\n                    if sums[i] <= num:\n                        temp += 1\n                    else:\n                        break\n                count += 1\n                index = i\n            else:\n                break\n        if count == 0:\n            break\n        result += 1\n        num -= sums[index]\n    return result\n\n# test case", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(number):\n\tmin_squares = 0\n\twhile number:\n\t\tmin_squares += 1\n\t\tnumber -= min_squares**2\n\treturn min_squares\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(num):\n    return num\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\nimport sys\n\ndef get_Min_Squares(n):\n  if n < 4:\n    return n\n\n  dp = [0 for i in range(n + 1)]\n\n  for i in range(2, n + 1):\n    dp[i] = i\n\n  for i in range(4, n + 1):\n    for j in range(2, i + 1):\n      dp[i] = min(dp[i], dp[j - 1] + dp[i - j])\n\n  return dp[n]\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    # base case\n    if n < 0:\n        return -1\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 2\n\n    if n == 4:\n        return 2\n\n    if n == 5:\n        return 2\n\n    if n == 6:\n        return 3\n\n    # general case\n    res = -1\n    for i in range(1,n+1):\n        res = min(res, 1 + get_Min_Squares(n-i*i))\n\n    return res\n\n\n# driver code", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n# This is my first attempt, but it's not working as expected. I need to figure out why.\n# This is a dynamic programming approach, but I can't see where to start.\n# https://www.geeksforgeeks.org/find-minimum-number-of-squares-whose-sum-is-equal-to-given-number/\n\ndef get_Min_Squares(n):\n  global m\n  m = n\n  maxSquares = [0 for i in range(m + 1)]\n  for i in range(1, m + 1):\n    minSquares = float(\"inf\")\n    for j in range(1, m + 1):\n      if j * j <= i:\n        minSquares = min(minSquares, maxSquares[i - j * j] + 1)\n    maxSquares[i] = minSquares\n  return maxSquares[m]\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    res = 0\n    while True:\n        if res ** 2 > n:\n            break\n        elif (res + 1) ** 2 <= n:\n            res += 1\n        else:\n            break\n    return res\n\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(str):\n    word_occur = {}\n    for i in str:\n        word_occur.update(dict(Counter(i.split()).most_common()))\n    return max(word_occur, key=word_occur.get)\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nfrom functools import reduce\ndef most_occurrences(strings_list):\n    word_occurrences = {}\n    for word in reduce(lambda s1, s2: s1 + ' ' + s2, strings_list).split():\n        word_occurrences[word] = word_occurrences.get(word, 0) + 1\n    return max(word_occurrences, key=word_occurrences.get)", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(lst):\n\tlst = [x.split() for x in lst]\n\twords = set(lst[0])\n\tfor words_list in lst:\n\t\twords.update(words_list)\n\tsorted_words = sorted(words, key=lambda x: len(lst[0]), reverse=True)\n\treturn sorted_words[0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(list_of_words):\n    dict_of_words = dict()\n    for word in list_of_words:\n        dict_of_words[word] = word.count(' ')\n    return dict_of_words[max(dict_of_words, key=dict_of_words.get)]\n\n\n# # Testing\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    word = ''\n    max_count = 0\n    for s in strings:\n        word_list = s.split()\n        count_word = {}\n        for w in word_list:\n            if w in count_word.keys():\n                count_word[w] += 1\n            else:\n                count_word[w] = 1\n        for k,v in count_word.items():\n            if v > max_count:\n                max_count = v\n                word = k\n    return word\n    ", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings_list):\n    d = {}\n    for i in strings_list:\n        for j in i.split():\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return max(d, key = d.get)", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strs):\n    # write your code here\n    counter = Counter(strs)\n    return max(counter, key=lambda word:counter[word])", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(str_list: list) -> str:\n    word_occurrences_dict = {}\n    for str_element in str_list:\n        for word in str_element.split():\n            if word in word_occurrences_dict:\n                word_occurrences_dict[word] += 1\n            else:\n                word_occurrences_dict[word] = 1\n    return max(word_occurrences_dict, key = lambda x: word_occurrences_dict[x])\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(list_of_strings):\n    \"\"\"\n    :param list_of_strings: a list of strings\n    :return: a string representing the word with most occurrences\n    \"\"\"\n    # Your code here\n    most_occurring = \"\"\n    occurring = 0\n    for string in list_of_strings:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                if word_counts[word] > occurring:\n                    occurring = word_counts[word]\n                    most_occurring = word\n    return most_occurring\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(words_list):\n    from collections import Counter\n    word_count = Counter()\n    for word in words_list:\n        word_count[word] += 1\n    return word_count.most_common(1)[0][0]\n\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if (a==b==c or a==c==b or b==a==c):\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(x,y,z):\n  if (x==y) or (x==z) or (y==z):\n    return True\n  return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a, b, c):\n    if a==b or a==c or b==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n# Write your function here\ndef check_isosceles(a,b,c):\n    if a==b or b==c or a==c:\n        return True\n    elif a!=b and b!=c and a!=c:\n        return False\n\n# Write your assert statement here", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\n# Answer :\n\ndef check_isosceles(a,b,c):\n    if a==b or b==c or c==a:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n# using Pythagoras\ndef is_isosceles(a,b,c):\n    if (a == b == c):\n        return True\n    elif (a == b or a == c):\n        return True\n    elif (b == c):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(side1,side2,side3):\n    if (side1==side2) or (side2==side3) or (side1==side3):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    return (a==b or a==c or b==c) and (a!=b != c)\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    return (a==b and a!=c) or (b==c and b!=a) or (c==a and c!=b)\n    ", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b or a==c or b==c:\n        return True\n    else:\n        return False\n        \n    "], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(ls,left_index, right_index):\n    return ls[right_index:]+ls[:left_index]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(items,n):\n    \"\"\"Rotate elements in a list to the left\"\"\"\n    return items[n:] + items[:n]\n\ndef rotate_left(items,n):\n    \"\"\"Rotate elements in a list to the left\"\"\"\n    return items[-n:] + items[:-n]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\n# write your code here\n\n\n# + id=\"nSeXcl9f9yqu\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(array,num_to_rotate,size):\n    num_to_rotate%=size\n    return array[num_to_rotate:] + array[:num_to_rotate]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(list_in, n, len_list):\n    \"\"\"\n    Given a list and a number of items to rotate,\n    return a list with the specified number of items rotated to the left.\n    \"\"\"\n    return list_in[len_list-n:] + list_in[:len_list-n]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(arr,n,m):\n  #code here\n    for i in range(m):\n        x=arr[0]\n        for j in range(n-1):\n            arr[j]=arr[j+1]\n        arr[n-1]=x\n    return arr\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(data, num, capacity):\n    if num > capacity:\n        num = num % capacity\n    if num == 0:\n        return data\n    left, right = data[:num], data[num:]\n    return right + left\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(list, num, size):\n    list[:num], list[num:] = list[num:], list[:num]\n    return list\n\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(l):\n    return sum([1 for x in l if x<0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(nums):\n    negative_numbers = 0\n    for i in nums:\n        if i < 0:\n            negative_numbers += 1\n    return negative_numbers\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(list):\n    count = 0\n    for number in list:\n        if number < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(nums):\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count\n\n# --- 8. Sum of a list of numbers --- #", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(array):\n    count = 0\n    for i in array:\n        if i < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n# return (n)umber of negative numbers in a list\ndef neg_count(arr):\n\tcount = 0\n\tfor num in arr:\n\t\tif num < 0:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(mylist):\n    count = 0\n    for number in mylist:\n        if number < 0:\n            count = count + 1\n    return count\n    ", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(L):\n    return len(list(filter(lambda x:x<0,L)))\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n    count = 0\n    for i in lst:\n        if i < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(l):\n    count = 0\n    for n in l:\n        if n < 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\n\ndef find_char(string):\n    reg_exp = '[a-zA-Z]{3,5}'\n    return re.findall(reg_exp, string)\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\n# Your code goes here\n\ndef find_char(string):\n    r = re.compile('[a-zA-Z]{3,5}')\n    return r.findall(string)\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(str):\n    return [m.group() for m in re.finditer(r\"\\b\\w{3,5}\\b\", str)]\n\n# -- returns all words with 3, 4 or 5 characters", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(str):\n    words = re.findall('[a-zA-Z]{3,6}', str)\n    return words", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(str):\n    return re.findall(r'\\w{3,5}', str)\n\ndef main():\n    print(find_char('For the four consumer complaints contact manager AKR reddy'))\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nfrom functools import reduce\nfrom collections import Counter\n\nimport re\n\n\ndef find_char(text: str) -> list:\n    text = re.findall(r\"\\b[a-zA-Z]{3,}\\b\", text)\n    return text\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\ndef find_char(string):\n    return re.findall(r'\\b\\w{3,5}\\b', string)", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(str):\n    return re.findall(r\"\\b\\w{3}\\b\",str)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(string):\n    pattern = r'([\\w]{3,5})'\n    result = re.findall(pattern, string)\n    return result\n\ndef find_char2(string):\n    pattern = re.compile(r'([\\w]{3,5})')\n    result = pattern.findall(string)\n    return result\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(str):\n    # re.findall(\"([a-zA-Z]{3,5})\", str)\n    # re.findall(r\"([a-zA-Z]{3,5})\", str)\n    re.findall(r\"\\b[a-zA-Z]{3,5}\\b\", str)\n    return re.findall(r\"\\b[a-zA-Z]{3,5}\\b\", str)\n    # return re.findall(\"[a-zA-Z]{3,5}\", str)\n    # return re.findall(\"([a-zA-Z]{3,5})\", str)\n\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\nimport unittest\n\ndef count_unset_bits(num):\n    count = 0\n    while num > 0:\n        if num & 1 == 0:\n            count += 1\n        num = num >> 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n: int) -> int:\n    cnt = 0\n    for i in range(32):\n        if n & (1 << i) == 0:\n            cnt += 1\n    return cnt\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    return bin(n).count('1')\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(num):\n    count = 0\n    while num:\n        if num % 2 == 0:\n            count += 1\n        num //= 2\n    return count", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\nfrom bitwise_operators import count_unset_bits\n\n\ndef test_count_unset_bits():\n    assert count_unset_bits(2) == 1\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\nfrom typing import Any, List\n\n\ndef count_unset_bits(number: int) -> int:\n    \"\"\"Count the unset bits of a given number\n\n    Args:\n        number (int): the number to count the unset bits of\n\n    Returns:\n        int: the number of unset bits\n    \"\"\"\n    return bin(number).count(\"1\")\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# START Definition of the FUNCTION\n\n\ndef count_unset_bits(integer):\n    # Integer to binary\n    list_integer = bin(integer)\n    # Calculation of the number of zeros\n    count = 0\n    for symbol in list_integer:\n        if symbol == '0':\n            count += 1\n    return count\n\n\n# END Definition of FUNCTION\n\n\n# START MAIN PROGRAM\ndef main():\n\n    # Acquisition of the DATA entered by the USER\n    integer = int(input(\"Enter an integer: \"))\n\n    # Processing of the DATA entered by the USER\n    count = count_unset_bits(integer)\n    print(\"Number of unset bits: \", count)\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    count = 0\n    while num != 0:\n        if num & 1:\n            count += 1\n        num >>= 1\n    return count\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(s):\n    return {c:s.count(c) for c in s}\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nfrom collections import Counter\n\ndef char_frequency(string: str):\n  return Counter(string)\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nimport collections\ndef char_frequency(a_string):\n    return collections.Counter(a_string)", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n  freq = {}\n  for c in s:\n    freq[c] = freq.get(c, 0) + 1\n  return freq\n\ndef test_char_frequency():\n  assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\ndef test_char_frequency2():\n  assert char_frequency('php')=={'p': 1, 'h': 1, 's': 1}\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] = d[c] + 1\n        else:\n            d[c] = 1\n    return d\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(s):\n    freq = {}\n    for char in s:\n        if char not in freq.keys():\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    return freq\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    d = {}\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    return d\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    return Counter(string)\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(text):\n    return {char: text.count(char) for char in text}\n\n# Test"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(alist):\n    return sorted(alist, key=lambda x: x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort_by_second(lst):\n    pass\n    # your code here\n\n\ndef test_sort_by_second():\n    assert sort_by_second([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(elements):\n    return sorted(elements, key=lambda x: x[1])\n\ndef test_sort_1():\n    assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\ndef test_sort_2():\n    assert Sort([['a', 20], ['b', 15], ['c', 10], ['d', 5]]) == [['d', 5], ['c', 10], ['b', 15], ['a', 20]]\n\ndef test_sort_3():\n    assert Sort([['a', 5], ['b', 20], ['c', 10], ['d', 15]]) == [['a', 5], ['d', 15], ['b', 20], ['c', 10]]\n\ndef test_sort_4():\n    assert Sort([['a', 10], ['b', 5], ['c', 10], ['d', 15]]) == [['b', 5], ['c', 10], ['a', 10], ['d', 15]]\n\ndef test_sort_5():\n    assert Sort([['a', 15], ['b', 20], ['c', 5], ['d', 10]]) == [['b', 20], ['c', 5], ['a', 15], ['d', 10]]\n\ndef test_sort_6():\n    assert Sort([['a', 15], ['b', 10], ['c', 20], ['d', 5]]) == [['c', 20], ['d', 5], ['a', 15], ['b', 10]]\n\ndef", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(L):\n    return sorted(L, key=lambda x:x[1])", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\nfrom typing import List, Tuple\nfrom unittest import TestCase\nfrom unittest.mock import patch\n\nfrom problems.problems import sort_list_second_element\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort_list(list_):\n    return sorted(list_, key=lambda x:x[1])\n\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n#Solution\ndef check_Validity(a,b,c):\n    if a+b>=c and a+c>=b and b+c>=a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\nfrom __future__ import print_function\nfrom __future__ import division\nfrom __future__ import absolute_import\n\ndef check_Validity(x, y, z):\n    \"\"\"\n    :param x:\n    :param y:\n    :param z:\n    :return:\n    \"\"\"\n    if x + y <= z or x + z <= y or y + z <= x:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\nimport math\ndef check_Validity(a,b,c):\n    if(a+b>c and b+c>a and a+c>b):\n        return True\n    return False\n\ncheck_Validity(1,2,3)", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    assert a + b > c and b + c > a and c + a > b\n    return True if a + b > c and b + c > a and c + a > b else False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\nimport math\n\ndef check_Validity(a,b,c):\n    \"\"\"\n    Return True if the triangle is valid, return False if it is invalid\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: bool\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    elif a == b == c:\n        return True\n    elif a == b or b == c or a == c:\n        return True\n    else:\n        # calculate the semiperimeter\n        s = (a+b+c) / 2\n        # calculate the area\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        if area % 1 == 0:\n            return True\n        else:\n            return False\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(side1, side2, side3):\n    return (side1+side2>side3) and (side2+side3>side1) and (side1+side3>side2)\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    return (a + b > c) and (a + c > b) and (b + c > a)\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    return a+b>c and a+c>b and b+c>a\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    # your code here\n    sum = a\n    for i in range(2,n+1):\n        sum = sum+i*b\n    return sum\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(start,end,n):\n    return (start + end) * n // 2\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    total = 0\n    for i in range(n+1):\n        total+=a+i*(b-a)//n\n    return total\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(n, m, d):\n    return (n + m) * ((m - n) / (d - 1)) * (d / 2)\n\n# ==============================================================================\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(start, end, step):\n    # Your code here\n    sum = 0\n    i = start\n    while i <= end:\n        sum = sum + i\n        i = i + step\n    return sum\n\n# Test Case 1\n# Correct result => True", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    if n==0:\n        return 0\n    else:\n        return a+(b-a)*(n-1)+ap_sum(a,b,n-1)", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(start, stop, step):\n    return sum([i*step for i in range(start,stop+1)])\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(start,end,step):\n    sum=0\n    for num in range(start,end+step,step):\n        sum+=num\n    return sum\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\nfrom utils import get_input\n\n\ndef ap_sum(n, k, s):\n    if n == k:\n        return n * s\n    return n * s + ap_sum(n + 1, k, s)\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,n,d):\n\treturn (n/2)*(2*a+n*d)\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month=='January' or month=='March' or month=='May' or month=='July' or month=='August' or month=='October' or month=='December':\n        return True\n    else:\n        return False\n\n#print(check_monthnum(\"February\"))\n#print(check_monthnum(\"November\"))\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\n#3 Write a function to return the starting day of the month from a given month name.", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n    month_names = (\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\")\n    if month_name in month_names:\n        if month_name == \"February\":\n            return True\n        elif month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n            return False\n        else:\n            return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n  if month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n    return True\n  else:\n    return False\n\n# Tests", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month==\"January\" or month==\"March\" or month==\"May\" or month==\"July\" or month==\"August\" or month==\"October\" or month==\"December\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month.lower() == 'february' and len(month.strip()) > 0:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\n# Solution\ndef check_monthnum(month):\n  return month in ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n    if month_name in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n    if monthname.capitalize() == \"February\":\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(input_string):\n    \"\"\"\n    Tests if word in input string ends with optional punctuation,\n    prints message if match is found\n    \"\"\"\n    if re.search(r'\\w*$', input_string):\n        return 'Found a match!'\n    else:\n        return 'No matches found.'\n\n#assert text_match_word(\"python.\")==('Found a match!')\n#assert text_match_word(\"python\")==('No matches found.')\n\n# + deletable=false editable=false nbgrader={\"grade\": true, \"grade_id\": \"ex10_test\", \"locked\": true, \"points\": 1, \"solution\": false}", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    if len(text) <= 1:\n        return \"Not enough characters\"\n    elif text[-1] in [\".\",\",\",\"?\",\"!\"]:\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    # Your code here\n    pass\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\nimport re\ndef text_match_word(text):\n  match_word = re.search('(?<![a-zA-Z0-9])python(\\.|,)?',text)\n  if match_word:\n    return 'Found a match!'\n  else:\n    return 'Not Found'\n\ntext_match_word(\"python.\")\n\ndef word_match(text):\n  match_word = re.search('(?<![a-zA-Z0-9])python(\\.|,)?',text)\n  if match_word:\n    return 'Found a match!'\n  else:\n    return 'Not Found'\n\nword_match(\"python.\")\n\n# +\nimport re\ndef word_match(text):\n  match_word = re.search('(?<![a-zA-Z0-9])python(\\.|,)?',text)\n  if match_word:\n    return 'Found a match!'\n  else:\n    return 'Not Found'\n\nword_match(\"python.\")\n# -\n\nword_match(\"python!\")\n\n# # re.search\n#\n# The search method is the primary method for searching strings. It takes the pattern as the first argument, and the string to search as the second argument.\n#\n# The search method returns a Match object.\n#\n# re.search(pattern, string)\n#\n# Parameters:\n#\n# pattern \u2013 A regular expression pattern to be matched.\n# string \u2013 A string where the pattern will be searched.\n# Returns:\n#\n# Match object if there is a match, or None if there is no match.\n#\n#\n#\n# Example:\n#\n# >>> import re\n# >>> match = re.search(r'\\w+', 'Hello world')\n# >>> match.group()\n# 'Hello'\n# >>> match = re.search(r'(?i)\\bT\\w+', 'Hello world')\n# >>> match.group()\n# 'Hello'\n# >>> match = re.search(r'(?i)\\bT\\w+', 'python world')\n# >>> match\n# None\n#\n#\n# # re.findall\n#\n#", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    return 'Found a match!' if text.endswith(\"!\") or text.endswith(\".\") else 'No match'\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word):\n    pattern = r\"^.*\" + word + r\"((?:[!?.])|$)\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    return \"No match\"\n\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n#<NAME> \n#<NAME> \n#<NAME> \n#<NAME> \n#<NAME> \n#<NAME>\n\ndef text_match_word(text):\n  if text[-1] in ('.','?','!'):\n    return('Found a match!')\n  else:\n    return('No match found.')\n\n# print text_match_word(\"python.\")\n# print text_match_word(\"python?\")\n# print text_match_word(\"python!\")\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    return 'Found a match!' if re.search(r\"(\\w+)\\.$\", text) else 'No match'\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    assert(type(text)==str)\n    pattern = re.compile(r\".*([A-Za-z])+$\")\n    return ('Found a match!') if pattern.match(text) else 'No match'\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    word_list = text.split(' ')\n    for word in word_list:\n        if word[-1] == '.' or word[-1] == '?' or word[-1] == '!':\n            return \"Found a match!\"\n    return \"Not found :(\"\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    length = len(string)\n    count = 0\n    for i in range(length):\n        count += length - i - 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    l = len(s)\n    for i in range(l):\n        count = count + l - i - 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n  if len(str) <= 1:\n    return str\n  elif str[0] == str[-1]:\n    return 1 + count_Substring_With_Equal_Ends(str[1:-1])\n  else:\n    return count_Substring_With_Equal_Ends(str[1:])\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    if len(string) < 2:\n        return 0\n    count = 1\n    for i in range(1,len(string)):\n        if string[i] == string[i-1]:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string: str) -> int:\n    count = 0\n    for i in range(1, len(string) + 1):\n        for j in range(len(string) - i + 1):\n            if string[j] == string[j+i-1]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str_value: str) -> int:\n    result = 0\n    if str_value == None or str_value == \"\":\n        return result\n\n    for i in range(len(str_value)):\n        if i < len(str_value) - 1 and str_value[i] == str_value[i + 1]:\n            result += 1\n        elif i > 0 and str_value[i] == str_value[i - 1]:\n            result += 1\n    return result\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    c = 0\n    for i in range(len(string)-2):\n        if string[i] == string[i+1] and string[i] == string[i+2]:\n            c += 1\n    return c\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[len(string)-1-i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    return len([string[i:j] for i in range(len(string)) for j in range(i+2, len(string)+1) if string[i] == string[j-1]])\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start, end):\n    max_divisor = 1\n    if start == end:\n        return start\n    for i in range(start, end):\n        if end % i == 0:\n            if i > max_divisor:\n                max_divisor = i\n    return max_divisor\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(l, r):\n    if l > r:\n        return -1\n    elif l == r:\n        return l\n    else:\n        for i in range(l, r+1):\n            if r % i == 0 and l % i == 0:\n                return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\nfrom math import sqrt\nfrom functools import reduce\ndef find_Divisor(a,b):\n    a = max(a,b)\n    b = min(a,b)\n    divisor = []\n    for i in range(1,b):\n        if b%i == 0:\n            divisor.append(i)\n    # print(divisor)\n    return reduce(lambda x,y: x if x>y else y, divisor)\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(i, j):\n    \"\"\"\n    find the maximum divisor in an interval\n    \"\"\"\n    if i == j:\n        return i\n    if j == 1:\n        return 1\n    res = 1\n    for k in range(i, j):\n        if k % i == 0:\n            res = max(res, k)\n    return res\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    ans = 0\n    for i in range(a,b+1):\n        flag = 0\n        for j in range(1,i):\n            if i%j == 0:\n                flag = 1\n        if flag == 0:\n            ans = max(ans,i)\n    return ans\n    ", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Tuple\n\n\ndef find_Divisor(x1: int, x2: int) -> int:\n    count = Counter(range(x1, x2 + 1))\n    return max(count, key=lambda x: count[x])\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    max_occ = 0\n    for i in range(a,b+1):\n        if i % 2 == 0:\n            if i % 3 == 0:\n                if i % 4 == 0:\n                    if i % 5 == 0:\n                        if i % 6 == 0:\n                            if i % 7 == 0:\n                                if i % 8 == 0:\n                                    if i % 9 == 0:\n                                        if i % 10 == 0:\n                                            max_occ = i\n            else:\n                max_occ = i\n    \n    return max_occ\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start,end):\n    n = [i for i in range(start,end+1)]\n    freq = Counter(n)\n    max_val = max(freq.values())\n    #print(freq)\n    ans = []\n    for i in freq.keys():\n        if freq[i] == max_val:\n            ans.append(i)\n    return max(ans)\n\n#find_Divisor(1,100)\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\nfrom random import randrange\n\ndef find_Divisor(a,b):\n    l=a\n    h=b\n    while l<=h:\n        m=randrange(l,h)\n        if a%m ==0 and b%m==0:\n            if m > find_Divisor(a,b):\n                return m\n            else:\n                return find_Divisor(a,b)\n        else:\n            l=m+1\n    return 0", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start, end):\n    divisor = []\n    for num in range(start, end+1):\n        for i in range(1,num+1):\n            if num % i == 0:\n                divisor.append(i)\n    return max(divisor)\n\n\ndef find_Divisor1(start, end):\n    if start > end:\n        return 0\n    if start == end:\n        return start\n    #If start and end are not equal, check if end is divisible by start. \n    #If start divides end, return start, else return the largest divisor of start \n    if start % end == 0:\n        return start\n    else:\n        for i in range(start,end):\n            if start % i == 0 and i < end:\n                return i\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    return sum(sorted(nums)[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\n# Code\ndef sum_three_smallest_nums(nums):\n    # Put your code here\n    return sorted(nums)[:3].sum()\n\n\n# Tests\nimport unittest\n\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(list1):\n    list1.sort()\n    return sum(list1[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(numbers):\n    numbers.sort()\n    return sum(numbers[:3])", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\n#SOLUTION\ndef sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[:3])", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums = sorted(nums)[:3]\n    return sum(nums)\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    \"\"\"\n    Args:\n       nums(list): List of numbers where the 3 smallest numbers are to be added\n    Returns:\n       int: The sum of the three smallest numbers\n    \"\"\"\n    nums.sort()\n    return sum(nums[:3])\n\n# sum_three_smallest_nums([10,20,30,40,50,60,7]) # 37\n# sum_three_smallest_nums([10,10,10]) # 20\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    sorted_nums = sorted(numbers)\n    return sum(sorted_nums[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\n# Solution\ndef sum_three_smallest_nums(list1):\n    # 1. sort the array\n    list1 = sorted(list1)\n    # 2. find the sum of the three smallest numbers\n    sum = 0\n    for i in range(3):\n        sum += list1[i]\n    return sum\n\n# Tests", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    if len(nums)<3:\n        return 0\n    return sum(nums[:3])\n\n\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom typing import Any, Tuple, TypeVar\n\nT = TypeVar(\"T\")\n\n\ndef set_to_tuple(items: set[T]) -> Tuple[T, ...]:\n    return tuple(items)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(in_set):\n  return tuple(in_set)\n\ndef test_set_to_tuple():\n  assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\n#%%", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(my_set):\n    return tuple(my_set)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\n# Use an accumulator to collect the elements of the set into an ordered tuple.\ndef set_to_tuple(s):\n    return tuple(s)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(A):\n    return tuple(A)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\n# Set to tuple\n\ndef set_to_tuple(set):\n    return tuple(set)\n\n# Tests\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(my_set):\n    return tuple(sorted(my_set))\n\ndef test_set_to_tuple_1():\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\ndef test_set_to_tuple_2():\n    assert set_to_tuple({5, 4, 3, 2, 1}) == (1, 2, 3, 4, 5)\n\ndef test_set_to_tuple_3():\n    assert set_to_tuple({5, 5, 5, 5}) == (5, )\n\ndef test_set_to_tuple_4():\n    assert set_to_tuple({5, 4, 5, 4}) == (4, 5)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(x):\n    return tuple(sorted(x))\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom typing import Tuple\n\n\ndef find_minimum_range(arrays: list[list[int]]) -> Tuple[int, int]:\n    \"\"\"Find the smallest range that includes at-least one element from each of the given arrays.\"\"\"\n    arrays = sorted(arrays, key=len)\n    low = arrays[0][0]\n    high = arrays[0][-1]\n    for i in range(1, len(arrays)):\n        curr_low = arrays[i][0]\n        curr_high = arrays[i][-1]\n        if curr_high < low:\n            low = curr_low\n        elif curr_low > high:\n            high = curr_high\n    return (low, high)\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom math import inf\n\n\ndef find_minimum_range(arr):\n    if len(arr) == 0:\n        return []\n\n    arr.sort()\n    start = arr[0][0]\n    end = arr[-1][-1]\n    min_range = end - start\n\n    for index, _ in enumerate(arr):\n        start = min(start, arr[index][0])\n        end = max(end, arr[index][-1])\n        min_range = min(min_range, end - start)\n\n    return (start, end)\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrays):\n    arrays = sorted(arrays)\n    smallest_range = [10**10, 10**10]\n    for i in range(len(arrays) - 1):\n        if arrays[i][-1] < smallest_range[0]:\n            smallest_range[0] = arrays[i][-1]\n        if arrays[i+1][0] > smallest_range[1]:\n            smallest_range[1] = arrays[i+1][0]\n    return smallest_range\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    arr_lengths = [len(arr) for arr in arrs]\n    arr_lengths.sort()\n\n    minimum_range = 2147483647\n    for i in range(arr_lengths[0], arr_lengths[-1] + 1):\n        current_range = abs(i - arr_lengths[-1]) + abs(i - arr_lengths[0])\n        if current_range < minimum_range:\n            minimum_range = current_range\n            return i, i + arr_lengths[-1]\n\n    return 0, 0\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    min_len = len(min(arrays, key=len))\n    for arr in arrays:\n        min_arr = arr[:min_len]\n        if any(item not in min_arr for item in arr):\n            return (min(arr), max(arr))\n    return (min(arr), max(arr))\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    arr.sort()\n    min_arr = arr[0]\n    min_range = arr[len(arr) - 1] - arr[0]\n    \n    for i in range(1, len(arr)):\n        min_arr = min(min_arr, arr[i])\n        min_range = min(min_range, arr[i] - min_arr)\n    \n    return min_arr, min_range\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nimport collections\n\n\ndef find_minimum_range(arr):\n    # Write your code here.\n    arr.sort()\n    min_range = (arr[-1][-1] - arr[0][0])\n    for i in range(len(arr) - 1):\n        range_1 = arr[i + 1][0] - arr[i][-1]\n        range_2 = arr[i + 1][-1] - arr[i][0]\n        min_range = min(min_range, range_1, range_2)\n    return min_range, arr[0][0], arr[-1][-1]\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\n# if you want to see an example of what happens when you dont do something like this, \n# I encourage you to check out the below link\n# https://stackoverflow.com/questions/11135396/in-python-why-is-it-faster-to-compute-powers-by-squaring-than-by-using-a-l\ndef my_pow(base, power):\n    \"\"\"\n    Return the base to the power of power, WITHOUT using the ** operator\n    \"\"\"\n    if power == 0:\n        return 1\n    elif power % 2 == 0:\n        return my_pow(base, power//2) ** 2\n    else:\n        return base * my_pow(base, power-1)\n\ndef find_minimum_range(lists):\n    \"\"\"\n    Return the minimum range that includes at-least one element from each of the given arrays.\n    \"\"\"\n    # first we need to check that the given lists are not empty and have the same length\n    if len(lists) == 0:\n        return ()\n    if len(set([len(list_) for list_ in lists])) != 1:\n        raise ValueError(\"The given lists have different lengths\")\n    # check if all the lists are empty\n    if all([len(list_) == 0 for list_ in lists]):\n        return ()\n\n    # first we need to sort all the lists in non-decreasing order\n    # note that we need to use the -1 trick because lists are mutable and lists are compared by pointer, \n    # not their contents\n    lists.sort(key = lambda list_: list_[-1] if list_ else float('-inf'))\n    # now all the lists should be sorted in non-decreasing order\n\n    # we need to know the length of the shortest list, because we will need that information\n    # as we iterate through the lists\n    shortest_list_len = len(lists[0])\n    \n    # now we can iterate through the lists\n   ", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    sorted_arr = sorted(arr)\n    end_of_range = sorted_arr[-1]\n    start_of_range = sorted_arr[0]\n\n    for i in range(len(sorted_arr) - 1):\n        start = sorted_arr[i]\n        end = sorted_arr[i + 1]\n        if end - start < end_of_range - start_of_range:\n            start_of_range = start\n            end_of_range = end\n\n    return (start_of_range, end_of_range)\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef dig_let(text: str) -> Tuple[int, int]:\n    digits, letters = 0, 0\n    for char in text:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n        else:\n            pass\n    return digits, letters\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    if len(s) == 0:\n        return (0,0)\n    dig = 0\n    let = 0\n    for c in s:\n        if c.isdigit():\n            dig += 1\n        elif c.isalpha():\n            let += 1\n    return (dig,let)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(str):\n    letters = 0\n    digits = 0\n    for char in str:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n        else:\n            pass\n    return digits, letters\n\n\n# +", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n    digits = 0\n    letters = 0\n    \n    for i in string:\n        if i.isalpha():\n            letters += 1\n        elif i.isdigit():\n            digits += 1\n\n    return digits, letters\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\nimport re\n\ndef dig_let(txt):\n    \"\"\"Return count of digits and letters in string\"\"\"\n    digits = 0\n    letters = 0\n    for char in txt:\n        if re.match('\\d', char):\n            digits += 1\n        elif re.match('[A-Za-z]', char):\n            letters += 1\n    return digits, letters\n\ndef test_dig_let():\n    \"\"\"Test dig_let function\"\"\"\n    assert dig_let(\"Python 101\") == (6, 3)\n    assert dig_let(\"12345\") == (5, 0)\n    assert dig_let(\"python123\") == (6, 3)\n    assert dig_let(\"Python00101\") == (7, 3)\n    assert dig_let(\"Python56\") == (6, 2)\n    assert dig_let(\"123\") == (3, 0)\n    assert dig_let(\"101\") == (3, 0)\n    assert dig_let(\"123456789\") == (9, 0)\n    assert dig_let(\"123.45\") == (6, 0)\n    assert dig_let(\"123.\") == (4, 0)\n    assert dig_let(\"123.567\") == (7, 0)\n    assert dig_let(\"python123.45\") == (10, 3)\n    assert dig_let(\"python123.\") == (8, 3)\n    assert dig_let(\"python123.567\") == (10, 3)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n# 6 0\n# 6 2\n# 6 4\n# 6 6\n# 6 8\n# 5 10\n# 4 12\n# 4 14\n# 3 16\n# 3 18\n# 3 20\n# 3 22\n# 2 24\n# 2 26\n# 2 28\n# 2 30\n# 2 32\n# 2 34\n# 2 36\n# 2 38\n# 1 40\n# 1 42\n# 1 44\n# 1 46\n# 1 48\n# 1 50\n# 1 52\n# 1 54\n# 1 56\n# 1 58\n# 1 60\n# 1 62\n# 1 64\n# 1 66\n# 1 68\n# 1 70\n# 1 72\n# 1 74\n# 1 76\n# 1 78\n# 1 80\n# 1 82\n# 1 84\n# 1 86\n# 1 88\n# 1 90\n# 1 92\n# 1 94\n# 1 96\n# 1 98\n\nimport re\n\ndef dig_let(word):\n    # code here\n    a = list(word)\n    a = [i for i in a if i.isalpha()]\n    b = list(word)\n    b = [i for i in b if i.isdigit()]\n    return len(b),len(a)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    dig=0\n    let=0\n    for char in string:\n        if char.isalpha():\n            let+=1\n        elif char.isnumeric():\n            dig+=1\n        else:\n            pass\n    return (dig,let)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\nfrom string import digits,ascii_letters\ndef dig_let(string):\n    digits_letters = list(digits+ascii_letters)\n    digits_in_string = [x for x in string if x in digits]\n    letters_in_string = [x for x in string if x not in digits]\n    return (len(digits_in_string),len(letters_in_string))", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(word):\n    return len(word), len([x for x in word if x.isalpha()])\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    dig = 0\n    let = 0\n    for i in s:\n        if i.isalpha():\n            let += 1\n        else:\n            dig += 1\n    return dig,let\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(s,e):\n    \"\"\"\n    Input\n    A range of 2 numbers s and e which are natural numbers.\n    Output\n    Returns the number of odd squares in the given range\n    \"\"\"\n    return len([i for i in range(s,e+1) if any([j for j in range(1,i+1) if i % j == 0 and i // j % 2 == 1])])\n\ndef test_count_Odd_Squares():\n    assert count_Odd_Squares(5,100) == 8\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\n# Solution :\ndef count_Odd_Squares(start,end):\n    return sum([1 for i in range(start,end+1) if sum([1 for j in range(1,i+1) if i%j==0])%2==1])\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nfrom math import sqrt\n\n\ndef is_prime(number):\n    for i in range(2, sqrt(number)+1):\n        if number % i == 0:\n            return False\n    return True\n\n\ndef is_odd_prime(number):\n    return is_prime(number) and number % 2 != 0\n\n\ndef count_odd_prime_factors(number):\n    count = 0\n    for i in range(1, number+1):\n        if is_odd_prime(i) and number % i == 0:\n            count += 1\n    return count\n\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if count_odd_prime_factors(i) % 2 != 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(x,y):\n    cnt = 0\n    for i in range(x,y+1):\n        a = 0\n        for j in range(1,int(i**0.5)+1):\n            if (i%j) == 0:\n                a += 2\n        if a % 2 == 1:\n            cnt += 1\n    return cnt\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nfrom __future__ import print_function\ndef count_Odd_Squares(start,end):\n    odd_count = 0\n    for i in range(start,end):\n        if i < 1:\n            continue\n        count = 0\n        j = i\n        while j > 1:\n            if j%2 == 0:\n                j = j/2\n                continue\n            count += 1\n            j = j-1\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end+1):\n        j = 1\n        while j*j < i:\n            if i % j == 0:\n                count += 2\n            j += 1\n        if j*j == i:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\n# + id=\"cI8dEQJFvI9f\" colab={\"base_uri\": \"https://localhost:8080/\"} outputId=\"e433304f-6f8d-4437-b143-d10f29d3f84f\"\ndef count_Odd_Squares(n,m):\n    count = 0\n    for i in range(n,m+1):\n        t = i\n        while t > 0:\n            if t%2 != 0:\n                count+=1\n                break\n            else:\n                t = int(t/2)\n    return count\n\ncount_Odd_Squares(5,100)\n\n\n# + [markdown] id=\"Z0TBymP4vgKq\"\n# ## Recursive Functions\n#\n# A function that calls itself is called **Recursive Function**\n#\n# **Recursion** is a technique for solving a problem by solving smaller instances of the same problem.\n#\n# Recursion is very useful in algorithm design. Recursion is useful when it is not possible to describe a problem in terms of a single non-recursive solution. It is also useful for reducing a problem to simpler instances that are easier to solve, and then to combine the answers.\n#\n# **Recursive function** is a function that calls itself.\n#\n# The base case of the recursion is a simple case where the solution of the problem can be obtained without invoking the function. The recursive case is a case where the function is applied to the solution of smaller instances of the same problem.\n\n# + [markdown] id=\"J12l7kY2vo4p\"\n# ### Factorial of a number\n#\n# A **factorial** of a positive number is the product of all the natural numbers less than or equal to the number. The factorial of 5 is given by:\n#\n# 5! = 5 x 4 x 3 x 2 x 1 = 120\n#\n# 1! = 1\n#\n# The **factorial** of a number can be written using a recursive definition:\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a,b):\n    count = 0\n    for i in range(a,b+1):\n        if(len(list(filter(lambda x:x!=1 and i%x==0,range(1,i))))%2==1):\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\n# Solution 1 - naive solution\ndef count_Odd_Squares(start,end):\n    count = 0\n    for i in range(start, end + 1):\n        if count_odd_factor(i) == True:\n            count += 1\n    return count\n\ndef count_odd_factor(num):\n    count = 0\n    for i in range(1, int(num**(0.5) + 1)):\n        if num%i == 0:\n            if i%2 == 1:\n                count += 1\n            if (num/i)%2 == 1:\n                count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n\n# Solution 2 - optimized solution\ndef count_Odd_Squares_optimized(start,end):\n    count = 0\n    for i in range(start, end + 1):\n        if count_odd_factor_optimized(i) == True:\n            count += 1\n    return count\n\ndef count_odd_factor_optimized(num):\n    count = 0\n    for i in range(1, int(num**(0.5) + 1)):\n        if num%i == 0:\n            if i%2 == 1:\n                count += 1\n            if (num/i)%2 == 1:\n                count += 1\n    if num%4 == 1:\n        count += 1\n    return count\n\n\n# +\n# %%writefile test_count_Odd_Squares.py\n\nfrom nose.tools import assert_equal, assert_raises\n\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    # write your code here\n    return [nums[i]-nums[i-1] for i in range(1,len(nums))]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(input_list):\n    diffs = []\n    for i in range(len(input_list)):\n        if i == len(input_list) - 1:\n            diffs.append(input_list[i])\n            break\n        else:\n            diffs.append(input_list[i+1] - input_list[i])\n    return diffs\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\nimport unittest\n\n\ndef diff_consecutivenums(nums):\n    result = []\n    for i in range(0, len(nums) - 1):\n        result.append(nums[i + 1] - nums[i])\n    return result\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    res = []\n    i = 1\n    while i < len(nums):\n        res.append(nums[i] - nums[i-1])\n        i += 1\n    return res", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\nfrom functools import reduce\n\n\ndef diff_consecutivenums(nums):\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]\n\n\ndef diff_consecutivenums2(nums):\n    return reduce(lambda a, b: a + [b-a[-1]], nums[1:], [nums[0]])\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\nimport collections\ndef diff_consecutivenums(nums):\n    \"\"\"\n    Solution:\n    Difference between consecutive numbers can be obtained by taking the difference of next and previous numbers\n    \"\"\"\n    res = []\n    for i in range(len(nums)-1):\n        res.append(nums[i+1] - nums[i])\n    res.append(nums[0] - nums[-1])\n    return res\n\ndef diff_consecutivenums(nums):\n    \"\"\"\n    Alternate Solution:\n    Using deque\n    \"\"\"\n    from collections import deque\n    res = []\n    d = deque([nums[0], nums[1]])\n    for num in nums[2:]:\n        res.append(num - d[0])\n        d.append(d.popleft())\n        d.append(num)\n    return res\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\nfrom typing import List\n\ndef diff_consecutivenums(nums: List[int]) -> List[int]:\n\n    new_nums = nums.copy()\n    new_nums[0]=0\n    for i in range(len(nums)):\n        new_nums[i]=new_nums[i]-new_nums[i-1]\n    return new_nums\n\n\ndef diff_consecutivenums(nums: List[int]) -> List[int]:\n\n    new_nums = []\n    if len(nums)<2:\n        return nums\n    new_nums.append(nums[0])\n    for i in range(len(nums)):\n        if i==0:\n            continue\n        new_nums.append(nums[i]-nums[i-1])\n    return new_nums\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(lst):\n    return [lst[i] - lst[i-1] for i in range(1, len(lst))]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    return [nums[i+1] - nums[i] for i in range(len(nums) - 1)]", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    result = [0]\n    for i in range(1, len(nums)):\n        result.append(nums[i]-nums[i-1])\n    return result\n\n# diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    \"\"\"\n    >>> zigzag(4, 3)\n    5\n    >>> zigzag(4, 2)\n    4\n    >>> zigzag(4, 1)\n    2\n    >>> zigzag(4, 0)\n    0\n    \"\"\"\n    if k > n:\n        raise Exception(\"k must be less than n\")\n\n    last = n - k\n    return (2 * last) + 1\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n  if n == 1:\n    return 1\n  else:\n    return k*k + n - 2\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\nimport functools\nimport operator\nfrom typing import List, Tuple\n\n\n@functools.lru_cache(maxsize=None)\ndef zigzag(n: int, k: int) -> int:\n    if k == 0 or n == 1:\n        return 1\n    if k == n:\n        return 1 + k - n\n    if k == 1:\n        return 1 + n\n    return 1 + (k + n - 1) // 2 * (k + 2 * n - 2) // 2\n\n\n@functools.lru_cache(maxsize=None)\ndef zigzag_params(n: int, k: int) -> Tuple[int, int]:\n    if k == 0 or n == 1:\n        return 1, 0\n    if k == n:\n        return 1 + k - n, k - n\n    if k == 1:\n        return 1 + n, n - 1\n    return 1 + (k + n - 1) // 2 * (k + 2 * n - 2) // 2, (k + n - 1) // 2\n\n\ndef zigzag_params_list(n: int, k: int) -> List[Tuple[int, int]]:\n    if k == 0 or n == 1:\n        return [(1, 0)]\n    if k == n:\n        return [(1 + k - n, k - n)]\n    if k == 1:\n        return [(1 + n, n - 1)]\n    result = [(1 + (k + n - 1) // 2 * (k + 2 * n - 2) // 2, (k + n - 1) // 2)]\n    if k == n - 1:\n        return result\n    result.extend([(1 + k + (i - 1) * (k - 1) + (k + i) * (k + n - 1 - i), k + i) for i in range(1, n - k)])\n    return result\n\n\ndef zigzag_params_list_reverse(n: int,", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    return k if k < n - k else (2 * n - 2) - k\n\n\ndef test_zigzag():\n    assert zigzag(3, 0) == 1\n    assert zigzag(3, 1) == 3\n    assert zigzag(3, 2) == 2\n    assert zigzag(4, 0) == 1\n    assert zigzag(4, 1) == 5\n    assert zigzag(4, 2) == 3\n    assert zigzag(4, 3) == 5\n    assert zigzag(5, 0) == 1\n    assert zigzag(5, 1) == 7\n    assert zigzag(5, 2) == 5\n    assert zigzag(5, 3) == 9\n    assert zigzag(5, 4) == 4\n    assert zigzag(6, 0) == 1\n    assert zigzag(6, 1) == 9\n    assert zigzag(6, 2) == 7\n    assert zigzag(6, 3) == 11\n    assert zigzag(6, 4) == 6\n    assert zigzag(6, 5) == 10\n\n\ndef main():\n    n = int(input('Input n: '))\n    k = int(input('Input k: '))\n    print(zigzag(n, k))\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\n# assuming n is odd.\ndef zigzag(n, k):\n    if k == 0:\n        return 1\n    else:\n        if k > (n // 2):\n            k = n - k\n        return 2 ** (k - 1) * (4 * zigzag(n, k - 1) - 2 * zigzag(n, k - 2))\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\nfrom math import factorial\n\n\ndef zigzag(n, k):\n    if n == 0:\n        return 0\n    return factorial(n) // factorial(k) // factorial(n - k)\n\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if k == 1:\n        return n\n    \n    for i in range(k-1):\n        n = n * (n+1) // 2\n    \n    return n\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\n# 1. Draw a zigzag image of size n X n.\n# 2. Assume 1, 2, ... , n^2 are the numbers in ascending order\n# 3. Start at 1, and count k numbers (k <= n^2) until you get to a zigzag.\n# 4. Repeat 3 until you get to a \"corner\".\n\nfrom typing import List\n\n\ndef zigzag(n: int, k: int) -> int:\n    if n == 1:\n        return 1\n    if k > n**2:\n        return k - n**2\n\n    k -= 1\n    for i in range(2, n + 1):\n        if k == 0:\n            return i\n        if k < i:\n            return i + k\n        if k == i - 1 or k == i:\n            k -= i - 1\n        else:\n            k -= i\n\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    # write your code in Python 3.6\n    '''\n    maxNum = 0\n    temp1 = 0\n    temp2 = 0\n    for i in range(n):\n        if i%2 == 0:\n            temp1 = temp1+1\n        else:\n            temp2 = temp2+1\n    maxNum = temp1 if temp1>temp2 else temp2\n    '''\n    return max(sum(range(1, n+1, 2)), sum(range(1, n+1, 2)))\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    return n*(2*k-2)+1 if k <= n/2 else k-n+2"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(m,n):\n    return m*n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# %%\ndef count_squares(width, height):\n    return width * height\n\n# %%\ncount_squares(4,3)\n\n# %% [markdown]", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    return (width + 1) * (height + 1)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(m,n):\n\treturn m*n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\nimport pytest\n\n\ndef count_squares(n, m):\n    total = 0\n    for i in range(n):\n        for j in range(m):\n            total += 1\n    return total\n\n\ndef test_count_squares():\n    assert count_squares(4, 3) == 20\n    assert count_squares(0, 0) == 0\n    assert count_squares(3, 3) == 9\n    assert count_squares(1, 1) == 1\n    assert count_squares(1, 5) == 25\n\n\ndef test_with_pytest():\n    assert count_squares(4, 3) == 20\n    assert count_squares(0, 0) == 0\n    assert count_squares(3, 3) == 9\n    assert count_squares(1, 1) == 1\n    assert count_squares(1, 5) == 25\n\n\ndef test_with_pytest_2():\n    \"\"\"test using pytest module\"\"\"\n    assert count_squares(4, 3) == 20\n    assert count_squares(0, 0) == 0\n    assert count_squares(3, 3) == 9\n    assert count_squares(1, 1) == 1\n    assert count_squares(1, 5) == 25\n\n\ndef test_with_pytest_3():\n    \"\"\"test using pytest module\"\"\"\n    assert count_squares(4, 3) == 20\n    assert count_squares(0, 0) == 0\n    assert count_squares(3, 3) == 9\n    assert count_squares(1, 1) == 1\n    assert count_squares(1, 5) == 25\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(row, column):\n    return row*column\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(row,col):\n    total_count=0\n    for i in range(row):\n        for j in range(col):\n            total_count+=1\n    return total_count\n\nrow, col = 4, 3", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a, b):\n    \"\"\"Return the number of squares in a rectangle\"\"\"\n    return a * b\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    if n == 0:\n        return 1\n    ways = 0\n    for i in range(10):\n        ways += find_ways(n - 1, i)\n    return ways\n\n\ndef find_ways(n, prefix_sum):\n    if n == 0:\n        return 1\n    ways = 0\n    for i in range(10):\n        if prefix_sum + i > 0:\n            ways += find_ways(n - 1, prefix_sum + i)\n    return ways", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\nfrom typing import List\nfrom typing import Optional\n\n\ndef find_ways(\n    length: int,\n) -> int:\n    if length == 1:\n        return 1\n    if length == 2:\n        return 2\n    if length == 3:\n        return 4\n\n    return sum(\n        find_ways(length - 1) for length in range(1, length + 1) if length % 2 == 1\n    )\n\n\ndef main() -> None:\n    for length in range(1, 6):\n        print(f\"For length {length}, found {find_ways(length)} ways\")\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(s):\n  # Implement this function\n  pass", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\nfrom typing import List\n\n\ndef find_ways(length: int, nums: List[int] = None) -> int:\n    # Build prefix sums\n    prefix_sums = [0]\n    for num in nums or [0]:\n        prefix_sums.append(prefix_sums[-1] + num)\n\n    # Track previously encountered sums\n    previous_sums = {0}\n    # Track current sums\n    current_sums = set()\n\n    # Iterate through prefix sums\n    for prefix_sum in prefix_sums:\n        # Add current sum to set of current sums\n        current_sums.add(prefix_sum)\n\n        # Iterate through previously encountered sums\n        for previous_sum in previous_sums:\n            # Find the remainder\n            remainder = prefix_sum - previous_sum\n\n            # Check if remainder is less than 0 or if the remainder is in the set of current sums\n            if remainder < 0 or remainder in current_sums:\n                # Add remainder to set of previously encountered sums\n                previous_sums.add(remainder)\n\n    # Return the length of the previously encountered sums\n    return len(previous_sums)\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    if n == 1:\n        return 2\n    return find_ways(n-1) + find_ways(n-2)\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef find_ways(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # TLE\n    return sum(1 for i in range(n + 1))\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\nfrom typing import List\n\n\ndef find_ways(length: int) -> int:\n    ways = [0] * length\n    ways[0] = 1\n    for i in range(length):\n        if ways[i] > 0:\n            ways[i + 1] += ways[i]\n            ways[i + 2] += ways[i]\n            ways[i + 3] += ways[i]\n    return ways[length]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(n, arr=[0,1,2,3]):\n    arr = sorted(arr)\n    out = 0\n    #arr = arr.copy()\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i] = 1\n        if arr[i] < n:\n            out += arr[i]\n            arr[i] += 1\n        else:\n            break\n    return out\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    # Write your code here\n    # if length == 1:\n    #     return 1\n    # else:\n    #     return find_ways(length-1) + find_ways(length-2) + find_ways(length-3)\n    \n    # if length == 1:\n    #     return 1\n    # else:\n    #     return find_ways(length-1) + find_ways(length-2) + find_ways(length-3)\n    if length == 1:\n        return 1\n    else:\n        return find_ways(length-1) + find_ways(length-2) + find_ways(length-3)\n\n\ndef find_ways(length):\n    # Write your code here\n    # if length == 1:\n    #     return 1\n    # else:\n    #     return find_ways(length-1) + find_ways(length-2) + find_ways(length-3)\n    \n    # if length == 1:\n    #     return 1\n    # elif length == 2:\n    #     return 2\n    # else:\n    #     return find_ways(length-1) + find_ways(length-2) + find_ways(length-3)\n    \n    # if length == 1:\n    #     return 1\n    # elif length == 2:\n    #     return 2\n    # else:\n    #     return find_ways(length-1) + find_ways(length-2) + find_ways(length-3)\n    \n    if length == 1:\n        return 1\n    elif length == 2:\n        return 2\n    else:\n        return find_ways(length-1) + find_ways(length-2) + find_ways(length-3)\n\ndef find_ways(length):\n    # Write your code here\n    # if length == 1:\n    #     return 1\n    # else:\n    #     return find_ways(length-1) + find_ways(length-2) + find_ways(length-3)\n    if length == 1:\n        return 1\n    elif length == 2:", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef find_ways(length: int, nums: List[int] = None) -> int:\n    nums = nums or [1, 2, 3, 4]\n\n    sums = defaultdict(int)\n    for num in nums:\n        sums[num] += 1\n\n    dp = [0] * length\n    for i in range(1, length + 1):\n        prev = 0\n        for num in nums:\n            if num < i:\n                prev += sums[num]\n            else:\n                prev += dp[i - num - 1]\n        dp[i - 1] = prev\n\n    return dp[-1]\n\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    \"\"\"\n    :param: s - input string\n    return - \"Yes\" if the input string is a binary string.\n             \"No\" otherwise.\n    \"\"\"\n    \n    return \"Yes\" if s.isnumeric() and s.count(\"0\") <= 1 and s.count(\"1\") <= 1 else \"No\"\n    \n    ", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    if (string == '0') or (string == '1'):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    #Base case:\n    if len(s) == 0:\n        return \"Yes\"\n    #Base case:\n    elif len(s) == 1:\n        if s[0] in ['0', '1']:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    #Recursive case:\n    else:\n        if s[0] in ['0', '1']:\n            return check(s[1:])\n        else:\n            return \"No\"\n    ", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(bin_str):\n    return \"Yes\" if bin_str.replace(\"0\", \"\").replace(\"1\", \"\") == \"\" else \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i] != '0' and s[i] != '1':\n            return \"No\"\n        if s[j] != '0' and s[j] != '1':\n            return \"No\"\n        i += 1\n        j -= 1\n    return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(n):\n    n = str(n)\n    for i in n:\n        if i != \"0\" and i != \"1\":\n            return \"No\"\n    return \"Yes\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(binary_string):\n    for char in binary_string:\n        if char not in \"01\":\n            return \"No\"\n    return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(n):\n    if(n.startswith(\"0\")):\n        return \"No\"\n    else:\n        return \"Yes\"", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    return \"Yes\" if string.replace('0', '').replace('1', '') == '' else \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n#\n# Solution\n#\ndef check(str1):\n    for char in str1:\n        if char != '0' and char != '1':\n            return \"No\"\n    return \"Yes\"\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\n# Write your code here\ndef minimum_Length(s):\n    minimum_length = len(s)\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i != j:\n                s_new = s[:i] + s[j+1:]\n                if len(s_new) < minimum_length:\n                    minimum_length = len(s_new)\n    return minimum_length\n\n# assert minimum_Length(\"mnm\") == 1\n\n# pytest\nimport pytest\ndef test_minimum_Length():\n    assert minimum_Length(\"mnm\") == 1\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(str1):\n    len1 = len(str1)\n    while(True):\n        n = len(str1)\n        for i in range(len1-1):\n            if(str1[i] == str1[i+1]):\n                str1 = str1[:i] + str1[i+1:]\n                n = len(str1)\n                break\n        if(n == len1):\n            return n\n        ", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    # code goes here\n    min_length=len(s)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if s[i]==s[j]:\n                min_length-=1\n    return min_length\n\n#main", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(str):\n    if len(str) == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(len(str)):\n            for j in range(len(str)):\n                if i != j:\n                    if str[i] == str[j]:\n                        count += 1\n        if count == len(str) - 1:\n            return len(str) - 1\n        else:\n            return minimum_Length(str[1:])\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\nimport pytest\n\n\ndef minimum_length(string):\n    \"\"\"Given a string, return the minimum length string that can be made by removing\n    one occurrence of any character.\n\n    >>> minimum_length(\"mnm\")\n    1\n    >>> minimum_length(\"mnnm\")\n    2\n    >>> minimum_length(\"abcde\")\n    1\n    \"\"\"\n    return len(set(string))\n\n\ndef test_minimum_length():\n    \"\"\"Test the minimum_length function.\"\"\"\n    assert minimum_length(\"mnm\") == 1\n    assert minimum_length(\"mnnm\") == 2\n    assert minimum_length(\"abcde\") == 1\n\n\ndef test_minimum_length_fail():\n    \"\"\"Test the minimum_length function with a failing example.\"\"\"\n    with pytest.raises(AssertionError):\n        assert minimum_length(\"mnmm\") == 3\n        assert minimum_length(\"mnnmm\") == 4\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    min_len = 0\n    for i in range(len(string)):\n        if i == 0:\n            min_len = min_len + 1\n        if string[i-1] != string[i]:\n            min_len = min_len + 1\n    return min_len", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    # Your code here\n    # Taking input\n    string = input()\n    # making a list of all the unique characters\n    list = []\n    for char in string:\n        if char not in list:\n            list.append(char)\n\n    # Finding the length of the string\n    length = len(string)\n\n    # Looping over all the characters in the string\n    for char in string:\n        # If there are two or more occurrences of a particular character\n        if string.count(char) >= 2:\n            # remove that character\n            new_string = string.replace(char, '')\n            # check if length of the new string is less than the length of the original string\n            if len(new_string) < length:\n                length = len(new_string)\n\n    return length\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\nfrom collections import defaultdict\ndef minimum_Length(str1):\n    ls = defaultdict(int)\n    for char in str1:\n        ls[char] += 1\n    ls = list(ls.values())\n    ls.sort()\n    print(ls)\n    ls.reverse()\n    return len(str1) - sum(ls)", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    dict = {}\n    # store the count of each character in a dictionary\n    for i in string:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    # print(dict)\n    # remove the character which count is 1\n    for i in dict:\n        if dict[i] == 1:\n            del dict[i]\n    # print(dict)\n    # return the length of the string left after removing all the character occuring only once\n    return len(string) - len(dict)\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    for i in range(n):\n        if arr[i] == k:\n            return i\n    return -1\n\n#write a python program to check if a number is divisible by a given array of numbers.", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,ele,times):\n    dict = {}\n    for i in range(len(arr)):\n        if arr[i] in dict:\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    for i in range(len(arr)):\n        if times == dict[arr[i]]:\n            return arr[i]\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    arr = sorted(arr)\n    for i in range(n):\n        if(arr[i] == k):\n            return arr[i]\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(a, n, k):\n    if k==1:\n        return a.index(0)\n    for i in range(n):\n        if k%a[i] == 0:\n            return i\n    return -1\n    \n\n\nfirst_Element([0,1,2,3,4,5],6,1) #0\nfirst_Element([0,1,2,3,4,5],6,2) #4\nfirst_Element([0,1,2,3,4,5],6,3) #2\nfirst_Element([0,1,2,3,4,5],6,4) #-1\nfirst_Element([0,1,2,3,4,5],6,5) #-1\nfirst_Element([0,1,2,3,4,5],6,6) #-1\nfirst_Element([0,1,2,3,4,5],6,7) #-1\nfirst_Element([0,1,2,3,4,5],6,8) #-1\nfirst_Element([0,1,2,3,4,5],6,9) #-1\nfirst_Element([0,1,2,3,4,5],6,10) #-1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(array, n, k):\n    l = len(array)\n    f = {}\n    for i in array:\n        if i not in f:\n            f[i] = 1\n        else:\n            f[i] += 1\n    for i in f:\n        if f[i] == k:\n            return i\n    return -1", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_element(arr, n, k):\n    return arr.index(k)\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, n, k):\n    # Your code here\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            count +=1\n        if count == 1:\n            return k\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, k, n):\n    for i in range(n):\n        if arr.count(i) == k:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    # your code here\n    for i in range(n):\n        if arr[i]==k:\n            return i\n    return -1"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n  new_string = string.lower()\n  for char in new_string:\n    if new_string.count(char) > 1:\n      return False\n  return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    if len(set(string)) == len(string):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    '''\n    Solution using sets\n    '''\n    return len(set(string)) == len(string)\n\ndef unique_Characters(string):\n    '''\n    Solution using dictionary\n    '''\n    char_set = set()\n    for char in string:\n        if char in char_set:\n            return False\n        char_set.add(char)\n\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            return False\n        else:\n            char_dict[char] = char\n    return True\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    char = set()\n    for i in string:\n        if i in char:\n            return False\n        else:\n            char.add(i)\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(s):\n    if len(s) > len(set(s)):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(s):\n    return len(set(list(s))) == len(list(s))\n\n\ndef unique_Characters2(s):\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True\n\n\ndef unique_Characters3(s):\n    return len(set(list(s))) == len(list(s))\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n# Definition for singly-linked list.", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    return len(set(string)) == len(string)\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, column):\n    new_list = []\n    for row in nested_list:\n        if len(row) == 1:\n            row.pop(0)\n        else:\n            row.pop(column)\n    return nested_list\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, col):\n    \"\"\"\n    removes col from lst\n    \"\"\"\n    for row in lst:\n        if col < len(row):\n            row.pop(col)\n    return lst\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, idx):\n    '''\n    :param lst: A nested list.\n    :param idx: An integer representing the column index to remove.\n    :return: The nested list with the specified column removed.\n    '''\n    return [x[:idx] + x[idx + 1:] for x in lst]\n\n\ndef test_remove_column():\n    print(\"Test remove_column\")\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [[2, 3], [4, 5], [1, 1]]\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 1) == [[1, 3], [2, 5], [1, 1]]\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 2) == [[1, 2], [2, 4], [1, 1]]\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, column):\n    for row in nested_list:\n        if len(row) == 1:\n            continue\n        row.pop(column)\n    return nested_list\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\nfrom typing import List\n\n\ndef remove_column(list_of_lists: List, column_index: int) -> List:\n    list_of_lists = [item[:column_index] + item[column_index + 1 :] for item in list_of_lists]\n    return list_of_lists\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst,index):\n    if index == 0:\n        return [row[1:] for row in lst]\n    return [[col for col in row if index != i] for i, row in enumerate(lst)]\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(array, index):\n    return [row[index:] for row in array]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(ls, col):\n    for i in range(len(ls)):\n        ls[i].pop(col)\n    return ls\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, column_index):\n    # implement your function here\n    result = []\n    for i in range(len(nested_list)):\n        result.append(nested_list[i][:column_index] + nested_list[i][column_index + 1 :])\n\n    return result", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(matrix, column_index):\n  if len(matrix) == 0:\n    return []\n\n  # remove the element at the column_index\n  return [row[:column_index] + row[column_index+1:] for row in matrix]\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(first, last, term):\n    \"\"\"tn_ap(first, last, term) -> tn_ap first term of arithemetic progression with last term.\"\"\"\n    return first + (term - 1)*(last - first)\n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(t,n,d):\n\treturn (t*d)+(n-1)*d", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\nfrom functools import lru_cache\n\n@lru_cache()\ndef get_ap_sum(first_term, common_difference, n):\n    if n <= 0:\n        return first_term\n    else:\n        return get_ap_sum(first_term+common_difference, common_difference, n-1)\n\n\ndef tn_ap(first_term, common_difference, n):\n    return first_term + (common_difference * (n-1))\n\n\ndef main():\n    for tc in range(int(input())):\n        first_term, common_difference, n = map(int, input().split())\n        print(tn_ap(first_term, common_difference, n))\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(first, last, t):\n    return (last - first)*t + first\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(n, a1, r):\n    \"\"\"\n    Return the t-nth term of arithemetic progression.\n    \"\"\"\n    return a1+(n-1)*r\n\n# Testing\nfrom nose.tools import assert_equal\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(t, first, diff):\n    return (first + diff * (t - 1))\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(t,n,a):\n    if t==1:\n        return a\n    return a+(n-1)*t*a//(t-1)", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(first, last, t):\n  if t > 0:\n    return first + (t - 1) * (last - first)\n  return first + (last + 1 - first) * (-t)\n\n# Tests", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    return (a+(n-1)*d)", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(t,a,d):\n    return (t-1)*d + a\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    count = 0\n    for i in range(r+1):\n        for j in range(r+1):\n            if i**2+j**2<=r**2:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    # Write your code here\n    return 0\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    c=0\n    for i in range(1,r+1):\n        c+=i*4+4\n    return c", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\n\ndef count_Rectangles(r):\n    count = 0\n    for n in range(1, int(math.ceil(r))):\n        count += n * 2\n\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\ndef count_Rectangles(r):\n    n = int(2*r)\n    return (n**2 - 2*n - 1) // 4\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    return 4 * math.pi * r * r\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(radius):\n    \"\"\"\n    :param radius: the radius of the circle\n    :return: the number of rectangles in the circle\n    \"\"\"\n    assert radius >= 0, \"radius must be >= 0\"\n    assert radius == int(radius), \"radius must be an integer\"\n\n    # base cases\n    if radius == 0:\n        return 0\n    if radius == 1:\n        return 1\n    if radius == 2:\n        return 8\n\n    # count for rectangles in 4 corners\n    num_rectangles_in_corners = 4\n\n    # count for rectangles in 2x1 rectangle\n    num_rectangles_in_2x1_rectangle = 2\n\n    # count for rectangles in 2x2 rectangle\n    num_rectangles_in_2x2_rectangle = 8\n\n    # count for rectangles in 2x3 rectangle\n    num_rectangles_in_2x3_rectangle = 18\n\n    # count for rectangles in 2x4 rectangle\n    num_rectangles_in_2x4_rectangle = 32\n\n    # count for rectangles in 3x1 rectangle\n    num_rectangles_in_3x1_rectangle = 6\n\n    # count for rectangles in 3x2 rectangle\n    num_rectangles_in_3x2_rectangle = 12\n\n    # count for rectangles in 3x3 rectangle\n    num_rectangles_in_3x3_rectangle = 24\n\n    # count for rectangles in 3x4 rectangle\n    num_rectangles_in_3x4_rectangle = 40\n\n    # count for rectangles in 4x1 rectangle\n    num_rectangles_in_4x1_rectangle = 12\n\n    # count for rectangles in 4x2 rectangle\n    num_rectangles_in_4x2_rectangle = 24\n\n    # count for rectangles in 4x3 rectangle\n    num_rectangles_in_4x3_rectangle = 40\n\n    # count for rectangles in 4x4 rectangle\n    num_rectangles_in_4x4_rectangle = 64\n\n    total_rectangles = num_", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\ndef count_Rectangles(r):\n    count=0\n    for i in range(0,r+1):\n        count+=2*i*(i+1)\n    return count\n    \n# print(count_Rectangles(100))\n# assert count_Rectangles(2) == 8\n# print(count_Rectangles(2))", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n#%%\ndef count_Rectangles(r):\n    \"\"\"\n    returns the number of rectangles in a circle of radius r\n    \"\"\"\n    return 2*r**2\n\ncount_Rectangles(2) == 8\n\n#%%\ndef count_rectangles_2(r):\n    \"\"\"\n    returns the number of rectangles in a circle of radius r\n    \"\"\"\n    total = 0\n    for i in range(1, r):\n        total = total + 2*i\n    \n    return total\n    \ncount_rectangles_2(2) == 8\n#%%\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\n\ndef count_Rectangles(r):\n    return int(math.pi * r * r)\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    \"\"\"\n    This function takes two angles and returns the third angle in degrees\n    \"\"\"\n    return 180 - (a+b)\n\n\ndef test_find_angle():\n    \"\"\"\n    test function to check for the right angle\n    \"\"\"\n    assert find_angle(47,89) == 44\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\n# Solution 1\ndef find_angle(a1, a2):\n    a3 = 180 - a1 - a2\n    return a3\n\n# Solution 2\nfrom math import pi\ndef find_angle(a1, a2):\n    a3 = 180 - (a1 + a2)\n    return a3\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\n# \u2554\u2550\u2561 00000000-0000-0000-0000-000000000001\nPLUTO_PROJECT_TOML_CONTENTS = \"\"\"\n[deps]", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    import math\n    return int((math.degrees(math.atan(b/a)))*100)/100\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle_one, angle_two):\n    third_angle = 180 - angle_one - angle_two\n    return third_angle\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    if a+b<180:\n        return (180-(a+b))\n    else:\n        return (360-(a+b))\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n  assert a>b\n  return (180-a-b)", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1, angle2):\n    # your code here\n    return angle2\n\n# def find_angle(angle1, angle2):\n#     # a = angle1\n#     # b = angle2\n#     # # a * b = 90\n#     # # 90 - b = a\n#     # # a = 90 - b\n#     # a = 90 - angle2\n#     # return a\n\n# def find_angle(angle1, angle2):\n#     # a = angle1\n#     # b = angle2\n#     # a * b = 90\n#     # a^2 = 90\n#     # a = 90^(1/2)\n#     # return int(90**(1/2))\n#     return int(90**(1/2))\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\nimport math\n\ndef find_angle(a,b):\n    return math.degrees(math.acos(a/(a+b+math.sqrt(math.pow(a,2)+math.pow(b,2)))))\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1,angle2):\n    angle3 = 180 - angle1 - angle2\n    if angle3 < 0:\n        angle3 += 360\n    return angle3\n\n#test"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    \"\"\"Returns the maximum element of the given tuple records.\n\n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    \"\"\"\n    return max(max(values) for values in records)\n\n# find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom typing import List\n\n\ndef find_max(records: List[tuple]) -> int:\n    max_value = -float(\"inf\")\n    for record in records:\n        if record[1] > max_value:\n            max_value = record[1]\n    return max_value\n\n\ndef test_find_max() -> None:\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(4, 2)]) == 4\n    assert find_max([(10, 100)]) == 100\n    assert find_max([(5, 10), (20, 25), (5, 50)]) == 50\n    assert find_max([(5, 10), (20, 25), (5, 50), (10, 20)]) == 20\n    assert find_max([]) == -float(\"inf\")\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Tuple\n\nListRecord = List[Tuple[int, int]]\nRecord = Tuple[int, int]\nRecordDict = defaultdict(int)\n\n\ndef find_max(records: ListRecord) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    for record in records:\n        RecordDict[record] = RecordDict.get(record, 0) + 1\n    return max(RecordDict.items(), key=lambda item: item[1])[0][1]\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    '''\n    records is a list of tuples with each tuple representing the (x, y) coordinates of a point\n    find_max finds the largest y coordinate in the list of tuples\n    returns the largest y coordinate\n    '''\n    return max(y for x, y in records)\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    # write your code here\n    max_number = -float('inf')\n    for (number1, number2) in records:\n        if max_number < number1:\n            max_number = number1\n        if max_number < number2:\n            max_number = number2\n    return max_number\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    assert isinstance(records, tuple)\n    max_val = 0\n    for each in records:\n        if max_val < each[1]:\n            max_val = each[1]\n    return max_val\n\ndef main():\n    print(find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]))\n    print(find_max([(1, 2), (1, 2)]))\n    print(find_max([(3, 2), (2, 1)]))\n    print(find_max([(2, 5), (2, 1), (1, 8)]))\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    max_val = 0\n\n    for i in records:\n        if max_val <= i[1]:\n            max_val = i[1]\n\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nimport functools\n\ndef find_max(tuples):\n    return functools.reduce(lambda x, y: x if x > y else y, [max(i) for i in tuples])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    \"\"\"\n    :param records: list of tuples\n    :return: maximum value\n    \"\"\"\n    max_number = 0\n    for i in range(len(records)):\n        max_number = max(max_number, records[i][1])\n    return max_number\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom typing import Tuple, List\nfrom operator import itemgetter\n\ndef find_max(records: List[Tuple]) -> int:\n    return max(records, key=itemgetter(1))[1]\n\n\ndef test_find_max() -> None:\n    records = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]\n    expected = 10\n    assert find_max(records) == expected\n\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\nfrom functools import reduce\n\ndef moddiv_list(L1, L2):\n    return [a%b for a,b in zip(L1, L2)]\n    ", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list1, list2):\n    return list(map(lambda x,y: x%y, list1, list2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1, list2):\n  return list(map(lambda x,y: x%y, list1, list2))\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(lst1,lst2):\n    return list(map(lambda x, y: x % y, lst1, lst2))\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(l1, l2):\n    return list(map(lambda x, y: x%y, l1, l2))", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\n# write your code here\ndef moddiv_list(lst1, lst2):\n    return list(map(lambda x, y: x % y, lst1, lst2))\n\n\n# Test case\n# Do not edit this code\nlst1 = [4, 5, 6]\nlst2 = [1, 2, 3]", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(lst1,lst2):\n    return list(map(lambda x: x[0] % x[1], zip(lst1, lst2)))\n\ndef test_moddiv_list():\n    assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a,b):\n    return map(lambda x,y: x%y,a,b)\n\n\n# +\n# question 3", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\n# my solution\ndef moddiv_list(x,y):\n    return list(map(lambda a,b: a%b,x,y))\n\n# find modulo division of two lists using map and lambda function\nmoddiv_list([4,5,6],[1, 2, 3])\n\n# +\n# using % operator\n# -\n\n# ### 63. Write a function to find mean, median, mode of a list using reduce.\n\n# +", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a,b):\n    return list(map(lambda x,y: x%y,a,b))"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\nimport math\ndef Check_Solution(a,b,c):\n    try:\n        D=b*b-4*a*c\n        if D<0:\n            return \"No\"\n        elif D==0:\n            return \"Yes\"\n        else:\n            x1 = (-b + math.sqrt(D))/(2*a)\n            x2 = (-b - math.sqrt(D))/(2*a)\n            return \"Yes\" if (x1==2*x2) else \"No\"\n    except ValueError:\n        return \"Please enter a valid input!\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    if (2*a*c == b*b):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    if a==0:\n        return \"Invalid Input\"\n    if a*a -4*b*c < 0:\n        return \"No\"\n    if a*a -4*b*c == 0:\n        return \"Yes\"\n    if a*a -4*b*c > 0:\n        return \"Yes\"\n        ", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    x1 = ((-b) + (b**2-4*a*c)**0.5)/(2*a)\n    x2 = ((-b) - (b**2-4*a*c)**0.5)/(2*a)\n    \n    if x1 == x2:\n        return \"Yes\"\n    return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\nfrom math import sqrt,pow\n\ndef Check_Solution(a,b,c):\n    \n    sq1=pow(b,2)-4*a*c\n    \n    if sq1<0:\n        return \"No\"\n    else:\n        r1=(-b+sqrt(sq1))/(2*a)\n        r2=(-b-sqrt(sq1))/(2*a)\n        if r1==r2:\n            return \"Yes\"\n        else:\n            return \"No\"\n            ", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (b**2-4*a*c) >=0:\n        if ((b**2-4*a*c)%2)==0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n\nCheck_Solution(1,3,2)\nCheck_Solution(1,2,1)\nCheck_Solution(1,2,2)\nCheck_Solution(1,3,4)\nCheck_Solution(1,3,5)\nCheck_Solution(1,3,6)\nCheck_Solution(1,3,7)\nCheck_Solution(1,3,8)\nCheck_Solution(1,3,9)\nCheck_Solution(1,3,10)\nCheck_Solution(1,3,11)\nCheck_Solution(1,3,12)\nCheck_Solution(1,3,13)\nCheck_Solution(1,3,14)\nCheck_Solution(1,3,15)\nCheck_Solution(1,3,16)\nCheck_Solution(1,3,17)\nCheck_Solution(1,3,18)\nCheck_Solution(1,3,19)\nCheck_Solution(1,3,20)\nCheck_Solution(1,3,21)\nCheck_Solution(1,3,22)\nCheck_Solution(1,3,23)\nCheck_Solution(1,3,24)\nCheck_Solution(1,3,25)\nCheck_Solution(1,3,26)\nCheck_Solution(1,3,27)\nCheck_Solution(1,3,28)\nCheck_Solution(1,3,29)\nCheck_Solution(1,3,30)\nCheck_Solution(1,3,31)\nCheck_Solution(1,3,32)\nCheck_Solution(1,3,33)\nCheck_Solution(1,3,34)\nCheck_Solution", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n# Solution\ndef Check_Solution(a,b,c):\n    if b*b-4*a*c > 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test case\n# print(Check_Solution(1,3,2))\n\n# Solution 2\ndef check_solution(a, b, c):\n    if b*b - 4*a*c > 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test case\n# print(check_solution(1,3,2))\n\n# Solution 3\ndef Check_Solution(a, b, c):\n    if b*b - 4*a*c > 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test case\n# print(Check_Solution(1,3,2))\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    if a*a-4*b*c > 0:\n        return 'Yes'\n    elif a*a-4*b*c == 0:\n        return 'Both'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n# + id=\"j5q7y8iGp4_R\"\ndef check(a, b, c):\n  return a * b != 0 and a * c != 0 and b * c != 0 and (a**2 + b**2 - c**2) % (a * b * c) == 0\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"ZfB7Uktqp-Up\" outputId=\"2a5210a2-5c2d-4f86-b416-83f875b9038a\"\ncheck(1,3,2)\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"owqD3OZqrDdg\" outputId=\"21147922-724b-47f9-92f7-48e562c9a0f3\"\ncheck(1,2,3)\n\n\n# + [markdown] id=\"52-2IQrErF_H\"\n# ## ***Question 5***\n# Write a function to find the gcd of two numbers.\n#\n# assert GCD(12,24) == 12\n#\n# assert GCD(28,48) == 24\n#\n# assert GCD(30,24) == 6\n#\n# assert GCD(10,5) == 5\n#\n\n# + id=\"I0tRHzZWrO_9\"\ndef GCD(a,b):\n  if b == 0:\n    return a\n  else:\n    return GCD(b, a % b)\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"N2B3FZlwrW5T\" outputId=\"422c519d-d90e-4057-a4b9-8813820f8677\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a, b, c):\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return \"Yes\"\n            return \"No\"\n        return \"Yes\"\n    x1 = (-b + math.sqrt(b*b - 4*a*c))/(2*a)\n    x2 = (-b - math.sqrt(b*b - 4*a*c))/(2*a)\n    if (x1*x2 >= 0) and (abs(x1*x2) == abs(x1 + x2)):\n        return \"Yes\"\n    else:\n        return \"No\"\n"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    return 2*get_carol(n-1) + 1\n\ndef test_get_carol():\n    assert get_carol(2) == 7\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\nfrom __future__ import annotations\n\n\ndef get_carol(n: int) -> int:\n    if n == 1:\n        return 1\n\n    prev = 1\n    curr = 1\n\n    for i in range(2, n + 1):\n        temp = curr\n        curr += prev\n        prev = temp\n\n    return curr\n\n\ndef get_carol2(n: int) -> int:\n    return sum(range(n)) + 1\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    s = 1\n    while n > 0:\n        s += 2 * (2 * s - 1)\n        n -= 1\n    return s\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n: int) -> int:\n    if n == 1:\n        return 1\n\n    return get_carol(n-1) + get_carol(n-2)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    if n == 1:\n        return 0\n    carols = [0, 1]\n    for i in range(2, n+1):\n        carols.append(1 + sum(carols[j] for j in range(i-1, -1, -1)))\n    return carols[-1]\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    if n == 1:\n        return 1\n    return get_carol(n-1) + n + get_carol(n-1)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    carol_list = [1]\n    for i in range(2, n + 1):\n        carol_list.append(carol_list[i-2] + carol_list[i-1])\n    return carol_list[-1]\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    carol_nums = []\n    for i in range(1,n+1):\n        if i%2 == 1:\n            carol_nums.append(i)\n    return sum(carol_nums)\n\n# Test\n# test.assert_equals(get_carol(2), 7)\n# test.assert_equals(get_carol(3), 15)\n# test.assert_equals(get_carol(4), 23)\n# test.assert_equals(get_carol(5), 31)\n\n# Solution\ndef get_carol(n):\n    return (n * (n + 1)) / 2\n\n# Test\n# test.assert_equals(get_carol(2), 7)\n# test.assert_equals(get_carol(3), 15)\n# test.assert_equals(get_carol(4), 23)\n# test.assert_equals(get_carol(5), 31)\n\n# Solution\ndef get_carol(n):\n    return n * (3*n-1) / 2\n\n# Test\n# test.assert_equals(get_carol(2), 7)\n# test.assert_equals(get_carol(3), 15)\n# test.assert_equals(get_carol(4), 23)\n# test.assert_equals(get_carol(5), 31)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    carol = [1, 1]\n    for i in range(2, n+1):\n        carol.append(carol[i-1] + carol[i-2])\n    return carol[n]\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lists):\n    return [list for list in lists if list]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(arr):\n    return list(filter(lambda x: x != [], arr))\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    return [x for x in lst if x != []]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(list_of_lists):\n    list_of_lists = [x for x in list_of_lists if x != []]\n    return list_of_lists\n\n# test case", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lists):\n    return [x for x in lists if x != []]\n\n\n# Exercise 7: Write a function to find the index of the first element in a list.\n# assert first_index(['a', 'b', 'c']) == 0\n# assert first_index([1, 2, 3]) == 0\n# assert first_index(['a']) == 0\ndef first_index(l):\n    return l.index(l[0])\n\n\n# Exercise 8: Write a function that finds the index of the first element of the second element.\n# assert find_index([[1, 2, 3], ['a', 'b', 'c'], [20, 30]]) == 1\n# assert find_index([[1, 2, 3]]) == 0\n# assert find_index([['a', 'b', 'c']]) == 0\ndef find_index(l):\n    return l[1].index(l[1][0])\n\n\n# Exercise 9: Write a function to extract a list of items from a list, based on indices.\n# assert extract_items(['a', 'b', 'c', 'd', 'e'], [0, 2]) == ['a', 'c']\n# assert extract_items(['a', 'b', 'c', 'd', 'e'], [2, 4]) == ['c', 'e']\ndef extract_items(l, idx):\n    return [l[x] for x in idx]\n\n\n# Exercise 10: Write a function that takes a list of lists and returns a list that contains the cumulative sum of each list.\n# assert cumulative_sum([[1, 2, 3, 4, 5], [6, 7, 8], [9, 10], [11]]) == [1, 3, 6, 10, 15, 21]\n# assert cumulative_sum([[1, 2, 3, 4, ", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(nested_list):\n    result = []\n    for item in nested_list:\n        if type(item) == str:\n            result.append(item)\n        elif type(item) == list:\n            result.extend(remove_empty(item))\n    return result\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(list_of_lists):\n    new_list_of_lists = []\n    for item in list_of_lists:\n        if item:\n            new_list_of_lists.append(item)\n    return new_list_of_lists\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(x):\n    #your code here\n    return [y for y in x if y]\n\n#tests\nfrom nose.tools import assert_equal\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\n# + id=\"6JUMs-Mb7Z4K\"", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\nfrom typing import List\n\n\ndef remove_empty(iterable: List[List]) -> List:\n    new_iterable = [item for sublist in iterable for item in sublist]\n    return [x for x in new_iterable if x != '']\n\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nimport math\n\ndef max_occurrences(items):\n    return max(set(items), key=items.count)\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(data):\n    return max(set(data), key=data.count)\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    return max(set(lst), key=lst.count)\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\nfrom collections import Counter\ndef max_occurrences(lst):\n    return Counter(lst).most_common(1)[0][0]\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(l):\n    max_val = l[0]\n    max_count = 0\n    for val in l:\n        count = l.count(val)\n        if count > max_count:\n            max_val = val\n            max_count = count\n    return max_val\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(L):\n    counter = {}\n    for x in L:\n        if x in counter:\n            counter[x] += 1\n        else:\n            counter[x] = 1\n    max_ = 0\n    max_val = 0\n    for k in counter:\n        if counter[k] >= max_:\n            max_ = counter[k]\n            max_val = k\n    return max_val\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    return Counter(arr).most_common(1)[0][0]\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(list):\n    #TODO: Write your code here\n    max_occurrences = -1\n    max_item = 0\n\n    for item in list:\n        occurrences = 0\n        for element in list:\n            if element == item:\n                occurrences += 1\n\n        if occurrences > max_occurrences:\n            max_occurrences = occurrences\n            max_item = item\n\n    return max_item\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nfrom collections import Counter\nfrom functools import reduce\n\ndef max_occurrences(l):\n    c = Counter(l)\n    return max(c.items(), key=lambda x: x[1])[0]\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    d = {}\n    for i in lst:\n        d[i] = d.get(i,0) + 1\n    return max(d, key=d.get)\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuples, k):\n    return [(x[0] + k, x[1] + k, x[2] + k) for x in tuples]\n\ndef add_K_element(tuples, k):\n    return map(lambda x: (x[0] + k, x[1] + k, x[2] + k), tuples)\n\n# add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n# Exercise 2.1", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuple_list, K):\n    return [tuple(K + a) for a in zip(*tuple_list)]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\nfrom typing import Tuple, List, Dict\nfrom collections import namedtuple\n\nPoint = namedtuple(\"Point\", \"x y\")\n\n\ndef add_K_element(tuple_list: List[Tuple[float, ...]], k: float) -> List[Tuple[float, ...]]:\n    result: List[Tuple[float, ...]] = []\n    for tup in tuple_list:\n        result.append(tuple(e + k for e in tup))\n    return result\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuple_of_tuples, K):\n    result = []\n    for t in tuple_of_tuples:\n        result.append(tuple(t[i] + K for i in range(len(t))))\n    return result\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuples, k):\n    res = []\n    for tup in tuples:\n        res.append((tup[0] + k, tup[1] + k, tup[2] + k))\n    return res\n\n\n# Q2", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple, k):\n    return [(x[i] + k, x[i+1] + k, x[i+2] + k) for x in tuple for i in range(len(x))]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(my_list, k):\n    for i, v in enumerate(my_list):\n        my_list[i] = list(v)\n        my_list[i].extend([k] * (len(my_list[i]) - 1))\n    return my_list", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tup, k):\n  return list(map(lambda x: (x[0] + k, x[1] + k, x[2] + k), tup))\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuple_list, k):\n    return [tuple(i+k for i in t) for t in tuple_list]\n\n# test case"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom typing import List\n\n\ndef min_flip_to_make_string_alternate(string: str) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # flip the string and store the number of changes\n    flips = 0\n    for i, char in enumerate(string):\n        if i % 2 != 0 and char == \"1\":\n            flips += 1\n\n    return flips\n\n\ndef min_flip_to_make_string_alternate_2(string: str) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # flip the string and store the number of changes\n    flips = 0\n    prev = \"1\"\n    for i, char in enumerate(string):\n        if char == prev:\n            flips += 1\n        prev = \"0\" if char == \"0\" else \"1\"\n\n    return flips\n\n\ndef min_flip_to_make_string_alternate_3(string: str) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    # flip the string and store the number of changes\n    flips = 0\n    memo = {}\n    for i, char in enumerate(string):\n        if char not in memo:\n            memo[char] = 1 if i % 2 == 0 else 0\n        elif i % 2 != memo[char]:\n            flips += 1\n\n    return flips\n\n\ndef min_flip_to_make_string_alternate_4(string: str) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    # flip the string and store the number of changes\n    flips = 0\n    memo = {}\n    for i, char in enumerate(string):\n        if char not in memo:\n            memo[char] = 1 if i % 2 == 0 else 0\n        elif i % 2 != memo[char]:\n            flips += 1\n            memo[char] = not memo[", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(input_string):\n    count = 0\n    for i in range(len(input_string)-1):\n        if input_string[i] == input_string[i+1]:\n            count += 1\n    return count\n\n\n# Tests", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(str):\n    # Assuming the length of the string is even\n    flip = 0\n    for i in range(0, len(str), 2):\n        if str[i] != str[i+1]:\n            flip += 1\n    return flip\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom math import inf\n\n\ndef min_flip_to_make_string_alternate(string):\n    if string is None:\n        raise TypeError(\"argument is None\")\n    if len(string) <= 1:\n        return 0\n    if string[0] != string[1]:\n        return 1\n    min_flips = inf\n    for i in range(1, len(string) - 1):\n        if string[i] == string[i + 1]:\n            min_flips = min(min_flips, min_flip_to_make_string_alternate(string[:i]) + min_flip_to_make_string_alternate(string[i + 2:]))\n    return min_flips + 1 if string[0] != string[-1] else min_flips\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    res = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            res += 1\n    return res\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom itertools import groupby\nfrom operator import itemgetter\n\n\ndef min_flip_to_make_string_alternate(s: str) -> int:\n    s = \"0\" + s + \"0\"\n    s_without_all_zeroes = s.replace(\"0\", \"\")\n    flips = len(s_without_all_zeroes) - 1\n    groups = [len(list(group)) for key, group in groupby(s_without_all_zeroes)]\n    flips += sum(g // 2 for g in groups)\n    return flips\n\n\ndef min_flip_to_make_string_alternate_2(s: str) -> int:\n    s = \"0\" + s + \"0\"\n    flips = 0\n    for key, group in groupby(s):\n        length = len(list(group))\n        flips += length // 2\n    return flips\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom random import choice\nfrom string import digits\n\n\ndef min_flip_to_make_string_alternate(string):\n    \"\"\"\n    Time: O(N)\n    Space: O(1)\n    \"\"\"\n    num_flips = 0\n    prev_digit = \"0\"\n    for digit in string:\n        if digit != prev_digit:\n            if digit == \"1\":\n                num_flips += 1\n        prev_digit = digit\n    return num_flips\n\n\ndef min_flip_to_make_string_alternate_alternate(string):\n    \"\"\"\n    Time: O(N)\n    Space: O(1)\n    \"\"\"\n    num_flips = 0\n    prev_digit = \"0\"\n    for digit in string:\n        if digit != prev_digit:\n            # random choice to get alternate character from \"1\" and \"0\"\n            digit = choice([digit, prev_digit])\n            num_flips += 1\n        prev_digit = digit\n    return num_flips\n\n\ndef min_flip_to_make_string_alternate_alternate2(string):\n    \"\"\"\n    Time: O(N)\n    Space: O(1)\n    \"\"\"\n    num_flips = 0\n    prev_digit = \"0\"\n    for digit in string:\n        if digit != prev_digit:\n            # random choice to get alternate character from \"1\" and \"0\"\n            digit = choice(digits)\n            num_flips += 1\n        prev_digit = digit\n    return num_flips\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    even = string[0]\n    for char in string:\n        if char != even:\n            if even == \"0\":\n                count += 1\n            else:\n                count += 1\n            even = not even\n    return count\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(number):\n    count = 0\n    while number > 0:\n        number = number // 10\n        count += 1\n\n    return count\n\n\n#%%", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(number):\n    count = 0\n    while number != 0:\n        number = number // 10\n        count += 1\n    return count\n\n# print(count_Digit(12345))\n# print(count_Digit(123))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(number):\n    digit = 0\n    while number:\n        number //= 10\n        digit += 1\n    return digit\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    return len(str(n))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    \"\"\"count the number of digits of a given number\"\"\"\n    count = 0\n    while num != 0:\n        count += 1\n        num //= 10\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    num = str(num)\n    count = 0\n    for i in num:\n        count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n\treturn len(str(num))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(number):\n    count = 0\n    while(number != 0):\n        number = number // 10\n        count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    return max([nums[i] * nums[i+1] for i in range(len(nums) - 1)])\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n    \"\"\"\n    Returns the largest product of the pair of adjacent elements from a given list of integers.\n    \"\"\"\n    largest = 0\n    for i in range(0,len(arr)-1):\n        a = arr[i] * arr[i+1]\n        largest = max(a,largest)\n    return largest\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\nimport pytest\n\n\ndef adjacent_num_product(arr):\n    \"\"\"\n    Returns the largest product of adjacent elements in a list\n    Complexity:\n        Time: O(n)\n        Space: O(1)\n    \"\"\"\n    largest_product = 0\n    length = len(arr)\n    for i in range(length - 1):\n        product = arr[i] * arr[i + 1]\n        if product > largest_product:\n            largest_product = product\n    return largest_product\n\n\n@pytest.mark.parametrize(\"arr,largest_product\", [\n    ([1, 2, 3, 4, 5, 6], 30),\n    ([1, 2, 0, 4, 5, 6], 0),\n    ([-2, 0, -1], -2),\n    ([1, -2, 1, -3, 5, 6, 1, 2, -1, -4], 12),\n    ([-1, -2, -3, -4, -5], 15),\n    ([0, 0, 0, 0, 0], 0),\n    ([2, 3, 1, 0, 4, 3], 24),\n])\ndef test_adjacent_num_product(arr, largest_product):\n    assert adjacent_num_product(arr) == largest_product\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6]\n    print(f\"Largest product of adjacent elements: {adjacent_num_product(arr)}\")\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# Solution\ndef adjacent_num_product(nums):\n    return max([nums[i]*nums[i+1] for i in range(len(nums)-1)])\n\n# Tests", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    \"\"\"\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    >>> adjacent_num_product([1,2,3,4,5,6,7])\n    42\n    >>> adjacent_num_product([1,2,3,4,5,6,0,9])\n    54\n    \"\"\"\n\n    if len(nums) < 2:\n        return 0\n    return max(nums[i]*nums[i+1] for i in range(len(nums)-1))\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(input_list):\n    # Ensure the list has at least 2 elements\n    if len(input_list) < 2:\n        return \"List must have at least 2 elements\"\n    # This list will store the products of the adjacent elements\n    adjacent_nums = []\n    # Store the largest product here\n    largest_product = 0\n    # Loop through the list\n    for i in range(len(input_list)-1):\n        # Get the product of the 2 adjacent numbers\n        adjacent_nums.append(input_list[i] * input_list[i+1])\n    # Iterate through the list of products\n    for i in adjacent_nums:\n        # If this product is larger than the current largest product, update the largest product\n        if i > largest_product:\n            largest_product = i\n    return largest_product\n\n\n# Test cases", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not nums:\n        return 0\n    \n    max_product = 0\n    for i in range(len(nums)-1):\n        max_product = max(max_product, nums[i]*nums[i+1])\n    return max_product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    # Implement this function\n    \n    # Return the largest product of the adjacent numbers\n    largest = 0\n    \n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            return largest\n        elif i == 0:\n            nums[i] * nums[i + 1]\n            largest = max(largest, nums[i] * nums[i + 1])\n        else:\n            nums[i] * nums[i + 1]\n            nums[i - 1] * nums[i]\n            largest = max(largest, nums[i] * nums[i + 1], nums[i - 1] * nums[i])\n            \nadjacent_num_product([1,2,3,4,5,6])\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(num_list):\n    max = 0\n    for i in range(len(num_list)-1):\n        product = num_list[i] * num_list[i+1]\n        if product > max:\n            max = product\n    return max\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    if abs(get_tree_height(root.left) - get_tree_height(root.right)) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    \"\"\"\n    O(n) time, O(h) space\n    \"\"\"\n    return is_tree_balanced_helper(root)[0]\n    \ndef is_tree_balanced_helper(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: bool\n    \"\"\"\n    if not root:\n        return True, -sys.maxsize\n    left_balanced, left_height = is_tree_balanced_helper(root.left)\n    right_balanced, right_height = is_tree_balanced_helper(root.right)\n    if not left_balanced or not right_balanced:\n        return False, -sys.maxsize\n    return abs(left_height - right_height) <= 1, max(left_height, right_height) + 1", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\nfrom typing import Optional, Tuple, Any\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nfrom collections import deque", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nimport queue\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nimport queue\nfrom typing import List, Optional\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Definition for a binary tree node.", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef check_balanced_binary_tree_recursive(root):\n    # Recursive\n    if root is None:\n        return True, 0\n\n    is_balanced, left_height = check_balanced_binary_tree_recursive(root.left)\n    if not is_balanced:\n        return False, 0\n\n    is_balanced, right_height = check_balanced_binary_tree_recursive(root.right)\n    if not is_balanced:\n        return False, 0\n\n    height_difference = abs(left_height - right_height)\n    if height_difference > 1:\n        return False, 0\n    else:\n        height = max(left_height, right_height) + 1\n        return True, height\n\n\n# TESTS\ntests = [\n    (('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'), False),\n    (('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'), True),\n    (('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'), True),\n    (('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'), True),\n    (('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r'), True),\n]\nfor values, expected in tests:\n    values = BinaryTree.build(values)\n    assert check_balanced_binary_tree_recursive(values) == expected\n\n\ndef check_balanced_binary_tree_iterative(root):\n    # Iterative\n    if root is None:\n        return True, 0\n\n    # Preorder traversal\n    stack = [root]\n    left_height"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tuple_to_repeat, number_of_times_to_repeat):\n    pass\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(aTuple, n):\n    return tuple([aTuple for i in range(n)])", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n#%%\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\nfrom typing import Tuple\n\n\ndef repeat_tuples(tup: Tuple, n: int) -> Tuple:\n    return tuple([tup for _ in range(n)])\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(a_tuple, n):\n    return tuple(a_tuple for i in range(n))\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(t, n):\n    return (t,)*n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tuple, n):\n    \"\"\"Write a function to repeat the given tuple n times.\"\"\"\n    return tuple * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    return tuple(tup for i in range(n))\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef repeat_tuples(\n    tuples: Tuple[Tuple[str, int]],\n    n: int,\n) -> Tuple[Tuple[str, int]]:\n    \"\"\"Return the given tuples repeated `n` times.\"\"\"\n    return tuple(tuples for _ in range(n))\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a, b, c):\n    \"\"\"\n    a, b, and c are the side lengths\n    \"\"\"\n    return 2*(a*b + a*c + b*c)\n\ndef main():\n    assert lateralsurface_cuboid(1,2,2) == 6\n    assert lateralsurface_cuboid(2,2,2) == 12\n    assert lateralsurface_cuboid(3,2,2) == 18\n    assert lateralsurface_cuboid(1,2,3) == 10\n    assert lateralsurface_cuboid(2,2,3) == 18\n    assert lateralsurface_cuboid(3,2,3) == 26\n    assert lateralsurface_cuboid(2,1,3) == 14\n    assert lateralsurface_cuboid(2,3,3) == 20\n    assert lateralsurface_cuboid(2,3,1) == 14\n    assert lateralsurface_cuboid(2,3,1) == 14\n    assert lateralsurface_cuboid(3,2,1) == 18\n    assert lateralsurface_cuboid(3,3,2) == 18\n    print \"All tests passed!\"\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\nfunction lateralsurface_cuboid(a::Number, b::Number, c::Number)\n    return 2*((a*b)+(b*c)+(a*c))\nend\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(w,h,d):\n    return 2*(w*h + h*d + w*d)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,breadth,height):\n    return 2*(length*breadth + breadth*height + length*height)\n\ndef lateralsurface_cuboid_2(length,breadth,height):\n    return 2*(length+breadth)*max(height,length,breadth)\n\ndef lateralsurface_cuboid_3(length,breadth,height):\n    return (2*length*height) + (2*breadth*height) + (2*breadth*length)\n\n\n# test the functions", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n    return 2*(l*w+w*h+h*l)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\n# +\nimport math\n\ndef lateralsurface_cuboid(a,b,c):\n    surface = 2*(a*b+b*c+c*a)\n    return surface\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(length,breadth,height):\n    return 2*(length*breadth+breadth*height+length*height)\n\n\n# + [markdown] id=\"6fQ63ecys-6e\" colab_type=\"text\"\n# ## 5. Trapezium\n#\n# ![trapezium.png](https://cdn.programiz.com/sites/tutorial2program/files/trapezium.png)\n\n# + id=\"TZxSkl8htDwT\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\n# +\ndef lateralsurface_cuboid(a,b,c):\n    return (a*b)+(b*c)+(c*a)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a, b, c):\n    return 2*(a*b + b*c + c*a)\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\nfloat_sort=lambda l:sorted(l,key=lambda x:float(x[-1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup_lst):\n    return sorted(tup_lst,key=lambda x:float(x[1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tuple_list):\n\treturn sorted(tuple_list, key=lambda tup: float(tup[1]))\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"gCHC9tFHRy2V\" outputId=\"890c1522-61a2-48ae-8164-c53e7e4d5682\"\nfloat_sort = lambda x: sorted(x, key = lambda a: float(a[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(l):\n    l.sort(key=lambda x:float(x[1]))\n    return l\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    l = []\n    for item in tup:\n        l.append(item)\n    l.sort(key=lambda x: float(x[1]))\n    return l\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(input_tuple):\n    return sorted(input_tuple, key=lambda x:float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    tup.sort(key=lambda x: float(x[1]))\n    return tup\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(lst):\n    return sorted(lst, key=lambda x:float(x[1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\nfrom operator import itemgetter\n\ndef float_sort(tuple_list):\n    return sorted(tuple_list, key = itemgetter(1))\n\ndef test_function(test_case, expected_result):\n    result = float_sort(test_case)\n    if expected_result == result:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')], [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')])\ntest_function([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5'), ('item1', '20.10')], [('item3', '24.5'), ('item2', '15.10'), ('item1', '20.10'), ('item1', '12.20')])\ntest_function([('item1', '12.20'), ('item1', '15.10'), ('item2', '24.5')], [('item2', '24.5'), ('item1', '15.10'), ('item1', '12.20')])"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nimport unittest\nfrom typing import List\n\n\ndef smallest_missing(nums: List[int], start: int, end: int) -> int:\n    while start <= end:\n        mid = (start + end) // 2\n        if nums[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nimport pytest\n\ndef smallest_missing(sorted_array, start, end):\n    \"\"\"\n    This solution is correct but not the most efficient because it has O(N) complexity.\n\n    If the smallest missing element is the last element of the array, then it's simply the first element of the\n    array plus 1.\n    \"\"\"\n    if end - start == 0:\n        return start + 1\n\n    if sorted_array[start] != start:\n        return start\n\n    if sorted_array[end] != end:\n        return end + 1\n\n    if sorted_array[start] != sorted_array[end]:\n        return sorted_array[start] + 1\n\n    for i in range(start+1, end):\n        if sorted_array[i] != i:\n            return i\n\n    return end + 1\n\ndef test_smallest_missing():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 4, 5, 6], 0, 6) == 3\n    assert smallest_missing([0, 1, 2, 3, 4, 6], 0, 6) == 5\n    assert smallest_missing([0, 1, 2, 3, 4, 5], 0, 5) == 6\n    assert smallest_missing([0, 1, 2, 3, 4, 5], 0, 4) == 5\n    assert smallest_missing([0, 1, 2, 3, 4, 5], 0, 3) == 4\n    assert smallest_missing([0, 1, 2, 3, 4, 5], 0, 2) == 3\n    assert smallest_missing([0, 1, 2, 3, 4, 5], 0, 1) == 2\n    assert smallest_missing([0, 1, 2, 3", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\ndef smallest_missing(array, min_index, max_index):\n    if min_index == max_index:\n        return min_index + 1\n    elif min_index + 1 == max_index:\n        return min_index if array[min_index] != min_index else max_index\n    else:\n        pivot = array[min_index + (max_index - min_index) // 2]\n        if pivot == min_index or pivot == max_index:\n            return smallest_missing(array, min_index, max_index - 1)\n        if pivot > min_index and pivot < max_index:\n            return smallest_missing(array, min_index + 1, max_index)\n        if pivot == min_index:\n            return smallest_missing(array, min_index, min_index + (max_index - min_index) // 2)\n        if pivot == max_index:\n            return smallest_missing(array, max_index - (max_index - min_index) // 2, max_index)\n        else:\n            return -1\n\n\ndef find_smallest_missing_in_sorted_array(array):\n    return smallest_missing(array, 0, len(array) - 1)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nfrom typing import List\n\n\ndef smallest_missing(arr: List[int], start: int, end: int) -> int:\n    return arr[0] + start if arr[0] != start else smallest_missing(arr[1:], start + 1, end)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\n# x = [0, 1, 2, 3, 4, 5, 6]\n# m = 0\n# n = 6\n\n\ndef smallest_missing(x, m, n):\n    return m if x[0] == m else m + smallest_missing(x[1:], m + 1, n)\n\n\ndef smallest_missing_alt(x, m, n):\n    i = 0\n    while i < len(x):\n        j = x[i]\n        if j == m or j == n:\n            m += 1\n            n -= 1\n            i += 1\n        elif j == m + 1:\n            m += 1\n            i += 1\n        elif j == n - 1:\n            n -= 1\n            i += 1\n        else:\n            return m\n\n\ndef test():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing_alt([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\n\ntest()\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(array, lower, upper):\n    return min(lower + 1, upper)\n\n# Test cases", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nimport bisect\n\ndef smallest_missing(arr, start, end):\n    missing = 0\n    for i in range(start, end):\n        if i + 1 != arr[i]:\n            missing = i + 1\n            break\n    else:\n        missing = end + 1\n    return missing\n\ndef smallest_missing_recur(arr, start, end):\n    return smallest_missing_recur(arr, 0, end) if arr[start] == start + 1 \\\n           else smallest_missing(arr, start + 1, end)\n\ndef smallest_missing_bisect(arr):\n    return bisect.bisect_left(arr, 0)\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, left, right):\n    \"\"\"\n    Right here, we want to look for the smallest value that is not in the list.\n    We iterate from left to right. If we find a number that is not in the\n    list, we return it. Else, we continue. This will return the smallest value.\n    \"\"\"\n    for num in range(left, right + 1):\n        if num not in arr:\n            return num\n\ndef test_smallest_missing():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 5) == 6\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 4) == 5\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\n# 1. Using bubblesort\ndef heap_ascending(A):\n    for i in range(len(A)):\n        for j in range(0, len(A) - 1):\n            if A[j] > A[j + 1]:\n                A[j], A[j + 1] = A[j + 1], A[j]\n    return A\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(elements):\n    pass", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(array):\n    \"\"\"\n    make the array a heap queue\n    \"\"\"\n    pass\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(a):\n    if len(a) < 2:\n        return a\n    heap = a[:]\n    swap = lambda x, y: heap[x], heap[y] = heap[y], heap[x]\n    parent, left, right = lambda x: (x-1)//2, lambda x: 2*x+1, lambda x: 2*x+2\n    def heapify(x):\n        if x >= len(heap):\n            return\n        l, r = left(x), right(x)\n        if l < len(heap) and heap[l] > heap[x]:\n            swap(l, x)\n            heapify(l)\n        if r < len(heap) and heap[r] > heap[x]:\n            swap(r, x)\n            heapify(r)\n    for i in range(len(heap)-1, -1, -1):\n        heapify(i)\n    return heap\n\ndef heap_descending(a):\n    if len(a) < 2:\n        return a\n    heap = a[:]\n    swap = lambda x, y: heap[x], heap[y] = heap[y], heap[x]\n    parent, left, right = lambda x: (x-1)//2, lambda x: 2*x+1, lambda x: 2*x+2\n    def heapify(x):\n        if x >= len(heap):\n            return\n        l, r = left(x), right(x)\n        if l < len(heap) and heap[l] < heap[x]:\n            swap(l, x)\n            heapify(l)\n        if r < len(heap) and heap[r] < heap[x]:\n            swap(r, x)\n            heapify(r)\n    for i in range(len(heap)-1, -1, -1):\n        heapify(i", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq\ndef heap_assending(arr):\n    return [x for x in heapq.nsmallest(len(arr), arr)]\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop, heapify\n\ndef heap_assending(elements):\n    heapify(elements)\n    result = []\n    while elements:\n        result.append(heappop(elements))\n    return result\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(alist):\n    pass\n\n# Driver Code "], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\nfrom typing import Tuple\n\n\ndef volume_cuboid(l: int, w: int, h: int) -> int:\n    \"\"\"Return volume of cuboid.\n\n    >>> volume_cuboid(1,2,3)\n    6\n    >>> volume_cuboid(3,4,5)\n    60\n    >>> volume_cuboid(0,10,0)\n    0\n    >>> volume_cuboid(-10,-20,0)\n    0\n    \"\"\"\n    return l * w * h if all([l > 0, w > 0, h > 0]) else 0\n\n\ndef test_volume_cuboid() -> None:\n    assert volume_cuboid(1, 2, 3) == 6\n    assert volume_cuboid(3, 4, 5) == 60\n    assert volume_cuboid(0, 10, 0) == 0\n    assert volume_cuboid(-10, -20, 0) == 0\n\n\ndef volume_cuboid_v2(l: int, w: int, h: int) -> int:\n    \"\"\"Return volume of cuboid.\n\n    >>> volume_cuboid_v2(1,2,3)\n    6\n    >>> volume_cuboid_v2(3,4,5)\n    60\n    >>> volume_cuboid_v2(0,10,0)\n    0\n    >>> volume_cuboid_v2(-10,-20,0)\n    0\n    \"\"\"\n    return l * w * h if all(i > 0 for i in [l, w, h]) else 0\n\n\ndef test_volume_cuboid_v2() -> None:\n    assert volume_cuboid_v2(1, 2, 3) == 6\n    assert volume_cuboid_v2(3, 4, 5) == 60\n    assert volume_cuboid_v2(0, 10, 0) == 0\n    assert volume_cuboid_v2(-10, -20, 0) == 0\n\n\ndef volume_cuboid_v3(l: int, w: int, h", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n#%%\n\ndef volume_cuboid(x,y,z):\n    return x*y*z\n\n#%%", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length, width, height):\n    return length*width*height\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length, breadth, height):\n    vol = length*breadth*height\n    return vol\n\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(h,l,w):\n    return h*l*w\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\nfrom __future__ import print_function\nimport doctest\ndef volume_cuboid(x,y,z):\n    return x*y*z\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(l,w,h):\n    assert (type(l)==int) and (type(w)==int) and (type(h)==int), 'all arguments must be integers'\n    assert (l>0) and (w>0) and (h>0), 'all arguments must be positive'\n    return l*w*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(length,breadth,height):\n\treturn length*breadth*height\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length,breadth,height):\n    return length*breadth*height\n\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    if len(string) == 1:\n        return [string]\n\n    permutations = []\n\n    for i in range(len(string)):\n        sub_string = string[:i] + string[i+1:]\n\n        for permutation in permute_string(sub_string):\n            permutations.append(string[i] + permutation)\n\n    return permutations", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(str):\n    \"\"\"\n    :type str: str\n    :rtype: List[str]\n    \"\"\"\n    if not str:\n        return [\"\"]\n    \n    permutations = []\n    chars = list(str)\n    \n    for i, _ in enumerate(str):\n        permutations.extend([chars[j]+chars[i]+chars[j+1:] for j in range(i)])\n        \n    return permutations\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\nfrom typing import List\n\n\ndef permute_string(input_str: str) -> List[str]:\n    \"\"\"\n    Returns a list of strings, all permutations of a given string.\n    :param input_str: The string for which the permutations should be generated.\n    :return: The list of strings, each representing a permutation of input_str.\n    \"\"\"\n\n    def recursive_permute(s, i, permutation):\n        if i == len(s):\n            print(s)\n            permutation.append(s)\n            return\n        for j in range(i, len(s)):\n            if not s[i] == s[j]:\n                recursive_permute(s[:j] + s[j] + s[i:j], j + 1, permutation)\n\n    permutation = []\n    recursive_permute(input_str, 0, permutation)\n    return permutation\n\n\ndef test_permute_string():\n    assert permute_string(\"ab\") == [\"ab\", \"ba\"]\n    assert permute_string(\"abc\") == [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"]\n    assert permute_string(\"abcd\") == [\n        \"abcd\",\n        \"abdc\",\n        \"acbd\",\n        \"acdb\",\n        \"adbc\",\n        \"adcb\",\n        \"bacd\",\n        \"badc\",\n        \"bcad\",\n        \"bcda\",\n        \"bdac\",\n        \"bdca\",\n        \"cabd\",\n        \"cadb\",\n        \"cbad\",\n        \"cbda\",\n        \"cdab\",\n        \"cdba\",\n    ]\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    \"\"\"O(n!) time | O(n!) space\"\"\"\n    perms = []\n    generate_perm(string, perms, [])\n    return perms\n\ndef generate_perm(string, perms, perm):\n    if len(perm) == len(string):\n        perms.append(\"\".join(perm))\n        return\n    for i in range(len(string)):\n        if string[i] in perm:\n            continue\n        perm.append(string[i])\n        generate_perm(string, perms, perm)\n        perm.pop()", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    return list(map(''.join, permutations(string)))\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\nfrom typing import List\n\n\ndef permute_string(string: str) -> List[str]:\n    if not string:\n        return [\"\"]\n    output = []\n    for char in string:\n        output.extend(map(lambda x: x[:i] + char + x[i:], permute_string(string[1:])))\n    return output\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(strng):\n    if len(strng)==0:\n        return [\"\"]\n    else:\n        permutations= []\n        for i in range(len(strng)):\n            remaining= strng[:i]+strng[i+1:]\n            for p in permute_string(remaining):\n                permutations.append(strng[i]+p)\n        return permutations\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(str):\n    \"\"\"\n    :type str: str\n    :rtype: List[str]\n    \"\"\"\n    #sol1: sort and remove duplicates. Time O(nlogn)\n    #sol2: Using backtracking. Time O(n!)\n    return sorted(list(set(''.join(sorted(i)) for i in itertools.permutations(str))))\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(text):\n    pass\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    return round(num/multiple)*multiple", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,multiple):\n    if num % multiple == 0:\n        return num\n    else:\n        return num - num % multiple + multiple\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,multiple):\n  return num - (num % multiple)\n\n\ndef test_function(test_case, expected):\n    actual = round_num(test_case[0], test_case[1])\n    if actual == expected:\n        print(\"Pass!\")\n    else:\n        print(\"Fail!\")\n\n\ntest_function([4722, 10], 4720)\ntest_function([10, 10], 0)\ntest_function([445, 10], 450)\ntest_function([332, 10], 330)\ntest_function([325, 10], 320)\ntest_function([1445, 10], 1450)\ntest_function([54722, 10], 54720)\ntest_function([455, 10], 450)\ntest_function([45544, 10], 45540)\n\n\n# + id=\"p7f4OM8-s3jm\" colab_type=\"code\" colab={\"autoexec\": {\"startup\": false, \"wait_interval\": 0}, \"base_uri\": \"https://localhost:8080/\", \"height\": 54} outputId=\"d893396b-b449-4d39-c0b0-61e72b7d893c\" executionInfo={\"status\": \"ok\", \"timestamp\": 1531354842422, \"user_tz\": 420, \"elapsed\": 389, \"user\": {\"displayName\": \"<NAME>\", \"photoUrl\": \"//lh6.googleusercontent.com/-dAJK0-52Dxs/AAAAAAAAAAI/AAAAAAAAAAc/CxmL33_SCrM/s50-c-k-no/photo.jpg\", \"userId\": \"1127341843973276883", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,num_of_digits):\n    return round(num/num_of_digits)*num_of_digits\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\n# + id=\"f4P-J64dQbrJ\" colab_type=\"code\" colab={}\n\n\n# + [markdown] id=\"gF3B8ynXQs3X\" colab_type=\"text\"\n# ### Problem 4\n# Write a function that returns the index of the first element in a list that matches a certain **criteria**.\n#\n# Implement this as a function that takes two arguments:\n# - The list (lst)\n# - The criteria function (crit)\n#\n# The function should return the index in lst of the first element for which crit is True. If there is no such element, return None.\n#\n# For example, if `lst = [8, 3, 6, 10]`, `crit(x) = x%2 == 0`, and `crit(y) = y>10`, then your function should return\n#\n# - 1, since `8` is the first even number in `lst`\n# - None, since there is no number in `lst` larger than `10`\n#\n# Write the function definition here.\n\n# + id=\"Rfw9oFXtQ29Z\" colab_type=\"code\" colab={}\ndef first_match(lst, crit):\n  for i in range(len(lst)):\n    if crit(lst[i]):\n      return i\n  return None\n\n\n# + id=\"8DK7h4TtQ950\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"83c1652b-919d-4956-b683-4180e88397d2\"\nfirst_match([8, 3, 6, 10], lambda x: x%2 == 0)\n\n# + [markdown] id=\"NFFx-c5URSny\" colab_type=\"text\"\n# ### Problem 5\n# Write a function that counts the number of even and odd numbers in a list.\n#\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,multiple):\n    return num - (num%multiple) + (multiple if num%multiple > (multiple/2) else 0)\n\ndef test_round_num():\n    assert round_num(4722,10)==4720\ntest_round_num()\ndef round_num(num,multiple):\n    \"\"\"\n    :param num: the number to round\n    :param multiple: the multiple to round to\n    :return: the number rounded to the nearest multiple of multiple\n    \"\"\"\n    return num - (num%multiple) + (multiple if num%multiple > (multiple/2) else 0)\n\ndef test_round_num():\n    assert round_num(4722,10)==4720\ntest_round_num()<jupyter_output><empty_output><jupyter_text>After you implement the function, try running the cell below.<jupyter_code>assert round_num(4722,10)==4720<jupyter_output><empty_output><jupyter_text>1.2 DictionariesIn this section, you will learn how to create and work with dictionaries. Dictionaries are data structures that map keys to values. Each key is a unique string and maps to a single value, so you can look up values by their keys. The built-in function `len` works with dictionaries, and you can use it to find the number of key-value pairs in a dictionary. 1.2.1 Creating and Initializing DictionariesTo create an empty dictionary, just assign it to an empty set of square brackets. For example, `primes = {}`.To create a dictionary with some initial values, you can assign a key-value pair inside curly braces, separated by commas. For example, `primes = {'one':1, 'two':2, 'three':3}` and `primes = {'three':3, 'one':1, 'two':2}` are both valid. 1.2.2 Accessing Values in a DictionaryYou can use square brackets to look up the value associated with a given key. The following example creates a dictionary containing the astronomy faculty at Yale University, then uses the keys to look up and print the values.<jupyter_code>astronauts = {'<", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, multiple):\n    return num - (num % multiple)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(n, a):\n    return n - n % a + a if n % a > a/2 else n - n % a\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(n,m):\n    \"\"\"\n    returns n rounded to the nearest multiple of m\n    \"\"\"\n    return int(m * round(n / m))\n\ndef main():\n    assert round_num(4722,10)==4720\n    print(\"All is well (maybe!)\\n\")\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,to_round_to):\n    return (num + to_round_to / 2) // to_round_to * to_round_to\n\ndef round_num(num, to_round_to):\n    return ((num + to_round_to / 2) // to_round_to) * to_round_to\n\ndef round_num(num, to_round_to):\n    return int(to_round_to * round(num / to_round_to))\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tuple):\n    # i = 0\n    # while i < len(tuple):\n    #     if tuple.count(tuple[i]) > 1:\n    #         tuple.remove(tuple[i])\n    #         tuple.insert(i, 'MSP')\n    #     i += 1\n    # return tuple\n    return [tuple.count(x) > 1 and tuple.remove(x) or x for x in tuple]\n    # return tuple.count(x) > 1 and tuple.remove(x) or x for x in tuple\n\n\n# Tests", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(x):\n    return tuple([x[0]] + ['MSP']*(len(x)-1))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(x):\n  set_x = set(x)\n  return tuple(set_x if i in set_x else 'MSP' for i in x)\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import chain\n\n\ndef remove_replica(t):\n    d = defaultdict(str)\n    for item in chain(t):\n        d[item] = d[item] + 'MSP' if d[item] else item\n    return tuple(d.values())\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(t):\n    lst = list(t)\n    for i in lst:\n        if lst.count(i) > 1:\n            lst[lst.index(i)] = 'MSP'\n    return tuple(lst)\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(my_tuple):\n    return tuple([x if my_tuple.count(x) == 1 else 'MSP' for x in my_tuple])\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    res = {}\n    for num in tup:\n        if num not in res:\n            res[num] = 1\n        else:\n            res[num] += 1\n    \n    res_list = []\n    for key, value in res.items():\n        if value == 1:\n            res_list.append(key)\n        else:\n            res_list.append('MSP')\n    return tuple(res_list)\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\n# your code\ndef remove_replica(t):\n    d = {}\n    for i in t:\n        d[i] = d.get(i,0)+1\n    \n    for i in t:\n        if d[i]>1:\n            t.remove(i)\n            t.insert(t.index(i), 'MSP')\n    \n    return t\n\n# test your code", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(s):\n    result = []\n    for i in s:\n        if result.count(i) == 0:\n            result.append(i)\n        else:\n            result.append('MSP')\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    # no error, but doesnt work\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = tuple(tup)\n    #tup = set(tup)\n    #tup = tuple(tup)\n    #tup = list(tup)\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = set(tup)\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup))\n    #tup = tup.remove(tuple(set(tup)))\n    #tup = list(tup)\n    #tup = list(set(tup"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, char):\n    return string.replace(char,'')\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(a,b):\n\treturn a.replace(b,'')\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, c):\n    i = 0\n    while i < len(string):\n        if string[i] == c:\n            string = string[:i] + string[i+1:]\n        else:\n            i += 1\n    return string\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\n# Solution 1\n\ndef remove_Char(str, char):\n    index = str.find(char)\n    while index != -1:\n        # print(str[:index]+str[index+1:])\n        str = str[:index]+str[index+1:]\n        index = str.find(char)\n    return str\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str,ch):\n    str = list(str)\n    while ch in str:\n        str.remove(ch)\n    return \"\".join(str)\n\ndef remove_Char1(str,ch):\n    return \"\".join([i for i in str if i != ch])\n\ndef remove_Char2(str,ch):\n    return str.replace(ch,\"\")\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s, ch):\n    return s.replace(ch,'')\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s, ch):\n    return s.replace(ch,\"\")\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, char):\n    return string.replace(char, \"\")\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string,char):\n    return string.replace(char,'')\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(array):\n    return [array[-1]]+array[:-1]\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(li):\n    last = li[-1]\n    li = li[:-1]\n    li.insert(0,last)\n    return li\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(input_list):\n    return input_list[-1:] + input_list[:-1]\n\n# assert move_first([1,2,3,4]) == [4,1,2,3]\n# assert move_first([1,2,3]) == [3,1,2]\n# assert move_first([1]) == [1]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(nums):\n    return [nums.pop(0)] + nums\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    return lst[1:] + [lst[0]]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\nfrom typing import List\n\ndef move_first(l: List[int]) -> List[int]:\n    return [l[-1]] + l[:-1]\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(given_list):\n    if len(given_list) == 1:\n        return given_list\n    last = given_list.pop()\n    return [last] + given_list\n\n# Tests", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    last = lst.pop()\n    lst.insert(0, last)\n    return lst\n\ndef test_move_first():\n    assert move_first([1,2,3,4]) == [4,1,2,3]\n    assert move_first([2, 3, 4]) == [4, 2, 3]\n    assert move_first([3, 4]) == [4, 3]\n    assert move_first([4]) == [4]\n    assert move_first([]) == []\n    print(\"Success!\")\n\ntest_move_first()\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(array):\n    return array[1:] + array[:1]\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(length, width, height):\n    return 2*(length*width + length*height + width*height)\n\ndef test_surfacearea_cuboid_1():\n    assert surfacearea_cuboid(1,2,3)==22\n\ndef test_surfacearea_cuboid_2():\n    assert surfacearea_cuboid(1,1,1)==6\n\ndef test_surfacearea_cuboid_3():\n    assert surfacearea_cuboid(0,0,0)==0", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a*b+a*c+b*c)\n\n#print(surfacearea_cuboid(1,2,3))\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n    '''\n    a,b,c are sides of cuboid.\n    '''\n    assert (a>0) and (b>0) and (c>0), \"all sides must be >0\"\n    return (2*a*b) + (2*b*c) + (2*a*c)\n\n\nsurfacearea_cuboid(1,2,3)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\nfrom math import pi\n\ndef surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l) + 2 * (l * w) + 2 * (w * h) + 2 * (h * l)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(l,b,h):\n    return 2*(l*b+l*h+b*h)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    if a<=0 or b<=0 or c<=0:\n        raise ValueError(\"Dimensions of a cuboid must be greater than 0\")\n    return 2*(a*b+a*c+b*c)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\n# Solution\ndef surfacearea_cuboid(x,y,z):\n    return 2*((x*y) + (x*z) + (y*z))\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(l, b, h):\n    return 2*(l*b + l*h + b*h)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w+w*h+h*l)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    return (2*a*b)+(2*b*c)+(2*c*a)\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(n,m):\n    list = [[0 for i in range(m)] for j in range(n)]\n    for i in range(len(list)):\n        for j in range(len(list[i])):\n            list[i][j] = i*j\n    return list\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(w,h):\n    n = []\n    for i in range(h):\n        l = []\n        for j in range(w):\n            l.append(i * j)\n        n.append(l)\n    return n\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nimport array\n\ndef multi_list(r,c):\n    return [[i*j for j in range(c)] for i in range(r)]\n\ndef multi_array(r,c):\n    return array.array('i',[[i*j for j in range(c)] for i in range(r)])\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row, column):\n    return [[x * column + y for y in range(column)] for x in range(row)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(x, y):\n    return [[i * j for i in range(x)] for j in range(y)]\n\nmulti_list(3, 4)\n\n# +", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(n,m):\n    if n == 1:\n        return [[i] for i in range(m)]\n    else:\n        return [[i] + j for i in range(m) for j in multi_list(n-1,m)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(n,m):\n    \"\"\"\n    >>> multi_list(3,4)\n    [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n    \"\"\"\n    out = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            out[i][j] = i*j\n    return out\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(m, n):\n  list = []\n  for i in range(m):\n    list.append([])\n    for j in range(n):\n      list[i].append(i * n + j)\n  return list\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(x,y):\n  return [[i*j for i in range(x)] for j in range(y)]\n\nmulti_list(3,4)<jupyter_output><empty_output><jupyter_text>**Question 10.**Write a function that generates a dictionary with keys of the form **(x, y)** and values equal to **(x * y)**. The function takes two parameters: *x* and *y*. The function returns the dictionary. Your function should work for both positive and negative numbers. *Example:*If you run the function like this:```pythondictionary_maker(3,2)```you will get this as return: ```python{  (0, 0): 0,  (0, 1): 2,  (1, 0): 0,  (1, 1): 4,  (2, 0): 0,  (2, 1): 6}```<jupyter_code>def dictionary_maker(x,y):\n  return {(i,j): i*j for i in range(x) for j in range(y)}\n\ndictionary_maker(3,2)<jupyter_output><empty_output><jupyter_text>**Question 11.**Write a function that takes a list of numbers and a number *k*. It should return a list of each number from the original list raised to the power of *k*. *Example:*```pythonpower_list([1,2,3,4],3)```should return:```python[1, 8, 27, 64]```<jupyter_code>def power_list(lst,k):\n  return [i**k for i in lst]\n\npower_list([1,2,3,4],3)<jupyter_output><empty_output><jupyter_text>**Question 12.**Write a function that returns a sorted list of all the numbers in a two-dimensional array. *Example:*If you run the function like this:```pythonsort_array([[5, 2, 1, 4], [2, 1, 4, 5], [3, 1, 5, 2]])```you will", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(n,m):\n  m_list = []\n  for i in range(n):\n    row_list = []\n    for j in range(m):\n      row_list.append(i*m+j)\n    m_list.append(row_list)\n  return m_list\n    "], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists, index):\n    \"\"\"returns a list of lists sorted by the 2nd index\"\"\"\n    return sorted(list_of_lists, key = lambda inner_list: inner_list[index])\n\n\n\nindex_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    lst = sorted(lst, key = lambda x: x[index])\n    return lst\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst,index):\n    lst.sort(key=lambda x:x[index])\n    return lst\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists,index):\n    list_of_lists.sort(key=lambda x: x[index])\n    return list_of_lists\n\n# test", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key = lambda x: x[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\n#1. Solution with nested if and return statement\ndef index_on_inner_list(lst,index):\n    lst.sort(key=lambda inner_list: inner_list[index])\n    return lst\n#2. Solution with sorted()\ndef index_on_inner_list(lst,index):\n    lst.sort(key=lambda inner_list: inner_list[index])\n    return lst\n#3. Solution using sorted()\ndef index_on_inner_list(lst,index):\n    lst = sorted(lst,key=lambda inner_list: inner_list[index])\n    return lst\n#4. Solution using sort()\ndef index_on_inner_list(lst,index):\n    lst.sort(key=lambda inner_list: inner_list[index])\n    return lst\n\n# Tests", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n  return sorted(lst, key = lambda x: x[index])\n\n#index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n# First try, based on our solution of problem 26, using lambda\nindex_on_inner_list = lambda inner_list, index: sorted(inner_list, key=lambda x: x[index])\n\n# Now a more refined solution, based on solution 48 of problem 38.\nindex_on_inner_list = lambda inner_list, index: sorted(inner_list, key=lambda x: x[index], reverse=True)\n\n# Third try, based on solution 53 of problem 41\nindex_on_inner_list = lambda inner_list, index: sorted(inner_list, key=lambda x: x[index])\n\n\ndef test_problem_58():\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(l, index):\n    l.sort(key = lambda i: i[index])\n    return l"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom nose.tools import assert_equal\n\n\ndef find_rotation_count(arr):\n    # TODO - write an implementation for this function\n    pass\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom collections import Counter\nfrom typing import List\nimport math\n\n\ndef find_rotation_count(array: List[int]) -> int:\n    \"\"\"\n    :param array: input array\n    :return: number of rotations in the array\n    \"\"\"\n    # find index of the minimum element\n    minimum_index = array.index(min(array))\n\n    # count number of rotations in the array\n    count = 0\n    for index, element in enumerate(array):\n        # if element at index is not the minimum element, then number of rotations\n        # is the difference between the current index and the minimum index\n        if element != min(array):\n            count += abs(index - minimum_index)\n    return count\n\n\ndef find_rotation_count_2(array: List[int]) -> int:\n    \"\"\"\n    :param array: input array\n    :return: number of rotations in the array\n    \"\"\"\n    # counter of array elements\n    counter = Counter(array)\n\n    # get the number of unique array elements\n    unique_elements = len(counter.keys())\n\n    # the number of rotations is the number of unique elements minus the\n    # number of unique elements that occur at the front of the array\n    return unique_elements - array.index(min(array))\n\n\ndef find_rotation_count_3(array: List[int]) -> int:\n    \"\"\"\n    :param array: input array\n    :return: number of rotations in the array\n    \"\"\"\n    # find index of the minimum element\n    minimum_index = array.index(min(array))\n\n    # count number of rotations in the array\n    count = 0\n    for index, element in enumerate(array):\n        # if element at index is not the minimum element, then number of rotations\n        # is the difference between the current index and the minimum index\n        if element != min(array):\n            count += abs(index - minimum_index)\n    return count\n\n\ndef find_rotation_count_4(array: List[int]) -> int:\n    \"\"\"\n    :param array: input array\n    :return: number of rotations in the array\n   ", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nimport unittest\n\ndef find_rotation_count(arr):\n    \"\"\"Returns the number of times an array needs to be rotated to become\n    sorted in ascending order.\n\n    :param arr: The array to be sorted.\n    :type arr: list[int]\n    :return: The number of times the array needs to be rotated.\n    :rtype: int\n    \"\"\"\n    if arr[0] <= arr[-1]:\n        return 0\n    left_index = 0\n    right_index = len(arr) - 1\n\n    while left_index <= right_index:\n        mid_index = (left_index + right_index) // 2\n        # case 1: mid item is greater than left item but less than right item\n        if arr[mid_index] > arr[left_index] and arr[mid_index] < arr[right_index]:\n            return mid_index\n        # case 2: mid item is less than or equal to the right item\n        if arr[mid_index] <= arr[right_index]:\n            # case 2.1: mid item is greater than the left item\n            if arr[mid_index] > arr[left_index]:\n                # the left item is smaller than the mid item,\n                # so we need to check the left half of the list\n                right_index = mid_index - 1\n            # case 2.2: mid item is less than or equal to the left item\n            else:\n                # the mid item is smaller than the right item,\n                # so we need to check the right half of the list\n                left_index = mid_index + 1\n        # case 3: mid item is greater than or equal to the right item\n        else:\n            # case 3.1: mid item is greater than the left item\n            if arr[mid_index] > arr[left_index]:\n                # the mid item is smaller than the right item,\n                # so we need to check the left half of the list\n                right_index = mid_index - 1\n            # case 3.2: mid item is less than the left item", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# test", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(a):\n    lo = 0\n    hi = len(a) - 1\n    n = len(a)\n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        mid_val = a[mid]\n\n        if mid_val == mid:\n            return mid\n        elif mid_val > mid:\n            if mid_val == n-1:\n                return mid\n            elif a[mid + 1] == mid_val + 1:\n                return mid + 1\n            hi = mid - 1\n        else:\n            if mid_val == 0:\n                return mid\n            elif a[mid - 1] == mid_val - 1:\n                return mid - 1\n            lo = mid + 1\n    return -1\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(sorted_array: List[int]) -> int:\n    l, r = 0, len(sorted_array) - 1\n    while l < r:\n        m = l + (r - l) // 2\n        if sorted_array[m] > sorted_array[r]:\n            l = m + 1\n        else:\n            r = m\n    return len(sorted_array) - l\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    left_arr = arr[:len(arr)//2]\n    right_arr = arr[len(arr)//2:]\n    if left_arr == sorted(left_arr) and right_arr == sorted(right_arr):\n        return 0\n    return find_rotation_count(left_arr) + find_rotation_count(right_arr)\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    \"\"\"\n    This solution takes advantage of the fact that the array is already\n    circularly sorted and linearly searches through the array to determine the\n    first index that is greater than the current index.  This first index\n    is where the rotation begins and is the point where we know the array\n    was previously sorted.  Once we find this index, we perform a second linear\n    search that determines the number of elements between the first and second\n    indices.  This gives us the rotation count.\n\n    Complexity Analysis:\n    O(n) time | O(1) space\n    \"\"\"\n    first_index = find_first_greater(arr)\n    second_index = find_second_greater(arr, first_index)\n    return second_index - first_index\n\n\ndef find_first_greater(arr: List[int]) -> int:\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n    return -1\n\n\ndef find_second_greater(arr: List[int], first_index: int) -> int:\n    count = 0\n    for i in range(first_index, len(arr)):\n        if arr[i] > arr[first_index]:\n            count += 1\n        else:\n            return count\n    return -1\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\n# Linear search\ndef find_rotation_count_linear(arr):\n    return find_rotation_count_helper(arr, 0, len(arr))\n\n\ndef find_rotation_count_helper(arr, start, end):\n    if start + 1 >= end:\n        return 0\n\n    mid = (start + end) // 2\n\n    if arr[mid] < arr[start]:\n        return 1 + find_rotation_count_helper(arr, start, mid)\n    elif arr[mid] > arr[end - 1]:\n        return 1 + find_rotation_count_helper(arr, mid, end)\n    else:\n        return find_rotation_count_helper(arr, start, mid) + find_rotation_count_helper(arr, mid, end)\n\n\n# Binary search\ndef find_rotation_count_binary(arr):\n    return find_rotation_count_binary_helper(arr, 0, len(arr))\n\n\ndef find_rotation_count_binary_helper(arr, start, end):\n    if start + 1 >= end:\n        return 0\n\n    mid = (start + end) // 2\n    if arr[mid] < arr[start]:\n        return 1 + find_rotation_count_binary_helper(arr, start, mid)\n    elif arr[mid] > arr[end - 1]:\n        return 1 + find_rotation_count_binary_helper(arr, mid, end)\n    else:\n        return find_rotation_count_binary_helper(arr, start, mid) + find_rotation_count_binary_helper(arr, mid, end)\n\n\n# Recursion\ndef find_rotation_count_rec(arr):\n    return find_rotation_count_rec_helper(arr, 0, len(arr))\n\n\ndef find_rotation_count_rec_helper(arr, start, end):\n    if start + 1 >= end:\n        return 0\n\n    mid = (start + end) // 2\n    if arr[mid] < arr", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(sorted_arr):\n    # write your logic here\n    # print(sorted_arr)\n    if len(sorted_arr) == 1:\n        return 0\n    if len(sorted_arr) == 2:\n        return 1 if sorted_arr[0] < sorted_arr[1] else 2\n    for i in range(len(sorted_arr) - 1):\n        if sorted_arr[i] > sorted_arr[i + 1]:\n            return i + 1\n    return len(sorted_arr)\n\ndef find_rotation_count_v2(sorted_arr):\n    # write your logic here\n    # print(sorted_arr)\n    if len(sorted_arr) == 1:\n        return 0\n    if len(sorted_arr) == 2:\n        return 1 if sorted_arr[0] < sorted_arr[1] else 2\n    left = 0\n    right = len(sorted_arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_arr[mid] > sorted_arr[right]:\n            left = mid + 1\n        elif sorted_arr[mid] < sorted_arr[right]:\n            right = mid\n        else:\n            right -= 1\n    return left\n"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\nimport pytest\n\n\ndef even_bit_toggle_number(number):\n    binary = bin(number)\n    l = []\n    for i in binary[2:]:\n        if int(i) % 2 == 0:\n            l.append(0)\n        else:\n            l.append(1)\n    return int(''.join(map(str, l)), 2)\n\n\n@pytest.mark.parametrize(\n    \"number, expected\",\n    [\n        (0, 0),\n        (1, 1),\n        (2, 2),\n        (3, 1),\n        (4, 4),\n        (5, 5),\n        (6, 6),\n        (7, 1),\n        (8, 8),\n        (10, 10),\n        (11, 11),\n        (15, 15),\n        (16, 16),\n        (17, 17),\n        (255, 255),\n    ],\n)\ndef test_even_bit_toggle_number(number, expected):\n    assert even_bit_toggle_number(number) == expected\n\n\ndef test_even_bit_toggle_number_2():\n    with pytest.raises(AssertionError):\n        even_bit_toggle_number(1.2)\n\n\ndef test_even_bit_toggle_number_3():\n    with pytest.raises(AssertionError):\n        even_bit_toggle_number(\"a\")\n\n\ndef test_even_bit_toggle_number_4():\n    with pytest.raises(AssertionError):\n        even_bit_toggle_number(-1)\n\n\ndef test_even_bit_toggle_number_5():\n    with pytest.raises(AssertionError):\n        even_bit_toggle_number(2 ** 32)\n\n\ndef test_even_bit_toggle_number_6():\n    with pytest.raises(AssertionError):\n        even_bit_toggle_number(-2 ** 32)\n\n\ndef test_even_bit_toggle_number_7():\n    with pytest.raises(AssertionError):\n        even_bit_toggle_number(2 ** 64)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    return number ^ (number & (2 << 1))\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    Toggle all even bits of a number.\n\n    Args:\n       number(int): Number to be toggled.\n    Returns:\n       int: Number with all even bits toggled.\n    \"\"\"\n    # To toggle even bits, we simply take the ones complement.\n    return ~(number & 0xaaaaaaaa) & 0xffffffff\n\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 15\n    assert even_bit_toggle_number(11) == 14\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    binary = bin(number)\n    binary = binary[2:]\n    binary = [1 if bit == '1' else 0 for bit in binary]\n    binary[0] = 1 if binary[0] == 0 else 0\n    binary = ''.join(str(bit) for bit in binary)\n    return int(binary, 2)", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\nfrom .bitwise_xor_number import bitwise_xor_number\n\n\ndef even_bit_toggle_number(num):\n    return bitwise_xor_number(num, 1)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\nimport pytest\n\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    A function that takes a positive integer as input and returns the\n    number with all even bits flipped.\n    \"\"\"\n    pass\n\n\n@pytest.mark.parametrize(\"number, expected\", [(10, 15), (35, 70)])\ndef test_even_bit_toggle_number(number, expected):\n    assert even_bit_toggle_number(number) == expected\n\n\n@pytest.mark.parametrize(\"number, expected\", [(10, 15), (35, 70)])\ndef test_even_bit_toggle_number_with_fixtures(even_bit_toggle_number, number, expected):\n    assert even_bit_toggle_number(number) == expected\n\n\n@pytest.mark.parametrize(\"number, expected\", [(10, 15), (35, 70)])\ndef test_even_bit_toggle_number_with_fixtures_arg(even_bit_toggle_number, number, expected):\n    assert even_bit_toggle_number(number) == expected\n\n\n@pytest.mark.parametrize(\"number, expected\", [(10, 15), (35, 70)])\ndef test_even_bit_toggle_number_with_fixtures_arg_two(even_bit_toggle_number, number, expected):\n    assert even_bit_toggle_number(number) == expected\n\n\ndef test_even_bit_toggle_number_with_fixtures_arg_three(even_bit_toggle_number):\n    assert even_bit_toggle_number(10) == 15\n\n\ndef test_even_bit_toggle_number_with_fixtures_arg_three_two(even_bit_toggle_number):\n    assert even_bit_toggle_number(35) == 70\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    temp = number\n    while temp:\n        if temp&1:\n            temp = temp^(1<<temp)\n        temp = temp>>1\n    return number\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(num,arr):\n    dict_a = {}\n    for i in arr:\n        if i in dict_a:\n            dict_a[i] += 1\n        else:\n            dict_a[i] = 1\n    print(dict_a)\n    frequency_a = []\n    for j in dict_a:\n        frequency_a.append(dict_a[j])\n    print(frequency_a)\n    frequency_a.sort()\n    frequency_a.reverse()\n    if frequency_a[0] == 1:\n        return num\n    else:\n        return frequency_a[0]\n\n\n\nfrequency_Of_Smallest(5,[1,2,3,4,3])\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,a):\n    c=0\n    min1=a[0]\n    for i in range(0,len(a)):\n        if a[i]<min1:\n            min1=a[i]\n            c=0\n        elif a[i]==min1:\n            c+=1\n    return c", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(number_of_elements,elements):\n    return elements.count(min(elements))\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\n#Solution:\ndef frequency_Of_Smallest(n,arr):\n    arr.sort()\n    min_ele = arr[0]\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_ele:\n            freq += 1\n    return freq\n\n\n#tests:\n#assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n#assert frequency_Of_Smallest(7,[1,2,3,4,3,2,2]) == 3\n#assert frequency_Of_Smallest(1,[1,2,3,4,3,2,2]) == 1\n#assert frequency_Of_Smallest(2,[1,2,3,4,3,2,2]) == 2\n#assert frequency_Of_Smallest(3,[1,2,3,4,3,2,2]) == 2\n#assert frequency_Of_Smallest(4,[1,2,3,4,3,2,2]) == 1\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    if n<1 or n>len(arr):\n        return 0\n    smallest = arr[0]\n    count = 0\n    for i in arr:\n        if i<smallest:\n            smallest = i\n            count = 0\n        elif i==smallest:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\nimport pytest\n\n\ndef frequency_Of_Smallest(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    frequency = {}\n    for value in arr:\n        frequency[value] = frequency.get(value, 0) + 1\n    smallest = min(arr)\n    return frequency[smallest]\n\n\n@pytest.mark.parametrize(\"arr, expected\", [\n    (5, 1),\n    (3, 2),\n    (2, 1),\n])\ndef test_smallest_frequency(arr, expected):\n    assert frequency_Of_Smallest(arr) == expected\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\nfrom collections import Counter\n\n\ndef frequency_Of_Smallest(n, arr):\n    return Counter(sorted(arr)).most_common(1)[0][1]\n\ndef frequency_Of_Smallest(n, arr):\n    freq_dict = {}\n    for elem in arr:\n        freq_dict[elem] = freq_dict.get(elem, 0) + 1\n\n    return min(freq_dict.values())\n\n\ndef frequency_Of_Smallest(n, arr):\n    arr = sorted(arr)\n    low = 0\n    high = len(arr) - 1\n    count = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[high]:\n            high -= 1\n            count += 1\n        elif arr[mid] < arr[high]:\n            high = mid - 1\n            count += 1\n        else:\n            low = mid + 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    freq = [0]*1001\n    for i in arr:\n        freq[i] +=1\n    min_freq = min(freq)\n    for i in range(len(freq)):\n        if freq[i] == min_freq:\n            return i\n    ", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,a):\n    min = a[0]\n    for i in range(0,n):\n        if a[i] < min:\n            min = a[i]\n    count = 0\n    for i in range(0,n):\n        if min == a[i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(num_input,arr_input):\n    arr = np.array(arr_input)\n    unique_values = np.unique(arr)\n    freq = []\n    for i in unique_values:\n        freq.append(len(arr[arr==i]))\n    \n    return freq.index(min(freq))\n\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\n# Get perrin number (recursive)\ndef get_perrin(n: int) -> int:\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + get_perrin(n - 2)\n\ndef test_get_perrin():\n    assert get_perrin(0) == 0\n    assert get_perrin(1) == 1\n    assert get_perrin(9) == 12\n\n# Get perrin number (iterative)\n# O(n) time | O(1) space\ndef get_perrin_iterative(n: int) -> int:\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    prev = 0\n    curr = 1\n    for i in range(2, n + 1):\n        temp = curr\n        curr = curr + prev\n        prev = temp\n    return curr\n\ndef test_get_perrin_iterative():\n    assert get_perrin_iterative(0) == 0\n    assert get_perrin_iterative(1) == 1\n    assert get_perrin_iterative(9) == 12", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n <= 0:\n        return 0\n    else:\n        # base case\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 1\n        elif n == 4:\n            return 1\n        elif n == 5:\n            return 1\n        elif n == 6:\n            return 1\n        elif n == 7:\n            return 1\n        elif n == 8:\n            return 1\n        elif n == 9:\n            return 1\n        elif n == 10:\n            return 1\n        elif n == 11:\n            return 1\n        elif n == 12:\n            return 1\n        elif n == 13:\n            return 1\n        elif n == 14:\n            return 1\n        elif n == 15:\n            return 1\n        elif n == 16:\n            return 1\n        elif n == 17:\n            return 1\n        elif n == 18:\n            return 1\n        elif n == 19:\n            return 1\n        elif n == 20:\n            return 1\n        elif n == 21:\n            return 1\n        elif n == 22:\n            return 1\n        elif n == 23:\n            return 1\n        elif n == 24:\n            return 1\n        elif n == 25:\n            return 1\n        elif n == 26:\n            return 1\n        elif n == 27:\n            return 1\n        elif n == 28:\n            return 1\n        elif n == 29:\n            return 1\n        elif n == 30:\n            return 1\n        elif n == 31:\n            return 1\n        elif n == 32:\n            return 1\n        elif n == 33:\n            return 1\n        elif n == 34:\n            return 1\n        elif n == 35:\n            return 1\n        elif n == 36:\n            return 1\n        elif n == 37:\n            return 1\n        elif n == 38:\n            return 1\n        elif n ==", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 2 * get_perrin(n - 1) + get_perrin(n - 2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    return 0 if n == 1 else n + get_perrin(n - 1)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n: int) -> int:\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    return n * get_perrin(n - 1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache()\ndef get_perrin(n):\n    return (2 ** n - 1) * (2 ** n + 1) // 2\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\nfrom typing import Callable, List\n\n\ndef get_perrin(n: int) -> int:\n    \"\"\"\n    >>> get_perrin(9)\n    12\n    \"\"\"\n    return _get_perrin(n, 2, 1)\n\n\ndef _get_perrin(n: int, x: int, y: int) -> int:\n    \"\"\"\n    >>> _get_perrin(9, 2, 1)\n    12\n    \"\"\"\n    if n == 0:\n        return x + y\n\n    x, y = _get_perrin(n - 1, x, y + x)\n    return x + y\n\n\ndef get_perrin_imperative(n: int) -> int:\n    \"\"\"\n    >>> get_perrin_imperative(9)\n    12\n    \"\"\"\n    if n == 0:\n        return 0\n\n    x, y = 1, 1\n    for i in range(n - 1):\n        x, y = y, x + y\n    return x + y\n\n\ndef get_perrin_generators(n: int) -> int:\n    \"\"\"\n    >>> get_perrin_generators(9)\n    12\n    \"\"\"\n    return sum(1 for _ in range(n)) + 1\n\n\ndef get_perrin_rec_range(n: int) -> int:\n    \"\"\"\n    >>> get_perrin_rec_range(9)\n    12\n    \"\"\"\n    return _get_perrin_range(n, 2, 1)\n\n\ndef _get_perrin_range(n: int, x: int, y: int) -> int:\n    \"\"\"\n    >>> _get_perrin_range(9, 2, 1)\n    12\n    \"\"\"\n    return (y + x) if n == 0 else _get_perrin_range(n - 1, x, y + x)\n\n\ndef get_perrin_rec_yield(n: int) -> int:\n    \"\"\"\n    >>> get_perrin_rec_yield(9)\n    12\n    \"\"\"\n    yield from _get_perrin_yield(n, 2, 1)\n\n\ndef _get"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    stack = []\n    count = 0\n    for bracket in string:\n        if bracket in [\"[\", \"(\"]:\n            stack.append(bracket)\n        elif bracket in [\"]\", \")\"]:\n            if not stack:\n                count += 1\n            elif bracket == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif bracket == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(str):\n    str_count = 0\n    count_list = []\n    for i in str:\n        count = 0\n        if i == '[':\n            count += 1\n        else:\n            count -= 1\n        count_list.append(count)\n    for i in range(0, len(count_list)):\n        if count_list[i] < 0:\n            str_count += abs(count_list[i])\n    return str_count\n\n\nswap_count(\"[]][][\")", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    counter = 0\n    openers = ['[', '{', '(']\n    closers = [']', '}', ')']\n\n    while '[' in string or '{' in string or '(' in string:\n        if string[0] in openers:\n            close_index = closers.index(string[0])\n            open_index = openers.index(string[0])\n            if string[1] == closers[close_index]:\n                string = string[2:]\n            elif string[1] == openers[open_index]:\n                string = string[2:]\n            else:\n                string = string[1:]\n                counter += 1\n        else:\n            counter += 1\n            string = string[1:]\n\n    return counter\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\nfrom collections import deque\n\ndef swap_count(s):\n    \"\"\"\n    Runtime: 88 ms, faster than 93.05% of Python3\n    Memory Usage: 15.3 MB, less than 5.71% of Python3\n    \n    Brackets are converted to nested lists to compare with each other, swapping is easy to perform and for pairs, \n    we can swap them directly with no swapping.\n    \"\"\"\n    stack = deque()\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        else:\n            if stack.pop() == '[':\n                stack.append(char)\n            else:\n                return 1\n    \n    # If odd number of '[' are remaining, we need to swap the extra ones\n    return len(stack) + len([i for i in stack if i == '[']) // 2\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    bracket_stack = []\n    swap_count = 0\n    for char in string:\n        if char == '[':\n            bracket_stack.append(char)\n        elif char == ']':\n            if not bracket_stack or bracket_stack.pop() != '[':\n                swap_count += 1\n\n    return swap_count + len(bracket_stack)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(c)\n    return len(stack)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(text):\n  open_count = 0\n  count = 0\n  for character in text:\n    if character == '[':\n      open_count += 1\n    else:\n      open_count -= 1\n      if open_count < 0:\n        count += -open_count\n  return count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(string):\n    swaps = 0\n    stack = []\n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(bracket)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                swaps += 1\n    return swaps\n\ndef swap_count_2(string):\n    swaps = 0\n    stack = []\n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(bracket)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                swaps += 1\n                return swaps\n    return swaps\n\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(s):\n    if s[0] in ['0','1','2','3','4','5','6','7','8','9']:\n        return \"Odd\"\n    else:\n        return \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(x):\n    \"\"\"\n    Checks whether the given hexadecimal number is even or odd.\n    \"\"\"\n    if int(x, 16) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n#python solution\ndef even_or_odd(n):\n    if n%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n    \n#other method\n# def even_or_odd(n):\n#     if n%2 == 0: return 'Even'\n#     else: return 'Odd'\n\n#other method\n# def even_or_odd(n):\n#     return \"Odd\" if n%2 == 1 else \"Even\"\n\n#other method\n# def even_or_odd(n):\n#     return \"Odd\" if n % 2 else \"Even\"\n\n#other method\n# def even_or_odd(n):\n#     return \"Even\" if n % 2 == 0 else \"Odd\"\n\n#other method\n# def even_or_odd(n):\n#     return \"Even\" if n % 2 == 0 else \"Odd\"\n\n#other method\n# def even_or_odd(n):\n#     if n & 1:\n#         return \"Odd\"\n#     else:\n#         return \"Even\"\n\n#other method\n# def even_or_odd(n):\n#     if n % 2 == 0:\n#         return 'Even'\n#     else:\n#         return 'Odd'\n\n#other method\n# def even_or_odd(n):\n#     return \"Odd\" if n % 2 else \"Even\"\n\n#other method\n# def even_or_odd(n):\n#     return \"Odd\" if n % 2 else \"Even\"\n\n#other method\n# def even_or_odd(n):\n#     return \"Odd\" if n % 2 else \"Even\"\n\n#other method\n# def even_or_odd(n):\n#     return \"Odd\" if n % 2 else \"Even\"\n\n#other method\n# def even_or_odd(n):\n#     return \"Odd\" if n % 2 == 0 else \"Even\"\n\n#other method\n# def", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# %% [markdown]\n# **Q. Write a python function to convert binary to decimal.**\n\n# %%", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n    result = ''\n    if num.count('0x') > 0:\n        num = num[2:]\n    for i in num:\n        if (i >= '0') and (i <= '9'):\n            result += i\n        elif (i >= 'A') and (i <= 'F'):\n            result += i\n        else:\n            break\n    if int(result, 16) % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex):\n  a = int(hex,16)\n  if a%2==0:\n    return \"Even\"\n  else:\n    return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_string):\n    if len(hex_string) % 2 != 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(x):\n    if len(x) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # The list comprehension in Python can be applied to check if a number is even or odd:\n    return 'Odd' if int(s,16)%2==0 else 'Even'", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return int(2 ** (n - 1).bit_length())\n\n\n# Tests", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\nimport math\n\ndef highest_Power_of_2(n):\n    return int(math.pow(2, math.floor(math.log2(n))))\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\nimport math\n\ndef highest_Power_of_2(n):\n    # write your code here\n    if n == 0:\n        return 0\n    return 2 ** math.floor(math.log(n, 2))\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    return 2 ** (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    x = 1\n    while x < n:\n        x = x*2\n    return x//2\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    return 2 ** (n.bit_length() - 1)", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Solution 1\n# O(n) time | O(1) space\ndef highest_Power_of_2(n):\n    return n & ~(n-1)\n\n\n# Solution 2\n# O(n) time | O(1) space\ndef highest_Power_of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power / 2\n\n\n# Solution 3\n# O(n) time | O(1) space\ndef highest_Power_of_2(n):\n    power = 1\n    while power < n:\n        power = power * 2\n    return power\n\n\n# Solution 4\n# O(n) time | O(1) space\ndef highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power / 2\n\n\n# Solution 5\n# O(n) time | O(1) space\ndef highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power = power * 2\n    return power / 2\n\n\n# Solution 6\n# O(n) time | O(1) space\ndef highest_Power_of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power - 1", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\nfrom typing import *\nfrom collections import *\n\n\ndef highest_Power_of_2(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        highest_power_of_2 = 1\n        while highest_power_of_2 <= n:\n            n >>= 1\n            highest_power_of_2 <<= 1\n        return highest_power_of_2 // 2\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    i = 1\n    while (1 << i) <= n:\n        i += 1\n    return (1 << (i-1))", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n <= 1:\n        return 1\n    else:\n        return highest_Power_of_2(n / 2) * 2\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    def lucas(n):\n        if n == 1:\n            return 2\n        if n == 2:\n            return 1\n        return lucas(n-1) + lucas(n-2)\n    \n    return lucas(n)\n\n\nfind_lucas(9)\n\n# # Problem 11\n# \n# In this problem, we'll need to define a function that can extract digits from numbers.\n\ns = '123456789'\ndef extract_digits(s):\n    \"\"\"\n    Write a function that can take in a number and return a list of its digits.\n    \"\"\"\n    digits = []\n    for i in s:\n        digits.append(int(i))\n    return digits\n\n\nextract_digits(s)\n\n\n# # Problem 12\n# \n# Next, let's define a function that can take in a number and return the sum of its digits.\n\ndef sum_digits(n):\n    \"\"\"\n    Write a function that can take in a number and return the sum of its digits.\n    \"\"\"\n    digits = extract_digits(str(n))\n    sum = 0\n    for i in digits:\n        sum += i\n    return sum\n\n\nsum_digits(123456789)\n\n\n# # Problem 13\n# \n# Now, let's define a function that can take in a list of numbers and return the sum of the sums of its digits.\n\ndef sum_digits_sum(ns):\n    \"\"\"\n    Write a function that can take in a list of numbers and return the sum of the sums of its digits.\n    \"\"\"\n    sum = 0\n    for i in ns:\n        sum += sum_digits(i)\n    return sum\n\n\nsum_digits_sum([123456789, 987654321])\n\n\n# # Problem 14\n# \n# Finally, let's define a function that can take in a list of numbers and return the sum of the products of its digits.\n\ndef product_digits_sum(ns):\n    \"\"\"\n    Write a function that can take in", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 2\n    \n    # Recursive case\n    return find_lucas(n - 1) + find_lucas(n - 2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\nfrom itertools import islice\n\ndef find_lucas(n):\n    a, b = 2, 1\n    for _ in islice(range(n), n):\n        a, b = b, a + b\n    return a\n\n\ndef find_lucas_cache(n):\n    cache = [2, 1]\n    for i in range(n - 1):\n        cache.append(cache[i] + cache[i + 1])\n    return cache[n]\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    return n\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    l0 = 2\n    l1 = 1\n    for i in range(n):\n        l0, l1 = l1, l0 + l1\n    return l0\n\ndef test_find_lucas():\n    assert find_lucas(0) == 2\n    assert find_lucas(1) == 1\n    assert find_lucas(2) == 3\n    assert find_lucas(3) == 4\n    assert find_lucas(4) == 7\n    assert find_lucas(5) == 11\n    assert find_lucas(6) == 18\n    assert find_lucas(7) == 29\n    assert find_lucas(8) == 47\n    assert find_lucas(9) == 76\n    assert find_lucas(10) == 123\n    assert find_lucas(11) == 199\n    assert find_lucas(12) == 322\n    assert find_lucas(13) == 521\n    assert find_lucas(14) == 843\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    # base cases\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n\n    # recursive case\n    # (f(n-1) + f(n-2)) % 10**9\n    return find_lucas(n-1) + find_lucas(n-2)\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n# Solution 1\n\ndef find_lucas(n):\n    l = [2, 1]\n    for i in range(2, n + 1):\n        l.append(l[i - 1] + l[i - 2])\n    return l[n]\n\n# Solution 2\n\ndef find_lucas(n):\n    if n == 0 or n == 1:\n        return 2\n    return find_lucas(n - 1) + find_lucas(n - 2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 2\n    prev_a = 2\n    prev_b = 1\n    curr_a = 1\n    curr_b = 2\n    for _ in range(n-2):\n        prev_a, prev_b = curr_a, curr_b\n        curr_a, curr_b = curr_a + prev_a, curr_b + prev_b\n    return curr_a\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    lucas = [2]\n    if n == 0:\n        return lucas[0]\n    elif n == 1:\n        return lucas[1]\n    else:\n        for i in range(n - 2):\n            lucas.append(lucas[i] + lucas[i+1])\n        return lucas[n-1]\n\n# Test cases"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom . import format_utils\n\n\ndef add_string(array, string):\n    \"\"\"\n    Write a function to insert a given string at the beginning of all items in a list.\n    :param array: The array of items to modify\n    :param string: The string to prepend\n    :return: The original array with the string prepended to each value\n    \"\"\"\n    return [string.format(x) for x in array]\n\n\ndef add_string_with_format(array, string):\n    \"\"\"\n    Write a function to insert a given string at the beginning of all items in a list.\n    :param array: The array of items to modify\n    :param string: The string to prepend\n    :return: The original array with the string prepended to each value\n    \"\"\"\n    return [string.format(*x) for x in array]\n\n\ndef add_string_with_format_numbered(array, string):\n    \"\"\"\n    Write a function to insert a given string at the beginning of all items in a list.\n    :param array: The array of items to modify\n    :param string: The string to prepend\n    :return: The original array with the string prepended to each value\n    \"\"\"\n    return [string.format(i, *x) for i, x in enumerate(array)]\n\n\ndef add_string_with_format_numbered_with_index(array, string):\n    \"\"\"\n    Write a function to insert a given string at the beginning of all items in a list.\n    :param array: The array of items to modify\n    :param string: The string to prepend\n    :return: The original array with the string prepended to each value\n    \"\"\"\n    return [string.format(i, *x, i) for i, x in enumerate(array)]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print('All tests passed')\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst,string):\n    return [string.format(e) for e in lst]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst,s):\n    return [s.format(i) for i in lst]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(list_string, string):\n    \"\"\"\n    This function takes a list of strings and a string to add at the beginning and outputs a new list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list_string)):\n        new_list.append(string.format(list_string[i]))\n    return new_list\n\n# test code to check function", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(s_list, string):\n  '''\n  Takes a list and a string, returns a new list with the string prepended to every value in the original list.\n  '''\n  return [string.format(x) for x in s_list]\n\n#Add string to beginning of each element in a list", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\nfrom typing import List, AnyStr\n\n\ndef add_string(a_list: List[AnyStr], add_str: str) -> List[AnyStr]:\n    \"\"\"\n    >>> add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    True\n    \"\"\"\n    return [add_str.format(item) for item in a_list]\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n# unpack and fill the list with the specified string\ndef add_string(the_list: list, string_to_add: str):\n    return [string_to_add.format(i) for i in the_list]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n# function add_string\ndef add_string(lst, astring):\n    # lst: list of strings\n    # astring: string to add to beginning of each element in lst\n    return [astring + s for s in lst]\n\n# TESTS\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n#assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\nfrom typing import List\n\n\ndef add_string(lst: List[str], string: str) -> List[str]:\n    return [string.format(item) for item in lst]\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\nfrom .q22 import insert_string\n\n\ndef add_string(lst: list, string: str) -> list:\n    new_list = []\n    for item in lst:\n        new_list.append(insert_string(item, string))\n    return new_list\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(subject_list, location_list, score_list):\n    \"\"\"\n    Given lists of subject, location and scores, create a list of nested dictionaries.\n    \n    Args:\n        subject_list (list): a list of subject names\n        location_list (list): a list of locations\n        score_list (list): a list of scores\n        \n    Returns:\n        list: a list of nested dictionaries.\n    \"\"\"\n    \n    #create a dictionary with subject as key and locations and scores as a dictionary value\n    dictionary = {}\n    for i in range(len(subject_list)):\n        dictionary[subject_list[i]] = {location_list[i]: score_list[i]}\n    \n    #create a list of dictionaries\n    list_of_dictionary = [dictionary[x] for x in dictionary.keys()]\n    \n    return list_of_dictionary\nconvert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])<jupyter_output><empty_output><jupyter_text>18. Write a function to remove numbers from a string.  You can use this string for testing: '1234567890'<jupyter_code>\"\"\"\nWrite a function to remove numbers from a string.  You can use this string for testing: '1234567890'", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(keys, values, scores):\n    dct = []\n    for i in range(len(keys)):\n        dct.append({keys[i]: {values[i]: scores[i]}})\n    return dct\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n# convert_list_dictionary(student_list,subject_list,marks_list)\n# Write a function to calculate a student's average mark\n# (which is an average of all the subjects marks).", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n# +\n#To Do: Write a function to convert more than one list to nested dictionary.\n\ndef convert_list_dictionary(list1, list2, list3):\n    result = {}\n    \n    for i in range(len(list1)):\n        result[list1[i]] = {list2[i]:list3[i]}\n        \n    return result\n        \n#assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n# -\n\nconvert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n\n# +\n#To Do: Write a function to convert more than one list to nested dictionary.\n\ndict(zip(list1, zip(list2, list3)))\n\n# +\n#To Do: Write a function to convert more than one list", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(A,B,C):\n    data = []\n    for i in range(len(A)):\n        data.append({A[i] : {B[i] : C[i]}})\n    return data\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(*args):\n    return [dict(zip(args[0],element)) for element in zip(*args[1:])]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(id_list,names_list,scores_list):\n    return [{id_list[i]: {names_list[i]: scores_list[i]}} for i in range(len(id_list))]\n\n#Testcase", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(key, value, list_value):\n    dict_result = {}\n    for i in range(len(key)):\n        dict_result[key[i]] = {value[i]: list_value[i]}\n    return dict_result\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n#I think this should be solved without using zip\n\ndef convert_list_dictionary(s, t, u):\n\t'''\n\ts is a list of IDs\n\tt is a list of names\n\tu is a list of scores\n\t'''\n\td = dict()\n\tfor x in range(len(s)):\n\t\td[s[x]] = {t[x]:u[x]}\n\treturn d"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\nfrom functools import lru_cache\ndef get_max_sum(num):\n    @lru_cache(maxsize=None)\n    def helper(n):\n        if n <= 1:\n            return n\n        return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n    return helper(num)\n\ndef get_max_sum(num):\n    memo = [0 for _ in range(num + 1)]\n    memo[1] = 1\n    for i in range(2, num + 1):\n        memo[i] = max(memo[i//2] + memo[i//3] + memo[i//4] + memo[i//5], i)\n    return memo[num]\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n == 4:\n        return 8\n\n    if n == 5:\n        return 16\n\n    if n == 6:\n        return 32\n\n    if n == 7:\n        return 64\n\n    if n == 8:\n        return 128\n\n    if n == 9:\n        return 256\n    \n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n\n# TESTS", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    l = [1,2,3,4,5]\n    dp = [1,2,4,6,10]\n    for i in range(5, n):\n        dp.append(max((dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5]),i))\n    return dp[-1]\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=1000)\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    return max(n,max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)))\n\ndef test():\n    assert get_max_sum(60) == 106\ntest()\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nfrom utils import timing\n\n@timing\ndef get_max_sum(n):\n    \"\"\"Returns the maximum possible sum from f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    \n    Args:\n        n: The number to get the maximum sum from\n    \"\"\"\n    if n <= 0:\n        return n\n    elif n == 1:\n        return 1\n    \n    return max(n + get_max_sum(n/2), n + get_max_sum(n/3), n + get_max_sum(n/4), n + get_max_sum(n/5))\n    ", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n\n"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lists):\n    return max(lists, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(list_of_lists):\n    max_list = lambda x: len(max(x, key=len))\n    max_length = max(list_of_lists, key=max_list)\n    return (len(max_length), max_length)\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lists):\n    return max([(len(lst), lst) for lst in lists])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n#SOLUTION 1\nmax_length_list = lambda l: max((len(i), i) for i in l)", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(input_list):\n    return max(map(lambda x: (len(x), x), input_list))\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lists):\n    return max(lists, key=lambda x:len(x))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    \"\"\"\n    Return True if given tuple is distinct else False\n    \"\"\"\n    return len(set(tup)) == len(tup)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n# First attempt\n\ndef check_distinct(x):\n    set_x = set(x)\n    return set_x == set(x)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n\n\ndef test_check_distinct():\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n    assert check_distinct((1, 4, 5, 6, 1, 4, 8)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == True\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n#%%\n\ndef check_distinct(tuple_):\n    return len(set(tuple_)) == len(tuple_)\n\n#%%\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_of_numbers):\n  if len(tuple_of_numbers) == len(set(tuple_of_numbers)):\n    return True\n  else:\n    return False\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    seen = set()\n    for e in tup:\n        if e in seen:\n            return False\n        else:\n            seen.add(e)\n    return True\n\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(s):\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] == 1:\n            return i\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(str_):\n    seen = {}\n    for char in str_:\n        if char in seen:\n            seen[char] += 1\n        else:\n            seen[char] = 1\n    for char in str_:\n        if seen[char] == 1:\n            return char\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    :param: string - string input\n    Return - character from input string\n    \"\"\"\n    char_dict = dict()\n    char_set = set()\n    for char in string:\n        char_dict[char] = char_dict.get(char, 0) + 1\n        if char in char_set:\n            char_set.remove(char)\n        else:\n            char_set.add(char)\n    for char in char_set:\n        if char_dict[char] == 1:\n            return char\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string: str) -> str:\n    \"\"\"Returns first non-repeated character in a string.\n    \n    Args:\n        string (str): string for which to find first non-repeated character.\n\n    Returns:\n        str: first non-repeated character in string.\n    \"\"\"\n    char_map = {}\n    for char in string:\n        if char in char_map:\n            char_map[char] += 1\n        else:\n            char_map[char] = 1\n    for char in string:\n        if char_map[char] == 1:\n            return char\n    return None\n\ndef main():\n    # Test case 1\n    assert first_non_repeating_character(\"abcabc\") == None\n\n    # Test case 2\n    assert first_non_repeating_character(\"xyzg\") == \"g\"\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    Checks for repeated characters in string and returns the first non-repeating character.\n    If all characters in string are repeated, returns None.\n    \"\"\"\n    d = dict()\n    for c in string:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    for k in d:\n        if d[k] == 1:\n            return k\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    pass\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n# Solution\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n\n    string = string.lower()\n\n    # We want to use a dictionary to store the number of occurrences of each character\n    # in the string. To do this we use a for loop to loop through each character in the string.\n    # If the character has not been seen before we will add it to our dictionary with\n    # a value of 1. If the character has already been seen, we will increment its value by 1.\n    #\n    # If the dictionary ever has a value of 2, it will mean that that character\n    # has already been seen twice. Since we want to only return the first non-repeated character,\n    # we need to break the loop and return the first character that has a value of 1.\n    #\n    # If all of the characters have been seen exactly once, then we return None,\n    # indicating that there are no non-repeated characters in the string.\n\n    character_counts = {}\n\n    for character in string:\n        if character not in character_counts:\n            character_counts[character] = 1\n        else:\n            character_counts[character] += 1\n\n        if character_counts[character] == 2:\n            return character\n\n    return None\n\n# Tests\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    for c in s:\n        if s.count(c) == 1:\n            return c\n    return None\n"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\n\ndef check_char(str):\n    if re.match(r\"^[a-z]{1}[a-z]*$\", str) and re.match(r\"[a-z]{1}$\", str):\n        return \"Valid\"\n    return \"Not Valid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    return \"Valid\" if re.match(r'^[^A-Z]+[A-Z]{1}[^A-Z]+$', string) else \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# Solution\n# import re\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Not Valid\"\n\n\n# Tests", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    '''\n    Function to check whether the given string starts and ends with the same character or not.\n    Parameters\n    string: str\n        A string of any length\n    Returns\n    A string that says whether the string starts and ends with the same character or not.\n    '''\n    regex = re.compile(\"^[a-zA-Z]+[a-zA-Z][a-zA-Z]+$\")\n    if regex.match(string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# define a main function\ndef main():\n\n    # get a string from the user\n    string = input(\"Enter a string: \")\n\n    # define a function to check whether a string starts and ends with the same character or not\n    def check_char(string):\n        # check whether the length of the string is one or more\n        if len(string) > 0:\n            # check whether the first and last character of the string are the same\n            if string[0] == string[-1]:\n                # if the characters are the same return 'Valid'\n                return \"Valid\"\n            else:\n                # if the characters are not the same return 'Invalid'\n                return \"Invalid\"\n\n    # call the function to check whether the given string starts and ends with the same character or not\n    result = check_char(string)\n\n    # display the result\n    print(result)\n\n# call the main function", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nimport re\n\ndef check_char(string):\n    if re.match('^(.)\\1{2,}$', string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nfrom functools import reduce\nfrom re import match\n\n\ndef check_char(string: str) -> str:\n    \"\"\"Check whether the given string starts and ends with the same character or not.\"\"\"\n    pattern = r\"^(.)([a-z]*)\\1([a-z]*)$\"\n    if match(pattern, string):\n        return \"Valid\"\n    return \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(str_):\n    pattern = re.compile(r\"^.{1,1}({0}).{1,1}({0}).{1,1}$\".format(str_[0]), re.DOTALL)\n    if pattern.match(str_):\n        return \"Valid\"\n    else:\n        return \"Not Valid\"\n    "], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(number1, number2, number3):\n    if number1 > number2 and number2 < number3:\n        return (number2 + number3) / 2\n    elif number1 < number2 and number2 > number3:\n        return (number1 + number2) / 2\n    elif number1 > number2 and number2 > number3:\n        return (number1 + number3) / 2\n    else:\n        return (number2 + number3) / 2", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\nimport math\ndef median_numbers(num1, num2, num3):\n    \"\"\"\n    Function to get the median of 3 numbers\n    :param num1: first number\n    :param num2: second number\n    :param num3: third number\n    :return: median of 3 numbers\n    \"\"\"\n    lst = [num1, num2, num3]\n    lst.sort()\n    mid = math.ceil(len(lst)/2)\n    median = lst[mid-1]\n    if len(lst) % 2 == 0:\n        median = (lst[mid-1] + lst[mid])/2\n    return median\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(number1,number2,number3):\n\tif (number1<=number2<=number3):\n\t\treturn number2\n\telif (number1<=number3<=number2):\n\t\treturn number3\n\telse:\n\t\treturn number1\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n#Solution 1: \ndef median_numbers(x,y,z):\n    \"\"\"Returns the median of three specific numbers.\n    >>> median_numbers(25,55,65)\n    55.0\n    \"\"\"\n    numbers=[x,y,z]\n    numbers.sort()\n    if len(numbers)%2==0:\n        return ((numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2)\n    else:\n        return numbers[len(numbers)//2]\n\n#Solution 2: \ndef median_numbers(x,y,z):\n    \"\"\"Returns the median of three specific numbers.\n    >>> median_numbers(25,55,65)\n    55.0\n    \"\"\"\n    numbers=[x,y,z]\n    numbers.sort()\n    if len(numbers)%2==0:\n        return ((numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2)\n    else:\n        return numbers[len(numbers)//2]\n    \n#Solution 3: \ndef median_numbers(x,y,z):\n    \"\"\"Returns the median of three specific numbers.\n    >>> median_numbers(25,55,65)\n    55.0\n    \"\"\"\n    numbers=[x,y,z]\n    numbers.sort()\n    if len(numbers)%2==0:\n        return ((numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2)\n    else:\n        return numbers[len(numbers)//2]", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a, b, c):\n    if a < b:\n        if b < c:\n            return b\n        elif b > c:\n            return c\n        else:\n            return b\n    elif a > b:\n        if a < c:\n            return a\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if c < b:\n            return b\n        elif c > b:\n            return c\n        else:\n            return c\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1, num2, num3):\n  if (num1 > num2 and num1 < num3) or (num1 < num2 and num1 > num3):\n    return num1\n  elif (num2 > num1 and num2 < num3) or (num2 < num1 and num2 > num3):\n    return num2\n  else:\n    return num3\n\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1,num2,num3):\n    l=[]\n    l.append(num1)\n    l.append(num2)\n    l.append(num3)\n    l.sort()\n    return l[1]\n\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    l=[a,b,c]\n    l.sort()\n    if(len(l)%2==0):\n        return ((l[len(l)//2-1]+l[len(l)//2])/2)\n    else:\n        return l[len(l)//2]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\nfrom typing import List\n\ndef median_numbers(n1:int, n2:int, n3:int) -> float:\n    \"\"\"\n    Write a function to find the median of three specific numbers.\n    \"\"\"\n    nums = [n1,n2,n3]\n    nums.sort()\n    if len(nums)%2==0:\n        return (nums[len(nums)//2-1]+nums[len(nums)//2])/2\n    else:\n        return nums[len(nums)//2]\n\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(num_list):\n    new_list = []\n    for num in num_list:\n        sum = 0\n        while num != 0:\n            sum += num%10\n            num //= 10\n        new_list.append(sum)\n    return new_list\n\n\nsum_of_digits([10,2,56])\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\nimport functools\n\ndef sum_of_digits(num):\n    return functools.reduce(lambda x, y: x + y, num)\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(l):\n    r = 0\n    for i in l:\n        r += sum(int(j) for j in str(i))\n    return r\n\n# Time: O(n)\n# Space:O(1)", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n# Solution 1\ndef sum_of_digits(numbers):\n    return sum([int(digit) for number in numbers for digit in str(number)])\n\n# Solution 2\ndef sum_of_digits(numbers):\n    return sum(map(sum, map(str, numbers)))", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(L):\n    return sum([sum(map(int,str(i))) for i in L])\n\n#Other solutions\ndef sum_of_digits(L):\n    return sum(int(i) for l in L for i in str(l))", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    sum_ = 0\n    for num in nums:\n        sum_ = sum_ + sum_digits(num)\n    return sum_\n\ndef sum_digits(num):\n    sum_ = 0\n    while num > 0:\n        sum_ = sum_ + num % 10\n        num = num // 10\n    return sum_\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n# Solution\ndef sum_of_digits(arr):\n    return sum([int(i) for i in str(arr)])\n\n# Tests", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\nfrom functools import reduce\n\ndef sum_of_digits(numbers):\n\treturn reduce(lambda a, b: a+b,map(lambda x: reduce(lambda y,z:y+z,map(int,str(x))),numbers))\n\n# test function", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n#First way, use map and lambda function\ndef sum_of_digits_one(l):\n  return sum(list(map(lambda x:sum([int(i) for i in str(x)]), l)))\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(list):\n    return sum(map(lambda x: sum(map(int,str(x))),list))\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tuple_1, tuple_2):\n    return tuple(a^b for a,b in zip(tuple_1,tuple_2))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n# My Solution\ndef bitwise_xor(t1, t2):\n    return tuple([c1 ^ c2 for c1, c2 in zip(t1, t2)])\n\n# Best Solution\ndef bitwise_xor(t1, t2):\n    return tuple(c1 ^ c2 for c1, c2 in zip(t1, t2))\n\n# Tests", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tuples):\n    # YOUR CODE HERE\n    a, b = tuples\n    return tuple(map(lambda x: x[0] ^ x[1], zip(a,b)))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\nfrom .utils import next_power_of_2\n\n\ndef bitwise_xor(a, b):\n    # Convert to binary strings and add zeros to match the longest tuple\n    a = bin(a[0])[2:].zfill(len(bin(a[1])[2:])) + bin(a[1])[2:].zfill(len(bin(a[0])[2:]))\n    b = bin(b[0])[2:].zfill(len(bin(b[1])[2:])) + bin(b[1])[2:].zfill(len(bin(b[0])[2:]))\n    xor = []\n    for i in range(len(a)):\n        xor.append(a[i] ^ b[i])\n\n    return (int(\"\".join(str(x) for x in xor[:next_power_of_2(len(a)) // 2]), 2),\n            int(\"\".join(str(x) for x in xor[next_power_of_2(len(a)) // 2:]), 2))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n# my solution\n\ndef bitwise_xor(tup1, tup2):\n    result = []\n    for x, y in zip(tup1, tup2):\n        result.append(x ^ y)\n    return tuple(result)\n\n# cleaner solution\n\ndef bitwise_xor(tup1, tup2):\n    return tuple(x ^ y for x, y in zip(tup1, tup2))\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(a, b):\n    result = []\n    for i in range(min(len(a), len(b))):\n        result.append(a[i] ^ b[i])\n    for i in range(max(len(a), len(b)) - len(result)):\n        if len(a) > len(b):\n            result.append(a[len(a) - len(b) + i])\n        else:\n            result.append(b[len(b) - len(a) + i])\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n# -\n\n# ## Question 6\n# **Note:** Do not include the function call in the solution.\n#\n# Consider a scenario where we want to ensure that a certain condition is met. It might be as simple as ensuring that the user inputs a valid username and password, or it might be as complicated as ensuring that the user has an active account and that they are logged in. For each scenario, a solution might look like this:\n#\n#\n#     if username == \"admin\" and password == \"<PASSWORD>\":\n#         # validate the username and password\n#     else:\n#         # prompt the user to reenter their username and password\n#\n# This is repetitive and could be improved with a function.\n#\n#     def validate(username, password):\n#         if username == \"admin\" and password == \"<PASSWORD>\":\n#             # validate the username and password\n#         else:\n#             # prompt the user to reenter their username and password\n#\n# We can now use the function `validate` instead of repeating the logic.\n#\n#     if username == \"admin\" and password == \"<PASSWORD>\":\n#         validate(username, password)\n#     else:\n#         # prompt the user to reenter their username and password\n#\n#\n#     def validate(username, password):\n#         if username == \"admin\" and password == \"<PASSWORD>\":\n#             # validate the username and password\n#         else:\n#             # prompt the user to reenter their username and password\n#\n# We can now use the function `validate` instead of repeating the logic.\n#\n#     if username == \"admin\" and password == \"<PASSWORD>\":\n#         validate(username, password)\n#     else:\n#         # prompt the user to reenter their username and password\n#\n#\n# In this example, we have a very simple function to validate that the username and password are correct. Later on, we will be validating even more complex scenarios.\n#", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tup1, tup2):\n    return tuple(e1 ^ e2 for e1, e2 in zip(tup1, tup2))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(a, b):\n  return tuple(x^y for x, y in zip(a, b))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(a, b):\n    return tuple(i^j for i,j in zip(a,b))"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(arr):\n    freq = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            freq += 1\n    return freq\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(arr):\n    return len(set(tuple(sorted(ele)) for ele in arr))\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    from collections import Counter\n    return len(set(Counter(tuple(x) for x in lst).keys()))\n\n# Tests", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef extract_freq(input_list: List[Tuple]) -> int:\n    count = 0\n    for i in input_list:\n        if i not in input_list[count:]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(tuples):\n    freq_dict = {}\n    for tup in tuples:\n        if freq_dict.get(tup) == None:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] = freq_dict[tup] + 1\n    return len(freq_dict)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(a):\n\tif len(a) == 1:\n\t\treturn 1\n\telif len(a) == 0:\n\t\treturn 0\n\telse:\n\t\ttemp = a.pop()\n\t\tif temp in a:\n\t\t\treturn extract_freq(a) + 1\n\t\telse:\n\t\t\treturn extract_freq(a)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(l):\n    \"\"\"\n    extract_freq is a function that takes a list of tuples and returns a number representing the number of tuples\n    in the list that have unique elements.\n    :param l: list of tuples\n    :return: number representing the number of unique tuples in the list.\n    \"\"\"\n    result = 0\n    for i in l:\n        if len(set(i)) == 2:\n            result += 1\n    return result\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(tuples):\n    tuples = set(tuples)\n    freq = 0\n    for tuple in tuples:\n        if tuples.count(tuple) > 1:\n            freq += 1\n    return freq\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    freq_dict = dict()\n    for i in lst:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    return len(freq_dict)", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    freq = 0\n    for i in lst:\n        freq += lst.count(i)\n    return freq\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tup1, tup2):\n    res = []\n    for i in range(len(tup1)):\n        res.append(tuple([tup1[i][j] + tup2[i][j] for j in range(len(tup1[0]))]))\n    return tuple(res)\n\n#print(add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n# my solution\n\n\ndef add_nested_tuples(tuple_1, tuple_2):\n    # Your code here\n    result = ()\n    for i in range(len(tuple_1)):\n        inner_tuple = tuple()\n        for j in range(len(tuple_1[i])):\n            inner_tuple += (tuple_1[i][j] + tuple_2[i][j],)\n        result += (inner_tuple,)\n    return result\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# Write your code here\ndef add_tuples(x, y):\n    return tuple(i + j for i, j in zip(x, y))\n\ndef add_nested_tuples(a, b):\n    return tuple(add_tuples(i, j) for i, j in zip(a, b))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    \"\"\"Adds the corresponding elements of two nested tuples.\n    \"\"\"\n    l1, l2 = [], []\n    if len(t1) > len(t2):\n        t1, t2 = t2, t1\n    for i in range(len(t1)):\n        l1.append(t1[i])\n        l2.append(t2[i])\n    for i in range(len(l1)):\n        l1[i] = l1[i] + l2[i]\n    return tuple(l1)\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(first_tuple, second_tuple):\n    result = []\n    for item in first_tuple:\n        result.append([a + b for a, b in zip(item, second_tuple)])\n    return tuple(result)\n\ndef test_add_nested_tuples():\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\ndef test_add_nested_tuples2():\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1))) == ((7, 10), (7, 14), (3, 10), (2, 11))\n\ndef test_add_nested_tuples3():\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3), (4, 9))) == ((7, 10), (7, 14), (3, 10), (8, 13), (4, 9))", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tup1, tup2):\n    # Your code here\n    a = []\n    for i, j in zip(tup1, tup2):\n        a.append(tuple(x+y for x, y in zip(i, j)))\n\n    return tuple(a)\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    return tuple([tuple([t1[i][j] + t2[i][j] for j in range(len(t1[i]))]) for i in range(len(t1))])\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tup1, tup2):\n    res = []\n    for i in range(len(tup1)):\n        res.append(tuple(a + b for a, b in zip(tup1[i], tup2[i])))\n    return tuple(res)\n\n\ndef test_function(test_case, expected_result):\n    actual_result = add_nested_tuples(test_case[0], test_case[1])\n    if actual_result == expected_result:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]],)\ntest_function([[3, 2, 2], [5, 4, 1], [1, 7, 3]], [[8, 1, 6], [7, 7, 6], [4, 5, 4]],)\ntest_function([[7, 5, 3, 1], [2, 4, 9, 3]], [[4, 6, 7, 1], [1, 8, 2, 8], [2, 6, 3, 3]],)\ntest_function([[8, 7, 6], [6, 8, 8], [1, 3, 5]], [[8, 8, 8], [1, 1, 2], [6, 6, 3]],)\ntest_function([[2, 6, 7], [3, 2, 4], [8, 8, 8]], [[5, 1, 2], [7,", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tup1, tup2):\n    new_tup = ()\n    for i in range(len(tup1)):\n        new_tup += (tup1[i] + tup2[i], )\n    return new_tup\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    q=math.factorial(n)//(math.factorial(r)*math.factorial(n-r))\n    return q%p", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    num = factorial(n)\n    den = factorial(r)*factorial(n-r)\n    return num//den % p\n\n# Test", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    ans=1\n    for i in range(r):\n        ans=(ans*n)%p\n        n=n-1\n    return ans\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\nfrom math import factorial\ndef ncr(n, r):\n    return factorial(n)/(factorial(r)*factorial(n-r))\n\ndef ncr_modp(n, r, p):\n    ans = ncr(n, r)\n    if ans>=p:\n        return ans%p\n    return ans\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    if r > n or n < 0 or r < 0 or p < 2:\n        return 0\n    return ncr_modp(n, r - 1, p) + ncr_modp(n - r, r, p) % p\n\n\n# Tests", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\nfrom math import factorial\n\n\ndef ncr_modp(n,r,p):\n    return ((factorial(n))//(factorial(r)))%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n\t\"\"\"\n\tTakes in integers n, r, p and returns n choose r mod p.\n\t\"\"\"\n\tif r == 0:\n\t\treturn 1\n\telif r > n:\n\t\treturn 0\n\telse:\n\t\treturn (ncr_modp(n,r-1,p) + ncr_modp(n-r,r,p))%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    #print(n,r)\n    if n<r:\n        return 0\n    if n==r or r==0:\n        return 1\n    dp=[[0]*(p+1) for i in range(n+1)]\n    for i in range(1,p+1):\n        dp[1][i]=i\n    for i in range(2,n+1):\n        dp[i][0]=1\n        for j in range(1,p+1):\n            if j>=i:\n                dp[i][j]=(dp[i-1][j]+dp[i-1][j-i])%p\n            else:\n                dp[i][j]=dp[i-1][j]\n    return dp[n][r]\ndef ncr(n,r):\n    return ncr_modp(n,r,10**9+7)\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nimport numpy as np\nfrom functools import lru_cache\ndef ncr_modp(n, r, p):\n    def get(n):\n        if n == 1:\n            return 1\n        else:\n            return (n * get(n-1)) % p\n    def ncr(n, r):\n        if r == 0:\n            return 1\n        else:\n            return ((get(n) * mod_inverse(get(r),p)) % p)\n    def mod_inverse(a, m):\n        if gcd(a, m) != 1:\n            return None  # no mod inverse if a & m are not co-prime\n        u1, u2, u3 = 1, 0, a\n        v1, v2, v3 = 0, 1, m\n        while v3 > 0:\n            q = u3 // v3\n            v1, v2, v3, u1, u2, u3 = (\n                (u1 - q * v1) % p,\n                (u2 - q * v2) % p,\n                (u3 - q * v3) % p,\n                v1,\n                v2,\n                v3,\n            )\n        return u1 % p\n    return ncr(n,r)\n\n@lru_cache(maxsize=None)\ndef ncr_modp_cache(n, r, p):\n    def get(n):\n        if n == 1:\n            return 1\n        else:\n            return (n * get(n-1)) % p\n    def ncr(n, r):\n        if r == 0:\n            return 1\n        else:\n            return ((get(n) * mod_inverse(get(r),p)) % p)\n    def mod_inverse(a, m):\n        if gcd(a, m) != 1:\n            return None  # no mod inverse if a & m are not co-prime\n        u1, u2, u3 = 1, 0, a\n        v1, v2, v3 = 0, 1, m\n        while v3 > 0:\n            q = u3 // v3\n            v1"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    regex = r'((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)'\n    match = re.search(regex, url)\n    return match\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    if(re.search(regex,url)):\n        return True\n    else:\n        return False\n\n#assert is_valid_URL(\"https://www.google.com\") == True\n#assert is_valid_URL(\"http://www.google.com\") == True\n#assert is_valid_URL(\"https://www.google.com\") == True\n#assert is_valid_URL(\"https://www.google.com/\") == True\n#assert is_valid_URL(\"https://www.google.com/abc\") == True\n#assert is_valid_URL(\"https://www.google.com/abc/test\") == True\n#assert is_valid_URL(\"https://www.google.com/abc/test?abc=123\") == True\n#assert is_valid_URL(\"https://www.google.com/abc/test?abc=123#abc\") == True\n#assert is_valid_URL(\"www.google.com\") == False\n#assert is_valid_URL(\"www.google.com/\") == False\n#assert is_valid_URL(\"www.google.com/abc\") == False\n#assert is_valid_URL(\"www.google.com/abc/test\") == False\n#assert is_valid_URL(\"www.google.com/abc/", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return url is not None and regex.search(url) != None\n\n# assert is_valid_URL(\"https://www.google.com\") == True\n# assert is_valid_URL(\"https://\") == False\n# assert is_valid_URL(\"www.google.com\") == False\n# assert is_valid_URL(\"google.com\") == False\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    return re.search(\"https?://(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\", url)\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url: str) -> bool:\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' # domain...\n        r'localhost|' # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, url) is not None\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\n\ndef is_valid_url(url: str) -> bool:\n    regex = (\n        r\"((http|https)://)(www.)?\"\n        r\"[a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]\"\n        r\"/{1,3}([a-zA-Z0-9@:%_\\+.~#?&//=]*)\"\n    )\n    return re.search(regex, url)\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_url(url):\n    \"\"\"\n    Returns True if the passed url is valid and false otherwise.\n    \"\"\"\n    #TODO implement\n    return True\n\n\ndef test_function(test_case):\n    url = test_case[0]\n    solution = test_case[1]\n    output = is_valid_url(url)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n# Test case 1\ntest_case_1 = (\"https://www.hackerrank.com/challenges/30-regex-patterns/problem\", True)\ntest_function(test_case_1)\n\n# Test case 2\ntest_case_2 = (\"www.hackerrank.com/challenges/30-regex-patterns/problem\", False)\ntest_function(test_case_2)\n\n# Test case 3\ntest_case_3 = (\"https://www.hackerrank.com/challenges/30-regex-patterns/proble\", False)\ntest_function(test_case_3)\n\n# Test case 4\ntest_case_4 = (\"https://www.hackerrank.com/challenges/30-regex-patterns/proble-\", False)\ntest_function(test_case_4)\n\n# Test case 5\ntest_case_5 = (\"https://www.hackerrank.com/challenges/30-regex-patterns/proble9\", False)\ntest_function(test_case_5)\n\n# Test case 6\ntest_case_6 = (\"https://www.hackerrank.com/challenges/30-regex-patterns/proble9876543210\", False)\ntest_function(test_case_6)\n\n# Test case 7\ntest_case_7 = (\"https://www.hackerrank.com/challenges/30-regex-patterns/problem?page=1\", True)\ntest_function(test_case_7)\n\n# Test case 8\ntest_case_8 = (\"https://", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url: str) -> bool:\n    return re.search(r'^(http://|https://)?(\\w+\\.)*(com|in|net|org|gov)(\\w+/)*', url) is not None\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url: str) -> bool:\n    \"\"\"\n    Returns true if given url is a valid url, false otherwise\n    \"\"\"\n    # Write your code here\n    # We need to check if it starts with http or https\n    # Then we need to have atleast 1 dot in it\n    # After the first dot we need to have atleast 2 alphabets\n    # After the 2nd dot we need to have atleast 1 alphabet\n    # After the 3rd dot we can have anything, it can be a number, a dot or a hypen\n    # If we have more than 3 dots in the url, it is not valid\n    # We need to have atleast one character between the 3 dots\n\n    if re.match(r\"^(http|https)://[a-zA-Z0-9.-]+$\", url):\n        # check the first character is either http or https\n        if url.count('.') > 1:\n            if url[url.find('.')+1:].count('.') > 0:\n                # check there are atleast two characters after the first dot\n                if url[url.find('.')+2:].count('.') > 2:\n                    # check there are atleast 3 characters after the second dot\n                    return True\n    return False"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n# A naive method would be to compare two numbers and find the smallest one\ndef minimum(x, y):\n    if x > y:\n        return y\n    else:\n        return x\n\n# Write your code below this line \ud83d\udc47\ndef minimum(x, y):\n    if x < y:\n        return x\n    elif x == y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    if a<b:\n        return a\n    return b\n\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    return a if a < b else b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\nimport unittest\n\ndef minimum(n, m):\n    return n if n < m else m\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\nfrom nose.tools import *\nfrom min import *\n\ndef test_min():\n    assert_equal(min(1,2), 1)\n    assert_equal(min(2,1), 1)\n    assert_equal(min(1,1), 1)\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    return a if a<b else b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n# minimum(1,2) == 1\n# minimum(2,1) == 1\n# minimum(2,2) == 2\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef minimum(a, b):\n    minHeap = []\n    heappush(minHeap, a)\n    heappush(minHeap, b)\n    return heappop(minHeap)\n\n\ndef test_function(test_case):\n    a = test_case[0]\n    b = test_case[1]\n    solution = test_case[2]\n    output = minimum(a, b)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[5, 6], [4, 7], 4])\ntest_function([[5, 6], [4, 7], 5])\ntest_function([[4, 6], [4, 7], 4])\ntest_function([[4, 6], [4, 7], 6])\ntest_function([[1, 4], [4, 7], 1])\ntest_function([[1, 4], [4, 7], 4])\ntest_function([[1, 4], [4, 7], 7])\ntest_function([[1, 3], [2, 7], 1])\ntest_function([[1, 3], [2, 7], 2])\ntest_function([[1, 3], [2, 7], 3])\ntest_function([[1, 3], [2, 7], 7])", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n# 3.", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(t, element):\n\t\"\"\"checks to see if element is in tuple t\"\"\"\n\tfor e in t:\n\t\tif e==element:\n\t\t\treturn True\n\treturn False\n\t", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n    ", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex,element):\n    for i in tuplex:\n        if i==element:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuplex, value):\n    return value in tuplex\n\n# Write a function that returns the index of the last element within a tuple.", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n#your code goes here\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, elem):\n    return elem in tup\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, value):\n    if value in tuplex:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, x):\n    if len(tup) == 1:\n        return tup[0] == x\n    else:\n        return check_tuplex(tup[1:],x)\n\ndef check_tuplex(tup, x):\n    if tup[0] == x:\n        return True\n    else:\n        return check_tuplex(tup[1:],x)\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\nfrom typing import *\n\ndef check_tuplex(tuplex: Tuple, element: Any):\n    return element in tuplex", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup,element):\n    if element in tup:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2==0:\n        return \"Even Parity\"\n    return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\n# Parity of a number is odd if the sum of its digits is odd. \n# For example, if a number is 12321, it has 1, 2, 3, and 1 as digits. \n# The sum of these digits is 1+2+3+1=7 which is odd.\n# \n# Parity of a number is even if the sum of its digits is even.\n# For example, if a number is 420, it has 4, 2, and 0 as digits. \n# The sum of these digits is 4+2+0=6 which is even.\n# \n# Input: A positive integer\n# Output: Even/Odd parity\n\ndef find_Parity(n):\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    if total % 2 == 0:\n        return 'Even Parity'\n    else:\n        return 'Odd Parity'\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\nimport math\ndef find_Parity(number):\n    parity = number & 1\n    if parity == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n#find_Parity(12)\n#print(find_Parity(12))\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\nimport unittest\n\ndef find_Parity(number):\n    return \"Odd Parity\" if number % 2 == 1 else \"Even Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n  if num % 2 == 0:\n    return \"Even Parity\"\n  else:\n    return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n# TODO - Write a function that returns the parity of a number\n\n\n# TODO - Call the function with the value 12\n# TODO - Call the function with the value 2\n# TODO - Call the function with the value 3\n# TODO - Call the function with the value 4\n# TODO - Call the function with the value 5\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(x):\n    digits = [int(i) for i in str(x)]\n    for i in range(len(digits)):\n        j = i\n        while j+1<len(digits) and digits[j]>=digits[j+1]:\n            j += 1\n        if j+1<len(digits):\n            digits[i], digits[j] = digits[j], digits[i]\n            digits[i+1:] = sorted(digits[i+1:])\n            break\n    else:\n        digits = digits[::-1]\n    return int(\"\".join(map(str, digits)))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    n = list(str(n))\n    max_index = len(n) - 1\n    bigger = max(n)\n    while max_index >= 0 and bigger == n[max_index]:\n        max_index -= 1\n    if max_index < 0:\n        return -1\n    bigger_index = n.index(bigger)\n    n[bigger_index], n[max_index] = n[max_index], n[bigger_index]\n    n = n[0:max_index] + sorted(n[max_index:])\n    return int(''.join(n))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\nfrom typing import List\n\n\ndef rearrange_bigger(n: int) -> int:\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n    \"\"\"\n    n_str = str(n)\n    arr: List[int] = [int(x) for x in n_str]\n\n    # At this point, the only way to rearrange is to move\n    # the digits from the right to the left\n    # If the digits can be swapped, we can do so\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i - 1] > arr[i]:\n            arr[i - 1], arr[i] = arr[i], arr[i - 1]\n            arr_str = ''.join([str(x) for x in arr])\n            return int(arr_str)\n\n    # If we can't swap, then we have to move to the left\n    # and create a new number\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i - 1] < arr[i]:\n            arr[i - 1], arr[i] = arr[i], arr[i - 1]\n\n            for j in range(i + 1, len(arr)):\n                if arr[j] > arr[i - 1]:\n                    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n                    arr[j + 1], arr[i] = arr[i], arr[j + 1]\n                    break\n\n            arr_str = ''.join([str(x) for x in arr])\n            return int(arr_str)\n\n    # If the number is already in the correct form\n    # we just return it\n    return n\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(x):\n  x = str(x)\n  if len(x) <= 1:\n    return int(x)\n  if len(x) == 2:\n    a, b = x\n  elif len(x) == 3:\n    a, b, c = x\n  else:\n    a, b, c, d = x\n    if d == max(x):\n      d = min(x)\n    else:\n      d = max(x)\n  if a != max(x):\n    a = min(x)\n  else:\n    a = max(x)\n  if b != max(x):\n    b = min(x)\n  else:\n    b = max(x)\n  if c != max(x):\n    c = min(x)\n  else:\n    c = max(x)\n  x = a + b + c + d\n  return int(x)\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(number):\n    # Write your code here.\n    if len(str(number)) == 1:\n        return number\n    else:\n        rev_num = number[::-1]\n        split_num = []\n        for i in range(len(rev_num)):\n            split_num.append(int(rev_num[i]))\n\n        num_len = len(split_num)\n        max_index = 0\n        for i in range(num_len):\n            if split_num[i] > split_num[max_index]:\n                max_index = i\n\n        split_num[i], split_num[max_index] = split_num[max_index], split_num[i]\n        return int(''.join(map(str, split_num)))", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    a=str(n)\n    a=sorted(a)\n    for i in range(len(a)):\n        if a[i]!=str(n):\n            a[i],a[len(a)-1]=a[len(a)-1],a[i]\n            break\n    return int(\"\".join(a))", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\nimport unittest\n\ndef rearrange_bigger(number):\n    s = str(number)\n    if len(s) < 2:\n        return s\n    # assume already sorted\n    last_num = int(s[-1])\n    prev_num = int(s[-2])\n    if prev_num > last_num:\n        prev_num, last_num = last_num, prev_num\n    # swap\n    return int(s[:-2] + str(last_num) + str(prev_num))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef rearrange_bigger(n):\n    print(\"Comparing %s\" % n)\n    if n >= 10:\n        big = max(rearrange_bigger(x) for x in (n//10, n%10))\n        return big if big >= n else n\n    else:\n        return n\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"o36s_G6HRRCQ\" outputId=\"06898469-2663-4201-b1a1-32361565279d\"\ndef k_smallest_pairs(arr1, arr2, k):\n    \"\"\"\n    Return the k smallest pairs of elements in arr1 and arr2\n    \n    :param arr1: list\n    :param arr2: list\n    :param k: int\n    :return: list of lists\n    \"\"\"\n\n    # we need the smallest element to have the desired k pairs\n    # 1. sort both the arrays\n    arr1.sort()\n    arr2.sort()\n\n    # 2. use the first k elements of arr1 and arr2 as our pairs\n    pairs = []\n    for i in range(k):\n        pairs.append([arr1[i], arr2[i]])\n\n    # 3. return our pairs\n    return pairs\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    pairs = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] + arr2[j] <= 0:\n            i += 1\n        elif arr1[i] + arr2[j] >= 0:\n            j += 1\n        else:\n            pairs.append([arr1[i], arr2[j]])\n            if len(pairs) == k:\n                return pairs\n            i += 1\n            j += 1\n    return pairs\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\nfrom typing import List\n\n\ndef k_smallest_pairs(\n    a: List[int], b: List[int], k: int,\n) -> List[List[int]]:\n    a.sort()\n    b.sort()\n    result = []\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        if a[i] + b[j] <= k:\n            result.append([a[i], b[j]])\n            i += 1\n            j += 1\n        elif a[i] + b[j] > k:\n            j += 1\n        else:\n            i += 1\n    return result\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(nums1, nums2, k):\n    return sorted(sorted(zip(nums1, nums2), key=lambda x: x[0])[:k])", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(nums1, nums2, k):\n    ans = []\n    if k > 0 and len(nums1) > 0 and len(nums2) > 0:\n        nums1, nums2 = sorted(nums1), sorted(nums2)\n        i, j = 0, 0\n        while len(ans) < k:\n            ans.append((nums1[i], nums2[j]))\n            i += 1\n            j += 1\n            if j == len(nums2):\n                j = 0\n                i += 1\n    return ans\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef k_smallest_pairs(arr1: List[int], arr2: List[int], k: int) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            result.append((arr1[i], arr2[j]))\n            if len(result) >= k:\n                return result\n    return result\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    #O(nlogn+mlogm+klogk) time | O(1) space\n    arr1 = [(-1)*x for x in arr1]\n    arr2 = [(-1)*x for x in arr2]\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    output = []\n    i,j = 0,0\n    while i<len(arr1) and j<len(arr2):\n        diff = arr1[i]+arr2[j]\n        if diff<0:\n            output.append([arr1[i],arr2[j]])\n            i += 1\n        else:\n            j += 1\n    return output[:k]\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr_1, arr_2, k):\n    # define a min heap to get the first k numbers\n    min_heap = []\n    # start from the smallest number of array_1 and array_2\n    for number in arr_1[0:min(len(arr_1), len(arr_2))]:\n        min_heap.append((number, arr_2[0]))\n    # sort the heap in ascending order of the first element\n    heapq.heapify(min_heap)\n    # go through the heap until there are k elements\n    for i in range(k, min(len(arr_1), len(arr_2))+1):\n        # get the smallest value of the heap and append to the results\n        if not min_heap or min_heap[0][0] > arr_1[i] or min_heap[0][1] > arr_2[i]:\n            break\n        min_heap.append((arr_1[i], arr_2[i]))\n        heapq.heappush(min_heap, (arr_1[i], arr_2[i]))\n    return min_heap\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(array1, array2, k):\n    # Write your code here.\n    result = []\n    if len(array1) == 0 or len(array2) == 0:\n        return result\n    heap = []\n    heapq.heapify(heap)\n    for e1 in array1:\n        for e2 in array2:\n            if len(result) == k:\n                break\n            heapq.heappush(heap, [abs(e1 - e2), e1, e2])\n    while len(heap) > 0:\n        e = heapq.heappop(heap)\n        result.append([e[1], e[2]])\n    return result\n\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom typing import List, Tuple\nimport random\nimport time\n\ndef min_product_tuple(tuples: List[Tuple[int, int]]) -> int:\n    return min(x*y for (x,y) in tuples)\n\n\ndef test_min_product_tuple():\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\n\ndef timeit(func):\n    def wrapper(*args, **kwargs):\n        start = time.perf_counter()\n        result = func(*args, **kwargs)\n        end = time.perf_counter()\n        print(f\"Finished in {end - start:0.4f} seconds\")\n        return result\n    return wrapper\n\n\n@timeit\ndef run_test_case(test_case_count", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom typing import List\n\n\ndef min_product_tuple(tuples_list: List[tuple]) -> int:\n    tuples_list = sorted(tuples_list, key=lambda x: x[0])\n    min_tuple = tuples_list[0]\n    current_product = min_tuple[1]\n\n    for i, j in tuples_list:\n        if i == min_tuple[0]:\n            if j < min_tuple[1]:\n                min_tuple = (i, j)\n                current_product = min_tuple[1]\n        else:\n            current_product = j * current_product\n            min_tuple = (i, current_product)\n\n    return current_product\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(list_of_tuples):\n    return min([t[0]*t[1] for t in list_of_tuples])\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    if not tuples:\n        return None\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    min_val = sorted_tuples[0][1]\n    return min_val * sorted_tuples[1][1]\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(lst):\n    smallest = min(lst, key=lambda x: x[0] * x[1])\n    return smallest[0] * smallest[1]\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n# Solution\ndef min_product_tuple(tuples):\n    return min([x*y for x,y in tuples])\n\n\n# Tests", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    if len(tuples) == 0:\n        return 0\n    else:\n        min_product = min(tuples[0][0]*tuples[0][1],tuples[0][1]*tuples[1][0],tuples[1][0]*tuples[1][1])\n        return min_product\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(list_tuple):\n    return min([x*y for x,y in list_tuple])\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom itertools import chain\n\n\ndef min_product_tuple(tuples):\n    return min(chain.from_iterable(zip(itertools.repeat(x), y)) for x, y in tuples)\n\n\n# 100% better\n\n\ndef min_product_tuple(tuples):\n    return min(chain.from_iterable(zip(itertools.repeat(x), y)) for x, y in tuples)\n\n\ndef min_product_tuple(tuples):\n    return min(itertools.starmap(min, tuples))\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(l):\n  # Your code here\n  if not l:\n    return float('inf')\n  if type(l[0])==int:\n    m = l[0]\n    for i in l:\n      if type(i)==int:\n        if i < m:\n          m = i\n  if type(l[0])==str:\n    m = l[0]\n    for i in l:\n      if type(i)==str:\n        if i < m:\n          m = i\n  return m\n\n# Test", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n# Solution 1\ndef min_val(lst):\n    return min(lst)\n# Tests", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(val_list):\n    \"\"\" Return the smallest value in the val_list \"\"\"\n    new_list = []\n    for x in val_list:\n        if isinstance(x, int):\n            new_list.append(x)\n        elif isinstance(x, str):\n            new_list.append(x)\n        else:\n            new_list.append(x)\n    min_list = min(new_list)\n    return min_list\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(ls):\n    # this is in O(n)\n    min_val = ls[0]\n    for x in ls:\n        if type(x)==int:\n            if x<min_val:\n                min_val = x\n        elif type(x)==str:\n            if x.lower()<'a':\n                min_val = x\n    return min_val\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(l):\n    return min(filter(lambda x: type(x) is not str, l))\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    \"\"\"\n    Return the minimum value in a list.\n    :param lst: The input list.\n    :return: The minimum value in the list.\n    \"\"\"\n    if not lst:\n        return None\n\n    min_val = lst[0]\n    for element in lst:\n        if type(element) == int and type(min_val) == int:\n            if element < min_val:\n                min_val = element\n        else:\n            if element < min_val:\n                min_val = element\n    return min_val\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    return min(filter(lambda x: type(x) == int, lst))\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\nfrom .utils import *\n\n\ndef min_val(values):\n    \"\"\"\n    :param values: A heterogeneous list.\n    :return: The minimum value in the list.\n    \"\"\"\n    return min(values)\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n# Solution\ndef min_val(list_val):\n    min_val = list_val[0]\n    for i in list_val:\n        if type(i) == int and i < min_val:\n            min_val = i\n        elif type(i) == str and len(i) < min_val:\n            min_val = len(i)\n    return min_val\n\n# Tests", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(s):\n    return re.sub(r'(?<!^)_([a-z])', lambda m: m.group(1).upper(), s)\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(string):\n    return string.title().replace('_','')\n    \n# test case", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(string: str) -> str:\n    return re.sub('(_[a-z])', lambda x: x.group(1)[1].upper(), string)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    words[0] = words[0].capitalize()\n    return ''.join(words)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(string):\n    return re.sub(r'_[a-z]', lambda x: x[1].upper(), string)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(s):\n    return re.sub(r'[_\\-](\\w)', lambda m: m.group(1).upper(), s)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(s):\n    return re.sub(r'_(\\w)', lambda m: m.group(1).title(), s)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(snake_string):\n    new_string = snake_string[0].upper() + snake_string[1:].lower()\n    return re.sub('(?<=.)_+(?=[a-z])', '', new_string)", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(snake):\n    camel = re.sub(r'(_\\w)', lambda x: x.group(1)[1].upper(), snake)\n    return camel[0].upper() + camel[1:]\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(str):\n    s = re.sub('(_\\w)', lambda x: x.group(1)[1].upper(), str)\n    return s[0].capitalize() + s[1:]\n\n\ndef main():\n    assert(snake_to_camel('android_tv') == 'AndroidTv')\n    print(\"All test cases passed!\")\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a list.\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(input_list):\n    result_list = []\n    for x in input_list:\n        if x % 2 == 0:\n            result_list.append(x)\n    return result_list\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n# SOLUTION\ndef remove_odd(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\n\n# TEST CASES", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    result = []\n    for x in lst:\n        if x % 2 == 0:\n            result.append(x)\n    return result\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n#%%\n# solution\ndef remove_odd(num_list):\n    return [i for i in num_list if i % 2 == 0]\n\nremove_odd([1,2,3]) == [2]\n\n# %%\n# Solution\ndef remove_odd(num_list):\n    return list(filter(lambda i: i % 2 == 0, num_list))\n\nremove_odd([1,2,3]) == [2]\n\n# %%\n# other solution\ndef remove_odd(num_list):\n    return [x for x in num_list if x%2==0]\n\nremove_odd([1,2,3]) == [2]\n\n# %%\n# Solution\ndef remove_odd(num_list):\n    return [i for i in num_list if i % 2 == 0]\n\nremove_odd([1,2,3]) == [2]\n\n# %%\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    new_list = []\n    for number in lst:\n        if number % 2 == 0:\n            new_list.append(number)\n    return new_list\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    res = []\n    for i in lst:\n        if i % 2 == 0:\n            res.append(i)\n    return res\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\nfrom typing import List\n\n\ndef remove_odd(nums: List[int]) -> List[int]:\n    new_list = []\n    for num in nums:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(l):\n    return [x for x in l if x%2==0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst,n):\n    return [tup[n] for tup in lst]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(tuples, n):\n    return [x[n] for x in tuples]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(list_of_tuples,n):\n    \"\"\"\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    True\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[98, 97, 91, 94]\n    True\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    True\n    \"\"\"\n    return [i[n] for i in list_of_tuples]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(tuples, n):\n    return [tuple[n] for tuple in tuples]", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n# My Solution\ndef extract_nth_element(tup, n):\n    return [element[n] for element in tup]\n\n\n# Best Practice Solution\ndef extract_nth_element(tup, n):\n    return list(zip(*tup))[n]\n\n\n# Test", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [element[n] for element in lst]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n# test cases", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\nfrom typing import Any, List, Tuple\n\ndef extract_nth_element(lst, n):\n    return [i[n] for i in lst]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst,n):\n    return [element[n] for element in lst]\n\ndef test_extract_nth_element():\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[98, 97, 91, 94]\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,3)==None\n    assert extract_nth_element([('Greyson Fulton', 98, ", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(n):\n    newlist = []\n    for i in range(len(n)):\n        newlist.append(n[i][n[i].index(max(n[i]))])\n    return newlist\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(a,b):\n    if a in b or b in a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(a,b):\n    return any(x in a for x in b)\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(a,b):\n    if len(set(a) & set(b)) > 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(s1,s2):\n    for i in range(len(s1)):\n        if s1[i] in s2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\nfrom nose.tools import assert_equal\n\n\ndef overlapping(seq1, seq2):\n    \"\"\"\n    Checks for overlap in two sequences.\n    \"\"\"\n    if set(seq1) & set(seq2):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(list1, list2):\n\tfor i in list1:\n\t\tfor j in list2:\n\t\t\tif(i==j):\n\t\t\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n# + id=\"nfZjwyQ_tY-k\"\ndef overlapping(seq1, seq2):\n  \"\"\"\n  This function checks whether the value exists in a sequence or not.\n  \"\"\"\n  for i in seq1:\n    if i in seq2:\n      return True\n  return False\n\n\n# + id=\"9n8Y2Xqfvayh\" colab={\"base_uri\": \"https://localhost:8080/\"} outputId=\"9987622b-f4c0-411f-a3c0-c558071147bd\"", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(l1,l2):\n    for i in l1:\n        if i in l2:\n            return True\n    return False"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(list_of_integers):\n  highest_product = -1\n  highest_product_pair = ()\n  for i in range(len(list_of_integers)):\n    for j in range(i+1, len(list_of_integers)):\n      if list_of_integers[i] * list_of_integers[j] > highest_product:\n        highest_product = list_of_integers[i] * list_of_integers[j]\n        highest_product_pair = (list_of_integers[i], list_of_integers[j])\n  return highest_product_pair\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_num = max(arr)\n    max_index = arr.index(max_num)\n\n    min_num = min(arr)\n    min_index = arr.index(min_num)\n\n    if min_num * max_num > max_num * min_num:\n        return (max_num, min_num)\n    else:\n        return (min_num, max_num)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(list_num):\n    product = 0\n    max_product_pair = ()\n    for i in range(len(list_num)):\n        for j in range(len(list_num)):\n            if i!=j and list_num[i]*list_num[j]>product:\n                product = list_num[i]*list_num[j]\n                max_product_pair = (list_num[i],list_num[j])\n    return max_product_pair\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return arr[0], arr[0]\n    elif len(arr) == 2:\n        return arr[0], arr[1]\n\n    max_a, max_b = arr[0], arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max_a:\n            max_b = max_a\n            max_a = arr[i]\n        elif arr[i] > max_b:\n            max_b = arr[i]\n    return max_a, max_b\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\nfrom typing import List\n\n\ndef max_Product(arr: List[int]) -> int:\n    product = [1, 1]\n    for a in arr:\n        # product[0] represents product of elements to the left of index i\n        # product[1] represents product of elements to the right of index i\n        product = [a * product[1], a * product[0]]\n        # find the max of two products\n        max_prod = max(product)\n    return max_prod\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    arr.sort()\n    first = arr[-1] * arr[-2]\n    second = arr[-2] * arr[-3]\n    if first > second:\n        return (arr[-1], arr[-2])\n    else:\n        return (arr[-2], arr[-3])\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num % 3 == 0:\n        return 3 * max(num // 3, 1)\n    if num % 3 == 1:\n        return max(1, num // 3 + 1) + max(1, (num - 1) // 3)\n    return max(1, (num - 2) // 3) + max(1, (num - 1) // 3) + max(1, num // 3)", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    if (n <= 10):\n        return n\n    else:\n        return max(n - 10, breakSum(n - 3) + breakSum(n - 2) + breakSum(n - 1))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(number):\n    if number < 10:\n        return number\n\n    # Split the number in three parts\n    first_part = number // 10\n    second_part = number % 10\n    third_part = (number // 10) % 10\n\n    # Break them in three parts recursively\n    # and sum them up together\n    return breakSum(first_part) + breakSum(second_part) + breakSum(third_part)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    if n < 3:\n        return n\n    else:\n        return max(n, n % 10 + breakSum(n // 10))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n < 3:\n        return n\n    elif n % 3 == 0:\n        return max(n, breakSum(n//3) + breakSum(n//3) + breakSum(n//3))\n    elif n % 3 == 1:\n        return max(n, breakSum(n//3) + breakSum(n//3 + 1) + breakSum(n//3 + 1))\n    else:\n        return max(n, breakSum(n//3) + breakSum(n//3 + 1) + breakSum(n//3 + 2))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    if n <= 3:\n        return n\n    \n    return max(n, n%3 + breakSum(n//3), n%5 + breakSum(n//5))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n\tif n <= 3:\n\t\treturn n\n\tif n % 3 == 0:\n\t\treturn breakSum(n // 3) + breakSum(n // 3) + breakSum(n // 3)\n\telif n % 3 == 1:\n\t\treturn max(breakSum(n // 3) + breakSum(n // 3) + breakSum(n // 3 + 1), breakSum(n // 3) + breakSum(n // 3 + 1) + breakSum(n // 3 + 1))\n\telse:\n\t\treturn max(breakSum(n // 3) + breakSum(n // 3) + breakSum(n // 3 + 1), breakSum(n // 3 + 1) + breakSum(n // 3 + 1) + breakSum(n // 3 + 1))", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    # Write your code here\n    if n==0:\n        return 0\n    if n<4:\n        return n\n    if n==4:\n        return 4\n    if n%4==0:\n        return n-1\n    \n    print(n)\n    res=n\n    if n%4==1:\n        res=max(res,4+breakSum(n//4))\n    \n    if n%4==2:\n        res=max(res,3+breakSum(n//4))\n    \n    if n%4==3:\n        res=max(res,2+breakSum(n//4))\n    \n    return res\n    ", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n, memo = None):\n  if memo is None:\n    memo = {}\n\n  if n in memo:\n    return memo[n]\n\n  if n < 3:\n    return n\n\n  max_sum = n\n\n  if n % 2 == 0:\n    max_sum = max(max_sum, n - breakSum(n // 2))\n\n  if n % 3 == 0:\n    max_sum = max(max_sum, n - breakSum(n // 3))\n\n  memo[n] = max_sum\n\n  return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num<2:\n        return num\n    max_sum = 0\n    for i in range(1,num//2+1):\n        for j in range(i,num//3+1):\n            max_sum = max(max_sum,i+j+num-i-j)\n    return max_sum\n\n# Test cases\n# print(breakSum(12))\n# print(breakSum(15))\n# print(breakSum(17))\n# print(breakSum(27))\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import groupby\n\ndef group_tuples(tuples):\n    \"\"\"\n    Assuming there are only 2 elements in each tuple, group by first element.\n    Sort by second element.\n    Return the result as a list of tuples.\n    \"\"\"\n    groups = defaultdict(list)\n    for item in tuples:\n        groups[item[0]].append(item)\n\n    return [tuple(sorted(g, key=lambda x: x[1])) for g in groups.values()]\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(data):\n    result = []\n    for tup in data:\n        tup_of_tuples = [tup]\n        for tup_tuple in result:\n            if tup_of_tuples[0][0] == tup_tuple[0]:\n                tup_of_tuples.append(tup_tuple[1])\n        result.append(tuple(tup_of_tuples))\n    return result\n\n\n# -\n\ngroup_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n\n# ### **Bonus exercise**\n#\n# Try to write a function which will produce the same result as group_tuples\n\n# +", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(list_of_tuples):\n\t\"\"\"\n\t:param list_of_tuples: list of tuples\n\t:return:\n\t\"\"\"\n\tnew_list = []\n\tfor tuple1 in list_of_tuples:\n\t\tfor tuple2 in list_of_tuples:\n\t\t\tif tuple1[0] == tuple2[0]:\n\t\t\t\tnew_list.append(tuple1 + tuple2[1:])\n\treturn new_list\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\nfrom collections import defaultdict\n\ndef group_tuples(tuples):\n  d = defaultdict(list)\n  for tuple in tuples:\n    d[tuple[0]].append(tuple)\n  return [tuple[1:] for tuple in d.values()]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef group_tuples(data: List[Tuple]) -> List[Tuple]:\n    if not data:\n        return []\n\n    return [item[0] for item in zip(*data)]\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(a_list):\n  return_list = []\n  for i in range(len(a_list)):\n    if i == 0:\n      return_list.append([a_list[i][0]])\n    else:\n      for j in range(len(return_list)):\n        if return_list[j][0] == a_list[i][0]:\n          return_list[j].append(a_list[i][1])\n  return return_list\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\nfrom typing import List, Tuple\nimport pytest\nfrom unittest import TestCase\n\nfrom group_tuples import group_tuples\n\n\n@pytest.mark.parametrize(\"lst, expected\", [\n    [\n        [('x', 'y'), ('x', 'z'), ('w', 't')],\n        [('x', 'y', 'z'), ('w', 't')]\n    ],\n    [\n        [('x', 'y'), ('x', 'z'), ('w', 't'), ('x', 'y')],\n        [('x', 'y', 'z'), ('w', 't'), ('x', 'y')]\n    ],\n    [\n        [('x', 'y'), ('x', 'z'), ('w', 't'), ('x', 'z'), ('w', 't')],\n        [('x', 'y', 'z'), ('w', 't')]\n    ],\n])\ndef test_group_tuples(lst: List[Tuple[str, str]], expected: List[Tuple[str, str, str]]):\n    assert group_tuples(lst) == expected\n\n\ndef test_group_tuples_unique():\n    \"\"\"Check that the list of tuples has unique first element.\n    If not, function raises ValueError.\n    \"\"\"\n    with pytest.raises(ValueError):\n        group_tuples([('x', 'y'), ('x', 'z'), ('x', 't')])\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Tuple, List, Dict\n\ndef group_tuples(tuples: List[Tuple]) -> List[Tuple]:\n    def make_dict(tuple_list: List[Tuple]) -> Dict[Tuple, int]:\n        return {t: i for i, t in enumerate(tuple_list)}\n\n    # create dictionary of tuples\n    tuple_dict = make_dict(tuples)\n\n    # create a dict of common tuples\n    common_dict = defaultdict(list)\n    for tuple_ in tuples:\n        if len(tuple_dict[tuple_]) == 1:\n            common_dict[tuple_dict[tuple_]].append(tuple_)\n\n    # return a list of common tuples\n    return common_dict.values()", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    tuples.sort()\n    out = []\n    start_string = tuples[0][0]\n    # print(start_string)\n    tmp_list = []\n    for tup in tuples:\n        # print(tmp_list)\n        if tup[0] == start_string:\n            # print(tup[0])\n            tmp_list.append(tup[1])\n        else:\n            out.append(tuple([start_string] + tmp_list))\n            # print(out)\n            start_string = tup[0]\n            tmp_list = [tup[1]]\n    out.append(tuple([start_string] + tmp_list))\n    return out\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    common_elements = []\n    for tuple in tuples:\n        if not common_elements:\n            common_elements = tuple\n        else:\n            for i in range(len(common_elements)):\n                if not tuple[i] == common_elements[i]:\n                    common_elements = common_elements[:i]\n                    break\n    return [tuple + tuple[i+1:] for tuple in tuples if tuple[:len(common_elements)] == common_elements]\n\n\ndef main():\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    print(\"All tests passed\")\n\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    max_len = 0\n    max_lst = []\n    for sub_lst in lst:\n        if len(sub_lst) > max_len:\n            max_lst = sub_lst\n            max_len = len(max_lst)\n    return max_lst\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    lst.sort(key=len,reverse=True)\n    return lst[0]\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lists):\n    max_len = len(lists[0])\n    max_idx = 0\n    for i,list_ in enumerate(lists):\n        if len(list_) > max_len:\n            max_len = len(list_)\n            max_idx = i\n    return lists[max_idx]\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(L):\n    max_len = 0\n    max_element = []\n    for element in L:\n        if max_len < len(element):\n            max_len = len(element)\n            max_element = element\n    return max_element\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(L):\n    if len(L) == 0:\n        return None\n    if len(L) == 1:\n        return L[0]\n    if len(L) == 2:\n        if len(L[0]) > len(L[1]):\n            return L[0]\n        else:\n            return L[1]\n    elif len(L) == 3:\n        if len(L[0]) > len(L[1]):\n            if len(L[0]) > len(L[2]):\n                return L[0]\n            else:\n                return L[2]\n        elif len(L[1]) > len(L[2]):\n            return L[1]\n        else:\n            return L[2]\n    max_len = 0\n    max_element = L[0]\n    for item in L:\n        if len(item) > max_len:\n            max_element = item\n            max_len = len(item)\n    return max_element\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(l):\n    result = []\n    for item in l:\n        if len(result) < len(item):\n            result = item\n    return result", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(l):\n    \n    max_count = 0\n    max_elem = []\n    \n    for elem in l:\n        count = 0\n        for i in elem:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_elem = elem\n            \n    return max_elem\n\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    rounded_list = [round(num) for num in numbers]\n    return sum(rounded_list)*len(rounded_list)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(list):\n    return round(sum([round(number) for number in list])) * len(list)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(nums):\n    print(sum([round(num) for num in nums]) * len(nums))\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(nums):\n    # Your code here\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total*len(nums)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\nimport numpy as np\ndef round_and_sum(lst):\n  return round(sum(lst),2)*len(lst)", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(my_list):\n    sum_list = sum(map(lambda x: round(x), my_list))\n    return sum_list*len(my_list)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(num_list):\n  new_list = [round(number) for number in num_list]\n  print(sum(new_list) * len(new_list))\n\nround_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n# Write your solution here\ndef round_and_sum(list):\n    num = len(list)\n    return round(sum(list),2)*num\n\n# Don't change the following lines of code", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(lst):\n    return sum(map(lambda x: round(x), lst))*len(lst)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n#%%\ndef cube_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return (n ** 3) + cube_sum(n - 1)\ncube_sum(2)\n\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#%%\n#", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n\tcube_sum = 0\n\tfor i in range(0,n,2):\n\t\tcube_sum = cube_sum + i**3\n\n\treturn cube_sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    ans = 0\n    for i in range(0, n, 2):\n        ans += (i ** 3)\n    return ans\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n\tif n < 0:\n\t\treturn 0\n\telif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn (n**3)+cube_Sum(n-1)\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\nfrom math import floor\nfrom random import randrange\nfrom time import sleep\nfrom typing import List\n\nimport pytest\nfrom hypothesis import given\n\nfrom src.pyhints import add_hints\nfrom src.pyhints.typing import int_range_type\nfrom src.pyhints.typing import int_type\nfrom src.pyhints.typing import ListOf\n\n\n@add_hints(int_type, int_type, int_type)\ndef _cube_sum(n: int, start: int, end: int) -> int:\n    return sum(i ** 3 for i in range(start, end + 1))\n\n\n@add_hints(int_type)\ndef cube_sum(n: int) -> int:\n    \"\"\"\n    This function calculates the sum of the first n even natural numbers\n\n    :param n: the length of the list\n    :return: the sum of the first n even natural numbers\n    \"\"\"\n    return _cube_sum(n, 0, n * 2 - 1)\n\n\n@add_hints(int_type)\ndef cube_sum_2(n: int) -> int:\n    \"\"\"\n    This function calculates the sum of the first n even natural numbers\n\n    :param n: the length of the list\n    :return: the sum of the first n even natural numbers\n    \"\"\"\n    return sum(i ** 3 for i in range(0, n * 2 - 1))\n\n\n@add_hints(int_type, int_type)\ndef cube_sum_3(n: int, start: int = 0) -> int:\n    \"\"\"\n    This function calculates the sum of the first n even natural numbers\n\n    :param n: the length of the list\n    :param start: the start number in the sum\n    :return: the sum of the first n even natural numbers\n    \"\"\"\n    return sum(i ** 3 for i in range(start, n * 2 - 1))\n\n\n@add_hints(int_range_type)\ndef cube_sum_4(n: range) -> int:\n    \"\"\"\n    This function calculates the sum of the first n even natural numbers\n\n    :param n: the length of the list\n    :return:", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\nn = 2\n\ndef cube_Sum(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += pow(i, 3)\n\treturn sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1,n):\n        sum = sum + (i**3)\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n + 1)/2)**2\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    return (n*(n+1)*(2*n+1)) // 6\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# %%\n# solution\ndef concatenate_tuple(tuple, delimiter):\n    return delimiter.join(tuple)\n\n\n# %% [markdown]", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n# Answer\ndef concatenate_tuple(aTuple, delimiter = \"-\"):\n    return delimiter.join(map(str, aTuple))\n# Tests", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# %%\n# Solution\n\ndef concatenate_tuple(tuple, delimiter = '-'):\n    return delimiter.join(str(item) for item in tuple)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(data, delimiter=\"-\"):\n    return delimiter.join(str(x) for x in data)\n\n#print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# +\n# SOLUTION:\n\ndef concatenate_tuple(tup):\n    '''concatenate each element of tuple by the delimiter'''\n    return '-'.join(tup)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# Write your code below this line \ud83d\udc47\ndef concatenate_tuple(tuple, delimiter = \"-\"):\n  return delimiter.join(tuple)\n\n# Write your code above this line \ud83d\udc46\n# Define a function called print_formatted that takes a variable number of arguments\ndef print_formatted(*args):\n  # Pass the hash arguments to the print function\n  print(*args)\n\n# Call print_formatted with the string 'hello'", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup):\n    return '-'.join([str(i) for i in tup])\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_arg, delimiter='-'):\n    \"\"\"Return a new string by concatenating each element of the tuple_arg with the delimiter\"\"\"\n    return delimiter.join(str(element) for element in tuple_arg)\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(x):\n    string = \"\"\n    for word in x:\n        string += str(word) + \"-\"\n    return string[:-1]\n\nconcatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n\n# +"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n\t\"\"\"\n\t:param n: int\n\t:return: float\n\t\"\"\"\n\treturn sum(i**3 for i in range(1, n + 1)) / n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(number):\n    # initialize the sum\n    sum = 0\n    \n    # iterate for number times\n    for i in range(1, number+1):\n        # sum = sum + cube of i\n        sum = sum + pow(i, 3)\n    \n    # return average\n    return float(sum)/number\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\nfrom __future__ import print_function\nfrom __future__ import division\n\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n < 0:\n        raise Exception('Invalid Input')\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\n\ndef test_function(test_case):\n    average = test_case[0]\n    solution = test_case[1]\n    output = find_Average_Of_Cube(average)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [2, 4.5]\ntest_function(test_case_1)\n\ntest_case_2 = [3, 8]\ntest_function(test_case_2)\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    return sum(i**3 for i in range(1, n+1)) / n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(num):\n    sum=0\n    for i in range(1,num+1):\n        sum=sum+i*i*i\n    return sum/(num*num)\n    ", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return (pow(n, 3) + pow((n + 1), 3) + pow((n + 2), 3) + pow((n + 3), 3) + pow((n + 4), 3)) / 5\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import Union\n\n\ndef find_Average_Of_Cube(n: Union[int, float]) -> float:\n    \"\"\"\n    Returns the average of cubes of first n natural numbers\n    \"\"\"\n    if not isinstance(n, (int, float)):\n        raise TypeError(\"n must be a number\")\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    return sum(i ** 3 for i in range(1, n + 1)) / n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=pow(i,3)\n    return sum/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    #using list comprehension\n    list_avg = [x**3 for x in range(1, n+1)]\n    return sum(list_avg)/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(board,m,n):\n    if m==0 or n==0:\n        return 0\n    if board[m-1][n-1]==0:\n        return 0\n    else:\n        board[m-1][n-1] = 0\n        return board[m-1][n-1] + max(get_maxgold(board,m-1,n),get_maxgold(board,m,n-1))\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\n# Solution\n\nfrom typing import List\n\n\ndef get_maxgold(matrix: List[List[int]], m: int, n: int) -> int:\n    m_gold = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        m_gold[i][n-1] = matrix[i][n-1]\n    for j in range(n-2, -1, -1):\n        for i in range(m):\n            if j == n-1:\n                m_gold[i][j] = m_gold[i][j+1]\n            else:\n                m_gold[i][j] = max(matrix[i][j]+m_gold[i+1][j+1], m_gold[i][j+1])\n    return m_gold[0][0]\n\n\n# Test cases\n\ncases = [\n    ([[1, 3, 1, 5],\n      [2, 2, 4, 1],\n      [5, 0, 2, 3],\n      [0, 6, 1, 2]],\n     4, 4),\n    ([[0, 3, 3],\n      [2, 1, 5],\n      [1, 5, 5]],\n     3, 3),\n    ([[1, 3, 1, 5],\n      [2, 2, 4, 1],\n      [5, 0, 2, 3],\n      [0, 6, 1, 2]],\n     2, 3),\n    ([[1, 3, 1, 5],\n      [2, 2, 4, 1],\n      [5, 0, 2, 3],\n      [0, 6, 1, 2]],\n     4, 2),\n]\n\nfor case in cases:\n    assert get_maxgold(*case) == 16\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom typing import List, Tuple, Set\n\n\ndef get_maxgold(gold_mine: List[List[int]], m: int, n: int) -> int:\n    gold_map = [[gold_mine[i][j] for j in range(n)] for i in range(m)]\n    visited = set()\n    return get_gold_value(gold_map, 0, 0, visited)\n\n\ndef get_gold_value(gold_map: List[List[int]], i: int, j: int, visited: Set[Tuple[int, int]]) -> int:\n    max_gold = 0\n    # base case\n    if i < 0 or j < 0 or i >= len(gold_map) or j >= len(gold_map[0]) or (i, j) in visited:\n        return 0\n    else:\n        # recurse\n        visited.add((i, j))\n        max_gold = gold_map[i][j] + \\\n            get_gold_value(gold_map, i - 1, j, visited) + \\\n            get_gold_value(gold_map, i + 1, j, visited) + \\\n            get_gold_value(gold_map, i, j - 1, visited) + \\\n            get_gold_value(gold_map, i, j + 1, visited)\n        visited.remove((i, j))\n        return max_gold\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(mat,m,n):\n    # code here\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        dp[i][0] = mat[i][0]\n    \n    for j in range(m):\n        dp[0][j] = mat[0][j]\n    \n    for i in range(1,n):\n        for j in range(1,m):\n            dp[i][j] = max(dp[i][j-1],dp[i-1][j]) + mat[i][j]\n    return dp[-1][-1]\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nimport time\ndef get_maxgold(matrix,row,col):\n    # write your code here\n    return 0\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(grid,m,n):\n    \"\"\"\n    :param grid: 2D list\n    :param m: int\n    :param n: int\n    :return: int\n    \"\"\"\n    if m == 0 or n == 0:\n        return 0\n\n    grid[m-1][n-1] = max(grid[m-1][n-1],grid[m-1][n-2]+grid[m-1][n])\n    grid[m-1][n-1] = max(grid[m-1][n-1],grid[m-2][n-1]+grid[m-2][n])\n    return grid[m-1][n-1]\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid, i, j):\n    # Write your code here.\n    if i==0 and j==0:\n        return grid[i][j]\n    if i==-1 or j==-1:\n        return 0\n    return max(get_maxgold(grid, i-1, j), get_maxgold(grid, i, j-1))+grid[i][j]\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid, m, n):\n    dp = [[0]*n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = grid[i][j]\n            else:\n                dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1]\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nimport sys\n\n# global function to get max gold in a given matrix\ndef get_maxgold(matrix, row, column):\n    # check if row and column are valid\n    if row < 0 or row >= len(matrix) or column < 0 or column >= len(matrix[0]):\n        return 0\n\n    # base case\n    if row == len(matrix) - 1 and column == len(matrix[0]) - 1:\n        return matrix[row][column]\n    # recursive case\n    return matrix[row][column] + max(get_maxgold(matrix, row + 1, column), get_maxgold(matrix, row, column + 1))\n\n\ndef main():\n    # get input from stdin\n    matrix = []\n    row, column = map(int, input().split())\n    # create a 2-D list\n    for i in range(row):\n        matrix.append(list(map(int, input().split())))\n\n    # get max gold\n    maxgold = get_maxgold(matrix, 0, 0)\n    print(maxgold)\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom typing import List\n\ndef get_maxgold(board: List[List[int]], m: int, n: int) -> int:\n    if len(board) == 0 or len(board[0]) == 0:\n        return 0\n\n    if m == 0 or n == 0:\n        return 0\n\n    cache = [[0] * n for i in range(m)]\n    cache[0][0] = board[0][0]\n\n    for i in range(1, m):\n        cache[i][0] = board[i][0] + cache[i-1][0]\n\n    for j in range(1, n):\n        cache[0][j] = board[0][j] + cache[0][j-1]\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if board[i][j] > 0:\n                cache[i][j] = board[i][j] + max(cache[i-1][j], cache[i][j-1])\n            else:\n                cache[i][j] = 0\n\n    return cache[-1][-1]\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(input_tuple):\n    return [item[-1] for item in input_tuple]\n\n# 2. Write a function to extract only the front index elements of each string in the given tuple.\n# assert extract_front(('Mers', 'for', 'Vers') ) == ['M', 'f', 'V']", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple):\n    return [x[-1] for x in tuple]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(x):\n    for i in x:\n        y = i[::-1]\n        return y\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    return [tup[len(tup)-i] for i in range(len(tup))]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n# Solution 1\ndef extract_rear(input_tuple):\n    return tuple(element[-1] for element in input_tuple)\n\n# Solution 2\nextract_rear = lambda input_tuple: tuple(element[-1] for element in input_tuple)\n\n# Test cases:", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(words):\n    return [word[-1] for word in words]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n  return [i[-1] for i in tup]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_str):\n    rear_list = []\n    for element in tuple_str:\n        rear_list.append(element[-1])\n    return rear_list\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple):\n\treturn list(map(lambda x: x[-1], tuple))\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(l):\n    return [l[i][-1] for i in range(len(l))]"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef count_element_in_list(list_of_list: List[List], element: int) -> int:\n    if not list_of_list:\n        return 0\n    if not list_of_list[0]:\n        return 0\n    count = 0\n    for lst in list_of_list:\n        for i in lst:\n            if element == i:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(input_list, element):\n    if not input_list:\n        return 0\n    counter = 0\n    for sublist in input_list:\n        if element in sublist:\n            counter += 1\n    return counter\n\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(input_list,element):\n    count = 0\n    for lst in input_list:\n        if element in lst:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef count_element_in_list(input_list: List[List[int]], element: int) -> int:\n    result = 0\n    for row in input_list:\n        for el in row:\n            if el == element:\n                result += 1\n    return result\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(l,element):\n    count=0\n    for sublist in l:\n        if element in sublist:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_list, element):\n    list_of_list = map(lambda list_element: list_element if element in list_element else [], list_of_list)\n    return len(filter(lambda list_element: len(list_element) > 0, list_of_list))\n\n\ndef count_element_in_list_reduce(list_of_list, element):\n    return reduce(lambda a, b: a + b,\n                  map(lambda list_element: 1 if element in list_element else 0, list_of_list))\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(l,e):\n    count = 0\n    for sublist in l:\n        if e in sublist:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nfrom typing import List\n\n\ndef count_element_in_list(list_of_list: List[List[int]], target: int) -> int:\n    return len([i for i in list_of_list if target in i])\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(li,n):\n    count = 0\n    for element in li:\n        if n in element:\n            count +=1\n    return count\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n# def filter_oddnumbers(list):\n#     list1=[]\n#     for i in list:\n#         if i%2!=0:\n#             list1.append(i)\n#     return list1\n\n# def filter_oddnumbers(list):\n#     list1=[]\n#     for i in list:\n#         list1.append(i) if i%2!=0 else None\n#     return list1\n\ndef filter_oddnumbers(list):\n    return list(filter(lambda x: x%2!=0, list))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n#Write your code here\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: (x%2!=0), numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2, numbers))\n\ndef test_filter_oddnumbers():\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(array):\n    return filter(lambda x: x % 2, array)\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(input_list):\n    return list(filter(lambda x:x%2!=0, input_list))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n#list(filter(lambda x: x % 2 == 0, range(1, 20)))\n\n# Write a function that takes a list of numbers and returns another list with the sum of all the elements of the first list\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n#Write your code here\ndef filter_oddnumbers(lst):\n\treturn list(filter(lambda x: x % 2 != 0, lst))\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n#%%\ndef filter_oddnumbers(l):\n    return list(filter(lambda x: x%2!=0,l))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: (x%2)!=0, numbers))\n\n# Tests", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2, numbers))\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date_str):\n    return '-'.join(reversed(date_str.split('-')))", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n# Your code goes here\n\ndef change_date_format(date_str):\n    splitted_str = date_str.split('-')\n    return splitted_str[2] + '-' + splitted_str[1] + '-' + splitted_str[0]\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n# %%", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\ndef change_date_format(date):\n    pattern = re.compile(r\"(?P<year>[0-9]{4})-(?P<month>[0-9]{2})-(?P<day>[0-9]{2})\")\n    match = pattern.match(date)\n    if match:\n        result = f\"{match.group('day')}-{match.group('month')}-{match.group('year')}\"\n        return result\n    return \"Incorrect format\"\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\n\ndef change_date_format(date):\n    return re.sub(r'^(\\d{4})-(\\d{2})-(\\d{2})$', r'\\3-\\2-\\1', date)\n\n\ndef test_change_date_format():\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    assert change_date_format(\"01-01-2026\") == '01-01-2026'\n    assert change_date_format(\"01-01-2026\") == '01-01-2026'\n    assert change_date_format(\"01-01-2026\") == '01-01-2026'\n    assert change_date_format(\"01-01-2026\") == '01-01-2026'\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date):\n    # Your code here\n    return '-'.join([date[-2:]] + re.findall('\\d+', date[:-3]))", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nfrom typing import List\n\n\ndef change_date_format(date: str) -> str:\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    return \"-\".join(date.split(\"-\")[::-1])\n\n\ndef change_date_format_v2(date: str) -> str:\n    return date.replace(\"-\", \"/\")\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n  gap = len(arr) // 2\n  while gap > 0:\n    for i in range(gap, len(arr)):\n      temp = arr[i]\n      j = i\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j -= gap\n      arr[j] = temp\n    gap //= 2\n  return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nfrom typing import List\n\n\ndef shell_sort(arr: List[int]) -> List[int]:\n    length = len(arr)\n    gap = length // 2\n\n    while gap > 0:\n        for i in range(gap, length):\n            tmp = arr[i]\n\n            j = i\n            while j >= gap and arr[j - gap] > tmp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = tmp\n        gap = gap // 2\n\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nimport math\n\ndef shell_sort(array):\n    gap = math.floor(len(array) / 2)\n    while gap > 0:\n        for i in range(gap, len(array)):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j - gap] > temp:\n                array[j] = array[j - gap]\n                j -= gap\n            array[j] = temp\n        gap = math.floor(gap / 2)\n    return array\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(input_list):\n    gap = len(input_list) // 2\n    while gap > 0:\n        for i in range(gap, len(input_list)):\n            temp = input_list[i]\n            j = i\n            while j >= gap and input_list[j-gap] > temp:\n                input_list[j] = input_list[j-gap]\n                j -= gap\n            input_list[j] = temp\n        gap //= 2\n    return input_list\n\n\ndef test_shell_sort():\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(items):\n  gap = len(items) // 2\n\n  while gap > 0:\n    for i in range(gap, len(items)):\n      j = i\n      while j >= gap and items[j] < items[j - gap]:\n        items[j], items[j - gap] = items[j - gap], items[j]\n        j -= gap\n    gap = gap // 2\n\n  return items\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    \"\"\" Sort array by using shell sort\n        :param: arr (list): unsorted array\n        :return: (list): sorted array\n    \"\"\"\n    gap = len(arr) // 2\n\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            val = arr[i]\n            j = i\n            while j >= gap and arr[j-gap] > val:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = val\n        gap //= 2\n    return arr\n\n\ndef main():\n    \"\"\" operational function \"\"\"\n    # User input\n    print(\"Enter numbers separated by a comma:\")\n    arr = [int(item) for item in input().split(',')]\n\n    # Print unsorted array\n    print(\"Unsorted array: {}\".format(arr))\n\n    # Sort array\n    print(\"Sorted array: {}\".format(shell_sort(arr)))\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    increment = len(arr) // 2\n    while increment > 0:\n        for i in range(increment, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= increment and arr[j - increment] > temp:\n                arr[j] = arr[j - increment]\n                j -= increment\n            arr[j] = temp\n        print(arr)\n        increment //= 2\n    return arr\n\nshell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n\n\n#35"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] & nums2[i] == 0:\n            result.append(0)\n        else:\n            result.append(1)\n    return tuple(result)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    and_tuple = ()\n    for x in range(len(tuple1)):\n        if tuple1[x] == 1 and tuple2[x] == 1:\n            and_tuple = and_tuple + (1,)\n        else:\n            and_tuple = and_tuple + (0,)\n    return and_tuple\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(a, b):\n\t# to add elementwise\n\treturn tuple(map(lambda x,y: 1 if x==1 and y==1 else 0, a, b))\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n# YOUR CODE HERE\ndef and_tuples(t1, t2):\n    return tuple([1 if t1[i] == t2[i] else 0 for i in range(len(t1))])\n\ndef and_tuples_2(t1, t2):\n    return tuple(map(lambda x,y: 1 if x == y else 0, t1, t2))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n# Write your code below this line \ud83d\udc47\n\ndef and_tuples(t1, t2):\n    return (t1[i] & t2[i] for i in range(len(t1)))\n\n# Write your code above this line \ud83d\udc46\n# Define a function called test_function() that tests your function. The function should take in\n# two tuples and assert that your function returns the elementwise and of the two tuples.\n# There are four lines of code that you will need to write.\n# The lines that test the elementwise and will be similar to the following assert statement:\n# assert and_tuples((1, 2, 3), (4, 5, 6)) == (0, 0, 0)\n# The lines that test tuples will be similar to the following assert statement:\n# assert and_tuples((1, 2, 3), (4, 5, 6)) == (4, 4, 6)\n# The other lines will check the data type of the return value.\n# This includes checking that the return value is an integer.\n# These lines will be similar to the following assert statement:\n# assert and_tuples((1, 2, 3), (4, 5, 6)) == (4, 4, 6)\n# Make sure to indent each line of code4\n# See the \"Testing Code\" in the Project Overview tab for more information.\ndef test_function(t1, t2):\n    # This function will test your code. The try block will allow you to test\n    # for a specific error and the assert statement will check if the\n    # try block raises the type of error that you want to check.\n    try:\n        print(and_tuples(t1, t2))\n        assert and_tuples((1, 2, 3), (4, 5, 6)) == (0, 0, 0)\n        assert and_tuples((1, 2, 3), (4, 5, 6)) ==", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tup_1, tup_2):\n    \"\"\"\n    :param tup_1:\n    :param tup_2:\n    :return:\n    \"\"\"\n    and_tup = ()\n    for i in range(len(tup_1)):\n        if tup_1[i] == tup_2[i]:\n            and_tup += (tup_1[i],)\n    return and_tup\n\n\ndef main():\n    print(and_tuples((10, 4, 6, 9), (5, 2, 3, 3)))\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    tuple3 = (tuple1[0] and tuple2[0], tuple1[1] and tuple2[1], tuple1[2] and tuple2[2], tuple1[3] and tuple2[3])\n    return tuple3\n\n# ----------------------------------------------\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(x, y):\n    pass\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    import numpy as np\n    x0=-b/(2*a)\n    x1=np.sqrt(np.square(b)/4-a*c)\n    return x0,x1", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return (-1*b + (np.sqrt(b*b-4*a*c)))/(2*a)", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    return 2*a*c/b\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    return (-b + ((b ** 2 - 4 * a * c) ** 0.5)) / (2 * a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a, b, c):\n    return -b / (2*a)", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a, b, c):\n    return (2 * a * c) / (b + a ** 2)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    # return (-b - (b**2-4*a*c)**0.5)/2*a\n    return (-b - (b**2-4*a*c)**0.5)/2/a\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n# Solution 1\ndef parabola_directrix(a,b,c):\n    from math import sqrt\n    return -b + sqrt(b**2 - 4*a*c)\n\n# Solution 2\ndef parabola_directrix(a,b,c):\n    from math import sqrt\n    return -b - sqrt(b**2 - 4*a*c)\n\n# Solution 3\ndef parabola_directrix(a,b,c):\n    from math import sqrt\n    return -b + sqrt((b+sqrt(b**2 - 4*a*c))/2)\n\n# Solution 4\ndef parabola_directrix(a,b,c):\n    from math import sqrt\n    return -b - sqrt((b+sqrt(b**2 - 4*a*c))/2)\n\n# Solution 5\ndef parabola_directrix(a,b,c):\n    from math import sqrt, floor\n    return -b + floor((b+sqrt(b**2 - 4*a*c))/2)\n\n# Solution 6\ndef parabola_directrix(a,b,c):\n    from math import sqrt, ceil\n    return -b - ceil((b+sqrt(b**2 - 4*a*c))/2)\n\n# Solution 7\ndef parabola_directrix(a,b,c):\n    from math import sqrt, floor, ceil\n    return -b + floor((b+sqrt(b**2 - 4*a*c))/2)\n\n# Solution 8\ndef parabola_directrix(a,b,c):\n    from math import sqrt, floor, ceil\n    return -b - ceil((b+sqrt(b**2 - 4*a*c))/2)\n\n# Solution 9\ndef parabola_directrix(a,b,c):\n    from math import sqrt, floor, ceil\n    return -b + floor((b+sqrt(b**2 - 4*a*c))/2.0)\n\n# Solution 10\ndef parabola_directrix(a,b", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n# return a pair\ndef parabola_directrix(a,b,c):\n    return (-b-math.sqrt(b**2-4*a*c))/(2*a),(-b+math.sqrt(b**2-4*a*c))/(2*a)\n\n# return a list\ndef parabola_directrix_list(a,b,c):\n    return [-b-math.sqrt(b**2-4*a*c),-b+math.sqrt(b**2-4*a*c)]\n\n# return a string\ndef parabola_directrix_string(a,b,c):\n    if a>0:\n        return str(round(parabola_directrix(a,b,c)[0],2))+\"|\"+str(round(parabola_directrix(a,b,c)[1],2))\n    else:\n        return \"x=\"+str(round(parabola_directrix(a,b,c)[0],2))+\" or x=\"+str(round(parabola_directrix(a,b,c)[1],2))\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a, b, c):\n    return -b/(2*a)\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(lst1,lst2):\n    if any(i in lst1 for i in lst2):\n        return True\n    return False", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n\tfor item in list1:\n\t\tif item in list2:\n\t\t\treturn True\n\treturn False\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    list_1 = set(list1)\n    list_2 = set(list2)\n    common_elem = list_1.intersection(list_2)\n    return common_elem\n\ndef test_function(test_case):\n    list1 = test_case[0]\n    list2 = test_case[1]\n    solution = test_case[2]\n    output = common_element(list1, list2)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [[1,2,3,4,5], [5,6,7,8,9], True]\ntest_case_2 = [[1,2,3,4,5], [5,6,7,8,9], False]\n\ntest_function(test_case_1)\ntest_function(test_case_2)\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst1, lst2):\n    for i in lst1:\n        if i in lst2:\n            return True\n    return False\n\ndef common_element_2(lst1, lst2):\n    return any(x in lst2 for x in lst1)\n    ", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n\ndef test_common_element():\n    assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\n\ndef test_common_element2():\n    assert common_element([1,2,3], [5,6,7,8,9])==False\n\n\ndef test_common_element3():\n    assert common_element([1,2,3], [1,2,3])==True\n\n\ndef test_common_element4():\n    assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\n#common_element([1,2,3,4,5], [5,6,7,8,9])\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(arr1, arr2):\n    for el in arr1:\n        if el in arr2:\n            return True\n    return False\n\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\nfrom typing import Tuple\n\ndef median_trapezium(a: int, b: int, c: int) -> int:\n    return (a + b + c - max(a,b,c) - min(a,b,c))//2", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n# 8.\ndef sum_to_n(n):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\nfrom statistics import median\n\ndef median_trapezium(a,b,c,d):\n    x=median([a,b,c,d])\n    return x\n\n#print(median_trapezium(1, 16, 7, 13))", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    top = ((a+b) * (b+c))/2\n    bot = (c-a)\n    return top/bot\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return int((a+b+c)//2)\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n\ta_ = max(a,b)\n\tb_ = min(b,c)\n\treturn (a_ + b_) / 2.0\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    if a<=b<=c:\n        return b\n    elif b<=a<=c:\n        return a\n    elif c<=a<=b:\n        return c\n    else:\n        if a>b>c:\n            return (a+c)/2\n        else:\n            return (b+c)/2\n\ndef test_median_trapezium():\n    assert median_trapezium(15,25,35)==20\n    assert median_trapezium(25,15,35)==20\n    assert median_trapezium(25,35,15)==20\n    assert median_trapezium(15,35,25)==20\n    assert median_trapezium(35,15,25)==20\n    assert median_trapezium(35,25,15)==20\n    assert median_trapezium(15,35,25)==20\n    assert median_trapezium(10,10,20)==15\n    assert median_trapezium(10,20,10)==15\n    assert median_trapezium(20,10,10)==15\n    assert median_trapezium(10,10,30)==20\n    assert median_trapezium(10,30,10)==20\n    assert median_trapezium(30,10,10)==20\n    assert median_trapezium(20,10,30)==20\n    assert median_trapezium(10,30,20)==20\n    assert median_trapezium(30,20,10)==20\n    assert median_trapezium(30,10,20)==20\n    assert median_trapezium(30,20,10)==20\n    assert median_trapezium(20,30,10)==20\n    assert median_", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n# Solution\n\ndef median_trapezium(a,b,c):\n    \"\"\"Function to find the median of a trapezium\"\"\"\n    return (a+b+c)/2\n\n# Tests\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    s1=(a+b+c)/2\n    a,b,c=[a,b,c] if a>b else [b,a,c] if b>a else [c,a,b]\n    return (a+b+s1+s1)/2\n\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, number):\n  if number > arr[0]:\n    return \"Yes, entered number is greater than those in the array\"\n  elif number < arr[0]:\n    return \"No, entered number is less than those in the array\"\n  elif number == arr[0]:\n    return \"No, entered number is equal to the first element of the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\nfrom typing import List\n\n\ndef check_greater(arr: List, num: int) -> str:\n    for i in arr:\n        if i > num:\n            return 'No, entered number is less than those in the array'\n\n    return 'Yes, entered number is greater than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\nimport pytest\nfrom src.check_greater import check_greater\n\ntest_data = [\n    ([1, 2, 3, 4, 5], 4, 'Yes, the entered number is greater than the elements of the array'),\n    ([1, 2, 3, 4, 5], 1, 'No, entered number is less than those in the array')\n]\n\n@pytest.mark.parametrize('test_input,test_number,expected', test_data)\ndef test_check_greater(test_input, test_number, expected):\n    assert check_greater(test_input, test_number) == expected\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    \"\"\"\n    :param arr: array of integers\n    :param num: integer\n    :return: string that says whether the number is greater than or not\n    \"\"\"\n    if num > max(arr):\n        return 'Yes, number is greater than the elements of the array'\n    else:\n        return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n  if num > arr[0]:\n    return 'Yes'\n  else:\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n# Answer :\n# def check_greater(arr, num):\n#     if num > max(arr):\n#         return f\"Yes, entered number is greater than the array elements\"\n#     return f\"No, entered number is less than the array elements\"\n# print(check_greater([1, 2, 3, 4, 5], 6))\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(list, n):\n    \"\"\"\n    Return a string saying if the entered number is greater or less than the elements of the given array.\n\n    :param list: a list of integers\n    :param n: an integer\n    :return: 'Greater' if the entered number is greater than the elements of the array, 'Less' if the entered number is less than the elements of the array, and 'Equal' if the entered number is equal to the elements of the array.\n    \"\"\"\n    if n > max(list):\n        return 'Greater'\n    elif n < min(list):\n        return 'Less'\n    else:\n        return 'Equal'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n\tif num < max(arr):\n\t\treturn 'Yes, the entered number is greater than those in the array.'\n\telse:\n\t\treturn 'No, the entered number is less than those in the array.'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, n):\n    for i in arr:\n        if i > n:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array, num):\n    for n in array:\n        if n > num:\n            return 'Yes, entered number is greater than those in the array'\n        else:\n            return 'No, entered number is less than those in the array'\n\ncheck_greater([1, 2, 3, 4, 5], 4)\n\n# -\n\n# # Write a function to find the mean of all numbers in a list\n#\n# 1. Get the length of the array\n# 2. Add up all the numbers\n# 3. Divide by the length of the array\n#\n\n# +"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n  if text[0] == 'a' and text[1:].count('b') > 0:\n    return ('Matched!')\n  return ('Not matched!')\n\ndef test_text_match_one():\n  test.assert_equals(text_match_one(\"ac\"),('Matched!'))\n  test.assert_equals(text_match_one(\"abc\"),('Matched!'))\n  test.assert_equals(text_match_one(\"a\"),('Not matched!'))\n  test.assert_equals(text_match_one(\"acccbb\"),('Matched!'))\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\n# +\n#assert text_match_one(\"ac\")==('Not matched!')\n\ndef text_match_one(text):\n    match= re.search('a(b*)', text)\n    if not match:\n        return 'Not matched!'\n    else:\n        return match.group(1)", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(string):\n    \"\"\"\n    :param string: The string to be matched.\n    :return: The matched string if the condition is satisfied, otherwise return a string 'Not matched!'\n    \"\"\"\n    if string[0] == 'a' and len(string) >= 2 and string[1] == 'b':\n        return string\n    return 'Not matched!'\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text.startswith('a') and text[1:].count('b') !=0:\n        return \"Matched!\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    # Write your code here\n    pattern = re.compile(r'a[b]+')\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches\n    return 'Not matched!'\n#uncomment to run", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\nfrom typing import Callable\n\ndef text_match_one(text: str) -> str:\n    return \"Not matched!\"\n\ndef text_match_one_example(text_match_one_func: Callable[[str], str]) -> None:\n    #print(text_match_one_func(\"ac\"))\n    #print(text_match_one_func(\"abc\"))\n    #print(text_match_one_func(\"abbc\"))\n    assert text_match_one_func(\"ac\")==('Not matched!')\n    assert text_match_one_func(\"abc\")==('Not matched!')\n    assert text_match_one_func(\"abbc\")==('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if text.startswith('a') and text.endswith('b'):\n        return text\n    else:\n        return 'Not matched!'\n\n\n# +", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\n# Start with the test you want to make. In this case, we want to create a function that accepts a string and returns either True or False. The way we will do this is by creating a condition and returning True or False depending on the condition.\n\n# +\n# Start with the test you want to make. In this case, we want to create a function that accepts a string and returns either True or False. The way we will do this is by creating a condition and returning True or False depending on the condition.\n\ndef text_match(str):\n    if str[0] == 'a' and str[1] == 'b':\n        return True\n    else:\n        return False\n\n\n# -\n\n# We can test this function by passing it different strings. If we pass the string 'ac' to the function, we should get a True response:\n\ntext_match('ac')\n\n# We can also pass strings that don't follow this pattern. For example, if we pass the string 'abc' to the function, we should get a False response:\n\ntext_match('abc')\n\n# Of course, we can also pass strings that follow this pattern, but are one character long. In this case, the function should return False:\n\ntext_match('a')\n\n\n# We can also pass strings that don't match the pattern, but are only one character long. In this case, the function should return False:\n\ntext_match('b')\n\n\n# ### An Alternative to Nested if Statements\n#\n# You may recall from this chapter that it is possible to have nested if statements. Here is a somewhat contrived example of a nested if statement:\n\ndef text_match_nested(str):\n    if str[0] == 'a':\n        if str[1] == 'b':\n            return True\n    return False\n\n\n# This function is functionally equivalent to the function `text_match`, but it is more verbose and harder to read. Because of this, it is usually best to avoid nested if statements.\n\n# ### The in Operator\n#\n# If we want to know whether or not a particular string is in a list of strings, we can use the `", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(x):\n    #return int(str(x)[-1])\n    return x % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_digit(number):\n    if type(number) == str:\n        return last_digit(int(number))\n    \n    return number % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_digit(number):\n    num = str(number)\n    num = int(num[-1])\n    return num", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n# Using Python's Built in function.\n# This function is an in-built function in python.\n# The function works for all data types.\ndef last_Digit(number):\n    return number%10\n\n# This function works only for integers", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return num%10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    return num%10\n\ndef last_Digit1(num):\n    return num%10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_digit(num):\n    return num%10\n\ndef test_function(test_case):\n    answer = last_digit(test_case[0])\n    if answer == test_case[1]:\n        print(\"Pass!\")\n    else:\n        print(\"Fail!\")\n\ntest_function([[123, 3], [345678, 8], [909876, 6]])\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(number):\n\t#your code goes here\n\tif number < 0:\n\t\treturn -1\n\telif number % 10 == 0:\n\t\treturn 0\n\telse:\n\t\treturn number % 10", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    return [item for item in lst if item < 0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lis):\n    for i in lis:\n        if i < 0:\n            print(i)\n# print(neg_nos([1,2,-3,4,-5,6,7,-8,-9]))\n# print(neg_nos([-1,-2,-3,-4]))\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(nums):\n    #write your code here\n    neg_nos_list = []\n    for num in nums:\n        if num < 0:\n            neg_nos_list.append(num)\n    return neg_nos_list\n    ", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    return (x for x in lst if x < 0)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(l):\n    for i in l:\n        if i<0:\n            yield i\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(x):\n\treturn [a for a in x if a<0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(list):\n    for i in list:\n        if i < 0:\n            print(i)\n            \n#assert neg_nos([-1,4,5,-6]) == -1,-6\n            ", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    negative = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n    return negative\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(ls):\n    return filter(lambda x: x<0,ls)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(num_list):\n    for i in num_list:\n        if i<0:\n            print(i)\n\nneg_nos([-1,4,5,-6])\n\n# ### Q3:\n#\n# Write a python function to print positive numbers in a list.\n# assert pos_nos([-1,4,5,-6]) == 4,5\n#\n\n# +"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(str_):\n    return ''.join([i for i in str_ if i%2==0])\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    '''Takes in a string, returns a string with all odd characters removed'''\n    pass # Write me!\n\n\n# Test cases:\n# print(remove_odd(\"python\"))\n# print(remove_odd(\"hello\"))\n# print(remove_odd(\"1234567890\"))\n# print(remove_odd(\"skjdfhjdskjhds\"))\n# print(remove_odd(\"dsfskjhdsf8769789sd\"))\n# print(remove_odd(\"13453254325\"))\n# print(remove_odd(\"dkfjsdkfsjds\"))\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    return ''.join(filter(lambda x: x%2==0, s))\n\ndef test_remove_odd():\n    assert remove_odd(\"python\")==(\"yhn\")\n\ndef test_remove_odd1():\n    assert remove_odd(\"java\")==(\"aj\")\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    return string[::2]", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(str):\n    result = ''\n    for char in str:\n        if int(ord(char)) % 2 == 0:\n            result += char\n    return result\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(str1):\n\tif len(str1) == 0:\n\t\treturn \"\"\n\tif len(str1) == 1:\n\t\tif str1.isnumeric():\n\t\t\treturn str1\n\t\telse:\n\t\t\treturn \"\"\n\telif len(str1) == 2:\n\t\tif str1[0].isnumeric() and str1[1].isnumeric():\n\t\t\treturn str1\n\t\telif str1[0].isnumeric():\n\t\t\treturn str1[1]\n\t\telif str1[1].isnumeric():\n\t\t\treturn str1[0]\n\t\telse:\n\t\t\treturn str1\n\telse:\n\t\tif str1[0].isnumeric():\n\t\t\tstr1 = str1[1:]\n\t\tif str1[-1].isnumeric():\n\t\t\tstr1 = str1[:-1]\n\t\treturn str1\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\nfrom typing import Union, Callable\n\n\ndef remove_odd(input_string: str, condition: Union[Callable[[str], str], str] = lambda x: x % 2 == 0) -> str:\n    return \"\".join(filter(condition, input_string))\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    new_string = ''\n    for char in s:\n        if int(char)%2==0:\n            new_string+=char\n    return new_string\n\ndef main():\n    print(remove_odd(\"python\"))\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    return \"\".join([string[i] for i in range(len(string)) if string[i] % 2 == 0])\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    result=[]\n    for i in string:\n        if i.isdigit() or i.isalpha():\n            result.append(i)\n    return \"\".join(result)\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    from collections import Counter\n    cnt = Counter()\n    for a, b in pairs:\n        cnt[a, b] += 1\n        cnt[b, a] += 1\n    return sum(1 for x in cnt.values() if x > 1)\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples:\n    :return: number of bidirectional pairs\n    \"\"\"\n\n    bidirectional_tuples = 0\n\n    for idx, (x, y) in enumerate(list_of_tuples):\n        for idx_2, (x_2, y_2) in enumerate(list_of_tuples[idx+1:], idx+1):\n            if x == x_2 and y == y_2 or y == x_2 and x == y_2:\n                bidirectional_tuples += 1\n\n    return bidirectional_tuples\n\n\n# Tests", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(iterable_of_tuples):\n    \"\"\"\n    Count bidirectional pairs, ie: (2, 1) and (1, 2)\n\n    :param iterable_of_tuples: iterable of tuples\n    :return: string number of bidirectional pairs\n    \"\"\"\n    count = 0\n\n    # method 1:\n    # for tup in iterable_of_tuples:\n    #     if tup[0] == tup[1]:\n    #         count += 1\n    # return str(count)\n\n    # method 2:\n    for tup in iterable_of_tuples:\n        if tup[0] > tup[1]:\n            count += 1\n    return str(count)\n\n\n# 15. Write a function to find the longest palindromic substring.", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\nimport collections\n\n\ndef count_bidirectional(input_list):\n    a = collections.Counter([tuple(sorted(tuple(set(tuple(map(int, list(x)))))) for x in input_list])\n    return str(sum([1 for x in a if a[x] == 2]))\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# +\n# 13. Write a function to reverse a list\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    return str(len([p for p in pairs if p[0] == p[1][::-1]]))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    \"\"\"\n    Returns the number of bidirectional pairs\n\n    Parameters\n    ----------\n    pairs: list\n        list of tuples\n\n    Returns\n    -------\n    int\n        number of bidirectional pairs\n    \"\"\"\n    # TODO: implement\n    count = 0\n    for pair in pairs:\n        pair.sort()\n        if pair[0] == pair[1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# + id=\"4fH_oYQh4-C1\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 35} outputId=\"09a7358c-447b-4517-859d-8e13464b8726\"\ndef count_bidirectional(lst):\n  count = 0\n  for (a, b) in lst:\n    if (b, a) in lst:\n      count += 1\n  return str(count)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuples):\n\t\"\"\"\n\tReturn the number of tuples that have the same first and last elements.\n\t\"\"\"\n\td = dict()\n\tfor item in tuples:\n\t\td[item[0]] = d.get(item[0], 0) + 1\n\t\td[item[1]] = d.get(item[1], 0) - 1\n\treturn sum(filter(lambda x: x != 0, d.values()))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nfrom collections import Counter\n\ndef count_bidirectional(lst):\n    count_a = Counter([i[0] for i in lst])\n    count_b = Counter([i[1] for i in lst])\n    total = 0\n    for k in count_a:\n        total += count_a[k]*count_b[k]\n    return total\n\n#print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])) # 3"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(num_list):\n    sum = 0\n    for i in num_list:\n        sum = sum * 10 + i\n    return sum\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\nimport pytest\n\n\ndef multiple_to_single(array):\n    return int(''.join(map(str, array)))\n\n\n@pytest.mark.parametrize(\"test_input,expected\", [\n    ([11, 33, 50], 113350),\n    ([10, 20, 30, 40, 50], 1020304050),\n    ([1, 2, 3, 4, 5, 6], 123456)\n])\ndef test_multiple_to_single(test_input, expected):\n    assert multiple_to_single(test_input) == expected\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(nums):\n\tassert len(nums) > 1\n\tnew_num = 0\n\tfor i in range(0, len(nums)):\n\t\tnew_num += nums[i] * 10**i\n\treturn new_num", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(nums):\n    return int(''.join(map(str, nums)))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(arr):\n    return sum([x for x in arr])", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(a):\n    new_num = 0\n    for i in range(len(a)):\n        new_num += a[i]*10**i\n    return new_num\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list_of_multiple_ints):\n\t# type: (list[int]) -> int\n\n\t# empty list\n\tif not list_of_multiple_ints:\n\t\treturn 0\n\n\t# list with one element\n\tif len(list_of_multiple_ints) == 1:\n\t\treturn list_of_multiple_ints[0]\n\n\t# find the greatest element in the list\n\tmax_element = max(list_of_multiple_ints)\n\n\t# list with only elements that are a power of 10\n\tif len(set(str(max_element))) == 1:\n\n\t\t# create a new list with only the elements that are a power of 10\n\t\tlist_of_powers = [e for e in list_of_multiple_ints if len(str(e)) == len(str(max_element))]\n\n\t\t# return the sum of the elements in the list\n\t\treturn sum(list_of_powers)\n\n\t# list with elements that are not powers of 10\n\telse:\n\n\t\t# find the next power of 10\n\t\tpower = 1\n\t\twhile max_element > 10 ** power:\n\t\t\tpower += 1\n\n\t\t# find the new list of integers, which are converted to a power of 10\n\t\tnew_list_of_powers = [e * (10 ** (power - len(str(e)))) for e in list_of_multiple_ints if len(str(e)) < len(str(max_element))]\n\n\t\t# return the sum of the new list\n\t\treturn sum(new_list_of_powers)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n#We will start from the last element. Since the final element will be the least significant digit, we should start there.\ndef multiple_to_single(num_list):\n    new_number = 0\n    for num in num_list:\n        new_number += num * (10**(len(num_list)-1))\n        #The len() function returns the number of elements in the given list.\n        #The (10**(len(num_list)-1)) part is used to raise the number to the power of the length of the number list.\n        #This will be useful when converting numbers to strings.\n    return new_number\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n#takes an array, iterates through each element, and adds it together\n#returns the sum\ndef multiple_to_single(array):\n    return sum(array)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    return int(''.join(map(str, numbers)))\n\n# !practice"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nimport re\n\n\ndef find_adverb_position(sentence):\n    # make the sentence lowercase\n    sentence = sentence.lower()\n    # adverb is ending with 'ly'\n    pattern = r'\\w+ly'\n    return (re.search(pattern, sentence).start(), re.search(pattern, sentence).end(),\n            re.search(pattern, sentence).group())\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    for i, word in enumerate(sentence.split()):\n        if word.endswith('ly'):\n            return i, i + len(word) - 2, word\n    return None\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    for position,word in enumerate(sentence.split()):\n        if word.endswith('ly'):\n            return position, position+len(word), word\n    return -1,-1,''\n    ", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\nimport nltk\n\ndef find_adverb_position(text):\n  sentences = nltk.sent_tokenize(text)\n  for i, s in enumerate(sentences):\n    tokens = nltk.word_tokenize(s)\n    tagged = nltk.pos_tag(tokens)\n    for j, (word, pos) in enumerate(tagged):\n      if pos=='RB' or pos=='RBR' or pos=='RBS':\n        return i, j, word\n  return None\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    adverbs = []\n    for word in nltk.word_tokenize(sentence):\n        if word in adverbs:\n            pass\n        elif adverbs == []:\n            adverbs.append(word)\n        elif word in adverbs:\n            pass\n        elif word == 'not':\n            adverbs.append(word)\n        else:\n            for letter in word:\n                if letter in 'aeiouAEIOU':\n                    adverbs.append(word)\n    return adverbs\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if is_adverb(word):\n            return i, i+1, word\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(text):\n    positions = []\n    for i in range(len(text)):\n        if text[i:i+5] == 'clearly':\n            positions.append((i,i+5,'clearly'))\n    return positions\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word in [\"clearly\", \"easily\", \"definitely\", \"possibly\"]:\n            return i, i + len(word), word\n    return -1, -1, \"\"\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Write a function to find all adverbs and their positions in a given sentence.\n\n    Arguments:\n    sentence -- a string\n\n    Returns:\n    a list of tuples with the position of the adverb and its text\n    \"\"\"\n\n    # Use regex to find all adverbs\n    matches = re.findall(r\"[\\w]+ly\", sentence)\n    \n    # Loop through matches and return positions\n    positions = []\n    for i in range(len(matches)):\n        positions.append((sentence.index(matches[i]), matches[i]))\n    \n    return positions", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    adverb_position = []\n    for i in range(len(sentence)):\n        if '!' in sentence and '!' == sentence[i]:\n            if sentence[i-1] != ' ':\n                adverb_position.append((i,i,'!'))\n        if '?' in sentence and '?' == sentence[i]:\n            if sentence[i-1] != ' ':\n                adverb_position.append((i,i,'?'))\n        if '>' in sentence and '>' == sentence[i]:\n            if sentence[i-1] != ' ':\n                adverb_position.append((i,i,'>'))\n        if '<' in sentence and '<' == sentence[i]:\n            if sentence[i-1] != ' ':\n                adverb_position.append((i,i,'<'))\n    return adverb_position\n\n\n# 8. Write a function that reverses a string.\n# assert reverse_string('w3resource')=='esuirced3w'\ndef reverse_string(str):\n    reverse_string = ''\n    for i in range(len(str)-1,-1,-1):\n        reverse_string += str[i]\n    return reverse_string\n\n\n# 9. Write a Python function that determines if a string is a pangram.\n#assert is_pangram('The quick brown fox jumps over the lazy dog.')\ndef is_pangram(sentence):\n    sentence = sentence.replace(' ', '').lower()\n    for i in range(97,123):\n        if chr(i) not in sentence:\n            return False\n    return True\n\n\n# 10. Write a Python program to find the sum of all items in a dictionary.\n# assert sum_dict({1:10, 2:20}) == 30\ndef sum_dict(my_dict):\n    sum = 0\n    for i in my_dict:\n        sum += my_dict[i]\n    return sum\n\n\n# 11. Write a Python program to remove key name from a dictionary.\n# assert remove"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n#%%\ndef surfacearea_cube(side):\n    return 6*side**2\n\n\n#%% [markdown]", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\nimport pytest\nfrom hw6_sol import surfacearea_cube, surfacearea_cube_orig\n\ndef test_surfacearea_cube_1():\n    assert surfacearea_cube(5) == 150\n\ndef test_surfacearea_cube_2():\n    assert surfacearea_cube(3) == 21\n\ndef test_surfacearea_cube_3():\n    assert surfacearea_cube(2) == 12\n\ndef test_surfacearea_cube_4():\n    assert surfacearea_cube(1) == 6\n\ndef test_surfacearea_cube_5():\n    assert surfacearea_cube(0) == 0\n\ndef test_surfacearea_cube_6():\n    assert surfacearea_cube(100) == 15000\n\ndef test_surfacearea_cube_orig_1():\n    assert surfacearea_cube_orig(5) == 150\n\ndef test_surfacearea_cube_orig_2():\n    assert surfacearea_cube_orig(3) == 21\n\ndef test_surfacearea_cube_orig_3():\n    assert surfacearea_cube_orig(2) == 12\n\ndef test_surfacearea_cube_orig_4():\n    assert surfacearea_cube_orig(1) == 6\n\ndef test_surfacearea_cube_orig_5():\n    assert surfacearea_cube_orig(0) == 0\n\ndef test_surfacearea_cube_orig_6():\n    assert surfacearea_cube_orig(100) == 15000\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side_length):\n    return 6 * side_length * side_length\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    area = 6*side**2\n    return area", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n# 10", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(a):\n    s = 6*a**2\n    return s\n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(length):\n    return length**2*6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(edge_length):\n    return (6 * edge_length**2)\n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n#import math\n#def surfacearea_cube(side_length):\n#    \"\"\"\n#    side_length: (int or float)\n#    \"\"\"\n#    return 6*(side_length**2)\n\n# Alternative solution 1\ndef surfacearea_cube(side_length):\n    \"\"\"\n    side_length: (int or float)\n    \"\"\"\n    return 6*side_length**2\n\n# Alternative solution 2\n#def surfacearea_cube(side_length):\n#    \"\"\"\n#    side_length: (int or float)\n#    \"\"\"\n#    return (6*side_length**2)\n\ndef surfacearea_cube(side_length):\n    \"\"\"\n    side_length: (int or float)\n    \"\"\"\n    return 6*side_length**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n# 150\n\ndef surfacearea_cube(num):\n\treturn num**2 * 6\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    count_pos = 0\n    for i in nums:\n        if i >= 0:\n            count_pos+=1\n    return count_pos/len(nums)\n\npositive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\n#Solution\ndef positive_count(num_array):\n    positive_numbers=0\n    for number in num_array:\n        if number>0:\n            positive_numbers+=1\n    return positive_numbers/len(num_array)\n\n#Tests", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(array):\n  count = 0\n  for x in array:\n    if x>0:\n      count += 1\n  return (count/len(array))\n\ndef positive_count_v2(array):\n  count = 0\n  for x in array:\n    count += 1 if x>0 else 0\n  return (count/len(array))\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    return sum([int(i) for i in arr if i > 0])/sum([int(i) for i in arr])\n\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    positive = 0\n    for x in arr:\n        if x > 0:\n            positive += 1\n    return positive / len(arr)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(array):\n    # Your code goes here\n    positive_count = 0\n    for number in array:\n        if number > 0:\n            positive_count += 1\n    return positive_count / len(array)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(array):\n    count = 0\n    for i in array:\n        if i >= 0:\n            count += 1\n    return count / len(array)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(array):\n    positive = 0\n    negative = 0\n    for num in array:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n    return positive/negative\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\nfrom typing import List\n\ndef largest_neg(nums: List[int]) -> int:\n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] < 0:\n            return nums[i]\n    return 0\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(L):\n    \"\"\" returns largest negative number in L \"\"\"\n    L = [x for x in L if x < 0]\n    if len(L) > 0:\n        return min(L)\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(list):\n    negative_numbers = list(filter(lambda x: x < 0, list))\n    negative_numbers.sort(reverse=True)\n    return negative_numbers[0]\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(nums):\n    largest = None\n    for i in range(len(nums)):\n        if nums[i] < 0 and (largest is None or nums[i] > largest):\n            largest = nums[i]\n    return largest\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(L):\n    return max(L) if max(L) < 0 else 0\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(list_of_numbers):\n    return max(list_of_numbers, key = lambda x: x if x < 0 else 0)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(list_of_numbers):\n    return max([x for x in list_of_numbers if x < 0])\n\n\n# +\n# Write a python function to find the highest ranked number from the given list.\n# Ranking of a number is its position in the sorted list.\n\ndef highest_ranked(list_of_numbers):\n    return max(sorted(list_of_numbers))\n\n\n# +\n# Write a python function to print the n smallest elements from a list.\n# assert smallest(list_of_numbers, 3) == [3,4,5]\n# assert smallest(list_of_numbers, 6) == [1,2,3,4,5,6]\n# assert smallest(list_of_numbers, 0) == []\n\ndef smallest(list_of_numbers, n):\n    return sorted(list_of_numbers)[:n]\n\n\n# +\n# Write a python function to print the n largest elements from a list.\n# assert largest(list_of_numbers, 3) == [5,6,7]\n# assert largest(list_of_numbers, 6) == [7,8,9,10,11,12]\n# assert largest(list_of_numbers, 0) == []\n\ndef largest(list_of_numbers, n):\n    return sorted(list_of_numbers)[-n:]\n\n\n# +\n# Write a python function to replace all the occurrences of an element in a list with another element.\n\n# assert replace(list_of_numbers, 1, 0) == [0,2,3,4,5,0,0,0]\n# assert replace(list_of_numbers, 11, 0) == [1,2,3,4,5,6,7,8,9,10,12]\n\ndef replace(list_of_numbers, old, new):\n    return [new if x == old else x for x in list_of_numbers]\n\n\n# +\n# Write a python function to find the", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\nfrom nose.tools import assert_equal\n\n\ndef largest_neg(nums):\n    \"\"\"\n    Determine the largest negative number in a list.\n    :param nums: list of integers\n    :return: largest negative number in list\n    \"\"\"\n    neg_nums = [n for n in nums if n < 0]\n    if not neg_nums:\n        return None\n    return max(neg_nums)\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(l):\n    \"\"\"\n    Return the largest negative number in the list l or None if the list contains no negative numbers.\n    \"\"\"\n    return min(l, key=abs)\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    return [tuple(i[-k:]) for i in tuples]", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    return list(map(lambda x: x[k:], tuple_list))\n\n# assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n# assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)]'\n# assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 0) == '[(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)]'\n# assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5),", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nfrom typing import List, Tuple\n\ndef trim_tuple(tuples: List[Tuple[int]], k: int) -> List[Tuple[int]]:\n    for i in range(len(tuples)):\n        tuples[i] = tuple(tuples[i][:k])\n    return tuples\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    tuple_list = [tuple(sorted(tuple(x)[-k:])) for x in tuple_list]\n    return tuple_list\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\n# Solution\ndef trim_tuple(tuples, k):\n    return [tuple(t[k:]) for t in tuples]\n\n\n# Tests", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\n# function that returns a new tuple\ndef trim_tuple(tuples, k):\n    # create a new tuple\n    result = []\n\n    # for loop through tuple and trim by k\n    for tup in tuples:\n        result.append(tuple(tup[:k]))\n\n    return result\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\n# Solution 1: loop through the list\ndef trim_tuple(tup_list, k):\n  trimmed_list = []\n  for tup in tup_list:\n    trimmed_list.append(tup[k:])\n  return str(trimmed_list)\n\n# Solution 2: slice the list\ndef trim_tuple(tup_list, k):\n  return str([tuple(tup[k:]) for tup in tup_list])\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    # Write your code here\n    return list(map(lambda x: tuple(x[:k]), tuples))\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(input_tuple_list, k):\n  return [tuple(tuple[k:]) for tuple in input_tuple_list]\n\n\n# + id=\"O4H8cH461-pt\"", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tup_list, k):\n    new_list = []\n    for x in tup_list:\n        new_list.append(tuple(x[k:]))\n    return new_list\n\n\n# test case"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple_a, tuple_b):\n    \"\"\"\n    Multiplying tuple elements in the tuple with indexes same in tuple\n    \"\"\"\n    length = len(tuple_a)\n    result = ()\n\n    for i in range(length):\n        a_index = tuple_a[i]\n        b_index = tuple_b[i]\n        result += (a_index * b_index,)\n\n    return result\n\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    a = []\n    for i in range(len(tuple1)):\n        a.append(tuple1[i] * tuple2[i])\n    return tuple(a)\n\n\n# +", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n# Solution:-\ndef index_multiplication(tup1, tup2):\n    return tuple(i[0]*i[1] for i in zip(tup1, tup2))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    result = ()\n    for i in range(len(tuple1)):\n        result = result + ((tuple1[i][0] * tuple2[i][0], tuple1[i][1] * tuple2[i][1]),)\n    return result\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    zipped_list = list(zip(tup1, tup2))\n    for i, _ in enumerate(zipped_list):\n        zipped_list[i] = (zipped_list[i][0][i] * zipped_list[i][1][i], )\n    return tuple(x for pair in zipped_list for x in pair)\n\n\nindex_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n\n\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(a,b):\n    pass\n\ndef main():\n    print(\"Example:\")\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1)) ) == ((6, 21), (12, 45), (2, 9))\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9)) ) == ((6, 21), (12, 45))\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7)) ) == ((6, 21))\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),() ) == ()\n    print(\"Coding complete? Click", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tup1,tup2):\n    newtup = []\n    for i in range(len(tup1)):\n        newtup.append((tup1[i][0]*tup2[i][0],tup1[i][1]*tup2[i][1]))\n    return newtup\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    l1=len(tuple1)\n    l2=len(tuple2)\n    index=0\n    while index<l1:\n        tuple1[index]=tuple1[index]*tuple2[index]\n        index+=1\n    return tuple1\n\ndef index_multiplication(tuple1, tuple2):\n    result = tuple(a*b for a, b in zip(tuple1, tuple2))\n    return result\n\n\n# -\n\n# <h3>Question 2</h3>\n# Write a Python program to create all possible permutations from a given collection of distinct numbers.\n\n# +", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tup1, tup2):\n    return tuple( [ tup1[i] * tup2[i] for i in range(len(tup1)) ] )\n\n\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tup1,tup2):\n    res = []\n    for index in range(len(tup1)):\n        res.append(tup1[index][0] * tup2[index][0], tup1[index][1] * tup2[index][1])\n    return tuple(res)\n\n\nindex_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\nfrom collections import Counter\ndef count_Occurrence(tup,list_1):\n    #enter code here\n    return Counter(tup).most_common()\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tuple,list):\n    result = 0\n    for i in list:\n        result += tuple.count(i)\n    return result\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list1,list2):\n\tcount = 0\n\tfor i in list2:\n\t\tif i in list1:\n\t\t\tcount += list1.count(i)\n\treturn count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple, list):\n    \"\"\"\n    Args:\n        tuple: a tuple of elements\n        list: a list of elements\n    Returns:\n        return the occurrence of all elements of list in the tuple\n    \"\"\"\n    count=0\n    for ele in list:\n        count=count+tuple.count(ele)\n    return count", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup,lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(l,t):\n    return sum(l.count(i) for i in t)", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(lst,tup):\n    count = 0\n    for i in tup:\n        for j in lst:\n            if i == j:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup, list):\n    count = 0\n    for i in list:\n        if i in tup:\n            count += tup.count(i)\n        else:\n            count += 0\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup,L):\n    sum=0\n    for i in L:\n        sum += tup.count(i)\n    return sum\n\ntup = ('a', 'a', 'c', 'b', 'd')\nL = ['a', 'b']", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n# unpacking arguments\ndef count_Occurrence(*args, **kwargs):\n    result = dict()\n    for arg in args:\n        if arg in result:\n            result[arg] = result[arg]+1\n        else:\n            result[arg] = 1\n    for key, val in kwargs.items():\n        if val in result:\n            result[val] = result[val]+1\n        else:\n            result[val] = 1\n    return result\n\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n#Solution: -\ndef cube_nums(nums):\n\treturn list(map(lambda x:x**3,nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ncube_nums = lambda l: [x**3 for x in l]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\nfrom operator import mul\ncube = lambda x: mul(x, x, x)\ndef cube_nums(lst):\n    return list(map(cube, lst))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n  return list(map(lambda x: x**3, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ncube_nums = lambda l: list(map(lambda x: x**3, l))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    cube=lambda x:x**3\n    return map(cube,nums)", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda n: n**3, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ncube_nums = lambda l: [x ** 3 for x in l]\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn (n*(n+1)*(2*n+1))/6\n\ndef test_cal_sum():\n\tassert cal_sum(9) == 49\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    ans = 0\n    for i in range(1, n+1):\n        ans += (i*(i+1))//2\n    return ans\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n < 2:\n        return 0\n    return 1 + n + cal_sum(n-2)\n\ndef test_cal_sum():\n    assert cal_sum(9) == 49\n\n# for test\n#test_cal_sum()\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\nimport math\n\n\ndef cal_sum(n):\n    return n*(n+1)*(2*n+1)//6\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += (i * i - 1)\n        else:\n            sum += (i * i)\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    # \u521d\u503c\n    result = n\n    for i in range(2,n+1):\n        result += i\n    return result\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n\tif n <= 1:\n\t\treturn 1\n\telse:\n\t\treturn n + cal_sum(n-1)\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    # write your code here\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/(2 * i + 1) + 1/(2 * i - 1)\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if (abs(x1-x2) < x3 and abs(x1-x3) < x2) or (abs(x2-x3) < x1 and abs(x2-x1) < x3) or (abs(x3-x1) < x2 and abs(x3-x2) < x1):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n#%%\n#Solution\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    \"\"\"Check if the triangle satisfies the inequality\n    x1**2 + y1**2 >= x2**2 + y2**2\n    x1**2 + y1**2 >= x3**2 + y3**2\n    x2**2 + y2**2 >= x3**2 + y3**2\n    \"\"\"\n    if x1**2 + y1**2 >= x2**2 + y2**2 and x1**2 + y1**2 >= x3**2 + y3**2 and x2**2 + y2**2 >= x3**2 + y3**2:\n        return \"Yes\"\n    return \"No\"", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(p1, p2, p3, q1, q2, q3):\n    if p1 + p2 > p3 and p1 + p3 > p2 and p2 + p3 > p1 and q1 + q2 > q3 and q1 + q3 > q2 and q2 + q3 > q1:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if (x1 + x2 > x3) and (x2 + x3 > x1) and (x3 + x1 > x2):\n        if (y1 + y2 > y3) and (y2 + y3 > y1) and (y3 + y1 > y2):\n            if ((x1 == x2) and (x2 == x3) and (x3 == x1)) or ((y1 == y2) and (y2 == y3) and (y3 == y1)):\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n\n# Test Cases", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    return \"Yes\" if (x1 < (x2 + x3) and y1 < (y2 + y3)) else \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\nfrom math import sqrt\n\ndef check_Triangle(a, b, c, d, e, f):\n    if a + b <= c or c + d <= e or e + f <= b:\n        return 'No'\n    if a >= c + d + e:\n        return 'No'\n    if b >= a + c + e or b >= a + c + f or b >= a + d + f:\n        return 'No'\n    if c >= a + b + d:\n        return 'No'\n    if d >= a + b + c or d >= a + b + e or d >= a + c + e:\n        return 'No'\n    if e >= a + b + c or e >= b + c + d or e >= a + c + d:\n        return 'No'\n    if f >= a + b + d or f >= a + b + e or f >= b + c + e:\n        return 'No'\n    return 'Yes'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n  if ((x1 + y1) > (x2 + y2) + (x3 + y3)) and ((x2 + y2) > (x3 + y3) + (x1 + y1)) and ((x3 + y3) > (x1 + y1) + (x2 + y2)):\n    return 'Yes'\n  else:\n    return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\n# %% [markdown]\n# ### Test 2\n# Write a python function to return the string \"Yes\" if the sum of the angles of a triangle is 180 degrees.\n\n# %%", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    # write your logic here\n    if (x1 + y2 > x3 and x1 + y3 > x2 and x2 + y3 > x1) and (x1 == x2 == x3) and (y1 == y2 == y3):\n        return 'Yes'\n    else:\n        return 'No'\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list_values ,size):\n    new_list = []\n    for i in list_values:\n        if len(i) >= size:\n            new_list.append(i)\n    return new_list\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\nimport pytest\n\n\ndef extract_string(arr, num):\n    return [i for i in arr if len(i) == num]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(str_lst ,size):\n    new_lst = []\n    for s in str_lst:\n        if len(s) == size:\n            new_lst.append(s)\n    return new_lst", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n#extract_string(['Python', 'list', 'exercises', 'practice', 'solution'],8)==['practice', 'solution']\n\n#solution 1\ndef extract_string1(string_list, num):\n\treturn string_list[num:]\n\n#solution 2\ndef extract_string2(string_list, num):\n\treturn string_list[-num:]\n\n#solution 3\ndef extract_string3(string_list, num):\n\tstring_list = string_list[num:]\n\tstring_list = string_list[:-num]\n\treturn string_list\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n#code\ndef extract_string(List_str , n ):\n    List_str = list(List_str)\n    str_len = 0\n    ret_list = []\n    for i in List_str:\n        str_len += len(i)\n        if str_len > n:\n            ret_list.append(i)\n            break\n        else:\n            ret_list.append(i)\n    return ret_list\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(str_list, number_of_char):\n  return [s[:number_of_char] for s in str_list]\n  ", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, size):\n    return [i[0:size] for i in lst]\n    ", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst,n):\n    return [i for i in lst if len(i) == n]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(str_list, n):\n    return str_list[n:]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list_of_strings, num):\n    \"\"\"\n    This function extracts specified number of strings from a list of string.\n    :param list_of_strings: List of strings\n    :param num: Number of strings to be extracted\n    :return: Extracted list of strings\n    \"\"\"\n    return_list = []\n    if len(list_of_strings) == 0 or num == 0:\n        return return_list\n\n    for i in range(len(list_of_strings)):\n        if len(list_of_strings[i]) <= num:\n            return_list.append(list_of_strings[i])\n        else:\n            return_list.append(list_of_strings[i][0:num])\n    return return_list\n\n\n# -\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s', '', string)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(sentence):\n    return re.sub(r'\\s+', '', sentence)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(str):\n    return str.replace(\" \", \"\")\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\n\ndef remove_whitespaces(str):\n    return re.sub(r'\\s', '', str)\n\n\n# Tests", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    # write your logic here\n    return re.sub(r\"\\s+\", \"\", string)\n\n\n# Run Tests\ntest(remove_whitespaces(' Google    Flutter '), 'GoogleFlutter')\ntest(remove_whitespaces('Google Flutter'), 'GoogleFlutter')\ntest(remove_whitespaces('G   F'), 'GF')\ntest(remove_whitespaces('  '), '')\n\n# Add your own tests here\n\n\n# When your solution is correct, these should print True:", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nfrom functools import partial\n\nimport pytest\n\nimport python_koans.about_strings as strings\n\n\ndef test_removing_whitespace():\n    assert strings.remove_whitespaces(\"Hello World\") == \"HelloWorld\"\n    assert strings.remove_whitespaces(\"  Google    Flutter   \") == \"GoogleFlutter\"\n    assert strings.remove_whitespaces(\"  \") == \"\"\n\n\ndef test_removing_whitespace_using_string_method():\n    assert strings.remove_whitespaces_using_string_method(\"Hello World\") == \"HelloWorld\"\n    assert strings.remove_whitespaces_using_string_method(\"  Google    Flutter   \") == \"GoogleFlutter\"\n    assert strings.remove_whitespaces_using_string_method(\"  \") == \"\"\n\n\ndef test_removing_whitespace_using_regex():\n    assert strings.remove_whitespaces_using_regex(\"Hello World\") == \"HelloWorld\"\n    assert strings.remove_whitespaces_using_regex(\"  Google    Flutter   \") == \"GoogleFlutter\"\n    assert strings.remove_whitespaces_using_regex(\"  \") == \"\"\n\n\ndef test_removing_whitespace_using_replace():\n    assert strings.remove_whitespaces_using_replace(\"Hello World\") == \"HelloWorld\"\n    assert strings.remove_whitespaces_using_replace(\"  Google    Flutter   \") == \"GoogleFlutter\"\n    assert strings.remove_whitespaces_using_replace(\"  \") == \"\"\n\n\n@pytest.mark.parametrize(\"string,expected\", [\n    (\"Hello World\", \"HelloWorld\"),\n    (\"  Google    Flutter   \", \"GoogleFlutter\"),\n    (\"  \", \"\")\n])\ndef test_removing_whitespace_parametrized_with_strings(string, expected):\n    assert strings.remove_whitespaces(string) == expected\n\n\n@pytest.mark.parametrize(\"string,expected\", [\n    (\"Hello World\", \"HelloWorld\"),\n    (\"  Google    Flutter   \", \"GoogleFlutter\"),\n    (\"  \", \"\")\n])\ndef test_removing_whitespace_parametrized_with_strings_using"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,limit):\n  if (amount-limit)<0:\n    return amount-limit\n  else:\n    return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(f_amount,c_amount):\n    return None if f_amount > c_amount else (c_amount - f_amount)\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(original,amount):\n    if original<amount:\n        return amount-original\n    else:\n        return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(actual,amount):\n    if actual-amount>0:\n        return actual-amount\n    else:\n        return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\nimport sys\ndef loss_amount(given_amount, actual_amount):\n    if given_amount>actual_amount:\n        return given_amount-actual_amount\n    return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(earning,expense):\n\tloss=earning-expense\n\tif loss>0:\n\t\treturn loss\n\telse:\n\t\treturn None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(a,b):\n    loss=a-b\n    if loss<0:\n        return loss\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(expected,actual):\n    if expected < actual:\n        return actual-expected\n    else:\n        return None\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            sum = sum + i\n\n    return sum\n\ndef sumofEven(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n%i == 0 and i%2 == 0:\n            sum = sum + i\n\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    sum = 0\n    for i in range(2, n):\n        if n % i == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    sum = 0\n    if num % 2 == 0:\n        sum = 2\n    for i in range(3, num//2 + 1, 2):\n        if num % i == 0:\n            sum += i\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    return sum(x for x in range(1,num+1) if num % x == 0 and x % 2 == 0)\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    total = 0\n    i = 1\n    while i < n:\n        if n % i == 0 and i % 2 == 0:\n            total = total + i\n        i += 1\n    return total\n\n# print sumofFactors(18)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(number):\n    \"\"\"\n    A function that takes a number and returns the sum of the even factors of that number.\n    \"\"\"\n    factors = []\n    for i in range(1, number+1):\n        if number%i == 0:\n            factors.append(i)\n    evenfactors = []\n    for i in factors:\n        if i%2 == 0:\n            evenfactors.append(i)\n    return sum(evenfactors)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    # Your code here\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            sum = sum + i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n  sum = 0\n  for i in range(1, num):\n    if num % i == 0:\n      sum += i\n  return sum\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'No match'\n\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    \"\"\"\n    Check whether a text contains the word 'z' and return a message.\n    \"\"\"\n    if 'z' in text:\n        return('Found a match!')\n    else:\n        return('Didn\\'t find a match.')\n\ntext_match_wordz(\"pythonz.\")", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n  return \"Found a match!\" if 'z' in text.lower() else \"No match.\"", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    result = re.search(r'\\bz\\b',text)\n    if result:\n        return 'Found a match!'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'pythonz\\.'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n# \"\"\"\n# Write a function that matches a word containing 'z'.\n# assert text_match_wordz(\"pythonz\")==('Did not find a match.')\n# \"\"\"\n\n# 3", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    return 'No match found.'\n\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'Did not find a match'\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb==1 or monthnumb==3 or monthnumb==5 or monthnumb==7 or monthnumb==8 or monthnumb==10 or monthnumb==12:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumber):\n  if monthnumber==1 or monthnumber==3 or monthnumber==5 or monthnumber==7 or monthnumber==8 or monthnumber==10 or monthnumber==12:\n    return True\n  else:\n    return False\n\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\nfrom datetime import date\n\ndef check_monthnumb_number(month_numb):\n    current_date = date.today()\n    if (month_numb == current_date.month):\n        if (current_date.day > 31):\n            return False\n        else:\n            return True\n    else:\n        return True\n\n# tests", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumber):\n    if monthnumber == 1 or monthnumber == 3 or monthnumber == 5 or monthnumber == 7 or monthnumber == 8 or monthnumber == 10 or monthnumber == 12:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(number):\n    try:\n        number = int(number)\n    except ValueError:\n        print(\"Error, this is not a number\")\n        return False\n    else:\n        return number in [1, 3, 5, 7, 8, 10, 12]\n\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n# %%\ndef check_monthnumb_number(monthnumber):\n    return monthnumber in [1, 3, 5, 7, 8, 10, 12]\n\n\n# %%\ncheck_monthnumb_number(3)\n\n# %%\ncheck_monthnumb_number(2)\n\n# %%\ncheck_monthnumb_number(1)\n\n# %% [markdown]\n# ### **10. Write a function that returns the next day of the week for the given date (for example, for a given \u201c2019-02-10\u201d, the function returns \u201c2019-02-11\u201d)**\n#\n#\n#\n#\n# -\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_numb):\n    months = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n    # months = (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n    return months[month_numb-1]\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumber):\n    if monthnumber in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnumber in [4, 6, 9, 11]:\n        return False\n    else:\n        return 'Check your month number'\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month_numb):\n    if month_numb == 2 or month_numb == 4 or month_numb == 6 or month_numb == 9 or month_numb == 11:\n        return True\n    elif month_numb == 1 or month_numb == 3 or month_numb == 5 or month_numb == 7 or month_numb == 8 or month_numb == 10 or month_numb == 12:\n        return False\n    else:\n        return False\n\ndef test_check_monthnumb_number():\n    assert check_monthnumb_number(5)==True\n    assert check_monthnumb_number(4)==False\n    assert check_monthnumb_number(7)==True\n    assert check_monthnumb_number(11)==True\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(n):\n\t\"\"\"\n\t:param n: the number of month\n\t:return: True if the number of month has 31 days, otherwise return False\n\t\"\"\"\n\treturn n in {4, 6, 9, 11}\n\ndef find_holiday(date):\n\t\"\"\"\n\t:param date: a string date\n\t:return: 1 if it is a holiday, 0 if it is not a holiday\n\t\"\"\"\n\tif date in holidays:\n\t\treturn 1\n\telse:\n\t\treturn 0\n\ndef check_invalid(date):\n\t\"\"\"\n\t:param date: a string date\n\t:return: True if the date is invalid, otherwise return False\n\t\"\"\"\n\tif len(date) != 10:\n\t\treturn True\n\telse:\n\t\tyear, month, day = map(int, date.split('-'))\n\t\tif year != 2016 or month not in range(1, 13) or day not in range(1, 32):\n\t\t\treturn True\n\t\tif check_monthnumb_number(month) and day == 31:\n\t\t\treturn True\n\t\treturn False\n\ndef add_prefix(date, prefix):\n\t\"\"\"\n\t:param date: a string date\n\t:param prefix: the prefix to be added to the date\n\t:return: the date with a prefix\n\t\"\"\"\n\tyear, month, day = date.split('-')\n\treturn prefix + year + '-' + month + '-' + day\n\ndef remove_prefix(date):\n\t\"\"\"\n\t:param date: a string date\n\t:return: a date without a prefix\n\t\"\"\"\n\treturn date[3:]\n\ndef is_prefixed(date):\n\t\"\"\"\n\t:param date: a string date\n\t:return: True if the date is prefixed, otherwise return False\n\t\"\"\"\n\treturn date[:3] == 'H-'\n\ndef replace_prefix(date, newprefix):\n\t\"\"\"\n\t:param date: a string date\n\t:param newprefix:"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    reversed_list = list()\n    for x in string_list:\n        reversed_list.append(x[::-1])\n    return reversed_list\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(input_list):\n    return [input_string[::-1] for input_string in input_list]\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(l):\n    newlist = []\n    for x in l:\n        newlist.append(x[::-1])\n    return newlist\n\n# Testing", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n# a = ['Red', 'Green', 'Blue', 'White', 'Black']\n# a[1] = 'Green'\n# print(a)\n\n# a = ['Red', 'Green', 'Blue', 'White', 'Black']\n# a = a[::-1]\n# print(a)\n\n\ndef reverse_string_list(string_list):\n    return string_list[::-1]\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    reverse_list = []\n    for string in string_list:\n        reverse_list.append(string[::-1])\n    return reverse_list\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(l):\n    new_l=[]\n    for i in l:\n        new_l.append(i[::-1])\n    return new_l\n\n# test case", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(list_of_strings):\n    list_of_new_strings = []\n    for s in list_of_strings:\n        list_of_new_strings.append(s[::-1])\n    return list_of_new_strings\n\n# test", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(values):\n\treturn [v[::-1] for v in values]", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list_of_string):\n  return [\"\".join(reversed(x)) for x in list_of_string]\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(a):\n    m = len(a[0])\n    index = 0\n    for i in range(len(a)):\n        if len(a[i])<m:\n            m = len(a[i])\n            index = i\n    return a[index]\n\ndef Find_Min_2(a):\n    m = 0\n    index = 0\n    for i in range(len(a)):\n        if len(a[i])<m or m==0:\n            m = len(a[i])\n            index = i\n    return a[index]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(array):\n    min_length = len(array[0])\n    for sublist in array:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n    return min_list\n\n# Find_Min([[1],[1,2],[1,2,3]]) == [1]\n# Find_Min([[3,2,1,5],[1,2,3,4]]) == [3,2,1,5]\n# Find_Min([[1,2],[1,2,3],[1,2,3,4]]) == [1,2]\n# Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4,5]]) == [1,2,3]\n# Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6]]) == [1,2,3,4,5]\n# Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3,4,5,6,7]]) == [1,2,3,4,5,6]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(arr):\n    min_len = len(arr[0])\n    for i in arr:\n        if len(i) < min_len:\n            min_len = len(i)\n    return [i for i in arr if len(i) == min_len]", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef find_min(list_list):\n    min_len = len(list_list[0])\n    index = 0\n    for i in range(len(list_list)):\n        if len(list_list[i]) < min_len:\n            min_len = len(list_list[i])\n            index = i\n    return list_list[index]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(l):\n    \"\"\"\n    :param l: list of list\n    :return: list\n    \"\"\"\n    min_length = len(l[0])\n    min_list = []\n    for i in range(len(l)):\n        if len(l[i]) < min_length:\n            min_length = len(l[i])\n            min_list = l[i]\n    return min_list\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    # your code here\n    min_length = 1000000000\n    min_list = []\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n            min_list = l\n    return min_list\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n#code\ndef Find_Min(L):\n    \"\"\"returns the list with minimum length\"\"\"\n    if len(L) == 0:\n        return []\n    min_val = len(L[0])\n    min_ind = 0\n    for i in range(len(L)):\n        if len(L[i]) < min_val:\n            min_val = len(L[i])\n            min_ind = i\n    return L[min_ind]"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\nimport math\ndef rectangle_area(width, height):\n    return width * height\n\ndef area(length, width):\n    return length * width\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n# Define a function here\n\ndef rectangle_area(length,width):\n    area = length * width\n    return area\n    \n# Uncomment these function calls to test your tip function\n#print(rectangle_area(10,20))\n#print(rectangle_area(15,25))\n#print(rectangle_area(2,4))\n\n# Write an assert statement here to make sure your function is correct\n#assert rectangle_area(10,20)==200\n#assert rectangle_area(15,25)==375\n#assert rectangle_area(2,4)==8\n\n# Make sure you are not using variables outside the scope of the function\n# Define a variable inside the function\n\n# Define a function here\n\ndef rectangle_area(length,width):\n    area = length * width\n    return area\n    \n# Uncomment these function calls to test your tip function\n#print(rectangle_area(10,20))\n#print(rectangle_area(15,25))\n#print(rectangle_area(2,4))\n\n# Write an assert statement here to make sure your function is correct\n#assert rectangle_area(10,20)==200\n#assert rectangle_area(15,25)==375\n#assert rectangle_area(2,4)==8\n\n# Write a function here\n\ndef rectangle_perimeter(length,width):\n    perimeter = 2 * (length + width)\n    return perimeter\n    \n# Uncomment these function calls to test your tip function\n#print(rectangle_perimeter(10,20))\n#print(rectangle_perimeter(15,25))\n#print(rectangle_perimeter(2,4))\n\n# Write an assert statement here to make sure your function is correct\n#assert rectangle_perimeter(10,20)==60\n#assert rectangle_perimeter(15,25)==60\n#assert rectangle_perimeter(2,4)==8\n\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length,width):\n    return length*width\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n\ndef rectangle_area2(width,height):\n    return width*height\n\n#assert rectangle_area2(2,3)==6\n\ndef sum_numbers(n):\n    if n==1:\n        return 1\n    return n+sum_numbers(n-1)\n\ndef sum_numbers2(n):\n    if n==1:\n        return 1\n    return n+sum_numbers2(n-1)\n\ndef is_even(num):\n    if num == 0:\n        return True\n    return is_odd(num-1)\n\ndef is_odd(num):\n    if num == 0:\n        return False\n    return is_even(num-1)\n\ndef is_palindrome(word):\n    return word==word[::-1]\n\n\ndef fib(num):\n    if num < 2:\n        return num\n    return fib(num-1)+fib(num-2)\n\ndef fact(num):\n    if num==1:\n        return 1\n    return num*fact(num-1)\n\ndef fib2(num):\n    if num < 2:\n        return num\n    a,b=1,1\n    for i in range(3,num+1):\n        a,b=b,a+b\n    return b\n\ndef fact2(num):\n    if num==1:\n        return 1\n    return num*fact2(num-1)\n\ndef fib3(num):\n    if num < 2:\n        return num\n    a,b=1,1\n    for _ in range(num):\n        a,b=b,a+b\n    return b\n\ndef fact3(num):\n    if num==1:\n        return 1\n    return num*fact3(num-1)\n\ndef multiply(num):\n    if num==0:\n        return 0\n    return num+multiply(num-1)\n\ndef multiply2(num):\n    if num==0:\n        return 0\n    return multiply2(num-1)+num\n\ndef multiply3(num):\n    if num==0:\n        return 0\n    return multiply3(num-1", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n#code\ndef rectangle_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(l,b):\n    return l*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width, height):\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\nfrom unit_test_common import _test, _test_raises\n\ndef rectangle_area(width,height):\n    if width < 0 or height < 0:\n        return -1\n    return width*height\n\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length,width):\n    return length*width\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(text):\n    return re.sub(r'[A-Z]+', '', text)", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\n# Solution\n\nimport re\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)\n\n# Tests\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    return re.sub(r\"[A-Z]+\", \"\", s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(input_string):\n    r = re.compile('[A-Z]+')\n    return r.sub('', input_string)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]+', '', string)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(string):\n    return re.sub(r'(?<=\\w)[A-Z]', '', string)", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(str):\n\treturn re.sub('^[A-Z]+', '', str)\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\nfrom typing import List\n\n\ndef extract(lst: List) -> List:\n    return [lst[i][0] for i in range(len(lst))]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    return [lst[i][0] for i in range(0, len(lst))]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    result = []\n    for sub in lst:\n        result.append(sub[0])\n    return result\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n#%%\n# Sample code\n\ndef extract(lst):\n    sublist_first_element = []\n    for sublist in lst:\n        sublist_first_element.append(sublist[0])\n    \n    return sublist_first_element\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\nfrom functools import reduce\n\ndef Extract(lst):\n    return reduce(lambda a,b: a + [b[0]], lst, [])\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    ans = []\n    for i in lst:\n        ans.append(i[0])\n    return ans\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n# %%", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    \"\"\"\n    function to get the first element of each sublist.\n    \"\"\"\n    return [x[0] for x in lst]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\nfrom typing import List\n\n# 1st solution, 3rd test\ndef extract_first(lst: List[List[int]]) -> List[int]:\n    output = []\n    for sublist in lst:\n        output.append(sublist[0])\n    return output\n\n\n# 2nd solution, 4th test\ndef extract_first_listcomp(lst: List[List[int]]) -> List[int]:\n    return [sublist[0] for sublist in lst]\n\n\n# 3rd solution, 1st test\ndef extract_first_lambda(lst: List[List[int]]) -> List[int]:\n    return map(lambda x: x[0], lst)\n\n\n# 4th solution, 2nd test\ndef extract_first_map(lst: List[List[int]]) -> List[int]:\n    return list(map(lambda x: x[0], lst))\n\n\n# 5th solution, 3rd test\ndef extract_first_enumerate(lst: List[List[int]]) -> List[int]:\n    return [x[0] for i, x in enumerate(lst)]\n\n\n# 6th solution, 4th test\ndef extract_first_generator(lst: List[List[int]]) -> List[int]:\n    return [x[0] for x in (map(lambda x: x[0], lst))]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\nfrom typing import List, Optional\n\n\ndef extract(arr: List[List[Optional[int]]]) -> List[Optional[int]]:\n    result = []\n    for a in arr:\n        result.append(a[0])\n    return result\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    return len([char for char in str if char.isupper()])\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\nfrom collections import Counter\ndef upper_ctr(a):\n    d = Counter(a)\n    l = []\n    for k,v in d.items():\n        if k.isupper():\n            l.append(v)\n    if l:\n        return max(l)\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(st):\n    return len([i for i in st if i.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    ctr = 0\n    for c in s:\n        if c.isupper():\n            ctr += 1\n    return ctr\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    return len([x for x in str if x.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    upper = 0\n    for letter in str:\n        if letter.isupper():\n            upper += 1\n    return upper\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\n#Method-1\ndef upper_ctr(str):\n    count = 0\n    for c in str:\n        if c == c.upper():\n            count += 1\n    return count\n\n#Method-2\ndef upper_ctr(str):\n    return str.upper().count(str)\n\n#Method-3\ndef upper_ctr(str):\n    count = 0\n    for c in str:\n        if c == c.upper():\n            count += 1\n    return count\n\n#Method-4\ndef upper_ctr(str):\n    return len([c for c in str if c.isupper()])\n\n#Method-5\ndef upper_ctr(str):\n    return str.upper().count(str)\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n    if len(l) <= 1:\n        return [[]]\n    combs = []\n    for c in combinations_list(l[1:]):\n        combs.append([l[0]] + c)\n        combs.append(c)\n    return combs\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(input_list):\n    if input_list == []:\n        return [[]]\n\n    current_element = input_list[0]\n    rest_of_list = input_list[1:]\n    rest_of_combinations = combinations_list(rest_of_list)\n\n    # Extracting all the combinations before current element\n    combinations_before = [c + [current_element] for c in rest_of_combinations]\n    # Extracting all the combinations after current element\n    combinations_after = [c for c in rest_of_combinations]\n\n    return combinations_before + combinations_after\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    def make_combinations_list(lst, accum):\n        if lst == []:\n            accum.append([])\n        else:\n            for i in range(len(lst)):\n                lst_copy = lst[:i] + lst[i+1:]\n                make_combinations_list(lst_copy, accum)\n                accum.append([lst[i]] + accum[-1])\n    accum = []\n    make_combinations_list(lst, accum)\n    return accum\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\nfrom itertools import combinations\n\ndef combinations_list(x):\n    return [list(i) for i in combinations(x,len(x))]\n\ndef combinations_list_recursive(x,n,ans=None):\n    if n==0:\n        if ans is None:\n            return [[]]\n        else:\n            ans.append([])\n            return ans\n    if ans is None:\n        ans = combinations_list_recursive(x,n-1)\n    else:\n        ans = combinations_list_recursive(x,n-1,ans)\n    for i in range(n):\n        ans.append(list(x[i])+ans[-1])\n    return ans\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\nfrom itertools import permutations\n\n\ndef combinations_list(l):\n    return [list(x) for x in permutations(l, len(l))]\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(a):\n  # returns a list of all possible combinations of a list\n  result = []\n\n  if not a:\n    return [[]]\n\n  for i in range(len(a)):\n    rest = combinations_list(a[:i] + a[i+1:])\n    result += [a[i:i+1] + x for x in rest]\n\n  return result\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\nimport itertools\ndef combinations_list(elements):\n    return list(itertools.permutations(elements))\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(list_1):\n\tcombs=[]\n\tn=len(list_1)\n\tfor i in range(1, n+1):\n\t\tcombs.append([list_1[j] for j in range(i)])\n\treturn combs\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n  if len(l)==1:\n    return [l, []]\n  else:\n    comb = []\n    comb_aux = combinations_list(l[1:])\n    for c in comb_aux:\n      comb.append([l[0]])\n      comb.append([l[0], c[0]])\n      comb.append([l[0]] + c)\n      comb.append([c[0]] + c)\n    return comb\n\n#assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\ndef combinations_list(l):\n  if len(l)==1:\n    return [l, []]\n  else:\n    comb = []\n    comb_aux = combinations_list(l[1:])\n    for c in comb_aux:\n      comb.append([l[0]])\n      comb.append([l[0], c[0]])\n      comb.append([l[0]] + c)\n      comb.append([c[0]] + c)\n    return comb\n\n#assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green',"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\nimport math\nfrom enum import Enum\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_prod = arr[0]\n    cur_prod = arr[0]\n    min_prod = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            cur_prod, min_prod = min_prod, cur_prod\n        cur_prod *= arr[i]\n        min_prod *= arr[i] if arr[i] > 0 else -arr[i]\n        max_prod = max(max_prod, cur_prod)\n\n    return max_prod\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(array):\n    prod = 0\n    max_prod = 0\n\n    for num in array:\n        prod *= num\n        prod += num\n\n        if prod < 0:\n            prod = 0\n\n        if prod > max_prod:\n            max_prod = prod\n\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(numbers):\n    max_product = None\n    max_ending_here = 1\n    start_index = 0\n    end_index = 0\n    for index, item in enumerate(numbers):\n        if item == 0:\n            max_ending_here = 1\n            start_index = index\n        else:\n            max_ending_here *= item\n            if max_ending_here < 0:\n                max_ending_here = 1\n                start_index = index + 1\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n            end_index = index\n    return numbers[start_index:end_index+1]\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom collections import deque\nfrom typing import List\n\n# Time: O(n)\n# Space: O(n)", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nimport collections\nimport random\n\nimport pytest\n\n\ndef max_subarray_product_slow(arr):\n    n = len(arr)\n    max_ending_here = max_so_far = arr[0]\n    min_ending_here = min_so_far = arr[0]\n    for i in range(1, n):\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_so_far * arr[i])\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_so_far * arr[i])\n        max_so_far = max(max_ending_here, max_so_far, min_so_far * arr[i])\n        min_so_far = min(min_ending_here, min_so_far, max_so_far * arr[i])\n    return max_so_far\n\n\ndef max_subarray_product_fast(arr):\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n    return max_so_far\n\n\n@pytest.mark.parametrize(\n    (\"arr\", \"expected_output\"),\n    [\n        ([1, 2, 3, 4, 5, 6, 7], 162),\n        ([-1, 2, 3, -4, 5, 6, -7", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(numbers):\n    if not numbers:\n        return 0\n    maximum_so_far = numbers[0]\n    minimum_so_far = numbers[0]\n    maximum_ending_here = numbers[0]\n    minimum_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        maximum_ending_here = max(\n            maximum_ending_here * numbers[i],\n            numbers[i],\n            minimum_ending_here * numbers[i],\n        )\n        minimum_ending_here = min(\n            maximum_ending_here * numbers[i],\n            numbers[i],\n            minimum_ending_here * numbers[i],\n        )\n        maximum_so_far = max(maximum_so_far, maximum_ending_here)\n        minimum_so_far = min(minimum_so_far, minimum_ending_here)\n    return maximum_so_far", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n\n\ndef max_subarray_product(nums: List[int]) -> int:\n    \"\"\"\n    # main idea:  for any subarray, to determine if it's a good subarray, we need to \n    # know if its sum is positive or negative\n    # and if it is, we need to know how big it is, so we need the max of its sum and the min of its sum\n    # and if it is negative, we need to know how small it is, so we need the min of its sum and the max of its sum\n    # so that's why we need to store min sum and max sum for each subarray\n    # then we need to know the max product of any subarray\n    # we can calculate the max product of any subarray in O(n) time by this formula: max_product = max(max_product * nums[i], min_product * nums[i], nums[i])\n    # and if max_product < 0, we will reset it to 1\n    # and if max_product > max_product_so_far, we will update max_product_so_far to max_product\n    \"\"\"\n    max_product = nums[0]\n    min_product = nums[0]\n    max_product_so_far = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            max_product = max(max_product * nums[i], nums[i])\n            min_product = min(min_product * nums[i], nums[i])\n        else:\n            max_product = max(min_product * nums[i], nums[i])\n            min_product = min(max_product * nums[i], nums[i])\n        max_product_so_far = max(max_product_so_far, max_product)\n    return max_product_so_far\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(array: List[int]) -> int:\n    max_product = array[0]\n    max_ending_here = array[0]\n    min_ending_here = array[0]\n    for i in range(1, len(array)):\n        max_ending_here = max(array[i], array[i] * max_ending_here, array[i] * min_ending_here)\n        min_ending_here = min(array[i], array[i] * max_ending_here, array[i] * min_ending_here)\n        max_product = max(max_product, max_ending_here)\n    return max_product\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\n# + id=\"4ImsRRFugb42\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(d, val):\n    for i in d:\n        if d[i] != val:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dict_object, value):\n    for i in dict_object.values():\n        if i == value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dic, val):\n    for val in dic.values():\n        if dic[val] != dic.values()[0]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(d,value):\n    # return all(x==value for x in d.values())\n    return all(x==value for x in d.values())\n    # return d.values() == value\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dic,x):\n    for i in dic.values():\n        if i!=x:\n            return False\n    return True\n        ", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary,value):\n    \"\"\"\n    Function to check if all values in a dictionary are the same\n    :param dictionary: dictionary to check\n    :param value: value to check for\n    :return: True if all values are the same\n    \"\"\"\n    # Loop over the dictionary values\n    for item in dictionary.values():\n        # If any value is not equal to the value given, return False\n        if item!=value:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\nimport pprint\ndef check_value(dict1,value):\n    for key,val in dict1.items():\n        if val != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(aDict,val):\n    for i in aDict.values():\n        if val!=i:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\nimport pytest\n\ndef drop_empty(d):\n    return dict([(k,v) for k,v in d.items() if v])\n\n\ndef test_drop_empty():\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dict):\n    return {k: v for k,v in dict.items() if v is not None}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\nimport unittest\n\ndef drop_empty(d):\n    d1 = dict((x, d[x]) for x in d if d[x] is not None)\n    return d1\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dic):\n    return {k:v for k,v in dic.items() if v}\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n# # Solution 1: Using dict comprehensions\n#\n# We will be using list comprehensions to filter out the empty items and make a new dictionary.\n#\n# ### Method 1\n\ndef drop_empty(input_dict):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {k:v for k, v in input_dict.items() if v}\n\n\ndrop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n\n# ### Method 2\n\n# We can use `filter()` to filter out the empty items\nlist(filter(None, [{'c1': 'Red', 'c2': 'Green', 'c3':None}]))\n\n\n# ## Solution 2: Using `dict.get()`\n#\n# We can also use `dict.get()` to return a default value when a key is not found.\n\ndef drop_empty(input_dict):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {k: v for k, v in input_dict.items() if input_dict.get(k)}\n\n\ndrop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n\n# ## Solution 3: Using `filter()`\n#\n# We can use `filter()` to filter out the empty items\n\nlist(filter(None, [{'c1': 'Red', 'c2': 'Green', 'c3':None}]))\n\n\n# ## Solution 4: Using `if` conditional\n#\n# We can also use `if` conditional to return an empty dictionary when the value of the", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    new_dict = { k:v for k,v in d.items() if v is not None }\n    return new_dict\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n#code\ndef drop_empty(d):\n    return {key:value for (key,value) in d.items() if value != None}\n#test", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dictionary):\n    new_dict = {}\n    for key, value in dictionary.items():\n        if value != None:\n            new_dict[key] = value\n    return new_dict\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return dict(filter(lambda kv: kv[1] is not None, d.items()))\n\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# using binary search\n\n\ndef find_peak(arr, n):\n    low = 0\n    high = n-1\n    while(low <= high):\n        mid = (low+high)/2\n        if arr[mid] > arr[mid+1]:\n            high = mid\n        elif arr[mid] < arr[mid+1]:\n            low = mid+1\n        else:\n            return mid\n    return low\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    left, right = 0, n-1\n    while left < right:\n        mid = left + (right-left)//2\n        if mid+1 < n and arr[mid] < arr[mid+1]:\n            left = mid+1\n        elif mid-1 >= 0 and arr[mid] < arr[mid-1]:\n            right = mid-1\n        else:\n            return mid\n    return right\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\nfrom typing import List\n\n\ndef find_peak(arr: List[int], n: int) -> int:\n    l, r = 0, n - 1\n\n    while l < r:\n        mid = (l + r) // 2\n        if arr[mid] > arr[mid + 1]:\n            r = mid\n        else:\n            l = mid + 1\n\n    return l\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nfrom typing import List\n\n\ndef find_peak(arr: List[int], n: int) -> int:\n    return find_peak_recursive(arr, 0, n - 1)\n\n\ndef find_peak_recursive(arr: List[int], start: int, end: int) -> int:\n    if start == end:\n        return start\n    mid: int = (start + end) // 2\n    if mid + 1 < end and arr[mid + 1] > arr[mid]:\n        return find_peak_recursive(arr, mid + 1, end)\n    if mid - 1 >= start and arr[mid - 1] > arr[mid]:\n        return find_peak_recursive(arr, start, mid - 1)\n    return mid\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nfrom typing import List\n\n\ndef find_peak(arr: List[int], length: int) -> int:\n    return _find_peak(arr, 0, length - 1)\n\n\ndef _find_peak(arr: List[int], start: int, end: int) -> int:\n    \"\"\"\n    We can find peak by using the following strategy:\n    If element at i is greater than arr[i + 1] and arr[i + 2], then it is the peak.\n    Otherwise, arr[i] is the peak.\n    This strategy is similar to binary search.\n    \"\"\"\n    if start == end:\n        return start\n    if end == start + 1:\n        return arr[start] if arr[start] >= arr[end] else arr[end]\n\n    # Find the middle index\n    middle = (start + end) // 2\n    # Check if middle index is a peak\n    if arr[middle] >= arr[middle - 1] and arr[middle] >= arr[middle + 1]:\n        return middle\n    # Check if left subarray has a peak\n    if arr[middle - 1] > arr[middle]:\n        return _find_peak(arr, start, middle - 1)\n    # Check if right subarray has a peak\n    return _find_peak(arr, middle + 1, end)\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# Function to find peak element in the given array\ndef find_peak(array, n):\n\t\"\"\"\n\t:param array: Array with elements\n\t:param n: Size of the array\n\t:return: Element of the array which is the peak\n\t\"\"\"\n\t# Finding the peak element in the array\n\tpeak_element = array[0]\n\tfor i in range(1, n):\n\t\tif array[i] > peak_element:\n\t\t\tpeak_element = array[i]\n\n\t# Returning the peak element\n\treturn peak_element\n\n\n# Main function to run the program\ndef main():\n\t# Getting the input from the user\n\tarray = list(map(int, input().split()))\n\tn = len(array)\n\n\t# Printing the result\n\tprint(find_peak(array, n))\n\n\n# Code to call main function", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\nfrom math import floor\n\n\ndef find_peak(arr, n):\n    # write your code here\n    if len(arr) == 0:\n        return -1\n    start = 0\n    end = n - 1\n\n    while start <= end:\n        mid = floor((start + end) / 2)\n        if mid == 0:\n            if arr[mid] > arr[mid + 1]:\n                return mid\n            else:\n                end = mid - 1\n\n        elif mid == n - 1:\n            if arr[mid] > arr[mid - 1]:\n                return mid\n            else:\n                start = mid + 1\n\n        else:\n            if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n                return mid\n            elif arr[mid] < arr[mid - 1]:\n                end = mid - 1\n            else:\n                start = mid + 1\n\n    return -1\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# Time complexity: O(logN)\n# Space complexity: O(1)\n\ndef find_peak(arr, n):\n    low = 0\n    high = n-1\n\n    while(low<=high):\n        mid = (low+high)//2\n        if arr[mid] > arr[mid+1]:\n            high = mid-1\n        else:\n            low = mid+1\n    return low\n\ndef main():\n    print(find_peak([1, 3, 20, 4, 1, 0], 6))\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    l, r = 0, n-1\n    while l <= r:\n        mid = (l+r)//2\n        if (mid == 0 or arr[mid-1] <= arr[mid]) and (mid == n-1 or arr[mid+1] <= arr[mid]):\n            return mid\n        elif (mid > 0 and arr[mid-1] > arr[mid]) or (mid < n-1 and arr[mid+1] > arr[mid]):\n            r = mid-1\n        else:\n            l = mid+1\n    return -1\n\ndef main():\n    print(find_peak([1, 3, 20, 4, 1, 0], 6))\n    print(find_peak([2, 1], 2))\n    print(find_peak([2, 1], 1))\n    print(find_peak([2, 1], 3))\n\nmain()"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n\tres = \"\"\n\twhile num != 0:\n\t\tres = str(num % 8) + res\n\t\tnum = num // 8\n\treturn res\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n\tif num<0:\n\t\treturn -1\n\tresult=0\n\twhile num>0:\n\t\tresult=result*10 + num%8\n\t\tnum=num//8\n\treturn result\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    return oct(num)\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    octal = \"\"\n    while n > 0:\n        rem = n % 8\n        n = n // 8\n        octal = str(rem) + octal\n    return octal\n\n# Driver program\ndecimal = 10", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\n# Code from https://www.geeksforgeeks.org/convert-decimal-number-octal/\n\n# Function to convert decimal to octal\ndef decimal_to_Octal(num):\n    base = 10\n    return oct(num)[2:]\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    if num >= 0:\n        return oct(num)\n    else:\n        return oct(num)[-1:]\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    result = 0\n    while n > 0:\n        result = (result * 10) + (n % 8)\n        n = n // 8\n    return result", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    if n == 0:\n        return 0\n    elif n <= 7:\n        return n\n    else:\n        return decimal_to_Octal(n/8) + n%8\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\nimport time\n\ndef decimal_to_Octal(num):\n    # Write your code here\n    result = 0\n    while num > 0:\n        result = result*10 + num%8\n        num = num//8\n    return result\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(array, length):\n    max_so_far = array[0]\n    min_so_far = array[0]\n    max_ending_here = array[0]\n    min_ending_here = array[0]\n    length = length - 1\n    for i in range(1, length):\n        min_ending_here = min(array[i], array[i] * min_ending_here, array[i] * max_ending_here)\n        max_ending_here = max(array[i], array[i] * min_ending_here, array[i] * max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n    return max_so_far\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, length):\n    \"\"\"\n    This function returns the maximum product of a subsequence of length \"length\" \n    in the array \"array\".\n\n    Parameters\n    ----------\n    array : array of integers\n        Input array.\n    length : int\n        Length of the subsequence.\n    \n    Returns\n    -------\n    int\n        Maximum product.\n    \"\"\"\n    \n    # Base case: length of subsequence is 1, the maximum product of length 1 \n    # subsequence is the maximum element in the array\n    if length == 1:\n        return max(array)\n\n    # If the length of the subsequence is less than 1, the maximum product of \n    # the subsequence is 0\n    if length < 1:\n        return 0\n\n    # Initialize the maximum product of the subsequence to the first element in \n    # the array\n    max_product = array[0]\n\n    # Initialize the minimum product of the subsequence to the first element in \n    # the array\n    min_product = array[0]\n\n    # For each element in the array, we update the maximum product of the \n    # subsequence as the maximum of the following:\n    # 1. Maximum product of the subsequence without the current element\n    # 2. The product of the subsequence without the current element and the\n    #    previous minimum product of the subsequence\n    for i in range(1, length):\n        temp = max_product\n        max_product = max(max_product * array[i], min_product * array[i], array[i])\n        min_product = min(temp * array[i], min_product * array[i], array[i])\n\n    # Return the maximum product of the subsequence\n    return max_product\n\n# Test function\narray = [3, 100, 4, 5, 150, 6]\nlength = 6", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\nfrom typing import List\ndef max_product(nums: List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    \n    max_ending_here = nums[n-1]\n    min_ending_here = nums[n-1]\n    \n    max_so_far = nums[n-1]\n    \n    for i in range(n-2, -1, -1):\n        if nums[i] > max_ending_here:\n            max_ending_here = nums[i]\n            min_ending_here = nums[i]\n        elif nums[i] < min_ending_here:\n            min_ending_here = nums[i]\n            \n        max_so_far = max(max_ending_here*min_ending_here, max_so_far)\n    return max_so_far", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(nums, n):\n    max_ending_here = nums[0]\n    min_ending_here = nums[0]\n    max_so_far = nums[0]\n\n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(nums[i], max_ending_here * nums[i], min_ending_here * nums[i])\n        min_ending_here = min(nums[i], temp * nums[i], min_ending_here * nums[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\n# using a prefix sum\ndef max_product(nums, l):\n    # Time O(n)\n    # Space O(1)\n    if not nums or l == 0: return 0\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 1\n    for i in range(l):\n        temp = max_ending_here\n        max_ending_here = max(min_ending_here * nums[i], max_ending_here * nums[i], nums[i])\n        min_ending_here = min(min_ending_here * nums[i], temp * nums[i], nums[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n# Time O(nlogn)\n# Space O(n)\ndef max_product_2(nums):\n    # Time O(nlogn)\n    # Space O(n)\n    if not nums: return 0\n    nums = sorted(nums)\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 1\n    for i in range(len(nums)):\n        temp = max_ending_here\n        max_ending_here = max(min_ending_here * nums[i], max_ending_here * nums[i], nums[i])\n        min_ending_here = min(min_ending_here * nums[i], temp * nums[i], nums[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n# Time O(n)\n# Space O(1)\ndef max_product_3(nums, l):\n    # Time O(n)\n    # Space O(1)\n    if not nums or l == 0: return 0\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\nfrom typing import List\n\n\ndef max_product(nums: List[int], window_size: int) -> int:\n    if not nums:\n        return 0\n\n    if len(nums) < window_size:\n        return max(nums)\n\n    start = 0\n    end = window_size - 1\n\n    max_value = nums[start] * nums[start + 1]\n\n    while end < len(nums):\n        current_product = nums[start] * nums[start + 1] * nums[start + 2] * nums[end]\n        max_value = max(max_value, current_product)\n\n        end += 1\n        start += 1\n\n    return max_value\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    if n == 0:\n        return None\n    max_so_far = arr[n - 1]\n    min_so_far = arr[n - 1]\n    result = max_so_far\n    for i in range(n - 2, -1, -1):\n        if arr[i] < 0:\n            temp = max_so_far\n            max_so_far = min_so_far\n            min_so_far = temp\n        max_so_far = max(arr[i] * max_so_far, arr[i])\n        min_so_far = min(arr[i] * min_so_far, arr[i])\n        result = max(result, max_so_far)\n    return result\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(numbers, window_size):\n    \"\"\"\n    :param numbers: a list of numbers\n    :param window_size: size of the subsequence\n    :return: maximum product obtained by multiplying the numbers in the increasing subsequence\n    \"\"\"\n    assert len(numbers) >= window_size, \"window size larger than array length\"\n\n    max_product = numbers[0]\n    min_product = numbers[0]\n\n    for i in range(window_size, len(numbers)):\n        max_product = max(max_product, max(numbers[i], max_product * numbers[i], min_product * numbers[i]))\n        min_product = min(min_product, min(numbers[i], max_product * numbers[i], min_product * numbers[i]))\n\n    return max_product", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, size):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    maximum = minimum = array[0]\n    maximum_product = minimum_product = array[0]\n    for i in range(1, size):\n        product = array[i] * maximum\n        maximum = max(array[i], maximum, minimum * array[i])\n        minimum = min(array[i], minimum, product / maximum)\n        maximum_product = max(maximum, maximum_product)\n        minimum_product = min(minimum, minimum_product)\n    return maximum_product"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nfrom heapq import heappush, heappop\n\n\ndef max_profit(prices: list, k: int) -> int:\n    prices.append(0)\n    profits = [0] * (k + 1)\n    hq = []\n    for price in prices:\n        heappush(hq, -price)\n        profits[len(hq) - 1] = -hq[0]\n    for i in range(1, k + 1):\n        profits[i] += profits[i - 1] + hq[0]\n        heappop(hq)\n    return max(profits)\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(arr, k):\n    min_price = min(arr[:k])\n    max_profit = arr[k] - min_price\n\n    for i in range(k, len(arr)):\n        min_price = min(min_price, arr[i])\n        max_profit = max(max_profit, arr[i] - min_price)\n\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    # TODO: Write your code here\n    max_profit = 0\n    if k >= len(prices):\n        return max(prices) - min(prices)\n    elif k == 0:\n        return max(prices) - min(prices)\n    else:\n        for i in range(0, len(prices)):\n            min_price = min(prices[i:])\n            max_price = max(prices[i:])\n            max_profit = max(max_profit, max_price - min_price)\n        return max_profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(stock_prices, k):\n    profits = []\n    for i in range(len(stock_prices) - k + 1):\n        profits.append(profit(stock_prices[i:i+k]))\n    return max(profits)\n\n\n# -\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nfrom typing import List\n\n\ndef max_profit(stock_prices: List[int], max_transactions: int) -> int:\n    if max_transactions == 0:\n        return 0\n\n    max_profit = 0\n    min_price = stock_prices[0]\n    # decreasing subarray\n    for price in stock_prices:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef max_profit(prices: List[int], k: int) -> int:\n    if len(prices) <= 1:\n        return 0\n\n    if k > len(prices) // 2:\n        # we can buy and sell all the prices\n        return max(prices[1:]) - min(prices)\n\n    min_prices = []\n    max_profit = 0\n\n    for i, price in enumerate(prices):\n        if i < k:\n            # fill up min_prices list with the first k prices\n            min_prices.append(price)\n        else:\n            # delete the first price\n            min_prices = min_prices[1:]\n\n        min_price = min(min_prices)\n        max_profit = max(max_profit, price - min_price)\n\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices: list, k: int) -> int:\n  profits = [0] * k\n  for price in prices:\n    for i in range(k-1, -1, -1):\n      profits[i] = max(profits[i], profits[i+1] - price)\n  return profits[0]\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    if not prices:\n        return 0\n\n    max_profits = []\n\n    for i in range(k):\n        max_profits.append(max(prices[i+1:]))\n\n    max_profit = max(max_profits)\n\n    for i in range(1, k):\n        for j in range(i, k):\n            if prices[j] - prices[i] + max_profit > max_profit:\n                max_profit = prices[j] - prices[i] + max_profit\n\n    return max_profit\n\ndef max_profit(prices, k):\n    if not prices:\n        return 0\n\n    max_profits = []\n    max_profit = 0\n\n    for i in range(k):\n        max_profits.append(max(prices[i+1:]))\n\n    for i in range(1, k):\n        max_profit = max(max_profit, max_profits[i] - prices[i-1])\n\n    return max_profit", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(arr, k):\n    \"\"\"\n    :param arr: [1, 5, 2, 3, 7, 6, 4, 5]\n    :param k: 3\n    :return: 10\n    \"\"\"\n    if k == 0:\n        return 0\n    profit = 0\n    min_prices = []\n    for i in range(k):\n        min_prices.append(arr[i])\n    for i in range(k, len(arr)):\n        min_prices[i % k] = min(min_prices[(i - 1) % k], arr[i])\n        profit = max(profit, arr[i] - min_prices[i % k])\n    return profit\n\n\n# print(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(a):\n    return sum(a[1:]) - sum(a[:1])\n\ndef test_add_pairwise():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n# run pytest -v to see result\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(numbers):\n  result = []\n  for i in range(len(numbers) - 1):\n    result.append(numbers[i] + numbers[i + 1])\n  return result\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef add_pairwise(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: list of integers\n    \"\"\"\n    total = 0\n    for i in range(len(nums) - 1):\n        total += nums[i]\n        nums[i + 1] += total\n\n    return nums\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple1):\n    result = []\n    if len(tuple1) >= 2:\n        for i in range(len(tuple1)-1):\n            for j in range(i+1, len(tuple1)):\n                result.append(tuple1[i] + tuple1[j])\n    return result\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuples):\n    output = []\n    for index in range(len(tuples)):\n        for index2 in range(index+1, len(tuples)):\n            output.append(tuples[index] + tuples[index2])\n    return tuple(output)\n\n\nadd_pairwise((1, 5, 7, 8, 10))\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_of_numbers):\n    pairwise_addition = []\n    for i in range(len(tuple_of_numbers)):\n        if i < len(tuple_of_numbers) - 1:\n            pairwise_addition.append(tuple_of_numbers[i] + tuple_of_numbers[i+1])\n    return tuple(pairwise_addition)\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(args):\n    return tuple(sum(pair) for pair in zip(args, args[1:]))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(lst):\n  return tuple(x+y for x,y in zip(lst, lst[1:]))\n\ndef test_add_pairwise():\n  assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n#test_add_pairwise()\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_elements):\n    \"\"\"\n    Add pairwise the elements of the given tuple and return the new tuple\n    \"\"\"\n    result = []\n    for i in range(0, len(tuple_elements)-1):\n        result.append(tuple_elements[i] + tuple_elements[i+1])\n    return tuple(result)"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n# Solution 1 - Brute force\ndef find_remainder(nums, n, m):\n    \"\"\"\n    Time complexity - O(n^2)\n    Space complexity - O(1)\n    \"\"\"\n    remainder = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                product = nums[i] * nums[j]\n                remainder = remainder + (product % m)\n    return remainder % m\n\n\n# Solution 2 - Hash table\ndef find_remainder(nums, n, m):\n    \"\"\"\n    Time complexity - O(n^2)\n    Space complexity - O(n)\n    \"\"\"\n    remainder = 0\n    product_dictionary = {}\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                product = nums[i] * nums[j]\n                if product_dictionary.get(product % m, 0) == 0:\n                    product_dictionary[product % m] = 1\n    for key in product_dictionary.keys():\n        remainder += key\n    return remainder % m\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, k):\n    remainder = []\n    for i in arr:\n        if i%n == k:\n            remainder.append(i)\n    return sum(remainder)\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(array,n,m):\n    count = 0\n    for i in range(len(array)):\n        if array[i] % n == 0 and array[i]%m ==0:\n            count += 1\n    return count\n\ndef test_find_remainder():\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) == 9\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(A,m,n):\n    \"\"\"\n    :param A: array of integers\n    :param m: m <= n\n    :param n: positive integer\n    \"\"\"\n    if not len(A) or m>n:\n        raise Exception('Invalid input')\n    count = 0\n    for x in A:\n        if x>m or x<1:\n            raise Exception('Invalid input')\n        if x>n:\n            count += (x%n)\n        else:\n            count += x\n    return count%n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,m):\n    arr = arr[::-1]\n    l = len(arr)\n    k = 0\n    if l<m:\n        return -1\n    for i in range(l-m+1):\n        k+=arr[i]*(10**(i))\n        if k%n == 0:\n            return k//n\n        elif k%(n*10**(i+1)) !=0:\n            return k%(n*10**(i+1))\n\n# print(find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11))\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    arr.sort()\n    left = 0\n    right = n\n    while left<right:\n        if arr[left]*m < arr[right]*n:\n            left += 1\n        else:\n            right -= 1\n    return arr[left]*m%n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,m):\n    pass\n\n\n# + pycharm={\"name\": \"#%%\\n\"}", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(nums,m,n):\n    sum_nums = 0\n    for num in nums:\n        sum_nums = sum_nums + (num % m)\n    return sum_nums % n\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(numbers):\n    numbers_set = set(numbers)\n    if len(numbers_set) == len(numbers):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(l):\n  if len(l) == 0:\n    return False\n  for i in range(len(l)):\n    for j in range(i+1, len(l)):\n      if l[i] == l[j]-1:\n        return True\n  return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nums):\n    return all([nums[i] == nums[i+1] for i in range(len(nums)-1)])\n\n\ndef check_Consecutive(nums):\n    if len(nums) < 2:\n        return True\n    for i in range(len(nums)):\n        if nums[i+1] != nums[i] + 1:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n# TODO: Write your code here\ndef check_Consecutive(arr):\n    for i in range(len(arr)-1):\n        if (arr[i] + 1 == arr[i+1]) or (arr[i] == arr[i+1]):\n            return True\n\n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n\tlst.sort()\n\tfor i in range(len(lst)-1):\n\t\tif lst[i] == lst[i+1]:\n\t\t\treturn True\n\treturn False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i] + 1 == lst[i+1]:\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(L):\n    L.sort()\n    for i in range(len(L)-1):\n        if L[i+1] - L[i] == 1:\n            pass\n        else:\n            return False\n    return True\n\n#-----------------------------", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(my_list):\n    if not len(my_list) >= 2:\n        return False\n    for i in range(len(my_list)):\n        if my_list[i] == my_list[i+1] - 1:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(x):\n    if len(x) == len(set(x)):\n        return False\n    else:\n        for i in range(len(x)-1):\n            if x[i] + 1 == x[i+1]:\n                return True\n    return False\n\n#test"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tups, tup_list):\n    return set(tups).intersection(set(tup_list))\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\nimport pytest\n\n\ndef tuple_intersection(tup_list_1, tup_list_2):\n    \"\"\"\n    :param tup_list_1: list of tuples\n    :param tup_list_2: list of tuples\n    :return: set of tuples\n    \"\"\"\n    set_1 = set(tup_list_1)\n    set_2 = set(tup_list_2)\n    return set_1.intersection(set_2)\n\n\ndef test_tuple_intersection_one():\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\n\ndef test_tuple_intersection_two():\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 10)]) == {(4, 5), (3, 4), (5, 6)}\n\n\ndef test_tuple_intersection_three():\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(4, 5), (3, 4), (5, 6)]) == {(4, 5), (3, 4), (5, 6)}\n\n\ndef test_tuple_intersection_four():\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(9, 10), (4, 5), (3, 4), (6, 5)]) == {(", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list1, tuple_list2):\n    '''\n    tuple_list1 = [(3, 4), (5, 6), (9, 10), (4, 5)] \n    tuple_list2 = [(5, 4), (3, 4), (6, 5), (9, 11)]\n    '''\n    list1_set = set(tuple_list1)\n    list2_set = set(tuple_list2)\n    \n    return list1_set.intersection(list2_set)\n    ", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\nfrom typing import List, Set\n\n\ndef tuple_intersection(tuple_list: List[tuple]) -> Set[tuple]:\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])\n    {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    # Check if the given tuple_list is empty\n    if not tuple_list:\n        return set()\n\n    # Check if the given tuple_list contains a single tuple\n    if len(tuple_list) == 1:\n        return tuple_list[0]\n\n    # Convert the given tuple list into a set\n    tuple_set = set(tuple_list)\n\n    # Set that contains the common elements in the given tuple list\n    common_tuple_set = set()\n\n    # Loop through the given tuple list and check if it contains the common elements of the first tuple\n    for tuple_element in tuple_list[0]:\n        common_tuple_set.add(tuple_element)\n\n        # If the common tuple set doesn't contain all the elements in the tuple list then it means\n        # the current tuple in the given tuple list doesn't have the common elements.\n        # So we break from the loop and move to the next tuple\n        if not common_tuple_set.issuperset(tuple_set):\n            break\n\n    # Return the common elements of the given tuple list\n    return common_tuple_set\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list, tuple_list2):\n    intersection = []\n    for x in tuple_list:\n        if x in tuple_list2:\n            intersection.append(x)\n    return intersection\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(a, b):\n    c = set(a) & set(b)\n    return c\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tuple_list1, tuple_list2):\n    return set(tuple_list1).intersection(set(tuple_list2))", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(t1, t2):\n    result = []\n    for i in t1:\n        for j in t2:\n            if (i[0] == j[0] or i[0] == j[1]) and (i[1] == j[0] or i[1] == j[1]):\n                result.append((i[0], i[1]))\n    return set(result)\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# Time: O(n+m)  Space: O(n+m)\ndef tuple_intersection(arr1, arr2):\n    temp = {}\n    for t1 in arr1:\n        temp[t1] = t1\n    for t2 in arr2:\n        if t2 in temp:\n            yield t2\n\n# Test cases", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple1, tuple2):\n    \"\"\"\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    True\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (10, 9)]) == {(4, 5), (3, 4), (5, 6)}\n    True\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(1, 2), (3, 4), (6, 5), (10, 9)]) == set()\n    True\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(1, 2), (3, 4), (6, 5), (10, 9, 11)]) == set()\n    True\n    \"\"\"\n    return set(tuple1).intersection(tuple2)\n\n# Write a function to find the frequency of each element in the given list."], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(text,old,new):\n  \"\"\"\n  :param text: str\n  :param old: str\n  :param new: str\n  :return: str\n  \"\"\"\n  # your code goes here\n  return text.replace(old,new)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\nimport pytest\n\n# def replace_char(input_str, old_char, new_char):\n#     output = []\n#     for i in input_str:\n#         if i != old_char:\n#             output.append(i)\n#         else:\n#             output.append(new_char)\n#     return \"\".join(output)\n\n\ndef replace_char(input_str, old_char, new_char):\n    return input_str.replace(old_char, new_char)\n\n\ndef test_replace_char():\n    assert replace_char(\"polygon\", \"y\", \"l\") == \"pollgon\"\n    with pytest.raises(TypeError):\n        replace_char(9, \"y\", \"l\")\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str, ch1, ch2):\n  count = 0\n  for i in str:\n    if i == ch1:\n      count += 1\n  return str.replace(ch1,ch2,count)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(word,old,new):\n    new_word = word.replace(old,new)\n    return new_word\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str, char_to_replace, replacement_char):\n    # SOLUTION 1\n    # return str.replace(char_to_replace,replacement_char)\n    \n    # SOLUTION 2\n    return str.replace(char_to_replace, replacement_char)\n\ndef test_replace_char():\n    assert replace_char(\"polygon\",'y','l')==\"pollgon\"\n    assert replace_char(\"hello world\",\"o\",\"r\")==\"hellr wrld\"\n    assert replace_char(\"hello world\",\"h\",\"h\")==\"hello world\"\n    assert replace_char(\"hello world\",\"x\",\"k\")==\"hello world\"\n    print(\"Success!\")\ntest_replace_char()", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str, ch1, ch2):\n    return str.replace(ch1,ch2)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s, c_from, c_to):\n    return s.replace(c_from, c_to)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str, c1, c2):\n    res = ''\n    for c in str:\n        if c == c1:\n            res += c2\n        else:\n            res += c\n    return res\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(strng, old, new):\n    new_strng = []\n    for char in strng:\n        if char == old:\n            new_strng.append(new)\n        else:\n            new_strng.append(char)\n    return ''.join(new_strng)\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\nimport pytest\nfrom ..testing import exercise_func\nexercise_func(replace_char)\n\ndef test_replace_char():\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(d):\n    l=[(k,v) for k,v in d.items()]\n    l.sort(key=lambda x: x[1],reverse=True)\n    return l\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(c):\n    return sorted(c.items(), key = lambda x: x[1], reverse = True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(c):\n    return sorted(c.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(my_dict):\n    lst = list(my_dict.items())\n    return sorted(lst, key=lambda x:x[1], reverse=True)\n\n\n#2. ", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(dictionary):\n    return sorted(dictionary.items(), key = lambda x : x[1], reverse = True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter_to_sort):\n    return sorted(counter_to_sort.items(), key=lambda x:x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\n# Solution 1\nfrom collections import Counter\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\n# Solution 2\nfrom collections import Counter\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n  return sorted(counter.items(), key=lambda x:x[1], reverse=True)", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nimport collections\ndef sort_counter(counter):\n  return sorted(counter.items(), key=lambda x:x[1])\n\n# def sort_counter(counter):\n#   return sorted(counter.items(), key=lambda x:x[1], reverse=True)\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return sum(sorted(arr)) - sorted(arr)[-1] - sorted(arr)[0]\n\nbig_sum([1,2,3])\nbig_sum([-10, -5, -6, -7, -12, -13, -14])<jupyter_output><empty_output><jupyter_text>Solution 3: [Read Array Increasingly](https://www.algoexpert.io/questions/Read%20Array%20Increasingly)```\nImplement a function that takes in an array of integers and returns the indices of the first occurrence of the largest integer, as well as the value of the largest integer.\n\nExamples:\narr = [1, 2, 3, 3, 4, 5, 5, 6]\n// return [4, 6]\n\narr = [100, 101, 99, 100]\n// return [1, 101]", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(a):\n    return sum(sorted(a,reverse = True)[:2])\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n#code\n\ndef big_sum(nums):\n    return max(nums) + min(nums)", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n#Solution\n\ndef big_sum(arr):\n    smallest= arr[0]\n    largest= arr[0]\n    sum= 0\n    for i in arr:\n        if i < smallest:\n            smallest = i\n        elif i > largest:\n            largest = i\n    sum = smallest + largest\n    return sum\n\n\n#Test Case\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(ls):\n    \"\"\"\n    :param ls: list\n    :return: sum of maximum and minimum value\n    \"\"\"\n    return max(ls) + min(ls)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(lst):\n    return max(lst)+min(lst)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    maxi = 0\n    mini = 0\n    for i in range(len(arr)):\n        if arr[i] > maxi:\n            maxi = arr[i]\n        if arr[i] < mini:\n            mini = arr[i]\n    return maxi + mini\n\n#assert big_sum([1,2,3]) == 4\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val + min_val\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return max(arr) + min(arr)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(lst):\n  \"\"\"\n  returns sum of largest and smallest values in a given list\n  \"\"\"\n  return max(lst) + min(lst)\n\nbig_sum([1,2,3])\nbig_sum([-5,-3,-6])\nbig_sum([10,20,30])\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"8LUpgT87FxwX\" outputId=\"5e94388f-76bc-425a-f399-0603e8e83907\""], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\nimport string\n\n\ndef is_lower(s):\n    return all(c in string.ascii_lowercase for c in s)\n\n\ndef test_is_lower():\n    assert is_lower(\"InValid\") == \"invalid\"\n    assert is_lower(\"VALID\") == \"valid\"\n    assert is_lower(\"Invalid\") == \"invalid\"\n    assert is_lower(\"\") == \"\"\n    assert is_lower(\"1234\") == \"1234\"\n    assert is_lower(\"1234abc\") == \"1234abc\"\n    assert is_lower(\"1234aBc\") == \"1234abc\"\n    assert is_lower(\"1234AbC\") == \"1234abc\"\n    assert is_lower(\"1234ABC\") == \"1234abc\"\n    assert is_lower(\"1234ABC\") == \"1234abc\"\n    assert is_lower(\"1234ABc\") == \"1234abc\"\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(input):\n    return input.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n# + id=\"t8kgom_fL203\"\n# Solution\ndef is_lower(s):\n  s = s.lower()\n  return s\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\nfrom typing import List\n\n\ndef is_lower(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    if len(string) > 0:\n        return string[0].lower() + string[1:]\n    return \"\"\n\n\ndef is_lower2(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return string.lower()\n\n\ndef is_lower3(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return string[:1].lower() + string[1:]\n\n\ndef is_lower4(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return \"\".join([s.lower() for s in string])\n\n\ndef is_lower5(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return \"\".join(list(map(lambda s: s.lower(), string)))\n\n\ndef is_lower6(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return \"\".join(map(str.lower, string))\n\n\ndef is_lower7(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return \"\".join(list(map(str.lower, string)))\n\n\ndef is_lower8(string: str) -> str:\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return \"\".join([str.lower(char) for char in string])\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n# Solution\n\ndef is_lower(s):\n    if s.islower() == True:\n        return s\n    else:\n        return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.islower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    \"\"\"\n    >>> is_lower('InValid')\n    'invalid'\n    \"\"\"\n    return s.lower()\n\ndef test_is_lower():\n    assert is_lower('InValid') == 'invalid'\n    assert is_lower('INVALID') == 'invalid'\n    assert is_lower('valid') == 'valid'\n    assert is_lower('a') == 'a'\n    assert is_lower('A') == 'a'\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(str1):\n    return str1.lower()\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    \"\"\"\n    :param string: str\n    :return: (str, int)\n    \"\"\"\n    if not string:\n        return \"\"\n    if len(string) == 1:\n        return string.upper() if string.islower() else string\n    else:\n        if string[0].islower():\n            return remove_lowercase(string[1:])\n        elif string[0].isupper():\n            return string[0].lower() + remove_lowercase(string[1:])\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# %%", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(word):\n    l = []\n    for i in range(len(word)):\n        if word[i].islower():\n            l.append(word[i])\n    return \"\".join(l)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# write your code here\ndef remove_lowercase(s):\n    return s[:s.find('H')]\n\n\n# keep this function call here ", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    if string.islower():\n        return remove_lowercase(string[1:])\n    else:\n        return string\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    ls = list(s)\n    i = 0\n    while i < len(ls):\n        if ls[i].islower():\n            ls.pop(i)\n        else:\n            i += 1\n    return \"\".join(ls)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    return string.replace(\"a\",\"\")\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(input):\n    new = \"\"\n    for c in input:\n        if c.isupper():\n            new += c\n    return new\n    ", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# write a function definition here\ndef remove_lowercase(st):\n\tres = ''\n\tfor x in st:\n\t\tif x.islower():\n\t\t\tpass\n\t\telse:\n\t\t\tres += x\n\treturn res\n\n# keep this function call here ", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n# Solution\n\ndef remove_lowercase(s):\n    \"\"\"\n    If string is empty return it\n    If current character is uppercase, return substring of previous character\n    If current character is lowercase, return current character\n    \"\"\"\n    start, end = 0, 0\n    for i, c in enumerate(s):\n        if c.isupper():\n            start = end = i\n        elif c.islower():\n            end = i + 1\n    return s[start:end]"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    if n>0:\n        return n%10\n    else:\n        return -n%10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_digit(n):\n\tif n < 0:\n\t\treturn -1\n\n\tif n == 0:\n\t\treturn -1\n\n\tif n == 1:\n\t\treturn 1\n\n\ttemp = n\n\twhile temp != 0:\n\t\tif temp % 10 != 0:\n\t\t\treturn temp % 10\n\t\ttemp = temp // 10\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return n//10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_digit(num):\n    return num // 10 ** (len(str(num))-1) % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return num//10**(len(str(num))-1)%10", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    if number < 10:\n        return number\n    else:\n        return first_Digit(number // 10)\n\ndef test_first_digit():\n    assert first_Digit(123) == 1\n    assert first_Digit(1001) == 1\n\ntest_first_digit()\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return n//10**(len(str(n))-1)%10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    \"\"\"\n        return the first digit of a given number\n    \"\"\"\n    if n > 0:\n        return n%10\n    elif n == 0:\n        return 0\n    else:\n        return (-n)%10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return num // 10 ** (len(str(num)) - 1) % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    #First digit of the number\n    return n//10**(int(len(str(n)))-1)%10\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    # Write your code here\n    pass\n    return max(string, key=string.count)\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\nfrom collections import Counter\n\ndef get_max_occuring_char(s):\n    return max(s, key=s.count)\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\nfrom collections import Counter\n\ndef get_max_occuring_char(text):\n    counter = Counter(text)\n    max_occur = max(counter.items(), key=lambda x: x[1])\n    return max_occur[0]\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\nimport collections\n\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    get the max occurring char in the string\n\n    Args:\n        string (str): input string\n\n    Returns:\n        str: max occurring char\n    \"\"\"\n\n    if not string:\n        return \"\"\n    occur_chars = collections.Counter(string)\n    max_count = 0\n    max_char = None\n    for char, count in occur_chars.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(input_string):\n    max_occuring_char = ''\n    for char in input_string:\n        if char in max_occuring_char:\n            continue\n        elif char not in max_occuring_char:\n            max_occuring_char = char\n    return max_occuring_char\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\nfrom collections import Counter\n\ndef get_max_occuring_char(str_input):\n    # return max(str_input, key=str_input.count)\n\n    return max(Counter(str_input).items(), key=lambda x: x[1])[0]\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(str):\n    max_char = \"\"\n    counter = 0\n    for char in str:\n        if counter == 0:\n            max_char = char\n        elif counter > 0 and char == max_char:\n            counter = counter + 1\n        elif counter > 0 and char != max_char:\n            counter = counter + 1\n    return max_char", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(text: str) -> str:\n    \"\"\"Return the max occurring character in a string\"\"\"\n    char_counts = {}\n    for char in text:\n        if char in char_counts.keys():\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    return sorted(char_counts.items(), key=lambda item: item[1], reverse=True)[0][0]\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, sum, target):\n\tfor num in nums:\n\t\tif target == num:\n\t\t\treturn True\n\t\telif target > num:\n\t\t\tif is_subset_sum(nums, sum, target-num):\n\t\t\t\treturn True\n\treturn False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef is_subset_sum(numbers: List[int], target: int, current_index: int) -> Tuple[bool, int]:\n    if current_index == len(numbers):\n        return False, current_index\n\n    if target == numbers[current_index]:\n        return True, current_index\n\n    if numbers[current_index] > target:\n        return is_subset_sum(numbers, target, current_index + 1)\n\n    subset_sum, subset_index = is_subset_sum(numbers, target - numbers[current_index], current_index + 1)\n\n    if subset_sum:\n        return True, subset_index\n\n    return is_subset_sum(numbers, target, current_index + 1)\n\n\ndef is_subset_sum2(numbers: List[int], target: int) -> bool:\n    if len(numbers) == 0:\n        return False\n\n    if target == 0:\n        return True\n\n    return is_subset_sum(numbers, target, 0)[0]\n\n\ndef is_subset_sum3(numbers: List[int], target: int) -> bool:\n    if len(numbers) == 0:\n        return False\n\n    cache = {}\n\n    def _is_subset_sum(numbers: List[int], target: int, current_index: int) -> bool:\n        if current_index == len(numbers):\n            return False\n\n        if target == numbers[current_index]:\n            return True\n\n        if numbers[current_index] > target:\n            return _is_subset_sum(numbers, target, current_index + 1)\n\n        if (current_index, target) not in cache:\n            cache[(current_index, target)] = _is_subset_sum(numbers, target - numbers[current_index], current_index + 1)\n\n        return cache[(current_index, target)]\n\n    return _is_subset_sum(numbers, target, 0)\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, total, sum):\n    # Write your code here.\n    if sum == total:\n        return True\n    elif sum > total:\n        return False\n    elif sum == 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        return is_subset_sum(nums, total, sum - nums[0]) or is_subset_sum(nums, total, sum)\n        \n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\nfrom collections import defaultdict\n\n\ndef is_subset_sum(arr, sum_, target):\n    # get max value from array\n    max_value = max(arr)\n    # create a dictionary\n    # key => array elements\n    # value => 1,2,3..\n    # array element => index of array element in array\n    mapping = defaultdict(int)\n    for index, num in enumerate(arr):\n        mapping[num] = index + 1\n\n    # generate all possible sums with max value of array\n    for num in range(max_value + 1):\n        # subtract current value from sum to get the target\n        if num == target:\n            return True\n        elif target - num in mapping:\n            # if we have the target value in the current sum\n            # check if the current value is subset of the array\n            # if yes return True\n            # else return False\n            if mapping[target - num] > mapping[num]:\n                return is_subset_sum(arr, sum_, num)\n    # if we got here means we have an empty set\n    return False\n\n\ndef is_subset_sum_v2(arr, sum_, target):\n    if sum_ == target:\n        return True\n\n    if sum_ > target:\n        return False\n\n    if sum_ < target:\n        return is_subset_sum_v2(arr, sum_, target)\n\n\ndef is_subset_sum_v3(arr, sum_, target):\n    # get max value from array\n    max_value = max(arr)\n    # create a dictionary\n    # key => array elements\n    # value => 1,2,3..\n    # array element => index of array element in array\n    mapping = defaultdict(int)\n    for index, num in enumerate(arr):\n        mapping[num] = index + 1\n\n    # generate all possible sums with max value of array\n    for num in range(max_value + 1):\n        # subtract current value from sum to get the target\n        if num == target:\n            return True\n        elif target - num in mapping:\n            # if we have the target value in the current sum\n            # check if the current", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\nfrom typing import List\n\n\ndef is_subset_sum(nums: List[int], target: int, sum_so_far: int = 0) -> bool:\n    if sum_so_far == target:\n        return True\n    if sum_so_far > target:\n        return False\n    for num in nums:\n        if is_subset_sum(nums, target, sum_so_far + num):\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\n# using math.ceil and math.floor\n# this is also called 0/1 Knapsack Problem\ndef is_subset_sum(arr, sum, target):\n    arr.sort()\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(arr[i], max_sum + arr[i])\n        if max_sum > target:\n            return False\n        if max_sum == target:\n            return True\n    return False\n\n# using brute-force\ndef is_subset_sum_brute(arr, sum, target):\n    if len(arr) == 0:\n        return False\n    for i in range(len(arr)):\n        if target == 0:\n            return True\n        elif arr[i] > target:\n            return False\n        elif arr[i] == target:\n            return True\n        else:\n            if is_subset_sum_brute(arr[:i], sum, target - arr[i]):\n                return True\n            else:\n                return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(lst, sum_val, current_sum):\n    if current_sum > sum_val:\n        return False\n    elif current_sum == sum_val:\n        return True\n    else:\n        return is_subset_sum(lst, sum_val, current_sum + lst[0]) or is_subset_sum(lst[1:], sum_val, current_sum)\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, target, s = 0, memo = {}):\n    if s in memo:\n        return memo[s]\n\n    if target == s:\n        return True\n\n    if target == 0:\n        return False\n\n    if target < 0:\n        return False\n\n    if not nums:\n        return False\n\n    for num in nums:\n        memo[s] = is_subset_sum(nums, target, s + num, memo)\n        if memo[s]:\n            return True\n\n    return False\n\n\n# Test", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(arr, sum, s):\n    if sum == s:\n        return True\n    elif sum < s:\n        return False\n    else:\n        for i in range(len(arr)):\n            if is_subset_sum(arr, sum-arr[i], s):\n                return True\n    return False"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(input_str):\n    return \"Yes\" if re.search(r'[A-Z][a-z]+', input_str) else \"No\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(s):\n\treturn 'Yes' if re.search(r'(?=^[A-Z])[A-Z]+(?=[a-z])', s) else 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    return 'Yes' if re.search(r'^[A-Z][a-z]+$', string) else 'No'\n\n\ndef match2(string):\n    return 'Yes' if re.search(r'(?=^[A-Z])(?=[a-z]+$)', string) else 'No'\n\ndef match3(string):\n    return 'Yes' if re.search(r'^[A-Z]{1}[a-z]+$', string) else 'No'\n\ndef match4(string):\n    return 'Yes' if re.search(r'^[A-Z]{1}[a-z]*$', string) else 'No'\n\ndef match5(string):\n    return 'Yes' if re.search(r'^[A-Z][a-z]*$', string) else 'No'\n\ndef match6(string):\n    return 'Yes' if re.search(r'^[A-Z][a-z]{0,}$', string) else 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\nimport pytest\n\n\ndef match(a):\n    pattern = r'[A-Z][a-z]+'\n    return 'Yes' if re.search(pattern, a) else 'No'\n\n\ndef test_match():\n    assert match(\"Geeks\") == 'Yes'\n    assert match(\"geeksforgeeks\") == 'Yes'\n    assert match(\"GEEKSFORGEEKS\") == 'Yes'\n    assert match(\"GeeksforGeeks\") == 'Yes'\n    assert match(\"geeks\") == 'No'\n    assert match(\"gEEks\") == 'No'\n    assert match(\"GeeksforGeeks\") == 'Yes'\n    assert match(\"GeeksforGeeks\") == 'Yes'\n    assert match(\"Abcdef\") == 'No'\n    assert match(\"a\") == 'No'\n    assert match(\"A\") == 'Yes'\n    assert match(\"Ab\") == 'No'\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\ndef match(s):\n    pattern = r\"[A-Z][a-z]+\"\n    return 'Yes' if re.search(pattern, s) else 'No'\n\n\ndef test_match():\n    assert match('Geeks') == 'Yes'\n    assert match('geeks') == 'No'\n    assert match('GeeKs') == 'Yes'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(s):\n    import re\n    return 'Yes' if re.search(r'^([A-Z])([a-z]+)$', s) else 'No'\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# Return the string with lower case letters as well\ndef match(s):\n    return 'Yes' if re.search(r'[A-Z]\\w*[a-z]+', s) else 'No'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    regex = r\"^[A-Z][a-z]+$\"\n    if re.match(regex, string):\n        return \"Yes\"\n    return \"No\"\n\ndef test_function(test_case):\n    string = test_case[0]\n    solution = test_case[1]\n    output = match(string)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [\"Geeks\", \"Yes\"]\ntest_function(test_case_1)\n\ntest_case_2 = [\"geeks\", \"No\"]\ntest_function(test_case_2)\n\ntest_case_3 = [\"12345\", \"No\"]\ntest_function(test_case_3)", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(string):\n    res = re.findall(r\"[A-Z][a-z]*\", string)\n    if len(res) > 0:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# Solution 1\nimport re\ndef match(input_str):\n    pattern = re.compile(r'[A-Z][a-z]+')\n    if pattern.fullmatch(input_str):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Solution 2\nimport re\ndef match(input_str):\n    pattern = re.compile(r'(\\b[A-Z])[a-z]+')\n    if pattern.fullmatch(input_str):\n        return 'Yes'\n    else:\n        return 'No'\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    for n in range(1,100000):\n        if(factorial(n)%x == 0):\n            return n\n        ", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\nimport math\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,1000000):\n        if math.factorial(i) % x == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\nimport math\n\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1, 100000):\n        if math.factorial(i) % x == 0:\n            return i\n    return False\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1, x):\n        if i == 1:\n            continue\n        if sum(range(i, i*i, i))%x == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\nfrom math import factorial\n\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    for i in range(1, x + 1):\n        if factorial(i) % x == 0:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\nfrom math import factorial\n\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    for i in range(1, x+1):\n        if i == 1 or (factorial(i) % x == 0):\n            return i\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n\tfrom math import factorial\n\tfor i in range(1,x+1):\n\t\tif factorial(i) % x == 0:\n\t\t\treturn i", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    n = 1\n    while n != 0:\n        n = n+1\n        sum = 1\n        for i in range(1,n+1):\n            sum = sum*i\n        if sum%x == 0:\n            return n\n    return 0\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple_list, matching_tuple):\n    for element in matching_tuple:\n        tuple_list.remove(element)\n    return tuple_list\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    tuple2_copy = tuple2.copy()\n    for item in tuple1:\n        if item in tuple2:\n            tuple2_copy.remove(item)\n    return tuple2_copy\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple_list_a, tuple_list_b):\n    '''\n    Remove the tuples in tuple_list_a that match with any of the tuples in tuple_list_b.\n    '''\n    set_b = set(tuple_list_b)\n    return [x for x in tuple_list_a if x not in set_b]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuples(tuple1, tuple2):\n  tuple1 = list(tuple1)\n  tuple2 = list(tuple2)\n  tuple1.remove(tuple2[0])\n  tuple2.remove(tuple1[0])\n  return tuple1, tuple2\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuples1, tuples2):\n    new_list = [tuple for tuple in tuples1 if tuple not in tuples2]\n    return new_list\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(t1, t2):\n    new_tuple = []\n    for t in t1:\n        for x in t2:\n            if t == x:\n                break\n        else:\n            new_tuple.append(t)\n    return new_tuple\n\n\n# %%", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# def remove_matching_tuples(tuples, tuples_to_remove):\n#     return tuple([tuple(list(x)) for x in tuples if list(x) not in tuples_to_remove])\n\n# def remove_matching_tuples(tuples, tuples_to_remove):\n#     return tuple([tuple(list(x)) for x in tuples if x not in tuples_to_remove])\n\ndef remove_matching_tuples(tuples, tuples_to_remove):\n    return tuple([x for x in tuples if x not in tuples_to_remove])\n\n\ndef remove_matching_tuples_hard_way(tuples, tuples_to_remove):\n    return tuple([x for x in tuples if list(x) not in [list(t) for t in tuples_to_remove]])\n\n\ndef main():\n    print(remove_matching_tuples([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))\n    print(remove_matching_tuples_hard_way([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuples, matching_tuples):\n    \"\"\"\n    Input: A list of tuples and a list of tuples.\n    Output: The first list with the matching tuples removed.\n    \"\"\"\n    for matching_tuple in matching_tuples:\n        if matching_tuple in tuples:\n            tuples.remove(matching_tuple)\n\n    return tuples\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# Insert your function definition here\n\n\ndef remove_matching_tuple(t1, t2):\n    \"\"\"\n    Write a function to remove the matching tuples from the given two tuples.\n    :param t1: the first tuple\n    :param t2: the second tuple\n    :return: the tuple with the matching tuples removed\n    \"\"\"\n    # Insert your function implementation here\n    return None\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuples_list, tuples_to_remove):\n    return list(filter(lambda x: x not in tuples_to_remove, tuples_list))\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef is_palindrome(string):\n    \"\"\"\n    Test whether the given string is a palindrome.\n    \"\"\"\n    string = string.lower()\n    return string == string[::-1]\n\ndef largest_palindrome(numbers, length):\n    \"\"\"\n    Find the largest palindromic number in the given array.\n    \"\"\"\n    largest = 0\n    for number in numbers:\n        for divisor in range(number, number * 10, 10):\n            if divisor >= largest and is_palindrome(str(divisor)):\n                largest = divisor\n    return largest\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(num_list, num_digits):\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    def is_palindrome_of_size(number, num_digits):\n        return len(str(number)) == num_digits\n\n    return max(filter(lambda x: is_palindrome(x) and is_palindrome_of_size(x, num_digits), num_list))\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(lst, n):\n    # TODO: Write your code here\n    largest = 0\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            product = lst[i]*lst[j]\n            if product > largest and str(product) == str(product)[::-1]:\n                largest = product\n    return largest\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, n):\n    \"\"\"\n    :param: arr - array of integers\n    :param: n - number of elements in arr\n    TODO - complete this method and return the largest palindrome number\n    \"\"\"\n    return max(arr)\n\n# print(\"Pass\" if (232 == largest_palindrome([1, 232, 54545, 999991], 4)) else \"Fail\")\n# print(\"Pass\" if (999999 == largest_palindrome([999991, 232, 54545, 999991], 4)) else \"Fail\")\n# print(\"Pass\" if (999991 == largest_palindrome([999999, 232, 54545, 999991], 4)) else \"Fail\")\n# print(\"Pass\" if (232 == largest_palindrome([1, 232, 54545, 999999], 4)) else \"Fail\")\n# print(\"Pass\" if (0 == largest_palindrome([1, 232, 54545, 999991], 0)) else \"Fail\")", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n  return 0\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(nums, num_digits):\n    max_number = float('-inf')\n    num_digits = num_digits\n    max_digits = 10 ** (num_digits // 2) - 1\n    min_digits = 10 ** (num_digits // 2 - 1) if num_digits % 2 == 0 else 10 ** (num_digits // 2)\n    for num in nums:\n        if max_number >= num:\n            continue\n        if num_digits == 1:\n            max_number = max(max_number, num)\n            continue\n        if min_digits < num <= max_digits:\n            for i in range(num_digits // 2):\n                if is_palindrome(str(num) + str(num)[i:]):\n                    max_number = max(max_number, num)\n                    break\n\n    return max_number\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nfrom typing import List\n\n\ndef largest_palindrome(arr: List[int], k: int) -> int:\n    if k > len(arr):\n        return 0\n\n    from math import pow\n    from itertools import permutations\n\n    for p in permutations(arr, k):\n        num = int(\"\".join(str(e) for e in p))\n        if num == pow(num, 2):\n            return num\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nfrom typing import List\n\ndef largest_palindrome(nums: List[int], n: int) -> int:\n    max_product = 0\n    for num in nums:\n        max_product = max(max_product, max_palindrome(num, n))\n    return max_product\n\ndef max_palindrome(num: int, n: int) -> int:\n    upper_limit = 10 ** (n // 2) - 1\n    lower_limit = max(0, 10 ** (n // 2 - 1))\n    for i in range(upper_limit, lower_limit, -1):\n        if num // i == 0:\n            break\n        if is_palindrome(num // i):\n            return num // i * i\n    return 0\n\ndef is_palindrome(num: int) -> bool:\n    num_str = str(num)\n    return num_str == num_str[::-1]\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, digits):\n\tmax = 0\n\tfor i in range(len(arr)):\n\t\tfor j in range(len(arr)):\n\t\t\tp = str(arr[i] * arr[j])\n\t\t\tif len(p) == digits and p == p[::-1]:\n\t\t\t\tif p > max:\n\t\t\t\t\tmax = p\n\treturn int(max)\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nfrom typing import List\n\ndef largest_palindrome(numbers: List[int], k: int) -> int:\n    return max(max(x * y for x in numbers if (x * x) <= k) for y in numbers if (y * y) <= k)\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nimport numpy as np\nfrom math import factorial\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"Compute binomial probability for the given number\"\"\"\n    return np.math.comb(n, k) * p ** k * (1 - p) ** (n - k)\n\n\ndef binomial_cumulative_probability(n, k, p):\n    \"\"\"Compute binomial cumulative probability for the given number\"\"\"\n    return np.math.comb(n, k) * (1 - p) ** (n - k)\n\n\ndef binomial_probability_table(n, p):\n    \"\"\"\n    Compute the binomial probability table for the given number\n    Args:\n        n: (int) number of bins\n        p: (float) probability of a bin\n    Returns:\n        (np.ndarray) 2D array, n rows, 2 columns, first column is n, second column is probability\n    \"\"\"\n    probabilities = np.zeros((n, 2))\n    for i in range(n):\n        probabilities[i, 0] = i + 1\n        probabilities[i, 1] = binomial_probability(n, i + 1, p)\n    return probabilities\n\n\ndef binomial_cumulative_probability_table(n, p):\n    \"\"\"\n    Compute the binomial cumulative probability table for the given number\n    Args:\n        n: (int) number of bins\n        p: (float) probability of a bin\n    Returns:\n        (np.ndarray) 2D array, n rows, 2 columns, first column is n, second column is probability\n    \"\"\"\n    probabilities = np.zeros((n, 2))\n    for i in range(n):\n        probabilities[i, 0] = i + 1\n        probabilities[i, 1] = binomial_cumulative_probability(n, i + 1, p)\n    return probabilities\n\n\ndef binomial_variance(n, p):\n    \"\"\"\n    Compute the variance of binomial distribution\n    Args:\n        n: (int) number of bins\n        p: (float) probability of a bin\n    Returns:\n        (float) variance of", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    return np.math.factorial(n) / (np.math.factorial(n-k) * np.math.factorial(k)) * p**k * (1 - p)**(n-k)\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    return math.factorial(n)/(math.factorial(n-k) * math.factorial(k)) * (p**k) * ((1-p)**(n-k))\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nfrom math import factorial, pow\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    >>> binomial_probability(10, 5, 1.0/3)\n    0.13656454808718185\n    \"\"\"\n    return pow(p, k) * pow((1 - p), (n - k)) * (factorial(n) / factorial(k) / factorial(n - k))\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nimport math\nfrom typing import List\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Probability of a particular outcome of n choose k\n    \"\"\"\n    return math.comb(n, k) * math.pow(p, k) * math.pow((1 - p), (n - k))\n\n\ndef binomial_probability_generator(p: float, n: int) -> List[float]:\n    \"\"\"\n    Generate probability for all outcomes of n choose k\n    \"\"\"\n    return [binomial_probability(n, i, p) for i in range(n + 1)]\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    n = trials\n    k = successes\n    p = probability of success\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))\n\n# assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    q = 1 - p\n    binomial = math.factorial(n)/(math.factorial(k)*math.factorial(n-k))\n    return binomial*p**k*q**(n-k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    if k < 0 or k > n:\n        return 0\n\n    return (float(n)**k * p**k * (1 - p)**(n - k)) / factorial(k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nimport math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    n: number of trials\n    k: number of successes in the trials\n    p: probability of success in one trial\n    return: probability of k successes in n trials\n    \"\"\"\n    return math.factorial(n)/(math.factorial(k)*math.factorial(n-k))*p**k*(1-p)**(n-k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n  return (factorial(n)/(factorial(k)*factorial(n-k)))*p**k*(1-p)**(n-k)\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(l):\n    l.sort(key = lambda x: x[1])\n    return l\n\ndef test_sort_tuple():\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\ntest_sort_tuple()\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tup_list):\n    result = sorted(tup_list, key=lambda x: x[-1])\n    return result\n\n#test", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tup):\n    lst = []\n    for i in tup:\n        lst.append(i[-1])\n    lst.sort()\n    l = []\n    for i in lst:\n        for j in tup:\n            if j[-1] == i:\n                l.append(j)\n    return l\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    pass\n\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda t: t[-1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tup_list):\n    \"\"\"\n    This function sort a list of tuples in increasing order by the last element in each tuple.\n\n    :param tup_list: a list of tuples to sort\n    :return: a sorted list of tuples\n    \"\"\"\n    # get tuple length\n    # tup_len = len(tup_list[0])\n    # create a list of tuples by sorting the last element in each tuple\n    sorted_tup_list = sorted(tup_list, key=lambda tup: tup[1])\n    # sort the tuple by each element\n    return sorted_tup_list\n\n\ndef test_sort_tuple():\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\n    assert sort_tuple([(1, 3), (3, 2), (2, 1), (1, 2)]) == [(2, 1), (3, 2), (1, 2), (1, 3)]\n    assert sort_tuple([(1, 3), (3, 2), (2, 1), (1, 2), (2, 1)]) == [(2, 1), (2, 1), (3, 2), (1, 2), (1, 3)]\n    print('Success: test_sort_tuple')\n\n\ndef main():\n    test_sort_tuple()\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\nfrom operator import itemgetter\n\n\ndef sort_tuple(tuples):\n    \"\"\"\n    >>> sort_tuple([(1, 3), (3, 2), (2, 1)])\n    [(2, 1), (3, 2), (1, 3)]\n    >>> sort_tuple([(1, 3), (2, 1), (3, 2)])\n    [(2, 1), (3, 2), (1, 3)]\n    >>> sort_tuple([(1, 3), (3, 2), (2, 1), (1, 3)])\n    [(2, 1), (3, 2), (1, 3), (1, 3)]\n    \"\"\"\n    return sorted(tuples, key=itemgetter(1))\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    tuples.sort(key = lambda t: t[1])\n    return tuples\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    # Your code here\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(list_of_tuples):\n    # return sorted(list_of_tuples, key=lambda i: i[1])\n    return sorted(list_of_tuples, key=itemgetter(1))\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(items):\n    \"\"\"\n    >>> sort_tuple([(1, 3), (3, 2), (2, 1)])\n    [(2, 1), (3, 2), (1, 3)]\n    \"\"\"\n    return sorted(items, key=lambda item: item[1])\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nfrom math import sin,pi,pow,sqrt\ndef area_pentagon(n):\n\tp=2*pi*n/5\n\treturn p*(p-sin(p))\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n#function to find area of pentagon\ndef area_pentagon(n):\n    return (n*(3**0.5)-2)*n*0.25\n\n#driver code", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\nfrom math import sqrt\nfrom math import pi\n\ndef area_pentagon(n):\n    '''\n    Calculate the area of a pentagon.\n\n    n: number of sides of the pentagon\n\n    returns: the area of the pentagon\n    '''\n\n    # Type checking\n    if not isinstance(n,int):\n        raise TypeError('n must be an integer.')\n    elif n <= 0:\n        raise ValueError('n must be positive.')\n\n    # Calculate the area\n    side = n * (2*sqrt(2) - 1) / 4\n    area = n * side**2 / (4 * tan(pi/n))\n    return area\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    assert n>2, \"n must be greater than 2\"\n    return n*(5*n-3)/2\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nfrom math import sqrt\n\ndef area_pentagon(n):\n    \"\"\"\n    Return the area of a pentagon with n number of sides.\n    \n    >>> area_pentagon(5)\n    43.01193501472417\n    \"\"\"\n    return (n * (5 * n - 3) * sqrt(5 * n * n - 10 * n + 9) / 4)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side_length):\n    from math import pi\n    return (0.25*(3*side_length**2)*pi)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nimport math\ndef area_pentagon(n):\n    return (n*(3*n-1)*(3*n-2)*(3*n-3))/4*math.tan(math.pi/n)", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    '''\n    n: number of sides of a pentagon\n    '''\n    area=n*((3**0.5)/2)*((5**0.5))\n    return area\n\n\n# Test cases", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return 0.25 * n * (n - 3) * (5 - 1)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\n# Code\n\ndef area_pentagon(n):\n    n = n + 2\n    return 0.25*n*(3*n - 1)*(5*n - 3)"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n, a):\n    \"\"\"\n    :param n: integer number\n    :param a: list of integers\n    :return: integer value\n    \"\"\"\n    frequency = 0\n    for i in a:\n        if i == max(a):\n            frequency += 1\n    return frequency\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(len,arr):\n    arr.sort()\n    val = arr[-1]\n    count = 0\n    for i in arr:\n        if val == i:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n  mylist = []\n  for i in range(0,len(arr)):\n    if arr[i] not in mylist:\n      mylist.append(arr[i])\n  mylist.sort()\n  return mylist[-1],mylist.count(mylist[-1])", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(array):\n    count = 0\n    max_val = array[0]\n\n    for i in array:\n        if i == max_val:\n            count += 1\n        if i > max_val:\n            count = 1\n            max_val = i\n    \n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\nimport unittest\nimport sys\n\ndef frequency_Of_Largest(a_size, a_items):\n    a_dict = {}\n    for num in a_items:\n        if num in a_dict:\n            a_dict[num] += 1\n        else:\n            a_dict[num] = 1\n    return max(a_dict.values())\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\n# + id=\"H_zdV4RLUktH\"\n#Solution:\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"N0qOWhdTUktH\" outputId=\"68648195-4133-413a-8734-df4784d0f611\"\n#frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\n# + [markdown] id=\"U8Oq4wFSUktI\"\n# ###Q22.\n# Write a python function to check whether the given array is a valid pin code. A valid pin code must start with 5,6,7 or 8 and must contain exactly 4 digits.\n# assert is_pin_code(1234) == False\n# assert is_pin_code(123456) == True\n# assert is_pin_code(123456789) == False\n\n# + id=\"1r41kT0SUktI\"\n#Solution:\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"qvrI43TtUktJ\" outputId=\"652e489e-a457-408d-da1e-534135452a9e\"\n#is_pin_code(1234) == False\n#is_pin_code(123456) == True\n#is_pin_code(123456789) == False\n\n# + [markdown] id=\"Y4jBjq4bUktJ\"\n# ###Q23.\n# Write a python function to check whether a given number is a palindrome or not.\n# assert is_palindrome(2121) == True\n# assert is_palindrome(12122211) == True\n# assert is_pal", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\n#Author : <NAME>\n\ndef frequency_Of_Largest(n,arr):\n    arr.sort()\n    return arr.count(arr[n-1])\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,array):\n    if len(array) == 0:\n        return 0\n    else:\n        max_value = max(array)\n        freq_max = 0\n        for i in range(len(array)):\n            if array[i] == max_value:\n                freq_max += 1\n        return freq_max\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n,arr):\n    counter = 0\n    max_count = 0\n    max_element = 0\n    for i in range(len(arr)):\n        if arr[i] == max_element:\n            counter+=1\n        elif arr[i] > max_element:\n            max_element = arr[i]\n            counter=1\n    return counter\n        \n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(input_list):\n    result = set()\n    for i in input_list:\n        result.add((i[1], i[0]))\n    return result\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nimport pytest\n\n\ndef extract_symmetric(lst):\n    if not lst:\n        return []\n\n    result = []\n    for i in lst:\n        for j in lst:\n            if i == j:\n                continue\n            if i[0] == j[1] and i[1] == j[0]:\n                result.append((i[0], j[1]))\n\n    return set(result)\n\n\n@pytest.mark.parametrize(\"lst,expected\", [\n    ([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)], {(8, 9), (6, 7)}),\n    ([(2, 3), (6, 7), (7, 6), (9, 8), (10, 2), (8, 9)], {(8, 9), (6, 7)}),\n    ([(8, 9), (6, 7), (2, 3), (7, 6), (10, 2), (9, 8)], {(8, 9), (6, 7)}),\n    ([(9, 8), (8, 9), (6, 7), (2, 3), (7, 6), (10, 2)], {(8, 9), (6, 7)}),\n    ([(10, 2), (9, 8), (8, 9), (6, 7), (2, 3), (7, 6)], {(8, 9), (6, 7)}),\n    ([(2, 3), (6, 7), (7, 6), (9, 8), (10, 2), (8, 9), (1, 2)], {(8, 9), (6, 7), (1, 2)}),\n    ([(1, 2), (2, 3", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(pairs):\n    return {pair for pair in pairs if pair[::-1] in pairs}\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\n# Write your code here\n\ndef extract_symmetric(l):\n    return set(x for x in l if x[0] == x[1])\n\n# Do not change the code below", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuples_list):\n    symmetric_tuples = set()\n    for tup in tuples_list:\n        symmetric_tuples.add(tup)\n        symmetric_tuples.add((tup[1], tup[0]))\n    return symmetric_tuples\n\n\ndef test_extract_symmetric():\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]) == {(8, 9), (6, 7)}\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(t):\n    t.sort()\n    l = []\n    for i in range(len(t)):\n        for j in range(i+1, len(t)):\n            if t[i] == t[j][::-1]:\n                l.append(t[i])\n    return set(l)", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(lst):\n    \"\"\"\n    Takes a list of tuples and returns a new set with the tuples that are symmetric.\n    >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    True\n    \"\"\"\n    return set(tuple(sorted([a, b])) for a, b in lst if a == b)\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(list_tuple):\n    pairs = set()\n    for pair in list_tuple:\n        pairs.add(pair)\n    return pairs.symmetric_difference(list_tuple)", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(data):\n    sym_pairs = set()\n    for num1, num2 in data:\n        if num1 == num2:\n            continue\n        elif (num1, num2) not in sym_pairs and (num2, num1) not in sym_pairs:\n            sym_pairs.add((num1, num2))\n    return sym_pairs\n\n\n# %%", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(list_of_tuples):\n    return set([tuple(reversed(i)) for i in list_of_tuples])\n\n\n# + pycharm={\"name\": \"#%%\\n\"}\nextract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])\n\n# + pycharm={\"name\": \"#%%\\n\"}"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,n,r):\n\t# Your code here\n\ts=0\n\tfor i in range(n):\n\t\ts+=a*(r**i)\n\treturn s\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(start,end,common_diff):\n    ans = start\n    for i in range(1,end-start+1):\n        ans += common_diff**i\n    return ans", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, n, r):\n    return (a*(r**n-1))/(r-1)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(start,end,common_ratio):\n    summation=0\n    for i in range(start,end+1):\n        summation+=common_ratio**i\n    return summation\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, d, n):\n    s = a\n    for i in range(n-1):\n        s = s + (d**i)\n    return s\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\n# Solution\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\nfrom functools import reduce\n\n\ndef sum_gp(a,b,d):\n    return a if b==0 else (reduce(lambda x,y:x*y,range(a,b+1),1)+1)*d//2\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a, d, n):\n    return d*sum([a,]*n)\n\ndef test_sum_gp():\n    assert sum_gp(1,2,5)==10\n    assert sum_gp(2,5,2)==10\n    assert sum_gp(2,5,6)==30\n    assert sum_gp(1,5,7)==35\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, target):\n  \"\"\"\n  :param arr: a sorted array\n  :param target: an element in the array\n  \"\"\"\n  if not arr:\n    return False\n\n  # define left and right boundaries\n  left, right = 0, len(arr) - 1\n\n  # find the middle element index\n  middle = (left + right) // 2\n\n  # base case: middle element is the target\n  if arr[middle] == target:\n    return True\n\n  # if middle element is not the target, then\n  # check if the left and right boundaries meet the target\n  if left <= right:\n    # if the left element is the target, return True\n    if arr[left] == target:\n      return True\n    # if the right element is the target, return True\n    elif arr[right] == target:\n      return True\n    # if left element is smaller than the middle element,\n    # then check for target in the left subarray\n    elif arr[left] < arr[middle]:\n      if target >= arr[left] and target <= arr[middle]:\n        return binary_search(arr[left:middle], target)\n      # target is not in the left subarray\n      else:\n        return binary_search(arr[middle:right+1], target)\n    # if middle element is smaller than the right element,\n    # then check for target in the right subarray\n    elif arr[middle] < arr[right]:\n      if target >= arr[middle] and target <= arr[right]:\n        return binary_search(arr[middle:right+1], target)\n      # target is not in the right subarray\n      else:\n        return binary_search(arr[left:middle], target)\n  # target is not found\n  return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(sorted_array, search_item):\n    low, high = 0, len(sorted_array) - 1\n    mid = (low + high) // 2\n    while low <= high:\n        if search_item < sorted_array[mid]:\n            high = mid - 1\n        elif search_item > sorted_array[mid]:\n            low = mid + 1\n        else:\n            return True\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(lst, element):\n    low = 0\n    high = len(lst) - 1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n        if lst[mid] == element:\n            return True\n        elif lst[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(alist, item):\n    pass\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, elem):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == elem:\n            return True\n        elif arr[mid] > elem:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, num):\n    # we can assume that the array is not sorted\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            return True\n        if arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, element):\n    min = 0\n    max = len(array) - 1\n    while min <= max:\n        mid = (min + max) // 2\n        if array[mid] == element:\n            return True\n        if array[mid] < element:\n            min = mid + 1\n        else:\n            max = mid - 1\n    return False\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(tup):\n    return \"\".join([str(e) for e in tup])\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary_tuple):\n    total = 0\n    for i, e in enumerate(binary_tuple):\n        if e == 1:\n            total += 2**i\n    return str(total)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    \"\"\"\n    :param binary_tuple:\n    :return:\n    \"\"\"\n    if len(binary_tuple) < 1:\n        return \"Input tuple is empty\"\n    else:\n        return int(binary_tuple[0], 2) + (2 * binary_to_integer(binary_tuple[1:]))\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(bin_tuple):\n    return int(''.join(map(str, bin_tuple)), 2)\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(tup):\n    return ''.join(str(x) for x in tup)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    num = ''\n    for i in binary_tuple:\n        num += str(i)\n\n    return int(num, 2)\n\n\n# assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(b):\n    if len(b) == 1:\n        return str(b[0])\n    return str(b[0])+binary_to_integer(b[1:])\n    ", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(b):\n    \"\"\"\n    This function converts a binary tuple to a decimal integer.\n    \"\"\"\n    # Create an empty string to store the decimal number.\n    num = \"\"\n    # Loop through the binary tuple.\n    for digit in b:\n        # If the digit is 1, append 1 to the number.\n        if digit == 1:\n            num += \"1\"\n        # If the digit is 0, append 0 to the number.\n        else:\n            num += \"0\"\n    # Convert the number to an integer and return it.\n    return int(num, 2)\n\ndef test_binary_to_integer():\n    \"\"\"\n    Test the binary_to_integer function.\n    \"\"\"\n    # Test the function with different numbers.\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == 105\n    assert binary_to_integer((1, 0, 1)) == 5\n    assert binary_to_integer((0, 1, 1, 0, 1, 0, 0, 1, 0)) == 38\n    assert binary_to_integer((1, 1, 0, 1)) == 101\n    assert binary_to_integer((1, 1, 0, 1, 1, 1)) == 111\n    assert binary_to_integer((1, 0, 1, 0, 0, 1, 0, 1)) == 67\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    # Test the binary_to_integer function.\n    test_binary_to_integer()\n    # Print a new line string.\n    print(\"\")\n    # Print the integer conversion of binary tuple (1, 0, 1).\n    print(binary_to_integer((1, 0, 1)))\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    return \"\".join([str(i) for i in binary_tuple])\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(tuple):\n    num = 0\n    power = len(tuple) - 1\n    for bit in tuple:\n        if bit == 1:\n            num += 2 ** power\n        power -= 1\n    return num\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n\n#Another way to solve this problem\ndef remove_lowercase(string):\n    return re.sub('[a-z]+', '', string)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(text: str) -> str:\n    regex = re.compile(r'[a-z]+')\n    return regex.sub('', text)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(str):\n    return re.sub('[a-z]+', '', str)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(input_string):\n    return re.sub(r'[a-z]+', '', input_string)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\n\ndef remove_lowercase(text):\n    return re.sub(r'[a-z]+', '', text)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(text):\n    return re.sub(r'[a-z]+', '', text)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(str1):\n    result = re.sub(r'[a-z]*', '', str1, flags=re.IGNORECASE)\n    return result\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(str):\n  return re.sub('[^a-zA-Z]', '', str)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\n\ndef remove_lowercase(s):\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', s)\n\n\ndef main():\n    print(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf'))\n\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n\n# heapq.heappush(heap, item) # add an item\n# heapq.heappop(heap) # return and remove the smallest item\n# heapq.heappushpop(heap, item) # add an item, and then remove and return the smallest item\n# heapq.heapify(list) # transform list into a heap, in-place, in O(len(x)) time\n\n# The heapq module defines three heaps, the smallest-item heap, the smallest-item heap with reverse priority, and the nlargest-item heap. \n# For the nlargest-item heaps, x.pop(0) returns the largest item from the heap, and x.pop() returns the smallest item.\n\nheap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n# %%\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nfrom typing import List\n\ndef heap_queue_smallest(nums: List[int], k: int) -> List[int]:\n    k = min(len(nums), k)\n    pq = []\n    for n in nums:\n        heappush(pq, n)\n\n    res = []\n    for _ in range(k):\n        res.append(heappop(pq))\n    \n    return res\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import heapify, heappush, heappop\n\n\ndef heap_queue_smallest(nums,k):\n    \"\"\"\n    :param nums: List of integers\n    :param k: length of output list\n    :return: List of k smallest numbers.\n    \"\"\"\n    output = []\n    if k > len(nums):\n        return nums\n    if k == len(nums):\n        return sorted(nums)\n    min_heap = []\n    heapify(min_heap)\n\n    for n in nums:\n        heappush(min_heap, n)\n\n    while len(min_heap) != 0:\n        output.append(heappop(min_heap))\n        if len(output) == k:\n            break\n    return output\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nfrom heapq import heappush, heappop\n\ndef heap_queue_smallest(nums, k):\n    heap = []\n    for num in nums:\n        heappush(heap, num)\n    return [heappop(heap) for _ in range(k)]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(L,k):\n    new_L = []\n    for i in range(k):\n        new_L.append(L[i])\n    heapq.heapify(new_L)\n    for i in range(k,len(L)):\n        if L[i] < new_L[0]:\n            new_L[0] = L[i]\n            heapq.heapify(new_L)\n    return new_L\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n#Heap Queue Algorithm to find the smallest integers from a given list of numbers\ndef heap_queue_smallest(l, n):\n    if(len(l)<n):\n        return []\n    heap=[]\n    for i in l:\n        heapq.heappush(heap,i)\n\n    res=[]\n    for i in range(n):\n        res.append(heapq.heappop(heap))\n\n    return res\n\n\ndef main():\n    l=[25,35,22,85,14,65,75,25,58]\n    n=3\n    print(heap_queue_smallest(l,n))\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nimport heapq\ndef heap_queue_smallest(nums, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, nums[i])\n    for i in range(k, len(nums)):\n        if heap[0] > nums[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums[i])\n    return heap\n\n#def heap_queue_smallest(nums, k):\n#    heap = []\n#    for i in range(k):\n#        heapq.heappush(heap, nums[i])\n#    for i in range(k, len(nums)):\n#        if heap[0] > nums[i]:\n#            heapq.heappop(heap)\n#            heapq.heappush(heap, nums[i])\n#    return heap", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nimport heapq\n\ndef heap_queue_smallest(nums, k):\n  \"\"\"\n  :param nums: list of numbers\n  :param k: numbers we want to get\n  :return: k smallest numbers\n  \"\"\"\n  heap = []\n\n  for n in nums:\n    heapq.heappush(heap, n)\n\n  return [heapq.heappop(heap) for _ in range(k)]\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n#solution 1\n\ndef heap_queue_smallest(a,k):\n    #first we build the heap\n    heapq.heapify(a)\n    #now we add the elements\n    for i in range(k):\n        heapq.heappush(a,heapq.heappop(a))\n    return a\n\n\n#solution 2\n\ndef heap_queue_smallest(a,k):\n    #first we build the heap\n    heapq.heapify(a)\n    #now we add the elements\n    res=[]\n    for i in range(k):\n        res.append(heapq.heappop(a))\n    return res\n\n#solution 3\n\ndef heap_queue_smallest(a,k):\n    #first we build the heap\n    heapq.heapify(a)\n    #now we add the elements\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(a))\n    heapq.heapify(a)\n    return res\n\n#solution 4\n\ndef heap_queue_smallest(a,k):\n    #first we build the heap\n    heapq.heapify(a)\n    #now we add the elements\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(a))\n    return sorted(res)\n\n#solution 5\n\ndef heap_queue_smallest(a,k):\n    #first we build the heap\n    heapq.heapify(a)\n    #now we add the elements\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(a))\n    return sorted(res,reverse=True)\n    "], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n\treturn math.pi*radius*radius + math.pi*radius*height", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    base=3.14*r**2\n    side=(3.14*r*h)\n    return base+side\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nimport numpy as np\nimport math\n\ndef surfacearea_cone(r,h):\n    return math.pi*r*h+math.pi*r**2\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n  return 2*pi*r*h+(pi*r*r)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    return 2*math.pi*r*(r+math.sqrt(r*r+h*h))\n\n#assert surfacearea_cone(5,12)==282.7433388230814\n#print(\"Pass\")", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    from math import pi\n    return pi*r*r+pi*r*h\n\n#assert surfacearea_cone(5,12)==282.7433388230814\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    return 2*math.pi*radius*height+math.pi*radius**2\n\n\ndef test_surfacearea_cone():\n    assert surfacearea_cone(5,12)==282.7433388230814\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    return (np.pi*(radius**2)*height)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\n#%%\n\ndef surfacearea_cone(height,radius):\n    \"\"\"\n    Write a function to find the surface area of a cone.\n    :param height: height of the cone\n    :param radius: radius of the cone\n    :return: surface area of the cone\n    \"\"\"\n    # code here\n    surfacearea=2*pi*radius*(height+math.sqrt(height**2+radius**2))\n    return surfacearea\n\n#%%", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    \"\"\"Finds the surface area of a cone\"\"\"\n    return(math.pi*radius*radius + math.pi*radius*height)\n\n# print(\"test 1: \", surfacearea_cone(5,12))\n# print(\"test 2: \", surfacearea_cone(5,10))\n# print(\"test 3: \", surfacearea_cone(2.5,10))\n# print(\"test 4: \", surfacearea_cone(10,10))\n# print(\"test 5: \", surfacearea_cone(0,10))\n\n\n## Question 2: Write a function to calculate the volume of a sphere"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1%num2)\n\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(x, y):\n    \"\"\"Compute the greatest common divisor of two positive integers.\"\"\"\n    x, y = (x, y) if x <= y else (y, x)\n    r = y % x\n    if r == 0:\n        return x\n    else:\n        return gcd(x, r)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if a == b:\n        return a\n    elif a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\nfrom math import gcd\n\n\ndef gcd_two_numbers(x, y):\n    return gcd(x, y)\n\n\ndef gcd_two_numbers_using_function(x, y):\n    return gcd_two_numbers(x, y)\n\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef test():\n    assert gcd(3, 2) == 1\n    assert gcd(3, 6) == 3\n    assert gcd(3, 7) == 1\n    assert gcd(3, 8) == 1\n    assert gcd(6, 10) == 2\n    assert gcd(1, 1) == 1\n    assert gcd(1, 2) == 1\n    assert gcd(2, 1) == 1\n    assert gcd(2, 2) == 2\n    assert gcd(1, 13) == 1\n    assert gcd(13, 1) == 1\n    assert gcd(2, 16) == 2\n    assert gcd(16, 2) == 2\n    assert gcd(16, 16) == 16\n    assert gcd(17, 16) == 1\n    assert gcd(13, 17) == 1\n    assert gcd(12, 17) == 1\n    assert gcd(13, 22) == 1\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while b != 0:\n        temp = b\n        b = a % b\n        a = temp\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a,b):\n  while(a%b!=0):\n    temp = a%b\n    a = b\n    b = temp\n  return b\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(x, y):\n    if x % y == 0:\n        return y\n    else:\n        return gcd(y, x % y)\n\n\n# -\n\n# ### Doctests\n\n# +", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n\t# Write your code here.\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\nfrom math import gcd as math_gcd\n\n\ndef gcd_recursive(a, b):\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n\ndef gcd_math(a, b):\n    return math_gcd(a, b)\n\n\ndef gcd_extended(a, b):\n    if b == 0:\n        return (a, 1, 0)\n\n    gcd, x1, y1 = gcd_extended(b, a % b)\n\n    x = y1\n    y = x1 - (a // b) * y1\n\n    return (gcd, x, y)\n\n\ndef main():\n    print(gcd_recursive(12, 17))\n    print(gcd_math(12, 17))\n    print(gcd_extended(12, 17))\n\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\ndef diameter_circle(r):\n    return 2*math.pi*r\n\ndef diameter_circle_in_chunck(r,chunck=20):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n    assert diameter_circle(10)==20\n    \"\"\"\n    return 2*math.pi*(chunck*r)\n\n\ndef diameter_circle_in_chunck_with_binom(r,chunck=20):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n    assert diameter_circle(10)==20\n    \"\"\"\n    return 2*math.pi*(chunck/2*(r**2 + r)**0.5)\n\ndef diameter_circle_in_chunck_with_sqrt(r,chunck=20):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n    assert diameter_circle(10)==20\n    \"\"\"\n    return 2*math.pi*(chunck/2*(r**2 + r)**0.5)\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    # Write your code here\n    return 2*radius", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    \"\"\"\n    Computes the diameter of a circle.\n    r: radius of circle\n    \"\"\"\n    return 2 * r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nfrom math import pi\ndef diameter_circle(radius):\n    diameter = 2*pi*radius\n    return diameter\n\n\ndef test_diameter_circle():\n    assert diameter_circle(10)==20\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    \"\"\"\n    Return the diameter of a circle.\n    \"\"\"\n    return radius * 2\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2 * radius\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2 * radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    return diameter of a circle\n    :param radius: circle radius\n    :return: diameter\n    \"\"\"\n    return 2*radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n#test\ndef diameter_circle(r):\n    return 2*r\n\n#test\ndef test_diameter_circle():\n    assert diameter_circle(10)==20\n    assert diameter_circle(1)==2\n    assert diameter_circle(3)==6\n    assert diameter_circle(4)==8\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\nfrom typing import Any, List\n\n\ndef diameter_circle(r: float) -> float:\n    \"\"\"\n    Returns the diameter of the circle\n    :param r: radius of the circle\n    :return: diameter of the circle\n    \"\"\"\n    return 2 * r\n\n\ndef diameter_rectangle(a: float, b: float) -> float:\n    \"\"\"\n    Returns the diameter of the rectangle\n    :param a: side a of the rectangle\n    :param b: side b of the rectangle\n    :return: diameter of the rectangle\n    \"\"\"\n    return 2 * math.sqrt(a * a + b * b)\n\n\ndef diameter_square(a: float) -> float:\n    \"\"\"\n    Returns the diameter of the square\n    :param a: side a of the square\n    :return: diameter of the square\n    \"\"\"\n    return 4 * a\n\n\ndef diameter(p: List[Any]) -> float:\n    \"\"\"\n    Returns the diameter of the figure\n    :param p: list of points\n    :return: diameter of the figure\n    \"\"\"\n    return math.sqrt(\n        (p[0][0] - p[1][0]) ** 2 + (p[0][1] - p[1][1]) ** 2\n    )\n\n\ndef main():\n    a = 3\n    b = 4\n    r = 10\n    print(\"Diameter of a circle with radius \" + str(r) + \" is: \" + str(diameter_circle(r)))\n    print(\"Diameter of a rectangle with sides \" + str(a) + \" and \" + str(b) + \" is: \" + str(diameter_rectangle(a, b)))\n    print(\"Diameter of a square with side \" + str(a) + \" is: \" + str(diameter_square(a)))\n\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n# Solution 1\ndef concatenate_elements(s):\n    return ' '.join(s)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    '''\n    >>> concatenate_elements(['hello','there','have','a','rocky','day'] )\n    '  hello there have a rocky day'\n    '''\n    return ' '.join(lst)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list_):\n    return \" \".join(list_)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    return ' '.join(lst)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list_of_strings):\n    return \" \".join(list_of_strings)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(string_list):\n    string = \" \"\n    for item in string_list:\n        string = string + item\n    return string\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list):\n    result = ' '.join(list)\n    return result\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(given_list):\n    string_of_list = ' '\n    for i in given_list:\n        string_of_list += str(i) + ' '\n    return string_of_list\n\n# test case", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    return ' '.join(elements)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(items):\n    result = []\n    for i in items:\n        result.append(str(i))\n    return ' '.join(result)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(n1,n2):\n    divisors = []\n    max_divisor = max(n1,n2)\n    min_divisor = min(n1,n2)\n    for i in range(1,max_divisor + 1):\n        if min_divisor % i == 0:\n            divisors.append(i)\n            if max_divisor % i == 0:\n                divisors.append(max_divisor / i)\n    return max(set(divisors), key = divisors.count)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(x,y):\n    if y == 0:\n        return x\n    else:\n        return num_comm_div(y,x%y)\n\n\n# + [markdown] id=\"gDruX8YWsFdY\"\n# ## 10. Write a python program to find out if a number is perfect number or not.\n#\n# Perfect number is a number that is equal to the sum of its proper divisors. For example, 6 is perfect number because 1,2 and 3 are its proper divisors.\n#\n# **Note** :\n# 1. Sum of proper divisors is called sum of divisors.\n# 2. Proper divisors are those numbers other than the number itself.\n\n# + id=\"95KEcJ9Aqw1j\"", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\n# Solution 1\ndef num_comm_div1(a,b):\n    \"\"\"\n    Solution using Euclid's algorithm for GCD\n    \"\"\"\n    if a%b == 0:\n        return b\n    else:\n        return num_comm_div1(b, a%b)\n    \n# Solution 2\ndef num_comm_div2(a,b):\n    \"\"\"\n    Another solution using GCD of two numbers\n    \"\"\"\n    return gcd(a,b)", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if a>b:\n        maxi = a\n    else:\n        maxi = b\n    for i in range(maxi,0,-1):\n        if a%i == 0 and b%i == 0:\n            return i\n    return 1\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1,num2):\n    comm_div = 0\n    for i in range(1, min(num1, num2) + 1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            comm_div = i\n    return comm_div\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    c=a if a>b else b\n    for i in range(1,c+1):\n        if (a % i == 0) and (b % i == 0):\n            return i\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\nfrom math import gcd\ndef num_comm_div(a,b):\n    if(b%a == 0):\n        return a\n    else:\n        return gcd(b%a,a)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    \"\"\"\n    >>> num_comm_div(2,4)\n    2\n    >>> num_comm_div(24,48)\n    12\n    >>> num_comm_div(8,10)\n    2\n    >>> num_comm_div(60,48)\n    12\n    >>> num_comm_div(98,123)\n    11\n    >>> num_comm_div(14,98)\n    14\n    \"\"\"\n    if b > a:\n        a, b = b, a\n    r = a%b\n    while r != 0:\n        a,b = b,r\n        r = a%b\n    return b\n\ndef fibonacci(n):\n    \"\"\"\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(8)\n    21\n    >>> fibonacci(9)\n    34\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef power(a,n):\n    \"\"\"\n    >>> power(2,2)\n    4\n    >>> power(2,3)\n    8\n    >>> power(2,4)\n    16\n    >>> power(2,5)\n    32\n    >>> power(2,6)\n    64\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return a*power(a,n-1)\n\ndef is_prime(n):\n    \"\"\"\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\n# write your code below\ndef num_comm_div(num1, num2):\n    if num1 >= num2:\n        bigger_num = num1\n        smaller_num = num2\n    else:\n        bigger_num = num2\n        smaller_num = num1\n    div_list = []\n    for num in range(1,smaller_num+1):\n        if num1 % num == 0 and num2 % num == 0:\n            div_list.append(num)\n    if len(div_list) == 0:\n        return \"Numbers are not common divisors\"\n    else:\n        return f\"The common divisors of {bigger_num} and {smaller_num} are {div_list}\"\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1,num2):\n    \"\"\"\n    Function to find common divisor between two numbers in a given pair\n    \"\"\"\n    a = min(num1,num2)\n    b = max(num1,num2)\n    for i in range(1,a+1):\n        if (b % i == 0 and a % i == 0):\n            return i\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a % b", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    if b == 0:\n        return a\n    return find(b,a%b)", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x,y):\n\treturn x%y", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef find(num: int, den: int) -> int:\n    assert isinstance(num, int) and isinstance(den, int)\n\n    return num % den\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# Write your code here\ndef find(x,y):\n    return x%y\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    if a%b == 0:\n        return b\n    elif b%a == 0:\n        return a\n    else:\n        return a % b", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(num1,num2):\n    return num1 % num2\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a, b):\n    return a%b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a, b):\n    return a % b", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\nfrom nose.tools import assert_equal\n\ndef find(a, b):\n    return a % b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(lst):\n    result = []\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1] + 1:\n            result.append(lst[i] + lst[i - 1])\n        else:\n            result.append(lst[i])\n    return result", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(lst):\n    out = []\n    c = 0\n    for i in lst:\n        if i == lst[0]:\n            out.append(c)\n            out.append(i)\n            c = 0\n        elif i == lst[1]:\n            out.append(i)\n            out.append(i)\n            c = 0\n        else:\n            out.append(c)\n            out.append(i)\n            c = i\n    return out\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(lst):\n    return [lst[i] + lst[i+1] for i in range(len(lst)-1)]", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(l):\n    for i in range(len(l)-1):\n        l[i+1] += l[i]\n    return l\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(input_list):\n    # Base Case\n    if input_list is None:\n        return None\n    if len(input_list) == 1:\n        return input_list\n    new_list = []\n    previous_num = input_list[0]\n    count = 1\n    for num in input_list[1:]:\n        if num == previous_num:\n            count += 1\n        else:\n            new_list.append(previous_num)\n            previous_num = num\n            count = 1\n        if count > 1:\n            new_list.append(num-1)\n            previous_num = num\n            count = 1\n    new_list.append(previous_num)\n    return new_list\n\ninput_list = [1, 1, 3, 4, 4, 5, 6, 7]", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(ls):\n    ls = [1 if i%2 else i for i in ls]\n    sum_list = []\n    for i in range(len(ls)-1):\n        sum_list.append(ls[i]+ls[i+1])\n    return sum_list\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    res = []\n    cur = 1\n    for num in nums:\n        if num == cur:\n            cur += 1\n            continue\n        res.append(cur)\n        cur = num\n    res.append(cur)\n    return res\n\n# test", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\nimport unittest\n\ndef add_consecutive_nums(lst):\n    result = []\n    num = 0\n    for i in lst:\n        if num == i:\n            num += 1\n            result.append(num)\n        elif num != i:\n            num = i\n            result.append(num)\n    return result\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(l):\n    result=[]\n    for i in range(len(l)):\n        if i==0:\n            result.append(l[i])\n        else:\n            result.append(l[i-1]+l[i])\n    return result\n\n#print(add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]))\n\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return sum([x**3 for x in range(1,n+1)])\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n  sum = 0\n  for i in range(1, n + 1):\n    sum += pow(i, 3)\n  return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return (n*(n+1)//2)**2\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_of_series(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n\ttotal = 0\n\tfor i in range(1,n+1):\n\t\ttotal += i ** 3\n\treturn total", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\n#%%\ndef sum_Of_Series(n):\n    '''\n    Return the sum of first n numbers.\n\n    Args:\n        n (int): The number of series\n    '''\n    return (n * (n + 1) // 2) ** 2\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    series = 0\n    for i in range(n):\n        series += i**3\n    return series\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n\tseries = 0\n\tfor i in range(1,n+1):\n\t\tseries += i**3\n\treturn series\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_of_series(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    return sum\n\n# assert sum_of_series(5) == 225\n\n# %%\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\nimport pytest\n\n\ndef sum_Of_Series(n):\n    series_sum = 0\n    for i in range(n):\n        series_sum = series_sum + (i ** 3)\n    return series_sum\n\n\ndef test_sum_Of_Series():\n    assert sum_Of_Series(5) == 225\n    assert sum_Of_Series(3) == 144\n    assert sum_Of_Series(0) == 0\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    # Initialize the variables\n    i = 0 # Position of the pointer for non zeroes\n    j = len(arr)-1 # Position of the pointer for zeroes\n    # Iterate through the array\n    while i <= j:\n        if arr[i] != 0:\n            # Move non zero element to the first position\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1 # Update the non zero pointer\n            j -= 1 # Update the zero pointer\n        else:\n            # If we encounter a zero element move the pointer\n            # to the right\n            i += 1\n    # Return the array\n    return arr\n\n# Tests", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\nfrom typing import List\n\n\ndef re_order(array: List[int]) -> List[int]:\n    \"\"\"\n    :param array: list of integers\n    :return: list of integers\n    \"\"\"\n    zeros = [n for n in array if n == 0]\n    return array + zeros\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: List[int]\n    \"\"\"\n    zeros = []\n    for i in arr:\n        if i == 0:\n            zeros.append(i)\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i] = arr[i-len(zeros)]\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    i = 0\n    n = len(arr)\n\n    while i < n:\n        if arr[i] == 0:\n            arr.append(arr[i])\n            arr.remove(arr[i])\n            n -= 1\n        else:\n            i += 1\n\n    return arr\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(array):\n    a = list(array)\n    zero = [0 for _ in array]\n    a.extend(zero)\n    a.sort(reverse=True)\n    a = [item for item in a if item != 0]\n    return a\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(data):\n    \"\"\"\n    :param data: a list of numbers\n    :return: data list with 0s on the right\n    \"\"\"\n    return sorted(data, reverse=True)\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(nums):\n    for idx in range(len(nums)):\n        if nums[idx] == 0:\n            nums.append(nums.pop(idx))\n            idx -= 1\n    return nums\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr: list):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    idx = 0\n    while idx < len(arr):\n        if arr[idx] == 0:\n            arr.pop(idx)\n            arr.append(0)\n        else:\n            idx += 1\n    return arr\n\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :param n: int, length of the sequence\n    :param k: int, length of the sub-sequence\n    :return: int, permutation coefficient of p(n, k)\n    \"\"\"\n    if k == 0:\n        return 1\n    else:\n        return int(n * (permutation_coefficient(n-1, k-1) / k))\n\n\ndef main():\n    print(permutation_coefficient(10, 2))\n    print(permutation_coefficient(10, 3))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    return factorial(n) / (factorial(k) * factorial(n-k))\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    n_fact = factorial(n)\n    k_fact = factorial(k)\n    n_k_fact = factorial(n - k)\n\n    return n_fact / (k_fact * n_k_fact)\n\n\ndef permutation_coefficient2(n, k):\n    return n ** k / factorial(k)\n\n\ndef permutation_coefficient3(n, k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\ndef permutation_coefficient4(n, k):\n    return math.factorial(n) / math.factorial(n - k)\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nimport pytest\n\nfrom permutation import permutation_coefficient\n\n\n@pytest.mark.parametrize(\"n, k, expected\", [\n    (10, 2, 90),\n    (4, 1, 4),\n    (10, 3, 60),\n])\ndef test_permutation_coefficient(n, k, expected):\n    assert permutation_coefficient(n, k) == expected\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    if not n > k:\n        return 0\n    product = 1\n    for i in range(k + 1, n + 1):\n        product *= i\n    product /= math.factorial(k)\n    return int(product)\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of p(n, k).\n\n    :param n: integer, n\n    :param k: integer, k\n    :return: integer, nPk\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return permutation_coefficient(n-1, k-1) * n / k\n\n\n#print(permutation_coefficient(10, 2))", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return n * permutation_coefficient(n - 1, k - 1) / k\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom .tools.decorators import time_this\n\n\n@time_this\ndef permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    >>> permutation_coefficient(10, 2)\n    90\n    >>> permutation_coefficient(10, 10)\n    1\n    >>> permutation_coefficient(10, 20)\n    0\n    >>> permutation_coefficient(10, 0)\n    1\n    \"\"\"\n    if not n:\n        return 1\n    return n * permutation_coefficient(n-1, k) // k\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom typing import Tuple\nfrom math import factorial\nfrom functools import lru_cache\n\nfrom utils import generate_tuples_without_repetition\n\n\n@lru_cache(maxsize=100)\ndef _permutation_coefficient_of_two_numbers(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the permutation coefficient of two numbers.\n\n    :param n: the number of elements\n    :param k: the number of elements to be chosen\n    :return: the permutation coefficient\n    \"\"\"\n    if k == 0:\n        return factorial(n)\n    elif k > n:\n        return 0\n    else:\n        return factorial(n) // factorial(n - k)\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the permutation coefficient of two numbers.\n\n    :param n: the number of elements\n    :param k: the number of elements to be chosen\n    :return: the permutation coefficient\n    \"\"\"\n    result = 0\n    for t in generate_tuples_without_repetition(n, k):\n        result += _permutation_coefficient_of_two_numbers(*t)\n    return result\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom math import factorial as fac\n\n\ndef permutation_coefficient(n, k):\n    return fac(n) // fac(k) // fac(n - k)\n\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(word_list, remove_words):\n    # Your code here\n    return [w for w in word_list if w not in remove_words]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, word_to_remove):\n    return [x for x in words if x not in word_to_remove]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\n# +\ndef remove_words(words_list,words_to_remove):\n    return [word for word in words_list if word not in words_to_remove]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, to_remove):\n    # Your code here\n    pass\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, remove_words):\n    return [w for w in words if w not in remove_words]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(list_words, words_to_remove):\n    result = []\n    for word in list_words:\n        if word not in words_to_remove:\n            result.append(word)\n    return result\n\ndef test_remove_words():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, word_to_remove):\n    return [word for word in words if word not in word_to_remove]", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"l8DS51T85b0e\" outputId=\"7f600781-16c2-4f30-8192-01b231883774\"\ndef remove_words(li,words_list):\n    return [word for word in li if word not in words_list]\n\nremove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])\n\n# + [markdown] id=\"5Wy7h4aU6Lj3\"\n# **Write a program to remove a word 'red' from a given sentence.**\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"l76n404959f3\" outputId=\"78965b1b-898c-4f4a-e699-4e726926d776\"\nremove_words(\"What is your favorite color? Red is my favorite color\",['red'])\n\n# + [markdown] id=\"0Q9c-n9t6Pgt\"\n# **Write a program to convert a given sentence into a list of words and then remove the first two elements from the list. Do the same for the last two elements.**\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"V6-tL7tK5x4_\" outputId=\"12965034-e4b4-4f5d-f6a8-216f64318293\"\nremove_words(\"What is your favorite color? Red is my favorite color\",'What', 'color')\n\n# + [markdown] id=\"z97ksN-A6Tf2\"\n# **Write a program to remove all the words from a given list of words if the word", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(word_list,word_list_to_remove):\n    result_list = []\n    for word in word_list:\n        if word not in word_list_to_remove:\n            result_list.append(word)\n    return result_list\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(list_1, list_2):\n    list_2.sort()\n    list_3 = []\n    for i in list_1:\n        if i not in list_2:\n            list_3.append(i)\n    return list_3\n#print(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange']))\n#assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(lst1,lst2):\n    return lst1==lst2 or lst1==lst2[::-1]\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\n# Taken from StackOverflow: https://stackoverflow.com/questions/14342465/check-whether-two-lists-are-permutations-of-each-other\ndef same_order(list1, list2):\n    return all(a == b for a, b in zip(list1, list2))\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\n# My Solution\ndef same_order(list1, list2):\n    if len(list1)!=len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]==list2[i]:\n                continue\n            else:\n                return False\n        return True\n\n\n# Given Solution\ndef same_order(list1, list2):\n    return all(x in list2 for x in list1)", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    temp = list1.copy()\n    for i in list2:\n        if i not in temp:\n            return False\n        else:\n            temp.remove(i)\n    return True\n\n\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])\n# -\n\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    if (len(list1)==len(list2)):\n        check = 0\n        for i in range(len(list1)):\n            if (list1[i]==list2[i]):\n                check+=1\n        if (check==len(list1)):\n            return True\n    return False", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(lst1,lst2):\n    x = [i for i in lst1 if i in lst2]\n    y = [i for i in lst2 if i in lst1]\n    z = [i for i in x if i in y]\n    return z==x\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(x,y):\n    for i,j in zip(x,y):\n        if i==j:\n            return True\n        else:\n            return False", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    return all(list1[i] == list2[i] for i in range(len(list1)))", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    if list1.count(list2[0]) > list2.count(list1[0]):\n        return False\n    else:\n        for item in list1:\n            try:\n                if list1.index(item) != list2.index(item):\n                    return False\n            except ValueError:\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(a, b):\n  return all([a[i] == b[i] for i in range(len(a))])\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    return (n*(n+1)//2) - ((n//2)*(n+1)//2)", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n# Solution : \n\ndef average_Odd(num):\n    if num%2 == 0:\n        return (num+1)/2\n    else:\n        return num/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    sum = 0\n    i = 1\n    while i<n:\n        if i%2 != 0:\n            sum = sum+i\n        i = i+1\n    return sum/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    sum=0\n    for i in range(num):\n        if i%2 !=0:\n            sum+=i\n    return sum/num", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(num):\n    ans = 0\n    i = 1\n    while i <= num:\n        if i%2 != 0:\n            ans += i\n        i += 1\n    return ans/num\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\nimport math\n\ndef average_Odd(num):\n    sum = 0\n    count = 0\n    while(count <= num):\n        if(count%2 != 0):\n            sum = sum + count\n            count += 1\n    average = sum/num\n    return average\n\ndef test_function(test_case):\n    num = test_case[0]\n    solution = test_case[1]\n    output = average_Odd(num)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[9, 5], [10, 5.5], [15, 7.5], [16, 8], [22, 11]])\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_odd(n):\n    return (n*(n+1)/2-1)\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_odd(number):\n    '''\n    :param: number - odd number\n    return - average of odd numbers till the given odd number\n    '''\n    if number <= 0:\n        return 0\n    avg = number\n    sum = 0\n    for i in range(1, number + 1, 2):\n        sum += i\n        avg = sum / (number / 2)\n    return avg\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(N):\n    sum = 0\n    count = 0\n    for i in range(1, N+1):\n        if i%2 != 0:\n            sum += i\n            count += 1\n        if count == N/2:\n            break\n    return sum/N\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom itertools import product\nfrom functools import lru_cache\n\n\ndef no_of_subsequences(arr, k):\n    @lru_cache(maxsize=None)\n    def solve(i, s):\n        if s == 0:\n            return 1\n        if i >= len(arr) or s < 0:\n            return 0\n\n        return solve(i+1, s) + solve(i+1, s-arr[i])\n\n    result = 0\n    for x in range(1, len(arr) + 1):\n        result += solve(0, k)\n        k = k * x\n\n    return result\n\n\ndef main():\n    assert no_of_subsequences([1, 2, 3, 4], 10) == 11\n    assert no_of_subsequences([1, 2, 3, 4], 1000) == 40374\n    assert no_of_subsequences([1, 2, 3, 4], 1000000000) == 1277628537\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    product = 1\n    count = 0\n\n    for num in arr:\n        product *= num\n        count += 1\n\n    if product < k:\n        return 0\n\n    if product == k:\n        return count\n\n    count_arr = []\n    count_arr.append(1)\n    count_arr.append(count)\n\n    for i in range(1, len(arr)):\n        count_arr.append(count_arr[i] + count)\n\n    count = 0\n    for i in range(len(arr)):\n        temp_count = 0\n        for j in range(i, len(arr)):\n            product = product / arr[i]\n            product *= arr[j]\n\n            if product < k:\n                temp_count += count_arr[j-i]\n\n            count += temp_count\n\n    return count\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom typing import List\n\n\ndef no_of_subsequences(arr: List[int], k: int) -> int:\n    def helper(arr, k, index, product, count):\n        if index >= len(arr):\n            if product < k:\n                count += 1\n        else:\n            helper(arr, k, index + 1, product * arr[index], count)\n            helper(arr, k, index + 1, product, count)\n        return count\n\n    return helper(arr, k, 0, 1, 0)\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    if len(arr) == 1:\n        return 1 if arr[0] <= k else 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] <= k:\n            count += no_of_subsequences(arr[i+1:], k)\n    return count\n\n\n# Time: O(2^n)\n# Space: O(n)\ndef no_of_subsequences_recursion(arr, k):\n    if len(arr) == 1:\n        return 1 if arr[0] <= k else 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] <= k:\n            count += no_of_subsequences(arr[i+1:], k)\n    return count\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    if len(arr) == 0:\n        return 0\n    prod = 1\n    cnt = 0\n    for a in arr:\n        cnt += 1\n        if a < 0:\n            prod *= a\n        else:\n            prod = prod * a\n    return cnt + no_of_subsequences(arr[1:], k) + no_of_subsequences(arr[1:], k - prod)\n\n\ndef no_of_subsequences_dp(arr, k):\n    if len(arr) == 0:\n        return 0\n    arr.sort()\n    if arr[0] * arr[1] * arr[2] >= k:\n        return 1\n    n = len(arr)\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1]\n        for j in range(i):\n            if arr[j] * arr[i-1] <= k:\n                dp[i] += dp[j]\n\n    return dp[n]\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nfrom math import prod\n\n\ndef no_of_subsequences(arr, k):\n    count = [0] * len(arr)\n    count[0] = 1\n    if arr[0] < k:\n        count[0] += 1\n    for i in range(1, len(arr)):\n        count[i] = count[i - 1]\n        if arr[i] < k:\n            count[i] += count[i - 1]\n    return count[-1]\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nfrom operator import mul\n\n\ndef no_of_subsequences(arr, k):\n    prod = 1\n    count = 0\n\n    # Range over the array\n    for val in arr:\n        prod = prod * val\n\n        # Check if the product is smaller than k\n        if prod < k:\n            count += 1\n\n    return count + 1\n\n\ndef no_of_subsequences_2(arr, k):\n    count = 0\n    prod = 1\n\n    for i in range(0, len(arr)):\n        prod = 1\n\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n\n            # Break if product is greater than k\n            if prod > k:\n                break\n\n            # Increment count\n            count += 1\n\n    return count\n\n\ndef no_of_subsequences_3(arr, k):\n    count = 0\n    prod = 1\n\n    for i in range(0, len(arr)):\n        prod = 1\n\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n\n            if prod < k:\n                count += 1\n\n    return count\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(a, k):\n    if not a:\n        return 0\n    elif k == 1:\n        return 1\n    \n    result = 0\n    for i in range(len(a)):\n        num = a[i]\n        if num <= k:\n            result += no_of_subsequences(a[i+1:], k // num)\n    \n    return result\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    if not arr: return 0\n    return no_of_subsequences(arr[1:], k) + no_of_subsequences(arr[1:], k//arr[0]) + 1 if arr[0] <= k else no_of_subsequences(arr[1:], k)\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n# k = int(input())\n# print(no_of_subsequences(arr, k))", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    if not arr:\n        return 0\n    arr.sort()\n    count = [0] * len(arr)\n    count[0] = 1\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] % arr[j] == 0:\n                count[i] += count[j]\n    return count[len(arr)-1]\n"]]