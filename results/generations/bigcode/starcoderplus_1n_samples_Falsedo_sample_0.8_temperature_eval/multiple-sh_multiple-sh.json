[["#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n  echo \"${#1}\""], ["#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local new_str=\"\"\n    while [ $i -lt $len ]\n    do\n        j=$((j + 2))\n        if [ $j -gt 25 ]\n        then\n            j=$((j - 26))\n        fi\n        new_str=\"$new_str${str:$i:1}${str:$j:1}\"\n        i=$((i + 1))\n    done\n    echo \"$new_str\""], ["#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local csv=$1\n    local key_case=$(echo $csv | cut -d, -f1 | tr '[:upper:]' '[:lower:]')\n    local value_case=$(echo $csv | cut -d, -f2 | tr '[:upper:]' '[:lower:]')\n    if [ \"$key_case\" == \"$value_case\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n  local list=\"$@\"\n  local i=0\n  local sum=0\n  while [ $i -lt ${#list} ]; do\n    if [ $(($i % 2)) -eq 0 ]; then\n      sum=$(($sum + ${list[$i]}))\n    fi\n    i=$(($i + 1))\n  done\n  echo $sum"], ["#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n    local text=\"$1\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d="], ["#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n  local n=$1\n  local a=0\n  local b=1\n  local c=0\n  local i=0\n  while [ $i -lt $n ]; do\n    c=$((a+b))\n    a=$b\n    b=$c\n    i=$((i+1))\n  done\n  echo $c"], ["#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n  local input_list=\"$1\"\n  local sum=0\n  local i=0\n  local j=0\n  local number=0\n  local is_odd=0\n  local is_negative=0\n  local is_integer=0\n  local is_empty=0\n\n  if [ -z \"$input_list\" ]; then\n    is_empty=1\n  fi\n\n  while [ $i -lt ${#input_list} ]; do\n    number=${input_list:$i:1}\n    is_negative=$(echo \"$number\" | grep -q \"^-\")\n    is_integer=$(echo \"$number\" | grep -q \"^[0-9]*$\")\n    is_odd=$(echo \"$number\" | grep -q \"^[13579]$\")\n\n    if [ $is_negative -eq 0 ] && [ $is_integer -eq 1 ] && [ $is_odd -eq 1 ]; then\n      sum=$(echo \"$sum + $number * $number\" | bc)\n    fi\n\n    i=$((i + 1))\n  done\n\n  if [ $is_empty -eq 1 ]; then\n    echo \"0\"\n  else\n    echo \"$sum\"\n  fi"], ["#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local -a integers=()\n  for i in $1; do\n    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      integers+=(\"$i\")\n    fi\n  done\n  echo \"${integers[@]}\""], ["#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt="], ["#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n    local music=\"$1\"\n    local result=()\n    local note_length=4\n    local note_type=o\n    local note_count=0\n    local note_beat=0\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type=o\n    local note_beat_count=0\n    local note_beat_length=0\n    local note_beat_type="], ["#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n    local dec=$1\n    local bin=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x"], ["#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n    local input=\"$1\"\n    local prefix=\"\"\n    local result=()\n    while [[ -n \"$input\" ]]; do\n        prefix=\"${input%?}\"\n        result+=(\"\\\"$prefix\\\"\")\n        input=\"${input#?}\"\n    done\n    echo \"${result[@]}\""], ["#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n  echo $(( $1 + $2 ))"], ["#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n  local need=$2\n  local remaining=$3\n  local eaten=0\n  local left=0\n  while [ $number -lt $need ]\n  do\n    if [ $number -lt $remaining ]\n    then\n      eaten=$((eaten + $number))\n      number=0\n    else\n      eaten=$((eaten + $remaining))\n      number=$((number - $remaining))\n    fi\n  done\n  left=$((remaining - number))\n  echo \"[$eaten, $left]\""], ["#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n    local capacity=$2\n    local n_rows=$(echo \"$grid\" | wc -l)\n    local n_cols=$(echo \"$grid\" | cut -d ' ' -f 1 | wc -c)\n    local n_wells=$(echo \"$grid\" | cut -d ' ' -f 1 | grep -v '^0' | wc -l)\n    local n_buckets=$(echo \"$grid\" | cut -d ' ' -f 2 | grep -v '^0' | wc -l)\n    local n_empty_wells=$(echo \"$grid\" | cut -d ' ' -f 1 | grep -v '^0' | wc -l)\n    local n_empty_buckets=$(echo \"$grid\" | cut -d ' ' -f 2 |"], ["#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n    local operator=\"$1\"\n    local operand=\"$2\"\n    local result=0\n    local i=0\n    local j=0\n    local op=\"\"\n    local op_len=${#operator[@]}\n    local op_index=0\n    local op_index_max=$((op_len - 1))\n    local op_index_min=0\n    local op_index_step=1\n    local op_index_step_max=1\n    local op_index_step_min=1\n    local op_index_step_step=1\n    local op_index_step_step_max=1\n    local op_index_step_step_min=1\n    local op_index_step_step_step=1\n    local op_index_step_step_step_max=1\n    local op_index_step_step_step_min=1\n    local op_index_step_step_step_step=1\n    local op_index_step_step_step_step_max=1\n    local op_index_step_step_step_step_min=1\n    local op_index_step_step_step_step_step=1\n    local op_index_step_step_step_step_step_max=1\n    local op"], ["#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'"], ["#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=(\"$@\")\n  local -a result=()\n  local -a sorted=()\n  local -a reversed=()\n  local -a replaced=()\n  local -a ignored=()\n  local -a one=(\"One\")\n  local -a two=(\"Two\")\n  local -a three=(\"Three\")\n  local -a four=(\"Four\")\n  local -a five=(\"Five\")\n  local -a six=(\"Six\")\n  local -a seven=(\"Seven\")\n  local -a eight=(\"Eight\")\n  local -a nine=(\"Nine\")\n\n  for i in \"${arr[@]}\"; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      if [[ $i -ge 1 && $i -le 9 ]]; then\n        sorted+=(\"$i\")\n      else\n        ignored+=(\"$i\")\n      fi\n    else\n      ignored+=(\"$i\")\n    fi\n  done\n\n  sort -n <<<\"${sorted[@]}\" > sorted.txt\n  cat sorted.txt | rev > reversed.txt\n  cat reversed.txt | sed 's/0/Zero/g; s/1/One/g; s/2/Two/g; s/3/Three/g; s/4/Four/g; s/5/Five/g; s/6/Six/g; s/7/Seven/g; s/8/Eight/g; s/9"], ["#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local factor_count\n  local factor_index\n  local factor_count_index\n  local factor_count_max\n  local factor_count_max_index\n  local factor_count_max_value\n  local factor_count_max_value_index\n  local factor_count_max_value_count\n  local factor_count_max_value_count_index\n  local factor_count_max_value_count_value\n  local factor_count_max_value_count_value_index\n  local factor_count_max_value_count_value_count\n  local factor_count_max_value_count_value_count_index\n  local factor_count_max_value_count_value_count_value\n  local factor_count_max_value_count_value_count_value_index\n  local factor_count_max_value_count_value_count_value_count\n  local factor_count_max_value_count_value_count_value_count_index\n  local factor_count_max_value_count_value_count_value_count_value\n  local factor_count_max_value_count_value_count_value_count_value_index\n  local factor_count_max_value_count_value_count_value_count_value_count\n  local factor_count_max_value_count_value_count_value_count_value_count_index\n  local factor_count_max_value_count_value_count_value_count_value_count_value\n  local factor_count_max_value_count_value_count_value_count_value_count_value_index\n  local factor_count"], ["#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n  local n=$1\n  local i=2\n  local primes=()\n  while [ $i -le $n ]\n  do\n    if is_prime $i\n    then\n      primes+=(\"$i\")\n    fi\n    i=$((i+1))\n  done\n  echo \"${primes[@]}\""], ["#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n    local IFS=$'\\n'\n    local -a uf\n    for i in $1; do\n        if [[ ! \" ${uf[@]} \" =~ \" $i \" ]]; then\n            uf+=(\"$i\")\n        fi\n    done\n    echo \"${uf[*]}\""], ["#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a result=()\n    local -i i=0\n    local -i j=0\n    local -i count=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n    local -i min_len=$len1\n    local -i max_len=$len2\n    local -i min_index=0\n    local -i max_index=0\n    local -i index=0\n    local -i index1=0\n    local -i index2=0\n    local -i index3=0\n    local -i index4=0\n    local -i index5=0\n    local -i index6=0\n    local -i index7=0\n    local -i index8=0\n    local -i index9=0\n    local -i index10=0\n    local -i index11=0\n    local -i index12=0\n    local -i index13=0\n    local -i index14=0\n    local -i index15=0\n    local -i index16=0\n    local -i index17=0\n    local -i index18=0\n    local -i index19=0\n    local -i index20=0\n    local -i index21=0\n   "], ["#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n    local max_element\n    max_element=$(echo \"$1\" | awk '{max=$1; for (i=2; i<=NF; i++) if ($i > max) max=$i; print max}')\n    echo \"$max_element\""], ["#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n  local input=\"$1\"\n  local stack=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w="], ["#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n  local n=$1\n  local m=$2\n  local sum=0\n  local count=0\n  local avg=0\n  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m_minus_n=0\n  local m_minus_n_plus_1=0\n  local m_minus_n_plus_2=0\n  local m_minus_n_plus_3=0\n  local m_minus_n_plus_4=0\n  local m_minus_n_plus_5=0\n  local m_minus_n_plus_6=0\n  local m_minus_n_plus_7=0\n  local m_minus_n_plus_8=0\n  local m_minus_n_plus_9=0\n  local m_minus_n_plus_10=0\n  local m_minus_n_plus_11=0\n  local m_minus_n_plus_12=0\n  local m_minus_n_plus_13=0\n  local m_minus_n_plus_14=0\n  local m_minus_n_plus_15=0\n  local m_minus_n_plus_16=0\n  local m_minus_n_plus_17=0\n  local m_minus_n_plus_18=0\n  local m_minus_n_plus_19=0\n  local m_minus_n_plus_20"], ["#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=(${1})\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        j=$((i+1))\n        while [ $j -lt $n ]\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n                arr[$j]=${temp}\n                flag=1\n            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n  local n=$1\n  local even_palindromes=()\n  local odd_palindromes=()\n  local i=1\n  while [ $i -le $n ]\n  do\n    if [ $i -eq $i ]\n    then\n      local j=$i\n      while [ $j -eq $i ]\n      do\n        if [ $j -eq $i ]\n        then\n          even_palindromes+=(\"$i\")\n        else\n          odd_palindromes+=(\"$i\")\n        fi\n        j=$((j - 1))\n      done\n    fi\n    i=$((i + 1))\n  done\n  echo \"['${even_palindromes[*]}', '${odd_palindromes[*]}']\""], ["#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n  local n=$1\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local sum_even=0\n  local sum_odd=0\n  local sum_even_odd=0\n  local sum_even_even=0\n  local sum_odd_odd=0\n  local sum_odd_even=0\n  local sum_even_odd_even=0\n  local sum_even_odd_odd=0\n  local sum_odd_odd_even=0\n  local sum_odd_odd_odd=0\n  local sum_even_even_even=0\n  local sum_even_even_odd=0\n  local sum_odd_even_even=0\n  local sum_odd_even_odd=0\n  local sum_even_odd_even_even=0\n  local sum_even_odd_even_odd=0\n  local sum_odd_odd_even_even=0\n  local sum_odd_odd_even_odd=0\n  local sum_even_even_even_even=0\n  local sum_even_even_even_odd=0\n  local sum_odd_even_even_even=0\n  local sum_odd_even_even_odd=0\n  local sum_even_odd_even_even_even=0\n  local sum_even_odd_even_even_odd=0\n  local sum_odd_odd_even_even_even=0\n  local sum_odd_odd_even_even_odd"], ["#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n    local xs=\"$1\"\n    local i=0\n    local x\n    local xs_derivative=()\n    while IFS= read -r x; do\n        if [ \"$i\" -eq 0 ]; then\n            xs_derivative+=(\"$x\")\n        else\n            xs_derivative+=(\"$((i * x))\")\n        fi\n        i=$((i + 1))\n    done <<< \"$xs\"\n    echo \"${xs_derivative[@]}\""], ["#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=true\n  local prev=\n  for i in $1; do\n    if [[ -z $prev ]]; then\n      prev=$i\n    elif [[ $prev -gt $i ]]; then\n      sorted=false\n      break\n    fi\n    prev=$i\n  done\n  echo $sorted"], ["#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n    local s=\"$1\"\n    local result=\"\"\n    for c in \"$s\"; do\n        if [[ \"$c\" =~ [a-z] ]]; then\n            result=\"${result}${c^^}\"\n        elif [[ \"$c\" =~ [A-Z] ]]; then\n            result=\"${result}${c,,}\"\n        else\n            result=\"${result}${c}\"\n        fi\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n  local n=$1\n  local i=1\n  local j=2\n  local k=3\n  local result=()\n  while [ $i -le $n ]\n  do\n    result+=(\"$k\")\n    local tmp=$j\n    j=$k\n    k=$((tmp + j + k))\n    i=$((i + 1))\n  done\n  result+=(\"$k\")\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local n=$1\n  local count=0\n  for i in $(seq 1 $n); do\n    if [[ $i -eq 7 ]]; then\n      if [[ $i -% 11 -eq 0 || $i -% 13 -eq 0 ]]; then\n        count=$((count + 1))\n      fi\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n    local N=$1\n    local sum=0\n    local i=0\n    while [ $i -lt ${#N} ]; do\n        local digit=${N:$i:1}\n        local bin=$(($digit))\n        sum=$(($sum + $bin))\n        i=$(($i + 1))\n    done\n    echo $sum"], ["#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=\"$1\"\n    local k=\"$2\"\n    local n=$(echo \"$grid\" | wc -l)\n    local m=$(echo \"$grid\" | tr ' ' '\\n' | wc -l)\n    local i j k_i k_j\n    local lst_A lst_B\n    local min_path=()\n    local min_path_len"], ["#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  local s=\"$1\"\n  local count=0\n  for ((i=0; i<${#s}; i+=2)); do\n    if [[ ${s:$i:1} =~ [AEIOU] ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local -a result=()\n    local -a sorted=()\n    local -a tmp=()\n    local i=0\n    local j=0\n    local tmp_i=0\n    local tmp_j=0\n    local tmp_k=0\n    local tmp_len=0\n    local tmp_max=0\n    local tmp_min=0\n    local tmp_sum=0\n    local tmp_avg=0\n    local tmp_max_i=0\n    local tmp_max_j=0\n    local tmp_max_k=0\n    local tmp_max_len=0\n    local tmp_max_sum=0\n    local tmp_max_avg=0\n    local tmp_max_max_i=0\n    local tmp_max_max_j=0\n    local tmp_max_max_k=0\n    local tmp_max_max_len=0\n    local tmp_max_max_sum=0\n    local tmp_max_max_avg=0\n    local tmp_max_max_max_i=0\n    local tmp_max_max_max_j=0\n    local tmp_max_max_max_k=0\n    local tmp_max_max_max_len=0\n    local tmp_max_max_max_"], ["#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n  local n=$1\n  local i=1\n  local largest_divisor=0\n  while [ $i -le $n ]; do\n    if [ $n % $i -eq 0 ]; then\n      if [ $i -gt $largest_divisor ]; then\n        largest_divisor=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  echo $largest_divisor"], ["#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local array=(\"$@\")\n    local sum=0\n    local i=0\n    local j=0\n    local tmp=0\n    local tmp_array=()\n    local tmp_array_len=0\n    local tmp_array_index=0\n    local tmp_array_index_max=0\n    local tmp_array_index_min=0\n    local tmp_array_index_max_value=0\n    local tmp_array_index_min_value=0\n    local tmp_array_index_max_value_index=0\n    local tmp_array_index_min_value_index=0\n    local tmp_array_index_max_value_index_max=0\n    local tmp_array_index_min_value_index_min=0\n    local tmp_array_index_max_value_index_min=0\n    local tmp_array_index_min_value_index_max=0\n    local tmp_array_index_max_value_index_max_value=0\n    local tmp_array_index_min_value_index_max_value=0\n    local tmp_array_index_max_value_index_min_value=0\n    local tmp_array_index_min_value_index_min_value=0\n    local tmp_array_index_max_value"], ["#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n  local n=$1\n  local i=1\n  local result=()\n  while [ $i -le $n ]\n  do\n    if [ $i -eq 1 ]\n    then\n      result+=(\"1\")\n    elif [ $i -eq 2 ]\n    then\n      result+=(\"1\")\n    elif [ $i -eq 3 ]\n    then\n      result+=(\"2\")\n    elif [ $i -eq 4 ]\n    then\n      result+=(\"6\")\n    elif [ $i -eq 5 ]\n    then\n      result+=(\"24\")\n    else\n      local sum=0\n      local j=1\n      while [ $j -le $i ]\n      do\n        sum=$((sum + j))\n        j=$((j + 1))\n      done\n      result+=(\"$sum\")\n    fi\n    i=$((i + 1))\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n    local b=$((a*a*a))\n    if [ $b -eq $a ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n    local message=$1\n    local encoded=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e="], ["#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n  local bored=0\n  local sentence\n  for sentence in $(echo \"$1\" | tr ' ' '\\n'); do\n    if [[ \"$sentence\" =~ ^I.* ]]; then\n      bored=$((bored + 1))\n    fi\n  done\n  echo \"$bored\""], ["#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local -a arr=($1)\n  local -i i=0\n  local -i j=1\n  local -i sum=0\n  local -i len=${#arr[@]}\n  while [ $i -lt $len ] && [ $j -lt $len ]\n  do\n    sum=${arr[$i]} + ${arr[$j]}\n    if [ $sum -eq 0 ]\n    then\n      return 0\n    fi\n    ((i++))\n    ((j++))\n  done\n  return 1"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n  local a=$1\n  local b=$2\n  local c=$3\n  local s=$(($a + $b + $c))\n  if [ $s -gt $b ] && [ $s -gt $c ] && [ $s -gt $a ]; then\n    echo $(bc <<< \"scale=2; ($a * $b * $c) / 2\")\n  else\n    echo -1\n  fi"], ["#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1 planet2\n    planet1=$1\n    planet2=$2\n    if [[ $planet1 == \"Mercury\" || $planet1 == \"Venus\" || $planet1 == \"Earth\" || $planet1 == \"Mars\" || $planet1 == \"Jupiter\" || $planet1 == \"Saturn\" || $planet1 == \"Uranus\" || $planet1 == \"Neptune\" ]]; then\n        if [[ $planet2 == \"Mercury\" || $planet2 == \"Venus\" || $planet2 == \"Earth\" || $planet2 == \"Mars\" || $planet2 == \"Jupiter\" || $planet2 == \"Saturn\" || $planet2 == \"Uranus\" || $planet2 == \"Neptune\" ]]; then\n            if [[ $planet1 == \"Mercury\" && $planet2 == \"Venus\" ]]; then\n                echo \"Venus\"\n            elif [[ $planet1 == \"Mercury\" && $planet2 == \"Earth\" ]]; then\n                echo \"Venus\"\n                echo \"Earth\"\n            elif [[ $planet1 == \"Mercury\" && $planet2 == \"Mars\" ]]; then\n                echo \"Venus\""], ["#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=$1\n  local sum=0\n  local i=0\n  while [ $i -lt ${#n} ]\n  do\n    local digit=${n:$i:1}\n    if [ $digit -eq $digit ]\n    then\n      return 0\n    fi\n    sum=$((sum + digit))\n    i=$((i + 1))\n  done\n  echo $sum"], ["#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n  local string=\"$1\"\n  local words=(${string//,/ })\n  local words_array=()\n  for word in \"${words[@]}\"; do\n    words_array+=(\"\\\"$word\\\"\")\n  done\n  echo \"${words_array[@]}\""], ["#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local count=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j="], ["#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    if [ \"$1\" -gt \"$2\" ]; then\n        echo \"$1\"\n    elif [ \"$1\" -lt \"$2\" ]; then\n        echo \"$2\"\n    else\n        echo \"None\"\n    fi"], ["#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n  local string=\"$1\"\n  local vowels=\"aeiouAEIOU\"\n  local result=\"\"\n  for char in \"$string\"; do\n    if [[ ! \"$vowels\" =~ \"$char\" ]]; then\n      result=\"$result$char\"\n    fi\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local list=\"$1\"\n  local sorted_list=\"\"\n  local sorted_list_size=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local min=0\n  local max=0\n  local min_index=0\n  local max_index=0\n  local min_index_str=\"\"\n  local max_index_str=\"\"\n  local min_index_str_size=0\n  local max_index_str_size=0\n  local min_index_str_index=0\n  local max_index_str_index=0\n  local min_index_str_index_str=\"\"\n  local max_index_str_index_str=\"\"\n  local min_index_str_index_str_size=0\n  local max_index_str_index_str_size=0\n  local min_index_str_index_str_index=0\n  local max_index_str_index_str_index=0\n  local min_index_str_index_str_index_str=\"\"\n  local max_index_str_index_str_index_str=\"\"\n  local min_index_str_index_str_index_str_size=0\n  local max_index_str_index_str_index_str_size=0\n  local min_index_str_index_str_index_str_index=0\n  local max_index_str_index_str_index_str_index=0\n  local min_index_str_index_str_index_str_index_str=\"\"\n  local max_index_str_index_str_index_str_index_str"], ["#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    local numbers=\"$1\"\n    local sorted_numbers=$(echo \"$numbers\" | sort -n)\n    local first_number=$(echo \"$sorted_numbers\" | head -n 1)\n    local second_number=$(echo \"$sorted_numbers\" | tail -n 1)\n    echo \"\\\"$first_number\\\"\"\n    echo \"\\\"$second_number\\\"\""], ["#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n  local x=$1\n  local n=$2\n  local result=false\n  if [ $n -eq 1 ]; then\n    result=true\n  elif [ $n -eq 0 ]; then\n    result=false\n  else\n    local int=$(echo \"scale=0; $x / $n\" | bc)\n    if [ $int -eq $x ]; then\n      result=true\n    fi\n  fi\n  echo $result"], ["#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n  local n=$1\n  local i=0\n  local j=1\n  local k=0\n  local l=1\n  local m=0\n  local n=1\n  local p=0\n  local q=1\n  local r=0\n  local s=1\n  local t=0\n  local u=1\n  local v=0\n  local w=1\n  local x=0\n  local y=1\n  local z=0\n  local a=1\n  local b=0\n  local c=1\n  local d=0\n  local e=1\n  local f=0\n  local g=1\n  local h=0\n  local i=1\n  local j=0\n  local k=1\n  local l=0\n  local m=1\n  local n=0\n  local p=1\n  local q=0\n  local r=1\n  local s=0\n  local t=1\n  local u=0\n  local v=1\n  local w=0\n  local x=1\n  local y=0\n  local z=1\n  local a=0\n  local b=1\n  local c=0\n  local d=1\n  local e=0\n  local f=1\n  local g=0\n  local h=1\n  local i=0\n  local j=1\n  local k=0\n  local l=1\n  local m=0\n  local n=1\n  local p=0\n  local q=1\n  local r=0\n  local s=1\n  local t=0\n  local u=1\n  local v=0\n  local w=1\n  local x=0\n  local y=1\n  local z=0\n  local a=1\n  local b=0\n  local c=1\n  local d=0\n  local e=1\n  local f=0\n  local g=1\n  local h=0\n  local i=1\n  local j=0\n  local k"], ["#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n  local -a arr=($1)\n  local -a sorted_arr\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_sum_index=0\n  local -i max_sum_index_in_arr=0\n  local -i max_sum_index_in_sorted_arr=0\n  local -i max_sum_index_in_arr_2=0\n  local -i max_sum_index_in_sorted_arr_2=0\n  local -i max_sum_index_in_arr_3=0\n  local -i max_sum_index_in_sorted_arr_3=0\n  local -i max_sum_index_in_arr_4=0\n  local -i max_sum_index_in_sorted_arr_4=0\n  local -i max_sum_index_in_arr_5=0\n  local -i max_sum_index_in_sorted_arr_5=0\n  local -i max_sum_index_in_arr_6=0\n  local -i max_sum_index_in_sorted_arr_6=0\n  local -i max_sum_index_in_arr_7=0\n  local -i max_sum_index_in_sorted_arr_7=0\n  local -i max_sum_index_in_arr_8=0\n  local -i max_sum_index_in_sorted_arr_8=0\n  local -i max_sum_index_in_arr_9=0\n  local -i max"], ["#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    local list=\"$1\"\n    local threshold=\"$2\"\n    local elements=(${list})\n    local i=0\n    local j=0\n    local diff=0\n    local min_diff=0\n    local min_i=0\n    local min_j=0\n    local min_diff_i=0\n    local min_diff_j=0\n    local min_diff_i_j=0\n    local min_diff_i_j_i=0\n    local min_diff_i_j_j=0\n    local min_diff_i_j_i_j=0\n    local min_diff_i_j_i_i=0\n    local min_diff_i_j_j_j=0\n    local min_diff_i_j_i_j_i=0\n    local min_diff_i_j_i_j_j=0\n    local min_diff_i_j_i_i_i=0\n    local min_diff_i_j_i_i_j=0\n    local min_diff_i_j_j_j_i=0\n    local min_diff_i_j_j_j_j=0\n    local min_diff_i_j_i_i_i_i=0\n    local min_diff_i_j_i_i_i_j=0\n    local min_diff_i_j_i_i_j_i=0\n    local min_diff_i_j_i_i_j_j=0\n    local min_diff_i_j_j_j_i_i=0\n    local min_diff_i_j_j_j_i_j=0\n    local min_diff_i_j"], ["#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n    local string=\"$1\"\n    local palindrome_suffix\n    local palindrome_prefix\n    local palindrome_length\n    local palindrome_index\n    local palindrome_index_start\n    local palindrome_index_end\n    local palindrome_index_middle\n    local palindrome_index_middle_start\n    local palindrome_index_middle_end\n    local palindrome_index_middle_length\n    local palindrome_index_middle_reversed\n    local palindrome_index_middle_reversed_start\n    local palindrome_index_middle_reversed_end\n    local palindrome_index_middle_reversed_length\n    local palindrome_index_middle_reversed_reversed\n    local palindrome_index_middle_reversed_reversed_start\n    local palindrome_index_middle_reversed_reversed_end\n    local palindrome_index_middle_reversed_reversed_length\n    local palindrome_index_middle_reversed_reversed_reversed\n    local palindrome_index_middle_reversed_reversed_reversed_start\n    local palindrome_index_middle_reversed_reversed_reversed_end\n    local palindrome_index_middle_reversed_reversed_reversed_length\n    local palindrome_index_middle_reversed_reversed_reversed_reversed\n    local palindrome_index_middle_reversed_reversed_reversed_reversed_start\n    local palindrome_index_middle_reversed_reversed_reversed_reversed_end\n    local palindrome_index_middle_reversed_reversed_reversed_reversed_length\n    local palindrome_index_middle_reversed_reversed_reversed_reversed_reversed\n    local palindrome_index_middle_reversed_reversed_reversed_reversed_reversed_start\n    local palindrome_index_middle_reversed_reversed_reversed_reversed_reversed_end\n    local palindrome_index_middle_"], ["#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    local a=\"$1\"\n    local b=\"$2\"\n    local result=\"\"\n    for ((i=0; i<${#a}; i++)); do\n        result=\"${result}${a:$i:1}\"\n        result=\"${result}${b:$i:1}\"\n    done\n    echo \"${result}\""], ["#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n  local result=1\n  for ((i=1; i<=$n; i++)); do\n    result=$((result * i))\n  done\n  echo $result"], ["#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local sum=0\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local tmp=0\n    local tmp2=0\n    local tmp3=0\n    local tmp4=0\n    local tmp5=0\n    local tmp6=0\n    local tmp7=0\n    local tmp8=0\n    local tmp9=0\n    local tmp10=0\n    local tmp11=0\n    local tmp12=0\n    local tmp13=0\n    local tmp14=0\n    local tmp15=0\n    local tmp16=0\n    local tmp17=0\n    local tmp18=0\n    local tmp19=0\n    local tmp20=0\n    local tmp21=0\n    local tmp22=0\n    local tmp23=0\n    local tmp24=0\n    local tmp25=0\n    local tmp26=0\n    local tmp27=0\n    local tmp28=0\n    local tmp29=0\n    local tmp30=0\n    local tmp31=0\n    local tmp32=0\n    local tmp33=0\n    local tmp34=0\n    local tmp35=0\n    local tmp36=0\n    local tmp37=0\n    local tmp38=0\n    local tmp39=0\n    local tmp40=0\n    local tmp41=0\n    local tmp42=0\n    local tmp43=0\n    local tmp44=0\n    local tmp45=0\n    local tmp46=0\n    local tmp47=0\n    local tmp48=0\n    local tmp49"], ["#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n "], ["#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n    local -a arr=($1)\n    local -a result=()\n    for i in \"${arr[@]}\"; do\n        local -a digits=($(echo $i | tr -d ' '))\n        local -a unique_digits=()\n        for j in \"${digits[@]}\"; do\n            if [[ $j -gt 0 && $j -le 9 ]]; then\n                if [[ $j -eq 0 || $j -eq 2 || $j -eq 4 || $j -eq 6 || $j -eq 8 ]]; then\n                    if [[ ! \" ${unique_digits[@]} \" =~ \" $j \" ]]; then\n                        unique_digits+=($j)\n                    fi\n                fi\n            fi\n        done\n        if [[ ${#unique_digits[@]} -eq ${#digits[@]} ]]; then\n            result+=($i)\n        fi\n    done\n    echo \"${result[@]}\""], ["#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n  local words=()\n  local word\n  local n=$2\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n "], ["#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n  local list=$1\n  local max_weight=$2\n  local sum=0\n  local i=0\n  local j=0\n  local len=${#list}\n  local half_len=$((len/2))\n  local is_balanced=true\n  local is_flying=false\n\n  for ((i=0; i<half_len; i++)); do\n    j=$((len-i-1))\n    if [[ ${list:$i:1} != ${list:$j:1} ]]; then\n      is_balanced=false\n      break\n    fi\n    sum=$((sum+list:$i:1))\n  done\n\n  if [[ $is_balanced == true && $sum -le $max_weight ]]; then\n    is_flying=true\n  fi\n\n  echo $is_flying"], ["#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n  local n=$1\n  local a=0\n  local b=1\n  local c\n  for ((i=0; i<n; i++)); do\n    c=$((a+b))\n    a=$b\n    b=$c\n  done\n  echo $b"], ["#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local extensions=$2\n    local strongest_extension=\"\"\n    local strongest_strength=0\n    local extension_strength=0\n    local extension_name=\"\"\n    local extension_name_length=0\n    local extension_name_uppercase_count=0\n    local extension_name_lowercase_count=0\n    local extension_name_uppercase_letters=\"\"\n    local extension_name_lowercase_letters=\"\"\n    local extension_name_uppercase_letters_length=0\n    local extension_name_lowercase_letters_length=0\n    local extension_name_uppercase_letters_sorted=\"\"\n    local extension_name_lowercase_letters_sorted=\"\"\n    local extension_name_uppercase_letters_sorted_length=0\n    local extension_name_lowercase_letters_sorted_length=0\n    local extension_name_uppercase_letters_sorted_index=0\n    local extension_name_lowercase_letters_sorted_index=0\n    local extension_name"], ["#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n    local str=\"$1\"\n    local stack=\"\"\n    local i=0\n    local len=${#str}\n    local open=0\n    local close=0\n    local result=\"No\"\n\n    for ((i=0; i<len; i++)); do\n        local c=${str:$i:1}\n        if [[ $c == '(' ]]; then\n            open=$((open+1))\n            stack=\"$stack $c\"\n        elif [[ $c == ')' ]]; then\n            close=$((close+1))\n            if [[ $open -gt 0 ]]; then\n                stack=\"$stack $c\"\n                open=$((open-1))\n            else\n                result=\"No\"\n                break\n            fi\n        fi\n    done\n\n    if [[ $open -eq 0 && $close -eq 0 ]]; then\n        result=\"Yes\"\n    fi\n\n    echo \"$result\""], ["#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n    local list=\"$1\"\n    local smallest=\"\"\n    local smallest_index=\"\"\n    local smallest_index_count=0\n    local smallest_index_count_max=0\n    local smallest_index_count_min=0\n    local smallest_index_count_sum=0\n    local smallest_index_count_sum_max=0\n    local smallest_index_count_sum_min=0\n    local smallest_index_count_sum_sum=0\n    local smallest_index_count_sum_sum_max=0\n    local smallest_index_count_sum_sum_min=0\n    local smallest_index_count_sum_sum_sum=0\n    local smallest_index_count_sum_sum_sum_max=0\n    local smallest_index_count_sum_sum_sum_min=0\n    local smallest_index_count_sum_sum_sum_sum=0\n    local smallest_index_count_sum_sum_sum_sum_max=0\n    local smallest_index_count_sum_sum_sum_sum_min=0\n    local smallest_index_count_sum_sum_sum_sum_sum=0\n    local smallest_index_count_sum_sum_sum_sum_sum_max=0\n    local smallest_index_count_sum_sum_sum_sum_sum_min=0\n    local smallest_index_count_sum_sum_sum_sum_sum_sum=0\n    local smallest_index_count_sum_sum_sum_sum_sum_sum_max=0\n    local smallest_index_count_sum_sum_sum_sum_sum_sum_min=0\n    local smallest_index_count"], ["#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  if [[ $1 -eq $2 + $3 ]] && [[ $1 -eq $2 ]] && [[ $1 -eq $3 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n  local number=\"$1\"\n  local integer_part\n  integer_part=$(echo \"$number\" | cut -d \".\" -f 1)\n  echo \"$number\" | cut -d \".\" -f 2"], ["#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n  local list=\"$1\"\n  local i=0\n  local result=()\n  while IFS= read -r item; do\n    result[$i]=\"\\\"$((i+1))\\\"\"\n    i=$((i+1))\n  done <<< \"$list\"\n  echo \"${result[@]}\""], ["#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    local x=$1\n    local y=$2\n    local n=$3\n    if [ $n -eq 0 ]; then\n        echo $y\n    else\n        echo $x\n    fi"], ["#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n    local r=$((n % p))\n    if [ $r -lt 0 ]; then\n        r=$((r + p))\n    fi\n    echo $r"], ["#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n  local number=\"$1\"\n  local even_count=0\n  local odd_count=0\n  local i=0\n  local digit\n  while [ $i -lt ${#number} ]\n  do\n    digit=${number:$i:1}\n    if [ $digit -eq 0 ]\n    then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count + 1))\n    fi\n    i=$((i + 1))\n  done\n  echo \"\\\"$even_count\\\"\"\n  echo \"\\\"$odd_count\\\"\""], ["#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=\"$1\"\n  local len=${#s}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n "], ["#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local n=$1\n  local i=2\n  local largest_prime=1\n  while [ $i -le $n ]; do\n    if [ $n -% $i -eq 0 ]; then\n      largest_prime=$i\n      n=$((n / $i))\n    else\n      i=$((i + 1))\n    fi\n  done\n  echo $largest_prime"], ["#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n    local sum=0\n    local i=0\n    local char\n    local upperChar\n    while [ $i -lt ${#1} ]\n    do\n        char=${1:$i:1}\n        if [ \"$char\" = \"$char\" ]\n        then\n            upperChar=$(echo $char | tr '[:lower:]' '[:upper:]')\n            if [ \"$upperChar\" = \"$char\" ]\n            then\n                sum=$((sum + $char))\n            fi\n        fi\n        i=$((i + 1))\n    done\n    echo $sum"], ["#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n    local list=\"$1\"\n    local min=$(echo \"$list\" | awk '{print $1}')\n    local max=$(echo \"$list\" | awk '{print $2}')\n    local range=$(echo \"$max - $min\" | bc)\n    local scale=$(echo \"1.0 / $range\" | bc)\n    echo \"$list\" | awk \"BEGIN {printf \\\"[\\\"} {printf \\\"\\\\\\\"%s\\\\\\\"\\\", $1 * $scale} END {printf \\\"]\\\"}\""], ["#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n  local sum=0\n  local i=0\n  local j=0\n  local n=0\n  local len=0\n  local tmp=0\n  local tmp2=0\n  local tmp3=0\n  local tmp4=0\n  local tmp5=0\n  local tmp6=0\n  local tmp7=0\n  local tmp8=0\n  local tmp9=0\n  local tmp10=0\n  local tmp11=0\n  local tmp12=0\n  local tmp13=0\n  local tmp14=0\n  local tmp15=0\n  local tmp16=0\n  local tmp17=0\n  local tmp18=0\n  local tmp19=0\n  local tmp20=0\n  local tmp21=0\n  local tmp22=0\n  local tmp23=0\n  local tmp24=0\n  local tmp25=0\n  local tmp26=0\n  local tmp27=0\n  local tmp28=0\n  local tmp29=0\n  local tmp30=0\n  local tmp31=0\n  local tmp32=0\n  local tmp33=0\n  local tmp34=0\n  local tmp35=0\n  local tmp36=0\n  local tmp37=0\n  local tmp38=0\n  local tmp39=0\n  local tmp40=0\n  local tmp41=0\n  local tmp42=0\n  local tmp43=0\n  local tmp44=0\n  local tmp45=0\n  local tmp46=0\n  local tmp47=0\n  local tmp48=0\n  local tmp49=0\n  local tmp50=0\n  local tmp51=0\n  local tmp52=0\n  local tmp53=0\n  local tmp54=0\n  local tmp55"], ["#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local -a arr=($1)\n  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i min_index=0\n  local -i min_value=0\n  local -i even_value=0\n  local -i odd_value=0\n  local -i index=0\n  local -i len=${#arr[@]}\n  local -i half_len=$((len/2))\n  local -i half_len_odd=$((half_len+1))\n  local -i half_len_even=$((half_len-1))\n  local -i half_len_odd_index=$((half_len_odd-1))\n  local -i half_len_even_index=$((half_len_"], ["#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=()\n  local i=0\n  local j=0\n  local k=0\n  local count=0\n  local sum=0\n  local max=0\n  local max_count=0\n  local max_sum=0\n  local max_i=0\n  local max_j=0\n  local max_k=0\n  local max_a=()\n  local max_a_i=0\n  local max_a_j=0\n  local max_a_k=0\n  local max_a_sum=0\n  local max_a_max=0\n  local max_a_max_count=0\n  local max_a_max_sum=0\n  local max_a_max_i=0\n  local max_a_max_j=0\n  local max_a_max_k=0\n  local max_a_max_a=()\n  local max_a_max_a_i=0\n  local max_a_max_a_j=0\n  local max_a_max_a_k=0\n  local max_a_max_a_sum=0\n  local max_a_max_a_max=0\n  local max_a_max_a_max_count=0\n  local max_a_max_a_max_sum=0\n  local max_a_max_a_max_i=0\n  local max_a_max_a_max_j=0\n  local max"], ["#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    local lst1=\"$1\"\n    local lst2=\"$2\"\n    local lst1_len=$(echo \"$lst1\" | wc -w)\n    local lst2_len=$(echo \"$lst2\" | wc -w)\n    local lst1_even=0\n    local lst2_even=0\n    local lst1_odd=0\n    local lst2_odd=0\n    local lst1_even_idx=0\n    local lst2_even_idx=0\n    local lst1_odd_idx=0\n    local lst2_odd_idx=0\n    local lst1_even_idx_prev=0\n    local lst2_even_idx_prev=0\n    local lst1_odd_idx_prev=0\n    local lst2_odd_idx_prev=0\n    local lst1_even_idx_next=0\n    local lst2_even_idx_next=0\n    local lst1_odd_idx_next=0\n    local lst2_odd_idx_next=0\n    local lst1_even_idx_next_prev=0\n    local lst2_even_idx_next_prev=0\n    local lst1_odd_idx_next_prev=0\n    local lst2_odd_idx_next_prev=0\n    local lst1_even_idx_next_next=0\n    local lst2_even_idx_next_"], ["#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n    local l=\"$1\"\n    local n=$(echo \"$l\" | wc -w)\n    local m=$((n/2))\n    local sorted=($(echo \"$l\" | sort -n))\n    if [ $n -eq 1 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 2 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 3 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 4 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 5 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 6 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 7 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 8 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 9 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 10 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 11 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 12 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 13 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 14 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 15 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 16 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 17 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 18 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 19 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 20 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 21 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 22 ]; then\n        echo \"$sorted\"\n    elif [ $n -eq 23 ]; then\n        echo \"$sorted\"\n    elif [ $"], ["#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n  local length=$(echo $1 | wc -c)\n  local prime=true\n  for ((i=2; i<=$length; i++)); do\n    if [ $((length % i)) -eq 0 ]; then\n      prime=false\n      break\n    fi\n  done\n  echo $prime"], ["#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n  local arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local j=$((len - 1))\n  local min=0\n  local temp=0\n  local temp2=0\n  local temp3=0\n  local temp4=0\n  local temp5=0\n  local temp6=0\n  local temp7=0\n  local temp8=0\n  local temp9=0\n  local temp10=0\n  local temp11=0\n  local temp12=0\n  local temp13=0\n  local temp14=0\n  local temp15=0\n  local temp16=0\n  local temp17=0\n  local temp18=0\n  local temp19=0\n  local temp20=0\n  local temp21=0\n  local temp22=0\n  local temp23=0\n  local temp24=0\n  local temp25=0\n  local temp26=0\n  local temp27=0\n  local temp28=0\n  local temp29=0\n  local temp30=0\n  local temp31=0\n  local temp32=0\n  local temp33=0\n  local temp34=0\n  local temp35=0\n  local temp36=0\n  local temp37=0\n  local temp38=0\n  local temp39=0\n  local temp40=0\n  local temp41=0\n  local temp42=0\n  local temp43=0\n  local temp44=0\n  local temp4"], ["#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n  local sum=0\n  local i=0\n  local len=${#1}\n  local num\n  while [ $i -lt $len ]; do\n    num=$(echo ${1:i:1} | awk '{printf \"%.0f\", $1}')\n    sum=$(echo \"$sum + $num*$num\" | bc)\n    i=$((i+1))\n  done\n  echo $sum"], ["#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.([a-zA-Z]{3})$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.([a-zA-Z]{3})$ ]]; then\n            if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.([a-zA-Z]{3})$ ]]; then\n                if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.([a-zA-Z]{3})$ ]]; then\n                    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.([a-zA-Z]{3})$ ]]; then\n                        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.([a-zA-Z]{3})$ ]]; then\n                            if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.([a-zA-Z]{3})$ ]]; then\n                                if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.([a-zA-Z]{3})"], ["#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local sum=0\n  local count=0\n  local i=0\n  local j=0\n  local k=0\n  local n=0\n  local m=0\n  local l=0\n  local sum_list=()\n  local sum_list_len=0\n  local sum_list_i=0\n  local sum_list_j=0\n  local sum_list_k=0\n  local sum_list_n=0\n  local sum_list_m=0\n  local sum_list_l=0\n  local sum_list_sum=0\n  local sum_list_count=0\n  local sum_list_i_max=0\n  local sum_list_j_max=0\n  local sum_list_k_max=0\n  local sum_list_n_max=0\n  local sum_list_m_max=0\n  local sum_list_l_max=0\n  local sum_list_sum_max=0\n  local sum_list_count_max=0\n  local sum_list_i_min=0\n  local sum_list_j_min=0\n  local sum_list_k_min=0\n  local sum_list_n_min=0\n  local sum_list_m_min=0\n  local sum_list_l_min=0\n  local sum_list_sum_min=0\n  local sum_list_count_min=0\n  local sum_list_i_max_index=0\n  local sum"], ["#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    local a_start=$1\n    local a_end=$2\n    local b_start=$3\n    local b_end=$4\n\n    local a_start_less_than_b_start=$((a_start < b_start))\n    local a_end_greater_than_b_end=$((a_end > b_end))\n\n    if [ $a_start_less_than_b_start -eq 1 ] && [ $a_end_greater_than_b_end -eq 1 ]; then\n        local a_start_less_than_b_end=$((a_start < b_end))\n        local a_end_greater_than_b_start=$((a_end > b_start))\n\n        if [ $a_start_less_than_b_end -eq 1 ] && [ $a_end_greater_than_b_start -eq 1 ]; then\n            local a_length=$((a_end - a_start + 1))\n            local b_length=$((b"], ["#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n  local input=\"$1\"\n  local output=()\n  local group=\"\"\n  local open_braces=0\n  local close_braces=0\n  local i=0\n  while [ $i -lt ${#input} ]; do\n    local c=\"${input:$i:1}\"\n    if [ \"$c\" = \"(\" ]; then\n      open_braces=$((open_braces+1))\n      group=\"$group$c\"\n    elif [ \"$c\" = \")\" ]; then\n      close_braces=$((close_braces+1))\n      group=\"$group$c\"\n    elif [ \"$c\" = \" \" ]; then\n      continue\n    else\n      if [ $open_braces -eq $close_braces ]; then\n        output+=(\"$group\")\n        group=\"\"\n        open_braces=0\n        close_braces=0\n      else\n        group=\"$group$c\"\n      fi\n    fi\n    i=$((i+1))\n  done\n  if [ $open_braces -eq 0 ]; then\n    output+=(\"$group\")\n  fi\n  echo \"${output[@]}\""], ["#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n  local scores=\"$1\"\n  local guesses=\"$2\"\n  local result=()\n  local score\n  local guess\n  local diff\n  for score in $scores; do\n    for guess in $guesses; do\n      diff=$(($score - $guess))\n      if [ $diff -eq 0 ]; then\n        result+=(\"0\")\n      else\n        result+=(\"$diff\")\n      fi\n    done\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n  local n=$1\n  local count=0\n  for i in $(seq 1 9); do\n    for j in $(seq 1 9); do\n      if [[ $i == 1 || $j == 1 ]]; then\n        if [[ $i == $j ]]; then\n          count=$((count + 1))\n        fi\n      fi\n    done\n  done\n  echo $count"], ["#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  local last_char=${1: -1}\n  if [[ \"$last_char\" =~ [a-zA-Z] ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n    if [ -z \"$1\" ]; then\n        return 1\n    fi\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n        month=$(echo $1 | cut -d- -f1)\n        day=$(echo $1 | cut -d- -f2)\n        year=$(echo $1 | cut -d- -f3)\n        if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n            if [[ $day -ge 1 && $day -le 31 ]]; then\n                return 0\n            else\n                return 1\n            fi\n        elif [[ $month -eq 4"], ["#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n  local sum=0\n  local num\n  for num in $1; do\n    local sum_of_digits=0\n    local digit\n    for digit in $num; do\n      sum_of_digits=$((sum_of_digits + digit))\n    done\n    if [[ $sum_of_digits -gt 0 ]]; then\n      sum=$((sum + 1))\n    fi\n  done\n  echo $sum"], ["#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n    local str=\"$1\"\n    local word\n    local words=()\n    local new_word\n    local new_words=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v="], ["#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n  local str=\"$1\"\n  local len=\"${#str}\"\n  local i=0\n  local j=len-1\n  local tmp=\"\"\n\n  while [ $i -lt $j ]\n  do\n    tmp=\"${str:$i:1}${tmp}\"\n    i=$((i+1))\n  done\n\n  if [ \"$tmp\" = \"$str\" ]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local word=\"$1\"\n  local vowel_list=\"a e i o u\"\n  local vowel_list_len=${#vowel_list}\n  local vowel_index=0\n  local vowel_char=\"\"\n  local vowel_char_index=0\n  local vowel_char_index_right=0\n  local vowel_char_index_left=0\n  local vowel_char_index_right_next=0\n  local vowel_char_index_left_next=0\n  local vowel_char_index_right_next_next=0\n  local vowel_char_index_left_next_next=0\n  local vowel_char_index_right_next_next_next=0\n  local vowel_char_index_left_next_next_next=0\n  local vowel_char_index_right_next_next_next_next=0\n  local vowel_char_index_left_next_next_next_next=0\n  local vowel_char_index_right_next_next_next_next_next=0\n  local vowel_char_index_left_next_next_next_next_next=0\n  local vowel_char_index_right_next_next_next_next_next_next=0\n  local vowel_char_index_left_next_next_next_next_next_next=0\n  local vowel_char_index_right_next_next_next_next_next"], ["#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n  local number=\"$1\"\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local"], ["#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n  local x=$1\n  local n=$2\n  local x_numerator=$(echo $x | cut -d '/' -f 1)\n  local x_denominator=$(echo $x | cut -d '/' -f 2)\n  local n_numerator=$(echo $n | cut -d '/' -f 1)\n  local n_denominator=$(echo $n | cut -d '/' -f 2)\n  local x_simplified=$(echo \"$x_numerator/$x_denominator\" | bc)\n  local n_simplified=$(echo \"$n_numerator/$n_denominator\" | bc)\n  if [ \"$x_simplified\" -eq \"$n_simplified\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n  local hex_key_len=${#hex_key}\n  local hex_key_len_half=$((hex_key_len / 2))\n  local hex_key_len_half_plus_one=$((hex_key_len_half + 1))\n  local hex_key_len_half_plus_two=$((hex_key_len_half + 2))\n  local hex_key_len_half_plus_three=$((hex_key_len_half + 3))\n  local hex_key_len_half_plus_four=$((hex_key_len_half + 4))\n  local hex_key_len_half_plus_five=$((hex_key_len_half + 5))"], ["#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n  local sentence=\"$1\"\n  local words\n  local word\n  local length\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local"], ["#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local -r input=\"$1\"\n  local -r regex='[a-z]'\n  local -r count=$(echo \"$input\" | grep -o \"$regex\" | sort | uniq -c | sort -nr | head -n 1 | cut -d ' ' -f 1)\n  local -r letter=$(echo \"$input\" | grep -o \"$regex\" | sort | uniq -c | sort -nr | head -n 1 | cut -d ' ' -f 2)\n  local -r output='{\"'\"$letter\"'\": \"'\"$count\"'\"}'\n  echo \"$output\""], ["#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n    local lst=\"$1\"\n    local x=\"$2\"\n    local row_lst=()\n    local row_lst_sorted=()\n    local row_lst_sorted_by_col=()\n    local row_lst_sorted_by_col_by_row=()\n    local row_lst_sorted_by_col_by_row_by_col=()\n    local row_lst_sorted_by_col_by_row_by_col_by_row=()\n    local row_lst_sorted_by_col_by_row_by_col_by_row_by_col=()\n    local row_lst_sorted_by_col_by_row_by_col_by_row_by_col_by_row=()\n    local row_lst_sorted_by_col_by_row_by_col_by_row_by_col_by_row_by_col=()\n    local row_lst_sorted_by_col_by_row_by_"], ["#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n    local n=$1\n    local i=1\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local odd_collatz=()\n    local odd_collatz_str=()\n    local odd_collatz_str_sorted=()\n    local odd_collatz_str_sorted_uniq=()\n    local odd_collatz_str_sorted_uniq_str=()\n    local odd_collatz_str_sorted_uniq_str_uniq=()\n    local odd_collatz_str_sorted_uniq_str_uniq_str=()\n    local odd_collatz_str_sorted_uniq_str_uniq_str_uniq=()\n    local odd_collatz_str_sorted_uniq_str_uniq_str_uniq_str=()\n    local odd_collatz_str_sorted_uniq_str_uniq_str_uniq_str_uniq=()\n    local odd_collatz_str_sorted_uniq_str_uniq_str_uniq_str_uniq_str=()\n    local odd_collatz_str_sorted_uniq_str_uniq"], ["#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local arr=($1)\n  local i=0\n  local j=0\n  local max=-1\n  local max_i=-1\n  local max_j=-1\n  local len=${#arr[@]}\n  while [ $i -lt $len ]\n  do\n    j=$((i+1))\n    while [ $j -lt $len ]\n    do\n      if [ ${arr[$i]} -ge ${arr[$j]} ]\n      then\n        break\n      fi\n      j=$((j+1))\n    done\n    if [ $j -eq $len ]\n    then\n      max=$i\n      max_i=$i\n      max_j=$j\n      break\n    fi\n    if [ $j -gt $max ]\n    then\n      max=$j\n      max_i=$i\n      max_j=$j\n    fi\n    i=$((j+1))\n  done\n  if [ $max -eq -1 ]\n  then\n    echo -1\n  else\n    echo ${arr[$max_i]} ${arr[$max_j]}\n  fi"], ["#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n  local numbers=\"$1\"\n  local sorted_numbers=\"\"\n  local number\n  for number in $numbers; do\n    if [[ $number == \"zero\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"one\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"two\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"three\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"four\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"five\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"six\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"seven\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"eight\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"nine\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    else\n      echo \"Invalid number: $number\"\n      return 1\n    fi\n  done\n  echo \"$sorted_numbers\""], ["#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local result=\"\"\n  local i=0\n  local len=${#x}\n  local tmp=\"\"\n  local tmp_len=0\n  local tmp_shift=0\n  local tmp_result=\"\"\n  local tmp_i=0\n  local tmp_tmp=\"\"\n  local tmp_tmp_len=0\n  local tmp_tmp_shift=0\n  local tmp_tmp_result=\"\"\n  local tmp_tmp_i=0\n\n  if [ $shift -gt $len ]; then\n    shift=$((shift - len))\n    tmp=$x\n    x=$result\n    result=$tmp\n  fi\n\n  for ((i=0; i<shift; i++)); do\n    tmp_len=$((len - 1))\n    tmp_shift=$((shift - 1))\n    tmp_result=$result\n    tmp_i=$i\n    tmp_tmp=$x\n    tmp_tmp_len=$len\n    tmp_tmp_shift=$shift\n    tmp_tmp_result=$result\n    tmp_tmp_i=$i\n\n    for ((tmp_i=0; tmp_i<tmp_len; tmp_i++)); do\n      tmp_tmp_len=$((tmp_tmp_len - 1))\n      tmp_tmp_shift=$((tmp_tmp_shift - 1))\n      tmp_tmp_result=$tmp_tmp_result${tmp_tmp:$tmp_tmp_len:1}\n      tmp_tmp_i=$((tmp_tmp_i + 1))\n    done\n\n    tmp_tmp_result=${tmp_tmp_result:tmp_tmp_shift:1}\n    tmp_tmp_i=$((tmp_tmp_i + 1))\n    tmp_tmp=${tmp_tmp:tmp_tmp_i:1}\n    tmp_tmp_len=$((tmp_tmp_len - 1))\n    tmp_tmp_shift=$((tmp_tmp_shift - "], ["#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0"], ["#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n    local list=\"$1\"\n    local max_prime=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j="], ["#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n    local sum=0\n    local product=1\n    for i in $1; do\n        sum=$((sum + i))\n        product=$((product * i))\n    done\n    echo -n \"\\\"$sum\\\"\"\n    echo -n \" \"\n    echo -n \"\\\"$product\\\"\""], ["#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    local x=$1\n    local y=$2\n    local max_even_num=$(($x + 1))\n    local min_even_num=$(($y - 1))\n    local max_odd_num=$(($x + 2))\n    local min_odd_num=$(($y - 2))\n    local max_num=$(($x + 3))\n    local min_num=$(($y - 3))\n    local max_even_num_in_range=$(($max_even_num - $min_even_num))\n    local max_odd_num_in_range=$(($max_odd_num - $min_odd_num))\n    local max_num_in_range=$(($max_num - $min_num))\n    local max_even_num_in_range_odd=$(($max_even_num_in_range % 2))\n    local max_odd_num_in_range_odd=$(($max_odd_num_in_range % 2))\n    local max_num_in_range_odd=$(($max_num_in_range % 2))\n    local max_even_num_in_range_even=$(($max_even_num_in_range - $max_even_num_in_range_odd))\n    local max_odd_num_in_range_even=$(($max_odd_num_in_range - $max_odd_num_in_range_odd))\n    local max_num_in_range_even=$(($max_num_in_range - $max_num_in_range_odd))\n    local max_even_num_in_range_even_odd=$(($max_even_num_in_range_even % 2))\n    local max_odd_num_"], ["#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local list=$1\n    local a=None\n    local b=None\n    local i=0\n    local j=0\n    local n=0\n    local m=0\n    local tmp=0\n    local tmp2=0\n    local tmp3=0\n    local tmp4=0\n    local tmp5=0\n    local tmp6=0\n    local tmp7=0\n    local tmp8=0\n    local tmp9=0\n    local tmp10=0\n    local tmp11=0\n    local tmp12=0\n    local tmp13=0\n    local tmp14=0\n    local tmp15=0\n    local tmp16=0\n    local tmp17=0\n    local tmp18=0\n    local tmp19=0\n    local tmp20=0\n    local tmp21=0\n    local tmp22=0\n    local tmp23=0\n    local tmp24=0\n    local tmp25=0\n    local tmp26=0\n    local tmp27=0\n    local tmp28=0\n    local tmp29=0\n    local tmp30=0\n    local tmp31=0\n    local tmp32=0\n    local tmp33=0\n    local tmp34=0\n    local tmp35=0\n    local tmp36=0\n    local tmp37=0\n    local tmp38=0\n    local tmp39=0\n    local tmp40=0\n    local tmp41=0\n    local tmp42=0\n    local tmp43=0\n    local tmp44=0\n    local tmp45=0\n    local tmp"], ["#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n  local string=\"$1\"\n  local count=0\n  local character\n  for character in \"${string}\"\n  do\n    if [[ \"$character\" =~ [A-Z] ]]\n    then\n      count=$((count + 1))\n    fi\n  done\n  echo \"$count\""], ["#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n "], ["#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n  local arr=($1)\n  local sum=0\n  local product=1\n  local sign=0\n  local i=0\n  local len=${#arr[@]}\n  for i in $(seq 0 $((len-1))); do\n    sign=$(echo ${arr[$i]} | sed 's/[^0-9]//g')\n    if [ \"$sign\" == \"0\" ]; then\n      product=1\n    elif [ \"$sign\" == \"1\" ]; then\n      product=$((product*1))\n    else\n      product=$((product*(-1)))\n    fi\n    sum=$((sum+abs($arr[$i])))\n  done\n  echo $((sum*product))"], ["#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n  local sum=0\n  local min=1000000000\n  local i=0\n  local j=0\n  local len=${#1}\n  local arr=(${1})\n\n  while [ $i -lt $len ]\n  do\n    sum=$((sum + arr[$i]))\n    if [ $sum -lt $min ]\n    then\n      min=$sum\n    fi\n    if [ $sum -gt 0 ]\n    then\n      sum=$((sum - arr[$j]))\n      j=$((j + 1))\n    fi\n    i=$((i + 1))\n  done\n  echo $min"], ["#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n  local n=$1\n  local i=0\n  local s=\"\"\n  while [ $i -lt $n ]; do\n    s=\"$s $i\"\n    i=$((i+1))\n  done\n  echo \"$s\""], ["#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n  local word1=$1\n  local word2=$2\n  local word1_length=${#word1}\n  local word2_length=${#word2}\n  local word1_rotated=\"\"\n  local word2_rotated=\"\"\n  local word1_rotated_length=0\n  local word2_rotated_length=0\n  local word1_rotated_index=0\n  local word2_rotated_index=0\n  local word1_index=0\n  local word2_index=0\n  local word1_char=\"\"\n  local word2_char=\"\"\n  local word1_char_index=0\n  local word2_char_index=0\n  local word1_char_rotated=\"\"\n  local word2_char_rotated=\"\"\n  local word1_char_rotated_index=0\n  local word2_char_rotated_index=0\n  local word1_char_rotated_length=0\n  local word2_char_rotated_length=0\n  local word1_char_rotated_index=0\n  local word2_char_rotated_index=0\n  local word1_char_rotated_length=0\n  local word2_char_rotated_length=0\n  local word1_char_rotated_index=0\n  local word2_char_rotated_index=0\n  local word1_char_rotated_length=0\n  local word2_char_rotated_length=0\n  local word1_"], ["#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n    local list=\"$1\"\n    local prev\n    for i in $list; do\n        if [[ -z $prev ]]; then\n            prev=$i\n        elif [[ $prev -gt $i ]]; then\n            return 1\n        elif [[ $prev -lt $i ]]; then\n            prev=$i\n        fi\n    done\n    return 0"], ["#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n    local longest=\"\"\n    local longest_len=0\n    local i\n    for i in $1; do\n        local len=${#i}\n        if [ $len -gt $longest_len ]; then\n            longest=$i\n            longest_len=$len\n        fi\n    done\n    echo $longest"], ["#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n  local l=\"$1\"\n  local t=\"$2\"\n  local i\n  for i in $l; do\n    if [ $i -gt $t ]; then\n      return 1\n    fi\n  done\n  return 0"], ["#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n  local number=$1\n  local i=2\n  local j=2\n  local k=2\n  local is_prime=true\n  local is_prime_i=true\n  local is_prime_j=true\n  local is_prime_k=true\n  local is_multiply_prime=true\n  while [ $i -lt $number ]\n  do\n    is_prime_i=$(is_prime $i)\n    if [ \"$is_prime_i\" = \"false\" ]\n    then\n      is_multiply_prime=false\n      break\n    fi\n    i=$((i + 1))\n  done\n  while [ $j -lt $number ]\n  do\n    is_prime_j=$(is_prime $j)\n    if [ \"$is_prime_j\" = \"false\" ]\n    then\n      is_multiply_prime=false\n      break\n    fi\n    j=$((j + 1))\n  done\n  while [ $k -lt $number ]\n  do\n    is_prime_k=$(is_prime $k)\n    if [ \"$is_prime_k\" = \"false\" ]\n    then\n      is_multiply_prime=false\n      break\n    fi\n    k=$((k + 1))\n  done\n  if [ \"$is_multiply_prime\" = \"true\" ]\n  then\n    if [ \"$is_prime_i\" = \"true\" ] && [ \"$is_prime_j\" = \"true\" ] && [ \"$is_prime_k\" = \"true\" ]\n    then\n      is_multiply_prime=true\n    fi\n  fi\n  echo $is_multiply_prime"], ["#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n    local list=\"$1\"\n    local positive=()\n    for item in $list; do\n        if [[ $item =~ ^[0-9]+$ ]]; then\n            if [[ $item -gt 0 ]]; then\n                positive+=(\"$item\")\n            fi\n        fi\n    done\n    echo \"${positive[@]}\""], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n  local l=\"$1\"\n  local l_sorted\n  local l_sorted_third\n  local l_sorted_third_i\n  local l_sorted_third_j\n  local l_sorted_third_k\n  local l_sorted_third_l\n  local l_sorted_third_m\n  local l_sorted_third_n\n  local l_sorted_third_o\n  local l_sorted_third_p\n  local l_sorted_third_q\n  local l_sorted_third_r\n  local l_sorted_third_s\n  local l_sorted_third_t\n  local l_sorted_third_u\n  local l_sorted_third_v\n  local l_sorted_third_w\n  local l_sorted_third_x\n  local l_sorted_third_y\n  local l_sorted_third_z\n  local l_sorted_third_aa\n  local l_sorted_third_ab\n  local l_sorted_third_ac\n  local l_sorted_third_ad\n  local l_sorted_third_ae\n  local l_sorted_third_af\n  local l_sorted_third_ag\n  local l_sorted_third_ah\n  local l_sorted_third_ai\n  local l_sorted_third_aj\n  local l_sorted_third_ak\n  local l_sorted_third_al\n  local l_sorted_third_am\n  local l_sorted_third_an\n  local l_sorted_third_ao\n  local l_sorted_third_ap\n  local l_sorted_third_aq\n  local l_sorted_third_ar\n  local l_sorted_third"], ["#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local level=0\n    local output=()\n    local i=0\n    while [ $i -lt ${#input} ]; do\n        local c=\"${input:$i:1}\"\n        if [ \"$c\" = \"(\" ]; then\n            level=$((level + 1))\n        elif [ \"$c\" = \")\" ]; then\n            level=$((level - 1))\n        fi\n        if [ $level -gt ${#output[@]} ]; then\n            output+=(\"$c\")\n        fi\n        i=$((i + 1))\n    done\n    echo \"${output[@]}\""], ["#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n  local side=\"$1\"\n  local high=\"$2\"\n  local area=$(echo \"scale=2; ($side * $high) / 2\" | bc)\n  echo \"$area\""], ["#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n  local a=$1\n  local b=$2\n  local sum=0\n  local carry=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv="], ["#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n  local input_list=\"$1\"\n  local mean=$(echo \"$input_list\" | awk '{s+=$1} END {print s/NR}')\n  local sum_of_squares=$(echo \"$input_list\" | awk '{s+=$1^2} END {print s/NR}')\n  local mean_of_squares=$(echo \"$sum_of_squares\" | awk '{s+=$1} END {print s/NR}')\n  local mean_absolute_deviation=$(echo \"$mean_of_squares - $mean^2\" | bc)\n  echo $(echo \"$mean_absolute_deviation\" | awk '{print sqrt($1)}')"], ["#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n  local IFS=$'\\n'\n  local -a a=($1)\n  local -a b=($2)\n  local -a c=()\n  for i in \"${a[@]}\"; do\n    for j in \"${b[@]}\"; do\n      if [ \"$i\" == \"$j\" ]; then\n        c+=(\"$i\")\n      fi\n    done\n  done\n  echo \"${c[*]}\" | sort | uniq"], ["#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n    local num=$1\n    local roman=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d"], ["#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n  local fruit_count=$1\n  local basket_count=$2\n  local fruit_count_array=(${fruit_count// / })\n  local basket_count_array=(${basket_count// / })\n  local fruit_count_array_length=${#fruit_count_array[@]}\n  local basket_count_array_length=${#basket_count_array[@]}\n  local fruit_count_array_index=0\n  local basket_count_array_index=0\n  local fruit_count_array_value=0\n  local basket_count_array_value=0\n  local mango_count=0\n  local apple_count=0\n  local orange_count=0\n  local mango_count_array=(${fruit_count// / })\n  local apple_count_array=(${fruit_count// / })\n  local orange_count_array=(${fruit_count// / })\n  local mango_count_array_length=${#mango_count_array[@]}\n  local apple_count_array_length=${#apple_count_array[@]}\n  local orange_count_array_length=${#orange_count_array[@]}\n  local mango_count_array_index=0\n  local apple_count_array_index=0"], ["#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    local s=$1\n    local c=$2\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local t=0\n    local u=0\n    local v=0"], ["#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n  local a=$1\n  local b=$2\n  local c\n  while [ $b -ne 0 ]\n  do\n    c=$((a % b))\n    a=$b\n    b=$c\n  done\n  echo $a"], ["#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n  local words=\"$1\"\n  local words_count=$(echo \"$words\" | wc -w)\n  local words_array=()\n  local word_count=0\n  local word_array=()\n  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local word_char_count=0\n  local word_char_array=()\n  local word_char_index_array=()\n  local word_char_count_array=()\n  local word_char_index_array_length=0\n  local word_char_count_array_length=0\n  local word_char_index_array_index=0\n  local word_char_count_array_index=0\n  local word_char_index_array_value=0\n  local word_char_count_array_value=0\n  local word_char_index_array_value_length=0\n  local word_char_count_array_value_length=0\n  local word_char_index_array_value_index=0\n  local word_char_count_array_value_index=0\n  local word_char_index_array_value_value=0\n  local word_char_count_array_value_value=0\n  local word_char_index_array_value_value_length=0\n  local word_char_count_array_value_value_length=0\n  local word_char_index_array_value_value_index=0\n  local word_char_count_array_value_value_index=0\n  local word_char_index_array"], ["#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a arr=($1)\n  local -a sorted=()\n  local -a sorted_dec=()\n  local -a sorted_ones=()\n  local -a sorted_ones_dec=()\n  local -a sorted_zeros=()\n  local -a sorted_zeros_dec=()\n\n  for i in \"${arr[@]}\"; do\n    local -a dec=($(echo $i | sed 's/[^0-9]//g'))\n    local -a ones=($(echo $i | sed 's/[^1]//g'))\n    local -a zeros=($(echo $i | sed 's/[^0]//g'))\n\n    if [ ${#ones[@]} -gt 0 ]; then\n      sorted_ones+=(\"$i\")\n      sorted_ones_dec+=(\"${dec[@]}\")\n    elif [ ${#zeros[@]} -gt 0 ]; then\n      sorted_zeros+=(\"$i\")\n      sorted_zeros_dec+=(\"${dec[@]}\")\n    else\n      sorted+=(\"$i\")\n      sorted_dec+=(\"${dec[@]}\")\n    fi\n  done\n\n  local -a sorted_ones_dec_sorted=($(sort -n <<<\"${sorted_ones_dec[*]}\"))\n  local -a sorted_zeros_dec_sorted=($(sort -n <<<\"${sorted_zeros_dec[*]}\"))\n  local -a sorted_dec_sorted=($(sort -n <<<\"${sorted_dec[*]}\"))\n\n  for i in \"${sorted_ones_dec_sorted[@]}\"; do\n    sorted+=(\"${sorted"], ["#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n  local IFS=\" \"\n  echo \"$*\""], ["#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n    local list=$1\n    local sum=0\n    for i in $list; do\n        sum=$((sum + i))\n    done\n    echo $sum"], ["#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local number=$1\n    local rounded_number=$(printf \"%.0f\" $number)\n    local diff=$(echo \"$number - $rounded_number\" | bc)\n    if [ $diff -gt 0 ]; then\n        echo $(($rounded_number + 1))\n    elif [ $diff -lt 0 ]; then\n        echo $(($rounded_number - 1))\n    else\n        echo $rounded_number\n    fi"], ["#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n  local word=\"$1\"\n  local vowels=\"aeiou\"\n  local vowel_count=0\n  for char in \"${word}\"; do\n    if [[ \" ${vowels} \" =~ \" ${char} \" ]]; then\n      vowel_count=$((vowel_count + 1))\n    fi\n  done\n  echo \"${vowel_count}\""], ["#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n    local max_len=0\n    local max_str=\"\"\n    local str_len=0\n    local str_arr=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a"], ["#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n        echo $(echo -n \"$1\" | md5sum | cut -d \" \" -f 1)\n    fi"], ["#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    local x=$1\n    local base=$2\n    local result=\"\"\n    local i=0\n    local digit=0\n    local tmp=0\n    local tmp_base=0\n    local tmp_result=0\n    local tmp_digit=0\n    local tmp_i=0\n    local tmp_digit_base=0\n    local tmp_digit_result=0\n    local tmp_digit_i=0\n    local tmp_digit_tmp=0\n    local tmp_digit_tmp_base=0\n    local tmp_digit_tmp_result=0\n    local tmp_digit_tmp_i=0\n    local tmp_digit_tmp_digit=0\n    local tmp_digit_tmp_tmp=0\n    local tmp_digit_tmp_tmp_base=0\n    local tmp_digit_tmp_tmp_result=0\n    local tmp_digit_tmp_tmp_i=0\n    local tmp_digit_tmp_tmp_digit=0\n    local tmp_digit_tmp_tmp_tmp=0\n    local tmp_digit_tmp_tmp_tmp_base=0\n    local tmp_digit_tmp_tmp_tmp_result=0\n    local tmp_digit_tmp_tmp_tmp_i=0\n    local tmp_digit_tmp_tmp_tmp_digit=0\n    local tmp_digit_tmp_tmp_tmp_tmp=0\n    local tmp_digit_tmp_tmp_tmp_tmp_base=0\n    local tmp_digit_tmp_tmp_tmp_tmp_result=0\n    local tmp_digit_tmp_tmp_tmp_tmp_i=0\n    local tmp_digit_tmp_tmp_tmp_tmp_digit=0\n    local tmp_digit_tmp_tmp_tmp_tmp_tmp=0\n    local tmp_digit_tmp_tmp_tmp_tmp_tmp_base=0\n    local"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n  local a=$1\n  local b=$2\n  local c=$3\n  if [ $a -eq $b ] && [ $b -eq $c ] && [ $a -eq $c ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    local gpa=\"$1\"\n    local letter_grade=\"\"\n    if [ \"$gpa\" -ge 4.0 ]; then\n        letter_grade=\"A+\"\n    elif [ \"$gpa\" -ge 3.7 ]; then\n        letter_grade=\"A\"\n    elif [ \"$gpa\" -ge 3.3 ]; then\n        letter_grade=\"A-\"\n    elif [ \"$gpa\" -ge 3.0 ]; then\n        letter_grade=\"B+\"\n    elif [ \"$gpa\" -ge 2.7 ]; then\n        letter_grade=\"B\"\n    elif [ \"$gpa\" -ge 2.3 ]; then\n        letter_grade=\"B-\"\n    elif [ \"$gpa\" -ge 2.0 ]; then\n        letter_grade=\"C+\"\n    elif [ \"$gpa\" -ge 1.7 ]; then\n        letter_grade=\"C\"\n    elif [ \"$gpa\" -ge 1.3 ]; then\n        letter_grade"], ["#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n  local -r delim=\"$1\"\n  local -r number=\"$2\"\n  local -r numbers=\"$3\"\n  local -a result=()\n  local -a numbers=(${numbers// / })\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#numbers[@]}\n  while (( i < n )); do\n    result[k]=\"\\\"${numbers[i]}\\\"\"\n    (( i++ ))\n    (( j++ ))\n    if (( j == number )); then\n      result[k]=\"\\\"${delim}${numbers[i]}\\\"\"\n      (( i++ ))\n      (( j=0 ))\n      (( k++ ))\n    fi\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n  local -a arr=($1)\n  local count=0\n  for i in \"${arr[@]}\"; do\n    if [[ $i -gt 10 && $i -lt 100 && $i -gt 100 ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n  local n=$1\n  local sum=0\n  for i in $(seq 1 $n); do\n    sum=$((sum + i))\n  done\n  echo $sum"], ["#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n  local -a arr=($1)\n  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i n=${#arr[@]}\n  local -i m=0\n  local -i count=0\n  local -i max=0\n  local -i min=0\n  local -i mid=0\n  local -i temp=0\n  local -i temp2=0\n  local -i temp3=0\n  local -i temp4=0\n  local -i temp5=0\n  local -i temp6=0\n  local -i temp7=0\n  local -i temp8=0\n  local -i temp9=0\n  local -i temp10=0\n  local -i temp11=0\n  local -i temp12=0\n  local -i temp13=0\n  local -i temp14=0\n  local -i temp15=0\n  local -i temp16=0\n  local -i temp17=0\n  local -i temp18=0\n  local -i temp19=0\n  local -i temp20=0\n  local -i temp21=0\n  local -i temp22=0\n  local -i temp23=0\n  local -i temp24=0\n  local -i temp25=0\n  local -i temp26=0\n  local -i temp27=0\n  local -i temp28=0\n  local -i temp29=0\n  local -i temp30=0\n  local -i temp31=0\n  local -i temp32=0\n  local -i temp33=0\n  local -i temp34=0\n  local -i temp35=0\n  local -i temp36=0\n  local -i temp37=0\n  local -i temp38=0\n  local -i temp39="], ["#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a=\"$1\"\n  local b=\"$2\"\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local z1\n  local z2\n  local z3\n  local z4\n  local z5\n  local z6\n  local z7\n  local z8\n  local z9\n  local z10\n  local z11\n  local z12\n  local z13\n  local z14\n  local z15\n  local z16\n  local z17\n  local z18\n  local z19\n  local z20\n  local z21\n  local z22\n  local z23\n  local z24\n  local z25\n  local z26\n  local z27\n  local z28\n  local z29\n  local z30\n  local z31\n  local z32\n  local z33\n  local z34\n  local z35\n  local z36\n  local z37\n  local z38\n  local z39\n  local z40\n  local z41\n  local z42\n  local z43\n  local z44\n  local z45\n  local z46\n  local z47\n  local z48\n  local z49\n  local z50\n  local z51\n  local z52\n  local z53\n  local z54\n  local z55\n  local z56\n  local z57\n  local z58\n  local z59\n  local z60\n  local z61\n  local z62\n  local z63\n  local z6"], ["#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n    local list=\"$1\"\n    local max=0\n    local max_index=0\n    local max_index_str=0\n    local max_index_str_list=()\n    local max_index_str_list_str=\"\"\n    local max_index_str_list_str_list=()\n    local max_index_str_list_str_list_str=\"\"\n    local max_index_str_list_str_list_str_list=()\n    local max_index_str_list_str_list_str_list_str=\"\"\n    local max_index_str_list_str_list_str_list_str_list=()\n    local max_index_str_list_str_list_str_list_str_list_str=\"\"\n    local max_index_str_list_str_list_str_list_str_list_str_list=()\n    local max_index_str_list_str_list_str_list_str_list_str_list_str=\"\"\n    local max_index_str_list_str_list_str_list_str_list_str_list_str_list=()\n    local max_index_str_list_str_list_str_list_str_list_str_list_str_list_str=\"\"\n    local max_index_str_list_str_list_str_list_str_list_str_list_str_list_str_list=()\n    local max_index_str_list_str_list_str_list_str_list_str_list_str_list_str_list_str=\"\"\n    local max_index_str_list_str_list_str_list_str_list_str_list_str_list_str_list_str_list=()\n    local max_index_str_list_str_list_str_list_str_list_str_list_str_list_"], ["#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n  local balance=0\n  for op in $1; do\n    case $op in\n      -*) balance=$(($balance - $op)) ;;\n      *) balance=$(($balance + $op)) ;;\n    esac\n    if [ $balance -lt 0 ]; then\n      echo \"true\"\n      return 0\n    fi\n  done\n  echo \"false\""], ["#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local -a arr=($1)\n    local max=-1\n    local max_freq=0\n    local max_index=0\n    local i=0\n    local j=0\n    local freq=0\n    local tmp=0\n    local tmp_freq=0\n    local tmp_index=0\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp_max_freq=0\n    local tmp_max_index=0\n    local tmp_max=-1\n    local tmp"], ["#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local open_brackets=()\n  local close_brackets=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n    local l=\"$1\"\n    local l_sorted\n    local l_sorted_even\n    local l_sorted_odd\n    local l_sorted_odd_even\n    local l_sorted_odd_even_sorted\n    local l_sorted_odd_even_sorted_odd\n    local l_sorted_odd_even_sorted_odd_even\n    local l_sorted_odd_even_sorted_odd_even_sorted\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted\n    local l_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd_even_sorted_odd\n    local l_sorted"], ["#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n  local str1=\"$1\"\n  local str2=\"$2\"\n  local i=0\n  local j=0\n  local char1=\"\"\n  local char2=\"\"\n  local same_chars=true\n  while [ $i -lt ${#str1} ] && [ $j -lt ${#str2} ]; do\n    char1=\"${str1:$i:1}\"\n    char2=\"${str2:$j:1}\"\n    if [ \"$char1\" != \"$char2\" ]; then\n      same_chars=false\n      break\n    fi\n    i=$((i + 1))\n    j=$((j + 1))\n  done\n  if [ \"$same_chars\" = true ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local open_brackets=()\n  local close_brackets=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g"]]