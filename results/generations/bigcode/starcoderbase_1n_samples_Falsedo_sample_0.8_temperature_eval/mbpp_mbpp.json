[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str,ch):\n    return str[1:-1]\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    :param words: list of words\n    :return: list of tuples (word, count)\n    \"\"\"\n    # TODO: write your code here\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base,height,side):\n    return (base*height*side)/3\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    return [string[i:j] for i,j in zip(range(len(string)), range(1,len(string)+1)) if string[i].islower()]\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if text.count('_') == 0:\n        return 'No match'\n    else:\n        if text.count('_') == 1:\n            if text.count('_') == 1 and text.count('a') == 1 and text.count('b') == 1 and text.count('c') == 1:\n                return 'Found a match!'\n            else:\n                return 'No match'\n        else:\n            if text.count('_') == 2:\n                if text.count('_') == 2 and text.count('a') == 1 and text.count('b') == 1 and text.count('c') == 1:\n                    return 'Found a match!'\n                else:\n                    return 'No match'\n            else:\n                if text.count('_') == 3:\n                    if text.count('_') == 3 and text.count('a') == 1 and text.count('b') == 1 and text.count('c') == 1:\n                        return 'Found a match!'\n                    else:\n                        return 'No match'\n                else:\n                    return 'No match'\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side):\n    return side*4\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(dirty_string, clean_string):\n    return ''.join([c for c in dirty_string if c not in clean_string])\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    return n % 10 == 3 or n % 10 == 8\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(m,n):\n    return [i*n for i in range(1,m+1)]\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: integer\n    \"\"\"\n    # Your code here\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O(n) time | O(n) space\n    # O(n) time | O(1) space\n    # O"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list_of_lists):\n    max_sum = 0\n    for i in list_of_lists:\n        max_sum += max(i)\n    return max_sum\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0]*arr[1]\n    if n == 3:\n        return arr[0]*arr[1]*arr[2]\n    if n == 4:\n        return arr[0]*arr[1]*arr[2]*arr[3]\n    if n == 5:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]\n    if n == 6:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]\n    if n == 7:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]\n    if n == 8:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]\n    if n == 9:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]\n    if n == 10:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]\n    if n == 11:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]\n    if n == 12:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]\n    if n == 13:\n        return arr[0]*arr[1]*arr[2]*arr"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    return all(len(t) == k for t in tuple_list)\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(list_of_strings):\n    return [string.replace(string, '') for string in list_of_strings]\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    # Your code goes here\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    # arr = [1,2,3,1,2,3,1]\n    # n = 7\n    #"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[len(string)-1-i]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom heapq import *\n\ndef top_k_frequent(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    if k == 0:\n        return []\n    if k == 1:\n        return [nums[0]]\n    if k == len(nums):\n        return nums\n    if k > len(nums):\n        return nums\n    if k == 2:\n        return [nums[0], nums[1]]\n    if k == 3:\n        return [nums[0], nums[1], nums[2]]\n    if k == 4:\n        return [nums[0], nums[1], nums[2], nums[3]]\n    if k == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if k == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n    if k == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n    if k == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]]\n    if k == 9:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]]\n    if k == 10:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 2\n    if n == 5:\n        return 5\n    if n == 6:\n        return 3\n    if n == 7:\n        return 7\n    if n == 8:\n        return 2\n    if n == 9:\n        return 3\n    if n == 10:\n        return 5\n    if n == 11:\n        return 11\n    if n == 12:\n        return 2\n    if n == 13:\n        return 13\n    if n == 14:\n        return 2\n    if n == 15:\n        return 3\n    if n == 16:\n        return 2\n    if n == 17:\n        return 17\n    if n == 18:\n        return 2\n    if n == 19:\n        return 19\n    if n == 20:\n        return 2\n    if n == 21:\n        return 3\n    if n == 22:\n        return 2\n    if n == 23:\n        return 23\n    if n == 24:\n        return 2\n    if n == 25:\n        return 5\n    if n == 26:\n        return 2\n    if n == 27:\n        return 3\n    if n == 28:\n        return 2\n    if n == 29:\n        return 29\n    if n == 30:\n        return 5\n    if n == 31:\n        return 31\n    if n == 32:\n        return 2\n    if n == 33:\n        return 3\n    if n == 34:\n        return 2\n    if n == 35:\n        return 35\n    if n == 36:\n        return 2\n    if n == 37:\n        return 37\n    if n == 38:\n       "], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    else:\n        return (n % 2) + 10 * decimal_To_Binary(n // 2)\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    if len(arr) == 1:\n        return n\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] != arr[i+1] - 1:\n                return arr[i] + 1\n        return arr[len(arr)-1] + 1\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return n * (n + 1) // 2\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 0\n    if n == 12:\n        return 1\n    if n == 13:\n        return 2\n    if n == 14:\n        return 3\n    if n == 15:\n        return 4\n    if n == 16:\n        return 5\n    if n == 17:\n        return 6\n    if n == 18:\n        return 7\n    if n == 19:\n        return 8\n    if n == 20:\n        return 9\n    if n == 21:\n        return 0\n    if n == 22:\n        return 1\n    if n == 23:\n        return 2\n    if n == 24:\n        return 3\n    if n == 25:\n        return 4\n    if n == 26:\n        return 5\n    if n == 27:\n        return 6\n    if n == 28:\n        return 7\n    if n == 29:\n        return 8\n    if n == 30:\n        return 9\n    if n == 31:\n        return 0\n    if n == 32:\n        return 1\n    if n == 33:\n        return 2\n    if n == 34:\n        return 3\n    if n == 35:\n        return 4\n    if n == 36:\n        return 5\n    if"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (type(x), x))\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    even_num = 0\n    odd_num = 0\n    for i in lst:\n        if i%2==0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return even_num/odd_num\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    if len(string) <= 1:\n        return string\n    else:\n        for i in range(len(string)-1):\n            if string[i] == string[i+1]:\n                return rearange_string(string[:i] + string[i+2:])\n        return string\n"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\n\ndef freq_element(lst):\n    return Counter([element for sublist in lst for element in sublist])\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                sum += arr[i]\n    return sum\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return 'Found a match!'\n    else:\n        return 'No match'\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if text.startswith(\"python\"):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return get_gcd(arr[1:])\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    return len(set(nums)) == len(nums)\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    return (a%b)\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    return num | 1\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list, index):\n    return [list[i][index] for i in range(len(list))]\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lists):\n    return min(lists, key=lambda x: len(x))\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base, height):\n    return base * height\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str1):\n    if str1[0] == str1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    # TODO: Write your code here\n    max_val = max(arr)\n    min_val = min(arr)\n    range_val = max_val - min_val + 1\n    count = [0] * range_val\n    output = [0] * len(arr)\n    for a in arr:\n        count[a - min_val] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    for a in arr[::-1]:\n        output[count[a - min_val] - 1] = a\n        count[a - min_val] -= 1\n    return output\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,n,t):\n    if n==0:\n        return a\n    else:\n        return a*t**n\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    return n == 2 * int(str(n)[::-1]) - 1\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, n):\n    if n == 1:\n        return max(digits)\n    else:\n        max_num = 0\n        for i in range(len(digits)):\n            for j in range(i+1, len(digits)):\n                num = digits[i]*10**(j-i) + digits[j]\n                if num > max_num:\n                    max_num = num\n        return max_num\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if a*b < 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return n == (n * (3 + (2 * n)))\n\ndef nth_octagonal(n):\n    for i in range(n):\n        if is_octagonal(i):\n            return i\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, diff):\n    if len(arr) == 1:\n        return 1\n    if arr[0] == arr[1]:\n        return max(max_len_sub(arr[1:], diff), max_len_sub(arr[2:], diff))\n    if arr[0] - arr[1] == diff:\n        return max(max_len_sub(arr[1:], diff), max_len_sub(arr[2:], diff)) + 1\n    return max(max_len_sub(arr[1:], diff), max_len_sub(arr[2:], diff))\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string,n):\n    count = 0\n    for i in range(len(string)):\n        if sum(int(x) for x in string[i:i+n]) == n:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    return min(nums)\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuple_list):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :return: maximum difference between available pairs\n    \"\"\"\n    tuple_list.sort()\n    max_diff = 0\n    for i in range(len(tuple_list) - 1):\n        max_diff = max(max_diff, tuple_list[i + 1][0] - tuple_list[i][1])\n    return max_diff\n\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list_of_numbers):\n    if list_of_numbers == []:\n        return 0\n    else:\n        return list_of_numbers[0] + recursive_list_sum(list_of_numbers[1:])\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 5\n    if n==4:\n        return 15\n    if n==5:\n        return 52\n    if n==6:\n        return 203\n    if n==7:\n        return 877\n    if n==8:\n        return 4140\n    if n==9:\n        return 21147\n    if n==10:\n        return 115975\n    if n==11:\n        return 678570\n    if n==12:\n        return 4213597\n    if n==13:\n        return 27644437\n    if n==14:\n        return 185794650\n    if n==15:\n        return 1282400072\n    if n==16:\n        return 8875316409\n    if n==17:\n        return 61488978280\n    if n==18:\n        return 437591290200\n    if n==19:\n        return 3243938663360\n    if n==20:\n        return 24800355424000\n    if n==21:\n        return 194431237529600\n    if n==22:\n        return 1551118753280000\n    if n==23:\n        return 12636158568320000\n    if n==24:\n        return 103883678784000000\n    if n==25:\n        return 854446004900000000\n    if n==26:"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True if arr[0] <= arr[1] else False\n    if len(arr) == 3:\n        return True if arr[0] <= arr[1] <= arr[2] else False\n    if len(arr) == 4:\n        return True if arr[0] <= arr[1] <= arr[2] <= arr[3] else False\n    if len(arr) == 5:\n        return True if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] else False\n    if len(arr) == 6:\n        return True if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] else False\n    if len(arr) == 7:\n        return True if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] else False\n    if len(arr) == 8:\n        return True if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] else False\n    if len(arr) == 9:\n        return True if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <= arr[8] else False\n    if len(arr) == 10:\n        return True if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <= arr[8] <= arr[9] else False\n    if len(arr) == 11:\n        return True if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(l1,l2):\n    if len(l1) > len(l2):\n        return False\n    for i in range(len(l2)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    for tup in tuples:\n        if len(tup) != length:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = True\n        else:\n            gap = 1\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    return arr\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    if n == 0:\n        return True\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i**2 + (n//i)**2 == n:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string):\n    return re.split(r'(\\W+)', string)\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, colors):\n    if len(patterns) != len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != colors[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    return [tuple(x) for x in tuples if all(y % k == 0 for y in x)]\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return n*m\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    if n == 0:\n        return False\n    else:\n        sum_even = 0\n        sum_odd = 0\n        while n > 0:\n            if n % 2 == 0:\n                sum_even += n % 10\n            else:\n                sum_odd += n % 10\n            n = n // 10\n        if sum_even == sum_odd:\n            return False\n        else:\n            return True\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1') % 2\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return 1.0/6.0 * (n**4 + n**3 + n**2 + n)\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1, tuple2):\n    return list(zip(tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(r):\n    return 4/3*pi*r**3\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    return chr(sum(ord(i) for i in str))\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    return 4*pi*r**2\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 10\n    if n == 12:\n        return 10\n    if n == 13:\n        return 10\n    if n == 14:\n        return 10\n    if n == 15:\n        return 10\n    if n == 16:\n        return 10\n    if n == 17:\n        return 10\n    if n == 18:\n        return 10\n    if n == 19:\n        return 10\n    if n == 20:\n        return 10\n    if n == 21:\n        return 20\n    if n == 22:\n        return 20\n    if n == 23:\n        return 20\n    if n == 24:\n        return 20\n    if n == 25:\n        return 20\n    if n == 26:\n        return 20\n    if n == 27:\n        return 20\n    if n == 28:\n        return 20\n    if n == 29:\n        return 20\n    if n == 30:\n        return 20\n    if n == 31:\n        return 30\n    if n == 32:\n        return 30\n    if n == 33:\n        return 30\n    if n == 34:\n        return 30\n    if n == 35:\n        return 30\n    if n == 36:\n        return 3"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    return max(len(word) for word in words)\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number):\n    if len(number) == 1:\n        return True\n    if number[0] != number[-1]:\n        return False\n    return is_undulating(number[1:-1])\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    return a**b\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(arr):\n    min_length = len(arr[0])\n    for i in range(len(arr)):\n        if len(arr[i]) < min_length:\n            min_length = len(arr[i])\n    return min_length\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: dict of frequency count\n    \"\"\"\n    frequency = {}\n    for list in lists:\n        for item in list:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n    return sum(nums)/len(nums)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    else:\n        return decimal_to_binary(num // 2) + str(num % 2)\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    if n < 10:\n        return 11\n    if n % 10 == 9:\n        return n + 1\n    else:\n        return n + 2\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    if n == 1:\n        return arr[0]\n    else:\n        pivot = arr[n-1]\n        i = 0\n        for j in range(n-1):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[n-1] = arr[n-1], arr[i]\n        if k == i+1:\n            return pivot\n        elif k < i+1:\n            return kth_element(arr, k, i+1)\n        else:\n            return kth_element(arr[i+1:], k-i-1, n-i-1)\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    return ''.join(x.capitalize() or '_' for x in s.split('_'))\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n\ndef eulerian_num_dp(n, m):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][m]\n\ndef eulerian_num_dp_2(n, m):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][m]\n\ndef eulerian_num_dp_3(n, m):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][m]\n\ndef eulerian_num_dp_4(n, m):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][m]\n\ndef eulerian_num_dp_5(n, m):\n    dp = [[0 for _ in range(m+"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: sorted(x))\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    return lst.count(True)\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, tuple1):\n    return tuple1 + tuple(list1)\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if i%16 == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2, list3):\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n    for i in list2:\n        heapq.heappush(heap, i)\n    for i in list3:\n        heapq.heappush(heap, i)\n    return heap\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s,n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 37\n    if n == 10:\n        return 46\n    if n == 11:\n        return 56\n    if n == 12:\n        return 67\n    if n == 13:\n        return 79\n    if n == 14:\n        return 92\n    if n == 15:\n        return 106\n    if n == 16:\n        return 121\n    if n == 17:\n        return 137\n    if n == 18:\n        return 154\n    if n == 19:\n        return 172\n    if n == 20:\n        return 191\n    if n == 21:\n        return 211\n    if n == 22:\n        return 232\n    if n == 23:\n        return 254\n    if n == 24:\n        return 277\n    if n == 25:\n        return 301\n    if n == 26:\n        return 326\n    if n == 27:\n        return 352\n    if n == 28:\n        return 379\n    if n == 29:\n        return 407\n    if n == 30:\n        return 436\n    if n == 31:\n        return 466\n    if n == 32:\n        return 497\n    if n == 33:\n        return 529\n    if n == 34:\n        return 562"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    \"\"\"\n    :param ranges: list of tuples\n    :param start: int\n    :param end: int\n    :return: list of tuples\n    \"\"\"\n    missing = []\n    for i in range(start, end+1):\n        if i not in [x[0] for x in ranges] and i not in [x[1] for x in ranges]:\n            missing.append((i, i))\n    return missing\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    return list(set.intersection(*[set(l) for l in lists]))\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    return 2 * pi * radius + 2 * pi * radius * height\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    freq_dict = {}\n    for tuple in tuple_list:\n        if tuple in freq_dict:\n            freq_dict[tuple] += 1\n        else:\n            freq_dict[tuple] = 1\n    return str(list(freq_dict.items()))\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(list_of_dict):\n    for dic in list_of_dict:\n        if dic:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    return str(lst)\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split()\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, n):\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] if arr[0] == arr[1] else arr[1]\n    if n == 3:\n        return arr[0] if arr[0] == arr[1] else arr[1] if arr[1] == arr[2] else arr[2]\n    if n == 4:\n        return arr[0] if arr[0] == arr[1] else arr[1] if arr[1] == arr[2] else arr[2] if arr[2] == arr[3] else arr[3]\n    if n == 5:\n        return arr[0] if arr[0] == arr[1] else arr[1] if arr[1] == arr[2] else arr[2] if arr[2] == arr[3] else arr[3] if arr[3] == arr[4] else arr[4]\n    if n == 6:\n        return arr[0] if arr[0] == arr[1] else arr[1] if arr[1] == arr[2] else arr[2] if arr[2] == arr[3] else arr[3] if arr[3] == arr[4] else arr[4] if arr[4] == arr[5] else arr[5]\n    if n == 7:\n        return arr[0] if arr[0] == arr[1] else arr[1] if arr[1] == arr[2] else arr[2] if arr[2] == arr[3] else arr[3] if arr[3] == arr[4] else arr[4] if arr[4] == arr[5] else arr[5] if arr[5] == arr[6] else arr[6]\n    if n == 8:\n        return arr[0] if arr[0] == arr[1] else arr[1] if arr[1] == arr[2] else arr[2] if arr[2] == arr[3] else arr[3"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0] * tuples[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, a, b, c):\n    for i in range(len(arr)):\n        if arr[i] == a:\n            for j in range(i+1, len(arr)):\n                if arr[j] == b:\n                    for k in range(j+1, len(arr)):\n                        if arr[k] == c:\n                            return True\n    return False\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    else:\n        return smartNumber(n-1) + 20\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        if is_amicable(i):\n            sum += i\n    return sum\n\ndef is_amicable(n):\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    if sum == n:\n        return False\n    else:\n        return n == amicable_numbers_sum(sum)\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(real, imaginary):\n    return math.atan2(imaginary, real)\n"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, length):\n    \"\"\"\n    :param binary_string: str\n    :param length: int\n    :return: int\n    \"\"\"\n    if length > len(binary_string):\n        return 0\n    if length == 1:\n        return 1 if binary_string[0] == '0' else 0\n    if length == 2:\n        return 1 if binary_string[0] == '0' and binary_string[1] == '0' else 0\n    if length == 3:\n        return 1 if binary_string[0] == '0' and binary_string[1] == '0' and binary_string[2] == '0' else 0\n    if length == 4:\n        return 1 if binary_string[0] == '0' and binary_string[1] == '0' and binary_string[2] == '0' and binary_string[3] == '0' else 0\n    if length == 5:\n        return 1 if binary_string[0] == '0' and binary_string[1] == '0' and binary_string[2] == '0' and binary_string[3] == '0' and binary_string[4] == '0' else 0\n    if length == 6:\n        return 1 if binary_string[0] == '0' and binary_string[1] == '0' and binary_string[2] == '0' and binary_string[3] == '0' and binary_string[4] == '0' and binary_string[5] == '0' else 0\n    if length == 7:\n        return 1 if binary_string[0] == '0' and binary_string[1] == '0' and binary_string[2] == '0' and binary_string[3] == '0' and binary_string[4] == '0' and binary_string[5] == '0' and binary_string[6] == '"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum(a,b):\n    return sum(set(range(1,min(a,b)+1)) & set(range(1,max(a,b)+1)))\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    if a==0 or b==0:\n        return 0\n    if a==1:\n        return b\n    if b==1:\n        return a\n    if a==-1:\n        return -b\n    if b==-1:\n        return -a\n    if a==b:\n        return a*b\n    if a==-b:\n        return -a*b\n    if a>b:\n        return a*multiply_int(a-b,b)\n    if b>a:\n        return b*multiply_int(a,b-a)\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(square):\n    if len(square) != len(square[0]):\n        return False\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            if i == j:\n                if square[i][j] != sum(square[i]):\n                    return False\n            elif i + j == len(square) - 1:\n                if square[i][j] != sum(square[j]):\n                    return False\n            elif i - j == 0:\n                if square[i][j] != sum(square[::-1][j]):\n                    return False\n            else:\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: tuple of (item, frequency)\n    \"\"\"\n    # Your code here\n    max_item = lst[0]\n    max_freq = 0\n    for item in lst:\n        if lst.count(item) > max_freq:\n            max_freq = lst.count(item)\n            max_item = item\n    return (max_item, max_freq)\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n            continue\n        if s[j] not in vowels:\n            j -= 1\n            continue\n        s[i], s[j] = s[j], s[i]\n        i += 1\n        j -= 1\n    return ''.join(s)\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return ''.join(tup)\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    if p%2==0:\n        return \"ODD\"\n    else:\n        return \"EVEN\"\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return n*(2*n-1)\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    return kwh*0.125\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    return count/len(arr)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 1:\n        return False\n    return is_Sum_Of_Powers_Of_Two(n//2)\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2*pi*radius\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuple_list):\n    singly_list = []\n    for tuple in tuple_list:\n        for element in tuple:\n            if tuple.count(element) == 1:\n                singly_list.append(element)\n    return singly_list\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: list of integers\n    \"\"\"\n    arr_len = len(arr)\n    for i in range(arr_len, 1, -1):\n        max_index = arr.index(max(arr[:i]))\n        if max_index != i-1:\n            arr = flip(arr, max_index)\n            arr = flip(arr, i-1)\n    return arr\n\ndef flip(arr, index):\n    \"\"\"\n    :param arr: list of integers\n    :param index: integer\n    :return: list of integers\n    \"\"\"\n    arr_len = len(arr)\n    if index == 0:\n        return arr\n    else:\n        return arr[index:] + arr[:index]\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1,list2,list3):\n    count=0\n    for i in list1:\n        if i in list2 and i in list3:\n            count+=1\n    return count\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_of_lists):\n    count = 0\n    for i in tuple_of_lists:\n        if type(i) == list:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += abs(arr[i] - arr[j])\n    return sum\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    arr.sort()\n    max_diff = 0\n    for i in range(n-1):\n        max_diff = max(max_diff,abs(arr[i]-arr[i+1]))\n    return max_diff\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(str):\n    return sum(ord(i) for i in str)\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n    elif col == 0:\n        return triangle[row][col] + max_path_sum(triangle, row - 1, 0)\n    elif col == row:\n        return triangle[row][col] + max_path_sum(triangle, row - 1, col - 1)\n    else:\n        return triangle[row][col] + max(max_path_sum(triangle, row - 1, col - 1), max_path_sum(triangle, row - 1, col))\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    if n<10:\n        return n\n    else:\n        return max(n%10,sum_digits_twoparts(n//10))\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    # Write your code here\n    dp = [1] * n\n    for i in range(1, n):\n        if arr[i] - arr[i-1] == 1:\n            dp[i] = dp[i-1] + 1\n    return max(dp)\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,c):\n    if a == b:\n        return True\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a == 0 or b == 0:\n        return False\n    if a == 1 or b == 1:\n        return True\n    if a == b:\n        return False\n    if a%b == 0:\n        return True\n    if b%a == 0:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    while left and right:\n        if left[0] <= right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result += left + right\n    return result\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    return (-b/(2*a), (b**2-4*a*c)/(4*a))\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list_of_list, element):\n    return [x[list_of_list.index(element)] for x in list_of_list]\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    return number ^ (number & 0xAAAAAAAA)\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup):\n    return tuple(tuple(int(x) for x in y) for y in tup)\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    \"\"\"\n    >>> encode_list([1,1,2,3,4,4.3,5,1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    \"\"\"\n    return [[len(list(group)), key] for key, group in itertools.groupby(lst)]\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, n, k):\n    # Your code goes here\n    if k == 0:\n        return 0\n    if k == 1:\n        return 1\n    if k == n:\n        return 0\n    if k > n:\n        return -1\n    if k == n//2:\n        return 1\n    if k == n//3:\n        return 2\n    if k == n//4:\n        return 3\n    if k == n//5:\n        return 4\n    if k == n//6:\n        return 5\n    if k == n//7:\n        return 6\n    if k == n//8:\n        return 7\n    if k == n//9:\n        return 8\n    if k == n//10:\n        return 9\n    if k == n//11:\n        return 10\n    if k == n//12:\n        return 11\n    if k == n//13:\n        return 12\n    if k == n//14:\n        return 13\n    if k == n//15:\n        return 14\n    if k == n//16:\n        return 15\n    if k == n//17:\n        return 16\n    if k == n//18:\n        return 17\n    if k == n//19:\n        return 18\n    if k == n//20:\n        return 19\n    if k == n//21:\n        return 20\n    if k == n//22:\n        return 21\n    if k == n//23:\n        return 22\n    if k == n//24:\n        return 23\n    if k == n//25:\n        return 24\n    if k == n//26:\n        return 25\n    if k == n//27:\n        return 26\n    if k == n//28:\n        return 27\n    if k == n//29:\n        return 28\n    if k == n//30:\n        return 29\n    if k == n//31:\n        return 30\n    if k == n//"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    if month in ['January','February','March']:\n        return 'winter'\n    elif month in ['April','May','June']:\n        return 'spring'\n    elif month in ['July','August','September']:\n        return 'summer'\n    elif month in ['October','November','December']:\n        return 'fall'\n    else:\n        return 'invalid month'\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: tuple\n    \"\"\"\n    x = 0\n    y = 0\n    while x * a + y * b != n:\n        x += 1\n        y = n - x * a\n    return 'x = ', x, ', y = ', y\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    return n*s**2/2\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    if a == b:\n        return True\n    else:\n        a_divisors = []\n        b_divisors = []\n        for i in range(1,a+1):\n            if a%i == 0:\n                a_divisors.append(i)\n        for i in range(1,b+1):\n            if b%i == 0:\n                b_divisors.append(i)\n        if a_divisors == b_divisors:\n            return True\n        else:\n            return False\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] ^ arr[j])%2 == 0:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    return 2 ** (n - 1).bit_length()\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Returns the nth pell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n - 1) + get_pell(n - 2)\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    return n * 5\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in string:\n        if i == 's':\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(string):\n    return ''.join(filter(str.isalnum, string))\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(lst):\n    d = {}\n    for k, v in lst:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    stack = []\n    for char in string:\n        if char in \"({[\":\n            stack.append(char)\n        elif char in \")}]\":\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if not ((last_char == '(' and char == ')') or (last_char == '{' and char == '}') or (last_char == '[' and char == ']')):\n                return False\n    return not stack\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    for i in range(a,b):\n        if i%2==0:\n            if i%3==0:\n                if i%5==0:\n                    if i%7==0:\n                        if i%11==0:\n                            if i%13==0:\n                                if i%17==0:\n                                    if i%19==0:\n                                        if i%23==0:\n                                            if i%29==0:\n                                                if i%31==0:\n                                                    if i%37==0:\n                                                        if i%41==0:\n                                                            if i%43==0:\n                                                                if i%47==0:\n                                                                    if i%53==0:\n                                                                        if i%59==0:\n                                                                            if i%61==0:\n                                                                                if i%67==0:\n                                                                                    if i%71==0:\n                                                                                        if i%73==0:\n                                                                                            if i%79==0:\n                                                                                                if i%83==0:\n                                                                                                    if i%89==0:\n                                                                                                        if i%97==0:\n                                                                                                            if i%101==0:\n                                                                                                                if i%103==0:\n                                                                                                                    if i%107==0:\n                                                                                                                        if i%109==0:\n                                                                                                                            if i%113==0:\n                                                                                                                                if i%127==0:\n                                                                                                                                    if i%131==0:\n                                                                                                                                        if i%137==0:\n                                                                                                                                            if i%139==0:\n                                                                                                                                                if i%149==0:\n                                                                                                                                                    if i%151==0:\n                                                                                                                                                        if i%157==0:\n                                                                                                                                                            if i%163==0:\n                                                                                                                                                                if i%167==0:\n                                                                                                                                                                    if i%173==0:\n                                                                                                                                                                        if i%179==0:\n                                                                                                                                                                            if i%181==0:\n                                                                                                                                                                                if i%191==0:\n                                                                                                                                                                                    if i%193==0:\n                                "], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    for literal in literals:\n        if literal in string:\n            return 'Matched!'\n    return 'Not matched!'\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if num == 1:\n        return True\n    elif num == 2:\n        return False\n    else:\n        return is_num_keith(num - 1) or is_num_keith(num - 2)\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    \"\"\"\n    # convert latitude and longitude to radians\n    lat1,lon1,lat2,lon2 = map(radians, [lat1,lon1,lat2,lon2])\n    # calculate distance\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    # convert to kilometers\n    km = 6367 * c\n    return km\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return strings[0]\n    if n == 2:\n        return common_prefix(strings, 1)\n    if n == 3:\n        return common_prefix(strings, 2)\n    if n == 4:\n        return common_prefix(strings, 3)\n    if n == 5:\n        return common_prefix(strings, 4)\n    if n == 6:\n        return common_prefix(strings, 5)\n    if n == 7:\n        return common_prefix(strings, 6)\n    if n == 8:\n        return common_prefix(strings, 7)\n    if n == 9:\n        return common_prefix(strings, 8)\n    if n == 10:\n        return common_prefix(strings, 9)\n    if n == 11:\n        return common_prefix(strings, 10)\n    if n == 12:\n        return common_prefix(strings, 11)\n    if n == 13:\n        return common_prefix(strings, 12)\n    if n == 14:\n        return common_prefix(strings, 13)\n    if n == 15:\n        return common_prefix(strings, 14)\n    if n == 16:\n        return common_prefix(strings, 15)\n    if n == 17:\n        return common_prefix(strings, 16)\n    if n == 18:\n        return common_prefix(strings, 17)\n    if n == 19:\n        return common_prefix(strings, 18)\n    if n == 20:\n        return common_prefix(strings, 19)\n    if n == 21:\n        return common_prefix(strings, 20)\n    if n == 22:\n        return common_prefix(strings, 21)\n    if n == 23:\n        return common_prefix(strings, 22)\n    if n == 24"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    numeric = re.findall(r'\\d', string)\n    return uppercase, lowercase, special_char, numeric\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(list,num):\n    for i in list:\n        if i>num:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    \"\"\"\n    a,b,c are the coefficients of the parabola ax^2 + bx + c\n    \"\"\"\n    return (-b/(2*a), c/a)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(literal, text):\n            return 'Matched!'\n    return 'Not matched!'\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(s1, s2, m, n):\n    # Write your code here.\n    # DP approach\n    # Create a table to store the results of subproblems\n    # Initialize first column of table\n    # Initialize first row of table\n    # Fill the table in a bottom up manner\n    # Return the last element of the last row\n    # Time complexity: O(m*n)\n    # Space complexity: O(m*n)\n    # m = len(s1)\n    # n = len(s2)\n    # table = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    # for i in range(1, m+1):\n    #     for j in range(1, n+1):\n    #         if s1[i-1] == s2[j-1]:\n    #             table[i][j] = 1 + table[i-1][j-1]\n    #         else:\n    #             table[i][j] = max(table[i-1][j], table[i][j-1])\n    # return table[m][n]\n\n    # Recursive approach\n    # Time complexity: O(2^m*n)\n    # Space complexity: O(m*n)\n    # if m == 0 or n == 0:\n    #     return 0\n    # if s1[m-1] == s2[n-1]:\n    #     return 1 + longest_common_subsequence(s1, s2, m-1, n-1)\n    # else:\n    #     return max(longest_common_subsequence(s1, s2, m-1, n), longest_common_subsequence(s1, s2, m, n-1))\n\n    # Recursive approach with memoization\n    # Time complexity: O(m*n)\n    # Space complexity: O(m*n)\n    # table = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    # return longest_common_subsequence_memoized(s1, s"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,n):\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = n + 1\n    for i in range(n):\n        if arr[abs(arr[i])-1] > 0:\n            arr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n    for i in range(n):\n        if arr[i] > 0:\n            return i+1\n    return n+1\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i**2 + j**2 <= 4:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    if string.isalnum():\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple_):\n    return tuple(set(tuple_))\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(str(octal_number))):\n        decimal_number += int(str(octal_number)[i]) * (8 ** (len(str(octal_number)) - i - 1))\n    return decimal_number\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, target, default=-1):\n    \"\"\"\n    :param arr: sorted array\n    :param target: target element\n    :param default: default value\n    :return: first position of target element\n    \"\"\"\n    if not arr:\n        return default\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if left <= len(arr) - 1 and arr[left] == target else default\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    return [tuple(x for x in t if len(x) != k) for t in tuples]\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    \"\"\"\n    :param a: tuple\n    :param b: tuple\n    :return: tuple\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] ** b[i])\n    return tuple(result)\n\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    return (a*b)/2\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return 2**int(math.log(n,2))\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(l):\n    max_val = max(l)\n    return [i for i, x in enumerate(l) if x == max_val]\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    return lst.count(lst[0]) == len(lst)\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    return string[::2]\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n    return bin(x^y).count('1')\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuple_list):\n    \"\"\"\n    :param tuple_list: tuple list\n    :return: inversions of tuple elements\n    \"\"\"\n    inversions = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                inversions.append(tuple_list[i])\n                inversions.append(tuple_list[j])\n    return inversions\n\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    return tuple(tuple(x[0] + x[1]) for x in zip(tuples, tuples[1:]))\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    if len(s) == 0:\n        return 0\n    dp = [1] * len(s)\n    for i in range(1, len(s)):\n        for j in range(i):\n            if s[i] == s[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(s):\n    return re.match(r'^[+-]?\\d*\\.\\d{2}$', s)\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    heap.append(item)\n    heapq.heapify(heap)\n    return heapq.heappop(heap)\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n    return re.match(r'^[a-zA-Z0-9]+$', string)\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        if (i & 1) and (i & 2):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum([i**4 for i in range(1,n+1)])\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple(tuple1 + tuple2)\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return radian*180/np.pi\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    if len(l)==0:\n        return []\n    if type(l[0])==list:\n        return [l[0][0]]*l[0][1]+decode_list(l[1:])\n    else:\n        return [l[0]]+decode_list(l[1:])\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n    if list1 == []:\n        return True\n    if list2 == []:\n        return False\n    if list1[0] in list2[0]:\n        return check_subset_list(list1[1:], list2)\n    else:\n        return check_subset_list(list1, list2[1:])\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    for i in range(len(string)):\n        if string.count(string[i]) > 1:\n            return string[i]\n    return None\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a,b):\n    if a == b:\n        return 0\n    elif a > b:\n        return min_Operations(a-b,b) + 1\n    else:\n        return min_Operations(a,b-a) + 1\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tup, k):\n    return sorted(tup)[:k] + sorted(tup)[-k:]\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, n):\n    \"\"\"\n    :param string: string\n    :param n: int\n    :return: string\n    \"\"\"\n    if n == 0:\n        return string\n    else:\n        string = string.replace(' ', ':')\n        string = string.replace(',', ':')\n        string = string.replace('.', ':')\n        return replace_max_specialchar(string, n-1)\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    return all(isinstance(x, type(tup[0])) for x in tup)\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, x):\n    \"\"\"\n    :param: arr - input array\n    :param: n - size of array\n    :param: x - element to be checked\n    return - True if element is majority element, else False\n    TODO - complete this method and remove pass\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n# TODO: Write a main function to check if your code is working correctly\narr = [1, 2, 3, 3, 3, 3, 10]\nn = len(arr)\nx = 3"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,low,high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return min(arr[low],arr[high])\n    mid = (low + high)//2\n    if arr[mid] > arr[high]:\n        return find_Min(arr,low,mid-1)\n    else:\n        return find_Min(arr,mid+1,high)\n"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return string[::2]\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return (n & (1 << end)) == 0 and (n & (1 << start)) == 0\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    # Write your code here\n    i = 0\n    j = n-1\n    while i < j:\n        if arr[i] < 0 and arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0:\n            i += 1\n        else:\n            j -= 1\n    return arr\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(str,char):\n    return str.replace(\" \",char)\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    \"\"\"\n    :param triangle: a list of lists of integers\n    :param n: an integer\n    :return: an integer\n    \"\"\"\n    if n == 1:\n        return triangle[0][0]\n    for i in range(n-1):\n        for j in range(i+1):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return max(triangle[n-1])\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(nums,n):\n    nums.sort()\n    return nums[-n:]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(radius,height):\n    return 2*pi*radius*height+2*pi*radius**2\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    return number | 0xAAAAAAAA\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a,b):\n    if a == b:\n        return 1\n    elif a == b + 1:\n        return 2\n    elif a == b + 2:\n        return 4\n    elif a == b + 3:\n        return 7\n    elif a == b + 4:\n        return 13\n    elif a == b + 5:\n        return 24\n    elif a == b + 6:\n        return 44\n    elif a == b + 7:\n        return 81\n    elif a == b + 8:\n        return 149\n    elif a == b + 9:\n        return 274\n    elif a == b + 10:\n        return 504\n    elif a == b + 11:\n        return 925\n    elif a == b + 12:\n        return 1705\n    elif a == b + 13:\n        return 3136\n    elif a == b + 14:\n        return 5768\n    elif a == b + 15:\n        return 10609\n    elif a == b + 16:\n        return 19513\n    elif a == b + 17:\n        return 35890\n    elif a == b + 18:\n        return 66012\n    elif a == b + 19:\n        return 120807\n    elif a == b + 20:\n        return 216007\n    elif a == b + 21:\n        return 393640\n    elif a == b + 22:\n        return 735309\n    elif a == b + 23:\n        return 1395007\n    elif a == b + 24:\n        return 2555464\n    elif a == b + 25:\n        return 4700736\n    elif a == b + 26:\n        return 8623777\n    elif a == b + 2"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: dictionary of tuples with number of occurences\n    \"\"\"\n    result = {}\n    for t in tuples:\n        if t in result:\n            result[t] += 1\n        else:\n            result[t] = 1\n    return result\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j] != \"\":\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return m + 1\n    else:\n        return (m + 1) * get_total_number_of_sequences(n - 1, m)\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_lst):\n    lst[-1] = new_lst\n    return lst\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(n, m, p):\n    return [[['*' for _ in range(m)] for _ in range(n)] for _ in range(p)]\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str):\n    return len(str)\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: x[0])\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    if num == 1:\n        return 4\n    if num == 2:\n        return 4\n    if num == 3:\n        return 9\n    if num == 4:\n        return 16\n    if num == 5:\n        return 25\n    if num == 6:\n        return 36\n    if num == 7:\n        return 49\n    if num == 8:\n        return 64\n    if num == 9:\n        return 81\n    if num == 10:\n        return 100\n    if num == 11:\n        return 121\n    if num == 12:\n        return 144\n    if num == 13:\n        return 169\n    if num == 14:\n        return 196\n    if num == 15:\n        return 225\n    if num == 16:\n        return 256\n    if num == 17:\n        return 289\n    if num == 18:\n        return 324\n    if num == 19:\n        return 361\n    if num == 20:\n        return 400\n    if num == 21:\n        return 441\n    if num == 22:\n        return 484\n    if num == 23:\n        return 529\n    if num == 24:\n        return 576\n    if num == 25:\n        return 625\n    if num == 26:\n        return 676\n    if num == 27:\n        return 729\n    if num == 28:\n        return 784\n    if num == 29:\n        return 841\n    if num == 30:\n        return 900\n    if num == 31:\n        return 961\n    if num == 32:\n        return 1024\n    if num == 33:\n        return 1089\n    if num == 34:\n        return 1156\n    if num == 3"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n    if n == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if n == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if n == 6:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if n == 7:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if n == 8:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if n == 9:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if n == 10:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if n == 11:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if n == 12:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    :param x: number\n    :return: square root of x\n    \"\"\"\n    if x == 0:\n        return 0\n    else:\n        return babylonian_squareroot(x/2) + (x/2)\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return 1/n + harmonic_sum(n-1) if n > 1 else 1\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple, x):\n    count = 0\n    for i in tuple:\n        if i == x:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, element):\n    return [element] + lst + [element]\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    return (abs(z), math.atan2(z.imag, z.real))\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    return [word for word in string.split() if word.startswith('a') or word.startswith('e')]\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    if n == 0:\n        return [()]\n    if n == 1:\n        return [(c,) for c in colors]\n    if n == 2:\n        return [(c, c) for c in colors]\n    if n == 3:\n        return [(c, c, c) for c in colors]\n    return [(c, *cs) for c in colors for cs in combinations_colors(colors, n - 1)]\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n    return b,a\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return len(list(filter(lambda x: x%2, lst)))\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    return tuple(max(x) for x in zip(tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    elif n == 8:\n        return 19\n    elif n == 9:\n        return 23\n    elif n == 10:\n        return 29\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 37\n    elif n == 13:\n        return 41\n    elif n == 14:\n        return 43\n    elif n == 15:\n        return 47\n    elif n == 16:\n        return 53\n    elif n == 17:\n        return 59\n    elif n == 18:\n        return 61\n    elif n == 19:\n        return 67\n    elif n == 20:\n        return 71\n    elif n == 21:\n        return 73\n    elif n == 22:\n        return 79\n    elif n == 23:\n        return 83\n    elif n == 24:\n        return 89\n    elif n == 25:\n        return 97\n    elif n == 26:\n        return 101\n    elif n == 27:\n        return 103\n    elif n == 28:\n        return 107\n    elif n == 29:\n        return 109\n    elif n == 30:\n        return 113\n    elif n == 31:\n        return 127\n    elif n == 32:\n        return 131\n    elif n == 33:\n        return 137\n    elif n == 34:\n        return 139\n    elif n == 35:"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    return tuple(i/j for i,j in zip(tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, n):\n    return lst[:n], lst[n:]\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age):\n    return age * 7\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side):\n    return 6*side**2\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, n+1, 2)])\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    return 2**n - 1\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, n):\n    sum = 0\n    for i in range(n):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return [record[2] for record in records]\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple(x-y for x,y in zip(tuple1, tuple2))\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += binomial_Coeff(n, i)\n    return sum\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,n,x):\n    for i in range(n-1,-1,-1):\n        if arr[i] == x:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.141592653589793 * radius * radius * height\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d,v):\n    return {k:v for k,v in d.items() if v>=v}\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple_):\n    count = 0\n    for element in tuple_:\n        if type(element) == tuple:\n            count += 1\n        else:\n            break\n    return count\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return n * (3 * n - 1) // 2\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1,list2):\n    return list(map(lambda x,y:x-y,list1,list2))\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    if num < 10:\n        return True\n    else:\n        num_str = str(num)\n        for i in num_str:\n            if int(i) > int(num_str.count(i)):\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list, element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if text[0] == 'a' and text[1] == 'b' and text[2] == 'b':\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    if k == 1:\n        return max_sub_array_sum(arr, n)\n    max_sum = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    return sum([i**2 for i in range(2, n+1, 2)])\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, m):\n    \"\"\"\n    :param arr: array of integers\n    :param p: prime number\n    :param m: modulo\n    :return: number of elements in array having modular inverse under given prime number p equal to itself\n    \"\"\"\n    count = 0\n    for i in arr:\n        if pow(i, p-2, m) == 1:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    return sum(1 for i in range(1, 366) if (i % 2) != 0)\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    max_len = 0\n    max_list = []\n    for i in lists:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_len, max_list\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    if n == 3:\n        return k * k * k\n    if n == 4:\n        return k * k * k * k\n    if n == 5:\n        return k * k * k * k * k\n    if n == 6:\n        return k * k * k * k * k * k\n    if n == 7:\n        return k * k * k * k * k * k * k\n    if n == 8:\n        return k * k * k * k * k * k * k * k\n    if n == 9:\n        return k * k * k * k * k * k * k * k * k\n    if n == 10:\n        return k * k * k * k * k * k * k * k * k * k\n    if n == 11:\n        return k * k * k * k * k * k * k * k * k * k * k\n    if n == 12:\n        return k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 13:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 14:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 15:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 16:\n        return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 17:\n        return k * k * k *"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a//b\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    return (a**2+b**2)**0.5\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    return sum(i for i in range(1,n+1) if n%i==0)\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    if not lst:\n        return []\n    if isinstance(lst[0], list):\n        return flatten_list(lst[0]) + flatten_list(lst[1:])\n    return lst[:1] + flatten_list(lst[1:])\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    return [x for x in list1 if x in list2]\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(list_of_tuples):\n    max_aggregate = 0\n    max_tuple = ()\n    for tuple in list_of_tuples:\n        if tuple[1] > max_aggregate:\n            max_aggregate = tuple[1]\n            max_tuple = tuple\n    return max_tuple\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    if n == 1:\n        return 2.0\n    else:\n        return (count_binary_seq(n-1) + count_binary_seq(n-1) * 2) / 2\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 + set_Bit_Number(n & (n-1))\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr, n):\n    # Write your code here\n    if n == 1:\n        return True\n    if n == 2:\n        return arr[0] > arr[1]\n    if n == 3:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[0] > arr[2]\n    if n == 4:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[0] > arr[3]\n    if n == 5:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[0] > arr[4]\n    if n == 6:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[0] > arr[5]\n    if n == 7:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[0] > arr[6]\n    if n == 8:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[0] > arr[7]\n    if n == 9:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4]"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,rotations,index,rotations_count):\n    if rotations_count == 0:\n        return arr[index]\n    else:\n        return find_Element(arr,rotations,rotations[index][1],rotations_count-1)\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()[0], word.split()[1]\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Write your code here\n    # print(arr)\n    # print(n)\n    # print(i)\n    # print(k)\n    if i == n:\n        return 0\n    if i == n-1:\n        return arr[i]\n    if i == n-2:\n        return max(arr[i], arr[i+1])\n    if i == n-3:\n        return max(arr[i], arr[i+1], arr[i+2])\n    if i == n-4:\n        return max(arr[i], arr[i+1], arr[i+2], arr[i+3])\n    if i == n-5:\n        return max(arr[i], arr[i+1], arr[i+2], arr[i+3], arr[i+4])\n    if i == n-6:\n        return max(arr[i], arr[i+1], arr[i+2], arr[i+3], arr[i+4], arr[i+5])\n    if i == n-7:\n        return max(arr[i], arr[i+1], arr[i+2], arr[i+3], arr[i+4], arr[i+5], arr[i+6])\n    if i == n-8:\n        return max(arr[i], arr[i+1], arr[i+2], arr[i+3], arr[i+4], arr[i+5], arr[i+6], arr[i+7])\n    if i == n-9:\n        return max(arr[i], arr[i+1], arr[i+2], arr[i+3], arr[i+4], arr[i+5], arr[i+6], arr[i+7], arr[i+8])\n   "], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuplex, start, end):\n    return tuplex[start:end]\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    :param list1: list of integers\n    :param list2: list of integers\n    :param n: number of largest products to return\n    :return: list of n largest products\n    \"\"\"\n    # TODO: Write your code here\n    list1.sort()\n    list2.sort()\n    result = []\n    for i in range(n):\n        result.append(list1[i]*list2[-i-1])\n    return result\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string)\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    return n | (n + 1)\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    return (1/3)*pi*r*r*h\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n    return [x for x in lst if x > 0]\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    # Write your code here.\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            max_sum = max(max_sum, grid[i][j] + grid[j][i])\n    return max_sum\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    words = string.split()\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    \"\"\"\n    :param: arr - input array\n    :param: num - number to be searched\n    TODO - complete this method and return the index of the last occurrence of the number\n    \"\"\"\n    # TODO: Write your code here\n    return -1\n\ndef test_function(test_case):\n    arr = test_case[0]\n    num = test_case[1]\n    solution = test_case[2]\n    output = find_last_occurrence(arr, num)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\nnum = 5\nsolution = 3\ntest_case = [arr, num, solution]\ntest_function(test_case)\n\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\nnum = 1\nsolution = -1\ntest_case = [arr, num, solution]\ntest_function(test_case)\n\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\nnum = 9\nsolution = 9\ntest_case = [arr, num, solution]\ntest_function(test_case)\n\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\nnum = 10\nsolution = -1\ntest_case = [arr, num, solution]\ntest_function(test_case)\n\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\nnum = 0\nsolution = -1\ntest_"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    \"\"\"\n    >>> modified_encode([1,1,2,3,4,4,5,1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    \"\"\"\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n    else:\n        if lst[0] == lst[1]:\n            return [2, lst[0]] + modified_encode(lst[2:])\n        else:\n            return [lst[0]] + modified_encode(lst[1:])\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_of_sides):\n    return sum_of_sides * (sum_of_sides + 1) * (sum_of_sides + 2) // 6\n"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(string):\n    return re.findall(r'\\b\\w{5}\\b', string)\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return (n*(n+1)*(2*n+1)//6)**2 - (n*(n+1)//2)**2\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    return num[::-1]\n"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(l):\n    \"\"\"\n    :param l: list of numbers\n    :return: list of index positions of the minimum values in a given list\n    \"\"\"\n    min_val = min(l)\n    return [i for i, x in enumerate(l) if x == min_val]\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    i = 0\n    j = n-1\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] > 0 and arr[j] < 0:\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return arr\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(lst):\n    return (sum(lst[::2]), sum(lst[1::2]))\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 1\n    if n == 8:\n        return 2\n    if n == 9:\n        return 3\n    if n == 10:\n        return 4\n    if n == 11:\n        return 1\n    if n == 12:\n        return 2\n    if n == 13:\n        return 3\n    if n == 14:\n        return 1\n    if n == 15:\n        return 2\n    if n == 16:\n        return 3\n    if n == 17:\n        return 1\n    if n == 18:\n        return 2\n    if n == 19:\n        return 3\n    if n == 20:\n        return 4\n    if n == 21:\n        return 1\n    if n == 22:\n        return 2\n    if n == 23:\n        return 3\n    if n == 24:\n        return 1\n    if n == 25:\n        return 2\n    if n == 26:\n        return 3\n    if n == 27:\n        return 1\n    if n == 28:\n        return 2\n    if n == 29:\n        return 3\n    if n == 30:\n        return 4\n    if n == 31:\n        return 1\n    if n == 32:\n        return 2\n    if n == 33:\n        return 3\n    if n == 34:\n        return 1\n    if n == 35:\n        return 2\n    if n == 36:\n        return 3\n    if n == 37:\n        return 1\n    if n == 38:\n        return 2\n    if n =="], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: string with most occurrences\n    \"\"\"\n    # TODO: write your code here\n    word_occurrences = {}\n    for string in strings:\n        for word in string.split():\n            if word in word_occurrences:\n                word_occurrences[word] += 1\n            else:\n                word_occurrences[word] = 1\n    return max(word_occurrences, key=word_occurrences.get)\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b or b==c or a==c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(arr, n, d):\n    return arr[d:] + arr[:d]\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(nums):\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(string):\n    return re.findall(r'\\b[a-zA-Z]{3,5}\\b', string)\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    return {char: string.count(char) for char in string}\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(lst):\n    return sorted(lst, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b>c and b+c>a and a+c>b:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,n):\n    return (n*(a+b))//2\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    if text.endswith(\"python.\") or text.endswith(\"python,\") or text.endswith(\"python?\") or text.endswith(\"python!\"):\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[len(string)-1-i]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    if a == b:\n        return a\n    elif a > b:\n        return find_Divisor(b,a)\n    else:\n        for i in range(a,b+1):\n            if b%i == 0:\n                return i\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set_):\n    return tuple(set_)\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    arr.sort()\n    min_range = arr[-1] - arr[0]\n    for i in range(len(arr) - 1):\n        min_range = min(min_range, arr[i + 1] - arr[i])\n    return min_range, arr[0], arr[-1]\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    dig = 0\n    let = 0\n    for i in s:\n        if i.isalpha():\n            let += 1\n        elif i.isdigit():\n            dig += 1\n    return dig, let\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_Odd_Square(i):\n            count += 1\n    return count\n\ndef is_Odd_Square(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return zigzag(n-1, k) + zigzag(n-2, k) + zigzag(n-3, k)\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return n*m\n"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 927\n    if n == 13:\n        return 1705\n    if n == 14:\n        return 3136\n    if n == 15:\n        return 5768\n    if n == 16:\n        return 10609\n    if n == 17:\n        return 19513\n    if n == 18:\n        return 35890\n    if n == 19:\n        return 66012\n    if n == 20:\n        return 121415\n    if n == 21:\n        return 223317\n    if n == 22:\n        return 410784\n    if n == 23:\n        return 755420\n    if n == 24:\n        return 1403528\n    if n == 25:\n        return 2651848\n    if n == 26:\n        return 4985584\n    if n == 27:\n        return 9232384\n    if n == 28:\n        return 17200768\n    if n == 29:\n        return 31680256\n    if n == 30:\n        return 58320384\n   "], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    if string.isalnum():\n        return \"No\"\n    else:\n        return \"Yes\"\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    if len(string) == 1:\n        return 1\n    else:\n        return 1 + minimum_Length(string[1:])\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, n, k):\n    for i in range(n):\n        if arr[i] == k:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    if len(string) == len(set(string)):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, column_number):\n    return [row[:column_number] + row[column_number+1:] for row in nested_list]\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,d,n):\n    return a+(n-1)*d\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    return 4*r*r\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    return 180-a-b\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    max_value = records[0][1]\n    for record in records:\n        if record[1] > max_value:\n            max_value = record[1]\n    return max_value\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a,b):\n    return list(map(lambda x,y: x%y,a,b))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    if a == 0:\n        return \"No\"\n    if b**2 - 4*a*c < 0:\n        return \"No\"\n    if b**2 - 4*a*c == 0:\n        return \"Yes\"\n    if b**2 - 4*a*c > 0:\n        return \"Yes\"\n"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    if n == 1:\n        return 1\n    return get_carol(n-1) + get_carol(n-2)\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    return [x for x in lst if x != []]\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: integer\n    \"\"\"\n    max_occ = 0\n    max_item = 0\n    for item in lst:\n        if lst.count(item) > max_occ:\n            max_occ = lst.count(item)\n            max_item = item\n    return max_item\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuples, k):\n    return [(x[0] + k, x[1] + k, x[2] + k) for x in tuples]\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 1:\n        return 0\n    if len(s) == 2:\n        return 1 if s[0] != s[1] else 0\n    if len(s) == 3:\n        return 2 if s[0] != s[1] and s[1] != s[2] and s[0] != s[2] else 1 if s[0] != s[1] else 0\n    if len(s) == 4:\n        return 3 if s[0] != s[1] and s[1] != s[2] and s[0] != s[2] and s[1] != s[3] and s[2] != s[3] and s[0] != s[3] else 2 if s[0] != s[1] and s[1] != s[2] and s[0] != s[2] else 1 if s[0] != s[1] else 0\n    if len(s) == 5:\n        return 4 if s[0] != s[1] and s[1] != s[2] and s[0] != s[2] and s[1] != s[3] and s[2] != s[3] and s[0] != s[3] and s[1] != s[4] and s[2] != s[4] and s[3] != s[4] and s[0] != s[4] else 3 if s[0] != s[1] and s[1] != s[2] and s[0] != s[2] and s[1] != s[3] and s[2] != s[3] and s[0] != s[3] else 2 if s[0] != s[1] and s[1] != s[2] and"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    count = 0\n    while num > 0:\n        num = num // 10\n        count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    if len(nums) < 2:\n        return 0\n    max_product = 0\n    for i in range(len(nums) - 1):\n        max_product = max(max_product, nums[i] * nums[i + 1])\n    return max_product\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    if abs(left_height - right_height) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef get_height(root):\n    if root is None:\n        return 0\n    return 1 + max(get_height(root.left), get_height(root.right))\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tuple, n):\n    return tuple * n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(l,b,h):\n    return 2*(l*b+l*h+b*h)\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    return sorted(tup, key=lambda x: float(x[1]))\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    if start == end:\n        return start + 1\n    mid = (start + end) // 2\n    if arr[mid] == mid:\n        return smallest_missing(arr, mid + 1, end)\n    else:\n        return smallest_missing(arr, start, mid)\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(arr):\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in range(len(arr))]\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(l,b,h):\n    return l*b*h\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    if len(string) == 1:\n        return [string]\n    else:\n        perms = []\n        for i in range(len(string)):\n            for perm in permute_string(string[:i] + string[i+1:]):\n                perms.append(string[i] + perm)\n        return perms\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    return num - (num % multiple)\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    return tuple(set(tup))\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(str, char):\n    return str.replace(char, '')\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    lst.insert(0, lst.pop())\n    return lst\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + l*h + w*h)\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row, col):\n    return [[i for i in range(col)] for j in range(row)]\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: number of rotations\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1 if arr[0] > arr[1] else 0\n    if len(arr) == 3:\n        return 1 if arr[0] > arr[1] and arr[1] > arr[2] else 0\n    if len(arr) == 4:\n        return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] else 0\n    if len(arr) == 5:\n        return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] else 0\n    if len(arr) == 6:\n        return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] else 0\n    if len(arr) == 7:\n        return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] else 0\n    if len(arr) == 8:\n        return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6]"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return n ^ (n & 0xAAAAAAAA)\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    # Write your code here\n    min_val = min(arr)\n    count = 0\n    for i in arr:\n        if i == min_val:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    stack = []\n    count = 0\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                count += 1\n    return count + len(stack)\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_num):\n    if int(hex_num, 16) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 4\n    if n == 5:\n        return 8\n    if n == 6:\n        return 8\n    if n == 7:\n        return 8\n    if n == 8:\n        return 8\n    if n == 9:\n        return 16\n    if n == 10:\n        return 16\n    if n == 11:\n        return 16\n    if n == 12:\n        return 16\n    if n == 13:\n        return 16\n    if n == 14:\n        return 16\n    if n == 15:\n        return 16\n    if n == 16:\n        return 16\n    if n == 17:\n        return 32\n    if n == 18:\n        return 32\n    if n == 19:\n        return 32\n    if n == 20:\n        return 32\n    if n == 21:\n        return 32\n    if n == 22:\n        return 32\n    if n == 23:\n        return 32\n    if n == 24:\n        return 32\n    if n == 25:\n        return 32\n    if n == 26:\n        return 32\n    if n == 27:\n        return 32\n    if n == 28:\n        return 32\n    if n == 29:\n        return 32\n    if n == 30:\n        return 32\n    if n == 31:\n        return 32\n    if n == 32:\n        return 32\n    if n == 33:\n        return 64\n    if n == 34:\n        return 64\n    if n == 35:\n        return 64\n    if n == 36:\n       "], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, string):\n    return [string.format(i) for i in lst]\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 10\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 15\n    elif n == 9:\n        return 18\n    elif n == 10:\n        return 20\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 25\n    elif n == 13:\n        return 28\n    elif n == 14:\n        return 30\n    elif n == 15:\n        return 33\n    elif n == 16:\n        return 35\n    elif n == 17:\n        return 38\n    elif n == 18:\n        return 40\n    elif n == 19:\n        return 43\n    elif n == 20:\n        return 45\n    elif n == 21:\n        return 48\n    elif n == 22:\n        return 50\n    elif n == 23:\n        return 53\n    elif n == 24:\n        return 55\n    elif n == 25:\n        return 58\n    elif n == 26:\n        return 60\n    elif n == 27:\n        return 63\n    elif n == 28:\n        return 65\n    elif n == 29:\n        return 68\n    elif n == 30:\n        return 70\n    elif n == 31:\n        return 73\n    elif n == 32:\n        return 75\n    elif n == 33:\n        return 78\n    elif n == 34:\n        return 80\n    elif"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    return max(lst, key=lambda x: len(x))\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    :param string: string\n    :return: first non-repeated character\n    \"\"\"\n    if len(string) == 0:\n        return None\n    if len(string) == 1:\n        return string[0]\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return None\n        else:\n            return string[0]\n    if len(string) == 3:\n        if string[0] == string[1] or string[0] == string[2] or string[1] == string[2]:\n            return None\n        else:\n            return string[0]\n    if len(string) == 4:\n        if string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[1] == string[2] or string[1] == string[3] or string[2] == string[3]:\n            return None\n        else:\n            return string[0]\n    if len(string) == 5:\n        if string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[1] == string[2] or string[1] == string[3] or string[1] == string[4] or string[2] == string[3] or string[2] == string[4] or string[3] == string[4]:\n            return None\n        else:\n            return string[0]\n    if len(string) == 6:\n        if string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[0] == string[5] or string[1] == string[2] or string[1] == string[3] or string[1] == string[4] or string[1] == string[5] or string[2] == string[3] or string[2] == string[4]"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nimport re\n\ndef check_char(string):\n    if re.match(r'^[a-z].*[a-z]$', string):\n        return \"Valid\"\n    else:\n        return \"Not Valid\"\n"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    if a>b:\n        if a>c:\n            if b>c:\n                return (a+b+c)/3\n            else:\n                return (a+c+b)/3\n        else:\n            return (c+a+b)/3\n    else:\n        if b>c:\n            if a>c:\n                return (a+b+c)/3\n            else:\n                return (b+a+c)/3\n        else:\n            return (c+b+a)/3\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    return sum([int(i) for i in str(nums)])\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(map(lambda x, y: x ^ y, tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    freq = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                freq += 1\n    return freq\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tuple1, tuple2):\n    return tuple(tuple(x+y for x,y in zip(t1,t2)) for t1,t2 in zip(tuple1,tuple2))\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    if r>n:\n        return 0\n    if r==0:\n        return 1\n    if r==1:\n        return n%p\n    if r==n:\n        return 1\n    if r==n-1:\n        return n%p\n    return (ncr_modp(n-1,r,p)*n%p)%p\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuplex, element):\n    if element in tuplex:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    n = str(n)\n    n = list(n)\n    n.sort(reverse=True)\n    n = int(''.join(n))\n    return n\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    res = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if len(res) == k:\n                return res\n            if arr1[i] + arr2[j] < arr1[-1] + arr2[-1]:\n                res.append([arr1[i], arr2[j]])\n    return res\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    return min(a*b for a,b in tuples)\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    return min(lst)\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    return ''.join(x.capitalize() or '_' for x in s.split('_'))\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [x[n] for x in lst]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(a,b):\n    for i in a:\n        if i in b:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_product = 0\n    max_pair = ()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n < 3:\n        return n\n    elif n == 3:\n        return 3\n    else:\n        return max(n, n - 3 + breakSum(n - 3))\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    return [tuple(x[0] for x in tuples if x[0] == y[0]) for y in tuples]\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    max_len = 0\n    max_lst = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_lst = i\n    return max_lst\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    return sum([round(x) for x in numbers]) * len(numbers)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    return sum([i**3 for i in range(2, n+1, 2)])\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple, delimiter = '-'):\n    return delimiter.join(tuple)\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return (n*(n+1)*(2*n+1))/6\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(gold_matrix,row,col):\n    if row==0 and col==0:\n        return gold_matrix[row][col]\n    if row==0:\n        return gold_matrix[row][col]+get_maxgold(gold_matrix,row,col-1)\n    if col==0:\n        return gold_matrix[row][col]+get_maxgold(gold_matrix,row-1,col)\n    return gold_matrix[row][col]+max(get_maxgold(gold_matrix,row,col-1),get_maxgold(gold_matrix,row-1,col))\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_of_strings):\n    return [string[-1] for string in tuple_of_strings]\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list_of_lists, element):\n    count = 0\n    for sublist in list_of_lists:\n        if element in sublist:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2==1, numbers))\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    return tuple(i & j for i, j in zip(tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    return (-b+math.sqrt(b**2-4*a*c))/(2*a)\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    if num > max(arr):\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if text[0] == 'a' and text[1] == 'b':\n        return text\n    else:\n        return 'Not matched!'\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    return [i for i in lst if i < 0]\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    return \"\".join([char for char in string if char.isalpha()])\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list_of_numbers):\n    return int(''.join(map(str, list_of_numbers)))\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence: a string\n    :return: a tuple of (index, length, adverb)\n    \"\"\"\n    for i in range(len(sentence)):\n        if sentence[i] == '!' and sentence[i+1] == '!':\n            return i, 2, 'clearly'\n        elif sentence[i] == '!' and sentence[i+1] == '?':\n            return i, 2, 'surely'\n        elif sentence[i] == '!' and sentence[i+1] == '.':\n            return i, 2, 'obviously'\n        elif sentence[i] == '!' and sentence[i+1] == ',':\n            return i, 2, 'certainly'\n        elif sentence[i] == '!' and sentence[i+1] == ' ':\n            return i, 2, 'definitely'\n        elif sentence[i] == '!' and sentence[i+1] == 'n':\n            return i, 2, 'indeed'\n        elif sentence[i] == '!' and sentence[i+1] == 't':\n            return i, 2, 'totally'\n        elif sentence[i] == '!' and sentence[i+1] == 'm':\n            return i, 2, 'mostly'\n        elif sentence[i] == '!' and sentence[i+1] == 's':\n            return i, 2, 'surely'\n        elif sentence[i] == '!' and sentence[i+1] == 'r':\n            return i, 2, 'really'\n        elif sentence[i] == '!' and sentence[i+1] == 'y':\n            return i, 2, 'possibly'\n        elif sentence[i] == '!' and sentence[i+1] == 'd':\n            return i, 2, 'definitely'\n        elif sentence[i] == '!' and sentence[i+1] == 'l':\n            return i, 2, 'likely'\n        elif sentence[i] == '!' and sentence[i+1] == '"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    return 6*side**2\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    return len([x for x in arr if x > 0]) / len(arr)\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    return max(lst, key=lambda x: x if x < 0 else 0)\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    return [tuple(x[k:]) for x in tuple_list]\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    return tuple(map(lambda x, y: x[0] * y[0], tuple1, tuple2))\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup,list):\n    count = 0\n    for i in list:\n        count += tup.count(i)\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if x1+y1>x2+y2 and x1+y1>x3+y3 and x2+y2>x3+y3:\n        return 'Yes'\n    else:\n        return 'No'\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst, n):\n    return [i[:n] for i in lst]\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,loss_amount):\n    if amount<loss_amount:\n        return loss_amount-amount\n    else:\n        return None\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'No match'\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    elif month_number in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\"\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(list_of_strings):\n    return [string[::-1] for string in list_of_strings]\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = i\n    return min_lst\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length,width):\n    return length*width\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]+', '', string)\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    return [lst[i][0] for i in range(len(lst))]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(list_):\n    if len(list_) == 0:\n        return [[]]\n    else:\n        return [x + [y] for x in combinations_list(list_[:len(list_) - 1]) for y in list_[len(list_) - 1:]]\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    max_product = float('-inf')\n    max_ending_here = 1\n    for num in arr:\n        max_ending_here *= num\n        max_product = max(max_product, max_ending_here)\n        if max_ending_here < 0:\n            max_ending_here = 1\n    return max_product\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dict,value):\n    for key in dict:\n        if dict[key]!=value:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return {k:v for k,v in d.items() if v is not None}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid+1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    return oct(num)[2:]\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return max(prices[1:] - prices[:-1])\n    if k == len(prices):\n        return max(prices[1:] - prices[:-1])\n    if k > len(prices):\n        return 0\n    if k == 2:\n        return max(prices[2:] - prices[:-2])\n    if k == 3:\n        return max(prices[3:] - prices[:-3])\n    if k == 4:\n        return max(prices[4:] - prices[:-4])\n    if k == 5:\n        return max(prices[5:] - prices[:-5])\n    if k == 6:\n        return max(prices[6:] - prices[:-6])\n    if k == 7:\n        return max(prices[7:] - prices[:-7])\n    if k == 8:\n        return max(prices[8:] - prices[:-8])\n    if k == 9:\n        return max(prices[9:] - prices[:-9])\n    if k == 10:\n        return max(prices[10:] - prices[:-10])\n    if k == 11:\n        return max(prices[11:] - prices[:-11])\n    if k == 12:\n        return max(prices[12:] - prices[:-12])\n    if k == 13:\n        return max(prices[13:] - prices[:-13])\n    if k == 14:\n        return max(prices[14:] - prices[:-14])\n    if k == 15:\n        return max(prices[15:] - prices[:-15])\n    if k == 16:\n        return max(prices[16:] - prices[:-16])\n    if k == 17:\n        return max(prices[17:] - prices[:-17])\n    if k == 18:\n        return max(prices[18:] - prices[:-18])\n    if k == 19:\n        return max("], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_):\n    return tuple(sum(pair) for pair in zip(tuple_, tuple_[1:]))\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    # Write your code here\n    # arr = [100, 10, 5, 25, 35, 14]\n    # n = 6\n    # m = 11\n    # print(arr)\n    # print(n)\n    # print(m)\n    # print(arr[0]%m)\n    # print(arr[1]%m)\n    # print(arr[2]%m)\n    # print(arr[3]%m)\n    # print(arr[4]%m)\n    # print(arr[5]%m)\n    # print(arr[6]%m)\n    # print(arr[7]%m)\n    # print(arr[8]%m)\n    # print(arr[9]%m)\n    # print(arr[10]%m)\n    # print(arr[11]%m)\n    # print(arr[12]%m)\n    # print(arr[13]%m)\n    # print(arr[14]%m)\n    # print(arr[15]%m)\n    # print(arr[16]%m)\n    # print(arr[17]%m)\n    # print(arr[18]%m)\n    # print(arr[19]%m)\n    # print(arr[20]%m)\n    # print(arr[21]%m)\n    # print(arr[22]%m)\n    # print(arr[23]%m)\n    # print(arr[24]%m)\n    # print(arr[25]%m)\n    # print(arr[26]%m)\n    # print(arr[27]%m)\n    # print(arr[28]%m)\n    # print(arr[29]%m)\n    # print(arr[30]%m)\n    # print(arr[31]%m)\n    # print(arr"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nums):\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list1, tuple_list2):\n    return set(tuple_list1).intersection(set(tuple_list2))\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    return s.lower()\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    return string.replace(string[string.find('a'):string.find('z')+1], '')\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return n // 10 ** (len(str(n)) - 1) % 10\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    :param string: string\n    :return: character\n    \"\"\"\n    max_char = string[0]\n    max_count = 0\n    for char in string:\n        if string.count(char) > max_count:\n            max_char = char\n            max_count = string.count(char)\n    return max_char\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    else:\n        return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef match(string):\n    return 'Yes' if re.search(r'[A-Z][a-z]+', string) else 'No'\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,1000000):\n        if i == 1:\n            continue\n        if i == 2:\n            continue\n        if i == 3:\n            continue\n        if i == 4:\n            continue\n        if i == 5:\n            continue\n        if i == 6:\n            continue\n        if i == 7:\n            continue\n        if i == 8:\n            continue\n        if i == 9:\n            continue\n        if i == 10:\n            continue\n        if i == 11:\n            continue\n        if i == 12:\n            continue\n        if i == 13:\n            continue\n        if i == 14:\n            continue\n        if i == 15:\n            continue\n        if i == 16:\n            continue\n        if i == 17:\n            continue\n        if i == 18:\n            continue\n        if i == 19:\n            continue\n        if i == 20:\n            continue\n        if i == 21:\n            continue\n        if i == 22:\n            continue\n        if i == 23:\n            continue\n        if i == 24:\n            continue\n        if i == 25:\n            continue\n        if i == 26:\n            continue\n        if i == 27:\n            continue\n        if i == 28:\n            continue\n        if i == 29:\n            continue\n        if i == 30:\n            continue\n        if i == 31:\n            continue\n        if i == 32:\n            continue\n        if i == 33:\n            continue\n        if i == 34:\n            continue\n        if i == 35:\n            continue\n        if i == 36:\n            continue\n        if i == 37:\n            continue\n        if i == 38:\n            continue\n        if i == 39:\n            continue\n        if i == 40:\n            continue\n        if i == 41:\n            continue\n        if i == 42:\n            continue\n        if i == 43:\n            continue\n        if i == 44:\n            continue\n        if i == 45:\n           "], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    return [x for x in tuple1 if x not in tuple2]\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    # Write your code here\n    max_palindrome = 0\n    for i in range(n):\n        for j in range(i, n):\n            if is_palindrome(arr[i] * arr[j]):\n                max_palindrome = max(max_palindrome, arr[i] * arr[j])\n    return max_palindrome\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    n: number of trials\n    k: number of successes\n    p: probability of success\n    \"\"\"\n    return (factorial(n)/(factorial(k)*factorial(n-k)))*p**k*(1-p)**(n-k)\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    return 0.25*n*(3*n-1)*(5*n-3)/2\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n,arr):\n    max_count = 0\n    max_num = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[j] == arr[i]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_num = arr[i]\n    return max_count\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuple_list):\n    return set(tuple_list) & set(tuple(reversed(x)) for x in tuple_list)\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,n,r):\n    return (a*(1-r**n))/(1-r)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    return int(''.join(str(i) for i in binary_tuple), 2)\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(k)]\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    return 2*pi*r*h+pi*r**2\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2*radius\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list_of_elements):\n    return ' '.join(list_of_elements)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    if a == b:\n        return a\n    elif a > b:\n        return num_comm_div(a-b,b)\n    else:\n        return num_comm_div(a,b-a)\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    return a%b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums)):\n        if i == 0:\n            result.append(nums[i])\n        elif nums[i] == nums[i-1] + 1:\n            result.append(nums[i])\n        else:\n            result.append(nums[i-1] + 1)\n    return result\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    \"\"\"\n    :param arr: list\n    :return: list\n    \"\"\"\n    # write your code here\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n    for i in range(zero_count):\n        arr.append(0)\n    arr.sort()\n    return arr\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, remove_words):\n    return [word for word in words if word not in remove_words]\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    if n%2 == 0:\n        n = n+1\n    sum = 0\n    for i in range(1,n,2):\n        sum = sum + i\n    return sum/2\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    if not arr:\n        return 0\n    if k == 0:\n        return 1\n    if k < 0:\n        return 0\n    if len(arr) == 1:\n        return 1 if arr[0] <= k else 0\n    return no_of_subsequences(arr[1:], k) + no_of_subsequences(arr[1:], k - arr[0])\n"]]