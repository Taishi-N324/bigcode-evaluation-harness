[["#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n  echo ${#1}"], ["#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local str=$1\n    local result=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n        if [ $char == \"a\" ]; then\n            result=\"$result\"\n        elif [ $char == \"b\" ]; then\n            result=\"$result\"\n        elif [ $char == \"c\" ]; then\n            result=\"$result\"\n        elif [ $char == \"d\" ]; then\n            result=\"$result\"\n        elif [ $char == \"e\" ]; then\n            result=\"$result\"\n        elif [ $char == \"f\" ]; then\n            result=\"$result\"\n        elif [ $char == \"g\" ]; then\n            result=\"$result\"\n        elif [ $char == \"h\" ]; then\n            result=\"$result\"\n        elif [ $char == \"i\" ]; then\n            result=\"$result\"\n        elif [ $char == \"j\" ]; then\n            result=\"$result\"\n        elif [ $char == \"k\" ]; then\n            result=\"$result\"\n        elif [ $char == \"l\" ]; then\n            result=\"$result\"\n        elif [ $char == \"m\" ]; then\n            result=\"$result\"\n        elif [ $char == \"n\" ]; then\n            result=\"$result\"\n        elif [ $char == \"o\" ]; then\n            result=\"$result\"\n        elif [ $char == \"p\" ]; then\n            result=\"$result\"\n        elif [ $char == \"q\" ]; then\n            result=\"$result\"\n        elif [ $char == \"r\" ]; then\n            result=\"$result\"\n        elif [ $char == \"s\" ]; then\n            result=\"$result\"\n        elif [ $char == \"t\" ]; then\n            result=\"$result\"\n        elif [ $char == \"u\" ]; then\n           "], ["#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local csv=\"$1\"\n  local key_case\n  local value_case\n  local key_case_set\n  local value_case_set\n  local key_case_set_size\n  local value_case_set_size\n  local key_case_set_size_upper\n  local value_case_set_size_upper\n  local key_case_set_size_lower\n  local value_case_set_size_lower\n  local key_case_set_size_mixed\n  local value_case_set_size_mixed\n  local key_case_set_size_mixed_upper\n  local value_case_set_size_mixed_upper\n  local key_case_set_size_mixed_lower\n  local value_case_set_size_mixed_lower\n  local key_case_set_size_mixed_upper_lower\n  local value_case_set_size_mixed_upper_lower\n  local key_case_set_size_mixed_lower_upper\n  local value_case_set_size_mixed_lower_upper\n  local key_case_set_size_mixed_upper_lower_upper\n  local value_case_set_size_mixed_upper_lower_upper\n  local key_case_set_size_mixed_lower_upper_upper\n  local value_case_set_size_mixed_lower_upper_upper\n  local"], ["#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n    local lst=\"$1\"\n    local i=0\n    local result=\"\"\n    while [ $i -lt ${#lst} ]; do\n        if [ $(($i % 2)) -eq 0 ]; then\n            result=\"$result $(echo \"$lst\" | cut -d' ' -f$i)\"\n        fi\n        i=$(($i + 1))\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n    local str=$1\n    local new_str=\"\"\n    local prev_char=\"\"\n    local curr_char=\"\"\n    local next_char=\"\"\n    local count=0\n    local i=0\n    local len=${#str}\n    for ((i=0; i<len; i++)); do\n        curr_char=${str:$i:1}\n        if [[ $curr_char == \" \" ]]; then\n            if [[ $prev_char == \" \" ]]; then\n                if [[ $next_char == \" \" ]]; then\n                    new_str+=\"-\"\n                else\n                    new_str+=\"_\"\n                fi\n            else\n                new_str+=\"_\"\n            fi\n        else\n            new_str+=$curr_char\n        fi\n        prev_char=$curr_char\n        if [[ $i < $len-1 ]]; then\n            next_char=${str:$i+1:1}\n        else\n            next_char=\"\"\n        fi\n    done\n    echo \"$new_str\""], ["#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n  if [ \"$1\" -eq \"0\" ]; then\n    echo \"0\"\n  elif [ \"$1\" -eq \"1\" ]; then\n    echo \"0\"\n  elif [ \"$1\" -eq \"2\" ]; then\n    echo \"1\"\n  else\n    fibfib \"$(( $1 - 1 ))\"\n    fibfib \"$(( $1 - 2 ))\"\n    fibfib \"$(( $1 - 3 ))\"\n    echo \"$(( $(fibfib \"$(( $1 - 1 ))\") + $(fibfib \"$(( $1 - 2 ))\") + $(fibfib \"$(( $1 - 3 ))\") ))\"\n  fi"], ["#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n  local sum=0\n  local sum_of_squares=0\n  local numbers=($(echo \"$1\" | tr ' ' '\\n'))\n  for number in \"${numbers[@]}\"; do\n    if [[ \"$number\" =~ ^-?[0-9]+$ ]]; then\n      if (( number % 2 == 1 )); then\n        sum=$(( sum + number ))\n        sum_of_squares=$(( sum_of_squares + (number * number) ))\n      fi\n    fi\n  done\n  echo \"$(( sum_of_squares - sum ))\""], ["#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local -a integers=()\n  local -a values=($1)\n  for value in \"${values[@]}\"; do\n    if [[ $value =~ ^[0-9]+$ ]]; then\n      integers+=(\"$value\")\n    fi\n  done\n  echo \"${integers[@]}\""], ["#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local i=0\n  while [ $i -lt $n ]; do\n    local j=$((i+1))\n    while [ $j -lt $n ]; do\n      local left_car_x=$((i+1))\n      local left_car_y=$((n-j))\n      local right_car_x=$((n-j))\n      local right_car_y=$((i+1))\n      if [ $left_car_x -eq $right_car_x ] && [ $left_car_y -eq $right_car_y ]; then\n        collisions=$((collisions+1))\n      fi\n      j=$((j+1))\n    done\n    i=$((i+1))\n  done\n  echo $collisions"], ["#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n  local music=\"$1\"\n  local beats=()\n  local beat_count=0\n  local note_count=0\n  local note_length=0\n  local note_type=0\n  local note_type_count=0\n  local note_type_length=0\n  local note_type_type=0\n  local note_type_type_count=0\n  local note_type_type_length=0\n  local note_type_type_type=0\n  local note_type_type_type_count=0\n  local note_type_type_type_length=0\n  local note_type_type_type_type=0\n  local note_type_type_type_type_count=0\n  local note_type_type_type_type_length=0\n  local note_type_type_type_type_type=0\n  local note_type_type_type_type_type_count=0\n  local note_type_type_type_type_type_length=0\n  local note_type_type_type_type_type_type=0\n  local note_type_type_type_type_type_type_count=0\n  local note_type_type_type_type_type_type_length=0\n  local note_type_type_type_type_type_type_type=0\n  local note_type_type_type_type_type_type_type_count=0\n  local note_type_type_type_type_type_type_type_length=0\n "], ["#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n    local remainder\n    local quotient\n\n    while [ $decimal -gt 0 ]; do\n        remainder=$(( $decimal % 2 ))\n        decimal=$(( $decimal / 2 ))\n        binary=\"$remainder$binary\"\n    done\n\n    echo \"db$binary\""], ["#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n  local str=\"$1\"\n  local len=\"${#str}\"\n  local i\n  local prefix\n  for ((i=1; i<=$len; i++)); do\n    prefix=\"${str:0:i}\"\n    echo \"\\\"$prefix\\\"\"\n  done"], ["#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n  echo $(($1 + $2))"], ["#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n  local need=$2\n  local remaining=$3\n  local eaten\n  local left\n  eaten=$(($number + $need))\n  left=$(($remaining - $need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n  echo \"[\\\"$eaten\\\", \\\"$left\\\"]\""], ["#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n    local capacity=$2\n    local -i rows=$(echo \"$grid\" | wc -l)\n    local -i cols=$(echo \"$grid\" | head -n 1 | wc -w)\n    local -i count=0\n    local -i row=0\n    local -i col=0\n    local -i bucket=0\n    local -i bucket_count=0\n    local -i bucket_capacity=0\n    local -i bucket_row=0\n    local -i bucket_col=0\n    local -i bucket_row_count=0\n    local -i bucket_col_count=0\n    local -i bucket_row_capacity=0\n    local -i bucket_col_capacity=0\n    local -i bucket_row_max=0\n    local -i bucket_col_"], ["#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n    local operator=\"$1\"\n    local operand=\"$2\"\n    local result=0\n    local i=0\n    local j=0\n    local op_len=${#operator[@]}\n    local op_last_index=$((op_len - 1))\n    local op_last=${operator[$op_last_index]}\n    local op_first=${operator[0]}\n    local op_first_index=0\n    local op_first_len=${#op_first}\n    local op_first_last_index=$((op_first_len - 1))\n    local op_first_last=${op_first[$op_first_last_index]}\n    local op_first_first=${op_first[0]}\n    local op_first_first_index=0\n    local op_first_first_len=${#op_first_first}\n    local op_first_first_last_index=$((op_first_first_len - 1))\n    local op_first_first_last=${op_first_first[$op_first_first_last_index]}\n    local op_first_first_first=${op_first_first[0]}\n    local op_first_first_first_index=0\n    local op_first_first_first_"], ["#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n  local str=\"$1\"\n  local result=\"\"\n  for ((i = 0; i < ${#str}; i++)); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      result+=\"${char^^}\"\n    else\n      result+=\"${char,,}\"\n    fi\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local -a result=()\n  for i in \"${arr[@]}\"; do\n    if [[ $i =~ ^[1-9]$ ]]; then\n      result+=(\"$(echo $i | sed 's/^1$/One/;s/^2$/Two/;s/^3$/Three/;s/^4$/Four/;s/^5$/Five/;s/^6$/Six/;s/^7$/Seven/;s/^8$/Eight/;s/^9$/Nine/')\")\n    fi\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n  local number=\"$1\"\n  local factors=()\n  local factor\n  local count\n  local i\n  local j\n  local k\n\n  for ((i=2; i<=$number; i++)); do\n    count=0\n    for ((j=1; j<=$number; j++)); do\n      if ((i%j==0)); then\n        ((count++))\n      fi\n    done\n    if ((count==1)); then\n      factors+=(\"$i\")\n    fi\n  done\n\n  for ((i=0; i<${#factors[@]}; i++)); do\n    factor=\"${factors[$i]}\"\n    count=0\n    for ((j=1; j<=$number; j++)); do\n      if ((j%factor==0)); then\n        ((count++))\n      fi\n    done\n    for ((k=0; k<$count; k++)); do\n      echo -n \"\\\"$factor\\\",\"\n    done\n  done"], ["#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n  local n=$1\n  local primes=()\n  for ((i=2; i<n; i++)); do\n    local is_prime=true\n    for ((j=2; j<i; j++)); do\n      if (( i % j == 0 )); then\n        is_prime=false\n        break\n      fi\n    done\n    if [[ $is_prime == true ]]; then\n      primes+=(\"$i\")\n    fi\n  done\n  echo ${primes[@]}"], ["#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n  local -a arr=($(echo \"$1\" | tr ' ' '\\n' | sort -u))\n  local -a result=()\n  for i in \"${arr[@]}\"; do\n    result+=(\"$i\")\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    local -a arr1=($1)\n    local -a arr2=($2)\n    local -a result=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len1=${#arr1[@]}\n    local -i len2=${#arr2[@]}\n    local -i len_result=0\n    local -i len_result_max=0\n    local -i len_result_min=0\n    local -i len_result_max_index=0\n    local -i len_result_min_index=0\n    local -i len_result_max_index_2=0\n    local -i len_result_min_index_2=0\n    local -i len_result_max_index_3=0\n    local -i len_result_min_index_3=0\n    local -i len_result_max_index_4=0\n    local -i len_result_min_index_4=0\n    local -i len_result_max_index_5=0\n    local -i len_result_min_index_5=0\n    local -i len_result_max_index_6=0\n    local -i len_result_min_index_6=0\n    local -i len_result_max_index_7=0\n    local -i"], ["#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n  local max_element\n  max_element=$(echo \"$1\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  echo \"$max_element\""], ["#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n    local string=$1\n    local stack=()\n    local i=0\n    local len=${#string}\n    while [ $i -lt $len ]; do\n        case ${string:$i:1} in\n            [)\n                stack+=(\")\")\n                ;;\n            ])\n                if [ ${stack[-1]} == \")\" ]; then\n                    stack=(\"${stack[@]::${#stack}-1}\")\n                else\n                    return \"false\"\n                fi\n                ;;\n            [)\n                stack+=(\"]\")\n                ;;\n            ])\n                if [ ${stack[-1]} == \"]\" ]; then\n                    stack=(\"${stack[@]::${#stack}-1}\")\n                else\n                    return \"false\"\n                fi\n                ;;\n            *)\n                return \"false\"\n                ;;\n        esac\n        i=$((i+1))\n    done\n    if [ ${#stack} -gt 0 ]; then\n        return \"true\"\n    else\n        return \"false\"\n    fi"], ["#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n    local n=$1\n    local m=$2\n    local avg=$(($n+$m))\n    local avg_div_2=$(($avg/2))\n    local avg_div_2_rounded=$(($avg_div_2/1))\n    local avg_div_2_binary=$(printf \"%b\" $avg_div_2_rounded)\n    echo \"0b$avg_div_2_binary\""], ["#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    while [ $i -lt $len ]; do\n        if [ $i -eq $len-1 ]; then\n            echo \"true\"\n            return\n        fi\n        if [ ${arr[$i]} -gt ${arr[$i+1]} ]; then\n            temp=${arr[$i]}\n            arr[$i]=${arr[$i+1]}\n            arr[$i+1]=$temp\n            ((j++))\n        fi\n        ((i++))\n    done\n    if [ $j -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n    local n=$1\n    local even_palindromes=()\n    local odd_palindromes=()\n    for ((i = 1; i <= n; i++)); do\n        if [[ $(is_palindrome $i) == \"true\" ]]; then\n            if [[ $(is_even $i) == \"true\" ]]; then\n                even_palindromes+=(\"$i\")\n            else\n                odd_palindromes+=(\"$i\")\n            fi\n        fi\n    done\n    echo \"[\\\"${even_palindromes[@]}\\\", \\\"${odd_palindromes[@]}\\\"]\""], ["#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n  local n=$1\n  local sum=0\n  local i=0\n  while [ $i -lt 4 ]; do\n    local number=$(($n - $sum))\n    if [ $(($number % 2)) -eq 0 ]; then\n      sum=$((sum + $number))\n      i=$((i + 1))\n    else\n      return 1\n    fi\n  done\n  return 0"], ["#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n  local xs=($(echo \"$1\" | tr ' ' '\\n'))\n  local n=${#xs[@]}\n  local dxs=()\n  for ((i=1; i<n; i++)); do\n    dxs+=(\"$((${xs[i]} * i))\")\n  done\n  echo \"${dxs[@]}\""], ["#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local prev\n  local curr\n  local next\n  local prev_next\n  local curr_next\n  local next_next\n  local prev_next_next\n  local curr_next_next\n  local next_next_next\n  local prev_next_next_next\n  local curr_next_next_next\n  local next_next_next_next\n  local prev_next_next_next_next\n  local curr_next_next_next_next\n  local next_next_next_next_next\n  local prev_next_next_next_next_next\n  local curr_next_next_next_next_next\n  local next_next_next_next_next_next\n  local prev_next_next_next_next_next_next\n  local curr_next_next_next_next_next_next\n  local next_next_next_next_next_next_next\n  local prev_next_next_next_next_next_next_next\n  local curr_next_next_next_next_next_next_next\n  local next_next_next_next_next_next_next_next\n  local prev_"], ["#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n    local s=$1\n    local result=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n            result+=${s:$i:1}\n            result+=${s:$i:1:1}\n        else\n            result+=${s:$i:1}\n        fi\n    done\n    echo $result"], ["#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n    local n=$1\n    local i=1\n    local j=2\n    local k=3\n    local result=(\"1\" \"3\" \"2\")\n    while [ $i -lt $n ]; do\n        local sum=$(( $result[$i] + $result[$j] + $result[$k] ))\n        result+=(\"$sum\")\n        i=$(( $i + 1 ))\n        j=$(( $j + 1 ))\n        k=$(( $k + 1 ))\n    done\n    echo ${result[@]}"], ["#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local n=$1\n  local count=0\n  for i in $(seq 1 $n); do\n    if [[ $((i % 11)) -eq 0 || $((i % 13)) -eq 0 ]]; then\n      count=$((count + 1))\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n  local -i n=$1\n  local -i sum=0\n  while ((n > 0)); do\n    ((sum += n % 2))\n    ((n /= 2))\n  done\n  printf \"%d\" \"$sum\""], ["#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=\"$1\"\n    local k=\"$2\"\n    local n\n    n=$(echo \"$grid\" | wc -l)\n    local i j\n    local min_path=()\n    local min_path_str\n    local min_path_str_arr\n    local min_path_arr\n    local min_path_arr_str\n    local min_path_arr"], ["#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  local s=\"$1\"\n  local count=0\n  for ((i=0; i<${#s}; i+=2)); do\n    if [[ \"${s:$i:1}\" =~ [A-Z] ]]; then\n      ((count++))\n    fi\n  done\n  echo \"$count\""], ["#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local max_arr=()\n    local max_val=0\n    local max_count=0\n    local i=0\n    local j=0\n    local count=0\n    local val=0\n    local max_val_arr=()\n    local max_val_count=0\n    local max_val_i=0\n    local max_val_j=0\n    local max_val_count=0\n    local max_val_val=0\n    local max_val_count=0\n    local max_val_i=0\n    local max_val_j=0\n    local max_val_count=0\n    local max_val_val=0\n    local max_val_count=0\n    local max_val_i=0\n    local max_val_j=0\n    local max_val_count=0\n    local max_val_val=0\n    local max_val_count=0\n    local max_val_i=0\n    local max_val_j=0\n    local max_val_count=0\n    local max_val_val=0\n    local max_val_count=0\n    local max_val_i=0\n    local max_val_j=0\n    local max_val_count=0\n    local max_"], ["#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n  local n=$1\n  local i\n  for ((i=n-1; i>0; i--)); do\n    if ((n%i==0)); then\n      echo $i\n      return\n    fi\n  done"], ["#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=($1)\n  local sum=$((${array[0]} + ${array[-1]}))\n  if (( sum % 2 == 0 )); then\n    echo \"${array[@]}\" | sort -n\n  else\n    echo \"${array[@]}\" | sort -nr\n  fi"], ["#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n  local n=$1\n  local i=1\n  local result=()\n  while [ $i -le $n ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n      result+=(\"$((i * (i + 1) / 2))\")\n    else\n      result+=(\"$i\")\n    fi\n    i=$((i + 1))\n  done\n  echo ${result[@]}"], ["#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n    local b=$((a*a*a))\n    if [ $b -eq $a ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n    local message=$1\n    local encoded_message=\"\"\n    local vowel_index=0\n    local vowel_index_2=0\n    local vowel_index_3=0\n    local vowel_index_4=0\n    local vowel_index_5=0\n    local vowel_index_6=0\n    local vowel_index_7=0\n    local vowel_index_8=0\n    local vowel_index_9=0\n    local vowel_index_10=0\n    local vowel_index_11=0\n    local vowel_index_12=0\n    local vowel_index_13=0\n    local vowel_index_14=0\n    local vowel_index_15=0\n    local vowel_index_16=0\n    local vowel_index_17=0\n    local vowel_index_18=0\n    local vowel_index_19=0\n    local vowel_index_20=0\n    local vowel_index_21=0\n    local vowel_index_22=0\n    local vowel_index_23=0\n    local vowel_index_24=0\n    local vowel_index_25=0\n    local vowel_index_26=0\n    local vowel_index_27=0\n    local vowel_index_28=0\n    local vowel_index_29=0\n    local vowel_index_30=0\n    local vowel_index_31=0\n    local vowel_index_32=0\n    local vowel_index_33=0\n    local vowel_index_34=0\n    local vowel_index_35"], ["#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n    local bored=0\n    local sentence\n    for sentence in $(echo \"$1\" | tr ' ' '\\n'); do\n        if [[ \"$sentence\" =~ ^[Ii].* ]]; then\n            ((bored++))\n        fi\n    done\n    echo \"$bored\""], ["#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local -a arr=($1)\n  local -i i\n  local -i j\n  local -i n=${#arr[@]}\n  local -i sum\n\n  for ((i=0; i<n; i++)); do\n    for ((j=i+1; j<n; j++)); do\n      sum=${arr[i]} + ${arr[j]}\n      if ((sum == 0)); then\n        echo \"true\"\n        return 0\n      fi\n    done\n  done\n  echo \"false\""], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n  if [ $1 -gt $2 ] && [ $1 -gt $3 ] && [ $2 -gt $3 ]; then\n    echo $(echo \"scale=2;($1 * $2) / 2\" | bc)\n  elif [ $2 -gt $1 ] && [ $2 -gt $3 ] && [ $1 -gt $3 ]; then\n    echo $(echo \"scale=2;($2 * $3) / 2\" | bc)\n  elif [ $3 -gt $1 ] && [ $3 -gt $2 ] && [ $1 -gt $2 ]; then\n    echo $(echo \"scale=2;($3 * $1) / 2\" | bc)\n  else\n    echo \"-1\"\n  fi"], ["#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1=$1\n    local planet2=$2\n    local planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n    local planet1_index=$(echo ${planets[@]} | grep -n $planet1 | cut -d: -f1)\n    local planet2_index=$(echo ${planets[@]} | grep -n $planet2 | cut -d: -f1)\n    if [ -z $planet1_index ] || [ -z $planet2_index ]; then\n        echo \"[]\"\n    else\n        local planet1_index=$((planet1_index + 1))\n        local planet2_index=$((planet2_index + 1))\n        local planets_between_planet1_and_planet2=($(echo ${planets[@]:$planet1_index:$((planet2_index - planet1_index))} | tr '\\n' ','))\n        echo $planets_between_planet1_and_planet2\n    fi"], ["#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=$1\n  local result=0\n  local i=0\n  while [ $i -lt ${#n} ]; do\n    local digit=${n:$i:1}\n    if [ $((digit % 2)) -eq 1 ]; then\n      result=$((result * digit))\n    fi\n    i=$((i + 1))\n  done\n  echo $result"], ["#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n  local string=\"$1\"\n  local words=()\n  local word\n  for word in $string; do\n    words+=(\"\\\"$word\\\"\")\n  done\n  echo \"${words[@]}\""], ["#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n  local string=\"$1\"\n  local substring=\"$2\"\n  local count=0\n  local index=0\n  while [[ $index -lt ${#string} ]]; do\n    if [[ ${string:$index:${#substring}} == \"$substring\" ]]; then\n      ((count++))\n      ((index+=${#substring}))\n    else\n      ((index++))\n    fi\n  done\n  echo \"$count\""], ["#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n  if [ \"$1\" -gt \"$2\" ]; then\n    echo \"$1\"\n  elif [ \"$1\" -lt \"$2\" ]; then\n    echo \"$2\"\n  else\n    echo \"None\"\n  fi"], ["#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n    local string=\"$1\"\n    local vowels=\"aeiou\"\n    local result=\"\"\n    for char in $(echo \"$string\"); do\n        if [[ ! $vowels =~ $char ]]; then\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local -a list=($1)\n  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e"], ["#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n  local -a numbers=($(echo \"$1\" | tr ' ' '\\n'))\n  local -a sorted_numbers=($(sort -n <<<\"${numbers[*]}\"))\n  local -a closest_numbers=($(echo \"${sorted_numbers[*]:0:2}\"))\n  echo \"${closest_numbers[*]}\""], ["#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x**$n\" | bc)\n  if [ \"$result\" -eq \"$x\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n  local n=$1\n  local fib_n=$(fib \"$n\")\n  local prime_fib_n=$(prime \"$fib_n\")\n  echo \"$prime_fib_n\""], ["#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n    local -a arr=($1)\n    local -a result=()\n    local -i sum\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z"], ["#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n  local list=\"$1\"\n  local threshold=\"$2\"\n  local list_length=$(echo \"$list\" | wc -w)\n  local i=0\n  local j=0\n  local result=\"false\"\n  while [ \"$i\" -lt \"$list_length\" ]; do\n    j=$((i + 1))\n    while [ \"$j\" -lt \"$list_length\" ]; do\n      if [ \"$(echo \"$list\" | cut -d' ' -f\"$i\" | cut -d' ' -f\"$j\")\" -lt \"$(echo \"$list\" | cut -d' ' -f\"$i\" | cut -d' ' -f\"$j\")\" ]; then\n        result=\"true\"\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n    local str=\"$1\"\n    local len=\"${#str}\"\n    local longest_palindrome_prefix_len\n    longest_palindrome_prefix_len=$(longest_palindrome_prefix_len \"$str\")\n    local longest_palindrome_prefix\n    longest_palindrome_prefix=$(echo \"$str\" | cut -c1-\"$longest_palindrome_prefix_len\")\n    local longest_palindrome_suffix\n    longest_palindrome_suffix=$(echo \"$str\" | cut -c\"$longest_palindrome_prefix_len\"-)\n    local longest_palindrome_suffix_len\n    longest_palindrome_suffix_len=$(echo \"$longest_palindrome_suffix\" | wc -c)\n    local longest_palindrome_suffix_reversed\n    longest_palindrome_suffix_reversed=$(echo \"$longest_palindrome_suffix\" | rev)\n    local longest_palindrome_suffix_reversed_len\n    longest_palindrome_suffix_reversed_len=$(echo \"$longest_palindrome_suffix_reversed\" | wc -c)\n    local longest_palindrome_suffix_reversed_reversed\n    longest_palindrome_suffix_reversed_reversed=$(echo \"$longest_palindrome_suffix_reversed\" | rev)\n    local longest_palindrome_suffix_reversed_reversed_len\n    longest_palindrome_suffix_reversed_reversed_len=$(echo \"$longest_palindrome_suffix_reversed_reversed\" | wc -c)\n    local longest_palindrome_suffix_reversed_reversed_reversed\n    longest_palindrome_suffix_reversed_reversed_reversed=$(echo \"$longest_palindrome_suffix_reversed_reversed\" | rev)\n    local longest_palindrome_suffix_reversed_reversed_reversed_len\n    longest_palindrome_suffix_reversed_reversed_reversed_len=$(echo \"$"], ["#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    local a=$1\n    local b=$2\n    local result=\"\"\n    for ((i=0; i<${#a}; i++)); do\n        if [[ ${a:$i:1} == \"1\" && ${b:$i:1} == \"0\" ]]; then\n            result=\"${result}1\"\n        elif [[ ${a:$i:1} == \"0\" && ${b:$i:1} == \"1\" ]]; then\n            result=\"${result}1\"\n        else\n            result=\"${result}0\"\n        fi\n    done\n    echo $result"], ["#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result * i))\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n  local arr=($1)\n  local k=$2\n  local sum=0\n  for i in $(seq 0 $((k-1))); do\n    if [[ ${arr[$i]} -lt 100 ]]; then\n      sum=$((sum + arr[$i]))\n    fi\n  done\n  echo $sum"], ["#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n  for ((i=3; i<=$n; i++)); do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n  done\n  echo $c"], ["#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n    local -a arr=($1)\n    local -a result=()\n    for i in \"${arr[@]}\"; do\n        local -i sum=0\n        for ((j=0; j<${#i}; j++)); do\n            local -i digit=${i:$j:1}\n            ((sum += digit))\n        done\n        if ((sum % 2 == 1)); then\n            result+=(\"$i\")\n        fi\n    done\n    echo \"${result[@]}\" | sort"], ["#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    local string=\"$1\"\n    local n=\"$2\"\n    local word\n    local words=()\n    local consonants=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local"], ["#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n  local -a arr=($1)\n  local sum=0\n  for i in \"${arr[@]}\"; do\n    sum=$((sum + i))\n  done\n  if [[ $sum -gt $2 ]]; then\n    echo \"false\"\n  else\n    local -a arr2=($(echo ${arr[@]} | rev))\n    local sum2=0\n    for i in \"${arr2[@]}\"; do\n      sum2=$((sum2 + i))\n    done\n    if [[ $sum2 -eq $sum ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi"], ["#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n  if [ \"$1\" -eq \"1\" ] || [ \"$1\" -eq \"2\" ]; then\n    echo \"1\"\n  else\n    echo \"$(($(fib $(($1 - 1))) + $(fib $(($1 - 2)))))\"\n  fi"], ["#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    local class=\"$1\"\n    local extensions=\"$2\"\n    local strongest_extension=\"\"\n    local strongest_strength=0\n    local extension_strength=0\n    local extension_name=\"\"\n    local extension_name_length=0\n    local extension_name_uppercase_count=0\n    local extension_name_lowercase_count=0\n    local extension_name_uppercase_index=0\n    local extension_name_lowercase_index=0\n    local extension_name_uppercase_char=\"\"\n    local extension_name_lowercase_char=\"\"\n    local extension_name_uppercase_char_index=0\n    local extension_name_lowercase_char_index=0\n    local extension_name_uppercase_char_count=0\n    local extension_name_lowercase_char_count=0\n    local extension_name_uppercase_char_index=0\n    local extension_name_lowercase_char_index=0\n    local extension_name_uppercase_char=\"\"\n    local extension"], ["#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n    local stack\n    local i\n    local len\n    local char\n    local result\n    local open_parens\n    local close_parens\n    local open_parens_count\n    local close_parens_count\n\n    stack=()\n    result=Yes\n    open_parens_count=0\n    close_parens_count=0\n    for i in $(seq 0 $((${#1} - 1))); do\n        char=${1:$i:1}\n        if [[ $char == '(' ]]; then\n            open_parens_count=$((open_parens_count + 1))\n            stack=(\"${stack[@]}\" \"$char\")\n        elif [[ $char == ')' ]]; then\n            close_parens_count=$((close_parens_count + 1))\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                result=No\n                break\n            fi\n            open_parens=${stack[-1]}\n            stack=(\"${stack[@]:0:$((${#stack[@]} - 1))}\")\n            if [[ $open_parens == '(' ]]; then\n                if [[ $close_parens_count -gt $open_parens_count ]]; then\n                    result=No\n                    break\n                fi\n            elif [[ $open_parens == ')' ]]; then\n                if [[ $close_parens_count -lt $open_parens_count ]]; then\n                    result=No\n                    break\n                fi\n            fi\n        fi\n    done\n    if [[ $result == Yes ]]; then\n        if [[ ${#stack[@]} -ne 0 ]]; then\n            result"], ["#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n  local -a arr=($1)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0"], ["#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  if [ \"$1\" -eq \"$2\" ] || [ \"$1\" -eq \"$3\" ] || [ \"$2\" -eq \"$3\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n  local number=\"$1\"\n  local integer_part\n  integer_part=$(printf \"%.0f\" \"$number\")\n  printf \"%.1f\" \"$(printf \"%.1f\" \"$number\" | cut -d'.' -f2)\""], ["#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n  local list=\"$1\"\n  local result=()\n  local i=0\n  local len=${#list}\n  while [ \"$i\" -lt \"$len\" ]; do\n    local item=\"${list:$i:1}\"\n    local next_item=$((item + 1))\n    result+=(\"$next_item\")\n    i=$((i + 1))\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    if [ $1 -eq 1 ]; then\n        echo $2\n    else\n        echo $3\n    fi"], ["#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n  local a=$1\n  local b=$2\n  local c=1\n  local d=0\n  while [ \"$b\" -gt 0 ]; do\n    local e=$(($b % 2))\n    local f=$(($a % $b))\n    local g=$(($a / $b))\n    local h=$(($c * $g))\n    local i=$(($d * $g))\n    local j=$(($f * $g))\n    local k=$(($c * $g))\n    local l=$(($d * $g))\n    local m=$(($c * $g))\n    local n=$(($d * $g))\n    local o=$(($c * $g))\n    local p=$(($d * $g))\n    local q=$(($c * $g))\n    local r=$(($d * $g))\n    local s=$(($c * $g))\n    local t=$(($d * $g))\n    local u=$(($c * $g))\n    local v=$(($d * $g))\n    local w=$(($c * $g))\n    local x=$(($d * $g))\n    local y=$(($c * $g))\n    local z=$(($d * $g))\n    local aa=$(($c * $g))\n    local bb=$(($d * $g))\n    local cc=$(($c * $g))\n    local dd=$(($d * $g))\n    local ee=$(($c * $g))\n    local ff=$(($d * $g))\n    local gg=$(($c * $g))\n    local hh=$(($d * $g))\n    local ii=$(($c * $g))\n    local jj=$(($d * $g))\n    local kk=$(($c * $g))\n    local ll=$(($d * $g))\n    local"], ["#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n  local number=\"$1\"\n  local even_count=0\n  local odd_count=0\n  local digit\n\n  for ((digit=0; digit<${#number}; digit++)); do\n    if [[ \"${number:$digit:1}\" -eq 0 ]]; then\n      continue\n    fi\n\n    if [[ \"${number:$digit:1}\" -eq 1 ]]; then\n      ((odd_count++))\n    else\n      ((even_count++))\n    fi\n  done\n\n  printf '[\"%d\", \"%d\"]' \"$even_count\" \"$odd_count\""], ["#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=\"$1\"\n  local len=\"${#s}\"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n "], ["#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local n=$1\n  local largest_prime=2\n  while [ $n -gt $largest_prime ]; do\n    if [ $n -eq 1 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 2 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 3 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 5 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 7 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 11 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 13 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 17 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 19 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 23 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 29 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 31 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 37 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 41 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 43 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 47 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 53 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 59 ]; then\n      echo $largest_prime\n      return\n    fi\n    if [ $n -eq 61 ]; then"], ["#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n    local sum=0\n    for ((i=0; i<${#1}; i++)); do\n        local char=${1:$i:1}\n        local char_code=$(printf \"%d\" \"'$char\")\n        if ((char_code >= 65 && char_code <= 90)); then\n            ((sum += char_code))\n        fi\n    done\n    printf \"%d\" \"$sum\""], ["#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n  local list=\"$1\"\n  local min=$(echo \"$list\" | awk '{print $1}')\n  local max=$(echo \"$list\" | awk '{print $NF}')\n  local range=$(echo \"$max - $min\" | bc)\n  local result=\"\"\n  for i in $list; do\n    local value=$(echo \"$i - $min\" | bc)\n    local percent=$(echo \"$value / $range\" | bc)\n    local scaled=$(echo \"$percent * 100\" | bc)\n    result=\"$result \\\"$scaled\\\"\"\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n  local -a arr=($1)\n  local sum=0\n  for ((i=0; i<${#arr[@]}; i+=2)); do\n    ((sum+=arr[i]))\n  done\n  echo $sum"], ["#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local -a nodes=($1)\n  local -a result=()\n  local -i smallest_even_value=10000\n  local -i smallest_even_value_index=0\n  local -i smallest_index=10000\n  local -i smallest_index_value=10000\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v"], ["#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local a=()\n    for ((i=1; i<=$n; i++)); do\n        a+=(\"$((i*i-i+1))\")\n    done\n    local count=0\n    for ((i=0; i<=$n-2; i++)); do\n        for ((j=i+1; j<=$n-1; j++)); do\n            for ((k=j+1; k<=$n; k++)); do\n                if ((a[i]+a[j]+a[k]%3==0)); then\n                    ((count++))\n                fi\n            done\n        done\n    done\n    echo \"$count\""], ["#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    local lst1 lst2\n    lst1=($1)\n    lst2=($2)\n    local i j\n    for ((i=0; i<${#lst1[@]}; i++)); do\n        for ((j=0; j<${#lst2[@]}; j++)); do\n            if ((lst1[i] == lst2[j])); then\n                lst1[i]=0\n                lst2[j]=0\n                break\n            fi\n        done\n    done\n    for ((i=0; i<${#lst1[@]}; i++)); do\n        if ((lst1[i] % 2)); then\n            return 1\n        fi\n    done\n    return 0"], ["#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  local n=$(echo \"$l\" | wc -w)\n  local m=$(echo \"$l\" | sort -n | awk \"NR==$((n+1)/2)\")\n  echo \"$m\""], ["#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n  local str=$1\n  local len=${#str}\n  local i=2\n  while [ $i -le $len ]; do\n    if [ $((len % i)) -eq 0 ]; then\n      return 1\n    fi\n    i=$((i + 1))\n  done\n  return 0"], ["#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n  local arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local j=0\n  local min=0\n  local count=0\n  while [ $i -lt $len ]; do\n    if [ ${arr[$i]} -ne ${arr[$len - $i - 1]} ]; then\n      ((count++))\n      if [ $count -lt $min ]; then\n        min=$count\n      fi\n      ((count=0))\n    fi\n    ((i++))\n  done\n  echo $min"], ["#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n    local sum=0\n    for i in $1; do\n        sum=$(bc <<< \"$sum + $i * $i\")\n    done\n    echo $sum"], ["#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    # Write your code here\n    if [[ $1 =~ ^[a-zA-Z]+\\.[a-zA-Z0-9]{0,3}\\.[a-zA-Z]+$ ]]; then\n        if [[ $1 =~ \\.[a-zA-Z]+$ ]]; then\n            if [[ $1 =~ \\.[a-zA-Z]+$ ]]; then\n                if [[ $1 =~ \\.[a-zA-Z]+$ ]]; then\n                    echo \"Yes\"\n                else\n                    echo \"No\"\n                fi\n            else\n                echo \"No\"\n            fi\n        else\n            echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi"], ["#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local -a arr=($1)\n  local -a sums=()\n  local -a sums_set=()\n  local -a sums_set_sorted=()\n  local -a sums_set_sorted_uniq=()\n  local -a sums_set_sorted_uniq_sorted=()\n  local -a sums_set_sorted_uniq_sorted_reversed=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq_sorted=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq_sorted_reversed=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq_sorted_reversed_uniq=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq_sorted_reversed_uniq_sorted=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq_sorted_reversed_uniq_sorted_reversed=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq_sorted_reversed_uniq_sorted_reversed_uniq=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq_sorted_reversed_uniq_sorted_reversed_uniq_sorted=()\n  local -a sums_set_sorted_uniq_sorted_reversed_uniq_sorted_reversed_uniq_sorted_reversed_uniq_sorted_reversed=()\n  local -a sums_set_sorted_"], ["#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    local a1=$1\n    local a2=$2\n    local a1_start=$(echo $a1 | cut -d' ' -f1)\n    local a1_end=$(echo $a1 | cut -d' ' -f2)\n    local a2_start=$(echo $a2 | cut -d' ' -f1)\n    local a2_end=$(echo $a2 | cut -d' ' -f2)\n    local a1_length=$(expr $a1_end - $a1_start + 1)\n    local a2_length=$(expr $a2_end - $a2_start + 1)\n    local a1_end_index=$(expr $a1_start + $a1_length - 1)\n    local a2_end_index=$(expr $a2_start + $a2_length - 1)\n    local a1_start_index=$(expr $a1_start - 1)\n    local a2_start_index=$(expr $a2_start"], ["#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n  local -r input=\"$1\"\n  local -r regex='[^()]+|\\([^()]*\\)'\n  local -r groups=($(echo \"$input\" | grep -oE \"$regex\"))\n  local -r result=($(echo \"${groups[@]}\" | grep -oE \"$regex\"))\n  echo \"${result[@]}\""], ["#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n  local scores=$1\n  local guesses=$2\n  local result=()\n  local score\n  local guess\n  local diff\n  local i\n  for ((i=0; i<${#scores}; i++)); do\n    score=${scores[i]}\n    guess=${guesses[i]}\n    diff=$((${guess} - ${score}))\n    if [[ ${diff} -lt 0 ]]; then\n      diff=$((${diff} * -1))\n    fi\n    result+=(${diff})\n  done\n  echo ${result[@]}"], ["#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n  local n=$1\n  local count=0\n  for ((i=1; i<=$n; i++)); do\n    if [[ $i == 1 ]]; then\n      count=$((count+1))\n    elif [[ $i == $n ]]; then\n      count=$((count+1))\n    else\n      count=$((count+2))\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  local string=\"$1\"\n  local last_char=\"${string: -1}\"\n  if [[ \"$last_char\" =~ [a-zA-Z] ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n  local date=\"$1\"\n  local month\n  local day\n  local year\n  local days_in_month\n\n  if [ -z \"$date\" ]; then\n    return 1\n  fi\n\n  IFS='-' read -r month day year <<< \"$date\"\n\n  if [ -z \"$month\" ] || [ -z \"$day\" ] || [ -z \"$year\" ]; then\n    return 1\n  fi\n\n  if [ \"$month\" -lt 1 ] || [ \"$month\" -gt 12 ]; then\n    return 1\n  fi\n\n  if [ \"$month\" -eq 2 ]; then\n    if [ $(is_leap_year \"$year\") -eq 1 ]; then\n      days_in_month=29\n    else\n      days_in_month=28\n    fi\n  elif [ \"$month\" -eq 4 ] || [ \"$month\" -eq "], ["#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n    local -a nums=($(echo \"$1\" | tr ' ' '\\n'))\n    local -i sum=0\n    for num in \"${nums[@]}\"; do\n        sum=$((sum + num))\n    done\n    echo \"$sum\" | grep -o '[0-9]' | grep -q '^[0-9]' && echo \"1\" || echo \"0\""], ["#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n    local str=$1\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local word=\"\"\n    local new_word=\"\"\n    local new_str=\"\"\n    local word_arr=()\n    local new_word_arr=()\n    local new_str_arr=()\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${str:$i:1} == \" \" ]]; then\n            word_arr+=(\"${word}\")\n            word=\"\"\n        else\n            word=\"${word}${str:$i:1}\"\n        fi\n    done\n    word_arr+=(\"${word}\")\n\n    for ((i=0; i<${#word_arr[@]}; i++)); do\n        for ((j=0; j<${#word_arr[$i]}; j++)); do\n            new_word_arr+=(\"${word_arr[$i]:$j:1}\")\n        done\n    done\n\n    for ((i=0; i<${#new_word_arr[@]}; i++)); do\n        for ((j=0; j<${#new_word_arr[@]}; j++)); do\n            if [[ ${new_word_arr[$i]} -lt ${new_word_arr[$j]} ]]; then\n                k=$((i+1))\n                new_word_arr[$i]=\"${new_word_arr[$j]}\"\n                new_word_arr[$j]=\"${new_word_arr[$k]}\"\n            fi\n        done\n    done\n\n    for ((i=0; i<${#new_word_arr[@]}; i++)); do\n        new_str=\"${new_str}${new_word_arr[$i]}\""], ["#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n  local str=\"$1\"\n  local len=\"${#str}\"\n  local i=0\n  local j=$((len - 1))\n  while [ \"$i\" -lt \"$j\" ]; do\n    if [ \"${str:$i:1}\" != \"${str:$j:1}\" ]; then\n      echo \"false\"\n      return\n    fi\n    i=$((i + 1))\n    j=$((j - 1))\n  done\n  echo \"true\""], ["#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local word=$1\n    local vowels=\"aeiou\"\n    local vowel_found=false\n    local vowel_index=0\n    local vowel_found_index=0\n    local vowel_found_distance=0\n    local vowel_found_distance_index=0\n    local vowel_found_distance_index_temp=0\n    local vowel_found_distance_temp=0\n    local vowel_found_distance_temp_index=0\n    local vowel_found_distance_temp_index_temp=0\n    local vowel_found_distance_temp_index_temp_temp=0\n    local vowel_found_distance_temp_index_temp_temp_temp=0\n    local vowel_found_distance_temp_index_temp_temp_temp_temp=0\n    local vowel_found_distance_temp_index_temp_temp_temp_temp_temp=0\n    local vowel_found_distance_temp_index_temp_temp_temp_temp_temp_temp=0\n    local vowel_found_distance_temp_index_temp_temp_temp_temp_temp_temp_temp=0\n    local vowel_found_distance_temp_index_temp_temp_temp_temp_temp_temp_temp_temp=0\n    local vowel_found_distance_temp_index_temp_temp_temp_temp_temp_temp_temp_temp_temp=0\n    local vowel_found_distance_temp_index_"], ["#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n  if [ \"$1\" -lt 2 ]; then\n    echo \"false\"\n  elif [ \"$1\" -eq 2 ]; then\n    echo \"true\"\n  else\n    for (( i=2; i<=$1/2; i++ )); do\n      if [ \"$1\" -eq $((i*i)) ]; then\n        echo \"false\"\n        return\n      fi\n    done\n    echo \"true\"\n  fi"], ["#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n  local x=$1\n  local n=$2\n  local x_numerator=$(echo $x | cut -d'/' -f1)\n  local x_denominator=$(echo $x | cut -d'/' -f2)\n  local n_numerator=$(echo $n | cut -d'/' -f1)\n  local n_denominator=$(echo $n | cut -d'/' -f2)\n  local result=$(echo \"$x_numerator * $n_denominator\" | bc)\n  local result_numerator=$(echo \"$result / $x_denominator\" | bc)\n  if [ \"$result_numerator\" -eq \"$n_numerator\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n    local hex_key_result=\"\"\n    local hex_key_digit=\"\"\n    local hex_key_digit_count=0\n    local hex_key_digit_is_prime=0\n    local hex_key_digit_is_hex=0\n    local hex_key_digit_is_prime_count=0\n    local hex_key_digit_is_hex_count=0\n    local hex_key_digit_is_prime_hex_count=0\n    local hex_key_digit_is_prime_hex_count_max=0\n    local hex_key_digit_is_prime_hex_count_max_digit=\"\"\n    local hex_key_digit_is_prime_hex_count_max_digit_count=0\n    local hex_key_digit_"], ["#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n  local sentence=\"$1\"\n  local words_in_sentence=\"\"\n  local word\n  for word in $sentence; do\n    if is_prime \"$(( ${#word} ))\"; then\n      words_in_sentence=\"$words_in_sentence $word\"\n    fi\n  done\n  echo \"$words_in_sentence\""], ["#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local histogram_string=\"$1\"\n  local histogram_result=\"\"\n  local histogram_letter=\"\"\n  local histogram_count=\"\"\n  local histogram_letter_count=\"\"\n  local histogram_letter_count_max=\"\"\n  local histogram_letter_count_max_letter=\"\"\n  local histogram_letter_count_max_count=\"\"\n  local histogram_letter_count_max_count_letter=\"\"\n  local histogram_letter_count_max_count_letter_count=\"\"\n  local histogram_letter_count_max_count_letter_count_letter=\"\"\n  local histogram_letter_count_max_count_letter_count_letter_count=\"\"\n  local histogram_letter_count_max_count_letter_count_letter_count_letter=\"\"\n  local histogram_letter_count_max_count_letter_count_letter_count_letter_count=\"\"\n  local histogram_letter_count_max_count_letter_count_letter_count_letter_count_letter=\"\"\n  local histogram_letter_count_max_count_letter_count_letter_count_letter_count_letter_count=\"\"\n  local histogram_letter_count_max_count_letter_count_letter_count_letter_count_letter_count_letter=\"\"\n  local histogram_letter_count_max_count_letter_count_letter_count_letter_count_letter_count_letter_count=\"\"\n  local histogram_letter_count_max_count_letter_count_letter_count_letter"], ["#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n  local lst=\"$1\"\n  local x=\"$2\"\n  local result=()\n  local row=0\n  local col=0\n  local row_len=0\n  local col_len=0\n  local row_arr=()\n  local col_arr=()\n  local row_arr_len=0\n  local col_arr_len=0\n  local row_arr_str=\"\"\n  local col_arr_str=\"\"\n  local row_arr_str_len=0\n  local col_arr_str_len=0\n  local row_arr_str_arr=()\n  local col_arr_str_arr=()\n  local row_arr_str_arr_len=0\n  local col_arr_str_arr_len=0\n  local row_arr_str_arr_str=\"\"\n  local col_arr_str_arr_str=\"\"\n  local row_arr_str_arr_str_len=0\n  local col_arr_str_arr_str_len=0\n  local row_"], ["#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n  local n=$1\n  local result=()\n  while [ $n -gt 1 ]; do\n    if [ $(($n % 2)) -eq 0 ]; then\n      n=$(($n / 2))\n    else\n      n=$(($n * 3 + 1))\n    fi\n    result+=(\"$n\")\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local -a arr=($1)\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n  local -i max=-1\n  local -i max_index=-1\n  local -i prev=-1\n  local -i prev_index=-1\n  local -i curr=-1\n  local -i curr_index=-1\n\n  for ((i=0; i<n; i++)); do\n    curr=${arr[i]}\n    curr_index=$i\n    if ((curr > prev)); then\n      if ((curr > max)); then\n        max=$curr\n        max_index=$curr_index\n      fi\n      prev=$curr\n      prev_index=$curr_index\n    fi\n  done\n\n  if ((max_index == prev_index)); then\n    echo -1\n  else\n    echo $max_index\n  fi"], ["#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n  local numbers=\"$1\"\n  local sorted_numbers=\"\"\n  local number\n  for number in $numbers; do\n    if [[ $number == \"zero\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"one\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"two\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"three\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"four\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"five\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"six\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"seven\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"eight\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    elif [[ $number == \"nine\" ]]; then\n      sorted_numbers=\"$sorted_numbers $number\"\n    else\n      echo \"Invalid number: $number\"\n      return 1\n    fi\n  done\n  echo \"$sorted_numbers\""], ["#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local length=\"${#x}\"\n  local result=\"\"\n  local i=0\n  while [ \"$i\" -lt \"$length\" ]; do\n    local index=$((i + shift))\n    if [ \"$index\" -ge \"$length\" ]; then\n      index=$((index - length))\n    fi\n    result=\"${result}${x:$index:1}\"\n    i=$((i + 1))\n  done\n  echo \"$result\""], ["#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n    local sum=0\n    local i=0\n    local len=${#1}\n    local val\n    for ((i=0; i<len; i++)); do\n        val=${1[i]}\n        if ((i%3==0)); then\n            val=$((val*val))\n        fi\n        if ((i%4==0)); then\n            val=$((val*val*val))\n        fi\n        sum=$((sum+val))\n    done\n    echo $sum"], ["#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n    local -a arr=($1)\n    local -i max=0\n    local -i sum=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ne $max ]]; then\n            if [[ $i -gt 1 ]]; then\n                local -i j=2\n                while [[ $j -le $i ]]; do\n                    if [[ $i % $j -eq 0 ]]; then\n                        break\n                    fi\n                    j=$((j+1))\n                done\n                if [[ $j -gt $i ]]; then\n                    sum=$((sum+i))\n                fi\n            fi\n        fi\n    done"], ["#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n  local sum=0\n  local product=1\n  local -a arr=($1)\n  for i in \"${arr[@]}\"; do\n    sum=$((sum + i))\n    product=$((product * i))\n  done\n  echo \"\\\"$sum\\\"\"\n  echo \"\\\"$product\\\"\""], ["#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    local x=$1\n    local y=$2\n    local result=-1\n    local i=0\n    while [ $i -le $y ]; do\n        if [ $i -ge $x ] && [ $i -le $y ] && [ $i -eq $((i%2)) ]; then\n            result=$i\n        fi\n        i=$((i+1))\n    done\n    echo $result"], ["#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local -a numbers\n    local -i max_neg_int=0\n    local -i min_pos_int=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n   "], ["#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n  local string=\"$1\"\n  local count=0\n  for ((i=0; i<${#string}; i++)); do\n    local char=\"${string:$i:1}\"\n    if [[ \"$char\" =~ [a-zA-Z] ]]; then\n      local char_lower=\"$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n      if [[ \"$char_lower\" != \"$char\" ]]; then\n        local char_upper=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n        if [[ \"$char_upper\" != \"$char\" ]]; then\n          ((count++))\n        fi\n      else\n        ((count++))\n      fi\n    fi\n  done\n  echo \"$count\""], ["#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local result=\"\"\n  local next_level=\"\"\n  local next_level_size=\"\"\n  local next_level_size_is_odd=\"\"\n  local next_level_size_is_even=\"\"\n\n  if [[ $n -eq 1 ]]; then\n    result=\"\\\"$n\\\"\"\n  else\n    if [[ $n -eq 2 ]]; then\n      result=\"\\\"$n\\\"\"\n    else\n      if [[ $n -eq 3 ]]; then\n        result=\"\\\"$n\\\"\"\n      else\n        if [[ $n -eq 4 ]]; then\n          result=\"\\\"$n\\\"\"\n        else\n          if [[ $n -eq 5 ]]; then\n            result=\"\\\"$n\\\"\"\n          else\n            if [[ $n -eq 6 ]]; then\n              result=\"\\\"$n\\\"\"\n            else\n              if [[ $n -eq 7 ]]; then\n                result=\"\\\"$n\\\"\"\n              else\n                if [[ $n -eq 8 ]]; then\n                  result=\"\\\"$n\\\"\"\n                else\n                  if [[ $n -eq 9 ]]; then\n                    result=\"\\\"$n\\\"\"\n                  else\n                    if [[ $n -eq 10 ]]; then\n                      result=\"\\\"$n\\\"\"\n                    else\n                      if [[ $n -eq 11 ]]; then\n                        result=\"\\\"$n\\\"\"\n                      else\n                        if [[ $n -eq 12 ]]; then\n                          result=\"\\\"$n\\\"\"\n                        else\n                          if [[ $n -eq 13 ]]; then\n                            result=\"\\\"$n\\\"\"\n                          else\n                            if [[ $n -eq 14 ]]; then\n                              result=\"\\\"$n\\\"\"\n                            else\n                              if [[ $n -eq 15 ]]; then\n                                result=\"\\\"$n\\\"\"\n                              else\n                                if [["], ["#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n    local arr=($(echo \"$1\" | tr ' ' '\\n'))\n    local sum=0\n    local sign=1\n    for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            sign=0\n        elif [[ $i -gt 0 ]]; then\n            sign=1\n        else\n            sign=-1\n        fi\n        sum=$((sum + sign * i))\n    done\n    echo \"$sum\""], ["#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n  local -a nums=($1)\n  local -i sum=0\n  local -i min_sum=0\n  local -i min_index=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#nums[@]}\n  local -i m=0\n  local -i l=0\n  local -i r=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n="], ["#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n  local n=$1\n  local i=0\n  local result=\"\"\n  while [ $i -lt $n ]; do\n    result=\"$result $i\"\n    i=$((i + 1))\n  done\n  echo \"$result\""], ["#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n    local word1=$1\n    local word2=$2\n    local word1_length=${#word1}\n    local word2_length=${#word2}\n    local word1_rotated_length=$((word1_length + word2_length))\n    local word2_rotated_length=$((word2_length + word1_length))\n    local word1_rotated_word2_length=$((word1_length + word2_length - 1))\n    local word2_rotated_word1_length=$((word2_length + word1_length - 1))\n    local word1_rotated_word2_substring_length=$((word1_length - word2_length + 1))\n    local word2_rotated_word1_substring_length=$((word2_length - word1_length + 1))\n    local word1_rotated_word2_substring_start=$((word1_length - word2_length + 1))\n    local word2_rotated_word1_substring_start=$((word2_length - word1_length + 1))\n    local word1_rotated_word2_substring_end=$((word1_length - 1))\n    local word2_rotated_word1_substring_end=$((word2_length - 1))\n    local word1_rotated_word2_substring_end_inclusive=$((word1_length - 1))\n    local word2_"], ["#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  local prev\n  local curr\n  local i\n  local len\n  local is_monotonic=true\n\n  len=$(echo \"$list\" | wc -w)\n  for ((i=0; i<len; i++)); do\n    curr=$(echo \"$list\" | cut -d' ' -f\"$i\")\n    if [ -z \"$prev\" ]; then\n      prev=\"$curr\"\n      continue\n    fi\n    if [ \"$prev\" -gt \"$curr\" ]; then\n      is_monotonic=false\n      break\n    fi\n    prev=\"$curr\"\n  done\n\n  echo \"$is_monotonic\""], ["#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n    local longest_string=\"\"\n    local longest_length=0\n    local string\n    for string in $1; do\n        local length=${#string}\n        if [ $length -gt $longest_length ]; then\n            longest_string=$string\n            longest_length=$length\n        fi\n    done\n    echo \"$longest_string\""], ["#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n  local l=\"$1\"\n  local t=\"$2\"\n  local i\n  for i in $l; do\n    if [ \"$i\" -ge \"$t\" ]; then\n      return 1\n    fi\n  done\n  return 0"], ["#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n    local number=$1\n    local is_prime=true\n    local i=2\n    while [ $i -lt $number ] && $is_prime; do\n        if [ $(is_prime $i) == \"true\" ]; then\n            if [ $(is_prime $(($number/$i))) == \"true\" ]; then\n                is_prime=true\n            else\n                is_prime=false\n            fi\n        else\n            is_prime=false\n        fi\n        i=$((i+1))\n    done\n    echo $is_prime"], ["#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n  local list=\"$1\"\n  local result=()\n  for i in $list; do\n    if [[ $i -gt 0 ]]; then\n      result+=(\"$i\")\n    fi\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n  local l=\"$1\"\n  local l_sorted\n  local l_sorted_joined\n  local l_sorted_joined_quoted\n  local l_sorted_joined_quoted_split\n  local l_sorted_joined_quoted_split_joined\n  local l_sorted_joined_quoted_split_joined_quoted\n  local l_sorted_joined_quoted_split_joined_quoted_split\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted_split\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined_quoted\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined_quoted_split\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined_quoted\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined_quoted_split_joined_quoted_split\n  local l_sorted_joined_quoted_split_joined_quoted_split_joined_quoted_split"], ["#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n  local -a result=()\n  local -a stack=()\n  local -a group=()\n  local -a group_stack=()\n  local -a group_result=()\n  local -a group_stack_result=()\n  local -a group_stack_result_str=()\n  local -a group_result_str=()\n  local -a group_stack_result_str_str=()\n  local -a group_result_str_str=()\n  local -a group_stack_result_str_str_str=()\n  local -a group_result_str_str_str=()\n  local -a group_stack_result_str_str_str_str=()\n  local -a group_result_str_str_str_str=()\n  local -a group_stack_result_str_str_str_str_str=()\n  local -a group_result_str_str_str_str_str=()\n  local -a group_stack_result_str_str_str_str_str_str=()\n  local -a group_result_str_str_str_str_str_str=()\n  local -a group_stack_result_str_str_str_str_str_str_str=()\n  local -a group_result_str_str_str_str_str_str_str=()\n  local -a group_stack_result_str_str_str_str_str_str_str_str=()\n  local -a group_result_str_str_str_str_str_str_str_str=()\n  local -a group_stack_result_str_str_str_str_str_str_str_str_str=()\n  local -a group_result_str_str_str_str_str_str_str_str_str=()\n  local -a group_stack_result"], ["#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n  local side_a=$1\n  local side_b=$2\n  local area=$(($side_a * $side_b / 2))\n  echo \"$area\""], ["#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    local a=$1\n    local b=$2\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local s"], ["#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n  local list=\"$1\"\n  local mean\n  mean=$(mean \"$list\")\n  local sum=0\n  for number in $list; do\n    local diff=$(echo \"$number - $mean\" | bc)\n    local abs=$(echo \"$diff < 0 ? -$diff : $diff\" | bc)\n    sum=$(echo \"$sum + $abs\" | bc)\n  done\n  echo \"$sum / $list\" | bc"], ["#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n  local -a a=($1)\n  local -a b=($2)\n  local -a c=($(comm -12 <(printf '%s\\n' \"${a[*]}\") <(printf '%s\\n' \"${b[*]}\")))\n  printf '%s\\n' \"${c[@]}\""], ["#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n  local num=$1\n  local roman=\"\"\n  local roman_map=(\n    \"1000\" \"M\"\n    \"900\" \"CM\"\n    \"500\" \"D\"\n    \"400\" \"CD\"\n    \"100\" \"C\"\n    \"90\" \"XC\"\n    \"50\" \"L\"\n    \"40\" \"XL\"\n    \"10\" \"X\"\n    \"9\" \"IX\"\n    \"5\" \"V\"\n    \"4\" \"IV\"\n    \"1\" \"I\"\n  )\n  for i in \"${roman_map[@]}\"; do\n    local count=${i%% *}\n    local char=${i#* }\n    while [ $count -gt 0 ]; do\n      roman+=$char\n      count=$((count - 1))\n    done\n  done\n  echo \"$roman\""], ["#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n  local apples_oranges_string=$1\n  local total_fruits_in_basket=$2\n  local apples_oranges_array=($(echo $apples_oranges_string | tr \" \" \"\\n\"))\n  local apples_in_basket=${apples_oranges_array[0]}\n  local oranges_in_basket=${apples_oranges_array[2]}\n  local mango_fruits_in_basket=$((total_fruits_in_basket - apples_in_basket - oranges_in_basket))\n  echo $mango_fruits_in_basket"], ["#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    local s=$1\n    local c=$2\n    local result=\"\"\n    local is_palindrome=true\n    for ((i=0; i<${#s}; i++)); do\n        if [[ ${s:$i:1} != ${c} ]]; then\n            result+=${s:$i:1}\n        else\n            is_palindrome=false\n        fi\n    done\n    echo -e \"\\\"${result}\\\"\\n\\\"${is_palindrome}\\\"\""], ["#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n  local a=$1\n  local b=$2\n  local c\n  while [ \"$b\" -ne \"0\" ]; do\n    c=$((a % b))\n    a=$b\n    b=$c\n  done\n  echo \"$a\""], ["#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n    local str=\"$1\"\n    local words=()\n    local word=\"\"\n    local i=0\n    local j=0\n    local len=${#str}\n    local c=\"\"\n    local is_word=0\n    local is_space=0\n    local is_comma=0\n    local is_quote=0\n    local is_escape=0\n    local is_escape_quote=0\n    local is_escape_backslash=0\n    local is_escape_slash=0\n    local is_escape_n=0\n    local is_escape_r=0\n    local is_escape_t=0\n    local is_escape_b=0\n    local is_escape_f=0\n    local is_escape_v=0\n    local is_escape_a=0\n    local is_escape_e=0\n    local is_escape_x=0\n    local is_escape_u=0\n    local is_escape_U=0\n    local is_escape_c=0\n    local is_escape_d=0\n    local is_escape_o=0\n    local is_escape_0=0\n    local is_escape_1=0\n    local is_escape_2=0\n    local is_escape_3=0\n    local is_escape_4=0\n    local is_escape_5=0\n    local is_escape_6=0\n    local is_escape_7=0\n    local is_escape_8=0\n    local is_escape_9=0\n    local is_escape_x=0\n    local is_escape_u=0\n    local is_escape_U=0\n    local is_escape"], ["#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a arr=($1)\n  local -a sorted=()\n  local -a ones=()\n  local -a zeros=()\n  local -a rest=()\n  local -a result=()\n\n  for i in \"${arr[@]}\"; do\n    if [[ $i == -* ]]; then\n      zeros+=($i)\n    elif [[ $i == 0 ]]; then\n      zeros+=($i)\n    elif [[ $i == 1 ]]; then\n      ones+=($i)\n    else\n      rest+=($i)\n    fi\n  done\n\n  for i in \"${ones[@]}\"; do\n    sorted+=($i)\n  done\n\n  for i in \"${zeros[@]}\"; do\n    sorted+=($i)\n  done\n\n  for i in \"${rest[@]}\"; do\n    sorted+=($i)\n  done\n\n  for i in \"${sorted[@]}\"; do\n    result+=($i)\n  done\n\n  echo ${result[@]}"], ["#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n  local IFS=\" \"\n  echo \"$*\""], ["#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n  local -a list=($1)\n  local -a sorted_list\n  local sum=0\n  for i in \"${list[@]}\"; do\n    (( sum += i ))\n  done\n  echo $sum"], ["#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write your code here\n    local num=$1\n    local num_int=$(echo $num | cut -d'.' -f1)\n    local num_dec=$(echo $num | cut -d'.' -f2)\n    local num_dec_len=${#num_dec}\n    local num_dec_int=$(echo $num_dec | cut -d'.' -f1)\n    local num_dec_dec=$(echo $num_dec | cut -d'.' -f2)\n    local num_dec_dec_len=${#num_dec_dec}\n    local num_dec_dec_int=$(echo $num_dec_dec | cut -d'.' -f1)\n    local num_dec_dec_dec=$(echo $num_dec_dec | cut -d'.' -f2)\n    local num_dec_dec_dec_len=${#num_dec_dec_dec}\n    local num_dec_dec_dec_int=$(echo $num_dec_dec_dec | cut -d'.' -f1)\n    local num_dec_dec_dec_dec=$(echo $num_dec_dec_dec | cut -d'.' -f2)\n    local num_dec_dec_dec_dec_len=${#num_dec_dec_dec_dec}\n    local num_dec_dec_dec_dec_int=$(echo $num_dec_dec_dec_dec | cut -d'.' -f1)\n    local num_dec_dec_"], ["#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n    local word=\"$1\"\n    local count=0\n    for ((i=0; i<${#word}; i++)); do\n        case \"${word:$i:1}\" in\n            [aeiouAEIOU])\n                ((count++))\n                ;;\n            [yY] && [[ ${word:$i} == ${word}* ]]; then\n                ((count++))\n                ;;\n        esac\n    done\n    echo \"$count\""], ["#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n  local -a words=($1)\n  local max_word=\n  local max_unique_chars=0\n  for word in \"${words[@]}\"; do\n    local unique_chars=$(echo \"$word\" | tr -cd '[:alnum:]' | wc -c)\n    if (( unique_chars > max_unique_chars )); then\n      max_word=\"$word\"\n      max_unique_chars=$unique_chars\n    elif (( unique_chars == max_unique_chars )); then\n      if [[ \"$word\" < \"$max_word\" ]]; then\n        max_word=\"$word\"\n      fi\n    fi\n  done\n  echo \"$max_word\""], ["#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n  if [ -z \"$1\" ]; then\n    echo \"None\"\n  else\n    echo -n \"$1\" | md5sum | cut -d' ' -f1\n  fi"], ["#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    local x=\"$1\"\n    local base=\"$2\"\n    local result=\"\"\n    local i\n    local digit\n    local remainder\n\n    if [ \"$base\" -lt 2 ] || [ \"$base\" -gt 10 ]; then\n        echo \"Invalid base: $base\" >&2\n        return 1\n    fi\n\n    for ((i = 0; i < ${#x}; i++)); do\n        digit=\"${x:$i:1}\"\n        remainder=\"$((digit % base))\"\n        result=\"$result$remainder\"\n    done\n\n    echo \"$result\""], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n  if [ \"$1\" -eq \"$2\" ] && [ \"$2\" -eq \"$3\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    local -a grades=($(echo \"$1\" | tr ' ' '\\n'))\n    local -a letter_grades=()\n    for grade in \"${grades[@]}\"; do\n        if (( grade >= 4 )); then\n            letter_grades+=(\"A+\")\n        elif (( grade >= 3.7 )); then\n            letter_grades+=(\"A\")\n        elif (( grade >= 3.3 )); then\n            letter_grades+=(\"A-\")\n        elif (( grade >= 3 )); then\n            letter_grades+=(\"B+\")\n        elif (( grade >= 2.7 )); then\n            letter_grades+=(\"B\")\n        elif (( grade >= 2.3 )); then\n            letter_grades+=(\"B-\")\n        elif (( grade >= 2 )); then\n            letter_grades+=(\"C+\")\n        elif (( grade >= 1.7 )); then\n            letter_grades+=(\"C\")\n        elif (( grade >= 1.3 )); then\n            letter"], ["#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n  local IFS=$'\\n'\n  local -a numbers=($1)\n  local -i delimeter=$2\n  local -i i=0\n  local -i j=0\n  local -i n=${#numbers[@]}\n  local -a result=()\n\n  for ((i=0; i<n; i++)); do\n    result[j++]=${numbers[i]}\n    if ((i<n-1)); then\n      result[j++]=${delimeter}\n    fi\n  done\n\n  echo ${result[@]}"], ["#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n    local -a arr=($1)\n    local -i count=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i =~ ^[0-9]+$ ]] && [[ $i =~ ^[13579]$ ]] && [[ $i =~ ^[13579]$ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count"], ["#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++)); do\n        sum=$((sum+i))\n    done\n    echo $sum"], ["#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n  local -a arr=($1)\n  local -a result=()\n  for i in \"${arr[@]}\"; do\n    if [[ ! \" ${result[@]} \" =~ \" ${i} \" ]]; then\n      result+=(\"$i\")\n    fi\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a=$1\n  local b=$2\n  local result=()\n  local i=0\n  while [ $a -le $b ]; do\n    if [ $((a % 2)) -eq 0 ]; then\n      result[$i]=\"\\\"$a\\\"\"\n      i=$((i + 1))\n    fi\n    a=$((a + 1))\n  done\n  echo ${result[@]}"], ["#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n  local -a arr=($1)\n  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -"], ["#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n  local balance=0\n  for op in $1; do\n    case $op in\n      +*) balance=$((balance + ${op:1})) ;;\n      -*) balance=$((balance - ${op:1})) ;;\n    esac\n    if [ $balance -lt 0 ]; then\n      echo \"true\"\n      return\n    fi\n  done\n  echo \"false\""], ["#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local -a arr=($1)\n    local -i max=0\n    local -i max_index=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((arr[i] > max)); then\n            max=${arr[i]}\n            max_index=$i\n        fi\n    done\n    if ((max == 0)); then\n        echo \"-1\"\n    else\n        echo \"${arr[max_index]}\"\n    fi"], ["#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for char in $brackets; do\n    if [ \"$char\" == \"(\" ]; then\n      stack=\"$stack$char\"\n    elif [ \"$char\" == \")\" ]; then\n      if [ \"$stack\" == \"\" ]; then\n        return 1\n      else\n        stack=\"${stack%?}\"\n      fi\n    fi\n  done\n  if [ \"$stack\" == \"\" ]; then\n    return 0\n  else\n    return 1\n  fi"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n  local l=\"$1\"\n  local l_even=\"\"\n  local l_odd=\"\"\n  local i=0\n  local j=0\n  local len=$(echo \"$l\" | wc -w)\n  while [ \"$i\" -lt \"$len\" ]; do\n    if [ \"$i\" -eq \"$j\" ]; then\n      l_even=\"$l_even $(echo \"$l\" | cut -d ' ' -f \"$i\")\"\n      j=$((j + 2))\n    else\n      l_odd=\"$l_odd $(echo \"$l\" | cut -d ' ' -f \"$i\")\"\n    fi\n    i=$((i + 1))\n  done\n  echo \"$l_odd $l_even\""], ["#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n  local str1=$1\n  local str2=$2\n  local len1=${#str1}\n  local len2=${#str2}\n  local i=0\n  local j=0\n  local result=true\n  while [ $i -lt $len1 ] && [ $j -lt $len2 ]; do\n    if [ ${str1:$i:1} != ${str2:$j:1} ]; then\n      result=false\n      break\n    fi\n    ((i++))\n    ((j++))\n  done\n  echo $result"], ["#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for bracket in $(echo \"$brackets\"); do\n    if [ \"$bracket\" == \"<\" ]; then\n      stack=\"$stack<\"\n    else\n      if [ \"$bracket\" == \">\" ]; then\n        if [ \"$stack\" == \"\" ]; then\n          echo \"false\"\n          return\n        fi\n        stack=\"${stack%?}\"\n      fi\n    fi\n  done\n  if [ \"$stack\" == \"\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"]]